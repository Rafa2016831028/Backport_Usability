Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"58991775","12151830","2019-11-22 10:00:32","3","332","<git><git-commit>","How to edit the commit date when using git commit --reedit-message?","<p>I recently used <code>git commit --reedit-message=HEAD</code>, to make a new commit while using most of the text from the HEAD. All went well till I observed that after committing, the new commit showed the same date stamp as the previous HEAD.</p>

<p>The log (pretty) looked like this</p>

<pre><code>hash   , auth date , message
86fb360, 2019-11-16, copied commit (committed on 2019-11-21)
6dc9583, 2019-11-16, original commit (committed on 2019-11-16)
</code></pre>

<p>The basic log command <code>git log -1</code>also showed the old date.</p>

<p>Why did this happen?</p>

<p>How to make the actual commit date appear on the new commit when using the above command?</p>
","0","12151830","",""
"19364466","1312911","2013-10-14 16:07:01","1","570","<git><git-commit>","How to salvage a git commit with a keyboard interrupt","<p>I had a handful of files I wanted to commit, but was planning on committing them in smaller groups so as to have a clean history in case I wanted to review/rollback.  I went to commit a subset, but realized I missed one.  While git commit was running, I did a Ctrl + C keyboard interrupt (instinct for killing a process, obviously not the right move here).  I found that git wiped my local files &amp; was totally lost in the history, so much that i had to delete the local branch &amp; pull it again.  I couldn't find my files anywhere, not even with git fsck &amp; looking though all the dangling blobs/commits. </p>

<p>I think the answer to this question is, ""yeah, don't ever do that"" but was curious if anyone else had ever made the same mistake but happened to know a way to recover &amp; not end up losing a bunch of work.</p>

<p>Late nights can definitely make a mess. :-)</p>
","0","1312911","0","0"
"179123","7473","2008-10-07 15:44:47","7650","3455185","<git><git-commit><git-rewrite-history><git-amend>","How to modify existing, unpushed commit messages?","<p>I wrote the wrong thing in a commit message.</p>

<p>How can I change the message? The commit has not been pushed yet.</p>
","1","7473","0","0"
"57519403","10040804","2019-08-16 05:44:49","1","1721","<git><gerrit><git-commit><git-rebase><git-pull>","Why different ways to resolve conflicts cause to different conflicts?","<p>I would like to find an answer to why <strong>git behaves differently</strong> when I try to merge my local changes with those of master, <strong>depending on the commands and sequence used</strong>.</p>

<p>To ensure that I start from a clean environment, I reset everything to the latest local commit <code>69cf18c...</code> and then I cherry-pick my own changes (just one file) stored already in a Gerrit server:</p>

<pre><code>git reset --hard 69cf18c...
git fetch ssh://...  &amp;&amp; git cherry-pick FETCH_HEAD
</code></pre>

<p>From here I have tried 3 ways to solve it and only the third one works well:</p>

<p><strong>Option 1: Pull with rebase</strong></p>

<pre><code>git pull --rebase
</code></pre>

<p>Git will show me <strong>hundreds</strong> of changes that have nothing to do with the file I cherry-picked. Even if I try <code>git rebase --skip</code> another mysterious conflict will come, again and again, indefinitely. <strong>Why is this happening?</strong> Is my local history <em>polluted</em> with some older local commits that distort the rebase?</p>

<p><strong>Option 2: Pull without rebase</strong></p>

<pre><code>git pull
</code></pre>

<p>Git will show me only one conflict, the one which has to do with my file, up to here everything ok. However after solving the conflict and running <code>git add -u &amp;&amp; git commit</code>, git creates a new commit on top of mine which I cannot merge together with mine running <code>git rebase --interactive HEAD~2</code> (then I would <em>pick</em> and <em>squash</em> respectively):</p>

<pre><code>git log
commit f65738375
Merge: 6c4e66a f235f75
       ...
commit 6c4e66a88
       ...
</code></pre>

<p>Git does not list it in the editor the commit ""Merge"", but instead hundreds of other commits. <strong>Why cannot I merge the conflict into my commit?</strong></p>

<p><strong>Option 3: Reset, pull and then cherry-pick</strong></p>

<p>If I cherry-pick after pulling, everything works fine:</p>

<pre><code>git reset --hard 69cf18c...
git pull
git fetch ssh://...  &amp;&amp; git cherry-pick FETCH_HEAD
# solve the conflict
git add -u &amp;&amp; git commit -c FETCH_HEAD
</code></pre>

<p><strong>Why in this order everything works smoothly?</strong></p>

<p>Is there an explanation for these 3 options? Thank you in advance!</p>
","1","10040804","0","0"
"19469055","803077","2013-10-19 17:42:35","1","32","<git><github><git-commit>","checking out git commit. Putting it at top of branch","<p>Hi guys I have a master branch that has a broken commit at the tip of the branch. The working version is the commit before that. </p>

<p>How can I make the remote repository have the commit before that (C2) as the commit at the tip and delete the broken commit (C3)?</p>

<p>I am using github if that helps too. </p>

<p>current:
C1 - C2 - C3 (tip)</p>

<p>would like to delete C3 (the latest commit). </p>

<p>C1 - C2 (tip)</p>

<p>After I have deleted the latest commit I would like to clear my local git respository and pull the data from my git address again. </p>

<p>I am very confused. </p>

<p>Thanks for the help,</p>

<p>Joe. </p>
","1","803077","",""
"38679261","193601","2016-07-30 22:58:49","5","1331","<git><github><git-commit>","How to delete a commit on a git remote?","<p>How can I delete a commit on a git remote hosted by github.com? I already found multiple <a href=""https://stackoverflow.com/questions/448919/how-can-i-remove-a-commit-on-github"">answers</a> on SO that show how to remove a commit from the commit history of a branch. I attempted these, however my commit is still clearly available because I can browser directly to it using its hash.</p>

<p>So for clarity, my question is not how to remove a commit from the commit history of all my branches on my remote. My question is how to remove the commit itself, so that there is no record of it on the git remote that I previously pushed my branch to.</p>

<p>Solutions I've tried include:</p>

<p><a href=""https://stackoverflow.com/questions/8225125/remove-last-commit-from-remote-git-repository"">Remove last commit from remote git repository</a></p>

<p><a href=""https://stackoverflow.com/questions/4647301/rolling-back-local-and-remote-git-repository-by-1-commit"">Rolling back local and remote git repository by 1 commit</a></p>

<p>EDIT:
<a href=""https://stackoverflow.com/questions/3293531/git-permanently-remove-few-commits-from-remote-branch"">Git: permanently remove few commits from remote branch</a> is another solution that didn't work for me. The reason this particular solution did not work is because it stays to ""git push --force your revised local branch to the remote."", which doesn't delete commits from the remote and instead only removes them from the commit history of the current branch.</p>
","2","193601","",""
"38709127","2782583","2016-08-01 22:35:09","0","352","<git><rebase><git-commit><squash><git-squash>","How to cleanup git history removing certain commits after they've been pushed?","<p>What I'm trying to do:</p>

<p>I completed a feature.</p>

<pre><code>git add -A; git commit -m ""feature A complete""
</code></pre>

<p>Then I realized I missed some things.</p>

<pre><code>git add -A; git commit -m ""feature A missed something 1""
git add -A; git commit -m ""feature A missed something 2""
git add -A; git commit -m ""feature A missed something 3""
</code></pre>

<p>Now my history looks like this:</p>

<pre><code>A238ad1 feature A missed something 3
3238adX feature A missed something 2
1238ad7 feature A missed something 1
111AAA2 feature A complete
</code></pre>

<p>I want it to look like this:</p>

<pre><code>111AAA2 feature A complete
</code></pre>

<p>With all the <code>missed something</code> commits merged into the <code>feature A complete</code> commit.</p>

<p>I know <code>git rebase -i HEAD~4</code> is the right way to go, but it doesn't actually remove the bad commits to clean up the history.</p>

<p>I noticed in some other articles there's a <code>git commit --fixup</code> command and a <code>git rebase -i --autosquash</code>, but I'm not getting it to work properly. I'm sure this is super easy, I'm just out of it today.</p>
","1","2782583","",""
"448919","14755","2009-01-15 23:20:54","1986","1617603","<git><github><git-commit><git-reset><git-revert>","How can I remove a commit on GitHub?","<p>I ""accidentally"" pushed a commit to GitHub.</p>

<p>Is it possible to remove this commit?</p>

<p>I want to revert my GitHub repository as it was before this commit.</p>
","11","14755","0","0"
"57679088","9358535","2019-08-27 16:43:47","1","334","<git><cpanel><git-branch><atlassian-sourcetree><git-commit>","How do I manage 3 parallel branches efficiently when each are different by only a single (or few) commit(s)?","<p>I'm incorporating git (via Bitbucket/SourceTree/PHPStorm/cPanel) into my web development workflow, and I'm trying to find the most efficient way of managing my development environment. I currently have 3 branches in my git repo, each representing a separate VPS deployment for each release stage in my development workflow (local VPS for individual development, remote development VPS for staging and client previews, and remote production VPS for live websites).</p>

<p>In order for each of these distributions to work, each requires its own custom .cpanel.yml file (for auto deployment), which means I've committed a unique commit to each branch with the custom file, but the rest of the commits are largely exactly the same.</p>

<p>I've tried excluding the .cpanel.yml file from the repo, but cPanel requires this .cpanel.yml file to be checked into the repo in order for auto distribution to run properly. (Initially I thought of including 3 variations on this file and having a git hook unpack the appropriate file but cPanel doesn't recognize any .cpanel.yml files that are not checked into the repo, so this was of no use. I was also unable to find any documentation on overriding the default .cpanel.yml filename)</p>

<p>What is the best methodology to use in this particular case, where I have 3 parallel branches that vary in only a small number of commits? I'm finding that the cherry pick feature in SourceTree is not easy to use on my mac, and I'd prefer a simple method for maintaining common commits across these three branches. I'm also open to a solution that involves consolidating the three unique commits into a single solution (ex. being able to override the default .cpanel.yml filename and commit 3 of these files and point cpanel to the correct one)</p>
","0","9358535","0","0"
"38903834","6706405","2016-08-11 18:36:41","1","40","<git><github><git-commit><git-filter-branch><git-rewrite-history>","Amending Git Author In a Published Repo","<p>So I'd like to rewrite the history of a git repo. Now, all of the commits I'd like to change have already been published and pushed and I'm aware that rewriting history to published repos is bad practice. However, this repo has no forks and only a single master branch. Does this make rewriting history safer?</p>

<p>If so, what I'd want to do is change the author of all commits since a certain date by a specific author to the new author. Here is the code that github provides to do this:</p>

<pre><code>#!/bin/sh

git filter-branch --env-filter '
OLD_EMAIL=""your-old-email@example.com""
CORRECT_NAME=""Your Correct Name""
CORRECT_EMAIL=""your-correct-email@example.com""
if [ ""$GIT_COMMITTER_EMAIL"" = ""$OLD_EMAIL"" ]
then
    export GIT_COMMITTER_NAME=""$CORRECT_NAME""
    export GIT_COMMITTER_EMAIL=""$CORRECT_EMAIL""
fi
if [ ""$GIT_AUTHOR_EMAIL"" = ""$OLD_EMAIL"" ]
then
    export GIT_AUTHOR_NAME=""$CORRECT_NAME""
    export GIT_AUTHOR_EMAIL=""$CORRECT_EMAIL""
fi
' --tag-name-filter cat -- --branches --tags
</code></pre>

<p>Can somebody change this to include my requirement of only changing commits since a certain date, say, after June 20th?</p>

<p>Also, is it possible to easily undo this change after seeing the effects?</p>
","0","6706405","",""
"19729188","172617","2013-11-01 14:51:24","2","178","<git><git-commit>","Undoing commits that have been pushed to remote repo","<p>We made some changes to a branch, committed and merged them to master, then pushed to the remote.  Subsequently we made more commits to master and pushed those up, related to the merge.</p>

<p>As it turns out, that merge and the subsequent modifications were the wrong way to go about solving our problem, and we'd like to revert to just before the merge.  In looking at the SO <a href=""https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide/323898#323898"">Git for beginners guide</a> I see the reset command, but for changes that have already been pushed is that good enough, calling reset and then pushing?</p>

<p>It's not our case here, but suppose that after we had merged, and done some fix-up commits/pushed afterward, there were other, unrelated pushes to master, what's a good way of only undoing our changes and not the unrelated ones?</p>
","0","172617","",""
"19768959","523725","2013-11-04 13:42:30","7","42920","<git><gerrit><git-commit><git-review>","How to review a specific commit on Git","<p>I sent a commit (named ""A commit"") to review (Gerrit) using <code>git review</code> command.</p>

<p>Now, I make a new commit (named ""B commit"") and I want to send it to review as well, but I don't want to re-send the ""A commit"". There is no dependencies each other.</p>

<p>How to send a review to gerrit for a specific commit?.</p>

<p><strong>UPDATE</strong>:</p>

<pre><code>$ git add --all


$ git status

# On branch delete_role
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   path/to/file.ext


$ git status

# On branch delete_role
nothing to commit (working directory clean)


$ git branch

*delete_role
 master


$ git log --graph --decorate --oneline -n13

* 531bd84 (HEAD, delete_role) commit 3
* df68f1a (master) commit 2
* 4ce2d8d commit 1
*   6751c7d (origin/master, origin/HEAD, gerrit/master)
</code></pre>

<p>Commit ""<strong>df68f1a</strong>"" and ""<strong>4ce2d8d</strong>"" are dependant and they have been sent in a previous <code>git review</code> command, but commit ""<strong>531bd84</strong>"" belongs to a new branch (delete_role) because is a new issue.</p>

<pre><code>$ git review

You have more than one commit that you are about to submit.
The outstanding commits are:

531bd84 (HEAD, delete_role) commit 3
df68f1a (master) commit 2
4ce2d8d commit 1
</code></pre>

<p>I want to <strong>send to Gerrit</strong> only the ""<strong>531bd84</strong>"" commit, not the other ones.</p>
","0","523725","0","0"
"19875104","1117531","2013-11-09 10:54:39","137","55786","<git><git-commit>","How to find out in which commit a particular code was added?","<p>I want to find out in which commit did I add the code given below: </p>

<pre><code>if (getListView().getChildCount() == 0)
                getActivity().findViewById(android.R.id.empty).setVisibility(View.VISIBLE);
</code></pre>

<p>How do I achieve this?</p>
","0","1117531","0","0"
"39095703","970696","2016-08-23 08:09:32","2","1780","<git><version-control><git-commit>","Commit early, commit often - does it mean ""push"" early, often in GIT?","<p>Having worked always in SVN, we followed the ""commit early, commit often"" principle with at least daily commits.
With GIT, I am unsure as to whether the same requirement make sense as the commits are not visible in the central repo until they are pushed.
Even in the git practices I can see a similar approach but it is not clear whether they talk about pushes or commits.</p>
","2","970696","0","0"
"58081047","2561452","2019-09-24 13:07:45","1","45","<git><git-commit>","Commit sub-directory in branch locally but do not include it when pushing to the remote branch?","<p>I have a directory in a private but shared GitHub project that contains sensitive data that I want to commit locally so that it gets backed up when I back up my local hard drive, but is <strong>not</strong> pushed to the remote branch.  Is there a way to set this up using Git facilities/features?  </p>

<p>Using the <em>.gitignore</em> file doesn't work because as far as I can tell, there is no way to have different behavior or different <em>.gitignore</em> files for local commits vs. what gets pushed to the remote branch.</p>

<p>If this is not possible, how are you that have the same issue handling this?</p>

<p>Note, this is not data that I can put in ENVIRONMENT variables.  It is a set of files that contain sensitive data.</p>
","1","2561452","",""
"58195399","2589553","2019-10-02 04:54:02","2","445","<git><version-control><git-commit>","Where can I find snapshot for a specific Git commit?","<p>I have learned that:</p>

<ul>
<li>Git keeps a snapshot for each commit</li>
<li>A snapshot is essentially <code>copies</code> of <code>changed</code> files and some <code>references</code> to <code>unchanged</code> files</li>
<li>All Git relevant data are stored under <code>.git</code> directory inside the repository directory.</li>
</ul>

<pre><code>duong2179-mbpro:.git duong2179$ ls -l
total 480
-rw-r--r--    1 duong2179  admin     742 Oct  2 13:03 COMMIT_EDITMSG
-rw-r--r--    1 duong2179  admin   15646 Oct  2 13:28 FETCH_HEAD
-rw-r--r--    1 duong2179  admin      33 Oct  2 13:28 HEAD
-rw-r--r--    1 duong2179  admin      41 Oct  2 13:28 ORIG_HEAD
-rw-r--r--    1 duong2179  admin     849 Oct  2 13:07 config
-rw-r--r--    1 duong2179  admin      73 Apr 24 16:18 description
drwxr-xr-x   17 duong2179  admin     578 Apr 24 16:19 hooks
-rw-r--r--    1 duong2179  admin  185528 Oct  2 13:29 index
drwxr-xr-x    3 duong2179  admin     102 Apr 24 16:18 info
drwxr-xr-x    4 duong2179  admin     136 Apr 24 16:19 lfs
drwxr-xr-x    4 duong2179  admin     136 Apr 24 16:19 logs
drwxr-xr-x  260 duong2179  admin    8840 Aug 19 15:50 objects
-rw-r--r--    1 duong2179  admin   19239 Apr 24 16:19 packed-refs
drwxr-xr-x    5 duong2179  admin     170 Sep 25 16:05 refs
drwxr-xr-x    3 duong2179  admin     102 Aug  5 15:03 subtree-cache
</code></pre>

<p>Given a Git commit hash where can I find out the associated snapshot in the <code>.git</code> sub-directory?</p>
","0","2589553","0","0"
"20266734","202130","2013-11-28 12:52:10","1","122","<git><git-commit><git-amend>","How do I edit an incorrect commit message in Git without including any staged modifications?","<p>If I have staged some changes, and in the process notice an error in my previous (and un-pushed) commit message, is there a way to amend the commit <em>without</em> folding in my staged changes?</p>

<p>I see various options on the man page for <code>git-commit</code> that perform a related function, but no combination that seems to produce exactly the desired effect:</p>

<ul>
<li><code>--amend</code></li>
<li><code>--all</code> (automatically stage), but no '<code>--none</code>'</li>
<li><code>--message</code></li>
<li><code>--only</code> (only the specified paths)</li>
<li><code>--</code> &lt;no-more-options>...</li>
</ul>

<p>The option <code>--only</code> with an empty file list (which I don't know how to specify), would almost be right, but that might in any case <strong>remove</strong> changes from the last commit (which I don't want).</p>

<p>The naïve method is to <code>reset</code> and then <code>commit --amend</code>, but that requires repeating the staging work. Alternatively, I could commit my staged changes, and edit the no-longer-latest commit message via a <code>rebase</code>, but that seems a to be awkward and overkill for just editing a message.</p>

<p>I don't think <code>stash save</code> can help either, as <code>stash</code> does not seem able to preserve the distinction between staged and unstaged changes. (Unless it's possible to <code>stash</code> only what has been staged? Again, I don't see how to do that.)</p>

<p>This question is related to
<a href=""https://stackoverflow.com/questions/179123/how-do-i-edit-an-incorrect-commit-message-in-git"">How to modify existing, unpushed commits?</a>
where there's plenty of useful information amongst the answers, but this, slightly different question is not addressed.</p>

<p>Any hints gratefully received; thanks.</p>
","1","202130","0","0"
"58268979","3117658","2019-10-07 11:49:05","2","171","<xcode><git><git-commit><xcdatamodel>","xcode source control trap: unable to index file","<p>I checked out a new branch of a good production build, and added a new core data model.  It failed to build (separate issue) and in the process of troubleshooting, I removed the new model from the project.  Now, Xcode fails to commit changes, with errors:</p>

<blockquote>
  <p>error: unable to index file '[project directory]/Core
  data/XXXCloudKitModel.xcdatamodeld' fatal: updating files failed</p>
</blockquote>

<p>and </p>

<blockquote>
  <p>the path 'XXXCloudKitModel.xcdatamodeld' exists but is not a tree (-3)</p>
</blockquote>

<p>No effect from re-adding the model to the same path.  I'd be willing to revert back to a prior commit, but when I try to check one out, I get:</p>

<blockquote>
  <p>There was an error stashing a working copy. The pull operation cannot
  proceed until this error is fixed.</p>
</blockquote>

<p>Discarding the changes that appear in project.xcworkspace file is no help.  With that, I am stuck here.  Any ideas?   I'll admit to very rudimentary knowledge of source control...</p>
","0","3117658","",""
"39542634","2401996","2016-09-17 03:42:36","12","9582","<git><git-commit><git-fork>","how do I fork an older version of a github project?","<p>how do I fork an older version of a github project?
I want to fork on a specific commit of a project, commit 3b5915a21a997f88fa16a6feb5b893953a06b0b5 of this </p>

<p>project:
<a href=""https://github.com/aseprite/aseprite"" rel=""noreferrer"">https://github.com/aseprite/aseprite</a>, where a recent commit broke the main line. I really want to fork fork version 1.1.8.</p>
","0","2401996","0","0"
"20426864","747050","2013-12-06 14:52:08","2","672","<git><svn><version-control><patch><git-commit>","Copy chain of commits between repositories","<p>How can I copy a chain of commits from one git (or svn) repository to another?</p>

<p>If I would have only one commit I would do:</p>

<pre><code> cd Git1
 git diff commitHash^ commitHash &gt; patch.txt
 cd Git2
 git branch CommitsFromGit1
 git checkout CommitsFromGit1
 patch -i ....Git1/patch.txt
 git ci -am ""CommitFromGit1Name""
</code></pre>

<p>But I have too many commits to proceed manually one by one. Is there a way to create somekind of multi-patch, with a set of commits-changes?</p>
","2","747050","",""
"58405642","236415","2019-10-16 04:07:40","1","69","<xcode><git><git-commit>","Xcode, excluded files after git commit","<p>I'm new to using git.  In Xcode, I committed my project files, and have since done two more commits.  Six of the files have control status ""?"" (meaning, I believe, ""not under source code control"").  But, those files have been around all along -- I didn't do anything special with them.</p>

<p>File details:</p>

<ol>
<li><p>The four source code files have always existed and I've made no changes.</p></li>
<li><p>This <code>Image.xcassets</code> file has always existed.  I've added two more (same name) in other source code groups (and git has control of those).</p></li>
<li><p>The <code>icon1024.png</code> file has always existed (might have been added after the first commit).</p></li>
</ol>

<p><a href=""https://i.stack.imgur.com/eHFbz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eHFbz.png"" alt=""git source code status""></a></p>

<p>Why are those six files excluded (and not any others)?  Would there be any harm in committing those files now?</p>
","4","236415","0","0"
"39615552","4923852","2016-09-21 11:39:24","0","68","<git><github><git-commit><git-revert>","Proper way to clean git history on master","<p>I am on branch ""master"".
I had such git history:</p>

<pre><code>333  (#82)
444  (#83)
</code></pre>

<p>Then I done some commits and reverts (222->111->010->789->456->123):</p>

<pre><code>123 Revert ""(#84)""
456 Revert ""(#81)""
789 Revert “(#81)""
010 Revert ""(#86)""
111  (#86)
222  (#84)
333  (#82)
444  (#83)
</code></pre>

<p>I need somehow to clear those wrong steps (222->111->010->789->456->123) to return history back to :</p>

<pre><code>333  (#82)
444  (#83)
</code></pre>

<p>will it be ok if i do:</p>

<pre><code>git rebase -i 333
</code></pre>

<p>and will drop wrong commits?
then</p>

<pre><code>git push -f
</code></pre>
","2","4923852","",""
"39623239","249316","2016-09-21 17:43:52","0","4019","<git><github><git-commit>","Can I ""git pull"" and ignore specific commits?","<p>I have a <code>dev branch</code> for staging and <code>master branch</code> for production. A lot of work has been done on staging and now I need to move things over to production. There is a feature I don't want to release yet on production but it has already been included in a pull request to master and merged. </p>

<p>I'd like to either of these:</p>

<ol>
<li>make a new branch and use staging to remove the commit and set that branch to production till master branch is ready</li>
<li>go ahead and <code>git pull</code> everything to prod even the stuff I don't want yet, then tell my local repo to ""remove"" a few commits that have that feature.</li>
</ol>

<p>I tried a <code>git revert &lt;commit #&gt;</code> but that caused some stability issues on staging that I'm still working out.</p>
","1","249316","",""
"20580611","1569246","2013-12-14 06:59:47","10","970","<git><git-commit>","How to reuse pending comments after git commit fail?","<p>I use external editor to fill comments for ""git commit"", if by some reason commit fails all comments disappear. Is there some place where my comments for commit that's failed are stored ? </p>

<p>Is there any specific git command to reuse such pending comments or repeat commit with pending comments ?</p>
","0","1569246","",""
"20584267","743290","2013-12-14 14:05:39","23","27282","<git><github><repository><git-commit>","Git - Remove in between commit","<p>Our team is doing several projects in PHP. We have wrongly committed a folder of One Project to another. Now, we want to remove that particular commit from the Project. If we remove the particular folder/commit from the project then there is no issue for our project.</p>

<p>If we just remove the folder and issue the new commit at the current position then the folder is removed but it will remain in the history of Git. So, we want to remove it completely from refs, history and other things from Git.</p>

<p>We can also create a separate branch but the commit refs of authors would be lost. We want to only remove that particular commit. We have no issue in rewriting history or re-basing it but don't know how to do it.</p>

<p>In the project we have done 136 commits and want to remove commit no.76th. The required information about SHA is as under</p>

<pre><code>5d39775b          //136th commit
a4df5ee9          //135th commit
6971cf35          //134th commit
.....
....
162f833c          //76th commit
32603274          //75th commit
.....
....
9770059          //1st commit
</code></pre>
","0","743290","0","0"
"1687262","24433","2009-11-06 12:27:52","936","1214535","<git><github><git-commit>","Link to the issue number on GitHub within a commit message","<p>Is it somehow possible to <strong>automatically</strong> have a link to GitHub issue number in the <code>git commit</code> message?</p>
","1","24433","0","0"
"39772649","4480164","2016-09-29 14:08:40","0","53","<javascript><php><jquery><git><git-commit>","Grab the current commit of a project and display it","<h1>Issue</h1>
<p>I was working on a project where QAs report bugs that already fixed.
So many time, it turn out that QAs don’t have our latest code.</p>
<hr />
<h1>Solution</h1>
<p>Now, I’m thinking to grab the current commit and display it in the <code>console</code> or on other page for references between us QA, and Developers.</p>
<hr />
<h1>Tried</h1>
<p>In CLI,  to get the latest commit, I just to do this</p>
<pre><code>git rev-parse --verify HEAD
</code></pre>
<p>I’ve tried create a PHP function, and call it.</p>
<pre><code>public function info(){
    return str_replace('\n','', json_encode(shell_exec('git rev-parse --verify HEAD')));
}
</code></pre>
<hr />
<h1>Result</h1>
<p>It works fine on my Mac, but on my QA set up, they got <code>null</code>.</p>
<hr />
<h1>Questions</h1>
<p>What did I do wrong ?</p>
<p>Is there another way to do this ?</p>
<p>I’m open to any suggestions at the moment. :)</p>
","0","4480164","",""
"58704510","7099944","2019-11-05 04:27:40","4","1742","<git><git-commit>","How to get whole git history afterwards ""git clone --depth=1""?","<p>One of my git repo was huge, containing huge assets to previous commits. </p>

<p>Somehow I was able to clone repo(made runnable) using <code>git clone &lt;repo&gt; --depth=1</code>.</p>

<p>I want to get all the previous commits on same local repo.</p>

<p>Thank You.</p>
","0","7099944","",""
"58706996","8799862","2019-11-05 08:10:11","0","56","<git><git-merge><git-commit><git-revert>","revert the branch in a git to the previous commit in the same branch","<p>I want to undo merge commit in the branch <a href=""https://i.stack.imgur.com/vYKOj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/vYKOj.png"" alt="" in this picture""></a></p>

<p>from e6a49a..... to 4dea6ee.... 
There was conflicts in 6 files and I have resolved those and committed but when I try creating the Pull request it shoes me more than 100 of files of whole project which shouldn't be happening . Just guess may be the files types might have changes. so Just wanted to revert the merge commit. How can i do it </p>
","1","8799862","",""
"39854111","1160022","2016-10-04 13:50:54","1","2557","<python><git-commit><git-log><gitpython>","Diff commit messages of two branches with gitpython","<p>At work, we have a workflow where each branch is ""named"" by date. During the week, at least once, the latest branch gets pushed to production. What we require now is the summary/commit messages of the changes between the latest branch in production vs the new branch via gitpython.</p>

<p>What I have tried to do:</p>

<pre><code>import git

g = git.Git(""pathToRepo"")
r = git.Repo(""pathToRepo"")
g.pull() # get latest

b1commits = r.git.log(""branch1"")
b2commits = r.git.log(""branch2"")
</code></pre>

<p>This give me all of the commit history from both branches but I can't figure out how to compare them to just get the newest commit messages.</p>

<p>Is this possible to do in gitPython? Or is there a better solution?</p>
","0","1160022","",""
"2031158","1284823","2010-01-08 22:19:00","18","8765","<git><git-commit><git-stash>","GIT: Do I need to commit my branch before checking out another branch, what about stashing?","<p>I'm new to Git and a bit confused.  I have a Master branch and have created a second feature branch.  </p>

<p>If I make changes in my feature branch and then switch to Master, will my changes be lost if I don't commit?  </p>

<p>Where does stash come into play, is it something you do before you switch branches (but don't want to commit) or is it to simply revert some changes so you can get back to previous code temporarily?</p>
","0","1284823","0","0"
"58807721","1801810","2019-11-11 19:45:19","0","29","<git><commit><git-commit><gitlist>","Git - ""Lost"" Commits","<p>Coming from an SVN environment so Git is pretty foreign thus far.</p>

<pre><code>me@www:/var/www/$ git --version
git version 2.17.1
</code></pre>

<p>It's just me on these servers and in this Git environment.  I cloned from another local server.  I've been writing code, committing and pushing.  I wanted to change the comment for the last pushed commit.  I read to use the following commands:</p>

<pre><code>git commit --amend
</code></pre>

<p>I entered the new message and saved.  I then...</p>

<pre><code>git push origin master --force
</code></pre>

<p>Now only my last, updated commit appears in Git.  I believe I read that all the previous information is still there - it's simply not displayed but at some point it will be garbage collected.  I've been looking through the various git shell tools and man pages but I'm not sure what to do without further screwing this up.  How can I restore the history?</p>

<p>I appreciate your help, thank you.</p>
","3","1801810","",""
"58813409","5637701","2019-11-12 06:50:03","0","189","<git><github><atom-editor><git-commit>","What does 'Toggle hard wrap on commit' do in Atom?","<p>Using the Atom editor with a Github repository.</p>

<p>When I type Enter in the commit comment box, a little 'Enter' toggle button appears on the bottom right of the text box. When hovered the tooltip says ""Toggle hard wrap on commit"".</p>

<p><a href=""https://i.stack.imgur.com/aV03p.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aV03p.png"" alt=""Screenshot""></a></p>

<p>My question is simply:</p>

<ol>
<li>What does this mean (and do)?</li>
<li>Why does it appear only after there's more than 1 line in the comment?</li>
</ol>
","0","5637701","0","0"
"57316337","6086575","2019-08-01 20:10:08","0","1361","<git><git-commit><git-cherry-pick><git-history><git-history-rewrite>","How to delete a commit with a password from BitBucket git repository history?","<p>I have accidentally committed a password to a BitBucket git repository some time ago, several commits behind the current master. While I removed the password later by committing without it, it still exists in several past commits.</p>

<p>I don't mind losing the history of changes during those commits. I'm also not worried about somebody having seen the password during the time it was committed, but I want to delete this history to avoid problems in the future.</p>

<p>What steps to take to ensure that, after those steps, nobody who gets access to this BitBucket repository in the future can find this password?</p>

<p>Lets say I have the commits (from oldest to newest) with the (fake) SHA1s:
c001
c002
c003
c004</p>

<p>c002 and c003 are hashes of ""bad"" commits that I want to delete entirely. I want master to stay on c004, but for c002 and c003 to no longer be accessible for anybody if I give them access to this repo.
I tried following the instructions of similar questions on SO that offer to reset or rebase, but could not get them to work; I either manage to delete the commits on my machine but then cannot push back to BitBucket, or fail to delete on my machine altogether after messing something up.</p>

<p>Can somebody please explain the steps needed to:
1. eliminate c002 and c003 from the repository's history
2. make sure it's saved on BitBucket, and that people cannot view those commits neither in BitBucket's GUI, or by cloning the repo to their machine</p>

<p>I would appreciate an answer that explains what the commands do, and not just write some magic git commands that either work or don't work for me.
Also, this question is specifically about BitBucket in case some things might be specific for it... I had trouble with ""Updates were rejected because the tip of your current branch is behind"" when trying to push changes back to BitBucket after making local repo changes with reset --hard. After several failed attempts and frustration with git's docs I decided to ask SO.</p>

<p>.</p>
","0","6086575","",""
"40225672","4281579","2016-10-24 19:03:00","0","51","<git><git-rebase><git-commit>","How to combine commits between any two historical commits?","<p>For example, I have commits as follows (<code>A..H</code> are commit hashes):</p>

<pre><code>A-B-C-D-E-F-G-H
</code></pre>

<p>Is there a way I could combine commits between <code>C</code> and <code>G</code>?</p>

<p>I do not want to use <code>git rebase -i C</code>, and manually change all the commits between <code>C</code> and <code>G</code> from <code>pick</code> to <code>f</code>,</p>

<p>because commit <code>F</code> is ""Merge branch 'xxxxxxx' into xxxxxxx"", in which there are too many commits, which I need to pick up and change too many <code>pick</code>s to <code>f</code>.</p>

<p>I have tried <a href=""https://stackoverflow.com/a/2662323/4281579"">this script</a> as well, but it requires solving conflicts. I do not think I need solving conflicts as I am not merging from another branch but combine several previous commits together.</p>
","6","4281579","0","0"
"40226263","4263019","2016-10-24 19:42:04","11","8597","<bitbucket><jira><git-commit><pre-commit-hook>","Force Bitbucket Commit to be associated to JIRA Ticket by Comment Formatting","<p>The exact need is to force all commits into Bitbucket to be linked to a JIRA ticket. </p>

<p>I have does this before on Subversion by creating a commit hook that looked for the JIRA ticket in the commit text, but I don't want this solution to be necessarily constrained to that prior experience.</p>

<p>Does Bitbucket have a setting somewhere to force association for all commits against Jira tickets? If not - does it have a mechanism for enforce commit comment quality (some sort of hook or regex)? If not - does GIT have something that we can use for this purpose?</p>

<p>The imagined solution is (but not limited to being) a commit hook that fails the commit if the comment text does not contain a leading JIRA ticket, followed by a colon, followed by some commit text, such that:</p>

<pre><code>git commit -m ""foo""
</code></pre>

<p>fails and </p>

<pre><code>git commit -m ""PRJ-9327: foo""
</code></pre>

<p>commits...</p>
","1","4263019","0","0"
"21302034","588243","2014-01-23 07:33:50","16","4653","<pycharm><git-commit>","How to sign-off (""signed-off-by"") a Git commit in PyCharm?","<p>I wonder how I can add the ""signed-off-by"" line in a Git commit automatically within PyCharm's Commit dialog.</p>

<p>There are options for amending to the previous commit and changing the author of the commit, but I couldn't find an option for adding the signed-off line (<code>git commit -s</code>) on a per-commit basis.</p>

<p>Is it even possible or is it a missing feature?</p>
","0","588243","0","0"
"21413238","2569639","2014-01-28 18:00:08","3","487","<git><github><branch><git-commit>","GitHub: Apply master commits to another branch","<p>The repository related to this question is located <a href=""https://github.com/netcyphe/apt-offline"" rel=""nofollow"">here</a>.</p>

<p>I created a new branch called <code>apt-offline-python3-dev</code> from the master branch with the<br>
GitHub web interface.</p>

<p>What I want to do is take over the commits from the master branch from commit <a href=""https://github.com/netcyphe/apt-offline/commit/9f2f667d134330c0de8700258ab98cae0ac89438"" rel=""nofollow"">774</a>-<a href=""https://github.com/netcyphe/apt-offline/commit/27fc6432f6b348c0ffd0949eaa72bb5b49986743"" rel=""nofollow"">784</a>, and therefore make them belong to the <code>apt-offline-python3-dev</code> branch, instead of belonging to the <code>master</code> branch.</p>

<p>Because, when you look at the <a href=""https://github.com/netcyphe/apt-offline/commit/27fc6432f6b348c0ffd0949eaa72bb5b49986743"" rel=""nofollow"">latest</a> commit for example it clearly says <strong>master</strong> instead of <strong>apt-offline-python3-dev</strong>, which is logical because I sent all those commits to the master branch,
before restructuring the repository.</p>

<p>I then want to reset the master branch back to its original state, which means back to commit <a href=""https://github.com/netcyphe/apt-offline/commit/9f2f667d134330c0de8700258ab98cae0ac89438"" rel=""nofollow"">9f2f667d13</a> as seen on <a href=""https://github.com/netcyphe/apt-offline/commits/apt-offline-python3-dev"" rel=""nofollow"">this</a> page at Jun 16, 2013.</p>

<p>Now, I know about <code>git cherry-pick</code> and <code>git merge</code>, but don't really know if this is possible at all.</p>

<p><strong>Update:</strong><br>
+1 for Matt's answer leading me in the right direction. Unfortunately, there are still persisting problems.<br>
Here's what happens, when I issue the commands in the order Matt suggests:</p>

<pre><code>git checkout apt-offline-python3-dev
Branch apt-offline-python3-dev set up to track remote branch apt-offline-python3-dev from origin.
Switched to a new branch 'apt-offline-python3-dev'

git cherry-pick 9f2f667d134330c0de8700258ab98cae0ac89438
error: could not apply 9f2f667... half implementation of lock, please verify
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>

<p>Because it already fails here, there is no need to invoke the <code>git revert</code> command.</p>

<p>Now, if one flips the order and replaces <code>git revert</code> with <code>git reset --hard</code>, it actually works:</p>

<pre><code>git reset --hard 9f2f667d134330c0de8700258ab98cae0ac89438
HEAD is now at 9f2f667 half implementation of lock, please verify

git cherry-pick ba8662eb8e01cebc969126650baa22776a27430d
[apt-offline-python3-dev 78c9aa5] Another initial test commit
 Author: codingaround &lt;codingaround@outlook.com&gt;
 24 files changed, 1438 insertions(+), 1328 deletions(-)
 create mode 100644 IMPORTANT_README.md
 rewrite apt_offline_core/AptOfflineMagicLib.py (85%)
</code></pre>

<p>A <code>git log</code> reveals, that the hash is a new one:</p>

<pre><code>git log
commit 78c9aa5b732d559f141c9bf77c801c1644710432
Author: codingaround &lt;codingaround@outlook.com&gt;
Date:   Mon Sep 30 20:11:55 2013 +0200

    Another initial test commit
</code></pre>

<p>The question that now remains is: How do I keep the commit hashes or is that not possible?</p>
","0","2569639","0","0"
"59330284","3520791","2019-12-13 21:55:42","0","1324","<python><git><python-2.7><git-commit>","How do I track Git commits for a time period using GitPython","<p>I want to know how to track if a branch in Git is pushed or not. Basically, I want to find all branches from a develop branch (not repo) and be able to check if any of those branches are pushed (after some changes) or not.</p>

<p>So far, using <a href=""https://gitpython.readthedocs.io/en/stable/tutorial.html#obtaining-diff-information"" rel=""nofollow noreferrer"">GitPython</a>, details in <a href=""https://stackoverflow.com/a/59331314/3520791"">here</a>, and <a href=""https://stackoverflow.com/questions/33733453/get-changed-files-using-gitpython"">here</a> I could figure out the following:</p>

<pre><code>  import git
  from git import Repo

  repo = Repo('directory_of_repo') #points to develop not master
  paths = set()
  for item in repo.head.commit.diff('develop@{8 days ago}'):
    if item.a_path.find('a_certain_dirctory') != -1:
        paths.add(item.a_path)
</code></pre>

<p>while the mg repo is pointing to <code>develop</code>. Now I am not sure that I should use <code>HEAD@{8 days ago}</code> or <code>develop@{8 days ago}</code> (<em>P.S. number of days can be different</em>). However, not sure that I should use the <code>HEAD</code> or the <code>develop</code>? In the example of 8 days back, using <code>HEAD</code>, the number of the unique paths is 86 while using <code>develop</code>, the number is 15.</p>

<p>What exactly l am looking for is to find all the paths that have been changed (i.e. some file inside them are updated) in a certain period of time (for example 8 days ago) in the <code>develop</code> branch. Any guidance that which one should I use (<code>HEAD</code> or <code>develop</code>) to track changes for a certain time period on <code>develop</code>?</p>
","0","3520791","",""
"59436437","11908239","2019-12-21 13:04:18","1","162","<android><git><github><intellij-idea><git-commit>","How to write single commit message for each package in Android?","<p>I always struggle to write commit messages for each <code>package</code> in android,when i upload the <strong>project</strong> to the <strong>GitHub</strong>,i want to have good different commit message for each package in my repository. </p>

<p>Is there any suggestions please?</p>

<p>Here is my Screenshot:</p>

<p><a href=""https://i.stack.imgur.com/vunCx.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/vunCx.jpg"" alt=""As you see the packages,how can i write different commit message?""></a></p>
","0","11908239","",""
"59550177","7952027","2020-01-01 05:32:39","1","524","<git><git-commit><sublimemerge>","Commit only part of a file in Git using sublime merge","<p>Is there a way to do <a href=""https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git"">Commit only part of a file in Git</a> in Sublime Merge? </p>
","1","7952027","0","0"
"40682631","3456041","2016-11-18 17:14:41","3","2482","<git><github><git-commit><git-revert>","How to solve a revert commit conflict","<p>I am trying to learn how to use Git and GitHub. I've made a simple html file and I'm trying to revert some changes.</p>

<p>I am using GitHub windows application and the repository is here: <a href=""https://github.com/ionutincau/Ceau"" rel=""nofollow noreferrer"">https://github.com/ionutincau/Ceau</a></p>

<p>My last 2 commits are ""Add 13 to list"" and ""Add Accounts to list"". I want to revert the commit ""Add 13 to list"" but I get this file:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
    &lt;title&gt;Hi&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;p&gt;Hi, this is my first version&lt;/p&gt;
    &lt;p&gt;TODO List:&lt;/p&gt;
    &lt;p&gt;- Pictures&lt;/p&gt;
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
    &lt;p&gt;- 13&lt;/p&gt;
    &lt;p&gt;- Accounts&lt;/p&gt;
=======
&gt;&gt;&gt;&gt;&gt;&gt;&gt; parent of 76f0f70... Add 13 to list
&lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>What I need to do? How is this working?</p>
","0","3456041","",""
"59562508","12640741","2020-01-02 11:24:55","-1","96","<git><git-commit>","I tried to commit but it is showing this error","<pre><code>git commit -m ""reinitialized""
</code></pre>

<blockquote>
  <p>fatal: cannot lock ref 'HEAD': unable to resolve reference 'refs/heads/master': reference broken</p>
</blockquote>

<p>Here is a screenshot of the full error:</p>

<p><a href=""https://i.stack.imgur.com/gGyXL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gGyXL.png"" alt=""enter image description here""></a></p>
","1","12640741","",""
"59673843","12592299","2020-01-10 00:04:10","1","512","<git><sublimetext3><git-commit>","How to open Sublime Text 3 editor with git commit","<p>I have already configured Sublime Text 3 as my text editor for git Bash. Sublime successfully opens when I type <code>subl 'filePath'</code></p>

<p>However, when I try a git commit, the text editor fails to open and outputs the following error:</p>

<pre><code>hint: Waiting for your editor to close the file... subl -n -w: subl: command not found
error: There was a problem with the editor 'subl -n -w'.
Please supply the message using either -m or -F option.
</code></pre>

<p>I have added to files to the staging area and am ready to commit.</p>
","2","12592299","",""
"40798333","3011648","2016-11-25 05:33:54","1","4608","<git><version-control><git-commit><git-tag><git-show>","""fatal: tag 'someTag' already exists"", when trying to add a tag to old commits","<p><strong>Question</strong></p>

<p>Why can I not add a tag to two older commits? </p>

<pre><code>git tag -a matlabTest cfa84dbb6dd3c2c9956421e723d2f99786f7b417
git tag -a matlabTest 45b3a4d83eece8a5adcb947392f15a14bd4b0e63
</code></pre>

<p>Instead I am getting:</p>

<pre><code>fatal: tag 'matlabTest' already exists
</code></pre>

<p>It seems Git wants to just create a new tag rather than linking the tag to the commits? (see below for more detail).</p>

<hr>

<p><strong>Background</strong></p>

<p>I have followed the guidelines in the git book: <a href=""https://git-scm.com/book/en/v2/Git-Basics-Tagging"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Basics-Tagging</a>, and here's what I tried (and failed):</p>

<p>I enter <code>git log --pretty=oneline</code>, showing three commits: </p>

<pre><code>cfa84dbb6dd3c2c9956421e723d2f99786f7b417 Preparing to make changes to changes.py to fix
45b3a4d83eece8a5adcb947392f15a14bd4b0e63 Tests: wholeseq analysis differs to Matlab
a894da22e2eb1c03930829622656ffd6da5ce161 Initial python scripts for analysis
</code></pre>

<p>I create a tag <code>git tag -a matlabTest</code> and now I want to add ""matlabTest"" to two of the commits**. Specifically, the top and middle commit of the three shown above.  </p>

<pre><code>git tag -a matlabTest cfa84d
git tag -a matlabTest 45b3a4
</code></pre>

<p>Now in both cases I get the following error:</p>

<pre><code>fatal: tag 'matlabTest' already exists
</code></pre>

<p>But when I show the 'matlabTest' flag by entering <code>git show matlabTest</code> I see that only the first commit was successfully tagged, I have truncated output since it is long, but at the end of the output I cannot see that both commits were tagged:</p>

<pre><code>tag matlabTest
Tagger: *foo (I did not want to show personal information)*
Date:   Fri Nov 25 02:37:41 2016 +0200

After testing dnds.py by comparing whole-seq dN/dS output to MATLABs dnds() output, both using NG, dnds.py seems to have a calculation error. So I have started to make changes to changes.py

commit 45b3a4d83eece8a5adcb947392f15a14bd4b0e63
Author: *foo (I did not want to show personal information)*
Date:   Fri Nov 25 02:20:27 2016 +0200

*...&lt;remainder of script&gt;*
</code></pre>

<hr>

<p><strong>Extra background</strong></p>

<p>**Why do I want to tag the two older commits? Because there is some silent error (inconsistency with previous software I wrote in MATLAB) that I am trying to debug, and it is being caused by either one of two scripts (changes.py and dnds.py) and each has a different commit (cfa84db and 45b3a4d8) pointing to it. I want to tag both commits to help me treat this bug in a systematic way.</p>
","0","3011648","0","0"
"21807745","1015595","2014-02-16 05:34:53","1","164","<git><git-commit><git-reset><git-amend>","How do I put the HEAD back to its previous position after reset?","<p>I wanted to amend a commit message from two commits ago, so I did:</p>

<pre><code>$ git reset --soft HEAD~1
$ git commit --amend -m ""Revised commit message""
</code></pre>

<p>Now how do I get HEAD back to where it was before I <code>git reset</code>?</p>
","0","1015595","",""
"40811829","220836","2016-11-25 20:21:25","2","4153","<git><git-commit><git-push><gitlab-ci>","Gitlab runner conditional run depending on commit message","<p>I have been using Gitlab for a while and now set up a build server. As I change machines (Notebook/PC) I often commit and push to save my work to my gitlab server as the contents are regularly backed up to the cloud.</p>

<p>The build server, works great but the complete project is build on every push. As its quite a big one, I would like to do something like this:</p>

<ul>
<li>Push commits with comment ""release 1.2.3.4""  - >  Gitlab triggers the
build </li>
<li>All other pushes of commits are ignored by the runner.</li>
</ul>

<p>It is ok if only the head commit comment ist checked on build.</p>

<p>I searched the .gitlab.yml documentation but could not find anything helpful.</p>
","2","220836","",""
"59702488","2672125","2020-01-12 09:25:04","0","253","<git><git-merge><git-commit><git-merge-conflict><git-plumbing>","git merge multiple commits into one in an orphan branch each commit in a prefix subdirectory","<p>I need a merge more than 1 commit each from a branch or a remote repo into a single commit in another branch.</p>

<pre><code>input branch#1: o--o- - -o   (C1)
                          \
input branch#2: o--o- - -o | (C2)
    :                     \|
input branch#N: o--o- - -o | (Cn)
                          \|
 output branch:   o--o- - -o (Cm)
</code></pre>

<p>I need to do it in a special way where the source tree of each input branch merge commit is a prefix or subdirectory in the source tree of the output branch merge commit:</p>

<pre><code>&lt;C1&gt;       &lt;C2&gt;       ...  &lt;Cn&gt;
 |          |               |
 +- c1.txt  +- c2.txt       +- cn.txt

&lt;Cm&gt;
 |
 +- C1/c1.txt
 |
 +- C2/c2.txt
 |
 :     :
 |
 +- Cn/cn.txt
</code></pre>

<p>Additionally, I need to change some parameters of the merge commit, like <code>author date</code>, <code>author email</code>, etc and generate a commit message from commit messages of all input branches leave the parents of a merge commit as is without any changes (including parent commit hash list in a merge commit).</p>

<p>Digging in the internet I have already found the most universal solution with the minimal set of commands:</p>

<pre><code>git merge --allow-unrelated-histories --no-edit --no-commit -s ours &lt;input-branches-and-commits&gt;
git read-tree --prefix=C1/ &lt;C1-branch&gt;
git read-tree --prefix=C2/ &lt;C2-branch&gt;
:
git read-tree --prefix=Cn/ &lt;Cn-branch&gt;
cat ... | git commit --no-edit --allow-empty --author=""..."" --date=""..."" -F -
</code></pre>

<p>But it does work differently when the output branch is an orphan branch. In that case the content of an input branch merges additionally into the root of the source tree of the output branch commit:</p>

<pre><code>&lt;Cm&gt;
 |
 +- C1/c1.txt
 |
 +- c1.txt
</code></pre>

<p>Basically it happens when the input branch is the only input branch (I didn't test the case with the multiple input branches when the output branch is an orphan branch because I didn't have that case yet, but I don't exclude that).</p>

<p>I have found the reason why that happens. Because the head does not exist yet and can not exist including the output branch then the merge command creates it upon the call and in the same time leaves the merge incomplete with the output branch pointing to an input branch which actually makes the output branch the parent to itself. This brings the content of the source tree of an input branch into the root of the source tree of the output branch commit without a notice from the user.</p>

<p>I know at least one approach to avoid that behavior, for example, create an empty commit in the output branch before the merge which makes the orphan branch not orphan and initializes the head together with the reference to the output branch.</p>

<p>But I don't want that to do because I have to somehow remove that commit later which is actually workaround code to the git.</p>

<p>Does out there exist a good known way to deal with the git guts to make all things work and merge together as expected?</p>
","0","2672125","",""
"40938485","7191079","2016-12-02 18:10:02","0","339","<php><windows><git><git-commit>","Cannot do Git Commit on Windows / PHP","<p>I'm using <code>Windows</code> / <code>PHP</code>.</p>

<p>By using a <code>PHP</code> script I wanna make a <code>commit</code> but this operation fails.</p>

<p>For this I'm using the following code:</p>

<pre><code>&lt;?
$command = ""git commit -am ."";
shell_exec($command);
?&gt;
</code></pre>

<p>I also tried using <code>chdir</code> to be sure I'm in the Git repository directory but it doesn't work (anyway I think I don't need <code>chdir</code>. The problem is another thing).</p>

<p>Normally from the <code>Windows console</code> I use the same command above (which works perfectly):</p>

<pre><code>&gt; git commit -am .
</code></pre>

<p>Also, if from the Windows console I do:</p>

<pre><code>&gt; php myscript.php
</code></pre>

<p>it works properly. But if through the browser I go to the url:</p>

<pre><code>http://localhost/mysite/myscript.php
</code></pre>

<p>Then, the commit doesn't go thru. But as I said you before, the status is read properly from the browser.</p>

<p>In the other hand, if I just check the <code>status</code> by doing:</p>

<pre><code>&lt;?
$command = ""git status"";
$output = shell_exec($command);
echo $output
?&gt;
</code></pre>

<p>Then the <code>Git status</code> is returned correctly.</p>

<p>Any idea on how to make the <code>commit</code> works through <code>PHP</code> on <code>Windows</code>?</p>

<p><strong>[EDIT 1]</strong></p>

<p>I checked the Apache error log and I saw that everytime I tried to do a commit there was an error saying that I need to specify email and name. Then I did that (via PHP too). But now I'm getting another error, which says: fatal: Paths with -a does not make sense. (on the Apache error log) when I try to make the following commit via PHP: shell_exec(""git commit -am 'my commit message here'"");. Do you know what to do now?</p>
","2","7191079","",""
"40956287","4976422","2016-12-04 07:05:34","2","2291","<git><git-commit><git-revert><unstage>","How to get changes done by me one commit back?","<p>I had lots of changes in my local git fork, I do:</p>

<ol>
<li><code>git add -A</code></li>
<li><code>git commit -m ""commit message""</code></li>
<li>pull changes from upstream master</li>
<li>rebase</li>
<li><code>git push</code> to my origin</li>
</ol>

<p>Now It happens that there are several other commits (from others) between my previous commit and my new commit.</p>

<p>I want to see all the changes done by me in my new commit and work on it.
So, I do </p>

<pre><code>git reset --soft &lt;my previous commit&gt;
</code></pre>

<p>It shows files modified by me and also by others.</p>

<p>Question:</p>

<ol>
<li>What would be the way to see files modified only by me?</li>
<li>And then the files are shown as modified, is it possible to unstage them? I want to see the changes when I do <code>git diff</code>.</li>
</ol>
","1","4976422","",""
"22113753","2781359","2014-03-01 11:27:16","0","207","<git><github><git-commit><pull-request>","How to Pull request certain files?","<p>I have to Pull request certain files from my repository to the original repository.I have already forked a repository. I pushed my changes to the forked repository. But when i pull request it shows all the files which are Modified during the last Commit.</p>

<p>I need to give Pull request only for the Files in this folder app/src/*.</p>

<p>How can i Pull request for Certain Files ???</p>
","0","2781359","",""
"22130759","3347282","2014-03-02 17:20:58","2","103","<git><timestamp><commit><timeline><git-commit>","One-Time Git Commit using Filesystem Created as Author Date","<p>I have a project of which I have about 6 backup folders, each named after the date of the backup.   I am moving these to a Git system, and I want to preserve the date/time the files inside were created.  I do not want to use one date for all files in each backup (as I have seen in other SO questions), and I do not intend to use filesystem dating moving forward, as that would break tools like <code>make</code> etc.   I would like to ""bring git up to speed"" as it were, by committing each of these backup folders using the filesystem creation date <em>of each file</em> as the author date, and the last modified as the commit date.  This is a one time process that I will repeat 6 times, after which I will commit normally.  Is there a way to do this?  I'm really trying to preserve the code timeline.  Thanks!</p>
","2","3347282","0","0"
"41095567","3114661","2016-12-12 06:55:53","0","817","<php><git><github><joomla><git-commit>","How to setup git on server for auto commit/push?","<p>I have a sever and there I have Joomla installed and I wanted to setup git for this server. when a file is changed on this joomla setup it should automatically commit/push changes to the github repo.</p>

<p>is it possible with the help of php?
if yes please let me know how? </p>
","0","3114661","",""
"3525341","350890","2010-08-19 19:11:39","40","10355","<git><git-commit><pre-commit-hook>","Can I use a scripted commit template for git?","<p>We are working on tickets, and when we use the ticket number in the git commit message on the first line, then the ticket is updated with the commit message.</p>

<p>To make things simple we always work on a branch with the commit number.</p>

<p>Now I'd like to be presented with a commit message where the ticket number would already be filled in. </p>

<p>It must be possible, because the branch is already in the commit template, but in comments which are removed by git. I have scoured the docs and the 'net a couple of times, but I must be looking for the wrong words, because I cannot find it.</p>

<p>Can anyone help?</p>
","0","350890","0","0"
"41226396","1534368","2016-12-19 15:52:00","6","3844","<git><git-branch><git-commit><git-stash><git-reset>","How do I save work in progress without using git-stash?","<p>I have a git directory with this situation:</p>

<pre><code>ProgSoul@PROGSOUL-LENOVO:~/esercizio3_2$ git status
Sul branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   A

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   A

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        B
</code></pre>

<p>In this situation I have:</p>

<ul>
<li>there is a file named A in the index with a string ""AA"" inside it</li>
<li>I modified the file A with ""AAA"" inside it but I didn't add this change on the stage. So in the working directory I have A with a string ""AAA"" inside it</li>
<li>an untracked empty file B</li>
</ul>

<p>My teacher wants me to temporarily suspend my work, create a BUGFIX file, commit it and restore my previous situation.</p>

<p>I achieved it through these commands:</p>

<pre><code>git stash --include-untracked
touch BUGFIX
git add BUGFIX
git commit -m ""Aggiunto file BUGFIX""
git stash pop --index
</code></pre>

<p>With these commands I saved my initial situation and restored it once my fix has been commited.
My teacher also asked me to reach this goal without using git-stash.</p>

<p>I followed the help in the stash documentation:</p>

<pre><code>git checkout -b WIP
git commit -a -m ""WIP""
git checkout master
touch BUGFIX
git add BUGFIX
git commit -a -m ""BUGFIX""
git checkout WIP
git reset --soft HEAD^
</code></pre>

<p>With git reset --soft I restored the index but the changes not staged for commit have been lost.</p>

<p>With git reset --mixed I restored the changes not staged for commit but the index has been lost.</p>

<p>How can I restore the same initial situation once I commit the fix without using git stash?</p>
","7","1534368","0","0"
"60117171","11261546","2020-02-07 16:10:42","0","290","<git><continuous-integration><commit><git-commit>","Set image by commit","<p>I'm developoing some code that outputs a processed image. 
Sometimes the result is good sometimes not, but this doesn't mean that the code is not useful.</p>

<p>Is there a way of saving an image in the commit message => then you can checkout the commit where you know the nature of the result</p>

<p>Or any similar solution? </p>

<p>I have tried checkingout each commit then compile and get the image, or commit the image itself. But this isn't as practical as having an ""image history""</p>
","3","11261546","",""
"41231335","1930087","2016-12-19 21:30:34","2","159","<git><git-commit>","how to detect a potentially evil git commit (containing the inverse of some other commit)?","<p>I have several times come across the following situation: Based on A, I push some commit B. Someone else pulls the commit B, but for some reason, he does not revert the buffer of his editor, and thus continues editing A. In the end, he pushes a commit C which reverts B's changes, and introduces some new ones. In this way, the effect of my commit B is lost. Often, I have noticed the problem only by chance (and then I could easily reintroduce B by cherry-picking it). However, I am worried that sometimes I did not notice it at all. Is there an easy way of detecting (the potential of) such a situation? (I am happy with obtaining some false positives.) One somehow needs to detect whether the inverse of B is contained in some other commit.</p>

<p>I have created a test repo that shows such a commit: <a href=""https://github.com/tillmo/test"" rel=""nofollow noreferrer"">https://github.com/tillmo/test</a></p>

<p>This question is related to, but different from <a href=""https://stackoverflow.com/questions/27683077/how-do-you-detect-an-evil-merge-in-git"">How do you detect an evil merge in git?</a>. Note that there, the evil commit is a merge commit, while here it is not.</p>
","7","1930087","",""
"60130978","11816773","2020-02-08 20:38:47","8","8033","<git><git-commit><gnupg>","Can’t commit and push in Git because “cannot spawn gpg2: No such file or directory”","<p>Anytime I've tried to commit a change through the command line I've received this error message:</p>

<pre><code>error: cannot spawn gpg2: No such file or directory
</code></pre>

<p>Update:
I'm running Windows 10</p>
","0","11816773","0","0"
"22291456","2985425","2014-03-10 03:12:57","22","5858","<ios><xcode><git><cocoapods><git-commit>","Commit to git after switching to workspace and adding CocoaPods in Xcode?","<p>I've just added CocoaPods to my current project in Xcode 5. Of course, CocoaPods created a workspace and I've launched the workspace in Xcode. I see both my project and the Pods project in the workspace.</p>

<p>My project has been under source control (local git + remote Bitbucket repository) since day one. Now I want to commit and add the Pod stuff but I think that my repo is too deep in the workspace--when I try to commit (and I've tried various commits to get the Pod stuff to take) it always errors out.</p>

<p>How can I add my Pods to my repo?  Do I have to delete the old repo and create a new one (git init) at the Workspace level?  (I sure hope not because I'm not that great with git and I have a lot of historical commits in my repo already.)</p>
","3","2985425","0","0"
"60134199","12352707","2020-02-09 06:52:54","1","302","<git><git-merge><git-commit><git-remote>","What is the standard practice when you're done with a git branch?","<p>I forked a repo, then created a branch called <code>patch1</code> made changes and committed them, then I created a pull request upstream and got it merged upstream with master. But in my local repo the branch isn't merged, how do I pull the merge from upstream without getting the rest of the branches from upstream that I don't want/need such as <code>Hotfix12</code> or <code>NewFeature5</code>? </p>

<p>What is standard practice here?</p>
","0","12352707","",""
"41368791","9161","2016-12-28 19:50:55","1","253","<git><githooks><git-commit><pre-commit-hook>","How can I tell if git was executed with the ""-a"" flag in a pre-commit hook?","<p>I've got a git pre-commit hook which does linting. When it's invoked, it loops over the staged files and runs a linter on them. This works great.</p>

<p>However, when you run <code>git commit -am 'Foo'</code> it runs without having any staged files. How can I tell if it was invoked with <code>-a</code> or the <code>--all</code> flag? Is there an easier way to get the files which will be stored in git?</p>
","3","9161","",""
"41369690","1197249","2016-12-28 21:04:31","1","240","<git-commit><git>","Is git unpack-objects of any use?","<p>I don't understand what is the need/use of the <code>git unpack-objects</code> command.<br>
If I have a pack file <em>outside</em> of my repository and run the <code>git unpack-objects</code> on it the pack file will be ""decompressed"" and all the object files will be placed in <code>.git/objects</code>. But what is the need for this? If I just place the pack and index files in <code>.git/objects</code> I can still see all the commits and have a functional repo and have <em>less</em> space occupied by my .git since the pack file is compact.<br>
So why would anyone need to run this command?</p>
","3","1197249","",""
"41378779","7146638","2016-12-29 11:27:10","6","1117","<git><git-merge><git-rebase><git-commit><merge-conflict-resolution>","git rebase --continue vs. new commit","<p>If I run into merge errors, I usually solve the merge errors, add my files again and use 
<code>git rebase --continue</code><br>
to continue with pulling and pushing.</p>

<p>Now I had some time to take a deeper look into how git works and figured out, that it should be possible to create a new commit instead. I think, thats maybe a good idea to clarify that there were some merge errors and that they were solved manually.</p>

<p>So which one is recommed to use and what are their both advantages and disadvantages?
Thanks in advance!</p>
","0","7146638","",""
"41382385","700070","2016-12-29 15:12:59","1","90","<git><version-control><commit><git-branch><git-commit>","Relationship between git branches and a release","<p>I've used <code>git</code> for sometime now, but it isn't clear how git <code>commit</code>s relate to <code>releases</code> which relate to the <code>master</code> branch.</p>

<p>My understanding now is <code>master</code> branch is like any other branch in git. It is just created with <code>git init</code> upon initially making a git repository.</p>

<p>Thus, can someone explain the relationship between <code>git branches</code> to a <code>release</code>?</p>

<p>Is it a <code>1 or M:1</code> relationship? (e.g. 1 or many branches are in a release) ?</p>

<p>Also, within a git <code>branch</code> how are the individual changes tracked? e.g. in one branch, I change the letter <code>B</code> in <code>filex.py</code> to <code>C</code> and commit it to a branch? </p>

<p>Thanks</p>
","0","700070","",""
"60275861","1654358","2020-02-18 07:32:57","-2","1232","<git><gitlab><git-commit>","How to delete few middle commits in gitlab?","<p>I need a help in git/gitlab.
I got gitlab with test repo e.g. 6 commits:
A->B->C->D->E->F
Commit A is first and F the last one.
How Can I do this: remove commits B,C,D,E?
I want to have only the first one and last one""
A->F
I do it because my repo weights a lot.
What commands shoul I enter?</p>
","2","1654358","",""
"41383356","235472","2016-12-29 16:13:53","1","7322","<git><github><commit><git-commit>","Total number of commits on git/GitHub in a specific timeframe?","<p>How can I know the total number of commits done on a project through the GitHub web interface? <strong><em>How can I get the total number of commits in a specific time frame?</em></strong></p>

<p>What I can get now is the number of commits done by each developer, not the total one.</p>

<p>Example: <a href=""https://github.com/BVLC/caffe/graphs/contributors?from=2013-09-08&amp;to=2016-12-24&amp;type=c"" rel=""nofollow noreferrer"">https://github.com/BVLC/caffe</a></p>
","0","235472","",""
"3888098","289715","2010-10-08 06:09:06","2","625","<git><core.autocrlf><git-commit>","Does GIT does the CRLF/LF conversion during commit or checkout(vi)?","<p>I have a doubt now, does Git does the CRLF conversion during a commit or during a <code>vi</code> of the file?</p>

<p>Let’s say I have some files in Windows with CRLF (not a Git repo), when I sync these files to a UNIX Git repo and do git add/commit with <code>autocrlf true</code> enabled, will these files get the conversion from CRLF to LF? </p>

<p>Or does it do the conversion of these files only when I <code>vi</code> these files and commit it again?</p>

<hr>

<p>The second doubt is, what should be the <code>autocrlf</code> and <code>safecrlf</code> setting in both Unix and Windows Git clones if my parent repository exists in Unix and need LF alone. Should I use global setting?</p>

<p>Thanks in advance</p>
","1","289715","0","0"
"3895453","227259","2010-10-09 02:28:33","399","207341","<git><version-control><repository><git-commit>","How do I make a Git commit in the past?","<p>I'm converting everything over to Git for my own personal use and I found some old versions of a file already in the repository.  How do I commit it to the history in the correct order according the file's &quot;date modified&quot; so I have an accurate history of the file?</p>
<p>I was told something like this would work:</p>
<pre><code>git filter-branch --env-filter=&quot;GIT_AUTHOR_DATE=... --index-filter &quot;git commit path/to/file --date &quot; --tag-name-filter cat -- --all  
</code></pre>
","10","227259","0","0"
"41395127","1648204","2016-12-30 10:58:51","-1","508","<php><git><git-commit><bitbucket-api>","How can we display Bitbucket commit version in php page","<p>How can we get bitbucket last commit version in php page. I tried <a href=""https://api.bitbucket.org/2.0/repositories/user/repositoryname"" rel=""nofollow noreferrer"">https://api.bitbucket.org/2.0/repositories/user/repositoryname</a> but getting access forbidden.also nothing explained anywhere about header.</p>
","1","1648204","",""
"60435412","","2020-02-27 14:26:16","1","60","<git><git-branch><git-commit>","Changing the Last Commit of a Remote Branch","<p>I pushed onto my branch with <code>git push origin branch</code>. I then realized that I made a small mistake in this commit. I didn't want to revert because a large part of the commit was correct, only a small change was needed. Instead of reverting, I <code>git reset --soft &lt;previous-commit&gt;</code> such that I did not lose my staged files. I then committed the fix to the small mistake. Unfortunately, I realized the hard way that I couldn't push after doing so, since the most recent commit on my local and remote were out of sync.</p>

<p>For instance.</p>

<pre><code>A-B-C-D // Local, before git reset --soft
A-B-C-D // Remote
A-B-C   // Local, after git reset --soft
A-B-C-E // Local, after new commit.
</code></pre>

<p>What should I be doing in this situation so that remote reflects local? What would <code>git push -f origin branch</code> do in this case?</p>

<p>Thanks</p>
","4","","",""
"41537902","5858431","2017-01-08 21:05:41","0","728","<git><git-commit>","Automatic release tag Github","<p>Is there a way to make release tag creation automatic in git?</p>

<p>When I commit a change in any of the files, it has to create a release tag with the updated version number? Is it a possibility?</p>
","0","5858431","",""
"60453301","1583","2020-02-28 14:01:30","6","1412","<github><azure-pipelines><git-commit><sentry>","Using Azure DevOps, get list of commits from GitHub in order to pass to Sentry as part of a release?","<p>I am using Azure pipelines to build and release my software through its GitHub integration. As part of monitoring, I am using Sentry to record exceptions, etc.</p>

<p>I want to use the ""Suspect Commits"" feature of Sentry (so it can point at commits that are likely to have caused a specific issue). For this to work, I need to send Sentry a release (just a version associated with a specific project) with a list of associated commits relating to it.</p>

<p>I've read this post:</p>

<p><a href=""https://stackoverflow.com/questions/58858386/azure-devops-integration-in-sentry-associate-commits"">Azure DevOps integration in Sentry: Associate commits</a></p>

<p>And this one on GitHub:</p>

<p><a href=""https://github.com/getsentry/sentry/issues/11127"" rel=""nofollow noreferrer"">https://github.com/getsentry/sentry/issues/11127</a></p>

<p>And while both have (very different) approaches to getting a list of commits, they assume that one is using the Azure DevOps repositories feature. I have no repositories on my DevOps instance, so, though useful posts, they don't really help me directly.</p>

<p>In short - I need to list all the commits on GitHub associated with a specific release on Azure DevOps, so I can send them to the Sentry API.</p>

<p>Has anyone done this? How can I achieve that? Am I missing something obvious? </p>
","13","1583","",""
"60455413","6713310","2020-02-28 16:07:56","-3","108","<git><commit><git-commit>","git - Reset number of commits","<p>I created a branch from a master branch which has 2000+ commits. More precisely, I first pulled the master branch to my machine, made some modifications, created a new local branch and push it remotely.</p>

<p>For some reason, the number of commits has been transferred to my new branch. I'd like to reset this number to zero or, even better, to the number of commits I've actually made on the new branch. Any ideas?</p>
","1","6713310","",""
"4102151","495637","2010-11-04 22:53:37","14","3659","<git><grep><commit><git-commit>","How grep through your staged files prior to committing?","<p>So prior to running <code>git commit</code> I often will run the following:</p>

<pre><code>git grep --cached -l -I ""debugger""
</code></pre>

<p>I thought it was similar to:</p>

<pre><code>git diff --cached
</code></pre>

<p>(which will show you all the changes you are about to commit, ie. will show you the diff in your staged files).</p>

<p>Unfortunately, I just found that the <code>--cached</code> option for <code>git grep</code> simply tells git to ""only"" look at everything in its index.</p>

<p>So how can I run <code>git grep</code> and have it only grep through my staged files?</p>

<p>(Yes, I know I could simply do <code>git diff --cached</code> and search in that, but I would rather have the programmatic ability to grep through my staged files.)</p>
","1","495637","0","0"
"22818335","2457028","2014-04-02 17:07:25","5","477","<git><github><git-commit>","Commits can't close issues on github remote repository","<p>I have a remote repository on GitHub and usually fix several issues by using commits containing terms like ""Fixes"", ""Closes"", etc.  For example:</p>

<pre><code>git commit file -m ""Fixes #123 closes #123 lorem ipsum""
git push origin mybranch
</code></pre>

<p>However, recently issues aren't being closed by these commits. I have to close them manually on GitHub.</p>

<p>Is there something wrong with the commit?</p>

<p>Best, and thanks in advance for any help</p>
","0","2457028","0","0"
"43690977","3625770","2017-04-29 01:39:09","9","2025","<r><git><rstudio><git-commit><git-push>","Commit a large number of files in RStudio using GIT panel","<p>In RStudio, if you are dealing with a directory that contains a large number of files, and you want to commit and push the recent changes (that you made on all of them) to your repository, the GUI Git component gets super slow and practically doesn't work. Any idea?</p>
","0","3625770","0","0"
"43697310","999353","2017-04-29 15:19:58","1","116","<git><git-commit><git-amend>","Unintended commit by Git","<p>I committed a java file using</p>

<pre><code>git commit -a
</code></pre>

<p>I forgot to add a file to said commit so I tried to amend the previous one using</p>

<pre><code>git commit -a --amend
</code></pre>

<p>When the editor opened up, I changed my mind and closed the editor using <code>:q!</code>.</p>

<p>I then did a git log and my unintentional commit was successful.</p>

<p>Anyone know why git went ahead and committed my 'aborted' commit?</p>
","0","999353","",""
"26227629","2579721","2014-10-07 02:18:21","1","43","<git><bash><git-commit>","Specify files with *","<p>I am running Git Bash and GUI under Windows XP thus in a mingw environment. </p>

<p>I created two files, a and b, with vi, added them and then committed them. Then I modified both again, then using git bash added a but not b. Git GUI verified that a was staged but not b.</p>

<p>Next I typed the following:</p>

<p><code>git commit -m ""Staged a, not b, committing with * file specifier"" *</code></p>

<p>Git GUI indicates that both were committed.</p>

<p>I repeated the experiment but used GUI to attempt the commit. It only committed file a. </p>

<p>Is the * file specifier a problem?</p>
","2","2579721","",""
"25118279","1539932","2014-08-04 12:03:41","0","646","<git><github><git-commit><git-remote><unfuddle>","git object have invalid commit data - date","<p>I am trying to upload my unfuddle repo to github. I have added github repo by ssh and it is working fine. But when i trying to push data it says invalid object author line. When i push to unfuddle it works fine .</p>

<pre><code>remote: error: object 9283f9029b065b6be9d4ecb483e47be8dcce84be:invalid author/co
mmitter line - missing space before date
remote: fatal: Error in object
</code></pre>

<p>can anyone guide me how to edit the author line /date for this commit object . </p>

<p>EDIT</p>

<p>i checked the details for this commit, and it has unix default date. </p>

<pre><code>$ git show 9283f9029b065b6be9d4ecb483e47be8dcce84be
commit 9283f9029b065b6be9d4ecb483e47be8dcce84be
Author: HEMC &lt;HEMC@HEMC-PC&gt;
Date:   Thu Jan 1 00:00:00 1970 +0000
</code></pre>

<p>I tried to rewrite the date as explained <a href=""https://stackoverflow.com/questions/454734/how-can-one-change-the-timestamp-of-an-old-commit-in-git"">here</a> .</p>

<pre><code>git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 9283f9029b065b6be9d4ecb483e47be8dcce84be ]
     then
         export GIT_AUTHOR_DATE=""Mon May 2 21:38:53 2014 -0800""
         export GIT_COMMITTER_DATE=""Mon May 19 01:01:01 2014 -0700""
     fi'
</code></pre>

<p>But it says <code>Cannot rewrite branches: You have unstaged changes.</code></p>

<p>I tried to drop stash . </p>

<pre><code>$ git stash drop
No stash found.
</code></pre>

<p>I don't know, what is the problem with rewrtit.</p>
","6","1539932","",""
"43918788","5583713","2017-05-11 14:46:29","0","71","<git><github><bitbucket><git-commit>","Delete git commit completely in local and remote repo shared by other hundred developers","<p>Here is the situation:</p>
<blockquote>
<p>A newbie developer has commited and pushed sensible credentials to remote dev branch, which is strictly forbidden</p>
<p>This forbidden commit then got merged into the master branch together with other hundred commits afterwards</p>
<p>The forbidden commit has been pulled by other hundred developers into their local repos</p>
</blockquote>
<p>Question: How to get rid of this forbidden commit completely with as less &quot;pain&quot; as possible?</p>
","1","5583713","",""
"25139798","414075","2014-08-05 13:15:42","2","752","<git><cron><git-commit>","git commit can't find (global) config running in cron job","<p>I want to commit some file changes using a cron job calling a script with the following line in roots crontab</p>

<pre><code>0 * * * * cd /files/ &amp;&amp; ./backup.sh &gt;/tmp/cronlog 2&gt;/tmp/cronerror
</code></pre>

<p>the script looks as follows:</p>

<pre><code>#!/usr/bin/env bash

… prepare the files for the backup …

echo ""commit changes …""
git add -u
git commit -m ""backup""
git push
</code></pre>

<p>Prior to the cron setup I've also set <code>user.email</code> and <code>user.name</code> for the root user and I've checked that the script runs if I call if from the command line.</p>

<p>But in <code>/tmp/cronerror</code> I receive the following well known message.</p>

<pre><code>*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
…
</code></pre>

<p>I've also tried setting <code>HOME=/root</code> in the script but this doesn't seam to make a difference.</p>

<p>Is there a way of telling the git command where to find the global git-config when running in a cron job?</p>
","4","414075","0","0"
"62689493","11878342","2020-07-02 05:20:25","3","1070","<reactjs><git><github><git-commit>","Restore All Deleted Files to the Current Working Directory from Git","<p>I have accidentally deleted all files in frontend directory from my project. This is where I have everything. I can see all those files in the <strong>changes</strong> pane and it is marked with <strong>D</strong>. Is there any way I could retrieve completely everything.</p>
<p>Now, this is how my current project looks</p>
<p><a href=""https://i.stack.imgur.com/sxra5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sxra5.png"" alt=""enter image description here"" /></a>
<a href=""https://i.stack.imgur.com/TCmIk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TCmIk.png"" alt=""enter image description here"" /></a>
<a href=""https://i.stack.imgur.com/xB0pi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xB0pi.png"" alt=""enter image description here"" /></a></p>
","0","11878342","",""
"62916969","13064727","2020-07-15 14:14:50","1","129","<git><github><git-commit>","How to remove new files from git repo safely","<p>I added some new files to a local copy of a Github repo and accidentally ran <code>git add *</code> and <code>git commit</code>, but not <code>git push</code>.</p>
<p>I think the new files should only be on my local copy of the repo. How do I safely <em>remove</em> those files from the <strong>next</strong> <code>git push</code> command. I want to keep the files locally, but <strong>not include</strong> them in the <em>next push</em>.</p>
<p>What is the best way to remove them from git, but leave them in place on my hard drive?</p>
","0","13064727","",""
"25407165","1425506","2014-08-20 14:19:27","3","65","<git><github><git-commit>","When was a specific feature implemented in git?","<p>Need to find out when (version, commit, whatever) the <code>--reset-author</code> option was added to the <code>git commit</code> command.</p>

<p>I already went to the GitHub repo, search for ""reset-author"". That gave me only the files actually containing the match, and I doing git blame here and there doesn't take me anywhere.</p>

<p>Another approach would be to find out the first occurence of ""reset-author"" on the repo. I'm going to clone the whole repo locally right now and try to do that.</p>

<p>Is there a simpler way?</p>
","2","1425506","0","0"
"44204514","7946648","2017-05-26 14:50:34","7","11304","<git><github><git-commit><git-push><pull-request>","How to change the author of a commit in GitHub?","<p>I want to know if there is a way to change the person(account) who pushed changes in a GitHub repository. </p>

<p>For example: I push to my private repository under a different name(not email) but I misspell one letter of my name and GitHub marks the commit as commited by userame not username;</p>
","6","7946648","0","0"
"62928039","4728778","2020-07-16 05:29:59","2","1509","<git><zsh><git-commit><oh-my-zsh>","git commit -m ""add !empty check"" zsh: event not found: empty","<p>I just observed having ! before a git commit message triggers events in zsh.</p>
<p>Not sure if it's zsh issue or git feature. Please explain.</p>
","0","4728778","0","0"
"44220684","1680944","2017-05-27 19:10:49","1","232","<ios><xcode><git><github><git-commit>","Commit option in source control does not work properly in Xcode","<p>I have created an application, and I want to commit it to GitHub as as soon as I implement a new option. What I have noticed is that when I use the commit option under source control in Xcode, <a href=""https://i.stack.imgur.com/jB0uc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jB0uc.png"" alt=""Commit option under source control""></a></p>

<p>some commits appear in the GitHub website, while others don't, following is a clarification</p>

<p>The following figure shows the commits that appear in Xcode and the next one shows the commits appearing in the GitHub website. As you can notice ""Added the Login with Facebook button"" commit is missing, and any commit that I try to do after this one does not appear. What is the problem?</p>

<p>EDIT: What I have noticed is that I have two working copies of the same project. I doubt that I have created both, where the first copy has the remote GitHub link specified to it, while the other does not. I have tried to add the GitHub link to the second, but it creates more confusion than ever.
<a href=""https://i.stack.imgur.com/AU8YL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AU8YL.png"" alt=""Commits Appearing in Xcode""></a></p>

<p><a href=""https://i.stack.imgur.com/UTwjl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UTwjl.png"" alt=""Commits Appearing in Github website""></a></p>
","0","1680944","",""
"25454884","1929857","2014-08-22 20:09:57","3","909","<git><version-control><git-branch><git-push><git-commit>","How did my collaborators' commits find their way into my branch?","<p>I am new to Git and still learning about it. I want to push my local branch commit to remote. I have </p>

<ol>
<li>created a local branch <code>Task1004</code> and done some work,</li>
<li>committed all the changes,</li>
<li>run <code>get fetch</code> and <code>git pull origin development</code></li>
<li>run <code>git rebase development</code>.</li>
</ol>

<p>Now I want to push my changes but, when I use <code>git log</code>, I see all other commits which have been pushed by other developers on branch <code>development</code>; for instance, one of my own commit and 3 commits by my collaborators.</p>

<p>When I run</p>

<pre><code>git push origin Task1004
</code></pre>

<p>all 4 commits are pushed to <code>Task1004</code>, which will be later merged with <code>development</code>.</p>

<p>What is the reason of this and what should I do to push only my commits?</p>
","0","1929857","0","0"
"44249276","8029181","2017-05-29 19:24:06","12","29076","<git><github><git-commit><git-squash>","How to Squash 3 commits into 1?","<p>I'm fairly new to git, so I've been trying to figure out how to squash 3 commits into 1 so my PR can get merged. I've read a lot of docs and guides and sort of found out how to squash commits but one of my commits aren't showing up. I tried attaching a photo of my commits and a photo of my terminal when I type in: ""git rebase -i HEAD~5"", but unfortunately I'm a new user so I can't? But anyway, I would greatly appreciate some help. </p>
","0","8029181","0","0"
"44487797","8145610","2017-06-11 19:19:39","0","62","<git><github><git-bash><git-commit>","Delete Github Commits","<p>Im trying to host my personal website on Github. I was logged in as different user on Gitbash and pushed the code. In that repository I could see contributors as 2 and few commits which I would like to remove. Can I delete unwanted commits. Making this repository completely clean would be fine but I want to make number of commits zero.</p>
","4","8145610","",""
"63197697","5420846","2020-07-31 19:02:01","0","603","<git><version-control><git-commit><git-filter-branch><git-filter-repo>","How to replace a file for all git commits if I've already pushed?","<p>I accidentally published sensitive information instead of putting a sample image for two files in two commits a few months ago on our company's main website repo. I shared two pics at <code>images/Example.jpg</code> and <code>examples/Example.jpg</code> which ended up containing sensitive info instead of the actual example I wanted to push.</p>
<p>Now I'm wondering how can I substitute these with the correct Example.jpg and replace all the previous commits such that you can't ever &quot;Browse the repository at this point in time&quot; and be able to see that picture?</p>
<p>The information is in two files in two separate commits. If they weren't so far up the commit history, I'd probably just reset HEAD and repush, but that seems impossible now. Visually you can think of it like:</p>
<pre><code>[AuthorX] commitLatest       Latest commit
[AuthorY] commitTwoDaysAgo   updated something
.....
.....
.....
[  ME   ] commit2MonthsAgo sensitiveInfo1
.....
[  ME   ] commit2MonthsAgo sensitiveInfo0
[AuthorZ] olderCommits       --FINE FROM HERE--
.....
</code></pre>
<p>I want to keep the commit history exactly the same except that the two images in commits <code>sensitiveInfo1</code> and <code>sensitiveInfo0</code> have a different <code>images/Example.jpg</code>. Is that possible?</p>
<hr />
<p>I tried <code>filter-branch</code> from <a href=""https://docs.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository"" rel=""nofollow noreferrer"">here</a> but it gave this warning:</p>
<pre><code>WARNING: git-filter-branch has a glut of gotchas generating mangled history
 rewrites.  Hit Ctrl-C before proceeding to abort, then use an
 alternative filtering tool such as 'git filter-repo'
 (https://github.com/newren/git-filter-repo/) instead.  See the
 filter-branch manual page for more details; to squelch this warning,
 set FILTER_BRANCH_SQUELCH_WARNING=1.
</code></pre>
<p>I'm worried I'll mess up the company's main repo if I use that. The documentation for <code>git-filter-repo</code> is so confusing and convoluted. Like I'm worried it'll completely rewrite the authors or data or something. Or for example, we have lots of open branches, and I'm worried that it will mess up something there? Any suggestions on how to do this safely? I really appreciate this as I'm kinda panicking.</p>
<p>Thanks so much.</p>
","14","5420846","",""
"25716751","","2014-09-08 02:36:13","0","84","<git><git-commit>","Git commit , not able to commit the changes from editor window","<p>I am new to GIT and trying to do some of its basic operations, working with Windows.</p>

<p>I am successfully able to add a new file using command:- <code>git add ""filename.txt""</code>
When I try to commit is using command:-- <code>git commit ""filename.txt""</code> , a new editor window opens and there I add the commint message. I am not able to come out of it.
If I do ctrl+c, I get to the start point but changes are not committed.</p>

<p>I do not want to use -m to add message. </p>

<p>How can I save the added message in the editor window?</p>
","3","","",""
"44508726","3258462","2017-06-12 21:07:23","1","996","<git><visual-studio><ide><commit><git-commit>","Visual studio code is git pushing but repo does not match","<p>I can't figure this out</p>

<p>I normally do my github commits like so <em>(just using command prompt)</em></p>

<p>command prompt → <code>cd</code> to the directory → <code>git add .</code> → <code>git commit -m ""Commit Message""</code> → <code>git push origin master</code></p>

<hr>

<p>but,</p>

<p>When I run in visual studio code, and I make changes to my repo, I'll stage those items to commit</p>

<p>When I push it upstream and then create a git commit > push onto my repo, everything shows that it is successful</p>

<p><strong>HOWEVER,</strong> when I go to my github repo, the commit is no where to be seen there nor are the changes there either</p>

<p><strong>ALSO,</strong> when I run <code>git status</code> through my command prompt, it shows </p>

<blockquote>
  <p>""nothing to commit, working tree clean""</p>
</blockquote>

<p>indicating I did commit/push, but then again my github repo does not match this</p>

<hr>

<p>I'm running git-scm , and the git history(git log) extension through visual studiocode</p>

<p>Could someone enlighten me what I am doing wrong here?</p>
","3","3258462","0","0"
"63220605","9272694","2020-08-02 20:15:56","0","167","<git><github><git-commit><sha>","How to find the commit message using BLOB SHA1","<p>I am a beginner in <em>GIT</em> and trying to do some validation with <em>Bit Bucket</em> objects.</p>
<p>I am using the below script to find all the objects in a branch:
<CODE>
git ls-tree -r branch-name
</CODE></p>
<p>This gives me the object name along with the blob SHA1 information. I want to find the commit message from the blob. We use the <em>jira</em> number in the commit message and I want to extract the <em>jira</em> no from the message.</p>
<p>The problem is that the file is commited multiple times to resolve merge conflict for some other object and thereby when I try to find the <code>commitID</code> from <em>SHA1</em>, it is giving me the latest <code>commitID</code>, which is wrong as that <em>jira</em> is not associated with the particular object.</p>
<p>If I see the object in the remote repo, I can still see the correct commit message (jira-no) and thereby would like to retrieve the object and the corresponding commit message from the target branch. Please suggest if there is a way to do so.</p>
<p>Another query is the way to resolve merge conflict. In case of conflict with one object, we generally pull the entire content of the target branch and then resolve the conflicting object. Due to this, the object which is not modified is also commited again. Any easy way to pull only the conflicting object.</p>
<p>Thanks for your help</p>
","0","9272694","",""
"25739604","4021962","2014-09-09 08:09:39","0","105","<git><dvcs><git-commit><git-log>","git - finding from what commit branch created","<p>Suppose I had a branch 'develop' and I created a branch 'test_branch' from it. 
Then the both branches moved forward with lots of commits and even merges to each other. </p>

<p>Now, my commit graph turned into mess. So how to track the commit point from where my test_branch was created from develop branch.</p>
","5","4021962","",""
"63240930","2360577","2020-08-04 05:50:11","2","656","<javascript><github><git-commit><git-push><isomorphic-git>","git.push() works but the commit on github is empty","<p>I use isomorphic-git in the browser (Chrome at the moment) to try to save code on <strong>github</strong></p>
<p>After I clone a private github repository, I am trying to <em>add</em> new files to it, do a <em>commit</em> and <em>push</em> it back on the same private <strong>Github</strong> repository.</p>
<p>But, when I check on Github, the commits are recorded but totally empty!</p>
<p><a href=""https://i.stack.imgur.com/Dr7mq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Dr7mq.png"" alt=""enter image description here"" /></a></p>
<p>It is like the files I added where not linked to the commit for some reason and the commit is not aware of them ...</p>
<p>I get an Ok response from the push though:</p>
<pre><code>{
    headers: {
        cache-control: &quot;no-cache, max-age=0, must-revalidate&quot;
        content-type: &quot;application/x-git-receive-pack-result&quot;
        date: &quot;Tue, 04 Aug 2020 04:58:59 GMT&quot;
        expires: &quot;Fri, 01 Jan 1980 00:00:00 GMT&quot;
        pragma: &quot;no-cache&quot;
        server: &quot;cloudflare&quot;
        vary: &quot;Accept-Encoding&quot;
        x-github-request-id: &quot;CE24:0E4C:16E8D5:2B275C:5F28EB11&quot;
    ok: true
    refs: {
        refs/heads/master: {
            error: &quot;&quot;
            ok: true
        }
    }
}
</code></pre>
<p>Which seems strange to me ... But the commit and its message show up on github.</p>
<p>What am I doing wrong? I think I did all the necessary things but maybe I missed something ...</p>
<p>Here, is my code:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    const stagingRoot = '/staging'
    ...
    import('https://unpkg.com/isomorphic-git@1.7.4/http/web/index.js').then(http =&gt; {
      window.http = http
      return true
    }).then(response =&gt; {
      // Initialize isomorphic-git with a file system
      window.fs = new LightningFS('fs')
      // Using the Promisified version
      window.pfs = window.fs.promises
      return true
    }).then(response =&gt; {
      const buttonSpace = document.getElementById('git_button_space')
      const repositoryURL = appendText({value:'https://github.com/&lt;my private repository path&gt;.git'},document.getElementById('git_repository_url_space'))
      let branch = appendDropdown(
        {items:[{label:'master',value:'master'}],value:'master'},
        document.getElementById('git_repository_branch_space'),
        function(event) {}
      )
      const username = appendText({value:'&lt;my user name&gt;'},document.getElementById('user-js-git_username_space'))
      const password = appendText({value:'&lt;my app key&gt;'},document.getElementById('user-js-git_password_space'))
      const path = appendText({value:'/git/git_app2'},document.getElementById('user-js-git_repository_path_space'))
      const pushButton = appendButton('プッシュ',buttonSpace, function(event) {
        return pfs.du(stagingRoot)
        .then(diskUsage =&gt; {
          return pfs.rmdir(stagingRoot,{recursive: true})
        })
        .catch(error =&gt; {
          return true
        }).then(response =&gt; {
          return pfs.mkdir(stagingRoot)
          .catch(error =&gt; {
            return true
          })
        }).then(response =&gt; {
          return git.clone({
            fs,
            http,
            dir:stagingRoot,
            corsProxy: 'https://cors.isomorphic-git.org',
            url: repositoryURL.getValue(),
            ref: branch.getValue(),
            onAuth: url =&gt; {
              const auth = {
                username: username.getValue(),
                password: password.getValue(),
              }
              return auth
            },
            singleBranch: true,
            depth: 100
          })
        }).then(response =&gt; {
          return pfs.du(stagingRoot+path.getValue())
            .then(diskUsage =&gt; {
              return true
            })
            .catch(error =&gt; {
              return pfs.mkdir(stagingRoot+path.getValue(),{recursive:true})
              .catch(error =&gt; {
                return true
              })
            })
          }).then(response =&gt; {
            return git.add({ fs, dir: stagingRoot+'/git', filepath: 'git_app2' })
          }).then(response =&gt; {
            return pfs.writeFile(stagingRoot+path.getValue()+'/package.json', JSON.stringify({key1:val1,key2:val2}))
          }).then(response =&gt; {
            return git.add({ fs, dir: stagingRoot+path.getValue(), filepath: 'package.json' })
          }).then(response =&gt; {
            const user = kintone.getLoginUser()
            return swal.fire({
              input: 'textarea',
              inputPlaceholder: 'commit message',
              inputAttributes: {
                'aria-label': 'commit message'
              },
              showCancelButton: true
            }).then(commitMessageResponse =&gt;{
              if(commitMessageResponse.isConfirmed) {
                return git.commit({
                  fs,
                  dir: stagingRoot,
                  author: {
                    name: user.name,
                    email: user.email,
                  },
                  message: commitMessageResponse.value,
                  ref: branch.getValue(),
                })
              } else {
                return false
              }
            })
          }).then(response =&gt; {
            return git.push({
              fs,
              http,
              dir: stagingRoot,
              corsProxy: 'https://cors.isomorphic-git.org',
              remote: 'origin',
              ref: branch.getValue(),
              onAuth: url =&gt; {
                const auth = {
                  username: username.getValue(),
                  password: password.getValue(),
                }
                return auth
              },
            })
          }).then(response =&gt; {
            console.log(response)
          })
      })</code></pre>
</div>
</div>
</p>
<p>I use <strong>isomorphic-git</strong> and  its FS library <strong>lightning-fs</strong> that are included with script tags:</p>
<pre><code>&lt;script src=&quot;https://unpkg.com/@isomorphic-git/lightning-fs&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/isomorphic-git@1.7.4&quot;&gt;&lt;/script&gt;
</code></pre>
<p>I also dynamically import <strong>isomorphic-git</strong>'s http library like below as my environment (Kintone) does not like ES6:</p>
<pre><code>import('https://unpkg.com/isomorphic-git@1.7.4/http/web/index.js').then(http =&gt; {
    window.http = http
    return true
})
</code></pre>
","3","2360577","",""
"25762445","654019","2014-09-10 09:57:04","2","130","<git><git-commit>","How can I change text for a commit that I did some times ago in git","<p>I made a commit some times ago and I see some spelling error in the text for commit. As Far as I know this test is for users to understand what commit is about and has no effect on source files so if I change it, it should not make any problem with other developers.</p>

<p>Am I right that changing the text has no effect on other developers?</p>

<p>How can I change the text?</p>

<p>I am using git and for UI I am using Sourcetree.</p>
","3","654019","",""
"7667497","","2011-10-05 20:44:49","2","1974","<git><githooks><git-commit>","Adding extra parameter to git commit","<p>We have a custom-made system to track client tasks/projects. We manually add a checklist and mark them off, often also adding the time it took for each point. This is very useful but a bit redundant, as we also provide the same information in git. So I'm thinking of somehow adding an extra parameter to git that allows me to indicate how long something took, and then extract this data and save it in a database (we normally use PHP/MySQL). How would one go about this? </p>

<p>I think of doing:</p>

<p><code>git commit -m ""Adding search functionality"" 15</code></p>

<p>And then somehow being able to extract the 15 (minutes) to process it later on, together with the description of this task, so that we do not have to add ""Adding search functionality"" which took 15 minutes separately. I'm thinking of a hook that takes this second parameter and uses it as a variable to be passed on to a PHP script. Is this feasible? </p>
","1","","",""
"26050327","1108891","2014-09-26 00:43:05","26","25269","<git><git-commit><git-amend>","How does git commit --amend work, exactly?","<p>I have seen <em><a href=""https://stackoverflow.com/questions/25948049/git-commit-amend-in-detached-head-state/25948372#25948372"">&#39;git commit --amend&#39; in detached HEAD state</a></em>. The question requires the answer to be more complex than needs be.</p>
<p>I'd like to understand just how <code>git commit --amend</code> works in a normal HEAD situation.</p>
","1","1108891","0","0"
"63515343","13378247","2020-08-21 01:42:23","-3","40","<git><github><visual-studio-code><git-commit>","How to revert both local and remote git repository to a previous commit?","<p>I want every commit after the one with hash <code>ac9edf2</code> to disappear entirely from my local repository and the one on Github.</p>
<p>Trying to following instructions based on previous answers is like trying to study arcane magic.  For each step forward I run into a new error, or make some unwanted change I did not intend because the instructions are confusing, and commands are not intuitively named.</p>
<p>I just want something to copy and paste into the command line so that I can rewind reality 3 hours ago (specifically, to that commit) so that neither my local harddrive or the Github website knows about the alternate universe where I made commits after <code>ac9edf2</code>.</p>
<p>And I need it to be such that after I copy and paste these commands into the command line and hit ENTER, I can resume committing via MSVSC as usual, and be able to press <code>CTRL + G</code> then click <code>Publish branch</code> as usual to upload my new commits to Github without getting any deadly fatal errors.</p>
<p>I don't want to become a git expert.  I don't need to be concerned about any non-existent collaborators losing their work.  I just want to go back in time to the commit <code>ac9edf2</code>.  Forever.</p>
","1","13378247","",""
"26083621","3906918","2014-09-28 09:44:13","1","133","<git><git-commit><git-checkout>","Restoring deleted file with Git after having returned to a earlier Checkout","<p>I unfortunately deleted some file I tracked with Git and struggle to restore these files.</p>

<p>To be more detailed, I commited one file in a git repository.  Then, I added three more files to that repository and typed <code>git add &lt;FILENAME&gt;</code> and <code>git commit -m ""blabla""</code>. I typed <code>git log</code> and had the impression that I am not tracking the files individually but the entire repository. However, I wanted to have a version control for each file. I then used <code>git checkout</code> to revert to the version when I only had commited one file with the other three files being untracked. Now, the three files are deleted.  Unfortunately, <code>git log</code> returns only the first commit and not the subsequent ones I made. </p>

<p>Can somebody please tell me how to restore the missing files?  </p>
","0","3906918","",""
"26131116","2610873","2014-09-30 22:20:39","1","162","<git><github><commit><git-commit>","Why does GitHub invite me to enter two commit messages instead of just one?","<p>This may be a basic question but I thought it would be worth asking.
On GitHub, when you add a file to a repository by clicking the plus
sign next to the repository's name, you get a text area where you can enter the contents of the file, followed by <strong><em>two</em></strong> commit messages:</p>

<p><img src=""https://i.stack.imgur.com/U7Zmk.png"" alt=""enter image description here""></p>

<p>However, when I use <code>git commit -m</code>, I can only specify <strong><em>one</em></strong> message. Hence my confusion...</p>

<p>Does the <em>optional extended description</em> on GitHub end up in the repository or not? After cloning the GitHub repository in question, how would I view such messages?</p>

<p>As far as I know, <code>git commit</code> only allows you to specify one message (using the <code>-m</code> flag), but maybe I'm missing something. Is there a way to specify a second
<em>extended message</em>, somehow?</p>
","0","2610873","",""
"26140319","75642","2014-10-01 11:28:19","18","1273","<github><git-commit>","Checking issue task on GitHub using commit messages","<p>It's rather easy to refer and close a GitHub issue by referring to it in a commit message and using specific words (i.e. <em>closes</em>):</p>

<pre><code>This code change closes #123
</code></pre>

<p>As ""<em>closes #123</em>"" is being used in commit message it will automatically close issue #123 on GitHub.</p>

<p>But what if we had an issue with a task list? How can we manipulate these checkboxes using commit messages to avoid overhead work with GitHub? <strong>Is it possible?</strong></p>
","1","75642","0","0"
"26142645","3707356","2014-10-01 13:31:58","0","549","<git><git-commit><git-filter-branch>","Duplicate commits after merge with repo that has been filter-branch:ed","<p>I had to apply a filter-branch on a git repo, and for some reason there seems to have been a merge with the old hashes, which results in a tree that for each file looks like this:</p>

<pre><code>-.  .--A--B--C-....-X--Y--Z
  \--A'-B'-C'-...-X'
</code></pre>

<p>The commit letters with a prime are duplicates of the corresponding letters, just with a different SHA1 hash.
There has been commits after the filter-branch was applied which makes it hard to redo the filter-branch (Y,Z in the graph), so my question is, is there a way to remove the duplicate commits? </p>

<p>Edit: updated tree layout, noticed that the two paths doesn't really share a common ancestor.</p>
","1","3707356","",""
"26171623","2223138","2014-10-03 00:26:23","0","118","<git><git-commit><git-pull><git-init>","Can I revert to git init if I didn't do an initial commit","<p>I'm new to git and I did not do an initial commit.  I had a folder on my machine and ran git init, then git pull from the remote respository, and then committed the changes I had made locally.  Is it possible to revert changes wrought by the initial pull?  Does git init establish anything I can go back to?  I want to revert all files to how they were when I ran git init.</p>
","0","2223138","",""
"26189082","1391441","2014-10-04 02:39:29","41","16155","<git><git-commit>","Track file inside ignored directory","<p>Some time ago I set up my <code>.gitignore</code> file to <em>not</em> track a folder <code>my_folder</code> with:</p>

<pre><code>my_folder/
</code></pre>

<p>Now I want to track only a given file inside said folder, named <code>my_file.md</code>. After making <code>.gitignore</code> look like this:</p>

<pre><code>my_folder/
!my_folder/my_file.md
</code></pre>

<p>and checking:</p>

<pre><code>git status
</code></pre>

<p>the file does not appear as a change to be committed.</p>

<p>What am I doing wrong?</p>

<hr>

<p><strong>Add</strong></p>

<p>I tried changing my <code>.gitignore</code> file to:</p>

<pre><code>my_folder/*
!my_folder/my_file.md
</code></pre>

<p>as advised but the file is <em>still</em> not showing up as a change to commit after a <code>git status</code>. Do I need to reset something?</p>

<hr>

<p><strong>Add 2</strong></p>

<p>Attempting to add the file with <code>git add my_folder/my_file.md</code> returns:</p>

<pre><code>The following paths are ignored by one of your .gitignore files:
my_folder/my_file.md
Use -f if you really want to add them.
fatal: no files added
</code></pre>

<p>The command <code>git check-ignore -v my_folder/my_file.md</code> gives:</p>

<pre><code>.gitignore:1:my_folder/*    my_folder/my_file.md
</code></pre>
","7","1391441","0","0"
"44842624","8221835","2017-06-30 09:02:14","1","5260","<github><git-merge><git-commit><git-stash>","Git-merge error","<p>I am trying to practice contributing to other repositories on Github but I am getting an errors while I try merging 2 branches:</p>

<pre><code>error: Your local changes to the following files would be overwritten by merge:
        game.js
Please commit your changes or stash them before you merge.
Aborting
</code></pre>

<p>and here is the git status output:</p>

<pre><code>$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use ""git push"" to publish your local commits)
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   game.js
</code></pre>

<p>I tried git push as well but</p>

<pre><code>$ git push
remote: Permission to udacity/asteroids.git denied to Oalbacha.
fatal: unable to access 'https://github.com/udacity/asteroids.git/': The requested URL returned error: 403
</code></pre>

<p>Can you please help? Let me know if you need any more information. Thank you!</p>
","2","8221835","",""
"44843612","7949773","2017-06-30 09:52:51","0","47","<eclipse><git><git-commit>","Git: first commit gets lost after the second commit","<p>I only did some commits locally without pushing to the remote by using Eclipse.</p>

<p>And this happened: </p>

<p>After I did the second commit, my first commit disappeared and the files included in the first commit list appeared in the second commit list. </p>

<p>Is this a normal move for git commit? </p>

<p>Is this a consequence of some setting I accidentally made in git configuration?</p>

<p>Or how can I make two commits without being merged automatically because I want to put different comments to them. </p>
","2","7949773","0","0"
"63549649","6054538","2020-08-23 16:53:16","2","1648","<git><git-commit>","fatal: Could not parse object '4eb38c748f77b51ffcde8684dfea173af2e33e7b'","<p>I am trying this</p>
<pre><code>git reset --hard 4eb38c748f77b51ffcde8684dfea173af2e33e7b
</code></pre>
<p>I am getting an error</p>
<pre><code>fatal: Could not parse object '4eb38c748f77b51ffcde8684dfea173af2e33e7b'.
</code></pre>
<p>Why would I get this error? How can I fix my command?</p>
","2","6054538","0","0"
"44847336","4453737","2017-06-30 13:11:03","8","1892","<git><git-commit><git-log>","How to view git commits when local branch is ahead of origin Commits","<p>I want to view git commits when my branch is ahead of origin branch.</p>

<p>i tried <code>git log</code>  it returns all commits. but, i want to view only <code>ahead commits</code> from branch to origin/branch</p>

<p>here what i mean,</p>

<blockquote>
<pre><code>On branch permissions
Your branch is ahead of 'upstream/permissions' by 2 commits.
  (use ""git push"" to publish your local commits)

nothing to commit, working directory clean
</code></pre>
</blockquote>

<p>in this case i want to view 2 commits</p>
","0","4453737","",""
"44848215","5339022","2017-06-30 13:54:59","3","3389","<git><git-commit>","git commit asking for who you are","<p>I ran into below error message while trying to make some commits. </p>

<pre><code>*** Please tell me who you are.

    Run

      git config --global user.email ""you@example.com""
      git config --global user.name ""Your Name""
</code></pre>

<p>The issue could be solved by typing instructed command as shown. I just wonder why did such message occur? I have used git for a while now, normally it would just commit and add files without any message like this. </p>
","6","5339022","",""
"63550407","11525223","2020-08-23 18:06:13","-1","43","<git><github><commit><git-commit>","Git commit as part of previous commit","<p>Is it possible to commit your changes as part of a previous commit? Like add to your most recent commit with whatever you just changed?</p>
","2","11525223","",""
"26219683","1381158","2014-10-06 15:33:02","0","165","<vim><git-commit><ftplugin>","Vim: split specific filetype by default","<p>When editing Git commits in Vim, I'd like to automatically split the window on open so that I can edit the commit message in the top pane while keeping the commit change list in the bottom panel.</p>

<p>I have the ftplugin with a gitcommit.vim file for setting some other Git-commit-specific options, but when I add <code>split</code> to it, I get 3 panes (presumably because the second pane <em>also</em> splits, and then something prevents further recursion into infinity?).</p>

<p>I'd also like it to switch to the second panel and move the line that says <code># Changes to be committed:</code> to the top of the buffer for when I am doing commit-amends and the message is already long. Then, I'd like it to move back to the top buffer. I know what to type to do that, but I'd like it to happen automatically, if possible.</p>
","4","1381158","",""
"45120693","970696","2017-07-15 17:00:24","2","124","<github><git-commit>","How to find a component with the most commits?","<p>As a tester, in the past, I was often able to find a defect-prone component in our system but looking for those which were often changed. In SVN, I knew how to do it but in GitHub, I cannot seem to find the way.</p>
","0","970696","0","0"
"8377034","1080288","2011-12-04 17:12:18","5","4609","<git><github><terminal><commit><git-commit>","Trouble with first commit to git repository","<p>I'm new to Git, and have set it up and created my first repository. I'm trying to add a README as the first commit, and I've been following the steps on <a href=""http://help.github.com/create-a-repo/"">http://help.github.com/create-a-repo/</a> exactly, but I get stuck on this step: </p>

<pre><code>git push -u origin master
</code></pre>

<p>I get this error: </p>

<pre><code>ERROR: username/Hello-World.git doesn't exist. Did you enter it correctly?
</code></pre>

<p>I think it is because I got the <code>git remote add</code> command wrong: I forgot to substitute my username and repository name. Retrying it with the correct arguments gives me:</p>

<pre><code>$ git remote add origin git@github.com:christineh/Hello-World.git
 fatal: remote origin already exists.
$ git push -u origin master
Enter passphrase for key '/Users/christinehorvat/.ssh/id_rsa':
 ERROR: username/Hello-World.git doesn't exist. Did you enter it correctly?
 fatal: The remote end hung up unexpectedly'
</code></pre>

<p>How can I clean this up and get the correct remote?</p>
","6","1080288","0","0"
"45160222","3567888","2017-07-18 07:27:55","1","537","<path><gitlab><whitespace><git-commit>","Path error when edit/commit file on Gitlab site","<p>I'm trying to edit a .txt file on the (our) gitlab website but on commit the following error appears:</p>

<pre><code>Path can contain only letters, digits, '_', '-', '@', '+' and '.'.
</code></pre>

<p>I guess the error is caused by a whitespace in the file name ""Neues Textdokument.txt"", because other files without a space in the file name are editable.</p>

<p>Any ideas how to fix it (gitlab-sided) or is it a ""real"" bug?
Pls don't advise me to remove the whitespace... ;-)</p>

<p>Thanks in advance.</p>
","0","3567888","0","0"
"38576906","2167582","2016-07-25 20:30:14","0","143","<git><editor><git-commit>","Is there a way to specify an editor on a git command in a one-off style","<p>As mentioned above, I am looking for something like this:</p>

<blockquote>
  <p>$ git commit -m ""my first commit"" --editor=""vim""</p>
</blockquote>

<p>that will allow me to one-off swap editor for a single run. Examples where this might be useful is when squashing lengthy histories or writing up messages for a feature commit.</p>
","0","2167582","",""
"19380485","2873870","2013-10-15 11:49:28","1","254","<git><vim><git-commit><nano>","Getting Started with Git: Committing Changes Issue with VIM","<p>I am following along in a video on treehouse, and in the my_really_cool_projects folder we are using git commit for the first time.</p>

<p>In the video, they use git commit and it opens up in nano. On my mac, it opens in VIM. I can't figure out what to do next? I don't know the vim shortcut for Save.</p>

<p>At any rate, I'd like to be able to open git commit in nano so I can follow the tutorials.</p>

<p>In addition to this, I now have a different problem in that if I try to run git commit again, I get:</p>

<pre><code>Swap file "".git/.COMMIT_EDITMSG.swp"" already exists!
</code></pre>

<p>Can someone help me get back on track?</p>
","3","2873870","",""
"63643888","4272202","2020-08-29 05:48:08","5","1818","<git><git-merge><git-commit>","Can I merge the commits made to a fork back to the original project?","<p>Despite programming for a few years now, I'm still trying to wrap my head around some concepts when it comes to Git. To illustrate what I'm asking, let's set the stage with a hypothetical situation:</p>
<ul>
<li>I create a open-source clone of Flappy Bird for whatever reason and make the code available on GitHub under a MIT license</li>
<li>Someone finds my chicken-scratch code and decides to fork the project (note: not fork for pull request) then proceeds to make well-meaning improvements</li>
</ul>
<p>With the Git system, is it possible to merge commits from forks upstream?</p>
","3","4272202","0","0"
"63653790","9434450","2020-08-30 03:53:42","1","1198","<git><git-commit><git-log><git-fetch>","""git fetch"" doesn't update commit history in ""git log""","<p>I'm new to git workflow and was following a tutorial online about &quot;git fetch&quot;. Here are the performed steps:</p>
<ol>
<li>&quot;git pull&quot; to synchronize files and history from remote repo</li>
<li>A new commit was performed by the <strong>same user</strong> <strong>online</strong></li>
<li>&quot;git remote show origin&quot; show that local branch is &quot;out of date&quot; with remote repo</li>
<li>&quot;git fetch&quot; was performed to synchronize metadata and not local files</li>
</ol>
<p>For the tutorial  --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used to view commit history, it shows the last performed commit and who did it</p>
<p>For me --&gt;  After &quot;git fetch&quot; when &quot;git log&quot; is used, it <strong>doesn't show me the last performed commit</strong></p>
<p>I tried &quot;git pull&quot; and then both commit history and local file got updated. <strong>Am I doing something wrong here (or) &quot;git fetch&quot; isn't supposed to update the log history</strong></p>
","0","9434450","",""
"45177660","3739391","2017-07-18 21:46:59","7","4683","<git><version-control><merge><git-commit>","Why is Git merge creating multiple commits on master branch?","<p>There are two branches I am working with, <code>master</code> and <code>newFeature</code>.  While building the ""new feature"", I added multiple commits to the <code>newFeature</code> branch.  My understanding of <code>git merge</code> is that it will create a <em>single</em> commit on <code>master</code> once the branches are merged, however when merged, <code>master</code> now has the full commit history that is on <code>newFeature</code>.  For example-</p>

<pre><code>master (pre-merge):

    1=&gt;2=&gt;3

newVersion:

    1=&gt;2=&gt;3=&gt;4=&gt;5=&gt;6

master (actual results of merge):

    1=&gt;2=&gt;3=&gt;4=&gt;5=&gt;6

master (expected results of merge):

    1=&gt;2=&gt;3=&gt;6
</code></pre>

<p>Is there any way to remove the intermediary commits from <code>newVersion</code> during the merge, and why isn't merge working as expected?</p>
","2","3739391","0","0"
"63660267","8049982","2020-08-30 17:36:31","2","802","<git><github><git-commit><migrate><git-lfs>","How to modify old, pushed commit, with new commits pushed after it","<p>I am in the process of migrating a repo from gitlab to github, as our repo ran out of space there, and it doesn't seem as though we can expand it's size. So, naturally, I created the new repo on github, I added the ssh address to the existing remotes on my local instance of the repo, and I tried calling</p>
<pre><code>git push --mirror github
</code></pre>
<p>After letting this run for hours, it fails. After doing research into why this might be, I saw that it may be too large to push up at once, and I should loop through batches of commits and push them up one at a time. During this process, everything works perfectly for the first commit that adds the .gitignore and .gitattributes files.</p>
<p>However, right after this point, we go to push the files from the actual project and already we are pushing files that are too big for github but were not too big for gitlab, so they are not expressed to be tracked in LFS at that point.</p>
<p>Basically, I want to go back two years worth of commits, add in the LFS tracking to these files, insert this commit before the files are added, and then have it update the remaining tree.</p>
<p>I have tried resetting my HEAD back to that point, amending the .gitignore with the new LFS data, and pushing that up before the files are added. However, when trying this route, I now encounter errors when trying to push up the old commits, as it says that the old commits are out of date and need to pull.</p>
<p>Is what I am asking for even possible?</p>
","1","8049982","",""
"63934807","13628101","2020-09-17 09:09:09","0","48","<git><git-commit>","How to write full message while commiting with git?","<p>This is how I commit with git :</p>
<pre><code>git add -A
git commit -m 'added theme color and image error handling'
</code></pre>
<p>But it throws an error for the commit message :</p>
<pre><code>error: pathspec 'theme' did not match any file(s) known to git
error: pathspec 'color' did not match any file(s) known to git
error: pathspec 'and' did not match any file(s) known to git
error: pathspec 'image' did not match any file(s) known to git
error: pathspec 'error' did not match any file(s) known to git
error: pathspec 'handling'' did not match any file(s) known to git
</code></pre>
<p>How can I write full commit message with git ?</p>
","3","13628101","",""
"45449563","6731329","2017-08-02 00:23:33","0","75","<git><bash><grep><commit><git-commit>","First commit of the particular file is not read by the git command. My script is below","<p>1.I am trying to read all the commits of the particular file if they have added/removed keyword ""compile"".
2.It does not read the first commit which has these changes related to ""compile""
3.What can be the issue?</p>

<pre><code> if grep 'compile.*' build.gradle| awk 'BEGIN {print ""Dependencies"" }  
                                                   { print $0 }'&gt;&gt;/Users/rohan/Capstone/testoutput.csv  #startifDependencies
        then 
        found=found+1
        git log --pretty=format:""%h"" -- build.gradle | while read -r LINE
        do   #startDo2
            if git show $LINE build.gradle | egrep '^\-\s+compile.*' &gt; /dev/null
                then
                lib=$(git show $LINE build.gradle | egrep '^\-\s+compile.*' | cut -d\' -f2)
                git log -1 --pretty=format:""$lib,$f,%cn,removed,%h,%ad,$found"" $LINE build.gradle |  awk '{print $0}'&gt;&gt;/Users/rohan/Capstone/testoutput_1.csv

                elif git show $LINE build.gradle | egrep '^\+\s+compile.*' &gt; /dev/null
                then
                lib=$(git show $LINE build.gradle | egrep '^\+\s+compile.*' | cut -d\' -f2)
                git log -1 --pretty=format:""$lib,$f,%cn,added,%h,%ad,$found"" $LINE build.gradle | awk '{print $0 }'&gt;&gt;/Users/rohan/Capstone/testoutput_1.csv
            fi
        done  #endDo2
        else echo ""Dependencies not found""&gt;&gt;/Users/rohan/Capstone/testoutput_1.txt
        fi   #endifDependencies
        elif cd $w/$f/
</code></pre>
","6","6731329","0","0"
"57626478","11967227","2019-08-23 12:36:32","3","14166","<git><github><gitlab><git-commit><git-revert>","How to delete commits from gitlab? (Git-revert not working)","<p>I am trying to delete some gitlab commits that were made in error.</p>
<p>the answers provided in other threads were</p>
<ol>
<li>click on commit name</li>
<li>click &quot;options&quot;</li>
<li>click &quot;revert&quot;</li>
</ol>
<p>When I attempted to delete the commits, they were not deleted. Instead, two extra merges were created on top. I'm sure this is normal, but I don't understand why it has done that, and more importantly, it hasn't deleted the commits.</p>
<p>How can I delete the commits completely so that the last available commit is the one with the superman logo? thanks</p>
","6","11967227","0","0"
"63943197","1250463","2020-09-17 17:21:25","0","609","<git><git-commit>","Signoff previous in between commits in git","<p>I have a branch where there are multiple commits as below</p>
<pre><code>Commit 1 - Not signed
Commit 2 - Signed off X
Commit 3 - Not signed
Commit 4 - Not signed
Commit 5 - Signed off by Y
</code></pre>
<p>i would like to signoff the commits 1, 3, 4 . Those are the ones i created and missed to sign off</p>
<p>When i try to do using</p>
<pre><code>git rebase HEAD~3 --signoff
</code></pre>
<p>Its signing the commit number 2 which was already signed off by X.</p>
<p>Is there any way we can specifically sign off specific commits.</p>
","0","1250463","",""
"38734255","5966599","2016-08-03 04:10:05","8","20970","<git><github><ssh><commit><git-commit>","Github repo not showing latest commits","<p>For some reason my Github repo is not showing the latest couple of commits. I did <strong>git add, git commit, and git push</strong> like I always do. But tonight it seemed to not have registered on the repo's commit history. </p>

<p>When I do a git log, I can see my latest commits. When I do a git pull into a new folder to test it, my changes are there. When I manually take the commit url and put it in my browser, I can see the changes. <em>It is just not showing up on the commit history and the overall number of commits on the project is not updating</em>. Why is this?</p>
","9","5966599","0","0"
"63960025","124486","2020-09-18 17:07:30","1","166","<git><git-commit><git-rebase>","How can I rebase with only commits that affect certain files?","<p>Let's say I have 100 commits in a repository, and I want to rebase only the commits that affect three files: <code>foo</code>, <code>bar</code>, <code>baz</code>. How can I do this?</p>
<p>Obviously theoretically those commits could affect other files, in my case I doubt that's the case, but I'm ok if they do.</p>
","1","124486","",""
"8795097","286973","2012-01-09 20:56:27","264","425715","<git><git-commit>","How to 'git commit' a single file/directory","<p>I tried the following command:</p>
<pre><code>git commit path/to/my/file.ext -m 'my notes'
</code></pre>
<p>And received an error in Git version 1.5.2.1:</p>
<pre><code>error: pathspec '-m' did not match any file(s) known to git.
error: pathspec 'MY MESSAGE' did not match any file(s) known to git.
</code></pre>
<p>Is that incorrect syntax for a single file or directory commits?</p>
","3","286973","0","0"
"63966792","12023101","2020-09-19 08:29:31","0","170","<git><git-commit><git-pull>","How to pull my second last or n'th last push","<p>When I run <code>git log</code>, I see:</p>
<pre><code>commit d0fa4410393w92ce6ede2ea26fa2fb74z2e5f1bz (HEAD -&gt; notificationControls, origin/notificationControls)
Author: stufezic-dev &lt;ninjahero@gmail.com&gt;
Date:   Sat Sep 19 12:32:45 2020 +0545

    lockscreen controls working, notification updates yet to fix

commit 2e11d85350a741d6992875e949a0a77abbeb8fde (mainadjust, commitBranch)
Author: stufezic-dev &lt;ninjahero@gmail.com&gt;
Date:   Tue Sep 15 23:30:27 2020 +0545

    notification and lockscreen controls using mediaSession: initiated  
  
commit 2e11d85350a741d6992875e949a0a77abbeb8fde (mainadjust, commitBranch)
Author: stufezic-dev &lt;ninjahero@gmail.com&gt;
Date:   Tue Sep 14 23:30:27 2020 +0545

    notification and lockscreen controls using mediaSession: initiated  
  
...
</code></pre>
<p>How do I pull the second last or the third last commit, instead of the latest commit? I had only known of 1 command: <code>git pull master origin</code>, and I'm thinking of how to I pull any commit instead of the latest commit.</p>
","2","12023101","",""
"45481257","8070439","2017-08-03 10:13:29","1","46","<git><merge><git-commit>","understanding commit and merge","<p>I am a little bit confused as to how a branch needs to be merged once work is completed.</p>

<p>So I have created a repo which has the following: I've based each branch according to issue/feature.</p>

<pre><code>Master
Development

branch-1 - jira issue 1
branch-2 - jira issue 2
branch-3 - jira issue 3
branch-4 - jira issue 4
</code></pre>

<p>Issue 1 was created off of Development branch. Once I've completed work in the first branch I then created branch 2 while still being on branch-1 like so.</p>

<pre><code>git checkout -b branch-2
</code></pre>

<p>I started working on branch-2 and then completed the work needed to be done on that issue.</p>

<p>But I am sitting with a problem where branch-1 has eg. 8 commits and branch-2 has 15 commits. I'm guessing there will be merge conflicts here. So if I were to merge these branches once they've been reviewed. How do I proceed? Help will be great. Thanks in advance.</p>
","4","8070439","",""
"57737197","5314873","2019-08-31 10:27:43","1","65","<git><split><git-commit>","How to split a single file with 10 commits into 10 files with single commit?","<p>I have a file with multiple commits, I want to split this file into multiple files with single commit each.</p>

<p><strong>For example</strong> :<br>
<code>A.cpp</code> has git history of :<br>
<code>commit message 1</code>. Egg dropping problem<br>
<code>commit message 2</code>. Invert a binary tree</p>

<p>I want to have two files named as <br> <br>
1. <code>Egg dropping Problem.cpp</code> <strong>which contains data of <code>commit 1</code> only.</strong><br>
2. <code>Invert a binary tree.cpp</code> <strong>which contains data of <code>commit 2</code> only.</strong></p>
","2","5314873","0","0"
"63975540","15710459","2020-09-20 04:35:03","0","380","<git><github><git-commit><git-rebase><git-reset>","How to change the commit history in GitHub?","<p>I have tried <code>git rebase</code> in interactive mode to squash commits. I have also tried <code>git reset</code> in soft mode, then made a single commit.</p>
<p>It seems to have changed my <code>git log</code>. But when I need to push to GitHub, It says could not push, I need to pull first due to divergent branches.</p>
<p>After pulling and then pushing, when I go to GitHub, I find that the <strong>number of commits has only increased</strong>.</p>
<p>How can I change the history on the commits page of a GitHub repo?</p>
","2","15710459","",""
"19697860","2453816","2013-10-31 03:16:40","6","4327","<git><commit><redmine><git-commit>","How to link to a Git commit in Redmine after pushing","<p>We have Redmine set up to automatically link commits with related issues if the developer properly tags if (such as <code>#Refs</code> or <code>#Fixes</code>).  However, we have had some commits that were pushed to the remote repo without those tags, and we now wish to connect them.  How can we do this?</p>
","0","2453816","0","0"
"19744911","1576040","2013-11-02 17:50:50","-2","1408","<git><github><git-merge><git-commit><git-revert>","github - commit not having my changes not merged","<p>I have committed my changes and pushed them to the remote git repository. But when I have pulled others changes to my master branch, It merged my repo and I didn't have my old chnages. There is something wrong with the pull request I have merged. Now I want to go to my stable commit which was made by me. Accordign to this git log, I want to go back to the ""Final Integration"" commit.</p>

<p>Here is the git log : </p>

<p>commit dc1276f241db392eb7785a655d6493c7cbdf712e
Merge: 0dd1453 e3281ec
Author: mehulkaklotar 
Date:   Fri Nov 1 04:01:27 2013 +0530</p>

<pre><code>Vivek - Ranu Changes
</code></pre>

<p>commit 0dd14530bbbde1b4c7f00f4add96c2957ac9e373
Author: mehulkaklotar 
Date:   Fri Nov 1 03:53:40 2013 +0530</p>

<pre><code>vendor menu - client place order (partial)- mehul
</code></pre>

<p>commit 5a3d6e8f3b2f257c46d43352f190c14dcd98b5fc
Author: mehulkaklotar 
Date:   Fri Nov 1 02:42:01 2013 +0530</p>

<pre><code>Final Integration
</code></pre>

<p>commit e3281ece42ef5d049dc3f0958c7e611956183b84
Author: vshukla8991 
Date:   Thu Oct 31 08:23:42 2013 +0530</p>

<pre><code>Commit: Changes by Vivek and Ranu
</code></pre>

<p>commit df8d19a478b11c6631e1b4dd8b5acef00dff7499
Author: vshukla8991 
Date:   Wed Oct 30 15:53:43 2013 +0530</p>

<pre><code>Commit: Changes by Vivek
</code></pre>
","5","1576040","",""
"26930924","1680479","2014-11-14 13:18:46","28","25465","<git><bash><vim><commit><git-commit>","Git-commit unable to open vim","<p>Recently I installed <code>bash-it</code> into my terminal. Now, when I try to execute <code>git commit</code> the terminal shows me this error: </p>

<p><code>/usr/bin/mate -w: /usr/bin/mate: No such file or directory
error: cannot run /usr/bin/mate -w: No such file or directory
error: There was a problem with the editor '/usr/bin/mate -w'.
Please supply the message using either -m or -F option.</code></p>

<p>Before <code>bash-it</code>, the commit command correctly opened vim.
Of course I've tried to change the <code>core.editor</code> in git to ""vim"" but it does not work anyway.</p>

<p>Could you please help me to solve this? I really like vim, it was super easy and fast...I don't want to use TextMate to edit the commit message.</p>

<p>PS: I'm using Mac OSX</p>
","2","1680479","0","0"
"45789692","4415445","2017-08-21 05:13:53","-1","687","<github><git-commit><git-push>","GitHub not showing my profile","<p>Github show my user name but it is disable. but when I commit  other project there show my name. I don't know what is the issue here</p>

<p><a href=""https://i.stack.imgur.com/pGJsT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pGJsT.png"" alt=""enter image description here""></a></p>

<p>and project not showing my account is contributor</p>

<p>contributor should be showing 3 but it still showing 2 not showing me </p>

<p>what should I do ?</p>
","0","4415445","0","0"
"64282681","3978780","2020-10-09 15:08:05","1","51","<git><github><git-commit>","GitHub - Get the author (not the committer) of an old commit","<p>I am trying to get the author on GitHub (and not only the committer) of an old commit +90 days.
To say differently, an old commit was committed when naming my account differently (committer = ABC for example). Now I must proof that my email is the one used to do that old commit.</p>
<p>Is there anyway to do so? when using the api github events, I am not able to go further than 90 days.</p>
","5","3978780","",""
"45794073","4415445","2017-08-21 09:49:22","-1","215","<git><github><git-commit>","How to replace N-number of Commit","<p>How can I combine the last 9 commits in my GitHub repository into one commit?</p>
","0","4415445","",""
"39071360","4015856","2016-08-22 04:19:58","35","13890","<git><git-commit><git-stash>","What's a `WIP` on a stash commit?","<p>What's a <code>WIP</code> means on a stash commit?</p>

<pre><code>$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert ""added file_size""
stash@{2}: WIP on master: 21d80a5 added number to log
</code></pre>

<p>I'm just curious.</p>
","1","4015856","0","0"
"39079232","6134108","2016-08-22 12:12:11","0","202","<git><git-branch><git-commit>","how can create a new branch from already existing commits?","<p>I have branch which contains three commits. Now I want to create three new branches of these three commits, each commit should be separate branch, how can I achieve this?</p>
","2","6134108","0","0"
"872565","108009","2009-05-16 14:49:17","502","216545","<git><github><git-commit><git-filter-branch><git-rewrite-history>","Remove sensitive files and their commits from Git history","<p>I would like to put a Git project on GitHub but it contains certain files with sensitive data (usernames and passwords, like /config/deploy.rb for capistrano).</p>

<p>I know I can add these filenames to <strong>.gitignore</strong>, but this would not remove their history within Git.</p>

<p>I also don't want to start over again by deleting the /.git directory.</p>

<p>Is there a way to remove <strong>all</strong> traces of a particular file in your Git history?</p>
","2","108009","0","0"
"39122126","4928228","2016-08-24 11:29:50","6","2275","<java><git><intellij-idea><version-control><git-commit>","Disable automatic code rearrangement in Intellij IDEA","<p>After I updated IntelliJ IDEA, it started to rearrange code before each git commit. I found rearrange rules in <strong>Settings > Editor > Code Style > Java</strong> but there is no checkbox for enable/disable feature.<br>
How can I disable it?</p>
","0","4928228","0","0"
"64303220","3634589","2020-10-11 10:55:35","3","1899","<git><github><git-commit><git-push>","My commits appear as another user in GitHub?","<p>I am trying to set up git on my laptop so I can push commits to GitHub. This now works, but if I do so and then visit GitHub, it appears as if some random user (always cbeaudoin898 - I have no idea who this is) made all the commits. It is super weird, I have no idea what is causing this.
When I push the commit, I log in with my own username &amp; password. I also have this set in my git config. Here is an example repo: <a href=""https://github.com/kmb5/etch-a-sketch"" rel=""noreferrer"">https://github.com/kmb5/etch-a-sketch</a></p>
<p>My git config:
<a href=""https://i.stack.imgur.com/6pnrJ.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6pnrJ.png"" alt=""git config"" /></a>
Screenshot of how a commit appears on GitHub:
<a href=""https://i.stack.imgur.com/tO0ba.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/tO0ba.png"" alt=""github screenshot"" /></a></p>
<p>Here is the commit log:
<a href=""https://i.stack.imgur.com/MNJdl.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/MNJdl.png"" alt=""commit log"" /></a></p>
<p>Does anyone have any idea why this is happening? I am getting crazy, setting up GitHub was a pain as is, because I tried to set it up for 2 different GitHub accounts (work and private) - which was a hassle on its own.</p>
","6","3634589","0","0"
"64311092","11633894","2020-10-12 02:51:34","12","6917","<git><github><git-commit><git-amend>","How do I add a co-author to latest pushed git commit?","<p>I need to add a co-author to my last commit and I tried using <code>git commit --amend --author=&quot;name &lt;name@email.com&gt;&quot;</code> but change <code>--author</code> to <code>--co-authored-by</code>. I thought this would be an easily google-able fix but everything is only for authors and not co-authors.</p>
","2","11633894","",""
"1006775","91365","2009-06-17 12:43:36","164","65983","<git><git-commit>","How to reference the initial commit?","<p>I've got a script that needs to reference the initial commit in a repository.   git has the special reference <code>HEAD</code>, but doesn't have the corresponding <code>TAIL</code>.  I cannot find anything in <code>git help rev-parse</code> that would seem to help me.</p>

<p>Here's what I'd like to do:</p>

<pre><code>git show TAIL
</code></pre>

<p>Here's one option I have:</p>

<pre><code>git show `git log --reverse | if read a commit ; then echo $commit ; fi`
</code></pre>

<p>That's pretty hacky and depends on the output of git log not changing.</p>

<p>Right now I just tag the initial commit and use that as my refspec.  However, I'd like to release a general tool, so that's not a great option.</p>
","0","91365","0","0"
"58058562","2082964","2019-09-23 08:36:35","0","89","<git><git-commit><git-rewrite-history>","git mimic old commit from other repository","<h1>Why</h1>

<p>At our company we started using some open source code and started patching it. I now want to make these changes public, so I want to apply these changes with the correct authors and author dates (I don't want to take credit for the work I didn't do).</p>

<h2>Question</h2>

<ul>
<li>in <code>company-repo</code>, I  have commit <code>123456789</code> which I want to mimic</li>
<li>in <code>new-repo</code>, I prepared a commit (using <code>git add -p</code>).</li>
</ul>

<p>Now I want to create a commit which mimics commit <code>123456789</code> from <code>company-repo</code>, but create this commit inside <code>new-repo</code>.</p>

<h2>ideas</h2>

<ul>
<li><code>git commit -C</code> can take the git commit message from another commit, but this fails (<code>could not lookup commit</code>)</li>
<li>since this is across two different repositories maybe creating a patch? But since filenames have changed that will be complicated</li>
<li>just parsing the information needed and reusing? What should be copied? Timestamps, commit message, others?</li>
</ul>
","0","2082964","",""
"64322459","14437348","2020-10-12 17:19:48","1","297","<git><git-commit><git-push><git-pull>","How do I push a commit without destroying teammate work?","<p>I'm new to Git and the problem I had today at my uni project is the following:</p>
<ul>
<li>I did some changes to certain files, commited and pushed to our GitHub repo.</li>
<li>I told my teammate that I did the commit and he complained that now he can't commit his changes.</li>
</ul>
<p>I didn't realize that he was coding at the same time as me -- he says that if he pulls my commit then his changes to the same files would be lost.</p>
<p>What do we do now, do I just tell him to copy those files to another place in his drive and then &quot;combine&quot; the changes? How do we avoid this situation in the future?</p>
<p>Sorry for the poor wording and stuff, as I said I'm a beginner and very clueless about this topic.</p>
","5","14437348","",""
"9237161","559672","2012-02-11 01:56:18","1","3676","<git><ssh><github><git-commit><git-add>","Simple Github commit not working (trying to add an image to my public image folder)","<p>So i'm trying to do something i know is simple but its causing me some headaches.  I am just trying to get an image from my app (im using MacFusion to ssh to our app vs having it on my machine locally).  I basically dragged an image into the public/images folder along w/ some other html/css changes &amp; then committed everything using git commit -a -m ""comment about my commit here""...</p>

<p>I then pushed to github</p>

<p>So i thought that wouldve automatically added the image to the public/images folder in github (&amp; on our server), but it didn't.  all the other html &amp; style changes went through but the image didn't show up in the public/images folder when i look in github.  </p>

<p>I""m sure this is something dumb i'm overlooking but could really use a quick reason this is happening &amp; instruction on how to get that one image file to the public/images folder in github.</p>

<p>thanks so much</p>
","0","559672","",""
"1085162","76509","2009-07-06 02:25:02","3495","598680","<git><git-commit>","Commit only part of a file's changes in Git","<p>When I make changes to a file in Git, how can I commit only some of the changes?</p>

<p>For example, how could I commit only 15 lines out of 30 lines that have been changed in a file?</p>
","2","76509","0","0"
"45837806","7236291","2017-08-23 10:58:25","2","6025","<git><gitlab><commit><git-commit><gitlab-api>","Updating and committing file by using gitlab api","<p>I want to update file content and commit it. To be able to achieve it, I looked the api of gitlab from the url;
<a href=""http://mygitlabadress/help/api/README.md"" rel=""nofollow noreferrer"">http://mygitlabadress/help/api/README.md</a></p>

<p>It says Updating existing file is done as;
<a href=""http://mygitlabadress/help/api/repository_files.md#update-existing-file-in-repository"" rel=""nofollow noreferrer"">http://mygitlabadress/help/api/repository_files.md#update-existing-file-in-repository</a> </p>

<p>I follow the instructions and write;
<a href=""http://mygitlabadress/api/v4/projects/:id/repository/files/file1%2Ffile2%2Ftest?ref=master&amp;author_name=name%20surname&amp;content=some%20other%20content&amp;commit_message=update%20file&amp;private_token=:PRIVATE_TOKEN"" rel=""nofollow noreferrer"">http://mygitlabadress/api/v4/projects/:id/repository/files/file1%2Ffile2%2Ftest?ref=master&amp;author_name=name%20surname&amp;content=some%20other%20content&amp;commit_message=update%20file&amp;private_token=:PRIVATE_TOKEN</a></p>

<p>This returns as;
{""file_name"":""test"",""file_path"":""file1/file2/test"",""size"":5,""encoding"":""base64"",""content"":""ZmRhcwo="",""ref"":""master"",""blob_id"":""e1afa79f4..."",""commit_id"":""5d61796..."",""last_commit_id"":""5d617962a23c07345e68...""}</p>

<p>But when I check commits on master branch. The commit is not done. I don't understand why this is happening. The above request doesn't return an error. On the contrary, it returns as commit is done.</p>

<p>What am I missing? How can I update the file and commit it??</p>
","0","7236291","",""
"20083156","403849","2013-11-19 22:12:20","6","775","<git><diff><whitespace><git-commit><gitweb>","How can I make gitweb ignore whitespace changes?","<p>Is there a url parameter I can pass into gitweb (or anything else I can do) to tell it not to show me whitespace changes?</p>

<p>Backstory:
I have a file-generating process that creates hundreds of files that it then programatically checks into git.  Recently I made some minor changes to this process, which resulted in a bunch of whitespace being removed from every file that it generates, and some non-whitespace changes being made to just a few files that it generates.  I am trying to use gitweb to verify that my non-whitespace changes are in these files, but it's really hard to do because of all the whitespace changes I have to sift through before I see any of the real changes.  I know if I were doing a git diff from the command line I could just pass it the -w parameter, but I am really just trying to use gitweb for this.</p>
","0","403849","",""
"58111106","4244452","2019-09-26 06:55:11","0","285","<git><bitbucket><git-commit><pull-request>","Create a pull request from specific commit until now","<p>I have used git for a while to push and pull commits and branches, but I'm new to pull requests. 
I need to create a pull request from our development branch. This pull request needs to contain all commits from a certain point in time up until now. This pull request is for code reviewing purposes. I don't know how to go about this. 
Any suggestions?
Thanks in advance.</p>
","1","4244452","",""
"9243596","174634","2012-02-11 20:02:35","4","6534","<git><github><git-push><git-commit>","How to delete something that was accidentally pushed","<p>I wanted to do source control on my website. There were a lot of files so I just went git add -a</p>

<p>Unfortunately, I accidentally committed and pushed a file called credentials.txt that had my ftp and db details. I've tried deleting the file, committing then pushing but it still shows the file when I browse my repo on github in the history.</p>

<p>Is there anyway to get rid of this?</p>
","0","174634","",""
"45847724","4816322","2017-08-23 19:14:01","7","765","<git><git-rebase><git-commit>","How does git-rebase recognize ""aliased"" commits?","<p>I'm trying to better understand the magic behind git-rebase. I was very pleasantly surprised today by the following behavior, which I didn't expect. </p>

<p>TLDR: I rebased a shared branch, causing all commit sha1s to change. Despite this, a derived branch was able to accurately identify that its original commits were ""aliased"" into new commits with different sha1s. The rebase didn't create any mess at all.</p>

<h1>Details</h1>

<p>Take a master branch: <code>M1</code></p>

<p>Branch it off into branch-X, with some additional commits added: <code>M1-A1-B1-C1</code>.
Note down the git-log output.</p>

<p>Branch off branch-X into branch-Y, with one additional commit added: <code>M1-A1-B1-C1-D1</code>. Note down the git-log output.</p>

<p>Add a new commit to the tip of the master branch: <code>M1-M2</code></p>

<p>Rebase branch-X onto the updated master: <code>M1-M2-A2-B2-C2</code>. Note that A2-B2-C2, all have the same message, contents and author-date as A1-B1-C1. However, they have completely different sha1 values, as well as commit dates. According to <a href=""https://gist.github.com/masak/2415865"" rel=""noreferrer"">this writeup</a>, the reason the SHA1 is different is because the commit's parent has changed.</p>

<p>Rebase branch-Y onto the updated branch-X. Result: <code>M1-M2-A2-B2-C2-D2</code>. </p>

<p>Notably only the D1 commit is applied (and becomes D2). The A1-B1-C1 commits in branch-Y are completely ignored by git-rebase. You can see this in the output logs. </p>

<p>This is wonderful, but how does git-rebase know to ignore A1-B1-C1? How does git-rebase know that A2-B2-C2 are the same as A1-B1-C1, and hence, can be safely ignored? I had always assumed that git keeps track of commits using the sha1 identifier, but despite the above commits having different sha1s, git still somehow knows that they are linked together. How does it do that? Given the above behavior, when is it truly dangerous to <a href=""https://medium.freecodecamp.org/git-rebase-and-the-golden-rule-explained-70715eccc372"" rel=""noreferrer"">rebase a shared branch</a>?</p>
","0","4816322","",""
"39249724","6028746","2016-08-31 12:30:17","3","5548","<git><git-commit><git-rewrite-history>","How to Undo git commit --amend","<p>I've accidently did <code>git commit --amend</code> on the last commit on the tree (which is not written by me ) and I would like to undo this <code>commit</code> and <strong>retrieve</strong> my changes back to the working directory.<p>
I'm familiar with the fact the <code>--commit amend</code> is part of ""Rewriting History"" Git commands but I hope there is a workaround via author name or any other.</p>
","0","6028746","0","0"
"45850890","7619353","2017-08-23 23:52:35","0","753","<git><github><gitlab><hook><git-commit>","Can you get the next commit id before items are commited?","<p>I'm currently adding a commit-msg hook that will add the git commit URL as a comment to Jira.
The commit URL has the format</p>

<p><code>http://[server]/[group]/[project]/commit/[commit_id]</code></p>

<p>Is it possible to obtain the commit id or is it only produced after the item has been committed? Does this mean I need to implement this in a later hook?</p>
","2","7619353","",""
"39303709","8741","2016-09-03 05:54:09","1","40","<git><powershell><dvcs><git-commit><git-add>","Why won't Git include this file?","<p>I am trying the following commit (in Posh-Git on PowerShell):</p>

<pre><code>C:\Dev\Android\Projects\HeavyWeights [master ≡ +0 ~1 -0 !]&gt; git commit -a
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
        modified:   DotNetHeavyWeights (modified content)
</code></pre>

<p>The file isn't untracked, but I did try this anyway, with the exact same results for the commit attempt:</p>

<pre><code>C:\Dev\Android\Projects\HeavyWeights [master ≡ +0 ~1 -0 !]&gt; git add DotNetHeavyWeights
</code></pre>

<p>I added the <code>DotNetHeavyWeights</code> folder to the root <code>HeavyWeights</code> root folder last night, and the commit went fine.<br>
Why won't Git include this folder in the commit?</p>
","0","8741","0","0"
"34564658","813976","2016-01-02 10:02:08","9","1857","<git><git-commit><git-dangling>","git: Are these dangling commits?","<p>Given at the end is an extracted screenshot from a SourceTree branch tree view (there is a gap in the middle of the screenshot)</p>

<p>In that, <code>#1</code> points to the line which used to be branch <code>1.7.6.14.X</code> and <code>#2</code> points to the current status of the same branch.</p>

<p>The commit referred to by <code>#3</code> and the preceding 8 commits on that line were previously attached to branch <code>1.7.6.14.X</code>. Then another developer supposedly checked out the same branch and did the fix pointed to by <code>#4</code>. This <code>#4</code> commit has removed the former 9 commits from branch <code>1.7.6.14.X</code> and left them dangling. <br>As a result, the branch <code>1.7.6.14.X</code> now starts from the original branching point instead of just extending from commit <code>#3</code>.</p>

<p>Running <code>git fsck</code> with <code>--unreachable</code>, <code>--dangling</code> etc doesn't give any errors. I tried <code>--lost-found</code> as well.</p>

<p>However, <code>git fsck &lt;hash of commit #3&gt;</code> produces five dangling commits and a whole bunch of dangling tags:</p>

<pre><code>Checking object directories: 100% (256/256), done.
Checking objects: 100% (3148/3148), done.
dangling commit ec213...
dangling commit ab82a...
dangling commit 7d262...
dangling commit a6f06...
dangling commit 6674a...
</code></pre>

<p>I have two questions:</p>

<ol>
<li><p>What could have caused this situation (i.e. branch <code>#1</code> getting detached)?</p></li>
<li><p>How can I detect whether there are similar issues in other repositories? (<strong>without</strong> having to know the hashes of detached commits such as <code>#3</code>)</p></li>
</ol>

<p><a href=""https://i.stack.imgur.com/wzs1G.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wzs1G.png"" alt=""Commits detached from branch""></a></p>

<p><strong>Update</strong>:</p>

<p>We found the answer to question (1). The situation was caused by a force push, to the central bare repo, by a developer who had an older snapshot of the branch.</p>
","0","813976","0","0"
"30132296","4880373","2015-05-08 20:24:10","6","1942","<git><github><merge><git-commit><atlassian-sourcetree>","Git Changes to file lost after merge with remote (SourceTree, GitHub)","<p>I've had multiple occasions reported from multiple teams just recently that certain changes are being lost after merging with our origin repo on GitHub.com.  The team members are all using SourceTree as their git client.</p>

<p>The common thread that I've found is that it appears that the repo thinks that the file appears to have X number of commits on the branch before the merge and then X-Y commits after the merge.  From looking at the branch's commit log, the commits are still there, but for some reason they are not applied to the file in question.  In Source tree this is the same, but if you ""Follow renamed files"" it brings in all of the commits.  There was absolutely no change in the file name or the folder structure.</p>

<p>What could be going on here?</p>

<p><a href=""https://www.dropbox.com/s/zrcb9tw2ptpb3b0/FileHistory_Commit.png?dl=0"" rel=""noreferrer"">https://www.dropbox.com/s/zrcb9tw2ptpb3b0/FileHistory_Commit.png?dl=0</a>
<a href=""https://www.dropbox.com/s/uc5v5d2bfztoicn/FileHistory_Develop.png?dl=0"" rel=""noreferrer"">https://www.dropbox.com/s/uc5v5d2bfztoicn/FileHistory_Develop.png?dl=0</a></p>
","6","4880373","0","0"
"13970596","1873382","2012-12-20 10:55:51","5","23037","<eclipse><git><branch><git-commit><git-checkout>","How to switch branches in eclipse without commiting changes","<p>I've been using GIT for a couple of weeks now and trying to understand how to switch branches without commiting files. This is what I have done.</p>

<ol>
<li>Cloned a git repository and have a local master branch.</li>
<li>Created a new local branch (Branch2) which is based on a remote branch.</li>
<li>Made changes to 2 files in the master branch.</li>
</ol>

<p>What I want to do now is switch from master to Branch2.
The changes I made to the master branch are for local dev purposes only and should never be committed.
But when I try to do this in eclipse (i.e I double click on the local branch I try to switch to) it keeps telling me that there are uncommitted changes and I need to commit, stash or reset.</p>

<p>Can anyone tell me how i can make a change to a local file and have git ignore this change so that I don't  get prompted with this message?</p>
","2","1873382","0","0"
"50333774","6147658","2018-05-14 15:16:54","0","88","<git><rollback><git-commit><snapshot><git-checkout>","How can I git rollback/redo working dictionary files within one branch like a snapshot?","<p>I only has one git branch (master), also it is a private repository (only used by myself). How can I easily rollback/redo my working dictionary files like snapshot management?</p>

<p>For example:</p>

<ol>
<li>I commit 1st time, with only 1.txt in the dictionary</li>
<li>I commit 2nd time, to add 2.txt in the dictionary</li>
<li>I commit 3rd time, to add 3.txt in the dictionary</li>
</ol>

<p>Now the question is:</p>

<ol>
<li>what command I should issue for git to recover my working dictionary only include 1.txt file?</li>
<li>After above step 1, what git command I should  issue again to restore my working dictionary, let it has 3 files (1.txt, 2.txt, 3.txt) again? </li>
</ol>

<p>Basically I want to treat it as snapshot management for working dictionary to easily switch between different commit. Is it doable with git?</p>
","0","6147658","",""
"68888746","13280689","2021-08-23 07:26:14","1","1861","<git><github><repository><commit><git-commit>","getting an error message in Github ""Sorry, a file exists where you’re trying to create a subdirectory. Choose a new path and try again""","<p>Why is this statement &quot;Sorry, a file exists where you’re trying to create a subdirectory. Choose a new path and try again&quot; arising when I try to make commits in my repo, does anyone facing the same problem? How can I resolve this error?</p>
","1","13280689","",""
"69601622","13534986","2021-10-17 05:42:14","0","264","<git><github><git-commit><pre-commit-hook>","Is there a way to only skip the commit-msg hook","<p>I've put a check for the commit message in the commit-msg hook which I want to skip at times. I know there is a <code>git commit --no-verify</code> for the task, but that also skips the pre-commit hook. Is there a way to only skip the commit-msg hook and not the pre-commit?</p>
","0","13534986","",""
"34605817","1444743","2016-01-05 06:55:58","15","4413","<node.js><git><npm><git-commit>","Customize Commit message while using npm version patch","<p>Is it possible to customize the commit message while using <code>npm version patch</code>?</p>

<p>I' d like to change it to <code>:up-arrow: @VERSIONNUMBER</code></p>
","0","1444743","0","0"
"66825379","14915611","2021-03-26 23:07:56","1","1350","<github><ssh><repository><git-commit><git-push>","Git push creates my project folder inside another folder, how to avoid it?","<p>I have been creating some repositories of my projects since the terminal and everything was good, but recently I tried to push a project to GitHub and but another folders are created.</p>
<p>For example, the path of my project folder is <code>/Desktop/Programming_course/React_Native/robotreact</code>.</p>
<p>So, since the terminal I go to the path of my Project <code>robotreact</code> and I run:</p>
<pre class=""lang-sh prettyprint-override""><code>git add .
git commit -m &quot;first commit&quot;
</code></pre>
<p>Then, in GitHub, I create my repository and after that I run:</p>
<pre><code>git remote add origin https://github.com/Josesosa0777/robotreact.git
</code></pre>
<p>when I push it running: <code>git push -u origin main</code></p>
<p>In my GitHub are created other folders:</p>
<p><a href=""https://i.stack.imgur.com/ZOBmA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZOBmA.png"" alt=""Folders"" /></a></p>
<p>How can I avoid those extra folders?</p>
<p>It seems like if another project is added, I am not sure if the problem is about a SSH key, I dont know how to solve it, any idea?</p>
","0","14915611","0","0"
"30945532","4434808","2015-06-19 19:05:03","4","1324","<git><github><commit><gitignore><git-commit>","Can git filter out certain lines before commit?","<p>I have a repo on github that I am working out of and I often have comments on my <code>.py</code> files that starts with the ""<code># TODO:</code>"" to keep a personal note of things to be done.</p>

<pre><code># TODO: do this &lt;code&gt;
</code></pre>

<p>I obviously do not want that to go in a commit.</p>

<p>I want GitHub to search all the files when I am about to commit them and not include lines that start with <code># TODO:</code></p>

<p>Does Git already do this? I know certain version control like perforce already have this feature. </p>

<p>Any thoughts?</p>
","1","4434808","0","0"
"34625980","","2016-01-06 05:04:59","5","2090","<git><git-commit><git-diff><git-diff-tree>","Print percentage of dissimilarity","<p>Sometimes when you drastically change a file, it triggers a rewrite:</p>

<pre><code>yes | head -256 &gt; pa.txt
git add .
git commit -m qu
truncate -s128 pa.txt
yes n | head -64 &gt;&gt; pa.txt
git commit -am ro
</code></pre>

<p>Result:</p>

<pre><code>[master 79b5658] ro
 1 file changed, 128 insertions(+), 256 deletions(-)
 rewrite pa.txt (75%)
</code></pre>

<p>However this does not happen with smaller changes:</p>

<pre><code>yes | head -128 &gt; pa.txt
git add .
git commit -m qu
truncate -s64 pa.txt
yes n | head -32 &gt;&gt; pa.txt
git commit -am ro
</code></pre>

<p>Result:</p>

<pre><code>[master 88ef937] ro
 1 file changed, 32 insertions(+), 96 deletions(-)
</code></pre>

<p>Can I run a command that will show the percent change regardless of the amount?
I looked into <a href=""http://git-scm.com/docs/git-diff#_raw_output_format"" rel=""nofollow"">git&nbsp;diff-tree</a>, but again it seems to only show when the
change is drastic.</p>
","4","","0","0"
"32202329","3236667","2015-08-25 11:03:29","0","1637","<git-commit>","Git commit issues with multiple files having same name","<p>I am working on a project that contains multiples files with same file name. I am using git to maintain local versions of my changes. After staging the modified files, I notice that files with same name are appearing with status ""R"" implying replacing one file with another of same name but in different directory tree. How to make sure both are committed without being replaced by one another. I could not find relevant help material regarding this in any of git documentation. 
Since this is a proprietary code, I am pasting only sample directory structure:</p>

<pre><code>M  &lt;Proj_Root_Folder&gt;/&lt;dirA&gt;/&lt;dirAA&gt;/file1.h
M  &lt;Proj_Root_Folder&gt;/&lt;dirA&gt;/&lt;dirAA&gt;/file2.h
M  &lt;Proj_Root_Folder&gt;/&lt;dirA&gt;/&lt;dirAA&gt;/file3.h
R  &lt;Proj_Root_Folder&gt;/&lt;dirB&gt;/&lt;dirBA&gt;/file4.h -&gt; &lt;Proj_Root_Folder&gt;/&lt;dirA&gt;/&lt;dirAA&gt;/file4.h
</code></pre>
","1","3236667","",""
"32206635","4170264","2015-08-25 14:22:33","0","31","<git><githooks><git-commit><pre-commit-hook>","How a git repo local directory can be extracted when a hook is executed?","<p>Basically as it says that is. Imagine the following hook code:</p>

<pre><code>@echo on
echo.
echo.
echo.
echo %CD%         :: Try to print the current dir
echo %GIT_DIR%    :: Try to print the Git dir
echo.
echo.
ping 127.0.0.1 -t :: Loop on localhost, because timeout will break the hook
</code></pre>

<p>As it runs it does not print anything, I've put @echo on just for that..</p>

<p>Any Ideas. Tanks !</p>
","0","4170264","0","0"
"34650270","3019105","2016-01-07 08:18:43","4","137","<git><git-commit><git-log>","How can I list all modified files by an author between a commit range but only with the last thing that happened to the file in Git?","<p>The command:</p>

<pre><code> git log --oneline --name-status 
         --author=$AUTHOR $COMMIT_RANGE | grep -vE '[a-fA-F0-9]{5} ' 
         | sort | uniq | cat -n
</code></pre>

<p>Returns a list of the files modified by an author between a range of commits with the status e.g. <code>M</code> for modified.</p>

<pre><code> 1  M   a_file
 2  M   another_file
 3  M   file
 4  D   file
</code></pre>

<p>How can I show only the last thing that happened to the file <code>file</code>, e.g. here it was deleted (<code>D</code>)? </p>

<p>I don't want to see the previous modifications to the file (i.e. the <code>M</code>), only the last thing that happened in that range of commits.</p>

<p>Thanks for the attention!</p>
","7","3019105","0","0"
"34659425","20358","2016-01-07 15:49:08","1","241","<git><git-commit>","Understanding what is wrong in this git commit graph","<p>I am trying to figure out what I did wrong looking at my commit graph here. I have used alphabets A and B to show each commits parent. Shouldn't it be going straight instead of bending at <code>security</code> </p>

<p>How do you read this kind of a graph to figure out what went wrong? I have been given to believe that a healthy commit graph goes straight all the way. In that case this is not right or is it? </p>

<p>Apologies if the question doesn't have enough information. I don't know how to provide more. Here is the Gitk view</p>

<p><a href=""https://i.stack.imgur.com/b0poZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/b0poZ.png"" alt=""GITK output  ""></a></p>

<p><strong>Edit</strong></p>

<p>Here is the sourcetree view
<a href=""https://i.stack.imgur.com/HdIHA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HdIHA.png"" alt=""SourceTree ouput""></a></p>

<p>The graph in SourceTree seems to be more healthier as compared to what I see in Gitk. Why are they different?</p>
","3","20358","0","0"
"34660181","1945981","2016-01-07 16:23:47","5","4833","<git><hook><git-commit>","Check length of commit message","<p>I have a <code>git</code> hook which should prevent commit messages that have more than 72 characters:</p>

<pre><code>#!/usr/bin/env bash

# Hook to make sure that no commit message line exceeds 72 characters

while read line; do
    if [ ${#line} -ge 72 ]; then
        echo ""Commit messages are limited to 72 characters.""
        echo ""The following commit message has ${#line} characters.""
        echo ""${line}""
        exit 1
    fi
done &lt; ""${1}""

exit 0
</code></pre>

<p>This was working fine until now. I tried to rebase a commit and change its commit message, and then <code>git</code> would rightfully tell me:</p>

<pre><code>Commit messages are limited to 72 characters.
The following commit message has 81 characters.
# You are currently editing a commit while rebasing branch 'master' on '984734a'.
Could not amend commit after successfully picking 19b8030dc0ad2fc8186df5159b91e0efe862b981... Fill SUSY decay dictionary on the fly when needed
This is most likely due to an empty commit message, or the pre-commit hook
failed. If the pre-commit hook failed, you may need to resolve the issue before
you are able to reword the commit.
</code></pre>

<p>The method I use is not very smart. How would I do this properly?</p>
","1","1945981","0","0"
"15624512","361899","2013-03-25 20:50:32","1","44","<git><git-branch><git-commit>","Approach to handling such code change with Git","<p>Here is the problem :</p>

<p>I would like to merge two classes called <em>Song</em> each, both do share most members but not all. Populating their contents won't be problem in case members are not found, they will be simply ignored, so probably okay but who knows, I might have to revert back to the original implementation (separate objects).</p>

<p>This is where Git comes handy, for versioning my code. (that's my first time I use it)</p>

<p>Question is : how one would handle such change with Git ? create a commit or create a branch ?</p>
","0","361899","0","0"
"68906350","3973005","2021-08-24 11:00:31","0","92","<xcode><frameworks><git-commit>","How to commit code separately for app project with nested framework project in Xcode","<p>I used the instructions in <a href=""https://developer.apple.com/library/archive/technotes/tn2435/_index.html#//apple_ref/doc/uid/DTS40017543-CH1-PROJ_CONFIG-APPS_WITH_MULTIPLE_XCODE_PROJECTS"" rel=""nofollow noreferrer"">Apps with Multiple Xcode Projects</a> to set up an app project with a nested framework project in Xcode. The project navigator looks like this:</p>
<p><a href=""https://i.stack.imgur.com/4iGVa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4iGVa.png"" alt=""App project with nested framework project"" /></a></p>
<p>When I make changes to files in the framework and/or files in the app, clicking on <em>Source Control &gt; Commit</em> in the Xcode menu brings up the Commit window showing all the files I have modified (both the app <em>and</em> the framework) with a checkbox next to them.</p>
<p>How can I commit files for the app and the framework <strong>separately</strong>? Whatever commit message I write would be applied to both projects in the commit, which wouldn't be correct. What is the proper thing to do?</p>
","0","3973005","",""
"34682079","4398050","2016-01-08 16:49:40","2","958","<git><patch><git-commit><format-patch>","git format-patch on empty commit returns unexpected result","<p>Couldn't find any explanation on git docs on this issue:</p>

<p>If I create a dummy commit, with some dummy diff, I get a normal patch
when I run</p>

<p><code>git format-patch -1 -o outgoing/ -p -k</code></p>

<p>but if the last commit is an empty commit, generated by</p>

<p><code>git commit --allow-empty ""Some commit message""</code></p>

<p>then the output of the format patch will be an empty patch. If the
first case produces something like this:</p>

<pre><code>From 08cfdb2994554d834b89309ca96d9bf513e26a90 Mon Sep 17 00:00:00 2001
From: User &lt;mail@example.com&gt;
Date: Fri, 8 Jan 2016 12:44:57 +0000
Subject: dummy commit


diff --git a/lol.txt b/lol.txt
new file mode 100644
index 0000000..f944b38
--- /dev/null
+++ b/lol.txt
@@ -0,0 +1 @@
+:)
--
2.5.4 (Apple Git-61)
</code></pre>

<p>then the second case shouldn't generate something like this instead ?</p>

<pre><code>From 2d486f25c48780e2e132047e681929fcccb7e60c Mon Sep 17 00:00:00 2001
From: User &lt;mail@example.com&gt;
Date: Fri Jan 8 12:43:55 2016 +0000
Subject: Some commit message


2.5.4 (Apple Git-61)
</code></pre>
","0","4398050","0","0"
"34698879","1172541","2016-01-09 21:00:59","1","401","<git><delete-file><git-commit>","How to delete a commit and all of its children?","<p>Let's say I have a commit, and I want to delete it, all its children, and any branches and tags that refer to it. </p>

<p>What do I do?</p>

<p>Really, only the references need deleted, after which</p>

<pre><code>git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
git reflog expire --expire=now --all
git gc --prune=now
</code></pre>

<p>can be run.</p>
","8","1172541","",""
"51071891","1422096","2018-06-27 21:47:40","5","5306","<python><git><git-commit>","Auto increment version number in a Python webserver, with git","<p>I have a Python webserver (using Bottle or Flask or any other) that I develop locally:</p>

<pre><code>BUILDVERSION = ""0.0.128""

@route('/')
def homepage():    
    ... # using a template, and the homepage shows the BUILDVERSION in the footer
        # so that I always know which live version is running

...

run(host='0.0.0.0', port=8080)
</code></pre>

<p>Each time I have a significant update, I do:</p>

<pre><code>git commit -am ""Commit name"" &amp;&amp; git push
</code></pre>

<p>and the distant version is updated. (Note: I use <code>git config receive.denyCurrentBranch updateInstead</code> on the distant repo).</p>

<p>Problem: I often forget to manually increment the <code>BUILDVERSION</code> on each commit, and then it's not easy to distinguish which version is running live, etc. (because two consecutive commits could have the same <code>BUILDVERSION</code>!)</p>

<p><strong>Question: Is there a way to have an auto-incrementing <code>BUILDVERSION</code> on each commit with Python + Git?</strong> or anything similar (the BUILDVERSION could also be the commit ID...) that would be present in small characters in the footer of the website, allowing to distinguish consecutive versions of the Python code.</p>
","3","1422096","0","0"
"34701827","1172541","2016-01-10 03:42:47","0","77","<git><git-commit>","Can I handcraft my own commit for an empty directory?","<p>The answer to ""<a href=""https://stackoverflow.com/questions/115983/how-can-i-add-an-empty-directory-to-a-git-repository"">How can I add an empty directory to a Git repository?</a>"" is you can't through regular git commands, because the staging only has files, not folders.</p>

<p>Commits, on the other hand, do have folders, so a commit could conceivably have an empty folder.</p>

<p>How would create a commit with an empty folder? What about a commit to remove an empty folder? Can I add the empty folder on top of other changes (made via the staging area)?</p>

<p>Note: Here is evidence that commits can contain folders:</p>

<pre><code>$ git cat-file -p 6c07af3
tree 3d6e2028b57fba5cd2c5f1f01cdd5be9814335ec
author *** 1452398070 -0500
committer *** 1452398070 -0500

A commit

$ git cat-file -p 3d6e20
100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    file1
040000 tree e4af7700f8c091d18cc15f39c184490125fb0d17    folder
</code></pre>

<p>Note that it stores which things are files and which are folders, as well as file and folder names. What I would want to do is create my own git commit object, without going through the staging process.</p>
","7","1172541","0","0"
"69632143","534238","2021-10-19 13:53:08","0","259","<git><digital-signature><git-commit><pre-commit-hook>","Is it possible to enforce a signed commit locally?","<p>My company uses GitHub for our organization repos and also validates authors by enforcing <a href=""https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits"" rel=""nofollow noreferrer"">signed commits</a>.</p>
<p>The problem is that it is <em>possible</em> to clone a repo, create a branch, submit several commits, and create a Pull Request without any signed commits.  It isn't until there is an attempt to merge that PR into <code>develop</code> or <code>main</code> or whatever is the branch protected with signed commits where the PR merge fails.  At that point, we have to clean it all up with a <code>rebase</code> so that there are no commits without signatures.</p>
<p>Is there a way to enforce the signatures even on the local clone of the repo?  Something like a pre-commit hook that ensures the commit fails if there is no signature?  Something that, once set up, would look something like this:</p>
<pre class=""lang-sh prettyprint-override""><code>&gt; git clone &lt;my-company's-git-repo-with-signatures-required-on-main-branch&gt;
&gt; cd &lt;my-company's-git-repo-with-signatures-required-on-main-branch&gt;
&gt; git switch main # Just to make it clear that I am on the protected branch
&gt; touch my-new-file
&gt; git add my-new-file
&gt; git commit -m &quot;Testing&quot; # And this is for a user that does not have signing set up yet.
Git Error: Cannot commit without signature  # Or whatever the error message would be
</code></pre>
<p>This prevents any sort of &quot;roll back&quot; via <code>rebase</code> or whatever other method may be possible.</p>
","1","534238","",""
"34730420","3765176","2016-01-11 20:25:00","3","589","<linux><github><git-push><git-commit>","GitHub commits not showing up on the calendar using ssh, but files get updated","<p>So I decided to switch and start using ssh key to commit my work on GitHub. However, after I created an ssh key and connected it to GitHub when I push it does not show up on my contributions calendar. But it does the push because I can see the changes on the repository on GitHub. Also when I check my settings and under ssh key it tells me that it was used in the past day, but still no commits on the calendar.</p>

<p>After it did not work with ssh key, I tied going back to https link, but now it does not work that way either. I am using the Virtual Box and I am running the Slackware machine on it, where I do all of my development. Only that machine has the problem I described above.</p>

<p>I tried finding the solution, but it seems people did not have this problem as I hoped.  Can you explain what's going wrong and how to fix it?</p>
","8","3765176","",""
"34742643","385622","2016-01-12 11:36:53","1","66","<git><git-commit>","Filtering git commits by the number of lines in the commit message","<p>I'm trying to find long (verbose) git commits which includes over a certain number of lines in the message body — say commit messages with more than 3 lines (aside from the title line).</p>

<p>Is there a way to achieve this?</p>

<p>The goal is to showcase clear and descriptive commit messages in our codebase or find good examples of long commit messages in open source repositories.</p>
","1","385622","0","0"
"34742941","5010583","2016-01-12 11:51:31","4","7068","<git><git-commit>","Delete unpushed git commits, but keep all local work","<p>I have some massive files in my local directory, included in a commit which I think are preventing my git push from proceeding:</p>

<pre><code>Counting objects: 194, done.
Delta compression using up to 4 threads.
Connection to bitbucket.org closed by remote host.
fatal: The remote end hung up unexpectedly
Compressing objects: 100% (190/190), done.
error: pack-objects died of signal 13
error: failed to push some refs to 'myrepo'
</code></pre>

<p>At least, I'm fairly sure it's the size of files is causing the push to fail. I just want to delete the record of the commit, so I can go back in and add a .gitignore for those files, commit and push again.</p>

<p>A git status gives:</p>

<pre><code>On branch master
Your branch is ahead of 'origin/master' by 3 commits.
  (use ""git push"" to publish your local commits)
nothing to commit, working directory clean
</code></pre>

<p>It is possible to remove the commits, whilst retaining all the changes in my working directory? I'm struggling to find an answer that doesn't seem to involve resetting my repository to an earlier commit from the master (I want to keep all my recent local work!). Any advice would be much appreciated.</p>
","0","5010583","",""
"34746245","5686853","2016-01-12 14:26:30","8","14186","<git><github><push><git-commit><post-commit>","Delete and completely remove the commit from git history","<p>I have a commits in my git history</p>

<pre><code>1.commit 4930da17d8dd23d650ed38435d8b421816a0c451
  Date:   Sat Dec 5 14:34:18 2015 +0530

2.commit e1ebbbb599ee20ebec3ca92c26266d9fd16e7ccc
  Date:   Sat Dec 5 13:22:20 2015 +0530

3.commit 1c4a11a80eb054d24dafec2efed0b0282188e687
  Date:   Sat Dec 5 12:11:50 2015 +0530

4.commit b4ab3c164a3a8d93e0a71a94b5c561cb5e20ebf6
  Date:   Sat Dec 5 12:09:56 2015 +0530

5.commit 167b1d10258381f09663ce61fa88ce3bbcd404c4
  Date:   Sat Dec 5 12:09:21 2015 +0530

6.commit c61bcadac673e1c83f4c14b66d56e23b12fa3198
  Date:   Sat Dec 5 12:07:58 2015 +0530
</code></pre>

<p>In that 3rd and 4th commit contains a wrong code, but unknowingly I committed and pushed.</p>

<pre><code>3.commit 1c4a11a80eb054d24dafec2efed0b0282188e687
  Date:   Sat Dec 5 12:11:50 2015 +0530

4.commit b4ab3c164a3a8d93e0a71a94b5c561cb5e20ebf6
  Date:   Sat Dec 5 12:09:56 2015 +0530
</code></pre>

<p>But 5th and 6th commits contains a correct code. I need this commit to work.</p>

<pre><code>5.commit 167b1d10258381f09663ce61fa88ce3bbcd404c4
  Date:   Sat Dec 5 12:09:21 2015 +0530

6.commit c61bcadac673e1c83f4c14b66d56e23b12fa3198
  Date:   Sat Dec 5 12:07:58 2015 +0530
</code></pre>

<p>Now I want to Delete and Remove completely whatever I changed in 3rd and 4th commit.</p>

<p>I want delete 3rd and 4th commit from the git history. But not 5th and 6th.</p>

<p>So that my branch will be safe.</p>
","2","5686853","0","0"
"34751837","1043569","2016-01-12 19:06:00","123","115038","<git><restore><git-commit>","Git - Can we recover deleted commits?","<p>I am surprised, I couldn't find the answer to this on SO.</p>

<blockquote>
  <p>Can we recover/restore deleted commits in git?</p>
</blockquote>

<p>For example, this is what I did:</p>

<pre><code># Remove the last commit from my local branch
$ git reset --hard HEAD~1

# Force push the delete
$ git push --force
</code></pre>

<p>Now, is there a way to get back the commit which was deleted? Does git record(log) the delete internally?</p>
","2","1043569","0","0"
"69641384","13818430","2021-10-20 06:41:10","1","1240","<git><git-merge><git-branch><git-commit><git-checkout>","Git checkout to master from another branch updates automatically local changes?","<p>I have an empty git repo in which first I create a hello.txt file with content &quot;pulkitsharma&quot;.
After this I added it to staging and then commited the changes in master branch. Then I create
another branch named as &quot;new_branch&quot; and updated the content of hello.txt with
&quot;pulkitsharma\npulkitsharma6569@gmail.com&quot; and didn't staged for commit. Now after this when I
checkout to master branch the content of hello.txt is updated automatically .  Can anyone tell
us why this is happening because i think that during checkout to master branch there should be<br />
an error.Why is output of git checkout master is
<code>&quot;M  hello.txt Switched to branch 'master' &quot; </code></p>
<pre><code>git init
vi hello.txt
git add .
git commit -m &quot;hello.txt added to master branch&quot;
git checkout -b new_branch
vi  hello.txt
git checkout master
</code></pre>
","4","13818430","0","0"
"34757710","779975","2016-01-13 03:03:38","1","172","<git><github><git-branch><git-commit>","What branch orphan commits belong to? (Git, Github)","<p>I have some <em>orphan</em> commits inside my Github repo. They are not present inside of any branch or my local repo, and I can only see them if I select a specific issue with the list of related commits. </p>

<p>Is there any way I can merge these commits into another branch of my choice?</p>

<p><a href=""https://i.stack.imgur.com/25Iyp.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/25Iyp.jpg"" alt=""enter image description here""></a></p>
","4","779975","0","0"
"34781027","1897974","2016-01-14 03:08:01","0","66","<git><netbeans><version-control><git-push><git-commit>","Can I delete specific files & folders from the local copy of git repo. & commit/push the code? Everything is done in NetBeans IDE & not from terminal","<p>I'm a <strong>PHP</strong> developer by profession and I'm a newbie to this thing <strong>Git</strong>. </p>

<p>Also I've <strong>No Idea</strong> at all about using <strong>Git</strong> from the <strong>Terminal</strong> using <strong>Git commands</strong>. </p>

<p>Whatever knowledge I have to use <strong>Git</strong> is using the <strong>NetBeans IDE</strong> only.</p>

<p>I've been given a local machine running on <strong>Ubuntu Linux 12.04 LTS</strong>. It already has installed <strong>NetBeans IDE 8.0</strong>. This <strong>NetBeans IDE</strong> has <strong>Git plugin</strong> already installed.</p>

<p>I've been asked to remove specific files and folders from the repository branch on <strong>Git server</strong>.</p>

<p>So, I made a clone of the git branch on my local Ubuntu machine which I asked to manipulate using menu <strong>Team-->Git-->Clone</strong> and by providing necessary details like Git Repo URL, Username, Password.</p>

<p>Now tell me if I select the specific files and folders from the clone and delete them using the delete option present in <strong>NetBeans IDE</strong> and commit/push the code base will the same set of files and folders will get removed from the <strong>Git branch</strong> present on <strong>Git server</strong> too? </p>

<p>If yes I'll proceed with that way. If no then please provide me the way to do it.</p>

<p>Please guide me in this regard.</p>

<p>Thanks.</p>
","0","1897974","",""
"34805770","3523101","2016-01-15 06:59:44","2","3401","<git><git-commit><git-reset><git-revert>","how to revert TILL specific commit in git","<blockquote>
  <p>i want to revert <strong>TILL</strong> <strong>specific</strong> commit in <strong>git</strong></p>
</blockquote>

<p>i have done 3 commits in git</p>

<ul>
<li>1st commit  > 1:am</li>
<li>2nd commit  > 2:am</li>
<li>3rd commit  > 3:am</li>
</ul>

<p>now i want to <strong>revert</strong> directly to this <strong>specific</strong> 1st commit !</p>
","0","3523101","0","0"
"69652659","11611307","2021-10-20 20:30:51","0","187","<git><github><git-commit><pull-request>","How to remove child commit from existing pr","<p>It's silly really, I made a pull request yesterday on branch_A to master. Many files were changed and I don't want to add more to it. I switched to a new branch from branch_A to branch_B. I added the files I wanted to commit, and pushed from branch_B.</p>
<p>On Github, if I want to merge this commit to master, it shows that both the pr I made on a separate branch and this new commit are together. I did not want to push this commit to my previous pull request. I thought since I was on a new branch, that it would create a way to make a new pull request.</p>
<p>Should I remove the commit and try a different way? Should I merge the commit and pr? Should I just submit the pull request as is? Should I try to push this commit to Branch_A instead of master? There are many questions.</p>
<p>Here's a look at the cli steps:</p>
<ul>
<li>git branch -vv (master, <em>branch_A</em>)</li>
<li>git checkout -b branch_B</li>
<li>git add .</li>
<li>git commit -m&quot;something cool&quot;</li>
<li>git push origin branch_B</li>
</ul>
<p>Any help would be great!</p>
","0","11611307","",""
"34831199","35946","2016-01-16 19:31:50","1","200","<git><git-commit>","git commit -v: how to hide not staged file list in verbose commit message?","<p>I have a couple of unruly configuration repos, where keeping worktree clean is difficult due to falling behind on properly recording needed updates. That means a ton of files with unstaged changes.</p>

<p>This messes up <code>git commit -v</code> output, because the diff that I actually want to see while writing the commit message is all the way at the bottom.</p>

<p>Stashing before committing is not an option, because live apps may be watching configuration files and may get confused when they flip between states.</p>

<p>How do get rid of the ""Changes not staged for commit"" section?</p>
","7","35946","0","0"
"34850831","4481287","2016-01-18 09:05:36","43","25469","<git><git-commit><git-rewrite-history>","Change git email for previous commits","<p>So I read a lot about how to change previous commit's email address but for some reason mine is not updating.</p>
<p>I did like 40 commits to my private repo with my local email (nameofMyComputer@kevin.local) which is bad since this email is not associated(and it can't be) with Github.</p>
<p>I then remembered that I needed to set the git.config before and so I did:</p>
<pre><code> git config user.email &quot;newemail@example.com&quot;
</code></pre>
<p>and did a test commit and it worked perfectly.</p>
<p>Is there a way I can revert all my previous commits to this new email?</p>
<p>I read this question on SO <a href=""https://stackoverflow.com/questions/750172/change-the-author-of-a-commit-in-git"">How do I change the author and committer name/email for multiple commits?</a> and used this</p>
<pre><code> git filter-branch -f --env-filter &quot;                         
                    GIT_AUTHOR_EMAIL='newemail@example.com'; 
                    GIT_COMMITTER_EMAIL='newemail@example.com';
                    &quot; 
                HEAD
</code></pre>
<p>But it DID NOT work... I can still see the email of my previous commits with the .patch extension as the .local email address</p>
","2","4481287","0","0"
"34851805","3952386","2016-01-18 09:56:37","3","6206","<git><github><git-commit><git-amend>","How do I push amended commit to the remote git repo on a specific commit","<p>I already edit some files in my repo and push them.<br>
After some other work, I noticed that i keep a line commented.<br>
So, i don't want to create a new commit for it and I want to change it in the previous commit (Not the last one commit).<br>
I think that i can use the commit ID, but i don't know how or maybe Git not tolerating this feature.<br></p>
","2","3952386","0","0"
"34888175","1282910","2016-01-19 22:28:36","3","2795","<git><sha1><git-commit>","Is there duplicated SHA commits?","<p>Every time you make a commit, git/hg generates a SHA to uniquely identify that commit in the repository's history.</p>

<p>Suppose I want to merge two repositories(which we have no information of which ones).
This pops the question: if someone wanted a specific commit of that same merged repo, would there be a duplicated SHA hash that would confuse git when getting that comment? And if not so, what would git do?</p>

<p>Ultimately I guess the question is also: is there duplicated hashes taken every repository of the whole world? </p>
","4","1282910","",""
"34901183","3736788","2016-01-20 13:19:18","4","2444","<git><bitbucket><git-commit>","BitBucket: Cross Reference between commits and issues not working","<p>I just activate the issue tracker within one of my repositories on bitbucket. </p>

<p>I also entered issues successfully. However, when I commited new code to the repository fixing a bug the corresponding issue gets resolved but in the commits list there is no cross reference to the bug as explained <a href=""https://confluence.atlassian.com/bitbucket/resolve-issues-automatically-when-users-push-code-221451126.html"" rel=""nofollow noreferrer"">here</a></p>

<p>The commit message I used was:</p>

<pre><code>git commit -m 'Bug fix #1: messages with special characters are displayed correctly'
</code></pre>

<p>The following images shows you that I don't have the reference in the list of commits proposed by the link above. I also checked the Services in the settings - there I have the Issues listed as service.</p>

<p><a href=""https://i.stack.imgur.com/XRtGn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XRtGn.png"" alt=""test""></a></p>

<p>Have I overlooked something?</p>
","0","3736788","",""
"34902980","2082964","2016-01-20 14:38:58","0","415","<git><git-commit>","git revert commit, back to staged and unstaged","<p>I regularly use</p>

<pre><code>git add -p
</code></pre>

<p>to select which parts I want to commit. Once I selected what I wanted; I proceed to using</p>

<pre><code>git commit -a
</code></pre>

<p>and finalize my commit. Now I realize that I <strong>should NOT have used the -a option</strong>, because now I have undone the work done with <code>git add -p</code> (that is, splitting my changes in multiple commits).</p>

<p>The only way I know to revert this, and make it back the way I wanted is:</p>

<pre><code>git reset HEAD~
git add -p
git commit
</code></pre>

<p>Is there any way that I <strong>don't</strong> have to do <code>git add -p</code> again; performing the exact same operations to split my changes into multiple commits? So I want to undo the <code>git commit -a</code> and go back to the staged and unstaged files just before (that is <strong>the way git status was just after using git add -p</strong>).</p>
","0","2082964","",""
"69679025","7171854","2021-10-22 14:55:18","3","619","<git><visual-studio><azure-devops><git-commit><git-revert>","How to revert a commit that was merged with a lot of other commits, without losing the commits in between (Azure Devops)","<p>My experience to GIT is low to none, so what I'm asking may sound a bit odd. We have an Azure Devops repo, with commits on daily basis.</p>
<p>A commit with some changes happened in our Azure Devops repository on the 3rd of September. This was committed, but never pushed. The developer was absent since, and in the past 2 months a lot of commits happened. Then, on the 21st of October, the commit from the 3rd of September was merged with all the commits in between and finally pushed.</p>
<p>Is there a way to revert the merged commit (that happened on the 21st of Oct) AND the commit itself (that happened on the 3rd of Sept) without losing all the commits in between?</p>
<p>This is happening in Azure Devops, and the commits and pushes were going mainly through Visual Studio 2019.</p>
","3","7171854","",""
"69679807","17124277","2021-10-22 15:52:46","0","52","<git><git-commit><git-diff>","Git diff on rewriting history","<p>I am curious to know about  Git diff in this situation, i could not find in Git docs</p>
<p>Assume on branch A , i have three commits as<br>
<code>Branch A: Commit 3 &lt;-- Commit 2 &lt;-- Commit 1</code></p>
<p><code>Commit 3</code> is latest on branch.</p>
<ol>
<li>Now if we re-write the commit history i.e. rebase the recent <code>Head~2</code> commits and and squash them into one, then branch looks like</li>
</ol>
<p><code>Branch A: Commit 3' &lt;-- Commit 1</code><br>
<code>Commit 3'</code> includes commit 3 and commit 2 after rebasing.</p>
<p>Now if I run the command <code>git diff commit3 commit3'</code> will it work ?
If yes, then why and what changes will it show in diff?</p>
<ol start=""2"">
<li>If we delete the <code>commit 3</code> and just keep <code>commit 2</code> as latest master after rebasing.
Then
what <code>git diff commit 3 commit 2</code> will show?</li>
</ol>
<p>Note: here commit 3 has been deleted, how git will track this if found  diff?</p>
","1","17124277","",""
"51125452","762625","2018-07-01 17:25:36","1","334","<git><git-commit><git-rewrite-history>","Clean up old git repo by deleting range of commits","<p>I started to work on a project with an old and very big repo, around <code>1.1GB</code> </p>

<p>I have made a full clone from the original repo, into another repo and called it <code>original-repo</code></p>

<p>The project will continue only on a specific part and all other parts are deprecated, so all the commits and branches from initial commit (<code>7e48a70</code>) to a specific commit (<code>222b1f3</code>) are useless. And to make repo clean I need to delete all those commits and all branches except for master, and rewrite the history of the working repo. </p>

<p>I've searched and read lot of topics, used many scripts and commands, installed some Git GUI applications, but couldn't manage to delete the commits and branches to cleanup and reduce size of repo. Repo size is still <code>1.1GB</code>.</p>

<p>Any help would be really appreciated.</p>
","5","762625","",""
"34994535","","2016-01-25 14:04:34","0","228","<git><git-push><git-commit>","How to undo git commits locally and on remote without losing changes","<p>We have a project in remote repository. Recently I created a new branch ""Feature7"" and made huge changes and committed twice and also pushed twice. Fortunately, no one pulled from that branch. After that there have been lots of commit and push in master branch but no one worked on Feature7 branch. </p>

<p>Now I want to undo the two commits and push, both from local and remote if possible of the Feature7 branch. But I want the changes to keep locally as well. I don't want to loose my changes. </p>

<p>So in short, I only want to undo both commits and push without losing my changes in local. </p>

<p>The reason I am doing this because, in the new branch there is a problem for line endings of whole project. So I messed up the history of the whole project. It is not possible to recognize what changes I made in my new branch.  </p>
","0","","",""
"35005472","608639","2016-01-26 01:14:48","1","367","<github><git-commit><author>","Author attribution via command line option with GitHub handle?","<p>We find a number of folks provide bug reports and diffs, but don't make pull requests. I'd like to give them credit for their work in a commit even when they don't provide the pr.</p>

<p>Its not clear to me how to provide attribution because Git's <strong><em><code>--author</code></em></strong> option <a href=""https://git-scm.com/docs/git-commit"" rel=""nofollow"">seems to want an email address</a>, and I'm not sure how that intersects with a GitHub handle. <a href=""https://help.github.com/categories/commits/"" rel=""nofollow"">GitHub | Commits Help</a> does not discuss it, either.</p>

<p>How do I provide an author attribution via command line option with GutHub handle? Can I simply use <strong><em><code>--author</code></em></strong>? Or do I need special syntax for GitHub handles?</p>

<hr>

<p>It appears I cannot simply use a Git handle or a github based email (I should have known it could not be simple because its Git). It appears I have to force it :</p>

<pre><code>$ git commit rdrand.cpp -m ""Fix clobbered registers (Issue 124)"" --author ""Name xxx""
fatal: No existing author found with 'Name xxx'
</code></pre>

<p>I also tried:</p>

<pre><code>$ git commit rdrand.cpp -m ""Fix clobbered registers (Issue 124)"" --author ""GitHub xxx""
fatal: No existing author found with 'GitHub xxx'

$ git commit rdrand.cpp -m ""Fix clobbered registers (Issue 124)"" --author ""GitHub:xxx""
fatal: No existing author found with 'GitHub:xxx'
</code></pre>

<p>I even tried:</p>

<pre><code>$ git commit rdrand.cpp -m ""Fix clobbered registers (Issue 124)"" --author ""Name xxx@github.com""
fatal: No existing author found with 'Name xxx@github.com'
</code></pre>

<p>How do I force Git to accept the name?</p>
","0","608639","",""
"35031463","4510631","2016-01-27 07:46:35","0","105","<android-studio><git-commit>","Commit is not applied in android studio","<p>i am working in the android project in which i always need to commit and push. but suddenly it is stopped working. when i click on commit button nothing is happen and commit process is not started. please help.
Thank you.</p>
","3","4510631","",""
"69694112","15369973","2021-10-24 05:25:40","0","381","<android-studio><git-commit>","Android Studio IDE Basics - different Colors on file name","<p><img src=""https://i.stack.imgur.com/97baW.png"" alt=""enter image description here"" /></p>
<p>Can Anyone explain what is the meaning of this different colors. Sometimes I also see Blue and green colors on file name.</p>
","0","15369973","",""
"69694558","17232444","2021-10-24 07:06:36","-1","2292","<git><github><git-branch><git-commit><git-status>","git checkout master does not work after i created a branch....what can I do?","<p>I have created a file called basic and I have created a branch called new. After moving to the new branch, I want to switch to the master branch, hence i used git checkout master. Unfortunately, the terminal stated there is no master branch.</p>
<pre><code>(base) Dun-Yan:basic ongdunyan$ git checkout master
error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>Here is the git status:</p>
<pre><code>(base) Dun-Yan:basic ongdunyan$ git status
On branch new
nothing to commit, working tree clean
</code></pre>
<p>I would appreciate if you all can help me, peace :)</p>
","5","17232444","",""
"35040112","1225966","2016-01-27 14:32:08","2","1600","<git><version-control><linux-kernel><git-commit>","How to check to which branches of the linux kernel repo a specific commit is applied","<p>Let's say I have a git commit in the linux git repo, e.g. <a href=""http://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/commit/?id=8c7188b23474cca017b3ef354c4a58456f68303a"" rel=""nofollow"">http://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/commit/?id=8c7188b23474cca017b3ef354c4a58456f68303a</a></p>

<p>How can I, starting from this commit, understand in which branches of the repo this commit is actually contained? A security provider tells me the above commit applies to the 2.6.x, 3.10.x, 3.12.x, 3.14.x, and the 3.4.x branches. </p>

<p>How are they able to determine this?</p>
","3","1225966","",""
"69696544","3220554","2021-10-24 12:00:44","1","201","<git><git-commit><pre-commit-hook>","git add from within git pre-commit hook only adds the file every second time","<p>Setting up git to track changes to a web site. The web site uses a MySQL database. I need a dump of the database to be included in every commit. Sometimes there are only changes to the database, but still I want to be able to commit this change.</p>
<p>I've setup a git pre-commit hook to dump the database, and add that dump file to git. The git hook looks as follows:</p>
<pre><code>#!/bin/bash

systemname=&quot;mysystem&quot;
dumppathname=&quot;.dbexports/${systemname}_dbdump_$(date +%Y%m%d_%H%M%S).sql&quot;

./.scripts/dump_database.sh $dumppathname

if test $? -ne 0
then
  echo &quot;Dumping database failed. Aborting the commit...&quot;
  exit 1
else
  git add $dumppathname
  exit 0
fi

</code></pre>
<p>The dump script runs a <code>mysqldump</code>command to dump the database with desires options. This command works as designed and writes the dump to the file designated by the <code>$dumppathname</code> variable.</p>
<p>The problem is with the <code>git add</code>. The dump file is only added every second time.</p>
<ul>
<li>Git is in a clean state, i.e. all changes have been commited, no untracked files.</li>
<li>I apply some changes to the web site which reflect in some database changes only. I want to commit this state, so I do:</li>
</ul>
<pre><code>me@mysystem /website&gt; git commit -m &quot;Track database changes, only.&quot;
</code></pre>
<p>The response is (the first line is written by the dump script):</p>
<pre><code>Dumping current database 'mywebsite' to '.dbexports/mysystem_dbdump_20211024_132309.sql'
On branch master
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        .dbexports/mysystem_dbdump_20211024_132309.sql

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>It seems the <code>git add</code> from the git hook did not work.</p>
<ul>
<li>But then, I immediately do another <code>commit</code>:</li>
</ul>
<pre><code>me@mysystem /website&gt; git commit -m &quot;Track database changes, only. Second time.&quot;
</code></pre>
<p>The response is (again, the first line is written by the dump script):</p>
<pre><code>Dumping current database 'mywebsite' to '.dbexports/mysystem_dbdump_20211024_132323.sql'
[master 87cfdb9] Track database changes, only. Second time., 1 uncommited files.
 2 files changed, 22630 insertions(+)
 create mode 100644 .dbexports/mysystem_dbdump_20211024_132309.sql
 create mode 100644 .dbexports/mysystem_dbdump_20211024_132323.sql
</code></pre>
<p>So, this time both the dump file form the first, as well as the dump file from the current <code>commit</code> seem to have made it into the commit. What am I missing?</p>
","7","3220554","",""
"35048508","5819516","2016-01-27 21:35:26","0","187","<git><git-merge><atlassian-sourcetree><git-commit><git-checkout>","Apply locally committed changes over pulled changes using source tree and git","<p>I have a serious problem, I committed my local changes to the local branch. Then, I did a pull from the remote server. I then resolved the conflict. But, one mistake I did was, I accidentally accepted the change of the remote server over mine. So now, all my changes are gone. Luckily, I still have that local commit with my changes. </p>

<p>Now, I want my local commit to overwrite my pulled file. I am not sure what is the right way to do this on sourcetree. I can also try the command line on sourcetree. I have tried to checkout a branch on my local change/commit and marked it to track the remote branch. But that is not over writing it with my committed file. Does anybody know how to fix this?</p>

<p>Thanks</p>
","0","5819516","",""
"35051809","5071787","2016-01-28 02:26:11","3","1031","<git><date><gerrit><git-commit>","Get commit date from gerrit url","<p>I have the gerrit url and I want to get the commit date. Gerrit query does not give you the commit date. It gives only createOn and lastupdatedOn. If I add a comment on the gerrit change, the lastUpdatedOn value changes so I am reluctant to use it. Is there a way to get the commit-date since it is displayed on gerrit? Thanks in advance.</p>
","0","5071787","0","0"
"35052157","1172541","2016-01-28 03:08:06","3","2134","<git><commit><git-commit><git-rewrite-history><git-plumbing>","Remove a commit's parent, thereby making it the initial commit","<p>Note: I know this is rewriting history, will change all the hashes, and mess everyone else up.</p>

<hr>

<p>I want to take a commit, and remove its parent. Specifically, the commit should now look like an initial commit. That means its diff will change; it will look as though all the files were created by that commit, at that point in history.</p>

<p>How does one do this? (I could, of course, go edit the commit object, but then the commits wouldn't point to each other.) Also, I would like to do this on a new branch (meaning that there are now two histories: the original one, and another where the commit is the initial commit.)</p>
","7","1172541","0","0"
"35075341","3898180","2016-01-29 01:26:00","1","3177","<git><github><git-commit>","Can not commit to local repository after making changes ( Visual Studio 2015 (Community) )","<p>I've created a local repository in place of my solution, created a remote repository in github , made a commit, then pushed the commit to github remote repo. Ok, good.
After that I've done some changes to the code and wanted to send them to github,
So first I should find a commit button to commit changes to the local repo, after that i suspect i need to push this to remote.
But I can not find a commit button. Instead in the Source Control submenu in solution explorer right-click menu I can only see View history,Compare with unmodified(greyed out) and Annotate
No commit.</p>

<p>If i go to team menu and go to changes, there is a commit button there with a textfield to write down the commit message, but this button is disabled even if i put a message. Can anyone clear this out for me? Thanks</p>

<p><strong>Answering</strong> the first request below I've typed 
git status in the command prompt and here is what i've got</p>

<pre><code>D:\Projects\AsmParser&gt;git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   AsmOperand.cpp
        modified:   AsmOperandParser.cpp
        modified:   AsmOperandParser.h
        modified:   AsmOperandParserUnitTest.cpp
        modified:   AsmOperandUnitTest.cpp
        modified:   AsmRegisterUnitTest.cpp
        modified:   main.cpp

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        AsmParser.VC.opendb
        AsmParser.rar

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I guess I can do all the dirty job with command line. I'm still interested about Visual Studio problem</p>
","3","3898180","",""
"51145932","10024280","2018-07-03 02:41:22","2","65","<git><git-commit><git-add>","Making changes to a file that has been git added and then git committed seems to work just fine","<p>I'm finally learning git and I'm a bit confused. From what I have read, and probably misunderstood, you have to ""git add"" after making changes to a file (saving the file locally in your ide?) before then ""git committing"".</p>

<p>When I ""git add"" all my files in the working  directory, make changes and save them in the ide, then ""git commit"", all the changes are committed just fine. Why do I need to restage with ""git add"" between the save and commit? It doesn't seem to make any difference and I'm confused why I've read that you need to given that it seems to make no differences. Apologies if this is a duplicate, I did look and couldn't find an answer to my question.</p>

<p>Oh also, I would understand if I were making a new file, as this would need to be added with ""git add"" as it isn't already known, but I don't understand when I'm changing files I've already added.</p>

<p>My test for this is running ""git add"" changing a file and saving it, trying a commit to see if it registers changes without a new ""git add"", which it does as it outputs a  message informing of the changes I have made. I must be missing something in my understanding. Thanks for any help.</p>
","0","10024280","",""
"35106117","4318096","2016-01-30 19:29:48","0","448","<git><version-control><sublimetext2><git-commit>","Git Commit on Mac using Sublime 2: subl command works by itself but not during a git commit","<p>I am learning the basics of Git and have run into an issue while trying to use Sublime 2 as my default text editor for commit messages. </p>

<p>I am using a Mac and the Sublime text editor(Version 2.0.2, Build 2221)</p>

<p>As per instructions on  <a href=""https://help.github.com/articles/associating-text-editors-with-git/"" rel=""nofollow noreferrer"">help.github</a> I used the following line:</p>

<pre><code>git config --global core.editor ""subl -n -w""
</code></pre>

<p>However, when I attempt a <code>git commit</code> command I get the following message:</p>

<pre><code>subl -n -w: subl: command not found
error: There was a problem with the editor 'subl -n -w'.
Please supply the message using either -m or -F option.
</code></pre>

<p>I know that <code>subl</code> and <code>subl -n -w</code> work as I have tried them in isolation and they launch the editor. So the issue must be when the editor is opened from the <code>git commit</code> command.</p>

<p>I have looked at the questions and answers from <a href=""https://stackoverflow.com/questions/31186227/git-why-am-i-getting-the-error-subl-n-w-subl-command-not-found"">1</a>, <a href=""https://stackoverflow.com/questions/8951275/how-can-i-make-sublime-text-the-default-editor-for-git/9408117#9408117"">2</a> &amp; <a href=""https://stackoverflow.com/questions/27241099/git-commit-error-with-sublime-text-2"">3</a> and attempted the solutions but haven't been able to resolve my issue.</p>
","4","4318096","",""
"52046871","30636","2018-08-27 20:57:48","0","68","<git><go><vim><git-commit>","Vim forgets how to use left arrow key when called as a subprocesses. How to fix?","<p>I recently wrote some golang code that runs ""git commit"" as a subprocess.  Git in turns calls vim as a subprocess so that I can edit the commit message.  However, I find that when vim is executed in this manner the backspace key does not work as expected. After the commit, the terminal output is corrupted as if some component has lot track of the number of columns per line. This latter behavior is fixed with the reset command.</p>

<p>A very interesting clue appears in the output:</p>

<pre><code>Vim: Warning: Input is not from a terminal
</code></pre>

<p>So it appears that terminal information is not propagated to the subprocess.</p>

<p>I don't have these issues when I use vim directly or when I run git commit directly on the command line.  Do you have any ideas on how I can troubleshoot and fix this problem?</p>

<p>I am using vim 8.1 on Mac:</p>

<pre><code>VIM - Vi IMproved 8.1 (2018 May 18, compiled Aug  9 2018 16:08:01)
macOS version
Included patches: 1-235
Compiled by Homebrew
Huge version with MacVim GUI.  Features included (+) or not (-)...
</code></pre>

<p>My golang program does not modify the Cmd.Env variable of the exec.Cmd object.  When I run ""which vim"" in golang via exec.Command(""which"", ""vim"") I am able to confirm the same location as on the command line.  However, I realize that git commit won't necessarily find the same location for vim.  </p>

<p>My .gitconfig contains:</p>

<pre><code>[core]
editor = vim
</code></pre>

<p>but I see nothing else that looks obviously like it would alter the behavior of the editor.</p>
","0","30636","",""
"69978442","17273042","2021-11-15 17:26:59","0","13","<git><github><git-commit>","Deleted a specific commit on Github due to a KEY exposure","<p>I forgot to delete a comment line in my commit and wonder how to delete a specific I don't want to use <code>git revert</code> because I already pushed other commits. I do the <code>git-filter-repo</code> method but it throw me an error of on <code>git push origin --force --all</code>.
I just want to delete the commit to cleanup the history of Github...</p>
<p>I already do this once but don't remember how. I checked the Git doc but doesn't find the way to do it and I don't understand why Gitguardian doesn't allow us to remove these. I am the only one on this project an no one has forked/cloned the project. This is also a public folder.</p>
<p>Any advice ?</p>
","4","17273042","",""
"69983350","","2021-11-16 03:14:04","1","483","<git><gitignore><git-commit><git-checkout>","Checking out from master and used -f with uncommitted changes","<p>I am working for a company and we have a download counter on our website that is updated daily, so every time I pull from the remote repository there are changes that need to be committed, but I've been told to ignore this and that the Lead Developer will shove into a .gitignore folder at some point in the future (counter is a new addition to the website).</p>
<p>The problem is this:</p>
<p>I went to go checkout of the master branch and it wouldn't let me because I have uncommitted changes; being fairly new to git I used:</p>
<pre><code>git checkout content-fs-04112021 -f 
</code></pre>
<p>(I'm gonna assume that '-f' means force)</p>
<p>Now when I checkout of the master branch again and use:</p>
<pre><code>git status
</code></pre>
<p>It says my branch is up to date with origin/master and that there isn't anything to commit.</p>
<p>My intention wasn't to commit anything, but I just want to know what happened to my modified files.</p>
<p>Did I commit the changes on the master branch? If not, why don't the modified files show up?</p>
","2","","0","0"
"52066090","9806667","2018-08-28 20:56:38","3","1169","<git><github><atom-editor><git-commit>","Aborting commit due to empty commit message (editor = atom)","<p>Does anyone actually use atom for git commit messages here? I want to but I'm having this problem and have been sticking with git commit -m '....' . When I try to use atom, it opens atom and almost immediately i get this message from git bash:
 hint: Waiting for your editor to close the file... Aborting commit due to empty commit message.</p>
","4","9806667","0","0"
"52072246","5316255","2018-08-29 07:50:45","1","37","<git><git-branch><git-merge><git-commit>","No commits available for merging in the Git request","<p>I merged a branch, lets say <code>developer</code> in to another branch lets say <code>main</code>.</p>

<p>Then I realized that the changes from <code>developer</code> were not meant to be available in <code>main</code>.</p>

<p>I used the <code>remove branch</code> option that created a merge request excluding my changes from <code>main</code> branch. I merged this request and the <code>main</code> branch no longer contained changes from <code>developer</code>, while the <code>developer</code> branch remained as it was.</p>

<p>However, after few days I want those changes to be available in <code>main</code>, I tried creating new merge request from <code>developer</code> to <code>main</code>. This request displays no commits to be merged.</p>

<p>Perhaps the commit were earlier merged in to <code>main</code> branch and Git now do not recognize them as new commit (although they were reverted). </p>

<p>What is the way of merging the changes available in <code>developer</code> to 'main` now ?</p>
","5","5316255","",""
"70010191","10570539","2021-11-17 19:07:32","-2","1776","<git><commit><git-commit><git-pull><git-merge-conflict>","git: Your branch and 'origin/master' have diverged - I don't want to push ""27 different"" commits and want to uncommit them and keep the local commit?","<p>Your branch and 'origin/master' have diverged,
and have 1 and 27 different commits each, respectively.
(use &quot;git pull&quot; to merge the remote branch into yours)</p>
<p>nothing to commit, working tree clean</p>
","3","10570539","",""
"70023309","14364775","2021-11-18 16:19:45","0","12","<git><github><version-control><git-commit><git-push>","GIt still showing deleted files","<p>After trying, <code>git push origin master </code>, I got the results as:</p>
<pre><code>Enumerating objects: 1929, done.
Counting objects: 100% (1929/1929), done.
Delta compression using up to 4 threads
Compressing objects: 100% (116/116), done.
Writing objects: 100% (1911/1911), 941.12 MiB | 58.52 MiB/s, done.
Total 1911 (delta 1830), reused 1869 (delta 1794), pack-reused 0
remote: Resolving deltas: 100% (1830/1830), completed with 17 local objects.
remote: error: Trace: 86df591ef0a82a8657774c9b90683e3c2b0df3ffb91ee64f4fd1d41337a73977
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File media/CA211117.ZIP is 762.66 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
To https://github.com/rikesh1212/spider.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/rikesh1212/spider.git'
</code></pre>
<p>I don't have any file <code>media/CA211117.ZIP</code>. While trying:</p>
<pre><code>git rm -r media/CA211117.ZIP
</code></pre>
<p>Got:</p>
<pre><code>fatal: pathspec 'media/CA211117.zip' did not match any files
</code></pre>
<p>Now I cannot push anything because of this error. How to solve this?</p>
","2","14364775","",""
"52093594","10154908","2018-08-30 09:28:21","0","694","<bitbucket><commit><git-commit>","Bitbucket deleting commits","<p>I have a problem, I've committed some code and now I want to delete this commit, but this is not the last commit in whole project.<a href=""https://i.stack.imgur.com/yy8Gw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yy8Gw.png"" alt=""enter image description here""></a></p>

<p>I want to delete whole blue branch( if its possible).</p>
","0","10154908","",""
"52099579","6181692","2018-08-30 14:31:37","1","798","<git><git-merge><git-commit><git-cherry-pick><git-merge-conflict>","GIT: how to merge changes, which were earlier removed from the merged commit","<p>I have two branches, develop and master. I wanted to cherry pick some commits regarding one specific feature from develop into master. But the number of commits cherry pick able from dev to master were around 106, that means I had to go through all of them in order to filter out the relevant ones. To avoid having to go through the changes of each commit and then cherry pick individual ones or a range of those, I thought to take the short cut :D. I merged develop into master, there were around 115 file changes in the merge commit.</p>

<p>I went through each file and removed those changes which were not relevant to the feature. In case of some files I removed them altogether and for some I took only partial changes and removed the unnecessary changes. After going through all of the 115, there were around 55 filtered files left which were relevant to the feature which I then commited in the merge commit.</p>

<p>Now when I look at the git log of master, log appears as though all 106 commits were merged into the master and on the top appears my merge commit named 'merged develop into master'.
Now I want to merge develop into master in order to actually merge the remaining files which I removed earlier from the merge commit, git says there is nothing to merge although there are changes among both the branches but due to the fact that I removed those from the merge commit I am unable to move those changes into master now.
Do I need to remove the merge commit from the master or is there any way to force fully merge the differences?
what should be the right method here in order to avoid any future issues?</p>
","5","6181692","0","0"
"70045017","17463520","2021-11-20 10:19:28","0","150","<github><repository><git-commit>","How to delete all the commits I have made to a repository and to permanently delete a Git repository","<p>I was brought on board as a contractor to do some work on a forked open source repository. After finishing the work and a successful launch, the hirer is ghosting me and refuses to compensate me as agreed. How can I either: permanently delete the repository without the option to restore (I still have access to Git as the owner and I'm the only one who pushed commits) or permanently delete all my pushed commits from history.</p>
<p>Side question: If a site is deployed on Cloudflare off a specific branch and I delete the repository, what happens? I'm assuming the webpage stays deployed based off whatever was compiled last.</p>
","0","17463520","",""
"52123872","10172812","2018-09-01 00:11:07","0","713","<git><persistence><git-commit>","Are Git Commits Saved/Persistant?","<p>Are Git Commits Saved/Persistant? So, if my computer reboots my commits are still there ready to be pushed to a remote repository? Or do I have to push every time I want to turn off my computer?</p>

<p>I am working on WIndows 10, but I would like to know if the answer also applies to Linux.</p>

<p><strong>Edit</strong>:</p>

<p>If I reboot my computer. would I have to re-stage and commit before pushing to a remote repository?</p>
","4","10172812","",""
"52139042","890016","2018-09-02 16:42:03","14","1137","<git><git-commit>","How to copy commit metadata (author, date) from another commit","<p>I'm sure there is a way to do this in git, but my searches are coming up empty. Is there an easy way to get the message, commit author, commit date and other info from one commit and amend the second commit with this data, without copying the actual commit contents?</p>
","0","890016","0","0"
"52160052","1437138","2018-09-04 06:30:01","7","6117","<linux><git><git-commit>","Git Auto Commit Daily","<p>Could I do take commit my changes in a directory by a daily routine? Say, In every 12 AM at early morning, It should commit all the changes in that directory automatically? Is it possible in git? I get some answers for auto commit for every changes. But I want it for daily once commit.</p>
","1","1437138","",""
"52161900","6410737","2018-09-04 08:23:11","1","6298","<git><visual-studio><version-control><push><git-commit>","How can I lock file from changes when using GIT","<p>I'm using Visual Studio with GIT, I'd like to lock some project files to prevent any of team members to push any changes related to  </p>
","1","6410737","",""
"60278","","2008-09-13 02:48:40","99","86378","<git><git-commit>","Git commit opens blank text file, for what?","<p>In all the Git tutorials I've read they say that you can do:</p>

<pre><code>git init
git add .
git commit
</code></pre>

<p>When I do that I get a big text file opened up. None of the tutorials seem to address this, so I don't know what to do with the file or what to put in it if anything.</p>
","0","","0","0"
"38579578","2440762","2016-07-26 00:58:18","0","129","<git><git-commit>","Why doesn't git recognize that my file has been changed?","<p>here what i did:</p>

<p>i committed few files.
after that i got this status</p>

<pre><code>$ git status
warning: LF will be replaced by CRLF in topGamesMenu.php.
The file will have its original line endings in your working directory.
# On branch TopGamesMenu
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   index.php
#       modified:   nbproject/private/private.xml
#       new file:   topGamesMenu.php
#
</code></pre>

<p>then i wanted to push</p>

<pre><code>git push -m 'logos vom den besten spielen im menu implementiert'
</code></pre>

<p>but i realized the massage parameter should be at the commit not at push command.
so committed again</p>

<pre><code>$ git commit -m 'logo von dem vier besten spielem um menu implementiert'
[TopGamesMenu warning: LF will be replaced by CRLF in topGamesMenu.php.
The file will have its original line endings in your working directory.
8fa4dea] logo von dem vier besten spielem um menu implementiert
warning: LF will be replaced by CRLF in topGamesMenu.php.
The file will have its original line endings in your working directory.
3 files changed, 133 insertions(+), 86 deletions(-)
create mode 100644 topGamesMenu.php
</code></pre>

<p>after this command my git status shows no more changes.</p>

<pre><code>$ git status
# On branch TopGamesMenu
nothing to commit, working directory clean
</code></pre>

<p>---EDIT---</p>

<p>git push doesnt work. git says</p>

<pre><code>Everything up-to-date
</code></pre>

<p>what is wrong?</p>
","3","2440762","",""
"70125536","1136137","2021-11-26 13:54:36","3","3212","<gitlab><git-commit><git-diff>","GitLab diff between commits... how does this work?","<p>I need to get a diff between two commits in GitLab. I've read the instructions for doing that, but they aren't consistent with GitLab's diff form.</p>
<p>I have to specify the name of the &quot;to&quot; project (the &quot;from&quot; project is pegged to the current project) and the &quot;from&quot; and &quot;to&quot; commits. But when I select Repository &gt; Compare I get this:</p>
<p><a href=""https://i.stack.imgur.com/cfvTg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cfvTg.png"" alt=""GitLab commit diff"" /></a></p>
<p>The form prompts me for the name of the &quot;to&quot; project and &quot;from&quot; and &quot;to&quot; <em>branches</em>. There's no place to select the &quot;from&quot; and &quot;to&quot; commits!</p>
<p>Could I have displayed a form that's just for comparing the latest commits of different branches, even though I followed instructions for comparing different commits of the selected branch? I don't think so; the last button is labeled &quot;Swap revisions,&quot; not &quot;Swap branches.&quot; The form <em>thinks</em> it's inviting me to select two commits, but doesn't let me do it.</p>
<p>I tried entering commit IDs in the &quot;branch&quot; fields. GitLab won't let me. The fields are dropdowns. They let me enter a value, but it's just a filter for a list of branch names; when I enter a commit ID GitLab finds no matching branches and I can't select anything.</p>
<p>How is this supposed to work?</p>
","3","1136137","",""
"52189770","2030088","2018-09-05 16:29:23","4","190","<git><git-commit><git-reflog><git-gc>","Determine what prevents a commit from being pruned from git","<p>How can I determine what is preventing a commit from being pruned from git by the following commands?</p>

<pre><code>git reflog expire --expire=now --all

git gc --prune=now
</code></pre>

<p><strong>Details</strong></p>

<p>I want to completely remove a commit (with, e.g., commit hash <code>XYZ</code>) from my clone.  If the above is not the correct command to do so (or if any of my following commands / deductions are incorrect), please let me know.</p>

<p>I know that <code>XYZ</code> remains in my clone after running the above prune because the following returns a log listing:</p>

<pre><code>git log XYZ
</code></pre>

<p>I know that <code>XYZ</code> isn't in any branch because the following outputs nothing:</p>

<pre><code>git branch --contains XYZ
</code></pre>

<p>I thought that <code>XYZ</code> wasn't in any stash because the following outputs nothing:</p>

<pre><code>git stash list
</code></pre>

<p><code>XYZ</code>, however, actually was in a stash, but a git bug prevented the stash from being listed.</p>
","5","2030088","0","0"
"19392278","977408","2013-10-15 22:36:19","12","12489","<git><git-commit><git-add>","Is there a way in git to split up changes in a single file into two commits?","<p>So I a have a file:</p>

<pre><code>...

some code here..

...

some unrelate code here..

...
</code></pre>

<p>and I make the following changes to it:</p>

<pre><code>...

some code here that needs to be changed a bunch..

...

some unrelated code here..

...
</code></pre>

<p>Let's say I'm in the middle of some significant changes to the first section and I notice the typo in the later section.  I want to fix the typo and commit and possibly push that right away but I'm still working on the first part and not read to share it.  Obviously I could use git stash or do an intermediate commit and fix the typo in another branch but is there any way of adding only some of the changes in file to the staging area.  Obviously I can unfix the typo, <code>git add myfile</code> then refix the typo but if the typo fix is more complex that could be kind of annoying.  Is there a way to specify the lines in the file that I want to add with <code>git add</code>?</p>
","0","977408","0","0"
"52195513","10320971","2018-09-06 02:07:33","2","8809","<github><git-commit>","On branch master nothing to commit, working tree clean","<p>Why am I facing this error? I've done all the necessary steps. It still says:</p>

<blockquote>
  <p>On branch master<br/>
  nothing to commit, working tree clean</p>
</blockquote>
","5","10320971","0","0"
"52195877","9604994","2018-09-06 02:58:18","117","191105","<git><visual-studio-code><git-commit>","How can I fix git commit error ""Waiting for your editor to close the file..."" with VS Code?","<p>I'm trying just <code>git commit</code> and Git is giving this message:</p>

<blockquote>
  <p>hint: Waiting for your editor to close the file...
  /c/Users/AGT/AppData/Local/Programs/Microsoft VS Code/bin/code: line
  28: /Code.exe: No such file or directory error: There was a problem
  with the editor 'code --wait'. Please supply the message using either
  -m or -F option.</p>
</blockquote>

<p>I'm using, or trying it, VS Code as default and I got this same message with it opened or closed. Commits done through VS Code or by command <code>git commit -m ""Initial commit""</code> works fine.<br>
I tried change config path with:</p>

<ul>
<li><code>git config --global core.editor ""code --wait""</code></li>
<li><code>git config --global core.editor
""'C:\Users\AGT\AppData\Local\Programs\Microsoft VS Code\Code.exe' -n
-w""</code> and the followed variants(these with this change at error message ""unexpected EOF while looking for matching""):</li>
<li>C:\Users\AGT\AppData\Local\Programs\Microsoft VS Code\bin</li>
<li>C:\Users\AGT\AppData\Local\Programs\Microsoft VS Code\bin\code</li>
<li>C:\Users\AGT\AppData\Local\Programs\Microsoft VS Code\Code.exe</li>
</ul>

<p>No success at all.</p>

<p>The git status is:</p>

<pre><code>    On branch master

No commits yet

Changes to be committed:
  (use ""git rm --cached &lt;file&gt;..."" to unstage)

        new file:   css/app.css
        new file:   index.html
        new file:   js/app.js
</code></pre>

<p>How can I fix that to <code>git commit</code> command through Git BASH works fine with Vs Code? It's seems path issue. </p>

<p>Update info: I tested <code>git commit</code> with Sublime 3 and it works fine.</p>
","3","9604994","0","0"
"52201951","71376","2018-09-06 10:25:16","1","13","<git-commit><git-rebase><git-merge-conflict>","Is this content of a rebased commit different to that of the original commit?","<p>I am trying to understand why repetitive conflicts occur during rebasing. I begin with the concept that if a conflict is resolved and thus results in <em>new</em> commits being created, there should be no more conflicts from there on.</p>

<p>In the <a href=""https://git-scm.com/book/en/v2/Git-Internals-Git-Objects#_object_storage"" rel=""nofollow noreferrer"">Object Storage</a> section of the git documentation it explains that a commit object contains a header, the previous content of the file and the new content of the file, or <em>before</em> and <em>after</em> states.</p>

<p>If I <code>git rebase</code> and resolve a conflict during the rebase, does the new commit contain a different ""before"" state than the original commit?</p>

<p>I surmise that if the <em>new</em> commit contains the exact same <em>before</em> and <em>after</em> state content the commit and all it's future duplicates (created from further rebasing) will continue to cause conflicts. It stands to reason that <code>git rerere</code> would use that content as a fingerprint to match future conflicts with past conflicts and be able to auto-resolve them.</p>

<p>If, however, the <em>new</em> commits do not contain updated content in the <em>before</em> state there are two questions:</p>

<ol>
<li>Why does future rebasing cause repetitive conflicts, and</li>
<li>How does git know what to put in the <em>new before</em> state?</li>
</ol>
","0","71376","0","0"
"70160504","16996497","2021-11-29 19:47:48","0","107","<git><eclipse><git-branch><git-commit>","I made no change before switching but Eclipse asks me to commit","<p>I have several branches for one project.</p>
<p>Recently, I have a problem every time I switch from one branch to another:</p>
<p>I made NO change, but Eclipse prompts &quot;Checkout conflicts: You have uncommitted changes...&quot; and expects me to commit. In this case, the ONLY unstaged file is .gitignore, NO CODE involved. (See <strong>picture 1</strong>)</p>
<p>To proceed, I have to commit and a comment is required. The comment I usually write is &quot;No change.&quot; (See <strong>picture 2</strong>)</p>
<p>In fact, this kind of commit is meaningless because the version of the code has never been changed. The &quot;No change&quot; comment is also recorded in the version history and it's annoying. Since I encounter this problem from time to time, the &quot;No change&quot; comments just cluster my version history. (See <strong>picture 3</strong>)</p>
<p><strong>I want to get rid of this problem that Eclipse recognizes no change as change and forces me to make meaningless commit.</strong></p>
<p><strong>I didn't have this problem before, and things should go like what is shown this video: <a href=""https://www.youtube.com/watch?v=Xz0P8Qx0Uz0&amp;list=PLneu2P-az8RtH1HEFgu_Qm3zPFz1yN6bR&amp;index=5"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=Xz0P8Qx0Uz0&amp;list=PLneu2P-az8RtH1HEFgu_Qm3zPFz1yN6bR&amp;index=5</a></strong> <strong>When the guy switches from one branch to another for an identical project, he just makes it smoothly with no surprising pop-ups.</strong></p>
<p><strong>Picture 1</strong>
<a href=""https://i.stack.imgur.com/CAR03.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CAR03.png"" alt=""Picture 1"" /></a></p>
<p><strong>Picture 2</strong>
<a href=""https://i.stack.imgur.com/h4l7E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h4l7E.png"" alt=""enter image description here"" /></a></p>
<p><strong>Picture 3</strong>
<a href=""https://i.stack.imgur.com/fQYEO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fQYEO.png"" alt=""enter image description here"" /></a></p>
","5","16996497","",""
"70166904","15209389","2021-11-30 09:19:53","0","194","<bitbucket><git-commit>","Author Validation failed. Please make sure your git identity is correctly configured. Author and committer must match in firmwide Directory","<p>I am getting the issue mentioned in the title while I'm trying to push my files from my branch.</p>
<p>I have checked git config --list</p>
<p>User. Name and user. Email is correctly configured.</p>
<p>I have also tried</p>
<p>Git commit --amend --reset -author</p>
<p>This command also doesn't work.</p>
<p>Any suggestions?</p>
","3","15209389","",""
"70170027","17510413","2021-11-30 13:21:13","0","40","<git><github><git-branch><git-commit><git-push>","How do I make a new branch in git with no commits","<p>I have a local repo for a website I am helping make. I edited some element of the page and I wanted to push the change. The leader of the site project told me to make a new branch, e.g <em>enhancements/pagename</em>, commit the changes I made to this branch, and push the commits.</p>
<p>However, when I push this, it is also pushing earlier commits from the <em>master</em> branch. How do I get git to only push the one commit I have made on the branch?</p>
<p>I am using <em>git checkout -b branchname</em> to create the branch.</p>
","3","17510413","",""
"38701330","575643","2016-08-01 14:24:39","0","78","<git><git-submodules><githooks><git-commit>","Prevent to Git Hook `post-commit` execute for submodules","<p>Can I somehow prevent that the <code>post-commit</code> hook being called when I commit something in the submodule? I'm using this hook to automatically commit the submodule changes with the main project commit message and I'm getting in a ""infinity loop"".</p>

<p>File: <code>post-commit</code></p>

<pre><code>#!/bin/sh
if git diff-index --quiet HEAD --; then
    echo no submodule changes
else
    git submodule foreach git add . ;
    git submodule foreach git commit -am ""`cat .git/COMMIT_EDITMSG`""
fi
</code></pre>

<p>Thanks.</p>
","1","575643","",""
"71557837","14982946","2022-03-21 12:44:36","-1","86","<git><git-commit>","How can I remove a commit name instead of deleting it in local machine","<p>I have committed a piece of code as <code>commit1</code> but after finishing it, I want to remove the <code>commit1</code> and commit the entire code as <code>Initial Commit</code>.</p>
<p>When I run <code>git reset HEAD~</code> in Git Bash, it results in deleting all my code.</p>
<p>Is it possible to delete <code>commit1</code> instead of everything, and how?</p>
","0","14982946","",""
"71562586","1186050","2022-03-21 18:41:06","0","80","<git><github><git-commit><git-push><git-revert>","Will git revert on my last commit that failed to push show me my modified files back in source control explorer?","<p><strong>QUESTION</strong> - If I perform a git revert on the last commit '28ea268...', will it show me my modified files again in Source Control Explorer in VS Code?</p>
<p><strong>FYI</strong> - My last commit ('28ea268...') failed to push the files (see below) because of a large +100MB file that was added after I upgraded to Angular 13 from 12. I don't see any new files or changes in Github.com when I check. It committed according to git log, but nothing was pushed to my repo after failing to do so, according to the git output(see below)</p>
<p>Git log:</p>
<pre><code>commit 28ea268d8e0a51e93f74e36e789aa0a3d2e1704a (HEAD -&gt; master)
Author: chuck &lt;chuck@gmail.com&gt;
Date:   Sun Mar 20 22:23:32 2022 -0700

    mods from new MBPro14

commit f480f417d4c126067c95c0778cb2132fa0dfced6 (origin/master, origin/HEAD)
Author: chuck &lt;chuck@gmail.com&gt;
Date:   Fri Mar 18 19:42:40 2022 -0700

    mods
</code></pre>
<p>Git output</p>
<blockquote>
<p>[2022-03-21T06:14:33.091Z] &gt; git push origin master [29424ms]
[2022-03-21T06:14:33.091Z] remote: error: Trace: 47b6ad853b68f1ff7b533b5b9e1e44880272a4bcbf979e9f8afb162aa47ef3a9<br />
remote: error: See <a href=""http://git.io/iEPt8g"" rel=""nofollow noreferrer"">http://git.io/iEPt8g</a> for more information.<br />
remote: error: File client/.angular/cache/13.3.0/angular-webpack/5ebe13da59e6342699441237cc06e261c0793966/35.pack is 113.88 MB; this exceeds GitHub's file size limit of 100.00 MB<br />
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>.</p>
</blockquote>
<p>Source control explorer in VS Code (empty):</p>
<p><a href=""https://i.stack.imgur.com/rS2AT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rS2AT.png"" alt=""enter image description here"" /></a></p>
","1","1186050","",""
"71563851","1186050","2022-03-21 20:40:51","1","926","<git><visual-studio-code><git-commit><source-control-explorer><unstage>","After a git reset --soft HEAD^ was performed, how do I remove files not needed by my repo?","<p>I had to run</p>
<blockquote>
<p>git reset --soft HEAD^</p>
</blockquote>
<p>to undo a commit with large files (<a href=""https://stackoverflow.com/questions/70088051/after-upgrading-from-angular-12-to-13-cache-is-too-large-for-github"">same issue</a>).
Now I can see my files again in VS Code Source Control Explorer(see below)</p>
<p><strong>Problem</strong> - I want to remove these files from being added to my repo when committing and then pushing, so I added</p>
<blockquote>
<p>/.angular/cache</p>
</blockquote>
<p>to my .gitignore file, but that didn't remove the files from the Source Control window.</p>
<p><strong>Question</strong> - Do I need to do something else to remove these files from Source Control? ex. unstage each file individually</p>
<p>Source Control in VS Code:</p>
<p><a href=""https://i.stack.imgur.com/BfmVq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BfmVq.png"" alt=""enter image description here"" /></a></p>
","4","1186050","0","0"
"57670526","5308397","2019-08-27 08:24:36","1","503","<bash><github><git-commit><git-log><github-enterprise>","How to get first commit message when multiple commits are pushed together","<p>I am trying to write a pre-receive hook script to link git commits with jira id. I want to verify if the first commit, which will become heading of my pull request follows the specified regex for commit message. 
Can you please help me to get the commit message of 1st commit in series of commits in a pull request</p>

<p>I am following below steps in my branch: </p>

<pre><code>git add file1
git commit -m 'JIRA-123 Adding file1'
git add file2
git commit -m 'Adding file2'
git push origin master
</code></pre>

<p>Now I am able to get last commit message specific to a push using below command</p>

<pre><code>git log --max-count=1 --format=%B
</code></pre>

<blockquote>
  <p>Output:  Adding file2</p>
</blockquote>

<p>but I want the output to be first commit message-</p>

<blockquote>
  <p>JIRA-123 Adding file1</p>
</blockquote>

<p>Can you please let me know if there's a way to get the desired result using <code>git log</code> or <code>git reflog</code></p>

<p>Thanks in advance!</p>
","0","5308397","",""
"53579961","2587904","2018-12-02 11:55:04","1","39","<git><git-commit><case-sensitive><mv><git-config>","git move folder only by case sensitive name change","<p>I have a folder in git (on FS) called</p>

<pre><code>fooBar
</code></pre>

<p>however, in git it is registered twice:</p>

<p><code>foobar</code> and <code>fooBar</code></p>

<p>so a <a href=""https://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git"">How do I commit case-sensitive only filename changes in Git?</a></p>

<pre><code>git mv -f foobar fooBar
</code></pre>

<p>fails with:</p>

<pre><code>fatal: Umbenennung von 'foobar' fehlgeschlagen: Invalid argument
</code></pre>

<p>How can I synchronise it again i.e. only have a single  reference to the FS object with name <code>fooBar</code>?</p>
","2","2587904","",""
"492558","12037","2009-01-29 17:18:14","1384","548377","<git><git-commit><git-add><git-rm>","Removing multiple files from a Git repo that have already been deleted from disk","<p>I have a Git repo that I have deleted four files from using <code>rm</code> (<strong>not</strong> <code>git rm</code>), and my Git status looks like this:</p>

<pre><code>#    deleted:    file1.txt
#    deleted:    file2.txt
#    deleted:    file3.txt
#    deleted:    file4.txt
</code></pre>

<p>How do I remove these files from Git without having to manually go through and add each file like this:</p>

<pre><code>git rm file1 file2 file3 file4
</code></pre>

<p>Ideally, I'm looking for something that works in the same way that <code>git add .</code> does, if that's possible.</p>
","6","12037","0","0"
"38891617","741961","2016-08-11 08:52:13","11","3928","<git><git-commit><commit-message>","Why are the suggested line lengths for git commits 50 for summaries and 72 for the body?","<p>There is some variation in the exact numbers but in general there are recommended lengths or maximum lengths for the first and subsequent line lengths of commit messages.  The common one seems to be at most 72 characters for a message body with a further suggested limit of 50.  </p>

<p>What are the reasons for these or other commonly encountered git commit line limits?  </p>

<p>I have heard that the 72 character limit is related to the recommended email width limit of 76 as defined in RFC 2045: </p>

<blockquote>
  <p>(5)   (Soft Line Breaks) The Quoted-Printable encoding
            REQUIRES that encoded lines be no more than 76
            characters long.</p>
</blockquote>

<p>There is something about a git function adding 4 characters to the commit message when generating an email, which would require the commit line to be shorter than the email limit.  In turn I am aware that the email character limit is related to the ~80 character limit of old terminal systems.  </p>

<p>If that does explain the 72 character limit, where does the 50 character one come from?  <code>Subject:</code> is only 9 characters so adding that before 50 would only give 59.  Maybe we then add the commonly used 7 character abbreviated commit hash ID and a space which gives us 67, still 5 spare characters to go.  </p>
","2","741961","",""
"38892599","647991","2016-08-11 09:37:07","11","6110","<git><git-commit><git-rewrite-history><git-amend>","Change commit message for specific commit","<p>Note: similar question as <a href=""https://stackoverflow.com/q/179123/647991"">this one</a>, but with some important changes.</p>

<p>I have the following function to rewrite the date of a commit, given the commit id:</p>

<pre><code>rewrite-commit-date () {
    local commit=""$1""
    local newdate=""$2""
    newdate=""$(date -R --date ""$newdate"")""
    echo ""&gt;&gt;&gt;&gt; Rewriting commit $commit date: $newdate""
    git filter-branch --env-filter \
        ""if test \$GIT_COMMIT = '$commit'
         then
             export GIT_AUTHOR_DATE
             export GIT_COMMITTER_DATE
             GIT_AUTHOR_DATE='$newdate'
             GIT_COMMITTER_DATE='$newdate'
         fi"" &amp;&amp;
    rm -fr ""$(git rev-parse --git-dir)/refs/original/""
}
</code></pre>

<p>I am trying to implement a similar function <code>rewrite-commit-message</code> to change the commit message. What I want is:</p>

<ol>
<li>The function <code>rewrite-commit-message</code> accepts two parameters: the <code>commit_id</code>, and the <code>new_commit_message</code></li>
<li>There is no need to know the old commit message: having the <code>commit_id</code> is enough to know which commit to change</li>
<li>No <code>git commit --amend</code>, since this is related to old commits (not necessarily to the most recent commit)</li>
<li>No worries about rewriting history and the master repo: I am working in a feature branch, and I am allowed to do <code>git push -f</code></li>
<li>I would like to use <a href=""https://git-scm.com/docs/git-filter-branch"" rel=""nofollow noreferrer""><code>filter-branch</code></a> for this, but I am not sure how to:

<ul>
<li>apply the change to a specific commit: the <code>test</code> used in the <code>rewrite-commit-date</code> function is used in <code>env-filter</code>, but I am not going to do <code>env-filter</code> here, since I do not want to change anything related to the commit environment, but the commit message. </li>
<li>how to force a commit message? The <code>--msg-filter</code> needs the original commit message. I do not care about the original commit message. Is there a <code>--force-msg-filter</code> or similar?</li>
</ul></li>
</ol>

<p>What I am looking for is similar to <a href=""https://stackoverflow.com/a/12231177/647991"">this</a>, but with some caveats:</p>

<ol>
<li>Do not apply the change to a range of commits, but to a specific commit</li>
<li>I do not care about the original commit message, since I want to completely overwrite it</li>
</ol>
","0","647991","0","0"
"57784051","10607085","2019-09-04 08:05:57","0","136","<eclipse><git><sftp><git-commit><git-push>","Eclipse Git: use SFTP on push to master","<ul>
<li>I am using <strong>Eclispe IDE</strong> ;</li>
<li>We are using <strong>Git (Bonobo Git)</strong> on Windows server ;</li>
<li>The global render of our project is on a distant <strong>DEV server.</strong></li>
</ul>
<p><strong>Every push to master branch on the git server</strong>, we would like to <strong>upload the updated files through <code>SFTP</code> on the DEV server.</strong></p>
<p>How can I setup an SFTP on local and upload only when I push to the master branch?</p>
<p>Should we do it this way:</p>
<blockquote>
<p>Local → [COMMIT &amp; PUSH] → GIT server → <strong>[SFTP]</strong> → DEV server.</p>
</blockquote>
<p>Or this way:</p>
<blockquote>
<p>Local → [COMMIT &amp; PUSH] → GIT server.</p>
<p><strong>If push</strong>:</p>
<p>Local →           <strong>[SFTP]</strong>          → DEV server.</p>
</blockquote>
","0","10607085","0","0"
"57828252","10968845","2019-09-06 20:32:43","0","439","<git><rebase><git-commit>","Push changes in current branch into other branch","<p>I am working on <code>dev</code> branch right now. Earlier, I created a <code>featureX</code> branch from <code>dev</code> branch and since then I've made 15 commits to <code>dev</code> branch. Now I want all those 15 commits in <code>featureX</code> branch, so that my <code>featureX</code> branch can also have all the work I have done in last week in <code>dev</code> branch.</p>

<p>I am super confused with <code>rebase</code>, <code>rebase --onto</code>, etc. commands. Should I be using one of these?</p>
","2","10968845","",""
"57827585","244930","2019-09-06 19:28:43","1","635","<git><visual-studio><git-commit>","Visual Studio Community Run command after git commit","<p>every time I do a git commit I want to catch the repo log to a file, I want to publish the commit log to my website (internal page). </p>

<p>The git command is </p>

<pre><code>git log --since='01-01-2019' &gt; ""$(ProjectDir)\Content\CurrentCommit.txt""
</code></pre>

<p>Because I don't know how to execute it after commit what I'm doing is to execute it at after build but I don't like it because it takes time and delays the program execution (and it isn't necessary to do it every time)</p>

<p><a href=""https://i.stack.imgur.com/CsmpB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CsmpB.png"" alt=""enter image description here""></a></p>

<p>Any Idea?</p>
","0","244930","0","0"
"50224066","9012068","2018-05-08 00:13:21","0","82","<git><git-branch><git-commit>","How to recover a commit in git","<p>I worked on something all day in a personal project, and committed it to a branch. I then realized I was going to commit to master and created a new branch to push to, and git switched to that branch. Afterwards I switched back but couldn't find my commit. Is there any way to recover the commit from before I created the branch? It reverted a lot of my work.</p>
","1","9012068","0","0"
"32074850","4025940","2015-08-18 14:11:23","15","83397","<git><git-commit>","How to add multiple files in git for a single commit?","<p>I made changes to two files in different directory, How can I add the two files for a single commit. can I do like, add the first, then change the directory to second file and add the second file finally do the commit. Is this going to work? </p>
","3","4025940","0","0"
"15045857","1475220","2013-02-23 21:20:41","2","182","<git><gitignore><git-commit>","Cancelling git push and ignore additional folder","<p>I want to cancel the git push.
I've done it with <code>cntrl + C</code>   command.  I reset --mixed to my old status.
Add the forgetten directory to my gitignore file,
But when I do the <code>git push</code> again , it still tries to send the ignored folder.
Any ideas? </p>
","5","1475220","0","0"
"15050767","1889554","2013-02-24 10:21:14","2","61","<logic><branch><directory><git-commit>","git logic missing","<p>The thing is that on a time period of 4 weeks I've developed a project on two different locations. At this point I have two different directories on my HDD, each of them containing the .git folder with all the commits.</p>

<p>On <code>folderOne</code> I have something like that:<br>
<code>A - B - C - D - E - F - G</code><br>
On <code>folderTwo</code> I have the following commits:<br>
<code>A - B - X - Y - Z</code></p>

<p>What I need is the following:<br>
<code>A - B - X - Y - Z - C - D - E - F - G</code> </p>

<p>At this point I know that I have to move the head from forlderOne to stage B  </p>

<pre><code>git br gStage                # save the G stage into a branch  
git reset --hard HEAD~5      # move master on stage B
</code></pre>

<p>Now, my intention is to <code>copy/paste</code> the content from the <code>folderTwo</code> into the <code>folderOne</code> but I know this is not the right way.</p>

<p>Can you tell me how can I get the <code>A - B - X .. - C .. G</code>.</p>

<p>also please feel free to critique my logic. </p>
","0","1889554","0","0"
"68785493","","2021-08-14 17:16:14","0","912","<git><version-control><git-commit>","Why is it necessary to enter commit messages?","<p>I have been using git for a while now, and I had a question. Why is it necessary to add commit messages when using <code>git commit</code>? I mean, I admit that it is quite useful for me in some cases when I actually want to explain what a specific change does to the project.</p>
<p>But why is it still made <strong>necessary</strong> to write a commit message? I mean what if I am committing a minor change like fixing a spelling mistake in my UI? Is it a good thing that this is made necessary? or would it be better/worst if this was optional?</p>
","2","","0","0"
"15071837","2065529","2013-02-25 16:40:16","-1","261","<github><git-commit>","github raw drawable folders","<p>How can I ignore exclude <code>raw</code> and <code>drawable</code> folders from github commits?</p>
","0","2065529","",""
"68792991","12226311","2021-08-15 15:35:26","0","154","<git><git-commit><git-reset>","Delete initial git commit of main branch","<p>How can I delete all the commits <strong>including initial commit</strong> from the main branch of my git project?</p>
<p>I know we can do it by deleting .git directory and reinitializing the git project. However, I will miss all the commit history. So is there a way to do it using git commands?</p>
","4","12226311","",""
"32095008","5243058","2015-08-19 12:03:52","1","2160","<git><github><debian><git-commit>","Git commits linked to wrong user on Github, correct in git log output","<p>I have been using git for some months now. I am working primarily on my own, working on a <a href=""http://github.com/pocketapocketa/Radical_Transparency"" rel=""nofollow"">repository</a> primarily of .html and .txt files with a little (terrible) python. My coding skills are average at best, and I have been using linux &amp; the unix command line for 2 years at a fairly basic level.</p>

<p>While I was visiting my parents in the UK, I installed git on their Mac Mini to continue working on my repository. I then set up a second repo for a different purpose and used git config in that repo to set up local values for user.email user.name etc. I set up a second github account using a different email address and pushed to it once.</p>

<p>Since then, every time I push from my 1st git repository on my own computer, the commits are listed as being by the second user set up on the mac, though I never pushed there from my own computers. The output of git log on my local repo has the author as what it ought to be ""Author: pocketapocketa "", but github has it as ""Christopher-Rozruch"". (In fact, looking over the commit history, the ""Christopher-Rozruch"" commits pre-date my use of the Mac Mini and the setting up of the Christopher-Rozruch identity in any form by a week or so.)</p>

<p>I have searched for this problem but only found issues involving changed config files, multiple accounts on the same computer etc. <a href=""https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/"" rel=""nofollow"">Github's own help on the topic</a> discusses conflicts involving the same e-mail address associated with different accounts, which is not the case here.</p>

<p>I have found a script to retrospectively change the git history if I decide to do this (nobody else is working on the project), but I would like to understand why this has happened.</p>

<p>I have pushed to the primary repo in question from 2 computers in this time: one running on a MacBook, and one on Debian 8. The git version on Debian from which I have most recently pushed is 2.1.4. The others should be similar. The problem has been the same on each.</p>

<p>Can anyone help?</p>
","0","5243058","",""
"15118146","737239","2013-02-27 17:15:32","8","8913","<git><git-branch><git-commit>","How to commit and push changes using Git","<p>I just want to clarify how committing on specific branches works.</p>

<p>Let's say I am working on a branch called ""Metro"". I make some changes to a few files, but I am not ready to push these up to the remote repository. </p>

<p>A hotfix comes in that I need to fix asap. I need to switch over to a clean branch called ""Master"", but I cannot because I would overwrite the files I have changed. I need to commit these before I can switch.</p>

<p>My question is, if I commit these changes on the ""Metro"" branch, then switch to the clean ""Master"" branch, will the changes made in ""Metro"" get pushed to the remote ""Master"" repo because I have committed them, even though I am pushing to another branch?</p>

<p>To make it succinct, are commits isolated to branches, or do all commits get added when pushing to the remote repo?</p>
","0","737239","",""
"15120526","2065529","2013-02-27 19:21:16","6","1577","<github><git-commit><git-checkout>","git checkout commit and delete newer commits","<p>I have made bad commits in the github and i want to do the following things:<br/></p>

<ol>
<li>checkout to an old commit from a different branch than master</li>
<li>make this commit my last commit(delete those after this)</li>
<li>make this branch as master branch and delete all the others branches</li>
<li>merge master branch to a new one</li>
</ol>

<p>Is it possible to do this?  </p>
","1","2065529","0","0"
"68814807","8335629","2021-08-17 09:22:22","0","915","<git><branch><git-submodules><git-commit>","How to make the parent repo branch point to submodule repo branch","<p>Parent repo - a separate branch
submodule repo - a separate branch</p>
<p>In Bitbucket Every time I push a commit to the submodule I need to update the parent repo to the latest commit in the submodule.</p>
<p>This is because when I used the submodule, my parent branch is pointing to a commit, now my question is can we point the parent branch to a submodule branch rather than to a commit.</p>
<p>currently, my .gitmodule file in my parent repo looks like following</p>
<pre><code>[submodule “arch/modules”]
    path = arch/modules
    url = https://bitbucket.xxx.xxxx/scm/archdev/modules.git
    branch = arch/module-test
</code></pre>
<p>even when I pointed that to a branch , why it is still referring to a commit ?? Is there a way to make the parent repo branch point to a submodule repo branch.</p>
<p>Can someone address this please</p>
<p>Thanks in advance</p>
","7","8335629","",""
"69222372","16925285","2021-09-17 11:05:04","1","5818","<git><github><git-commit>","How to go to specific commit in git","<p>I have commited in git and i want to go to the second commit.I have used</p>
<pre><code>git checkout &lt;commit id&gt;

</code></pre>
<pre><code>commit 3f54a651504adc885a71db275e0fb4a5a1111cf4 (HEAD -&gt; dev_coder, origin/dev_coder)
Author: Coder &lt;coder@me.com&gt;
Date:   Sun Jun 27 20:23:48 2021 +0530

   button 

commit 362d11072139bda8569dcf37012174258e8078c3
Author: Coder &lt;coder@me.com&gt;
Date:   Fri Jun 25 14:30:01 2021 +0530

    updated owner

commit 0db31695b550748c27486248974ee6f57c88458
Author: Coder &lt;coder@me.com&gt;
Date:   Wed Jun 16 21:25:28 2021 +0530

    Added  field

commit 2c72f1ef0bd6a6e7da785212a05efa08a308f1fa
Author: Coder &lt;coder@me.com&gt;
Date:   Fri Jun 11 10:36:01 2021 +0530

</code></pre>
<p>I am in a branch call dev_coder and not in the main branch.I want to go to the 362d11072139bda8569dcf37012174258e8078c3 commit.When i used the bellow one it chages the branch and show somethign else.</p>
<pre><code>git chekout 362d11072139bda8569dcf37012174258e8078c3

</code></pre>
","3","16925285","",""
"32676281","2535542","2015-09-20 05:57:18","14","24659","<git><git-commit><git-config>","Bypass ""Tell me who you are"" error in git","<p>Upon attempting to commit a repository, I get the error:</p>

<pre><code>$ git commit

*** Please tell me who you are.

Run

git config --global user.email ""you@example.com""

git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got '[output redacted]')
</code></pre>

<p>The obvious solution would be to run the <code>git config</code> options in the output, however I do not want to do that.</p>

<p>The computer in question doesn't belong to a specific person but is a shared computer. Therefore, each commit would be a different user.</p>

<p>How do I bypass this and set author to be per commit and not a global?</p>
","4","2535542","0","0"
"32682641","931742","2015-09-20 18:09:10","0","109","<git><git-submodules><git-commit>","Tracking submodules as main files","<p>Hey guys I have a main repo with submodules and I intend on working on most of the files as a new branch. While the main repo doesn't need to be pushed to the remote master my sub modules would probably need to be. Giving that I am working on the files as new branches( both in main and submodule) I ask the following:-</p>

<ol>
<li>Should I be tracking the submodules files via the main repo?</li>
<li>Do the changes in the submodules get reflected immediately in the main repo regardless of committing or not?</li>
<li>Is it ok to track specific files from submodules in the main repo?</li>
<li>If I make changes in the submodule I have to do two commits one in the submodule and one on the main repo can I either automate this process or can I make one commit from the main repo?</li>
</ol>
","0","931742","0","0"
"32687639","5241316","2015-09-21 04:55:43","0","1159","<android><git><github><git-commit>","Android studio pushing commit failing","<p>Earlier I was attempting to remove a commit from my commit history, and went through some stackoverflow threads doing stuff like rebasing etc.<br>
Now here I am attempting to push a new commit, but I get this error which I feel is because of what I did earlier. </p>

<pre><code>Error rebasing
fatal: update_ref failed for ref 'refs/heads/master': cannot lock ref 'refs/heads/master': ref refs/heads/master is at 9529c90e148e9b2620db0f366587312e75d507b6 but expected 808b9dfbc4141d16a29fadb4bd8171c6fe8f4914  
</code></pre>
","1","5241316","",""
"17222260","1190419","2013-06-20 19:31:57","2","227","<git><object><git-commit>","Large object shows up in git pack after deletion","<p>I'm sure I've deleted this file, but it still shows up in verify-pack. What gives?</p>

<blockquote>
  <p>$ git verify-pack -v 
  .git/objects/pack/pack-5722438014fe04ec9d559810bd7840afb6006858.idx | sort -k 3 -n | tail -3 </p>
  
  <p>bfafbf4c4cd9a5ddbcb637a09c183c6dabe7acde blob   18960384 1061775 
  9232588 ec890d28afb338b258727f124e0bfbc11f6c0f0d blob   23079936 
  2279611 1640818 5daf9ca1b4988c240cb9ac9a2d026e5028e9fd8e blob   79966293 3803212 4919563</p>
  
  <p>$ git rev-list --objects --all | grep 5daf9ca1<br>
  5daf9ca1b4988c240cb9ac9a2d026e5028e9fd8e DriverLib/json_spirit/Debug/json_spirit_reader.obj</p>
  
  <p>$ git log --pretty=oneline --branches --
  DriverLib/json_spirit/Debut/json_spirit_reader.obj</p>
</blockquote>

<p>When I run git log to find out which commit the object is in, there isn't anything that shows up. What gives?</p>
","0","1190419","",""
"17249780","1232232","2013-06-22 10:37:05","2","1870","<github><stack-trace><crash-dumps><git-commit><github-for-windows>","Github, Github for Windows, on every commit generates us.stackdump","<p>Since I started using Github for managing my projects I receive dump file on every commit.</p>

<p>I am using</p>

<pre><code> a) GitHub (private repositories for my personal projects)
 b) GitHub for windows GitHub client
</code></pre>

<p>When I sync my commits after finish (or may be during commit) it generates ""<strong>us.stackdump</strong>"" file.</p>

<p>This is the file contents: </p>

<pre><code>@@ -0,0 +1,18 @@
+MSYS-1.0.12 Build:2011-07-20 17:52
+Exception: STATUS_ACCESS_VIOLATION at eip=68085E34
+eax=68560000 ebx=000073CC ecx=00001CF3 edx=00000000 esi=00000000 edi=68560000
+ebp=0028FE48 esp=0028FE3C program=us
+cs=0023 ds=002B es=002B fs=0053 gs=002B ss=002B
+Stack trace:
+Frame     Function  Args
+0028FE48  68085E34  (68560000, 00000000, 000073CC, 00000004)
+0028FE98  68001CB0  (00442D24, 00000001, 0028FEE8, 680044EA)
+0028FEE8  680045C7  (00000000, 00000000, 0028FF28, 0040C1AC)
+0028FF08  68004C5F  (00401A40, 00000000, 00000000, 00000000)
+0028FF28  68004C98  (00000000, 00000000, 00000000, 00000000)
+0028FF58  0040C0BC  (00401A40, 00000000, 00000000, 00000000)
+0028FF88  0040103D  (7EFDE000, 0028FFD4, 77C69EF2, 7EFDE000)
+0028FF94  76AC33AA  (7EFDE000, 772F991B, 00000000, 00000000)
+0028FFD4  77C69EF2  (00401000, 7EFDE000, 00000000, 00000000)
+0028FFEC  77C69EC5  (00401000, 7EFDE000, 00000000, 78746341)
+End of stack trace
</code></pre>
","0","1232232","0","0"
"50667772","5466976","2018-06-03 15:01:02","1","4598","<git><atlassian-sourcetree><git-commit><git-revert>","Rename commit mesage / Undo commit in sourcetree and remove from graph","<p>I would like to know how to undo a git commit or rename a commit message in sourcetree.
I have committed my changes with a wrong commit message. I would like to undo that commit and also remove the same from the graph.
I have tried reverse commit option but it shows another commit in the graph.</p>
","1","5466976","",""
"32727827","5365323","2015-09-22 22:13:17","0","7704","<java><eclipse><git><github><git-commit>","How can I commit only a single .java file to git from an eclipse project?","<p>I want to commit only a .java file to an already existing repository. I am using github for a class, and we are each given access to a private repo containing project information. I am supposed to add only a .java file to this repo, but I can't figure out how to do this. I have come close: I committed only the .java file, but it is inside a directory with the same name as my eclipse project.</p>

<p>Is there a way to commit only the .java file, without any of the project information, while keeping the project usable?</p>

<p>Thanks.</p>

<p>edit:
My goal is to have <code>\git\repoName\MyFileName.java</code>
as well as keeping the files already in <code>\repoName\</code> and keeping the <code>MyFileName.java</code> in a usable eclipse project.</p>
","0","5365323","0","0"
"50672366","1433268","2018-06-04 01:12:41","4","1976","<git><git-commit>","Git: How do I checkout a commit and merge it back into my branch?","<p>I've made a series of commits in my branch. However, the last 3 or so were mistakes - I want to 'revert' my branch to a previous commit.</p>

<p>Googling the issue I understand I must use <code>git log</code> to get the ID of the commit I want to return to, then <code>git checkout &lt;id&gt;</code>. But I cannot find information beyond that.</p>

<p>It seems when I checkout  I am no longer within my original branch. How do I merge  back into my original branch, thus undoing the changes in the previous erroneous commits?</p>
","4","1433268","0","0"
"50672443","1433268","2018-06-04 01:28:49","0","134","<git><git-commit>","Git how do I get git reset --hard to work?","<p>I've made several commits to a branch, but want to revert back to specific commit.</p>

<p>I use <code>git log</code> to find the commit id, then I use <code>git reset --hard &lt;commit id&gt;</code> but nothing happens. Then, when I try to push up to Github I get a <code>non-fast-forward</code> message.</p>

<p>Would anyone know what I should be doing?</p>
","6","1433268","",""
"32751425","4119095","2015-09-24 00:14:13","7","1438","<git><version-control><git-commit>","Is it safe to force push personal branch in git?","<p>Suppose I work on a personal branch called <code>feature</code>.</p>

<ol>
<li>I make 5 commits.</li>
<li>I rebase on top of master.</li>
<li>I push my branch to a remote.</li>
<li>I <code>git reset --hard</code> back to commit 3.</li>
<li>I merge from master.</li>
<li>I push to the remote (I have to use <code>-f</code>).</li>
</ol>

<p>Is that safe to do or that will cause any issues with master? I will need to merge <code>feature</code> into <code>master</code> eventually.</p>
","4","4119095","0","0"
"17317945","740739","2013-06-26 10:45:21","1","534","<git><gitignore><git-push><git-commit><git-filter-branch>","Tried to remove files from git, now branches are diverged and I can't push the changes","<p>This is the first time for me using git (on bitbucket.org - if that makes any difference) and I committed a few audio files to the repo which I obviously don't want there. I added then added the paths to the .gitignore to find out that this will only ignore further changes.
So I stumbled upon <a href=""https://stackoverflow.com/questions/872565/remove-sensitive-files-and-their-commits-from-git-history"">this SO question</a> and tried to use <a href=""http://dound.com/2009/04/git-forever-remove-files-or-folders-from-history/"" rel=""nofollow noreferrer"">David Underhill's script</a> that's mentioned there.</p>

<p>However, now I'm getting the following message for <code>git commit</code>:</p>

<pre><code># On branch master
# Your branch and 'origin/master' have diverged,
# and have 10 and 10 different commits each, respectively.
#
nothing to commit (working directory clean)
</code></pre>

<p>and for <code>git push</code></p>

<pre><code> ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://bitbucket.org/abc/def'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>So I tried a <code>git push --force</code> which succeeded but didn't actually change anything in the repo and doesn't even show up there.</p>

<p>Do you know how I could fix this?</p>
","1","740739","",""
"17319517","2373881","2013-06-26 12:04:55","6","22122","<git><branch><git-commit><git-checkout>","how to list all uncommitted changes made only in current branch in git","<p>I am a newbie to git initially i used to work only on master branch then i read a little about git branching and i was amazed by it power so i started using branches in my workflow </p>

<p>when i started with branching my master branch was clean nothing to commit.
Then I created new branch <strong>feature1</strong></p>

<pre><code>git checkout -b feature1
</code></pre>

<p>i made my changes in branch <strong>feature1</strong> added some js and css files . Then i created another branch from master branch without committing changes made to branch <strong>feature1</strong> like so :</p>

<pre><code>git checkout master
git checkout -b feature2
</code></pre>

<p>i added some more code in <strong>feature2</strong> branch and added some new css files and then again i created another branch <strong>feature3</strong> from master with committing changes in branch <strong>feature2</strong> like this :</p>

<pre><code>git checkout master
git checkout -b feature 3
</code></pre>

<p>I added some new code in <strong>feature3</strong> branch with 1 new css file . now when i did :</p>

<pre><code>git status
</code></pre>

<p>I got list of all files which i modified but not committed in all the 3 branches . I was expecting that i will get only list of file modified in current branch i.e branch <strong>feature3</strong> , now i don't remember which files I created in which branch . </p>

<p>Can anyone please help me to list only files i created or modified in particular branch and commit them. to respective branches .</p>

<p>For e.g</p>

<p>list all files modified or created in <strong>feature1</strong> branch and commit them to <strong>feature1</strong> branch and do this with all 3 branches.</p>

<p>I also want to know how i can create a branch from master branch without getting other files which are modified in other branch but not committed . i.e i want the new branch to be exact clone of master with noting to commit.</p>
","0","2373881","",""
"18569931","1083704","2013-09-02 09:34:49","26","20069","<git><git-commit>","Move files between commits","<p>I have two consequential commits, somewhere in the local history, and one file was mistakenly added into the second. I want to fix the situation. </p>

<p>I do not understand how should I use the interactive rebase. I did <code>git rebase -i HEAD~10</code> and choosen to edit the commit with file in order to check it out from there. I use git guit but, see no files in the commit area. I can choose to amend the previous commit then I see the files. But, I cannot add the misplaced file to that previous commit since I do not see the file in the current commit to start with.</p>
","2","1083704","0","0"
"18588974","2734389","2013-09-03 09:42:23","62","106125","<git><git-push><git-commit><git-amend>","Git prevents pushing after amending a commit","<p>Usually, I just run </p>

<pre><code>git add file
git commit
git push
</code></pre>

<p>but if I amend the commit <strong>before</strong> pushing it (with <code>git commit --amend</code>), the next push fails with </p>

<pre><code>hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>How can I let git push the changes without merging branches? I only have one branch (<code>master</code>) and I'm the only person using this repo so why is it saying this?</p>

<p>git branch -a:</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>EDIT: Using <code>gitk HEAD @{u}</code>, I see that I have 2 branches, one with the original commit and another with the amended commit.</p>
","8","2734389","0","0"
"33953810","1433368","2015-11-27 09:09:19","1","74","<git><merge><git-branch><git-commit>","Git getting all commits of a previously merged branch","<p>I have a branch in my project that is continuously being merged back to master, and re-branched later when development on the respective part is needed again.</p>

<p>What I wish to do is to log all the commits in that branch (From it's initial inception). Sadly, my attempts would only should the last commits after the branch has been reopened (and not yet closed)</p>

<p>illustration:</p>

<pre><code>Master:   A ------- D---&gt; E ---&gt; F ------- I
           \       /              \       
MyBranch:   B --&gt; C                G --&gt; H
</code></pre>

<p>I want to list out B, C, G, H. But all my attempts return G, H only</p>

<p>I tried: </p>

<pre><code>1. git rev-list ^master MyBranch
2. git log --no-merges master..
</code></pre>

<p>Also comparing with origin/MyBranch does not help. </p>

<p>Is there a way to do this? without having to know the commit's Hash where the branch was previously merged into master?</p>

<p>Thanks!</p>

<p>EDIT: Fixed the tree structure</p>
","0","1433368","",""
"33958731","5612448","2015-11-27 13:44:26","1","38","<git><git-merge><git-commit>","How can I commit only solved files during merging in git?","<p>In git I made a cherry-pick and I have to merge files now, but there is lots of them, so I want to commit only files, which conflicts are already solved without ""full merge"". How can I do that? Of course without commiting unsolved files.</p>
","0","5612448","",""
"33966275","901444","2015-11-28 00:08:20","2","499","<google-bigquery><git-commit><github-archive>","How to search github projects ordered by number of commits?","<p>I was thinking of trying out BigQuery and GithubArchive, but I'm not sure how to compose a query that would let me search for a term in code or project and order the results by number of commits descending.</p>

<p>Thanks for any tips</p>
","0","901444","0","0"
"33967908","4246306","2015-11-28 05:07:31","4","5672","<git><github><git-commit>","Git commit - error: cannot spawn gitpad: No such file or directory","<p>I am learning github via Lynda.com and I was on the chapter of using the git commit command. However, when I use it, I get the error.</p>

<blockquote>
  <p>error: cannot spawn gitpad: No such file or directory <br>
  error: unable to start editor 'gitpad' <br>
  Please supply the message using either -m or -F option.</p>
</blockquote>

<p>I tried searching for solutions here, but all of them were beyond my knowledge. Please help me out on this. Thank you very much.</p>

<p><a href=""https://i.stack.imgur.com/7ovKP.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7ovKP.jpg"" alt=""enter image description here""></a></p>
","0","4246306","",""
"33976245","541686","2015-11-28 20:41:55","4","196","<git><commit><git-commit>","How to suppress ""Changes not staged for commit""?","<p>How do I suppress the ""Changes not staged for commit"" output when committing? Note that:</p>

<ul>
<li>I know I can do <code>&gt; /dev/null</code>, but I'm hoping not to suppress other things.</li>
<li>I'm not talking about the <em>commit message</em> -- I'm talking about what its printed to the terminal.</li>
</ul>
","11","541686","0","0"
"69797237","8226709","2021-11-01 12:55:21","0","187","<github><git-branch><git-commit>","Getting the last commit date of a specific remote branch in Git repo from local","<p>How can we get the last commit date of a specific branch in remote Git - either through API or CLI?
For example: <a href=""https://i.stack.imgur.com/XT6X3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XT6X3.png"" alt=""enter image description here"" /></a></p>
<p>In the attached image, &quot;generics&quot; is the branch in the repo, and 5-March-2013 is the last commit date for that branch. I'm looking to get this &quot;5-March-2013&quot; info by specifying the branch name as &quot;generics&quot;.</p>
","6","8226709","",""
"51531283","","2018-07-26 04:59:07","0","291","<git><github><gerrit><githooks><git-commit>","Issues in commit in gerrit","<p>I am trying to use gerrit and I am facing some issue while commit. When I am committing my changes and pushing it to branch then sometimes two code reviews get raised, one is mine and other one is of the person who is working on same branch and many times I get messages you are ahead of 5 commits even I did only one commit. I am using following commands:</p>

<pre><code>git add &lt;file_name&gt;
git commit -m ""commit msg""
git push &lt;branch name&gt;
</code></pre>

<p>On further reasearch I found that there may be issue due to git hook as I am not using git hook anywhere. Because of git hook gerrit is not able to distinguish between commits done by different persons and as a result many reviews get raised  in one push. Is my understanding is correct? If no, please help me why it is happening.</p>

<p>Also I want to ask in git hook command:</p>

<pre><code>scp -p -P 29418 username@your_gerrit_address:hooks/commit-msg.git/hooks/
</code></pre>

<p>What this command does and what is this number 29418. Is this number is given by gerrit?</p>
","1","","",""
"35365900","2556555","2016-02-12 15:09:34","0","16","<github><git-commit><pull-request>","Delete all commits prior to the current one in a pull request","<p>I have a pull request going on, which contains several unneeded commits by me.</p>

<p>The current commit is the only one, I want to keep.
The commits have already been pushed to github so I can't use git rebase.</p>

<p>How can I delete all commits prior to my current commit?</p>
","2","2556555","",""
"51663561","213633","2018-08-02 23:48:35","1","54","<git><azure-devops><git-commit>","How to re-commit a full branch to VSTS?","<p>I'm hosting my code repository via Microsoft VSTS (free ^^). But I had some issues lately with my account, maybe because of my expired SSL certificate. Nonetheless, everything works again and I can also login to my account.</p>

<p>When I check the code I see no commits I've made in between are actually committed to my <code>feature/app-mvp</code> branch. The only branch there is at the moment.</p>

<p>Is there a way to re-commit all code to my hosted code repository again? When I do a <code>git status</code> I see:</p>

<pre><code>On branch feature/app-mvp
nothing to commit, working tree clean
</code></pre>

<p>Should I make a back-up, do a <code>git checkout -b feature/app-mvp2</code> or something? Or is there another way to re-commit all the files in the current branch?</p>
","3","213633","",""
"69840544","2830303","2021-11-04 14:06:53","1","40","<git><git-commit>","How to stack two commits histories over each other?","<p>I started a project in one repository (V1), and then started on top of it is code, other repository (V2) by downloading the first repository as Zip file and committing from zero.</p>
<p>the last commit in repository V1 is: May 27, 5:00 PM</p>
<p>the first commit in repository V2 is: May 28 3:00 PM</p>
<p>How can we stack the two commit stacks on top of each other.. into one repository? so that all commit history will be presented in one repository.</p>
","1","2830303","",""
"51775398","10205278","2018-08-09 20:36:21","4","782","<git><batch-file><cmd><git-commit>","batch file writing changed files of a git commit into variables","<p>I would like to write a batch script (and run it via cmd) which writes the changed files of a specific git commit into variables.</p>

<p>I have got the following code:</p>

<pre><code>@ECHO OFF
SetLocal EnableDelayedExpansion
set count=1
for %%m in ('git diff-tree --no-commit-id --name-only -r sha1-hash') do (
        set var!count!=%%m 
        set /a count=!count!+1
)
ECHO %var1%
ECHO %var2%
ENDLOCAL
</code></pre>

<p>The echo of var1 and var2 gives back:
    'git for var1
    and diff-tree for var2</p>

<p>If I add echo %var3% echo %var4% and so on, the result is the following:
'git diff-tree --no-commit-id --name-only -r sha1-hash' echo off echo off echo off...</p>

<p>So I guess my git diff-tree...-command is not seen as a command. Tried to fix it on my own, but had to surrender... Can you help me please?</p>

<p>Thanks a lot!</p>
","3","10205278","0","0"
"52755460","7991624","2018-10-11 08:22:47","3","585","<git><git-commit><drive>","I've updated Git and 'lost my Head', so now I can't commit","<p>I recently downloaded git 2.19.0.windows.1. In the previous versions of git, I could git clone and git commit from/to both my local drive and my H drive. Now with this version of git, I can only git clone and commit on my local drive but not on my H drive. When I commit on my H drive I get the following error: </p>

<pre><code> fatal: cannot update the ref 'HEAD': unable to append to '.git/logs/HEAD': Bad file descriptor
</code></pre>

<p>I have tried to find my head using the following code: </p>

<pre><code> $ echo ref: refs/head/master &gt;.git/HEAD
</code></pre>

<p>This does not work, I don't know what the next move is. </p>
","7","7991624","0","0"
"52760904","8104412","2018-10-11 13:10:19","3","1042","<git><github><git-commit>","GitHub: How to show commits for all files in folder","<p>It's not hard to find information on how to see all the files in a particular commit, but I would like the inverse.  IOW, I want a list of all files in a folder and the commit that put them there.  Something like:</p>

<pre><code>File1.txt   c7b1fd463f40b39d7f199ee650b58a8ba153b64a
File2.md    d9e3ca571d40b38d7fab90cf50b48a82c1d3a32f
File3.c     3207cab3b49da7be5d9a7ef8594bef1935e15fd1
...
</code></pre>

<p>Is there some way to do that?  </p>
","1","8104412","",""
"70751966","17397774","2022-01-18 07:51:16","1","90","<git><git-commit><git-detached-head>","How to go back to an old commit, make some changes and commit those changes at the old commit which also updates all the following commits","<p>I was working on a file, I comitted some changes, then I realized that I want some of the changes I've made recently in an older commit, because it is a part of the older commit.</p>
<p>So, I want to go back to the commit 2c57de7 and add some of the changes that I've still not added to the staging area, in the same commit. I do not want to create a new commit.</p>
<ul>
<li>I tried the Detached HEAD state, but then I don't know how to merge a branch after the 2c57de7 commit.</li>
<li>I tried the interactive rebase option by stashing my current work and the popping the work at the 2c57de7 commit and the resetting the commit so I could add the modified file. But I'm having a lot of merge conflicts. If there's an article about how to resolve merge conflicts, it would be extremely helpful!</li>
<li>I tried making a new branch, reverting that branch to that old commit, making the changes, and then merging the tip of that branch back, but it didn't work.</li>
</ul>
<pre><code>* 59939c3 - Sun, 16 Jan 2022 14:19:40 +0530 (3 hours ago) (HEAD -&gt; main)
|           Problems - Added Problem 03
* 2c57de7 - Sun, 16 Jan 2022 12:52:04 +0530 (4 hours ago)
|           Problems - Added Problem 02
| * 3031e71 - Sun, 16 Jan 2022 13:37:14 +0530 (3 hours ago) (Trees)
| |           Level Wise
| * 7aaa1dd - Sun, 16 Jan 2022 12:44:59 +0530 (4 hours ago)
| |           Introduction
| * 5c26db8 - Sat, 15 Jan 2022 18:13:23 +0530 (23 hours ago)
|/            Vectors
* 692c42e - Wed, 12 Jan 2022 19:10:02 +0530 (4 days ago)
|           Problems - Added Problem 01
</code></pre>
<p>This is my commit history</p>
<p>Any help would be appreciated!</p>
","0","17397774","0","0"
"35769260","5217804","2016-03-03 10:17:44","3","2087","<git><git-commit><git-reset>","Git staging to working directory?","<p>I have a question concerning the <code>git reset</code> command:</p>

<pre><code>git reset .
git reset HEAD .
</code></pre>

<p>What is the difference between the two commands? Are making same changes?</p>
","0","5217804","",""
"35773936","128662","2016-03-03 13:46:11","17","5506","<git><git-commit><git-log>","Git log - How to filter (exclude) files from appearing in `git log`? (git pathspec magic)","<p>I need to use the <code>git-log</code> command to create a report of the number of added and removed lines by commit, on average between two dates. </p>

<p>Currently the command I use is:</p>

<pre><code>git log --since=""2015-12-01"" --until=""2015-12-31"" --shortstat
</code></pre>

<p>But I need to filter some files in the process.
Thoses files are autogenerated, and we don't want to see their influence. They are easily recognizes by their name <code>*.generated.*</code></p>

<p>I choose to use the <code>git-log</code> command, I am able to get the report I need, except I don't see how to filter those unwanted files.</p>

<p><a href=""https://git-scm.com/docs/git-log"" rel=""noreferrer"">The doc is big</a>, I already read it several times, but I don't see anything about filtering files based on their names. Is this possible, or do I have to find another command to find the number of lines added/deleted by commit?</p>
","4","128662","0","0"
"35776061","5662600","2016-03-03 15:19:28","-1","108","<git><atlassian-sourcetree><git-commit><git-reset>","Git - After resetting to a specific commit, what is the next step?","<p>I'm new to Git and stuck in a situation whether to commit or not. So this might be a basic question. I tried to find a lot regarding this but did not find any answer specific to my concern. So asking here.</p>

<p>I have 15 commits for my branch. Now I have reset to my first commit because of one issue.
Then I have made the changes which covered the changes of all commit.</p>

<p>Now my question is can I commit my changes directly? will it be saved on the top of the other commits? what will happen to the other commits and their history. Do I need to delete the history or not?
Or I just have to commit the changes and my branch would be ready for merge?
Or are there any extra step involved till I mark my final commit?</p>
","6","5662600","",""
"52824367","10307701","2018-10-15 20:32:23","4","2389","<git><visual-studio-code><git-commit>","Git commit aborts before I can create a commit message and I use ""--wait""","<p>I use Visual Studio Code on my Mac as my text editor and have it set up to open a new window to type my commit message, however when I type 'git commit' in the terminal, it instantaneously displays </p>

<blockquote>
  <p>Aborting commit due to empty commit message.</p>
</blockquote>

<p>I have my git config set up as <code>git config --global core.editor ""code --wait""</code>,  and when I type <code>git config --global -e</code>, it shows </p>

<blockquote>
  <p>[core] editor = code --wait </p>
</blockquote>

<p>I've uninstalled and reinstalled git, and I've went through the <a href=""https://code.visualstudio.com/docs/editor/versioncontrol#_vs-code-as-git-editor"" rel=""nofollow noreferrer"">VS Code as Git Editor setup guide</a>, and have searched online for a solution for at least ten hours. My git and VS Code versions are up to date and my commits do work when I type <code>git commit -m ""message here""</code> in the command line, but I still don't know why my VS Code editor option isn't working.</p>

<p>Any ideas here? Thank you!</p>
","2","10307701","0","0"
"35823994","1884158","2016-03-06 06:45:59","14","3896","<git><git-branch><git-bash><git-commit><git-checkout>","How to checkout a commit's child?","<p>How do I reference a commit <em>ahead</em> of HEAD? </p>

<p>For example, a commit that is 1 commit <em>behind</em> HEAD is HEAD~1. </p>

<p>How do I move the opposite direction, with respect to HEAD?</p>

<p>Basically, I did a <code>git checkout HEAD~1</code> 3 times. Now I want to move forward 1 commit, effectively undoing my last <code>git checkout HEAD~1</code>. How can I do this?</p>

<p>I understand that a branch of commits is like a singly linked list, with each commit only pointing to its parent. So if it unreasonable to traverse to a commit's child, I would like to know how to process forward between them.</p>
","2","1884158","0","0"
"52843950","9518524","2018-10-16 20:57:03","1","34","<git><git-commit>","How do I restore a file that is currently git committed","<p>I just started using git yesterday, and today I committed a couple files, but then for some reason they disappeared. They show up when I run the command ""git log -p -2"" in one of the commits I previously did, but I have no idea how to restore them to where they were originally.</p>
","8","9518524","",""
"52859654","4449667","2018-10-17 16:33:32","0","78","<git><git-branch><git-commit>","Git history. Find commits, included in merge commit","<p>I have command: <code>git log --pretty=format:'* %s' --no-merges --first-parent beta $(git describe --match builds/beta/* --abbrev=0 HEAD)..HEAD</code></p>

<p>to find commits between last <code>builds/beta/..</code> tag and <code>HEAD</code>. But I want to include there commits from merge commits.</p>

<p>For example, I have commit: ""Merge branch <code>feature/request</code> into <code>beta</code>. I want to get commits, included in that merge commit too. It is possible?</p>
","1","4449667","",""
"70839560","16059174","2022-01-24 19:40:19","1","860","<git><github><git-commit><git-push><git-lfs>","LFS Object stuck in Git history","<p>I am building a static website and tried to upload a large video file thanks to Git LFS, but the commit/push never succeeded. After some change I decided to not upload this file and wanted to uninstall LFS. Now the object keeps uploading every-time I try to push on Github and I can not push any update. When I type &quot;git push origin main&quot;, the LFS object uploading starts. It looks like it is stuck in the Git History. I tried to delete the repo, create a new one and push again, but same problem.</p>
<p>Any idea on the process to fix this issue ?</p>
<p>Thanks a lot for your help,</p>
<p>I'm available if you need more details</p>
","1","16059174","0","0"
"35860385","320201","2016-03-08 06:19:44","2","189","<git><version-control><git-commit>","Move a local commit to un-master local branch","<p>I am in complicated situation, because Im not familiar with git;</p>

<p>I had a master commit in remote, I have made a branch from it in my local called <code>fix-bug-online-offline-support</code>.
During my work, another team member changed the remote master and I pulled it.</p>

<p>But I need to split my branch <code>fix-bug-online-offline-support</code> to two branches;</p>

<ul>
<li>One with name : <code>fix-bug-online-support</code></li>
<li>another with name : <code>fix-bug-offline-support</code></li>
</ul>

<p>I have changed name of branch <code>fix-bug-online-offline-support</code> to <code>fix-bug-online-offline-support</code></p>

<p>and need to move some of commits from <code>fix-bug-online-support</code> to <code>fix-bug-offline-support</code></p>

<p>Note: Both of those branches are local branch, and I have hash string of commits</p>
","0","320201","",""
"70858443","17784043","2022-01-26 03:44:29","-1","463","<git><github><git-commit>","Git: bad Object HEAD","<p>I got stuck cause I forgot to put a message to a commit. So, since i did not how to exit the <code>vim</code> (or whatever) I just got into the .git folder and deleted every file in there.</p>
<p>The thing is that now I get this message:</p>
<pre><code>fatal: bad object HEAD
</code></pre>
<p>and if I use the <code>git fsck</code> this:</p>
<pre><code>error: refs/heads/master: invalid sha1 pointer 92921ef183ebb792a66213ecfd31fa0a4dc32685
error: refs/original/refs/heads/master: invalid sha1 pointer 58c2fbc2fa2645100f45c919cbda6b5bea3f44c3
error: refs/remotes/origin/master: invalid sha1 pointer 92921ef183ebb792a66213ecfd31fa0a4dc32685
error: HEAD: invalid sha1 pointer 92921ef183ebb792a66213ecfd31fa0a4dc32685
error: HEAD: invalid reflog entry 92921ef183ebb792a66213ecfd31fa0a4dc32685
notice: No default references
</code></pre>
<p>Finally, I've tried <a href=""https://stackoverflow.com/questions/20264032/git-status-shows-fatal-bad-object-head"">this</a> and got this:</p>
<pre><code>Move-Item : No se encuentra ningún parámetro que coincida con el nombre del parámetro 'rf'.
+ mv -rf .git
+    ~~~
    + CategoryInfo          : InvalidArgument: (:) [Move-Item], ParameterBindingException
    + FullyQualifiedErrorId : NamedParameterNotFound,Microsoft.PowerShell.Commands.MoveItemCommand
</code></pre>
<p><em>No se encuentra ningún parámetro que coincida con el nombre del parámetro</em></p>
<p>means something like:</p>
<p><em>Can't find any parameter that matches with the name of the parameter 'rf'</em></p>
<p>and same happens with 'mv'.</p>
<p>PD:I know that I shouldn't have deleted everything just like that. But now I don't know how to keep working.</p>
","3","17784043","",""
"70884294","10864356","2022-01-27 19:03:16","1","311","<git><version-control><git-commit><git-checkout><git-stash>","Checked out previous git commit, now can't switch back to HEAD","<p>In my React Native project I checked out a previous git commit using <code>git checkout &lt;previous commit SHA&gt;</code>, then tried to return to HEAD using <code>git checkout &lt;most recent commit SHA&gt;</code>. It said <code>error: Your local changes to the following files would be overwritten by checkout: android/gradlew.bat. Please commit your changes or stash them before you switch branches.</code>
I did <code>git stash</code> and then <code>git checkout &lt;most recent commit SHA&gt;</code> again, but it gave me the same <code>Your local changes</code> error.</p>
<p>How can I get back to HEAD?</p>
","0","10864356","",""
"52921725","7996523","2018-10-22 02:36:02","-1","584","<git><github><git-commit><git-push>","Why GitHub page does not reflect the changes I made locally","<p>When I use Git to push files to GitHub, command line shows it has been pushed successfully, but why the GitHub page does not reflect the commit?</p>

<p><img src=""https://i.stack.imgur.com/rgSJP.png"" alt=""Screenshot of my command line""></p>

<p>What I use is just 3 simple command.</p>

<pre><code>git add .
git commit -m ""message""
git push
</code></pre>
","3","7996523","0","0"
"35918054","5979201","2016-03-10 13:35:44","-1","114","<git><hook><githooks><git-commit><pre-commit-hook>","Git hooks to display a message everytime someone commits a .doc file","<p>I would like to know how to display a message using Git hooks every time they commit a Word document ( .doc/.docx) file , to let people know that they should rather commit .xml file.</p>
","0","5979201","",""
"35920005","1277137","2016-03-10 14:59:11","0","29","<git><git-commit><git-checkout>","Get content of file in some commit without using `git checkout`","<p>Is there a way to get a full content of a file (not just diff) in some commit, without using <code>git checkout</code> (because it pollutes the working directory)?
Something like this:</p>

<pre><code>$ git content 43fb721 --file main.rb =&gt; ""class Main\nend\r""
</code></pre>
","0","1277137","",""
"52936215","9481731","2018-10-22 19:08:26","0","36","<git><git-branch><gerrit><git-commit>","create new branches using files from a single commit [not merged to master yet]","<p>Team,
I committed 9files in a single commit. I want to move the 6files in two different commits[branches]. how can we achieve this?</p>

<p>ex: Branch1 - 9files
I want to do this 
Branch1 - 3 files;
Branch2 - 3 files;
Branch3 - 3 files.</p>

<p>Please assist. I searched online but its confusing and I don't want to mess up. Note that my commit Branch1 with 9files Is not yet merged to master. its pushed only. </p>
","0","9481731","",""
"35939308","3119346","2016-03-11 11:37:52","41","38748","<git><github><git-push><git-commit>","Pushing code from one branch of a repo to another branch of another repo","<p>There is a repo say ABC/A. I had forked this repo to my own github say ME/A. I was asked to create a branch on ME/A say x (originally there were develop and master). I had to write some code, so I cloned ABC/A and worked on its develop branch. But now when I have to push the code, I cannot push it to ABC/A as i dont have rights to do so. I have to push the code to ME/A. The problem is, I worked on develop branch for ABC/A but I have to push the code to ME/A x branch. Is it possible to push code in such a way?</p>
","0","3119346","0","0"
"70929497","18082835","2022-01-31 16:34:05","0","58","<git><github><git-commit><git-add><git-status>","Commit separately specific files inside untracked new directory in git","<p>I have a new created directory &quot;supplier_directory&quot;, in which there are 3 new files. I need to add these files into different commits.</p>
<ol>
<li>Commit N1 : file1 only</li>
<li>Commit N2 : file2 and file3</li>
</ol>
<p>I'm having the following:</p>
<pre><code>supplier_directory
</code></pre>
<p>when trying:</p>
<pre><code>git status
</code></pre>
<p>I'm enable to add or show changes of certain files inside this untracked and new directory evenly when running 'git status' inside it.</p>
","2","18082835","",""
"35958394","6053984","2016-03-12 13:44:38","14","14619","<git><commit><git-commit>","git undo commit on protected branch?","<p>Is there a way to undo commits on a protected branch?</p>

<p>I mean, If you pushed an wrong commit, on a non protected branch you can undo it reseting the HEAD to the last desired commit or reverting the wrong commits and forcing the push then. But protected branches does not allow force pushing. What's the way to fix it on this case?</p>

<p>Edit: The specified (rigtht) commit is not a merge.</p>
","5","6053984","0","0"
"38584186","2572526","2016-07-26 07:59:21","2","251","<git><git-commit><git-reset>","Git, ""move"" a commit exactly as it is without merge files","<p>in git I had a situation like this:</p>

<pre><code>a - b - c - d - #be2c15
                    ^
</code></pre>

<p>I wanted to recover some files from the commit ""a"" so I did a reset SOFT without modify the working tree</p>

<pre><code>a - b - c - d - #be2c15
^
</code></pre>

<p>Then I recovered the files marked as deleted.<br> <br>At this point I had to reset back the index to #be2c15 and then do the commit but I made a mistake and committed the changes immediately like this:</p>

<pre><code>a - b - c - d - #be2c15
 \
  #88ae59e
</code></pre>

<p>Now the commit #88ae59e contains exactly all that I want but is in the wrong position. How can I ""move"" it without touching any file that it contains?
Like this:</p>

<pre><code>a - b - c - d - #be2c15 - #88ae59e
</code></pre>
","2","2572526","",""
"52980805","10323279","2018-10-25 03:13:20","0","2651","<gitlab><git-commit><git-push><git-pull><git-fetch>","can't push to gitlab, failed and rejected","<blockquote>
  <p>has been pulled, the result is still an error <code>! [rejected]  dev-&gt;dev(non-fast-forward)</code></p>
</blockquote>

<pre><code>D:\PPI_Roketin\Project\astrowatch (dev)
λ git add resources/views/reals/_form.blade.php

D:\PPI_Roketin\Project\astrowatch (dev)
λ git commit -m ""resources/views/reals/_form.blade.php""
[dev db5ac99] resources/views/reals/_form.blade.php
1 file changed, 2 insertions(+), 2 deletions(-)

D:\PPI_Roketin\Project\astrowatch (dev)
λ git push origin dev
To gitlab.com:roketin-stellar/astrowatch.git
! [rejected]        dev -&gt; dev (non-fast-forward)
error: failed to push some refs to 'git@gitlab.com:roketin- stellar/astrowatch.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<blockquote>
  <p>error like this, why?</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/xW3bV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xW3bV.png"" alt=""enter image description here""></a></p>

<blockquote>
  <p>have done git checkout, and repeated the command, it's still an error like above</p>
</blockquote>
","1","10323279","",""
"40022820","1649972","2016-10-13 13:46:13","1","1265","<git><github><git-commit>","Git Commit message structure","<p>I am starting a new repository from scratch and I want to ensure I start off correctly. I am talking over from a previous developer who used github terribly and I want to fix it before I continue developing on to of their code. </p>

<p>I have done a lot of reading on github and I will be putting the repository together tomorrow. I was hoping to get your opinions on the format of the git commit message I will be using and if I am doing anything incorrect (format, too detailed etc) All my commits will be following the same format so I want to get it right.</p>

<p>Here's and example of one of my commit messages, thanks in advance.</p>

<p>""Add WIFI reconnect </p>

<p>Added code to force WIFI module to save and reboot if it has been over 45 seconds since a packet has been sent successfully.</p>

<p>This was added to fix an issue where the WIFI module lost connection to it’s network. Once disconnected it would only try to reconnect a limited number of times.</p>

<p>Now if the WIFI module disconnects or data has not been sent correctly for 45 seconds, a reboot will be forced and the module will try to connect and transmit on wakeup.""</p>
","5","1649972","",""
"36012976","5727486","2016-03-15 13:40:09","5","10627","<git><git-commit>","Git Commit Error terminal with the editor","<p>I'm having some troubles with the command <code>git commit</code>. I did a <code>git commit</code> but unfortunately I've pressed <code>Ctrl+Z</code> instead of <code>Ctrl+X</code> to close, so now when I <code>git commit</code> again, it gives me this error:</p>

<pre><code>error: editor died of signal 11
                           error: There was a problem with the editor 'editor'.   `Please, specific the message using option -m or -F. `
</code></pre>

<p>Actually I don't know how to fix this error.
The operating system that I'm running is Ubuntu 15.10.</p>
","0","5727486","0","0"
"53011996","7453606","2018-10-26 15:31:32","1","52","<git><github><git-commit>","Git commit message not taking to the next step","<p>I use vim (basic functions to write code..) but this keeps returning different performance when I use those shortcuts I'm familiar with. This hasn't happened once either.. embarrassed to encounter these issues and not know how to resolve; but Id really like to understand first.
<a href=""https://i.stack.imgur.com/4mrLK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4mrLK.png"" alt=""enter image description here""></a></p>
","3","7453606","0","0"
"36033289","6071014","2016-03-16 10:41:02","3","537","<git><git-commit>","Can't make first git commit to the remote rep","<p>I've got a strange problem: tried to make a new repository, as usual, followed instructions from github: </p>

<ol>
<li>git init</li>
<li>git add .</li>
<li>git commit -m ""first commit""</li>
<li>git remote add origin <a href=""https://github.com/"" rel=""nofollow"">https://github.com/</a>*/**.git</li>
<li>git push -u origin master</li>
</ol>

<p>My problem occures at the 3rd step: </p>

<blockquote>
  <p>fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
  Use '--' to separate paths from revisions, like this:
  'git  [...] -- [...]'
  fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
  Use '--' to separate paths from revisions, like this:
  'git  [...] -- [...]'
  ""Branch could not be empty.""</p>
</blockquote>

<p>What's the matter? I didn't have such problem until now. Tried to reinit git by deleting the folder and typing new ""git init"" command - the problem still the same.</p>

<p>p.s.: the full way of making repository I've passed: got to the github.com, clicked on the button ""New"" (repository), added a name for it (the same as a folder on PC) and started to do some magic via cmder (following the instructions from github) ... </p>

<p>p.p.s.: I use windows 10 and cmder (tried gitBash too).</p>

<p>upd: there's something in my windows environment, 'cause on another machine everything's fine. </p>
","7","6071014","",""
"45775763","4077294","2017-08-19 19:54:58","2","124","<git><github><version-control><git-commit><git-add>","Git one-liner to add everything (including untracked files) and commit","<p>I'm really lazy, so I often like to run <code>git commit -am 'msg'</code> to add and commit everything in one swoop. If I'm lucky, I haven't added any untracked files and this will work fine. However, sometimes I'll do this, run <code>git status</code> much later in the midst of some other work, realize I messed up, and then have to do acrobatics with <code>git stash</code> and <code>git reset</code> to put the untracked files in the proper commit. This is really time-consuming.</p>

<p>I'm wondering if there's a way to both stage changes <em>and</em> add untracked files and commit with a single git command. Something that would be the equivalent of</p>

<pre><code>git add -A :/
git commit -m 'msg'
</code></pre>

<p>Is there such a command?</p>
","0","4077294","0","0"
"71019922","6626554","2022-02-07 14:05:54","1","1913","<git><git-commit><git-rebase>","Git rebase a branch on another after parent branch is merged to master","<p>If I have <code>branch_1</code> forked out of <code>master</code> with let's say 2 commits.</p>
<p>Next, I made <code>branch_2</code> forked out of <code>branch_1</code>.<br />
On <code>branch_2</code> I have made changes which are not in the area <code>branch_1</code>. I of course have changes from <code>branch_1</code> included here but I have not touched those changes.</p>
<p>Now let's say <code>branch_1</code> merges into master.</p>
<p>Next, on <code>branch_2</code> I do <code>git pull upstream master --rebase</code> to rebase <code>branch_2</code> on top of master so that commits from <code>branch_1</code> disappear from commit history of <code>branch_2</code>. I should not get merge conflicts here. Right? But I do in the same lines of code which were changed on <code>branch_1</code>. This is strange! Is this expected?</p>
","3","6626554","",""
"71022667","2505159","2022-02-07 17:20:16","0","80","<git><git-branch><git-commit>","Can I use git to find which commit is needed to fix a branch?","<p>I have a git tree which looks like this:</p>
<pre><code>master (test passes)
|
|
|  stable (test fails)
|   |
|   /
+---
|
</code></pre>
<p>There is a test which fails when run against the <code>stable</code> branch, but passes when run against the <code>master</code> branch.  As it is a complicated multi-process test it's rather hard to debug.</p>
<p>Can I use git to find which commit from the master branch can be cherry-picked to the stable branch in order to fix the test?</p>
<p>There are many hundreds of commits on both branches so doing it manually would be painful.</p>
","5","2505159","",""
"71023103","10864356","2022-02-07 17:51:14","0","2122","<git><git-branch><git-commit><git-detached-head>","How to fix ""Head detached from <commit>""?","<p>I checked out a previous commit in my project recently, and just noticed when I ran <code>git status</code> that it was returning <code>HEAD detached from 7263532</code>. These are my most recent two commits:</p>
<p><code>commit 8a870e8a1cb63bac7e9ec732908e54f20e841bb3 (HEAD)</code></p>
<p><code>commit 72635327285025d2e89962fc7ff854a8c67fdfe1 (dev-updates)</code></p>
<p><code>dev-updates</code> is the name of my current branch.</p>
<p>I thought I had checked back out my most recent commit after checking out the previous one. I have edits in my working directory that I don't want to lose. What I want to know is, how do I fix the <code>HEAD detached</code> warning without losing any of my work?</p>
","3","10864356","",""
"71040499","17637875","2022-02-08 20:31:35","0","105","<git-commit><tortoisegit><git-amend>","TortoiseGit amend merge commit: ""show diff to last commit"" checkbox is disabled","<p>I'm trying to <code>commit --amend</code> to a merge commit with TortoiseGit 2.13.0.1.</p>
<p>For a repository where the last commit is a merge commit, the <em>&quot;show diff to last commit&quot;</em> checkbox is disabled (greyed) and checked after i check the amend checkbox; it doesn't let me uncheck it:
<a href=""https://i.stack.imgur.com/h6Lao.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/h6Lao.png"" alt=""enter image description here"" /></a></p>
<p>With other repositories, the checkbox isn't disabled and not checked automatically after i check the amend checkbox.</p>
<p>Is this per design or is there some hidden setting to enable the checkbox for this situation?</p>
","3","17637875","",""
"71043029","948359","2022-02-09 01:42:14","1","857","<visual-studio><configuration><git-commit>","In Visual Studio 2019, how to GIT commit only specific files (only .vb or .sln or .vbxproj files)?","<p>Today, I want to Commit my work to my local GIT repository from Visual Studio 2019.</p>
<p>From <code>Solution Explorer</code>, I active <code>GIT</code> context menu and <code>Commit</code> action and a new <code>Modification Git</code> panel is displayed in which <strong>ALL</strong> modified and added files are displayed.</p>
<p><a href=""https://i.stack.imgur.com/Kn8EP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Kn8EP.png"" alt=""enter image description here"" /></a></p>
<p>I can see a lot of files with a lot of types</p>
<pre><code>.vb
.sln
.dll
.db
.dia
.cache
.pdb
.png
</code></pre>
<p>But I'm only interesting to commit <code>.vb</code>, <code>.sln</code> and <code>.vbxprog</code> file's types.</p>
<p>In Visual Studio, how can'I limit my commit to only these files ?</p>
<p>How can I do same thing for directory so that <code>Release</code> or <code>Debug</code> folders are never commited ?</p>
<p>Can I do all theses actions in Visual Studio level ?</p>
","0","948359","0","0"
"36083046","898042","2016-03-18 11:19:24","1","5244","<git><git-commit>","Understanding the purpose of git commit command","<p>I have watched few tutorials and here is my understanding of the ""commit"" command shown in statements:</p>

<ul>
<li><p>since git uses a system of ""snapshots"" of the entire codebase, git needs to know history of changes and show to all coders who did what at each moment in time.</p></li>
<li><p>""commit"" is like recording the changes in project's memory.</p></li>
<li><p>uploading my changed version of the project,i.e. my branch to main online repo(master) is a different thing? </p></li>
<li><p>when I upload my local changes to the main version of the project, my commits(recorded in .git file) become known to others.</p></li>
<li><p>uploading changes to master branch is ""pushing"" all my commits, right?</p></li>
</ul>

<p>Am I correct about these statements?</p>
","2","898042","0","0"
"36087027","882697","2016-03-18 14:32:24","1","85","<git><git-svn><git-commit>","How to remove duplicated commits in a git svn tree?","<p>I am working with a SVN server using git SVN.
I struggled to created a tag so I had a look at the tree.
I noticed that my tree is messed up: all commits appear twice. Once in the red &quot;branch&quot; and once in the purple on:</p>
<p><a href=""https://i.stack.imgur.com/AdHMr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AdHMr.png"" alt=""enter image description here"" /></a></p>
<p>Before posting this I cleaned a lot of branches using:</p>
<pre><code>git branch -D useless_remote_branch
git gc
</code></pre>
<p>But for this one I don't know what to do to get a clean history.</p>
<p><strong>How could I get back to a linear history with only the red &quot;branch&quot;?</strong></p>
<p>I can delete the tag on the SVN side if needed.</p>
<p>Thank you!</p>
<hr />
<h2>EDIT</h2>
<p>Here is what I got after the solution suggested by @VonC and a <code>git svn tag</code> command:</p>
<p><a href=""https://i.stack.imgur.com/2gBbO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2gBbO.png"" alt=""enter image description here"" /></a></p>
","0","882697","0","0"
"67304395","7928174","2021-04-28 16:39:47","1","259","<git><github><git-commit>","Commits simply not showing on GitHub graphic?","<p>So since I started working on this new project, my commits stopped showing up on GitHub graphic, no green tiles for me. I worked on a personal project and I was able to see my commits on the graphic, but when it comes to the other project, nothing happens.</p>
<p>I already read the documentation and found nothing, my friends from work are not experiencing the same problem with the repository, so I don't know what else could be. I even deleted the project from my machine and cloned again, still nothing changes.</p>
<p>Yes, I can see my commits with <code>git log</code>, they're all there.</p>
","5","7928174","0","0"
"68344776","6633728","2021-07-12 09:15:23","1","67","<python-3.x><file-upload><github-api><git-commit><git-add>","How to commit and push a database file of 60 or more Mbs using Python3.x to GitHub API?","<p>I have been looking for a better way to automatically upload a new or existing file to my repository. The following code can only update an existing file (not a big deal for me now) and does not work on with a big file.</p>
<pre><code>def push_to_github(filename, repo, branch, token):
    url=&quot;https://api.github.com/repos/&quot;+repo+&quot;/contents/&quot;+filename

    base64content=base64.b64encode(open(filename,&quot;rb&quot;).read())

    data = requests.get(url+'?ref='+branch, headers = {&quot;Authorization&quot;: &quot;token &quot;+token}).json()
    sha = data['sha']

    if base64content.decode('utf-8')+&quot;\n&quot; != data['content']:
        message = json.dumps({&quot;message&quot;:&quot;update&quot;,
                            &quot;branch&quot;: branch,
                            &quot;content&quot;: base64content.decode(&quot;utf-8&quot;) ,
                            &quot;sha&quot;: sha
                            })

        resp=requests.put(url, data = message, headers = {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Authorization&quot;: &quot;token &quot;+token})

        print(resp)
    else:
        print(&quot;nothing to update&quot;)

token = &quot;lskdlfszezeirzoherkzjehrkzjrzerzer&quot;
filename=&quot;foo.txt&quot;
repo = &quot;you/test&quot;
branch=&quot;master&quot;

push_to_github(filename, repo, branch, token)
</code></pre>
<p>This code gives me the following error:</p>
<pre><code>KeyError: 'sha'

</code></pre>
<p>but it works fine on a small file.</p>
<p>When I try to run <strong>data</strong> variable in the code, I get the following message, which makes me think that I need a different way to accept a bigger file of 60 Mbs even way more.</p>
<pre><code>{'message': 'This API returns blobs up to 1 MB in size. The requested blob is too large to fetch via the API, but you can use the Git Data API to request blobs up to 100 MB in size.', 'errors': [{'resource': 'Blob', 'field': 'data', 'code': 'too_large'}], 
'documentation_url': 'https://docs.github.com/rest/reference/repos#get-repository-content'}
</code></pre>
<p>Does anyone know how to handle this? It's been hard for me to follow the suggested link.</p>
","0","6633728","",""
"71061015","6495570","2022-02-10 07:07:40","0","266","<jenkins><jenkins-groovy><git-commit>","I am trying to get the commit hash of a specific past builds in Jenkins","<pre><code>I have tried the following to get a commit sha of a specific build. 
But Jenkins showed a security error. Is there a possible way to achieve this?

import hudson.model.*

def jenkins_job_name = &quot;Some Job&quot;
def build_number = 46
def jenkins_job = Hudson.instance.getItem(jenkins_job_name)

def getBuild = jenkins_job.getBuildByNumber(build_number)

def commit_sha = getBuild.getEnvironment().get('GIT_COMMIT')

*Scripts not permitted to use method hudson.model.Run getEnvironment. Administrators can decide whether to approve or reject this signature.*
</code></pre>
","2","6495570","0","0"
"36104584","6054819","2016-03-19 17:03:56","3","11147","<git><git-bash><git-commit><mingw-w64>","git bash: stuck after writing the message for commit","<p>I am trying to add a file to my github account using git bash. I have ""commit"", and I have entered the message required. But now, I am stuck (MINGW64). 
If I try :q, :quit, :quit!, nothing happens.
If I try CTRL+C, I can enter :quit! but in this case my commit is aborted.</p>

<p>Do you have any idea?</p>
","1","6054819","0","0"
"36112517","3265777","2016-03-20 10:17:32","15","25006","<git><git-push><git-commit>","Git - exclude specific commit and push","<p>How to exclude specific commit from series of commits. I mean if I have 5 commits, and I only want to push 4 commits. How to do this. Please help to resolve this.</p>
","2","3265777","0","0"
"53087078","6450957","2018-10-31 15:35:04","2","875","<git><tags><git-commit><git-cherry>","How to list git tags containing commit that was cherry-picked","<p>I'm trying to find out how I can list all the tags that contains a given commit including those that were cherry-picked.</p>

<p>For example:</p>

<ul>
<li>I have a commit <code>abcd1234</code>, which has been merged into the <code>master</code> branch.</li>
<li>This gives me a <em>merge commit</em> with hash <code>a1b2c3d4</code></li>
<li>I create a tag at this point named <em>release-1.0</em></li>
</ul>

<p>At this point, I can use <code>git tag --contains abcd1234</code> OR <code>git tag --contains a1b2c3d4</code>. Both of these commands will list the tag <strong>release-1.0</strong></p>

<p>Now:</p>

<ul>
<li>I created a hot-fix branch from <em>release-1.0</em> tag</li>
<li>I have a new <em>merge commit</em> on the master with the hash <code>xyz789</code></li>
<li>I cherry-pick this commit onto the <strong>hot-fix</strong> branch</li>
<li>I tag this <strong>hot-fix</strong> branch as <em>release-1.1</em> and delete the branch</li>
</ul>

<p>How can I get a list of all the tags that contains commit <code>xyz789</code>? In this case, it should show that this commit is available in:</p>

<ul>
<li>release-1.1</li>
</ul>
","2","6450957","",""
"53087492","7579156","2018-10-31 15:56:43","6","1171","<git><git-commit>","Multiple Git Fix Up Commits","<p>I would like to make a <code>fixup</code> commit against a previous commit.
However that commit has already had a <code>fixup</code> commit made against it for another reason.</p>

<p>Should I make my new fixup against the last fixup commit, or can I still fixup against the original commit, essentially meaning I have 1 original commit and 2 fixup commits.</p>
","2","7579156","0","0"
"71072936","17086941","2022-02-10 22:12:22","-3","132","<git><github><git-commit><git-push>","How to remove a file from GIT if it doen't exist any more","<p>I was trying to use git and git-hub for my first time;</p>
<p>and there was a file that I wanted to change it's name so I just changed it and committed then when I pushed it but it says :</p>
<p><code>[rejected]        main -&gt; main (fetch first) error: failed to push some refs to 'https://github.com/MyUserName/MyProjectName.git' hint: Updates were rejected because the remote contains work that you do hint: not have locally. This is usually caused by another repository pushing hint: to the same ref. You may want to first integrate the remote changes hint: (e.g., 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details.</code></p>
<p>so I just added <code>-f</code> to force but it made another directory holding the old name of the file so I delete it but every time I do <code>push</code> command it just makes the same thing</p>
<p>how can I get rid of this old file once and for ever
thanks.</p>
","4","17086941","",""
"71077935","13564858","2022-02-11 09:40:48","1","352","<github><github-api><git-commit>","Is there a way to find number of commits/pull request/issues on a public repository using GitHub API in the last 24 hours?","<p>I tried doing this using this example listed here <a href=""https://towardsdatascience.com/introduction-to-git-data-extraction-and-analysis-in-python-e7e2bf9b4606"" rel=""nofollow noreferrer"">https://towardsdatascience.com/introduction-to-git-data-extraction-and-analysis-in-python-e7e2bf9b4606</a></p>
<p>But the count obtained from the above method didn't match with the count displayed in 'Commit Activity' section for repository 'activemq' <a href=""https://github.com/apache/activemq/graphs/commit-activity"" rel=""nofollow noreferrer"">https://github.com/apache/activemq/graphs/commit-activity</a>.</p>
","0","13564858","",""
"71080098","17216529","2022-02-11 12:27:33","2","1089","<git><gitlab><git-branch><git-commit><git-checkout>","Switch from one git branch to another without loosing the newly added code","<p>I have a repository having two branches master ( keeps final error free code ) and develop ( developing branch ).The default branch is master, I cloned and worked on the project, but unfortunately I forgot to checkout to the develop branch before I start coding.So all the changes that I made will be on the master branch. Is there any way to switch the branch after developing? so that I can commit and push the code only to the develop branch without loosing my code.</p>
","1","17216529","",""
"53103079","10591458","2018-11-01 14:14:36","1","358","<git><runtime><git-commit>","Runtime.getRuntime().exec() git commit -m XXX with wrong exitcode of ""1""","<p>As the title says, I use <code>Runtime.getRuntime().exec</code> to execute <code>git commit -m XXX</code> command.</p>

<p>Unfortunately, it returns the unmormal exitcode with 1 (btw,the right code is 0). </p>

<p>I try to type the command on the command line，the commit command is working OK. </p>

<p>Anybody knows where the problem is? </p>

<pre><code>public static int commit(String dir,String commitMsg) {
    String command = ""git commit -m "" + commitMsg;
    exitCode = ProcessUtil.safeSyncRun(command, dir);
    System.out.println(command + "" exitcode = "" + exitCode);
    return exitCode;
}
public static int safeSyncRun(String command, String workingDir) {
    Process process;
    int exitValue = -1;
    try {
        process = Runtime.getRuntime().exec(command, null, new File(workingDir));
        process.waitFor();
        exitValue = process.exitValue();
    } catch (IOException | InterruptedException e) {
        System.out.println(""exception : "" + e);
    }finally{
        process = null;
    }
    return exitValue;
}
</code></pre>

<p>Outputs below:</p>

<pre><code>git commit -m test commit msg 
exitcode = 1
</code></pre>
","4","10591458","0","0"
"71100116","12854870","2022-02-13 11:15:48","0","165","<git><git-commit><git-revert>","Git - revert single commit after there have been other commits","<p>Simple question and I don't really have code to show sorry.</p>
<p>In git is it possible or whats the best way to revert a commit after I have more commit after the commit I would like to revert.</p>
<p>If I have commits 1,2,3,4 and 5 and I want to revert commit 3 is there a way to <code>revert commit 3</code>.</p>
<p>I know how to revert a commit with <code>git revert 98b8ad2df210a6f05a2f</code> but if I do this I'm getting conflicts.</p>
<p>I want to revert commit 3 but still have the commits 4 and 5.</p>
<p>Do you need to revert 4,5 and then 3 and then add back 4 and 5</p>
","2","12854870","",""
"36144731","2757483","2016-03-22 01:32:58","4","1107","<git><vim><git-commit>","Vi Error while making git commit","<p>I am attempting to make a git commit. I run the command <code>git commit</code> and vim opens up. I type in my commit message, and when I execute the <code>:wq</code> command, I get the following error:</p>

<blockquote>
  <p>error: There was a problem with the editor 'vi'. Please supply the
  message using either -m or -F option.</p>
</blockquote>

<p>Any idea how I can figure out what the problem is?</p>
","2","2757483","0","0"
"53118989","1081319","2018-11-02 12:53:47","0","400","<spring-boot><git-commit>","Reading date from git.properties using gitProperties.get()","<p>have a git commit id plugin in a boot application.
When i try to read the build.time from the git.properties file, it returns as a String, any way we can retrieve it as date ?</p>

<pre><code>gitProperties.get(""build.time"");
</code></pre>

<p>this prints in milliseconds, i can convert this to seconds, using Instant, but  is there a more direct way ?</p>
","0","1081319","",""
"36157920","1079034","2016-03-22 15:01:13","3","1200","<git><workflow><git-commit><git-checkout>","Git: Switch workspaces (computers) without committing","<p>Is there a way to apply a diff patch or similar without doing a commit/checkout? </p>

<hr>

<p><strong>My situation</strong>:
I often switch between computers when working, and my commit history has a bunch of ""<em>switching machines</em>"" messages. </p>

<p>My initial guess is that this could lead to other troubles, but thought I might ask in case there is a suitable solution or workflow for this situation.</p>

<p>Edit - clarification: Computers are networked.</p>

<p>Edit - deeper thoughts: Now that I think about it, this would cause some bigger problems with the revision history by not going through Git. But perhaps there is another workflow solution I haven't thought of?</p>
","7","1079034","",""
"71137733","715540","2022-02-16 07:21:50","1","1156","<git><git-merge><git-commit>","No changes to push after merge with branch","<p>I am tying to do something that I have done many times before but for some or other reason it is not working as expected.</p>
<p>I want to merge changes from a develop branch into a master branch.</p>
<p>First I create a branch of master.</p>
<pre><code>git checkout -b merge-develop-master
Switched to a new branch 'merge-develop-master'
</code></pre>
<p>then</p>
<pre><code>git merge develop
</code></pre>
<p>This results in a whole list of changes that gets merged</p>
<p>when I now type <code>git status</code> it tells me</p>
<pre><code>On branch merge-develop-master
nothing to commit, working tree clean
</code></pre>
<p>Now when I type <code>git push --set-upstream origin merge-develop-master</code> no changes gets pushed,</p>
<pre><code>Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://xxx-xxx-xxx
 * [new branch]        merge-develop-master -&gt; merge-develop-master
 Branch 'merge-develop-master' set up to track remote branch 'merge-develop-master' from 
 'origin'.
</code></pre>
<p>How can I push these changes, what am I doing wrong?</p>
<p>Thanks</p>
","7","715540","",""
"71154511","3851151","2022-02-17 08:16:11","-1","99","<git><odoo><git-branch><git-commit>","How can I create a git branch where I can work on one folder only?","<p>I am developing modules for odoo, all these modules are in a main folder: modules_odoo.
lets call these modules: module1, module2, module3.</p>
<p>I am using this main folder (modules_odoo) as my repository on github.</p>
<p>Lets say that I want to work on module2. I create a branch for this module: dev_module2. But in this branch automatically module1&amp;3 are also present.
What is a way to only work on one module whithout having the others in there as well.</p>
<p>As an other example:
I have made a branch dev_modules, if I am working on module1 and module2 at the same time. And after a while, module1 is finished, but module2 isn't yet, how can I get module1 back to the main branch and keep module2 in the dev-branch?</p>
<p>Thanks in advance for the tips.</p>
","3","3851151","",""
"71155954","16751401","2022-02-17 10:00:42","15","1802","<git><git-commit><commit-message><monospace>","Backticks in git commit message","<p>I did</p>
<pre><code>git commit -m &quot;Changed function name `sum` to `sum_list`&quot;
</code></pre>
<p>My intention with the backticks was that <code>sum</code> and <code>sum_list</code> be typed in a monospace font when someone views the commit message in GitHub or the like. It works like this in other contexts, for example in Markdown.<br />
However this didn't work well. A <code>git log</code> shows the following commit message:<br />
<code>Changed function name  to </code></p>
<p>When I googled this, I only found <a href=""https://stackoverflow.com/q/26084030/16751401"">this question about backtick commands</a>, but both the asker and the answerer are already familiar with the concept I am trying to understand.</p>
<p>What do backticks do in commit messages? And is there a way to mark parts of the commit message as monospace font?</p>
","1","16751401","",""
"53177255","6754706","2018-11-06 17:45:34","2","101","<git><git-commit>","Grab Git Commit, Make Changes, Then Re-Commit It","<p>I have not used Git extensively and so I usually end up searching for my answers to my Git questions online without much trouble. However yesterday I encountered a problem I haven't faced before and wasn't sure the correct Git way to go about it when searching online. Here's the problem I faced:</p>

<ol>
<li>I committed some code that was not fully complete</li>
<li>My manager committed other changes not related to my code after my commit</li>
<li>Then he reverted my commit so my changes were no longer on master</li>
</ol>

<p>Here in lies my problem, I need to grab my commit, make some changes and then re-commit them. <strong>My question is this, what is the proper way to grab my commit changes that were reverted, edit them and then re-commit them?</strong></p>

<p>What I did: I solved my issue by pulling from master to get up to date, then went to the Bitbucket server and selected my commit, downloaded the files and copied those files back into the project. Then I proceeded to make changes. This allowed me to do git status and see those files were changed and also use git difftool to compare my changes with master before committing to ensure I want the changes I am committing.</p>

<p>I tried <a href=""https://stackoverflow.com/questions/2007662/rollback-to-an-old-git-commit-in-a-public-repo"">checking out the commit</a> but then the files didn't end up showing up as modified and wasn't sure where to go from there... Was I supposed to branch from the commit, make changes on that branch and then merge it back into master?</p>
","0","6754706","",""
"71164346","13712977","2022-02-17 19:33:30","1","1348","<git><github><git-commit><gnupg>","GPG key works only for a few minutes","<p>I use my GPG key to commit to GitHub but every time I want to commit again (for the first time in a new terminal) It asks me for a password every time.</p>
<p>How do I fix that I don't need to enter my password every time on my own machine.</p>
<p>I am using MacOS with ZSH terminal.</p>
<p>EDIT: I don't have a conf file. I don't know where it is located. I installed gpg with <code>brew install gnupg</code>
Files inside ~./gnupg/ &gt;&gt; <a href=""https://i.stack.imgur.com/B8pyX.png"" rel=""nofollow noreferrer"">https://i.stack.imgur.com/B8pyX.png</a></p>
","0","13712977","",""
"36227152","4055635","2016-03-25 20:01:30","7","2994","<android><git><android-studio><git-commit>","Android Studio showing unchanged files in commit changes dialog box","<p>I am using Android Studio 2.0 Beta 6 on Ubuntu GNOME. I am facing a strange problem. I am using git version control in my Android project. After building the project, when I click on commit changes through Android Studio GUI. The commit changes dialog box shows every file as changed. When I click on any file, it says contents are identical. I am attaching the screenshot below, clicking on any files says contents are identical.</p>

<p><a href=""https://i.stack.imgur.com/6pmNZ.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6pmNZ.png"" alt=""enter image description here""></a></p>

<p>So my question is, Why Android Studio shows files with identical changes in commit changes dialog and how can I solve it? I tried google but didn't found any related question.</p>
","0","4055635","0","0"
"53194276","3986699","2018-11-07 17:00:44","2","131","<git><git-commit>","git commit log is not same for using name and email","<p>I am searching for git commands to get all commits of an author. There are a lot of options available to do this. For example</p>

<pre><code>git log --author=""&lt;author&gt;"" --pretty=""%H""
</code></pre>

<p>Using name of an author within &lt;> provides different number of commits with respect to email address of the author.</p>

<p>The similar thing happens if I use <code>git shortlog -sn</code> and <code>git shortlog -sne</code>.</p>

<p>Why the number of commits is different for using name vs email? </p>
","3","3986699","0","0"
"53196103","10281672","2018-11-07 19:03:02","0","113","<git><git-merge><git-commit>","Correct way of pushing the code from a branch to the master branch in git?","<p>I have a doubt regarding the steps which we follow to push the code in a branch.</p>

<p>So in our application, we have a master branch and I have created a branch of the master branch for my own practice where I make changes for a given case. When it is reviewed by my manager, I need to push that code on the master branch. </p>

<p>Below are the steps I follow for pushing the code: 
Master branch name - development
My local branch name - neil/development</p>

<ol>
<li><p>Initially I go to <strong>development</strong> branch and do <strong>git pull</strong> so that I have the latest version of the master branch.</p></li>
<li><p>After that I go to my branch using <strong>git checkout neil/development</strong> and merge it with the Master branch <strong>development</strong> so that my own branch and master branch are inline using <strong>git merge development</strong> command</p></li>
<li><p>After that I merge the master branch with my own branch <strong>neil/development</strong> so that my changes are merged with the master branch.</p></li>
</ol>

<p>After this, I commit all the changes and push them.</p>

<p>I have read about <strong>rebase and cherry pick</strong> commits but I don't know how to use it.</p>

<p>Could you guys guide me if I can push my own branch changes to the master branch in a simpler manner?</p>

<p>Thanks in advance.</p>
","1","10281672","0","0"
"71189122","10864356","2022-02-19 20:56:02","-1","549","<git><git-commit><git-checkout>","Git: checkout out most recent commit vs checkout out name of branch?","<p>I just did a <code>git commit</code>, then did <code>git checkout &lt;previous commit&gt;</code>, then did <code>git checkout &lt;most recent commit&gt;</code>. It then said I was in a detached HEAD state. I think I read somewhere that instead of doing <code>git checkout &lt;most recent commit&gt;</code> I should do <code>git checkout &lt;branch name&gt;</code> instead of <code>git checkout &lt;most recent commit&gt;</code>.</p>
<p>What's the difference between these?</p>
","0","10864356","",""
"71193122","11143763","2022-02-20 09:39:40","1","90","<git><github><certificate><commit><git-commit>","A way to unverify a GitHub commit","<p>Every time I commit using GitHub's web interface, my commit gets marked as &quot;Verified&quot;. Is there a way I can prevent the verify tag from being displayed (yes, I DO need it)?</p>
","4","11143763","0","0"
"53213341","9195105","2018-11-08 17:41:27","6","5166","<git><github><git-commit><git-push>","Git Commit Daily or Commit when Feature is completed?","<p>I want to know what will be more feasible (or convention to follow) if i Commit/Push my daily progress on a feature or i Commit/Push when a feature or a module is completed ?</p>
","8","9195105","0","0"
"71207808","7046938","2022-02-21 14:15:15","0","612","<intellij-idea><git-commit><git-push>","Does intellij offer master branch protection","<p>I want to know if Intellji offers master branch protection and if so how do I implement it?</p>
<p><strong>Scenario</strong>,</p>
<p>I checkout the master branch from a repo and make a small change but forget to create a feature branch ... how can I protect myself from committing and pushing those changes directly to the master branch via the commit option on IntelliJ (cmd and k)?</p>
","0","7046938","",""
"53223725","8860862","2018-11-09 10:11:51","4","5936","<github><git-commit><git>","fatal: cannot update the ref 'HEAD': unable to append to '.git/logs/HEAD': Bad file descriptor","<p>I am working on Robot framework Automation project. All of a sudden git commit does not work I get below error on commit command </p>

<pre><code>**fatal: cannot update the ref 'HEAD': unable to append to '.git/logs/HEAD': Bad file descriptor**
</code></pre>

<p>I am working on Windows machine. I have done 4 commits till now and code is in Repo. With the latest changes, commit is not happening with above error I have gone through few issues quoted in stack-overflow regarding this but I could get it resolved. </p>

<p>Please help me in overcoming this issue </p>

<p>I use the command <code>git commit -a -m ""description""</code> or <code>git commit -m ""description""</code></p>

<p>None of the sudo command work for me it says </p>

<pre><code>&gt; $ sudo chown -R useremail .git/ 
&gt; bash: sudo: command not found
</code></pre>
","5","8860862","0","0"
"36280152","4166822","2016-03-29 09:19:21","1","1333","<git><git-rebase><git-commit>","""(NO BRANCH, REBASING BRANCH_NAME)"" prefixing each commit message after git rebase","<p>I'm trying to edit a few previous commit messages. I started by doing a</p>

<p>git rebase -i %%commit-hash%%</p>

<p>Then, I set to 'reword' all the commits I wanted to edit, and subsequently edited the commit messages in the interactive process produced by git.</p>

<p>However, to my surprise, now  each commit message is prefixed by: ""(NO BRANCH, REBASING BRANCH_NAME)"".</p>

<p>Why is this happening? And more importantly, how do I prevent git from inserting the prefix into my commit messages?</p>
","0","4166822","0","0"
"36291216","337134","2016-03-29 17:33:36","5","11642","<git><github><version-control><git-commit><git-add>","Changes not staged for commit even after git add","<p>Here are the git commands which I have typed</p>

<pre><code>$ git add -u -n
add 'proj1/Foo.scala'
$ git add .
$ git add .
$ git commit -m ""message""
On branch feature/branch
Your branch is up-to-date with 'origin/feature/branch'.
Changes not staged for commit:
    modified:   ../proj1/Foo.scala
</code></pre>

<p>So why did I get the <code>Changes not staged for commit</code>? as you can see that I did <code>git add .</code> twice</p>

<p>Now if I got ahead and do</p>

<pre><code>git add ../proj1/Foo.scala
</code></pre>

<p>and then do commit it works. Why should I do each file specifically rather than just do <code>git add .</code></p>
","4","337134","",""
"71239073","3442860","2022-02-23 14:47:00","5","459","<git><comments><git-commit><commit-message>","Should I write the reasoning in the commit message or an inline comment?","<p>I've often heard that the commit message should describe why I'm making these changes. And I think I agree with that. However, I've also often heard that inline comments (i.e. comments in the source code) should tell why the code works in this particular way instead of what it does.</p>
<p>So, when should I put the reasoning in the commit message, and when should it be written in an inline comment? Is there some rule-of-thumb or best practice that can be applied?</p>
","3","3442860","",""
"71251304","2416601","2022-02-24 11:33:57","0","354","<git><git-commit><git-checkout>","Checkout files from a specific commit failed with space in the path","<p>What I want to achieve is to get all updates of a specific commit 76363636 from branch1 to branch2.</p>
<p>I used following codes instead of just checkout this commit, as it does not fit my purpose :</p>
<pre><code>git checkout branch1 $(git diff-tree --no-commit-id --name-only -r 76363636)
</code></pre>
<p>This work fine when the file path in the commit does not have space in between. I used this code several times.</p>
<p>But not when there is space in one the file path , ex. below :</p>
<blockquote>
<p>force-app/main/default/layouts/PersonAccount-Layout
Professionnel.layout-meta.xml</p>
</blockquote>
<p>I get following error :</p>
<blockquote>
<p><em>error: pathspec 'force-app/main/default/layouts/PersonAccount-Layout' did not match any file(s) known to git</em></p>
</blockquote>
<p>How to actually protect the file with double quote as I am getting the files dynamically</p>
<p>The below code won't work :</p>
<pre><code>git checkout branch1 &quot;$(git diff-tree --no-commit-id --name-only -r 76363636)&quot;
</code></pre>
","0","2416601","",""
"71259734","10259491","2022-02-25 00:27:11","1","47","<git><github><git-commit><git-rebase>","GitHub shows incorrect commit dates with force push after git rebase","<p>On a new branch, I amended an older commit message by using the <code>reword</code> option in a <code>git rebase</code>. But, after doing a force push with <code>git push -f</code>, GitHub shows different commit history dates with all the newer commits, including the amended commit, under the current date. But, doing <code>git log</code> on the local branch shows the correct commit dates. How can I force push the branch so that GitHub shows the correct commit dates?</p>
","1","10259491","",""
"53295650","5658251","2018-11-14 08:15:43","0","1518","<git><git-commit><git-push><eclipse-oxygen><git-stage>","Commit and Push in eclipse commits entire file as changed","<p>I have started to use the Git staging in ""Eclipse Jee Oxygen"". Everytime I make a small change to a file(fix a bug), I have to commit and push. But in git, the entire file is shown to have changed. Why is this happening? This confuses other people working on the same repository. </p>

<p>How do I resolve this issue to commit and push only changes from Git staging view of Eclipse?</p>

<p>Any help is appreciated.</p>
","2","5658251","0","0"
"36354436","2624806","2016-04-01 10:51:33","0","24","<git><git-commit><merge-conflict-resolution><mergetool>","Resolved issue between no commited same local system and git file","<p>In one of git scenario, I have same not commit file on local system which is available on git Server as well. Now situation is, I haven't add these local system file and after stashing when I'm trying to pull master it prompt <strong>error</strong> to delete these local files.</p>

<p>Any suggestion how to fix this.</p>
","1","2624806","",""
"65083092","3693060","2020-12-01 00:28:31","8","13067","<git><azure-devops><git-commit>","ADo repository: The push was rejected because commits contain author email which does not match the policy-specified patterns","<p>I'm trying to push commits from my GitHub repository to an ADO repository. The commits in GitHub repository are added by myself and some other authors. On pushing commits to my remote branch in ADO repository, I see this error:</p>
<p>VS403702: The push was rejected because one or more commits contain author email 'xyz@users.noreply.github.com' which does not match the policy-specified patterns.</p>
<p>Is there a way to fix this issue?</p>
","2","3693060","0","0"
"36367631","3711788","2016-04-01 23:57:33","-1","1172","<git><gitlab><git-commit>","Git : Should I Revert and Review?","<p>My team and I are working with GitLab, and we are still beginners at using Git, I made some changes and I want to commit them, should I pull or push before? I tried to pull before committing the changes and always get : you may revert or review and commit... </p>
","2","3711788","",""
"29012754","1730271","2015-03-12 14:41:51","0","142","<git><git-commit>","Fix All Commit Messages in Git","<p>I am in process of migrating a subversion repository to git.  We enforce a commit message format like so:</p>

<p><code>[#&lt;Issue Number Here&gt;] The commit message.</code></p>

<p>During the migration, I noticed that some people put a new line into the commit message like this:</p>

<pre><code>[#&lt;Issue Number Here&gt;]
The commit message.
</code></pre>

<p>I'll be adding a pre-commit hook to enforce our message format once the migration is complete, but how can I fix existing all commit messages after I've used <code>git svn</code> to clone the source repository?</p>
","0","1730271","",""
"66493565","15264181","2021-03-05 13:36:59","1","269","<python><git><git-commit><gitpython>","git commit miss, can't get it","<p>I clone the 'Apache/tomcat' git repo to use some info about commit.</p>
<p>However, when i use <code>git.repo('repo local address').iter_commits()</code>, i can't get some commits.
Besides, I can't search these in github search engine.</p>
<p>For example, <a href=""https://github.com/apache/tomcat/commit/69c56080fb3355507e1b55d014ec0ee6767a6150"" rel=""nofollow noreferrer"">commit 69c56080fb3355507e1b55d014ec0ee6767a6150</a> is in the 'Apache tomcat' repo, however, <a href=""https://github.com/apache/tomcat/search?q=69c56080fb3355507e1b55d014ec0ee6767a6150"" rel=""nofollow noreferrer"">search '69c56080fb3355507e1b55d014ec0ee6767a6150' in 'in this repository'</a>  get nothing.
It's amazing for me.</p>
<p>It seems like that the commit isn't in the master branch, so can't be searched?</p>
<p>I want to know the theory behind this and how to get info about these 'missing' commits in Python.</p>
<p>Thanks.</p>
","0","15264181","",""
"36369602","1746118","2016-04-02 05:33:40","12","12502","<github><git-commit><github-for-mac>","What is the difference between summary and description in GitHub Desktop?","<p>Though I don't find it annoying or anything like that but I just wanted to know how is specifying either of the <code>summary</code> or <code>description</code> different while making a <code>commit</code> using the desktop version on GitHub? How do I provide these two together on terminal using <code>git commit</code> ? </p>
","0","1746118","0","0"
"48949073","3198270","2018-02-23 13:34:28","-1","133","<git-commit><git-refspec>","Laravel + Angular project commit error: src refspec master does not match any","<p>There is a project that is coded using angular and laravel. I downloaded it from server to my local. After doing some cleaning, tried to commit to git. But I see the same error everytime which I specified on header.
After some tests, when I was looking here for the same errors, I couldn't find any solution. There are my steps:</p>

<pre><code>   1. cd sysGarden
   2. git init
   3. git add .
   4. git commit -m ""first commit""
   5. git remote add origin git@github.com:biyro02/sysGarden.git
   6. git push -u origin master
</code></pre>

<p>After the last step I saw errors. I have an account on github. You can look: <a href=""https://github.com/biyro02/sysGarden"" rel=""nofollow noreferrer"">https://github.com/biyro02/sysGarden</a>
On git bash, I have logged in with my user name and password. Everything ok but I see errors. Please help me. This is my first git commit. I am ready to share my all infos. Just, I want to exceed this problem. </p>

<p>Edit: I execute ""git branch"" result: * master</p>

<p>Edit 2: I got the error below:</p>

<pre><code>   git@github.com: Permission denied (publickey).
   fatal: Could not read from remote repository.

   Please make sure you have the correct access rights
   and the repository exists
</code></pre>
","2","3198270","",""
"71331642","11625775","2022-03-03 03:02:31","0","40","<git><git-commit>","Committing issues in Git","<p>I am working on a project where I had made a few changes, committed it and pushed it, however later, I forgot about these changes, soft reset these changes and put them with my next commit, is there anyway I can recover the old commit without affecting the new changes I made? Thanks.</p>
","1","11625775","",""
"53771489","10788397","2018-12-13 23:21:45","1","1839","<bash><git><hook><githooks><git-commit>","Git prepare-commit-msg hook does not get any arguments","<p>I want to create custom <code>prepare-commit-msg</code> hook for my git repository.
Firstly I read about arguments, so I created something like test to see values of those arguments.</p>

<pre><code>#!/usr/bin/env bash

readonly file_with_message=$1
readonly source_of_message=$2
readonly commit_sha=$3

echo ""File: \""${file_with_message}\""""
echo """"
echo ""Source: \""${source_of_message}\""""
echo """"
echo ""SHA: \""${commit_sha}\""""
echo """"
</code></pre>

<p>And I got following log:</p>

<pre><code>File: """"

Source: """"

SHA: """"

commit-msg File: """"
[1111-pre-commit-msg-test 4f347d4] add .idea
5 files changed, 189 insertions(+)
create mode 100644 .idea/fast.iml
create mode 100644 .idea/misc.xml
create mode 100644 .idea/modules.xml
create mode 100644 .idea/vcs.xml
create mode 100644 .idea/workspace.xml
</code></pre>

<p>Basically, I can see, that my hook is being executed during the commit, but there are no arguments. There should be at least the first one.</p>

<pre><code>$ git --version
git version 2.17.2 (Apple Git-113)
</code></pre>

<p>Does anyone know, why it happened?
Thx :)</p>

<p>PS: I can see the same behaviour for <code>commit-msg</code> hook. (there is also one log msg from that)</p>
","4","10788397","",""
"37172742","1062503","2016-05-11 20:32:59","0","487","<git><git-commit>","Project file structure change and Git","<p>I have a regular repo with only master.</p>

<p>I have been making commits ...</p>

<p>I needed to restructure the file paths of the entire project.</p>

<p>I commited the file path changes as normal.</p>

<p>How do I make the repo only show the new file structure. When I look at the repo I can see the files showing in both the old location and the new location?</p>

<p>Or should I just leave as-is?</p>
","4","1062503","",""
"17368423","2131316","2013-06-28 15:33:19","0","514","<git><gerrit><git-commit><git-amend>","how the git commit --amend working together with gerrit?","<p>I staged and committed 5 files and pushed it gerrit, but before it is merged in to git, I updated 3 of them then I git commit --amend to the last commit, and if I do push to gerrit again, does this second path contains the updates in the other two files?</p>
","0","2131316","",""
"71346938","10864356","2022-03-04 05:23:26","1","63","<git><git-branch><git-commit><git-checkout><git-detached-head>","Git: If I've been working in detached head state for multiple commits, will I lose anything by getting out of it?","<p>A while ago I checked out a previous commit, then checked out my most recent commit again. I didn't realize this at the time, but that left me in a detached head state. I've done multiple commits since then, and am still in the detached head state. I know I can get out of this state by doing <code>git checkout &lt;branch name&gt;</code>, but if I do this will I lose anything?</p>
","0","10864356","",""
"37186727","6325439","2016-05-12 12:20:02","0","149","<git-commit>","git: edit a local commit without changing its commit id","<p>Is there a way to edit/add files to an existing commit with out changing its commit ID.</p>

<p>I used git commit --amend but it changes the commit ID.</p>

<p>This is required for the reviewboard, as it generates reviews based on commit ids.</p>
","1","6325439","",""
"17375194","150872","2013-06-28 23:43:06","10","4403","<git><git-commit><blame>","git: blame the previous version of each line changed in a given commit","<p>For a given commit, I need to run blame on the previous version of each line changed but said commit.</p>

<p>Having a commit that changes lines 2 and 3 on file a, I want a way to see the output of <code>git blame commit^</code> limited to the preamble and the lines 2 and 3.</p>

<p>How can I do that?</p>

<h2>EDIT</h2>

<p>Seems like I have to explicitly specify that I'm looking for a way to do the above <em>programmatically</em>, and not examining the commit with my own eyes, determining which lines of which files where changed, and then manually run git blame for each single changed file.</p>
","1","150872","0","0"
"37195176","1551948","2016-05-12 18:49:58","1","35","<git><git-commit><git-push>","Is there a way to display a message to an end-user when they commit a file in Git?","<p>When anybody makes a change to a specific file in my Git repo, I'd like to display a message to the user when they commit or push via Git CLI.</p>

<p>Scenario: User alters <code>crazycalculations.py</code>, I'd like to say, ""Hey, I notice you altered crazycalculations.py.  Did you have John in Accounting review your change?"".  Just a friendly reminder to the end user that their messing with a file that is not to be messed with without supervision.</p>

<p>Any suggestions on how I can accomplish this?</p>
","0","1551948","",""
"37203545","1986826","2016-05-13 07:14:57","2","139","<git><git-branch><git-commit><git-checkout>","How can i copy a file from local commit on a different branch?","<p>I committed a file on <code>master</code> branch but not pushed <code>remote</code>. Now i am working on <code>feature</code> branch and i want that file to be copied to <code>feature</code> branch from <code>master</code> branch. </p>

<p>How can i  do this?</p>
","0","1986826","",""
"36420251","4274296","2016-04-05 07:52:36","5","1748","<android-studio><git-commit>","Android Studio and Git commit error","<p>I made a first git commit from inside an Android Studio project.
It asked me to check for a CR option, i have done that, and it was successful but some files were left again in the Local Changes tab.
Then I tried a second commit and it failed with the same error for all the left files:</p>

<blockquote>
  <p>0 files committed, 46 files failed to commit</p>
  
  <p>Error:warning: CRLF will be replaced by LF in gradlew.bat.
  The file will have its original line endings in your working directory.</p>
</blockquote>

<p>(Android Studio 1.5.1 on Ubuntu 14.04)</p>

<p>How can I solve the issue?</p>
","0","4274296","0","0"
"36422146","1654520","2016-04-05 09:21:14","0","200","<git><git-commit><git-reset><git-revert>","git checkout commit and then making it the base","<p>I'm on a branch called <code>A</code>..</p>

<p>the branch <code>A</code> has two commits, with the following codes: <code>commit1</code> and <code>commit2</code> where the most recent is <code>commit2</code>.</p>

<p>i just noticed i want to go back to <code>commit1</code> because in <code>commit2</code> I deleted a file I needed and i wrote some useless code.. i want to go back to <code>commit1</code> so i do <code>git checkout commit1</code></p>

<p>on the terminal it now says i'm here: <code>$ git:(commit1)</code> but what I expected was  <code>$ git:(A)</code></p>

<p>i'm not sure how to make <code>commit1</code> my base for the the branch.</p>

<p>is it <code>git revert</code>? <code>git reset</code>? I've read the docs but I'm not quite sure what to do</p>
","1","1654520","",""
"53374674","5259677","2018-11-19 12:29:14","0","39","<github><statistics><git-commit>","GitHub claimed to have reach 1.1 Billion contributions. What is a contribution?","<p><a href=""https://octoverse.github.com/"" rel=""nofollow noreferrer"">Github latest Octoverse</a> states </p>

<blockquote>
  <p>This year, you're collaborating more than ever before, with 1.1
  billion contributions—and counting.</p>
</blockquote>

<p>Whereas the <em>Overview</em> section gives explanation for each word used (eg <em>Organization</em>, <em>Repository</em>) the term <em>contribution</em> is not explained.</p>

<p>Is it a commit? A commit or a pull-request? A modification?</p>

<p>Any idea, with source will be welcome!</p>
","1","5259677","",""
"37222133","945871","2016-05-14 03:20:09","2","3122","<git><github><git-commit><git-push>","Where is my commit and why I can't push?","<pre><code>Igors-MacBook-Air:text igorkorot$ git status
On branch text_indent
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   ../../../samples/text/text.cpp
    modified:   ../../../samples/widgets/widgets.cpp
    modified:   ../../../src/osx/cocoa/textctrl.mm

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    ../../../9302.patch
    ../../

no changes added to commit (use ""git add"" and/or ""git commit -a"")
Igors-MacBook-Air:text igorkorot$ git add ../../../samples/text/text.cpp ../../../src/osx/cocoa/textctrl.mm 
Igors-MacBook-Air:text igorkorot$ git commit
[text_indent 39d71df] Left indent on Cocoa
2 files changed, 33 insertions(+), 8 deletions(-)
Igors-MacBook-Air:text igorkorot$ git push
warning: push.default is unset; its implicit value is changing in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Everything up-to-date
Igors-MacBook-Air:text igorkorot$ git status
On branch text_indent
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   ../../../samples/widgets/widgets.cpp

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    ../../../9302.patch
    ../../

no changes added to commit (use ""git add"" and/or ""git commit -a"")
Igors-MacBook-Air:text igorkorot$ pwd
/Users/igorkorot/wxFork/buildMac/samples/text
Igors-MacBook-Air:text igorkorot$ cd ../../..
Igors-MacBook-Air:wxFork igorkorot$ git status
On branch text_indent
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   samples/widgets/widgets.cpp

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    9302.patch
    buildMac/

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I forked the main wxWidgets repo in wxFork directory. But I didn't commit from that directory.</p>

<p>So where is my commit and how do I push my changes to my fork?</p>

<p>Thank you.</p>

<p>[EDIT]</p>

<p>The results are:</p>

<pre><code>Igors-MacBook-Air:wxFork igorkorot$ git remote show origin
* remote origin
  Fetch URL: https://github.com/oneeyeman1/wxwidgets.git
  Push  URL: https://github.com/oneeyeman1/wxwidgets.git
  HEAD branch: master
  Remote branches:
    AUTOCONF_ARCHIVE        tracked
    BAKEFILE                tracked
    BAKEFILE_BRANCH         tracked
    CPPUNIT                 tracked
    EXPAT                   tracked
    GSTREAMER               tracked
    GTK1                    tracked
    GTK2                    tracked
    LIBPNG                  tracked
    NEW_TBAR                tracked
    PKG_CONFIG              tracked
    RXSPENCER               tracked
    SDL                     tracked
    SOC2006_RTL             tracked
    SOC2006_SOCKETS         tracked
    SOC2007_DVC             tracked
    SOC2007_WXWEB           tracked
    SOC2007_XTI             tracked
    SOC2008_WXWALLCTRL      tracked
    SOC2009_AUI             tracked
    SOC2009_FSWATCHER       tracked
    SOC2009_RIBBON          tracked
    SOC2010_GUI_TEST        tracked
    SOC2010_MASKED_CTRL     tracked
    SOC2010_RTC_IMAGES      tracked
    SOC2010_WIN7_UI         tracked
    SOC2011_ANIMATION       tracked
    SOC2011_GTK3            tracked
    SOC2011_WEBVIEW         tracked
    SOC2011_WXIOS           tracked
    SOC2014_QT              tracked
    SOC2014_TASKBAR         tracked
    WXSTANDALONE_EXPERIMENT tracked
    WX_2_0_FIXES            tracked
    WX_2_10_BRANCH          tracked
    WX_2_2_BRANCH           tracked
    WX_2_4_BRANCH           tracked
    WX_2_6_BRANCH           tracked
    WX_2_8_BRANCH           tracked
    WX_2_8_MICROFIX_BRANCH  tracked
    WX_2_9_0_BRANCH         tracked
    WX_3_0_BRANCH           tracked
    ZLIB                    tracked
    arbitrary_weights       tracked
    karsten                 tracked
    master                  tracked
    ownerdraw-refactor      tracked
    show_hidden             tracked
    wxPy-3.0-branch         tracked
    wxPy-3.0.0              tracked
    wxPy_branch             tracked
    wxPy_newswig            tracked
    wxPy_temp_253_branch    tracked
    wxQT                    tracked
    wxSYMBIAN               tracked
    wxUNIVERSAL             tracked
    wxWebKitBranch-2.8      tracked
  Local branches configured for 'git pull':
    arbitrary_weights merges with remote arbitrary_weights
    master            merges with remote master
    show_hidden       merges with remote show_hidden
  Local refs configured for 'git push':
    arbitrary_weights pushes to arbitrary_weights (up to date)
    master            pushes to master            (up to date)
    show_hidden       pushes to show_hidden       (up to date)

Igors-MacBook-Air:wxFork igorkorot$ git remote -v
origin  https://github.com/oneeyeman1/wxwidgets.git (fetch)
origin  https://github.com/oneeyeman1/wxwidgets.git (push)
</code></pre>

<p>[/EDIT]</p>
","0","945871","",""
"50920506","5484302","2018-06-19 04:07:13","69","68291","<git><git-commit><nano>","How to commit a change in git when git commit opens Nano?","<p>I'm new to git and I'm trying to commit my first changes on a Windows machine. However, when I type in <code>$git commit</code> it takes me to a different screen than any online tutorials show or than what is mentioned in <a href=""https://git-scm.com/book/en/v2"" rel=""noreferrer"">Pro Git</a>. No online searching yields an explanation of how to use this screen, either.</p>

<p>The screen looks like this: <a href=""https://i.stack.imgur.com/qobmR.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/qobmR.png"" alt=""The git commit screen I&#39;m having trouble with""></a></p>

<p>I have tried every key on the keyboard, but nothing seems to actually <strong>do</strong> the commit. Also there are all these little help options in green at the bottom of the screen that seem to be giving commands, but when I press the buttons they show it just types them into the commit message. What are those help options and how do I use them?</p>

<p>Everyone else seems to be using something called ""vim"" which I believe I chose not to install when installing Git because I thought the Windows console was fine.</p>

<p><em>So how do I actually commit and what are those green commands at the bottom of the screen?</em> Thanks!</p>
","4","5484302","0","0"
"36494472","5962766","2016-04-08 08:00:19","1","741","<git><jar><repository><git-commit><external-dependencies>","Commiting external dependencies with Git","<p>I have tried to added external lib to myProject/libs/externalLib.jar or myProject/src/main/resources/libs/externalLib.jar folders but I can't commit them to repository.</p>

<p>What's the best way to manage external dependencies - jar libs? How to commit them to Git repository? </p>
","6","5962766","",""
"37257273","520567","2016-05-16 15:13:00","2","504","<git><github><git-commit><pull-request>","create multiple pull requests for single file append","<p>not sure if this is the right forum. But I'm stuck at how to create multiple pull requests for a single file that is appended.
My specific use case is <code>Cucumber</code> feature files. One writes a couple of scenarios and wants to put them at the bottom of one file. But for review purposes it is better to have multiple PRs. If multiple PRs are submitted, then first merge PR makes the other PRs into a conflict.</p>

<p>e.g.</p>

<pre><code>my.feature
Feature: My Feature
  ...

  Scenario: new 1
    ...

  Scenario: new 2
    ...
</code></pre>

<p>If one files scenario ""new 1"" as a separate pull, and then a new pull of the base branch with scenario ""new 2"", then merging either of those will result in the other one conflicting.</p>

<p>Update: similar questions without github specifics (probably not possible presently):</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/11841127/strategy-for-git-and-append-mostly-files"">strategy for git and append-mostly files</a></li>
<li><a href=""https://stackoverflow.com/questions/13263902/git-merge-keep-both"">git merge, keep both</a></li>
</ul>
","14","520567","0","0"
"37268416","20358","2016-05-17 06:11:16","1","847","<git><git-commit>","why does the gitk and sourcetree commit graph look different for the same repository","<p>Here is my gitk commit graph ( am I using the correct term here, commit graph?)
<a href=""https://i.stack.imgur.com/FiJZd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FiJZd.png"" alt=""enter image description here""></a></p>

<p>and here is my sourcetree commit graph for the same repository
<a href=""https://i.stack.imgur.com/WC40J.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WC40J.png"" alt=""enter image description here""></a></p>

<p>I am not able to understand why they look different? Shouldn't the <code>gitk</code> graph be a straight line? Does something here need to be fixed?</p>
","9","20358","",""
"37269121","5945307","2016-05-17 06:55:37","0","283","<git><bitbucket><git-commit><git-pull>","Git Pull not working in case of folder that was deleted?","<p>I have pulled a branch from Bitbucket to my local. It contains multiple folders and I deleted one of the folder and commited my changes. Now, if I do a git pull, then shouldn't the deleted folder appear in my local machine again? Its not happening. Any ideas why this might be the case?</p>
","0","5945307","",""
"37269222","5780109","2016-05-17 07:00:46","51","272085","<git><github><git-commit>","git status (nothing to commit, working directory clean), however with changes commited","<p>I found many questions with similar subject, but I didn't found any practical guidance about this issue: why <code>git status</code> informs me <code>nothing to commit, working directory clean</code>, even tough I have made a modification at my local branch?</p>
<p>Here are the steps which I followed:</p>
<ul>
<li><code>git init</code> [On branch master - Initial commit, nothing to commit (create/copy files and use &quot;git add&quot; to track)]</li>
<li><code>git remote add https://github.com/username/project.git</code></li>
<li><code>git pull origin master</code></li>
<li><code>touch test</code></li>
<li><code>git add test</code></li>
<li><code>git commit -m &quot;Adding file for test purposes only.&quot;</code></li>
<li><code>git status</code> [On branch master - nothing to commit, working directory clean]</li>
</ul>
<p>If I do a <code>git push</code>, the modification is committed to the remote branch. I just want to perform &quot;git status&quot; after my modifications, and receive the information that I have changes on my local branch that must be pushed to the remote branch of the project.</p>
<p>What's going on?</p>
","2","5780109","0","0"
"34045598","39242","2015-12-02 14:45:50","2","1010","<git><git-commit><git-tag>","Why do git status and git show disagree?","<p>Why do <em>git status</em> and <em>git show</em> disagree?</p>

<p>The repository is supposed to be at a tag. This is  what <em>git status</em> tells me (hash starting <em>609b</em>). </p>

<p>But <em>git show</em> tells me that it is at commit with hash starting <em>156f</em>. </p>

<p>The current situation comes doing the following to get the codebase at the tag.</p>

<pre><code>git clean -f &amp;&amp; git reset HEAD --hard &amp;&amp; git fetch &amp;&amp; \ 
git fetch --tags &amp;&amp; git checkout daily-build-492 &amp;&amp; git pull
</code></pre>

<p>Why the inconsistency?</p>

<p>Some diagnostics:</p>

<pre><code>$ git status
HEAD detached from daily-build-492
nothing to commit, working directory clean
$ git rev-list -n 1 daily-build-492
609b538fb0180b170170be09312fecf5a5240b6a
$ git show
commit 156f9e6b3fbfe7c16e8d821efd315428610043c2
Merge: ec154d9 15e8876
Author: ubuntu &lt;ubuntu&gt;
Date:   Wed Dec 2 14:09:23 2015 +0000
    Merge branch 'deploy-server'
$ git describe --tags --exact-match
fatal: no tag exactly matches '156f9e6b3fbfe7c16e8d821efd315428610043c2'
$ git log --tags --simplify-by-decoration --pretty=""format:%ai %d"" |grep 492
2015-11-23 07:05:18 +0000  (tag: daily-build-492)
</code></pre>
","7","39242","0","0"
"18737614","22609","2013-09-11 09:36:17","1","2149","<git><gerrit><git-commit><git-review>","Why my branch is ahead of origin/master after git review?","<p>After having my changes submited to gerrit and accepted by a reviewer, git status complains that I'm ahead of origin/master.</p>

<p>Full story:</p>

<p>I've cloned my repo from <code>ssh://luis@somewhere:10022/project.git</code></p>

<p>Because <code>git review -s</code> was complaining about a gerrit remote not existing, I did:</p>

<pre><code>git remote add gerrit ssh://luis@somewhere:10022/project.git
</code></pre>

<p>Note that by now, origin and gerrit both point to the same place (I don't know if that's a problem).</p>

<p>I decided not to use a new branch and just work on master.</p>

<p>After my changes were done and staged I did:</p>

<pre><code>git commit
git review
</code></pre>

<p>At this point git status says that I'm ahead of origin/master by 1 commit, which is odd because I thought that git review had an implicit push.</p>

<p>The changes were reviewed and accepted in the gerrit web-interface and have been merged into origin/master (everyone else can see them), but my local repo still says I'm ahead.</p>

<p>I tried pulling from origin but that triggered a merge, and now I'm 2 commits ahead.</p>

<p>Is this normal? Should I simply discard my extra local changes? Push them to origin?</p>

<p>Thanks,</p>

<p>Luis</p>
","0","22609","",""
"18737640","2548887","2013-09-11 09:37:16","27","40900","<git><github><git-commit><git-stash>","Use git stash save or git commit for local changes?","<p>I changed some files in my repo, but don't want them to be pushed public or create any temporary branch to store them. I just want to save these changes in somewhere. So which command is better:</p>

<pre><code>git stash save ""save message"" 
</code></pre>

<p>or </p>

<pre><code>git commit -am ""save message""
</code></pre>

<p>? </p>

<p>If I use <code>git commit</code>, is it true that all of my local commits will be pushed publicly by one <code>git push</code> command? What if I just want to push one specific commit among them?</p>
","2","2548887","0","0"
"50927407","8825683","2018-06-19 11:32:47","0","886","<git><git-commit><git-diff><git-log>","Why is git diff showing wrong commit?","<p>I was trying to get the diff for a commit with the message <code>Add structure</code> shown below, but <code>git diff fb237ff</code> shows the diff for the commit <code>""Add title""</code> instead. How can I get the diff for the <code>SHA</code> I want instead of the child of this commit?:</p>

<pre><code>commit 31013a1 (HEAD -&gt; master, origin/master)
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:28:52 2018 +0100

    Add title

commit fb237ff
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:24:33 2018 +0100

    Add structure

commit 69d64b4
Author: user.name &lt;user.email&gt;
Date:   Sun Jun 17 19:10:26 2018 +0100

    Add heading
</code></pre>
","1","8825683","",""
"18751845","17688","2013-09-11 21:47:37","2","259","<git><date><emacs><git-commit><magit>","Why might the author date be stuck at an old date with git?","<p>I track all my projects in git. Unfortunately, in my main repository the author date seems to be stuck. It reports as July 15, 12:25:08 -0500 for almost every commit since then. The commit date seems to be working correctly. There is evidence this might be happening in another repository, but it doesn't change enough for me to know for sure.</p>

<p>I've checked the .git/config file, as well as my global .gitconfig file. I can't think of anything special that happened on that day.</p>

<p>I'd like to figure out what's causing this so I can fix it. For bonus points, I'd like to fix all the bad author dates. Since I'm the sole developer (at this point in time) I think it's pretty safe to update all the clones (local repo, local server, GitHub).</p>

<p><strong>Edit:</strong> So far, it looks like magit in Emacs might be doing it. However, I still don't know how or why.</p>
","8","17688","",""
"53804764","4249424","2018-12-16 17:30:35","3","1363","<bash><git><githooks><git-commit><commit-message>","git commit: pre-populate commit subject but still prompt for a commit message","<p>Let's say I'm working on a branch and I run <code>git commit</code>.  I am then taken to the commit message prompt where I may enter a commit subject and message.  What I'm looking for is a way to have the commit subject pre-populated while still being able to write the commit message manually.</p>

<p>This question is distinct from <a href=""https://stackoverflow.com/questions/5894946/how-to-add-gits-branch-name-to-the-commit-message"">this one</a> in that I want the commit subject to be populated but still want to be prompted to enter a commit message, i.e. running <code>git commit -a</code> in git bash results in something like: </p>

<p><strong>Edit:</strong> improper usage of githooks was preventing the accepted answer from the linked question from working.  So, the questions are not distinct and this can be marked as a duplicate.</p>

<p><a href=""https://i.stack.imgur.com/ObO4Q.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ObO4Q.png"" alt=""example in git bash""></a></p>

<p>I'm currently trying to pre-populate the commit subject with a branch name, but in the future I may want that text to be something else.  As such, a general solution (not specifically for branch names) would be preferred. </p>
","3","4249424","0","0"
"37304471","5794667","2016-05-18 15:49:33","1","239","<git><git-commit><code-readability>","Does tidying your code warrant an individual Git commit?","<p>It is established that each individual Git commit should be a <em>single logical change</em>. It is also established that this production process is often messy (see <a href=""http://sethrobertson.github.io/GitBestPractices/#sausage"" rel=""nofollow noreferrer"">sausage-making</a>) and should not be hidden away - Seth Robertson advocates <em><a href=""http://sethrobertson.github.io/GitBestPractices/"" rel=""nofollow noreferrer"">""Commit often, perfect later""</a></em>.</p>

<p>I find that at some point, either at the end of a project or at the end of a series of related commits, I need to tidy my code, especially if I have been engrossed in a problem and working quickly. By <em>tidy</em> I don't mean logical changes that affect the actual workings of the program, but rather things like:</p>

<ul>
<li>Clarifying comments</li>
<li>Changing the order of functions to improve readability</li>
<li>Correcting indents/whitespace</li>
<li>Deleting old tests like <code>// console.log(variables)</code></li>
</ul>

<p>My question is then: <strong>is it best practice to save these 'cosmetic' changes in a separate individual commit? (And if not how should they be committed?)</strong></p>

<p>Note that I'm not inviting <em>opinion</em> on this. Surely there is an established best-practice; the article above emphasises <a href=""http://sethrobertson.github.io/GitBestPractices/#enforce"" rel=""nofollow noreferrer"">enforcing standards</a>, so it's important to know what those standards are. </p>

<p>As well as Seth Robertson's article I've read the following existing questions, but I can't find my question addressed anywhere:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/6543913/git-commit-best-practices"">Git-commit-best-practices</a>  </li>
<li><a href=""https://stackoverflow.com/questions/2113305/git-big-commit-best-practices"">Git-big-commit-best-practices</a>  </li>
<li><a href=""https://stackoverflow.com/questions/19655374/git-best-practice-commit-logs"">Git-best-practice-commit-logs</a></li>
</ul>
","3","5794667","",""
"69483464","235472","2021-10-07 15:04:59","1","243","<git><repository><gitignore><git-commit>","Can I make a file in the git repository read-only?","<p>If I add a filename to gitignore, this will be ignored by git and will not go in the repository. What I would like to do is to have a specific file in the upstream repository, allow everybody to check it out and modify it according to their needs, but then exclude it from their commits.</p>
<p>Basically I would like the repository to provide a template configuration file that needs to be fine tuned depending on the development environment of each developer, but that must not be modified in the repository.</p>
","2","235472","",""
"34077608","5074880","2015-12-03 22:40:04","0","34","<git><github><restore><git-commit>","Git File Restore After Committing Twice","<p>Suppose I have a file called header.php, and I delete it by accident. I continue working, make several commits and then notice the absence. Then, due to my lack of knowledge on how to do this, I copy a version of this file manually from the master branch and re-create it. I then commit this change and some others later. </p>

<p>My question is how do I restore it properly from the first deleted version? I found an answer here that talks about the case of no commit and the last commit related to this file. However, for me, it is the second before last commit related to this file.</p>

<p><a href=""https://www.quora.com/How-can-I-recover-a-file-I-deleted-in-my-local-repo-from-the-remote-repo-in-Git"" rel=""nofollow"">https://www.quora.com/How-can-I-recover-a-file-I-deleted-in-my-local-repo-from-the-remote-repo-in-Git</a></p>
","0","5074880","0","0"
"18768258","799176","2013-09-12 15:21:39","4","3146","<github><git-commit>","GIT: Corrupt MERGE_HEAD file when merging with master","<p>When i tried to merge with <code>master</code> branch from <strong>GitHub</strong>, i got lots of conflict. I have fixed all of them and tried to commit. But i got following message:</p>

<pre><code>fatal: Corrupt MERGE_HEAD file (0da861af91a7df624577f1aa4ee0716b3dffa4af)
</code></pre>

<p>When i tried by GUI mode i got <code>HEAD file not exist</code> type message. I have added the screenshot as following:</p>

<p><img src=""https://i.stack.imgur.com/AP1ZG.jpg"" alt=""enter image description here""></p>

<p>Now im confused how to solve it! I have searched in google and stackoverflow. But i dont get any solution. Please help me.</p>
","1","799176","0","0"
"18775910","2571840","2013-09-12 23:33:03","0","116","<git><git-commit>","How to remove next commits","<p>I've done some commits at my repository that I want to remove. I've come back to the commit which I want to preserve:</p>

<pre><code>$ git checkout commit_hash_num
</code></pre>

<p>How should I proceed to remove the next commits? </p>
","0","2571840","",""
"72023791","16167121","2022-04-27 05:43:51","1","176","<git><version-control><git-branch><git-commit><git-checkout>","Git - Loosing file after renaming and branch, why?","<p>I initialize a new repository in an empty folder:</p>
<pre><code>git init
</code></pre>
<p>Now I copy two files A.java and B.java into this folder and commit:</p>
<pre><code>git add A.java B.java &amp;&amp; git commit -m &quot;Added A.java and B.java to repo&quot;
</code></pre>
<p>Next I create a new branch:</p>
<pre><code>git branch newBranch
</code></pre>
<p>Afterwards I rename B.java to C.java (intentionally not using <code>mv</code>) and commit on the master branch. For git it is a deletion of B.java and a creation of C.java:</p>
<pre><code>git add C.java &amp;&amp; git commit -m &quot;Renamed B.java to C.java&quot;
</code></pre>
<p>Follow on I wanna switch to my newly created branch:</p>
<pre><code>git checkout newBranch
</code></pre>
<p>When I take a look on my working directory now B.java will be gone and only A.java exists. Why? I did the branch before the second commit. I would expect that A.java and B.java are in their original state as when I executed the <code>branch</code> command. But obviously they are not and I don't understand why. Why is B.java gone?</p>
","0","16167121","0","0"
"53482806","1326367","2018-11-26 14:03:50","2","181","<github><git-commit><git-push><git>","how to cherry pick commits while push to the same branch","<p>I have following commit ids in git log against my some feature branch.(feature/navigation)</p>

<pre><code>git log --pretty=oneline

8fc7aeb 
7b7809e
20d9bb2
7f302cb
9f0a3b5
fad0df5
011886a
</code></pre>

<p>If it was one commit the following command will do.</p>

<pre><code>git push origin 7b7809e:feature/navigation
</code></pre>

<p>But here I am in need to push 4 commits which are not in order.</p>

<p>the commits that I need to pick from the above list are:-</p>

<p>#1 8fc7aeb <br/>
 #2 7b7809e <br/>
 #4 7f302cb <br/>
 #6 fad0df5</p>

<p>How can I do this?? (Pushing commits on the same branch i.e., feature/navigation)</p>

<p>Thanks.</p>
","0","1326367","",""
"50932369","4443164","2018-06-19 15:49:29","1","49","<git><github><git-commit>","How to remove commit in github","<p>I already delete the commit from all branch, but I can still find the commit tree in github. </p>

<p>e.g.: the commit hash is <code>37b864ce1b60aa426f03ffd0b3e6e010ef5f194d</code>, I cannot find this commit in any branch. but I can still find the tree with that commit from <code>https://github.com/&lt;user-name&gt;/&lt;project-name&gt;/tree/37b864ce1b</code>. </p>

<p>How can I delete this commit from github? </p>
","1","4443164","",""
"37371530","5465395","2016-05-22 07:07:52","2","1320","<git><git-commit><internal>","can commits by TWO people have the same hash?","<p>Update: I mixed two things together: the first line actually points to the directory (as very well explained in the answers below), and the second line points to parent commit. I let the second misled me.  Thank you all for your clarifications.</p>

<hr>

<p>I am learning git, and I was copying the code <a href=""http://maryrosecook.com/blog/post/git-from-the-inside-out"" rel=""nofollow"">she</a> does. I was in the subsection called <em>Make a commit that is not the first commit</em>. After she committed, this is what she got (I crossed out her email for formatting reason):</p>

<blockquote>
  <p>tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556 </p>
  
  <p>parent 774b54a193d6cfdd081e581a007d2e11f784b9fe </p>
  
  <p>author Mary Rose Cook ...</p>
  
  <p>committer Mary Rose Cook ...</p>
  
  <p>a2</p>
</blockquote>

<p>And, mysteriously, I got (I crossed out my personal info)</p>

<blockquote>
  <p>tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</p>
  
  <p>parent c96fbf6143ccef645d1cb867b05427c399a9bcb3 </p>
  
  <p>author ....  </p>
  
  <p>committer ...</p>
  
  <p>a2</p>
</blockquote>

<p>Comparing the two hashes for the current tree, it is clear that we both get the same hash (I do follow her code exactly).</p>

<p>So I am very curious about how this is possible? I know git supposedly hashes the snapshot of that moment, but my megadatas are surely not the same as hers. May someone knows what happens?</p>
","3","5465395","0","0"
"71491371","18478510","2022-03-16 03:05:33","-1","139","<git><github><git-commit><git-push><git-pull>","Basic question on practice of git pull before git push","<p>On a high level, I understand that it's a good practice to git pull(and manually merge conflicts if any) before git-push. I am working in an enterprise setting. My questions are:</p>
<p>(1) Can I do git-push without first git-pull?. Is it not allowed at all or github can be configured (by admin) to behave in a certain way -- say to crib during push that pull was not done or to not crib at all..</p>
<p>(2) Following up on (1) question, say I did do git pull first, but then I didn't really merge anything gracefully and just overwrote in local files and then try to git push, will this go through?. I mean for namesake/record, I did git-pull, though I didn't honor it...what prevents a user from doing this (if at all).</p>
<p>(3) Is there a way to configure a branch so that pushes to the branch only happen thru pull request and not directly (say from command line etc). Is there a notion of something like branch owner who can configure whether to allow direct push or not?.</p>
<p>(4) I understand that some of this could be tried by running some experiments, but that would only give me some idea on my current setup. I want to understand what is the standard behavior and what all can be customized...</p>
","0","18478510","",""
"69492024","15826727","2021-10-08 07:22:49","1","601","<git><repository><commit><git-commit>","Does a long commit history make cloning a Git repository slow?","<p>I have a Git repository with a very long commit history. For the sake of simplicity let's say my old repo only contains the master branch with commits COMMIT-1...COMMIT-10000. I was wondering if I could reduce the time needed for cloning and the required space for the local repo if I created a &quot;copy&quot; of the given repository by creating a large &quot;squashed&quot; commit (COMMIT 1*) that includes all the modifications so far.</p>
<p>Sketch of the modification:</p>
<pre><code>CURRENT REPO     -----&gt;     NEW REPO
COMMIT-10000                COMMIT-1*
     |
    ...
     |
  COMMIT-1
</code></pre>
<p>Would this actually improve the cloning speed or the memory requirement?</p>
<p>Are there any generally applicable solutions to improve these things?</p>
","1","15826727","",""
"50936366","9294546","2018-06-19 20:22:30","1","475","<git><git-commit><git-config>","Git config error - atom editor","<p>When I try to commit files I am getting the error below and I am pretty new to git.</p>

<p>hint: Waiting for your editor to close the file... atom --wait: atom: command not found
error: There was a problem with the editor 'atom --wait'.
Please supply the message using either -m or -F option</p>

<p>How can I fix it?</p>

<p>Thanks in advance</p>
","2","9294546","",""
"37395815","2072870","2016-05-23 16:12:49","0","566","<git><github><git-commit>","Github changes not reflecting in remote","<p>I'm trying to see my new project on GitHub and only the initial commit is showing up, despite that I already pushed 6 new commits to master (only branch).</p>

<p>If I push (or even pull from the remote), the console says ""everything up to date"", and if I go to graphs or pulse, it does appear that I have more commits. If I enter the latest commit in the browser url, say ""<a href=""https://github.com/myuser/myproject/tree/7642b5f7afb8787"" rel=""nofollow noreferrer"">https://github.com/myuser/myproject/tree/7642b5f7afb8787</a>..."", everything is updated:</p>

<p><a href=""https://i.stack.imgur.com/Cg2RZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Cg2RZ.png"" alt=""enter image description here""></a></p>

<p>However, if I just go to ""<a href=""https://github.com/myuser/myproject/"" rel=""nofollow noreferrer"">https://github.com/myuser/myproject/</a>""
 or ""<a href=""https://github.com/myuser/myproject/tree/master"" rel=""nofollow noreferrer"">https://github.com/myuser/myproject/tree/master</a>"", only the initial commit appears:</p>

<p><a href=""https://i.stack.imgur.com/iMk0t.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iMk0t.png"" alt=""enter image description here""></a></p>

<p>Does anybody know any possible reasons for this to happen? It is extremely annoying to not see any changes in my repository's main page.</p>
","2","2072870","",""
"19926724","523725","2013-11-12 10:31:42","2","12390","<gerrit><git-commit><git>","Git Working tree is dirty","<p>If I execute <code>git review</code> git shows me ""Working tree is dirty"" error.</p>

<p>I made a commit and I sent to review. After that I update the branch from the upstream using <code>git pull</code>. Now I need to modify the previous commit message, so, there are my commands:</p>

<p>1) <code>git reset &lt;id-of-the-commit-to-modify&gt;</code></p>

<p>2) <code>git commit --amend</code></p>

<p>vim was opened to modify my commit. But here appears information about my commit and others commits as well and I don't know why. However, I modified the commit message and write/close vim.</p>

<p>3) <code>git review</code></p>

<p>This command raise this error:</p>

<pre><code>Errors running git rebase -i remotes/gerrit/master
doc/source/configuration.rst: needs update
doc/source/developing.rst: needs update
tools/sample_data.sh: needs update
Working tree is dirty
</code></pre>

<p>What I doing wrong?</p>
","1","523725","",""
"50937954","9599373","2018-06-19 22:49:39","0","1618","<git><github><commit><git-commit><git-push>","GitHub commit is not linked to my account","<p>All my github commits aren't linked to my account when I push from integrated terminal so I don't appear in any repository insights when it comes about statistics and stuff. Also the commit isn't linked to any author so I wouldn't be reachable</p>

<p>I tried everything found before on GitHub manuals but couldn't solve it
<a href=""https://i.stack.imgur.com/slZ5S.png"" rel=""nofollow noreferrer"">enter image description here</a></p>
","3","9599373","0","0"
"53830288","2879085","2018-12-18 09:47:43","1","350","<git><git-commit><git-pull><git-tag><git-fetch>","Fetch new tags for current commit, without fetching newer commits","<p>Let's say I make a commit and push it, then someone else pulls my commit, creates one or more tags on it, makes a few more commits and then pushes everything again.</p>

<p>How can I now fetch the new tags for the commit that I already have on my machine without fetching more commits (i.e. <code>git pull</code> doesn't count)?</p>

<p><strong>Edit:</strong>
My incentive is to save time and resources. 
Basically whenever I push a new commit to GitLab, a chain of automated jobs is triggered within GitLab. The first one analyzes the commit message (which follows a certain convention) and then decides what kind of version bump would be appropriate, then it checks the version tag for the previous commit and creates a new one for the current commit with the appropriate version bump.<br>
Then the next job is triggered. This job might be responsible for compiling the source code. Then another job is triggered which might be responsible for creating a source code archive.<br>
Every job runs within its own temporary Docker container and all containers include a folder representing the repository at the time of pushing. So the newly created tag which is being created in the first job needs to be fetched at the beginning of job 2 and 3 (these jobs need to know the version number, e.g. to give the source code archive a proper name). It would be a waste of resources to do a full <code>git fetch</code> every time. Especially when you make multiple commits within a very short period of time.<br>
It is also possible to manually trigger the chain of jobs of an old commit. In that case you would potentially fetch thousands of commits that you don't need for job 2 and 3.<br>
In reality there are actually more like 15 jobs, but I had to simplify things, otherwise I would have to write a book.</p>
","8","2879085","",""
"71507845","18490435","2022-03-17 06:22:43","0","401","<git><jenkins><jenkins-pipeline><jenkins-groovy><git-commit>","Fetch a specific string from Git commit message in Jenkins","<p>I am fetching git commit message from my Jenkin freestyle project by cloning the git repo,  by using the below command.</p>
<pre><code>git log -1 --pretty=%B ${GIT_COMMIT}
</code></pre>
<p>I am able to get Git commit message using this, but I want to fetch only the specific message from that commit line .
<strong>For example:</strong> [pqr9022827] ABAP Unit -&gt; is the commit message I am obtaining, I need to know how to obtain only those string within the square brackets i.e., pqr9022827 and store it in some environment variable</p>
","1","18490435","",""
"37420642","1479974","2016-05-24 17:55:21","266","297815","<git><git-commit><git-reset><git-revert>","How to undo the last commit in git","<p>By mistake, I did <code>git add .</code> and <code>git commit</code> in the <code>develop</code> branch. But luckily, I did not do <code>git push</code>.</p>

<p>So I wanted to revert it back to original state.</p>

<p>I tried <code>git reset --soft</code> and <code>git reset HEAD --hard</code> but looks like I have messed it up.</p>

<p>How do I fix this? I want to go back to original state and possibly keep the code changes.</p>
","0","1479974","0","0"
"53514729","10561364","2018-11-28 08:02:32","0","48","<git><git-commit>","how to push change in other branch which already commit on other branch","<p>I have two branches master and version_one. </p>

<p>I was in master branch and I have added few files in git and commited on master but I want to pust it on version_one branch</p>

<p>Can I change checkout branch version_one and push that commit on version_one so that my changes are push on version_one branch only</p>

<pre><code>git branch
master

git add file_name.txt
git commit -m ""new change""
</code></pre>
","0","10561364","",""
"71510430","18213233","2022-03-17 10:04:51","0","156","<git><git-branch><git-commit>","I made changes while on the wrong branch. I haven't committed yet. How do commit my changes to the intended branch?","<ul>
<li>I'm on branch A and made changes.</li>
<li>The changes have not yet been added or committed.</li>
<li>These changes are intended for branch B.</li>
</ul>
<p>How do I go about adding and committing these changes to branch B?</p>
","2","18213233","",""
"40926945","6164172","2016-12-02 07:29:03","3","3843","<git><git-commit><git-push>","How to know what differences that ""git push"" is going to push?","<p>After I have git add, and git commit, my workspace, index cached, and local repository became the same. So how can I know when I ""push"", what differences are there in this patch set?</p>
","0","6164172","",""
"50940208","3225105","2018-06-20 04:26:31","0","42","<git><git-commit><git-revert>","Git Reverting a commit post a merge","<p>I have the following situation:</p>

<pre><code>Remote: A&lt;-B&lt;-----C&lt;-D&lt;-------\
Local:      \-B1&lt;------B2&lt;-B3&lt;-M
</code></pre>

<p>So, I have merged a pull from the remote into my local repo (M). I now want to revert B3 and go back to B2.
I tried doing a</p>

<pre><code>git revert --no-commit -m 1 M
git revert --continue
</code></pre>

<p>Now my git log shows the following:</p>

<pre><code>commit R
Revert ""Merge branch 'master' of https://....""
This reverts commit M, reversing changes made to B3

commit M
....

commit B3
....

....
</code></pre>

<p>However, even though the git log mentions ""<em>reversing changes made to B3</em>"", when I do a git status, it shows the same things I expect <em>after</em> B3 commit.
Also it appears, I actually went forward rather than backward (new commit R).</p>

<p>My Questions:</p>

<ol>
<li>How do I get back to B2?</li>
<li>Was reverting the merge the right thing to do/required?</li>
</ol>
","2","3225105","",""
"69496802","5828252","2021-10-08 13:39:48","-1","90","<git><github><git-commit>","Pull request to forked repo in GitHub and ignore deletion of .idea files","<p>I am trying to understand some concepts of GIT and I cannot figure out how exactly works.
My teacher has a Java project and I:</p>
<ul>
<li>forked to my repository</li>
<li>cloned the repo from my GIT to local</li>
<li>I added .yml files and .idea folder to .gitignore</li>
<li><code>git rm --cached -r .yml</code>... and pushed to my repo (they disappeared from the repository, but I thought that it will be only removed from the staging area on my local machine)</li>
<li>Then I try to contribute with &quot;Create Pull Request&quot;, and there appear the changes I had made, but also showing that .idea folder and its inner files are deleted (&quot;Load Diff/This file was deleted&quot;).</li>
</ul>
<p>*<em>So, I suppose that in my commitment to the forked repo there will be a request to delete the .idea folder in the original/forked repo.
In few words, how can I contribute to the project without requesting my teacher delete his .idea, <em>yml files...</em></em></p>
<p>P.S. I'm sorry for the probably naive question, but I couldn't find any solution, and maybe the reason is that I generally don't understand how GIT works. Thanks for your help.</p>
<p>Here are the Comparing changes:
<a href=""https://i.stack.imgur.com/ObkbP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ObkbP.png"" alt=""enter image description here"" /></a></p>
","8","5828252","",""
"53525986","8916148","2018-11-28 18:36:33","0","416","<git><github><git-commit>","Git commits and reference headers","<p>There exists reference headers for git commits which are in themselves separate commits. For example, there are two commits, say <code>925ca878bc3c6c264ba5335b39be762a39e462ec</code> and <code>035d1c4e0d4be18bf8f46150072d1c4e0d4</code>. </p>

<p>When I do a <code>git show-ref --heads --tags</code>, I get</p>

<pre><code>925ca878bc3c6c264ba5335b39be762a39e462ec refs/heads/035d1c4e0d4be18bf8f46150072d1c4e0d4

1afff830dc0611c924d3bdaf490b0378dd4f2444 refs/heads/4d04fde758564386fb5d6922a1d4f01970e4e050

925ca878bc3c6c264ba5335b39be762a39e462ec refs/heads/af76057dea6c0f395fa2eada0e45dd8c01a4aea6
</code></pre>

<p>So now after a checkout on <code>925ca878bc3c6c264ba5335b39be762a39e462ec</code>, if I try to checkout <code>035d1c4e0d4be18bf8f46150072d1c4e0d4</code>, I get </p>

<pre><code>warning: refname '035d1c4e0d4be18bf8f46150072d1c4e0d4' is ambiguous.
</code></pre>

<p>I am already using two commands <code>rm -f .git/index.lock</code> and <code>git branch -D $(git branch --merged | grep -v \* | xargs)</code> (Ideally, these should deal with the branch issue) prior to every individual commits.</p>

<p>Is there a workaround? I didn't run into this earlier, so I am unsure as what exactly is happening.</p>
","2","8916148","",""
"18850564","454103","2013-09-17 12:59:00","2","148","<git><git-commit>","What are possible scenarios why one should create a git commit in the past?","<p>Are there some use cases when creating commits with a past date is beneficial?</p>

<p>This is <a href=""https://stackoverflow.com/a/13340044/454103"">how</a> and this is how it looks like in <a href=""https://github.com/IonicaBizau/dummy/commit/a28a2db2080721f4ff0cec463a0465709aa1c825"" rel=""nofollow noreferrer"">GitHub</a></p>

<p>What is the effect of creating past commits on merging? Or is this just a log rendering issue? What I want to understand is, if people I work with start making past edits, what effects this can have on logs, merging, other extenal reports, etc.</p>
","2","454103","",""
"34141707","5074880","2015-12-07 19:35:43","0","64","<git><git-commit>","Git Merge Undo and Switch To Previous Commit","<p>I have just committed my local changes with <code>git commit -m ""commit 1""</code></p>

<p>. Then, I did <code>git pull origin</code> to acquire changes from the remote branch. Then, during the merger, something went wrong. That is, after the merge commit, I do not see my changes. How can I revert to commit1 from the current one?</p>

<p>This commit is exactly one behind the current position of the HEAD if I do <code>git branch checkout</code> on this branch.</p>
","2","5074880","",""
"34145991","5074880","2015-12-08 00:34:20","0","263","<git><github><git-commit>","Git Pull Overrides Local Changes","<p>I am having a bit of a trouble with my Git. </p>

<p>Here is the preface: a couple days ago I made a few commits and pushed them to the Github remote. It turned out that some of these features interfered with those of another developer. Hence, she reverted 3-4 of my commits so she could test her feature. </p>

<p>Now the story. Today I made a couple more changes and commits locally. When I went to push them, I was told that remote is different and I need to use the merge tool. I did (the changes were minor and trivial). Then, I made a merge commit. The problem with this commit is that it completely overrides the local changes I made. Having asked in another thread, I used <code>git reset --hard &lt;commit number&gt;</code> to get back to my working code. From now on, no matter what I try to do, I keep getting my code overwritten by the remote version. </p>

<p>Why does this keep happening and how can I resolve it? I basically want to make sure my local is up-to-date with remote and that I can push my changes to remote.</p>

<p>Edit:</p>

<p>After I do <code>git reset --hard</code> and try to do <code>git push origin &lt;commit number&gt;:&lt;remote branch name&gt;</code>, I get the following error:</p>

<blockquote>
  <p>error: failed to push some refs to</p>
  
  <p>'<a href=""https://github.com/xxx/xxx.git"" rel=""nofollow"">https://github.com/xxx/xxx.git</a>' hint: Updates were</p>
  
  <p>rejected because the tip of your current branch is behind hint: its</p>
  
  <p>remote counterpart. Integrate the remote changes (e.g. hint: 'git pull</p>
  
  <p>...') before pushing again. hint: See the 'Note about fast-forwards'</p>
  
  <p>in 'git push --help' for details.</p>
</blockquote>
","0","5074880","",""
"53853138","2470765","2018-12-19 14:18:11","2","335","<git><git-commit><git-tag>","Git - commit and tag in a single command","<p>I am doing a commit in a git in a following manner:</p>

<pre><code>git commit -m ""message""
</code></pre>

<p>And then I am adding a tag</p>

<pre><code>git tag -a v1.2 9fceb02
</code></pre>

<p>Is it possible to do this in a single command?</p>
","1","2470765","",""
"25030783","969092","2014-07-30 07:13:18","0","686","<git><github><release><commit><git-commit>","How to release a project on GitHub on basis on commit ID?","<p>I'm looking for a way to release my project at a commit I've made several days ago. I don't know whether is it possible or not, but would glad to see a solution for this.</p>
<p>I've gone through this <a href=""https://help.github.com/articles/creating-releases"" rel=""nofollow noreferrer"">Creating Releases</a> an article by GitHub but didn't found there anything specifically mentioning about my requirement.</p>
<h1>Update:</h1>
<p>My current project is 2 commit ahead of that commit which I want to make a release. I'm specifically looking for a solution for this since, it would help me to create version.</p>
<p>The old one I'll assign it as v1.0 and the new one will be v2.0 as the approach for both of them is different and then whenever I'll make any enhancement in any of those 2 versions then they'll continue their naming conventions as v1.1 and v2.1 respectively.</p>
","0","969092","",""
"37550194","4499267","2016-05-31 15:45:24","0","25","<git><git-commit>","How can I add edits to a file committed in the past?","<p>I committed a list of edits, and then I developed a new feature and committed again. Now I discovered that another edit needs to go into the first commit, how can I do this with git? Since I committed twice I cannot use <code>--amend</code></p>
","2","4499267","",""
"53867575","3029244","2018-12-20 11:14:39","0","2607","<git><branch><commit><git-commit><branching-and-merging>","git - Commit staged changes to another branch and merge","<p>I find that frequently, while working on a large feature branch, I make changes to parts of the codebase that really belong on their own branches. I know that I could use <code>git add -p</code> to stage the changes I want, commit them, stash the changes I don't want, make a new branch off of master, cherry-pick the commit I made earlier, switch back to the original branch, reset, merge in the feature branch, and pop my changes, but that seems like a lot of work for something that should be easier to do. There should be a way to do this without affecting my work directory, right?</p>

<p>Here's a drawing of what I'm trying to do.</p>

<p><a href=""https://i.stack.imgur.com/NLGTT.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NLGTT.jpg"" alt=""A crude drawing depicting branches""></a></p>

<p>I'd love to have a command like</p>

<pre><code>$ git commit --onto master --as new
</code></pre>

<p>that would create a <code>new</code> branch off <code>master</code>, commit the changes there, then merge it into my HEAD branch, all without touching my work directory. Does such a command exist?</p>
","0","3029244","",""
"72074898","16384721","2022-05-01 07:45:09","1","397","<github><git-commit><git-push><git-remote>","couldn't commit to Github remotely","<p>I have been trying to create a repository from VScode but couldn't therefore I had to follow Github's default way of creating and pushing commits manually. The error it throws-:</p>
<pre><code>git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file - -S
gpg: skipped &quot;digambernegi &lt;digambernegi001.com&gt;&quot;: No secret key   
gpg: signing failed: No secret key
error: gpg failed to sign the data
fatal: failed to write commit object
</code></pre>
<p>Git Log</p>
<pre><code>[2022-05-01T07:41:58.034Z] &gt; git config --get-all user.name [104ms]
[2022-05-01T07:41:58.144Z] &gt; git config --get-all user.email [104ms]
[2022-05-01T07:42:03.415Z] &gt; git ls-files --stage -- 
C:\Users\Nagi\Downloads\multinavbar\index.html [128ms]
[2022-05-01T07:42:03.667Z] &gt; git cat-file -s a8491a2abe471cef2354da09d005227a8725f831 [210ms]
[2022-05-01T07:42:06.503Z] &gt; git ls-files --stage -- 
C:\Users\Nagi\Downloads\multinavbar\index.html [106ms]
[2022-05-01T07:42:06.631Z] &gt; git cat-file -s a8491a2abe471cef2354da09d005227a8725f831 [120ms]
[2022-05-01T07:42:08.633Z] &gt; git -c user.useConfigOnly=true commit --quiet --allow-empty- 
message --file - -S [282ms]
[2022-05-01T07:42:08.633Z] gpg: skipped &quot;digambernegi &lt;digambernegi001.com&gt;&quot;: No secret key
gpg: signing failed: No secret key
error: gpg failed to sign the data
fatal: failed to write commit object
</code></pre>
<p>What I want to achieve is I can easily create a repository and push it to Github from vsCode only and commit all other later changes.</p>
","0","16384721","0","0"
"51808883","6280857","2018-08-12 12:35:38","18","21968","<git-commit><git-push><git>","Why commit without a push in git?","<p>I am starting to learn Git. I've been messing around with GitKraken, and I hope that using a GUI is a viable path for saving and sharing stuff. I prefer GUIs to the command line.</p>

<p>Now I understand, in the GUI, I need to <code>stage</code> files, then <code>commit</code> them and then <code>push</code>, to upload them. But why are <code>push</code> and <code>commit</code> two different things? Why would  want to just <code>commit</code> locally, without the following upload to keep files synced?</p>
","9","6280857","0","0"
"37614483","6033621","2016-06-03 12:32:06","4","10475","<git><git-commit><git-log>","Git missing commits","<p>I am new to git and stumbled upon a strange problem </p>

<p>So I did some commits to my local repository and viewed them with git log and it worked fine.
After some time I checked out an older commit and later I wanted to jump back to my latest commit to continue my work. So I did another git log.
But now the latest 3-4 commits were not displayed. 
Typing 'git checkout master' brought me to the latest commit of the second log command but not to the commit of the first one I described.
Is this a issue or do I have to type another command to get back to the latest commit?</p>

<p>I hope my problem is understandable.</p>

<p>All commands i typed in the right order:</p>

<p>Git add public/<br>
Git commit -m “Fo“<br>
(No errors here)<br>
Git log --oneline.<br>
Output: 8 commits.<br>
Git checkout “id of older commit“<br>
Git log --oneline.<br>
Output: 4 commits</p>
","4","6033621","0","0"
"51830455","2299236","2018-08-13 20:57:58","1","428","<jenkins><groovy><jenkins-pipeline><git-commit><jenkins-job-dsl>","Unable to do git commit in jenkins dsl","<p>Is it possible to do git commit using jenkins dsl.I tried:</p>

<p>shell() - doesn't recognize git command</p>

<p>@library()- i have working library that does take care of git commit. It is working in jenkins pipeline job but not in dsl(throws error at first line where @libary() or library ""libname"" is used)</p>

<p>sshAgent(credentials){} - didn't work in dsl</p>

<p>I tried to use git plugins but there is no commit for existing plugins.</p>
","8","2299236","0","0"
"53879468","4577874","2018-12-21 05:05:46","2","186","<file><jenkins><gitlab><webhooks><git-commit>","save gitlab commit message to file","<p>We had integrated Gitlab &amp; Jenkins using Webhooks such that when ever code is pushed to git repo, automatically code base is built in Jenkins.</p>

<p>Is there someway, we can store commit messages to a file which can be used to generate release notes?</p>
","0","4577874","0","0"
"37617110","3627605","2016-06-03 14:33:13","3","744","<git><push><git-merge><git-commit>","how do I undo another developers git push to the master branch","<p>This seems like it would happen all the time, but i can't find an answer.</p>

<p><strong>what happened:</strong></p>

<p>Another developer has <strong>git merge</strong>d a branch with the master branch on their local server resulting in <strong>conflicts</strong>. Then <strong>git add</strong>ed the conflicts, <strong>git commit</strong>ted, and <strong>git push</strong>ed the changes &amp; conflicts to the master branch. Dropped his mic and left the building :</p>

<p><strong>the question:</strong></p>

<p>is there a way for me to undo this last conflicted commit, so i can push my code changes to master and continue my day, leaving the other developer to fix the conflicted code on his local machine???</p>

<hr>

<p><strong>what i've found so far:</strong></p>

<p>I've already committed my local changes and pulled the 'conflicted commit' to my local server...</p>

<p>the two options I'm finding are: </p>

<p>option 1:</p>

<pre><code>git revert -m 1 &lt;conflicted commit&gt;
</code></pre>

<p>This will undo all of the changes made by the conflicted commit. but when the other developer does a git pull all their changes will be deleted. right?</p>

<p>option 2:</p>

<pre><code>git reset --hard &lt;my commit&gt;;
git push --force;
</code></pre>

<p>this will completely remove the conflicted commit from git as if it never happened (which i don't love). But now the other developers local server will be out of sync.</p>

<p>what would you do?</p>
","5","3627605","",""
"51855283","7389250","2018-08-15 08:23:41","0","311","<git><rebase><git-commit>","Can I undo deleting a commit in git rebase?","<p>I intended to squash a commit but accidentally missed a step and deleted a commit - can I get it back</p>

<pre><code>git rebase -i HEAD~2
</code></pre>

<p>Then on the line with the commit I wanted to squash I deleted the line
then I did <code>:wq</code></p>

<p>Then my work disappeared</p>

<p>Can I get the commit back?</p>

<p>I have tried git reflog but I can't see the commit</p>
","3","7389250","",""
"30275691","2433565","2015-05-16 12:28:30","6","21433","<git><github><git-commit><subproject>","Removing subproject commit from github","<p>I have two repositories namely <code>A</code> and <code>B</code>. By mistake I cloned repo B inside A on my machine. I removed all the code from the repo B but when I pushed and merged my code from A on origin, it also shows a subproject commit <code>B</code> on Github repo.</p>

<p>I want to remove the subproject commit from my master on origin. Will these steps work?</p>

<p><code>1. rmdir B (on my local repo A)
 2. Pushing my repo A to origin
 3. Merging</code></p>
","2","2433565","0","0"
"67309567","1616488","2021-04-29 00:33:47","0","103","<git><git-commit>","How to show at least two commits which has same parent commit","<p>Title says it all. So far I've come across solution which basically shows commit and it's parent commit, but it needs further filtering. Is there better approach?</p>
<pre><code>git rev-list --all --min-parents=1 | while read child; do parent=$(git rev-parse ${child}^); echo &quot;$child $parent&quot;; done
</code></pre>
","0","1616488","",""
"37707802","222403","2016-06-08 16:16:50","1","35","<git><commit><git-commit>","Commits for file in remote not showing in local repo","<p>I have a git repository where the remote is hosted in TFS and when I look at the commits for a specific file there 5 commits on my dev branch. Locally i only see 3 commits on my dev branch. I've done a git pull and everything is up to date. How is this possible?</p>

<p><a href=""https://i.stack.imgur.com/nwhtS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nwhtS.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/sV4XL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sV4XL.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/xGIAB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xGIAB.png"" alt=""enter image description here""></a></p>
","9","222403","",""
"37708263","6407702","2016-06-08 16:40:01","0","406","<git><intellij-idea><git-commit><git-revert>","idea git nothing to revert and commit","<p>os:mac 10.11.5</p>

<p>ide:idea 2016</p>

<p>in idea , i write some code , then i want to commit it .</p>

<p>use command line </p>

<pre><code>git status
</code></pre>

<p>show me</p>

<pre><code>On branch master Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:

modified:   src/main/java/config/Demo1.java
</code></pre>

<p>it's ok,i can commit my code and push it.</p>

<p>but i use idea's git plugins commit show me </p>

<blockquote>
  <p>nothing to commit,no changes detected</p>
</blockquote>

<p>use revert ,also show me</p>

<blockquote>
  <p>nothing to revert,no changes detected</p>
</blockquote>

<p>how do I fix it,thanks</p>
","5","6407702","",""
"67313327","1161584","2021-04-29 08:01:31","0","448","<git><github><git-commit>","Edit a specific commit and reapply subsequent commits","<p>I am currently submitting open-source code and the structure of commits are quite strict. I have three commits, let's call them A, B and C. It is important to note that all changes are within the same file.</p>
<p>Furthermore, I have received feedback on code within all three commits. Is it possible to drop into the staged code of, for example, commit B, edit a few lines of code, recommit and then reapply C without much hassle?</p>
<p>The best way I can think of right now is to undo all three commits and then go through the chunk staging again, which will take time to get perfect, since some code are in proximity.</p>
","2","1161584","",""
"51883551","3676571","2018-08-16 18:45:58","0","694","<tfs><git-commit><tfs-workitem><workitem><tfs-aggregator>","How access git commits from Microsoft.TeamFoundation.WorkItemTracking.Client","<p>I'm using TFS 2017 update 1 on premises. I'm using #ID in log comments of commits in order to associate workitem ID (of User Story, Task etc.) with GIT commits of source code. It properly works (I can see links to commit from workitem interface) but I'd like to use TFS SDK API with tfs aggregator in order to better manage  GIT commits (e.g. dashboards using custom fields) . How can access git commits from Microsoft.TeamFoundation.WorkItemTracking.Client ?</p>
","0","3676571","",""
"37763170","154133","2016-06-11 11:24:54","23","12276","<git><gnupg><git-commit>","Git signed commits - How to suppress ""You need a passphrase to unlock the secret key...""","<p>I changed my global Git configuration to sign all commits. I also use gpg-agent so that I don't have to type my password every time.</p>

<p>Now every time I make a new commit I see the following five lines printed to my console:</p>

<pre><code>[blank line]
You need a passphrase to unlock the secret key for
user: ""John Doe &lt;mail@gmail.com&gt;""
2048-bit RSA key, ID ABCDEF12, created 2016-01-01
[blank line]
</code></pre>

<p>Even worse, when I do a simple stash, this message is printed <em>twice</em>, needlessly filling my console (I assume for one for each of the two commit objects that are created).</p>

<p>Is there a way to suppress this output?</p>
","0","154133","0","0"
"68817534","4374931","2021-08-17 12:39:55","0","706","<git><git-merge><git-commit><pull-request>","commits form merged pull request not showing in master","<p>I have merged a pull request to the master branch, now when I checkout to the master branch I can't see the commits done in the pull request, and I lose all work done since the creation of thee pull request. any idea why this is happening and how to get the commits to the master branch?
NOTE: in the branch which I submitted the pull request form I can see all the commits.</p>
","7","4374931","",""
"37828666","3395512","2016-06-15 07:22:22","0","535","<git><bash><git-commit><git-config>","Git Commit - Why isn't GitBash launching my default text editor (sublime) for me to enter commit message","<p>I am following <a href=""https://classroom.udacity.com/courses/ud775/lessons/2980038599/concepts/33417185870923"" rel=""nofollow"">this MOOC</a> to learn about Git. Following <a href=""https://classroom.udacity.com/courses/ud775/lessons/2969618657/concepts/29605487740923"" rel=""nofollow"">this video</a>, I want to make my first commit in my repository. So I ran <strong><code>git commit</code></strong> command, expecting that Sublime Text Editor will be launched where I will enter my <em>commit message</em>. <strong>But I got the following error. The question is that how do I fix this.</strong></p>

<pre><code>Jojoa (master +) Directory for practice $ git commit
'C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe' -n -w: C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe: No such file or directory
error: There was a problem with the editor ''C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe' -n -w'.
Please supply the message using either -m or -F option.
</code></pre>

<hr>

<p><strong><em>How I had set up Sublime Text as Default Editor:</em></strong></p>

<p>Using <a href=""https://classroom.udacity.com/courses/ud775/lessons/2980038599/concepts/33417185870923"" rel=""nofollow"">this lesson</a> as a guide, I ran the following command to set up Sublime Text as my default text editor. </p>

<pre><code>git config --global core.editor ""'C:/Program\ Files/Sublime\ Text \2/sublime_text.exe' -n -w""
</code></pre>

<p>Then I ran <code>C:/Program\ Files/Sublime\ Text \2/sublime_text.exe</code> and this launched the Sublime Text editor. This verified that the above command worked properly.</p>

<p>Then I went ahead to edit the .bash_profile configuration file in the sublime text editor to add the following line to it:</p>

<pre><code>alias sublime = ""C:/Program\ Files/Sublime\ Text \2/sublime_text.exe""
</code></pre>

<p>Then I closed and opened Git Bash and ran <code>sublime</code>. This opened the Sublime Text Editor. So I got certain that the workspace has been set up correctly.</p>
","2","3395512","",""
"53930718","10762787","2018-12-26 10:24:53","1","654","<git><git-commit><git-rebase>","Git rearrange root commit and second commit","<p>I'm learning how to use GIT and Bitbucket. Bitbucket Admin (not me) created a remote repository.</p>

<p>In this repository, I have committed my changes 'A' to Master branch ( this is now root/parent/first commit in repository ).</p>

<p>Now, I have committed another change 'B' to Master branch.
How can I rearrange the commits in remote and local repository and erase all  previous history of initial commit ?</p>

<p>In Bitbucket, it should look like below:</p>

<p>Before : In Master branch</p>

<p>B ""New Commit""</p>

<p>A ""Initial Commit""</p>

<hr>

<p>After: In Master branch</p>

<p>A ""Initial Commit""</p>

<p>B ""New Commit""</p>

<p>Commit 'B' was supposed to be the first/initial commit but I accidentally pushed my changes in wrong direction.</p>

<p>Is it possible to correct this using git commands ? </p>
","2","10762787","",""
"37830281","4365254","2016-06-15 08:40:09","0","6141","<git><date><git-commit><bitbucket-server>","Get git commit info by dates with stash rest api","<p>Is there a way to get git commits info by dates with stash rest API?</p>

<p>I have searched developer documentation, and learned that you could get commits info with commit id and so on, but not with date.</p>

<p><a href=""https://developer.atlassian.com/stash/docs/latest/reference/rest-api.html"" rel=""nofollow"">https://developer.atlassian.com/stash/docs/latest/reference/rest-api.html</a></p>
","0","4365254","",""
"69893477","17238612","2021-11-09 06:04:22","0","376","<git><github><git-commit>","How to make branch B have the same code as branch A?","<p>Branch A has less code than branch B.
I want to merge branch A into B so that B will end up with less code and essentially have the same exact code as A. Similar to undoing multiple commits. The problem is that I have to do this through a Pull Request merge. I cannot push directly to B, it has to be through A (the feature branch).</p>
<p>How should the Pull Request look like? When I try to merge A into B it doesn't detect any differences - why is that?
If I flip the Pull Request around (B into A) it shows all the changes that B has but A doesn't have.</p>
","3","17238612","",""
"72123622","1114043","2022-05-05 07:43:13","-1","1721","<git><github><git-commit><git-filter-branch><git-rewrite-history>","How to delete all files > 1 Mb from the history (but keep them in the repository)","<p>I have a repository with many big files (psd, exe, pdf, etc.) and everytime I commit an update of thoses files the git .pack file grow drastiquelly to keep the history. How can I delete all files &gt; 1mb from the history <strong>but keep them in the repository</strong>.</p>
<p>Also is it possible to setup for a particular file to never be stored in the history ?</p>
","1","1114043","",""
"69505159","16995369","2021-10-09 08:50:00","0","139","<r><github><push><git-commit><readme>","Unable to push README.Rmd to GitHub","<p>At first, I used the command below to generate my README file</p>
<pre><code>usethis::use_readme_rmd().
</code></pre>
<p>After modifying the README.Rmd file, I tried pushing it to GitHub and receive this message within the Git Commit panel, which prevented the process to happen.</p>
<p><a href=""https://i.stack.imgur.com/oHagV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oHagV.png"" alt=""enter image description here"" /></a></p>
<p>I googled the problem and there was one that suggested me running the code below to resolve the problem.</p>
<pre><code>file.remove(&quot;.git/hooks/pre-commit&quot;)
</code></pre>
<p>I ran this code in the console and re-pushed again, and it worked! But my README file just didn't appear in the right format as I expected. Instead of the &quot;nice landing page&quot;, my README on GitHub just appeared as an &quot;original&quot; Rmarkdown file with all the plain codes. And now I have no ideas..!</p>
<p>Could you please explain what the above message means and what should I do to avoid it in order to push the README?</p>
","4","16995369","",""
"56205077","","2019-05-19 05:43:06","0","361","<git><git-commit>","Adding metadata to git commit for instructions on how to test","<p>We have a basic CI/CD system in place...when a push happens Bitbucket will notify one of our servers - there is a commit sha, and the repo etc.</p>

<p>But there is no obvious (to me) way to test the repo differently depending on the commit. Especially if it's a big repo, we may not way to test everything. So I am thinking something like this:</p>

<pre><code>git commit -am ""regular commit message # path/to/test/folder""
</code></pre>

<p>so everything after the last # in the commit message would be a path to a folder that contains a test.sh file. If we have git pre commit hooks in place we can validate the info in the commit message?</p>

<p>Is there a better way to do this? Add some metadata to a commit to instruct CI/CD servers how to test the commit?</p>
","0","","",""
"56205170","","2019-05-19 06:00:35","1","1022","<git><git-commit>","Retrieving desired git commit message in pre-commit hook","<p>So if .git/hooks/pre-commit exists, then it will be run right after:</p>

<pre><code>git commit -am ""foobar""
</code></pre>

<p>is run.  So then how do I access the desired git commit message in the pre-commit?</p>

<p>I do some sleuthing and put this in .git/hooks/pre-commit and made the file executable:</p>

<pre><code>#!/usr/bin/env bash

echo ""here is pre-commit hook""

env | sort

echo ""args:""

echo $@

exit 1;
</code></pre>

<p>here are the env vars that are prefixed with ""GIT""</p>

<pre><code>GIT_AUTHOR_DATE=@1558245421 -0700
GIT_AUTHOR_EMAIL=alex@alexs-mac.local
GIT_AUTHOR_NAME=Alexander Mills
GIT_EDITOR=:
GIT_EXEC_PATH=/Library/Developer/CommandLineTools/usr/libexec/git-core
GIT_INDEX_FILE=/Users/alex/codes/interos/notifier-server/.git/index.lock
GIT_PREFIX=
</code></pre>

<p>and there seem to be no arguments to the script, because nothing gets logged after  <code>echo ""args:""</code>...</p>

<p>so how do I access the <em>desired</em> commit message in a pre-commit hook?</p>

<p><strong>Specifically I am looking to bail from pre-commit if the commit-message does not have a good format.</strong> If there is another hook that can do that, then that would be a good answer to this question.</p>
","3","","",""
"51943222","988169","2018-08-21 06:58:54","-1","622","<git><jira><atlassian-sourcetree><git-commit>","How to map sourcetree commit with JIRA","<p>While creating a commit at sourcetree(I am using gitlab), I am writing commit messages as follows:-</p>

<pre><code>MAEFT2-144 Error Handling
</code></pre>

<p>Note:- MAEFT2-144 is sub task number at JIRA.</p>

<p>But when I see the Git Commits activity at JIRA, then there is no commit shown. How to relate the commit at sourcetree with JIRA?</p>

<ul>
<li>Do I need to write a commit message with some specific structure?</li>
<li>Do I need to perform settings at sourcetree level?</li>
<li>Do I need to perform settings at JIRA level?</li>
</ul>

<p><a href=""https://i.stack.imgur.com/nvt1b.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nvt1b.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/B0xsJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/B0xsJ.png"" alt=""enter image description here""></a></p>
","0","988169","",""
"51951767","7644168","2018-08-21 15:12:39","1","1744","<git><git-commit>","How to change author of several commits and push only once after that?","<p>I need to change my name and email in several commits. So I started with the oldest one. The question is: after changing author of the commit can I proceed with changing author for all remaining commits or should I do <code>git push --force-with-lease</code> after each author change? </p>

<p>How can I first change author and push only when author in all the required commits is edited? </p>

<pre><code>git checkout 12345c3

git commit --amend --author ""New name &lt;name@new.com&gt;""

Checkout the original branch.

git checkout MyBranch

git replace 12345c3 cd3c123

git filter-branch -- --all

git replace -d 12345c3
</code></pre>
","6","7644168","0","0"
"69906716","9119424","2021-11-10 00:41:19","1","27","<git><git-commit>","Is there a way to use variables in git-commit-template?","<p>I have a git commit template and I would like to use variables inside of it.</p>
<p>Example:</p>
<blockquote>
<p>Fix issue lalala</p>
<p>[Ticket]  http://url-from-ticket/$TICKET</p>
</blockquote>
<p>Where branch-name is <code>fix/DEV-001</code> and <code>$TICKET</code> would be <code>DEV-001</code></p>
","1","9119424","",""
"53928083","4577874","2018-12-26 06:12:20","1","2362","<gitlab><gitlab-ci><git-commit><git-log><git-webhooks>","Create Git Log using Gitlab CI","<p>We need to generate commit history file automatically when user commits code into git repository.</p>

<p>It can be done using Jenkins, Gitlab Webhooks and Jenkins Git Changelog plugin. Also, it can be created using below git command.</p>

<pre><code>$ git log --pretty=format:'At %ci, %cN committed %h : %s' --decorate --graph &gt;log.log
</code></pre>

<p>But, is there anyway we can generate commit history file using Gitlab CI/CD operations. The file can be saved in git repositry or local storage.</p>

<p><strong>Sample Commit History File</strong></p>

<pre><code>* At 2018-11-16 18:02:21, kRiZ committed 1714a95 : Commit 4
* At 2018-11-15 16:06:06, kRiZ committed bab5c0c : Commit 3
* At 2018-11-14 18:05:09, kRiZ committed b3c9d86 : Commit 2
* At 2018-11-14 06:47:34, kRiZ committed 8e6ee30 : Add README.md
</code></pre>
","0","4577874","",""
"37824079","6462035","2016-06-15 00:02:52","0","1248","<git><github><push><git-commit>","git only sending an empty folder upon push","<p>I am trying to make changes to a git repository, but I keep running into the same error, and none of the dozens of guides I can find seem to be helping, so I'll explain what I'm doing step by step and hopefully someone can help point out where I'm going wrong (And before anyone points me to it, I've already read <a href=""https://stackoverflow.com/questions/9627516/git-wont-add-any-files-just-an-empty-directory"">Git won&#39;t add any files - just an empty directory</a> )</p>

<ul>
<li>Create a new folder in my files</li>
<li><p>clone github repository to folder with </p>

<p><code>$ git clone [url.git]</code></p></li>
<li><p>copy Project folder with multiple files in it and paste it in desired location inside cloned git folder</p></li>
<li><p>add and commit at the new folder level and every level above it with multiple add commands </p>

<pre>$ git add .
$ git add * -f
$ git commit -m ""comment""</pre></li>
<li><p>Push to online repository</p>

<p><code>$ git push origin master</code></p></li>
</ul>

<p>However, once I do all this, I go to the web interface and see that the folder that I added is there, but it's entirely empty. It has none of the files that were contained inside. Despite this, git keeps telling me that everything is up to date and there are no changes.</p>

<p><code>$ git status</code> returns this value:</p>

<pre>On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean</pre>
","8","6462035","",""
"37824839","1989579","2016-06-15 01:53:04","-1","1145","<git><merge><git-commit>","git push when many changed files","<p>I wonder what is the best way to perform a commit when there are many changes in the repository</p>

<p>I always work with svn from the ide. I am learning to use git from console and I would like to do the following before a commit:</p>

<ul>
<li>see all files that are modified on the server</li>
<li>I want to manually merge the files I want</li>
<li>upload the changes to the repository.</li>
</ul>

<p>I have been researching and found the following commands:</p>

<p>for commit my changes:</p>

<pre><code>git add -A
git commit -m ""...""
</code></pre>

<p>to download changes:</p>

<pre><code>git fetch 
</code></pre>

<p>I need  see the files that have changed, and then merge them manually</p>

<p>I know there</p>

<pre><code>git rebase 
</code></pre>

<p>but this is like a pull, I want something less invasive.</p>

<p>Sorry for my English</p>
","4","1989579","",""
"57156115","10174057","2019-07-23 03:06:13","1","73","<xcode><github><push><git-commit><pull>","How to clone Github repository to local device with Github Desktop","<p>I have a project my friend and I are working on. He made some changes and added them to the project on github. I hit clone on the project in github and then it opened up the github desktop and now I have 1 arrow pointing up and 16 pointing down. </p>

<p><a href=""https://i.stack.imgur.com/xaivD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xaivD.png"" alt=""enter image description here""></a></p>

<p>I believe this means I have a non-committed change and 16 changes ready to be pulled, but no idea how to find this change, or if I commit the change will it take away all the changes already on github that are not on local yet? </p>

<p>Just don't want everything to just be deleted. Thanks.</p>
","0","10174057","0","0"
"57157297","11822444","2019-07-23 05:34:51","-3","200","<git><git-bash><git-commit>","when i write git commit -m ""Complete chapter 1"" it is not working","<pre><code>cd Desktop
mkdir Story
cd Story
touch chapter1.txt
atom .
git init
git add chapter1.txt
git status
git commit -m ""complete chapter 1""
</code></pre>

<p>It show me this error message:</p>

<p>***Please tell me who you are.</p>

<p>Run</p>

<pre><code>  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""
</code></pre>

<p>to set your account's default identity.</p>

<p>Omit --global to set the identity only in this repository.</p>

<blockquote>
  <p>fatal: unable to auto-detect email address (got
  'Hi@DESKTOP-EL5QS59.(none)')</p>
</blockquote>
","2","11822444","",""
"57159667","6003758","2019-07-23 08:16:32","0","97","<git><version-control><git-commit>","How do I delete last local commit in Git?","<p>I accidentally committed the wrong files to Git, but I haven't pushed the commit to the server yet.</p>

<p>How can I delete that commit from the local repository?</p>
","1","6003758","0","0"
"74424023","3224856","2022-11-13 19:18:30","1","73","<git><date><time><git-commit>","Committed and Pushed while using a wrong Local time, how dangerous is this ? and can I fix it?","<p>I am working on a feature that require lots of &quot;time traveling&quot; to be test, basically I set my computer to be 2 months ahead from <em><strong>Now</strong></em> and totally forgot about it, when i was doing my commits (using a git client called Fork), I saw that the commits where having the timestamp &quot;of the future&quot;, I changed my computer time to <strong>Automatic</strong> and pushed, went to Github, and the latest commits were using the timestamp of the future (the wrong one).</p>
<ol>
<li><p>How dangerous is this ? will it create a conflict ? can it hurt a pull-request ? at the moment the only bad change I am seeing is Github showing the commits in the &quot;wrong&quot; order (because it is respecting the timestamps of the commits)</p>
</li>
<li><p>Is it possible to fix this ? only the dates were wrong in the commits, so I don't have to manually enter the correct time by the second.</p>
</li>
</ol>
<p>Thank you</p>
","4","3224856","",""
"57178933","6271234","2019-07-24 08:53:20","1","459","<git><intellij-idea><git-commit><git-add><git-stage>","Git for IntelliJ IDEA - Are files implicitly staged when committing them?","<p>I am new to Git and learnt from my coworkers through the use of Git for IntelliJ IDEA. Recently I have started to read the Git official documentation, which talk about ""staged files"", a word that I never heard in this context. Consequently I am currently a bit confused and unsure about the meaning of what a ""staged file"" is.</p>

<p>The documentation says that a modified tracked file needs to be staged thanks to the command <code>git add</code> in order to be committed, and that a file can be both staged and unstaged, meaning that only the staged part of the file can be committed, leaving the file still modified with the unstaged part after using the command ""git commit"".</p>

<p>Using Intellij IDEA, I never had to manually stage a file to correctly commit it, even though I already was able to commit only part of a file, without really knowing what was going on behind the curtains. So, <strong>can you confirm me that with Git for IntelliJ IDEA, files are implicitly staged first when we commit them</strong> ?</p>
","0","6271234","",""
"74448292","15995125","2022-11-15 15:33:21","0","66","<git><bitbucket><git-merge><git-commit><merge-conflict-resolution>","How to import changes in other branches in GIT?","<p>I have created a branch called &quot;multiple_fixes&quot; off my Dev branch and have been working there for a couple weeks.  While I was working on my branch, several other people have created branches after I created mine, and have since made pull requests into the Dev branch.</p>
<p>Now, I am ready to merge my changes into Dev, but I have many files that are down-level from the current Dev branch.  If I do a Pull Request, I will undo all the other changes that people have checked in.</p>
<p>How do I pull the current changes of Dev into my branch, without over-writing my work?</p>
","2","15995125","",""
"74484115","5091015","2022-11-18 01:53:07","0","48","<laravel><git><git-commit><laravel-9><git-gui>","How do i push my microservice folders to Github as one repository","<p>I have a micro-service app built in Laravel 9. It is built as two micro-services: frontend and backend.</p>
<p>Each micro-service has sub-folders and file because each is a Laravel installation.
<a href=""https://i.stack.imgur.com/yvA50.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yvA50.png"" alt=""My repository structure"" /></a></p>
<p>I want to commit the whole as one repository to GitHub using my Git GUI but my windows shows no files and i keep getting :</p>
<blockquote>
<p>No changes to commit
You must stage at least 1 file before you can commit.</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/8qE7K.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8qE7K.png"" alt=""My Git GUI"" /></a></p>
","0","5091015","",""
"74488109","12834534","2022-11-18 10:16:40","0","43","<git><git-commit>","git - Is the order of commits important?","<p>If, for example, I create a file and commit a file, but don't push.</p>
<p>Then later on I realise this file is in the wrong folder and move it and commit the move.</p>
<p>What will happen when i push?</p>
<p>Is the order of commit important, or should I be removing the original commit just have it be created in the correct place from the start?</p>
","6","12834534","",""
"57214178","8289194","2019-07-26 06:19:26","6","923","<git><git-commit><pull-request><pull><googlebot>","How should I troubleshoot my Google Contributor Licence Agreement Issue on my pull request?","<p>I have made the Pull Request to <a href=""https://github.com/google/mentornet"" rel=""noreferrer"">this project</a>, which is owned by google. So, google asks for Contributor Licence Agreement. which I have signed <a href=""https://cla.developers.google.com/clas"" rel=""noreferrer"">here</a>. I have created CLA.</p>

<p>Firsly, I thought that there are two email addresses in my github account. So, I have also created CLA for both email IDs. </p>

<p>For committing the code, I am using simple approach : 
        git add .
        git commit -m 'Message'
        git push -u origin branch_name</p>

<p><a href=""https://github.com/google/mentornet/pull/7"" rel=""noreferrer"">Pull Request</a></p>

<p>Still the google-bot is not able to verify my CLA. It is giving me error like below : </p>

<p>Error Message :
We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors. If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)? If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.</p>

<p>I have created CLA for both the email IDs which are associated with my Github Account.</p>

<p>I have enabled Two Factor Authentication.</p>

<p>I have committed again and again to check. 
I have commented on PR to check whether problem is resolved by google-bot or not.</p>

<pre><code>git add .
git commit -m 'Message'
git push -u origin branch_name
</code></pre>

<p>Please describe the complete solution if someone has faced this issue in past and resolved it successfully.</p>
","0","8289194","0","0"
"74491907","10508128","2022-11-18 15:29:28","0","25","<github><git-commit>","Getting a trend report of Git commits to a particular branch in Github","<p>Is it possible to get the timestamp of all the commits to a particular branch in a Github repository (Master branch mainly) to create a trend for a period of 12-24 months ?</p>
<p>In our project, We are trying to see if there is a particular trend to push more commits towards the end of the release rather than regularly. So, any pointers on this will help a lot. Thanks.</p>
","1","10508128","",""
"74508267","18056531","2022-11-20 12:55:57","-2","25","<javascript><reactjs><git-commit><pre-commit-hook><git-husky>","husky precommit want to developer to force make relivant changes in two similar file otherwise commit msg thow error","<p>if you want when developer changed one file of the project and you want to force to make  relevant changes in to another &quot;similar &quot; file with the help of husky and shellScript..</p>
","1","18056531","",""
"74514821","10295124","2022-11-21 06:02:34","0","23","<github><github-api><git-commit>","How to collect types of GitHub Users' Used Programming Languages","<p>Is there anyway (e.g., api, link) that I can collect a list of types of programming languages that a GitHub user has used among all of his/her historical commits on GitHub?</p>
<p>I appreciate any hints.</p>
","0","10295124","",""
"57277609","248959","2019-07-30 18:05:55","-1","51","<git><git-branch><git-commit>","git: question about creating branches and cloning repos","<p>I have just created a branch from <code>master</code> called <code>new_branch</code> </p>

<p>So I have checkout that new branch, add a new file, and then add/commit/push. </p>

<pre><code>git add new_file.php
git commit -m ""A new file""
git push origin new_branch
</code></pre>

<p>So after that, I have cloned my repo example, and the thing is that that file I have added in the new branch is not in the master branch of cloned work-tree. What should I do to find it that new file in the master branch of the cloned work-tree?</p>

<p>NOTE: sorry because of the imprecision of the title. Maybe someone wants to change it.</p>
","9","248959","",""
"74568329","19267166","2022-11-25 04:22:14","0","150","<python><git><dataframe><git-commit>","Unable to push CSV file to Github: File Not found","<p>I am trying <a href=""https://stackoverflow.com/a/50072113/19267166"">this solution</a> however I have a dataframe to push via <code>commit</code></p>
<p>The code:</p>
<pre><code>    df = pd.read_csv(r&quot;\predictions_server.csv&quot;)

# Moving run_time column to the front of df
df = df[['run_time'] + [col for col in df.columns if col != 'run_time']]

# Rounding score numbers to 2 decimal places
cols = ['predicted_home_score', 'predicted_away_score', 'predicted_total_score', 'predicted_score_difference']
df[cols] = df[cols].round(2)


# list files to upload and desired file names with which you want to save on GitHub
file_list = [df]
file_names = ['predictions_server.csv']

# Specify commit message
commit_message = 'Test Python'

# Saving to GitHub
user = &quot;cardchase&quot;
access_token = &quot;access token&quot;  # Access Token is valid for 90 days. Generate new one when it expires (25 Feb 2023)
# using an access token; password does not work
g = Github(user, access_token)

# Get list of repos
print(&quot;List of Repos on Github under card_chase account:&quot;)
for repo in g.get_user().get_repos():
    print(repo.name)
    repo.edit(has_wiki=False)
print(&quot;\n&quot;)
# Getting the repo we want to use
repo = g.get_user().get_repo('Soccer-Predictor')  # repo name

# Check files under the selected repo
x = repo.get_contents(&quot;&quot;)
for labels in x:
    print(labels)
x = repo.get_contents(&quot;predictions_server.csv&quot;)  # read a specific file from your repo

# Get available branches in your repo
x = repo.get_git_refs()
for y in x:
    print(y)
# output eg:- GitRef(ref=&quot;refs/heads/master&quot;)

# Select required branch where you want to upload your file.
master_ref = repo.get_git_ref(&quot;heads/main&quot;)

# Finally, putting everything in a function to make it re-usable

commit_message = 'python commit'
master_ref = repo.get_git_ref('heads/main')
master_sha = master_ref.object.sha
base_tree = repo.get_git_tree(master_sha)

element_list = list()
for i, entry in enumerate(file_names):
    with open(entry) as input_file:
        data = input_file.read()
    element = InputGitTreeElement(file_names[i], '100644', 'blob', data)
    element_list.append(element)

tree = repo.create_git_tree(element_list, base_tree)
parent = repo.get_git_commit(master_sha)
commit = repo.create_git_commit(commit_message, tree, [parent])
master_ref.edit(commit.sha)
</code></pre>
<p>Output:</p>
<pre><code>List of Repos on Github under card_chase account:
scrapeOP
Soccer-Betting
Soccer-Predictor


ContentFile(path=&quot;README.md&quot;)
ContentFile(path=&quot;predictions_server.csv&quot;)
GitRef(ref=&quot;refs/heads/main&quot;)
Traceback (most recent call last):
  File &quot;C:\Users\harshad\AppData\Roaming\JetBrains\PyCharmCE2022.2\scratches\scratch_2.py&quot;, line 67, in &lt;module&gt;
    with open(entry) as input_file:
FileNotFoundError: [Errno 2] No such file or directory: 'predictions_server.csv'
</code></pre>
<p>How can I push <code>predictions_server.csv</code> to the repo?</p>
<p>As you can see, the <a href=""https://github.com/cardchase/Soccer-Predictor/blob/main/predictions_server.csv"" rel=""nofollow noreferrer"">file exists in repo</a></p>
<p>edit: Changed code to reflect accurate information</p>
","7","19267166","",""
"75697172","2172547","2023-03-10 14:12:00","0","55","<node.js><bitbucket><git-commit><git-push><nodegit>","nodegit bitbucket commit is not working properly nodejs","<p>I am trying to push changes to bitbucket repo using nodegit npm package.</p>
<p>Here is the code</p>
<pre><code>async function createCommit1(commitMsg) {
  try {
    const repo = await NodeGit.Repository.open(bb.repoPath);
    const index = await repo.refreshIndex(); // read latest
    const files = await repo.getStatus(); // get status of all files
    console.log(&quot;file: nodegit.js:212 ~ createCommit1 ~ files:&quot;, files);
    files.forEach(file =&gt; index.addByPath(file.path())); // stage each file
    await index.write(); // flush changes to index
    const changes = await index.writeTree(); // get reference to a set of changes
    const head = await NodeGit.Reference.nameToId(repo, &quot;HEAD&quot;); // get reference to the current state
    const parent = await repo.getCommit(head); // get the commit for current state
    const author = NodeGit.Signature.now(bb.name, bb.email); // build auth/committer
    const committer = NodeGit.Signature.now(bb.name, bb.email);
    // combine all info into commit and return hash
    const commitId = await repo.createCommit(&quot;HEAD&quot;, author, committer, commitMsg, changes, [parent]);
    console.log('commitId', commitId);
    return commitId;
  } catch (err) {
    console.log(&quot;file: nodegit.js:224 ~ createCommit1 ~ err:&quot;, err);
    throw err;

  }
}

function pushChanges1(commitMsg) {
  createCommit1(commitMsg)
    .then(() =&gt; {
      let repository;
      NodeGit.Repository.open(bb.repoPath)
        .then(function (repo) {
          repository = repo;
          return repository.getRemote(&quot;origin&quot;);
        })
        .then(function (remote) {
          return remote.push(
            [&quot;refs/heads/main:refs/heads/main&quot;],
            {
              callbacks: {
                credentials: function (_url, _userName) {
                  return NodeGit.Cred.userpassPlaintextNew(cred.userName, cred.password);
                }
              }
            }
          );
        })
        .then(() =&gt; {
          console.log(&quot;Local changes pushed successfully!&quot;);
        })
        .catch((err) =&gt; {
          console.log(&quot;file: nodegit.js:197 ~ pushChanges1 ~ err:&quot;, err);
          console.log(&quot;file: nodegit.js:199 ~ pushChanges1 ~ err.errno:&quot;, err.errno);
          if (err.errno === NodeGit.Error.CODE.EUPDFAIL) {
            // Push failed, pull changes
            console.log(&quot;Push failed, pulling changes...&quot;);
            return pullChanges3();
          } else if (err.errno === NodeGit.Error.CODE.ENOTFOUND) {
            // Remote branch not found, clone repository
            console.log(&quot;Remote branch not found, cloning repository...&quot;);
            return cloneRepo();
          } else {
            console.log(&quot;Error pushing changes:&quot;, err);
          }
        });
    });
}
</code></pre>
<p>it is making a commit and push (checked on bitbucket website as well) but not with the updated file content. And on VS code , same file is in staging and in changes.</p>
<p>What can be the issue?</p>
","0","2172547","",""
"75755796","2172547","2023-03-16 11:43:13","0","51","<node.js><git><bitbucket><git-commit><nodegit>","nodegit avoid creating empty commit nodejs bitbucket","<p>I am using following code to create a commit using nodegit library of nodejs</p>
<pre><code>function createCommit(commitMsg) {
  console.log(&quot;Creating commit&quot;);
  let repository, index, oid, author, committer;
  return NodeGit.Repository.open(bb.repoPath)
    .then(function (repo) {
      repository = repo;
      return repository.refreshIndex();
    })
    .then(function (idx) {
      index = idx;
      const entryCount = index.entryCount();
      console.log(&quot;file: nodegit.js:74 ~ entryCount:&quot;, entryCount);
      if (entryCount === 0) {
        console.log(&quot;No changes to commit.&quot;);
        return;
      }
      return index.addAll();
    })
    .then(function () {
      return index.write();
    })
    .then(function () {
      return index.writeTree();
    })
    .then(async function (oidResult) {
      const head = await NodeGit.Reference.nameToId(repository, &quot;HEAD&quot;); // get reference to the current state
      const parent = await repository.getCommit(head); // get the commit for current state
      oid = oidResult;
      author = NodeGit.Signature.now(bb.name, bb.email);
      committer = NodeGit.Signature.now(bb.name, bb.email);
      return repository.createCommit(&quot;HEAD&quot;, author, committer, commitMsg, oid, [parent]);
    })
    .then(function (info) {
      console.log(&quot;Commit created successfully!&quot;);
      return info;
    })
    .catch((err) =&gt; {
      console.log(&quot;Error creating commit:&quot;, err);
      throw err;
    });
}
</code></pre>
<p>I am checking the <code>entryCount</code> as well</p>
<pre><code>      const entryCount = index.entryCount();
      console.log(&quot;file: nodegit.js:74 ~ entryCount:&quot;, entryCount);
      if (entryCount === 0) {
        console.log(&quot;No changes to commit.&quot;);
        return;
      }
</code></pre>
<p>but even if there is no file to commit it shows &gt;0 <code>entryCount</code>.</p>
<p>I tried</p>
<pre><code>git reset --hard
</code></pre>
<p>still there is entry count and makes an empty commit.</p>
<p>What can be the issue? is there any other solution?</p>
","0","2172547","",""
"75777374","21001239","2023-03-18 17:01:17","0","74","<git><github><directory><access-token><git-commit>","Cloning a repository into an already existing directory","<p>I can’t commit or push anything to my GitHub because my token has expired and when I try to clone the repo again with the new access token it says that the directory already exists and is not empty..</p>
<p>So how do I continue to work on the directory using the new token? Do I need to clone the repo again or there’s other ways to go about it?</p>
<p>I tried cloning the repo again and it said the directory already exists and isn’t empty and when I commit it says the directory is untracked</p>
","0","21001239","",""
"75778478","6873338","2023-03-18 20:24:21","0","44","<git><github-actions><git-commit><git-push>","How to get all new committed/check-in files after last PUSH","<p>I am trying to get last check-in files.</p>
<p>Requirement is user will check-in a configuration file and that config file will be passed to a script for execution. If there are 4 files checked-in then, I need to identify all 4 file and execute script in loop for each file.</p>
<p>I was able to do it using following steps:</p>
<pre><code>  - name: checkout repo content
    uses: actions/checkout@v2
    with:
      fetch-depth: 2

  - name: Identify and execute different Configuration files
    run: |
      echo &quot;Check-in configuration files are&quot;
      files=$(git diff --name-only HEAD^..HEAD)
</code></pre>
<p>However this is causing one issue.</p>
<p>If user perform git add, git commit, git add, git commit and then git push
It only pick file of last commit only.</p>
<p>I want file to be picked from last PUSH to recent PUSH.</p>
<p>Please suggest</p>
","5","6873338","",""
"75838264","8919577","2023-03-24 21:31:48","0","31","<git><github><git-commit><git-push>","Accidentally deleted all the past commits","<p>I was force pushing something onto my github repository. This was the first time I was using force in a command. After the push, all of my previous commits had been removed from github. I don't know if that's the default behaviour or if I did something wrong but is there any way to restore my previous commits? I don't mind removing the forced commit if that helps.</p>
<p>git push -f --set-upstream origin main
This is the command that I was using to push but it removed all of my previous commits.</p>
","4","8919577","",""
"75867356","17041460","2023-03-28 14:06:08","0","52","<java><git><datetime><git-commit><jgit>","JGit commiting with past (old) dates to local repository","<p>I would like to <strong>commit in a specific date in the past using JGit</strong> in Java. For example, I would like to commit to the local repository in 2023-03-01, 2023-03-02, 2023-03-03, 2023-03-04. According to many websites (including StackOverflow posts) I can achieve this by:</p>
<pre><code>String oldDate = &quot;2023-03-01&quot;;

PersonIdent author = new PersonIdent(&quot;X&quot;, String.valueOf(oldDate));
PersonIdent committer = new PersonIdent(&quot;X&quot;, String.valueOf(oldDate));

git.commit().setAuthor(author).setCommitter(committer).setMessage(&quot;Modified temp.txt&quot;).call();
</code></pre>
<p>However, this doesn't do what I want since the date stays the same, the actual date, coming from the system. I have checked the result using <code>git log</code> in Git Bash: (<strong>Please check this image</strong>)</p>
<p><a href=""https://i.stack.imgur.com/QFsYk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QFsYk.png"" alt=""enter image description here"" /></a></p>
<p><strong>How can I do commits with past dates?</strong> All help is appreciated!</p>
","1","17041460","",""
"75872670","17408714","2023-03-29 02:42:46","0","15","<git><github><version-control><git-commit>","I accidentally pushed code to my repo from another git user","<p>So here's what happened.</p>
<ul>
<li>I had a public repo on github.</li>
<li>I cloned it to a unix system at my college.</li>
<li>I made changes using VS Code.</li>
<li>I used Vs code's inbuilt git management tab to push and sync changes.</li>
<li>It asked me to log into GitHub with my account using the browser, and so i did it, with 2fa.</li>
<li>The code was pushed successfully.</li>
<li>Several days and commits later in the contributions, i see an unknown name, on investigation i realise that it was on the same day as when i pushed from my college system.</li>
<li>This probably happened cause that user logged into the local git on the system.</li>
</ul>
<p>Is there anything I can do to fix this ?</p>
","2","17408714","",""
"75877607","1287916","2023-03-29 13:02:03","0","40","<git><github><git-merge><git-commit><git-squash>","Git squash N-consecutive commits in the middle of the branch history","<p>Let's say I have several consecutive commits, we name them <code>A0..A99</code> for simplicity, pushed by the same author to the <code>main</code> branch: these commits are not the last commits pushed to the <code>main</code> branch as other commits were pushed on top of those by other authors.</p>
<p>I wish to alter the <code>main</code> branch history such as <code>A0..A99</code> commits are condensed into one single commit, hence, from <code>A0..A99</code> to just <code>A</code>, essentially similar to a git squash and merge if these commits were to be squashed and merged on top of my <code>main</code> branch, but with the added complexity that all commits and changes pushed after <code>A0..A99</code> still need to be preserved.</p>
<p>The intent is to cleanup the branch history as these <code>A0..A99</code> commits were supposed to be squashed and merged, but they were just all merged to the <code>main</code> branch.</p>
<p>As an additional factor to consider, this Git repository is hosted on GitHub and we use GitHub Releases, meaning that each release/tag is associated to the commit hash it was created from, therefore I need to make sure this doesn't break my existing releases or at least find a way to fix them in the event that commit hashes are regenerated: not sure that is actually the case, just considering the possibility and the impact it would have on my releases in GitHub.<br />
Anyhow, it is safe to assume that no release was ever done in between commits <code>A0..A99</code>.</p>
<p>How can I do that?<br />
Thanks.</p>
","1","1287916","",""
"75883268","12291714","2023-03-30 00:45:42","-1","44","<git><github><git-bash><commit><git-commit>","Why I received a message after the commit command on gitbash","<p>I've created a repository on git hub, after I run git bash on mey java project and a executed the following commands:</p>
<pre><code>git init
git add .
git commit -m &quot;MENSAGEM&quot;
</code></pre>
<p>but after commit I received the message:</p>
<pre><code>*On branch main
nothing to commit, working tree clean*
</code></pre>
<p><a href=""https://i.stack.imgur.com/jN8nN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jN8nN.png"" alt=""git bash printSc"" /></a></p>
<p>I've tried this</p>
<pre><code>git remote set-url origin https://github.com/renantins/test.git 
</code></pre>
<p>but didn't work.</p>
","2","12291714","",""
"75889678","140872","2023-03-30 14:45:11","0","42","<git><git-commit>","How can I non-interactively squash git commits with *nearly* the same commit message?","<p>I have a GitHub action which does some stuff and commits some changes to the repository. The commit message it makes it something like &quot;$NAME updated to $VERSION&quot;, but I can change that to something else if required going forward.</p>
<p>I can squash the existing commits interactively now, so there will just be single previous commit for every $NAME, but how do I make this GitHub action automatically squash the previous commit with the same $NAME, but different $VERSION?</p>
<p>While I can change the commit message to start with fixup! or squash! if needed, I would like to keep the $VERSION part, which would be unique to every $NAME commit.</p>
<p>^^ Up is more recent</p>
<pre><code>Update grapes to v3.2    &lt;---new commit
foo commit
bar commit
baz commit
Update mitshubishi to v2
apple commit
Update grapes to v2.34   &lt;---needs to be squashed into new commit
bananas commit
pear commit
Update ford to v3
</code></pre>
<p>The GitHub action will make another commit with the message <code>&quot;Update grapes to v3.2&quot;</code>, but I then want it to move <code>&quot;Update grapes v2.34&quot;</code> up under this most recent commit and squash it into the new commit.</p>
<p>If it is not possible with partially different commit message, I could replace $VERSION with &quot;latest&quot;, but would prefer not to.</p>
","4","140872","",""
"75905607","21542219","2023-04-01 10:26:51","0","24","<git><github><git-commit>","GIthub revert to singlefile out of multiple files","<p>Let's say we have an <code>xyz</code> folder in Git which contains <code>f1.txt</code>, <code>f2.txt</code>, <code>f3.txt</code> which are commited and pushed to GitHub. If we want only <code>c.txt</code> to be reverted back, how would it be possible?</p>
<p>I tried <code>git revert &lt;commitid&gt; -- c.txt</code> which shows</p>
<pre class=""lang-none prettyprint-override""><code>git revert 2ndline_f2.txt -- f2.txt
fatal: bad revision 'f2.txt'
</code></pre>
<p>I tried to push the code from Git to GitHub and tried few commands:</p>
<pre class=""lang-none prettyprint-override""><code>git clone &lt;repo&gt;
cd XYZ
git checkout -b revert_branch
git revert tagorcommitid  ex : git revert 2ndline_f2.txt -- f2.txt
fatal: bad revision 'f2.txt'
</code></pre>
","1","21542219","",""
"75910423","20878185","2023-04-02 06:17:15","-1","38","<git><github><git-merge><git-commit>","Github commit conflict","<p>In GitHub, I cloned version 1 of the repository and made changes in it. While I was making changes someone else also cloned the repository and made changes and committed the changes which are not on my local machine, now if I want to commit my changes then will their changes be retained or it will be overwritten by my code?</p>
<p>I want to merge both the codes such that changes of both of them are retained.</p>
","0","20878185","",""
"75925730","21474526","2023-04-04 05:15:37","1","38","<git><github><git-commit><git-push><git-config>","How to fix GitHub profile conflicts?","<p>The global profile on my terminal was 0xminer11 and its committed using the same profile and I want to use the same profile to push the code as well. but while pushing, it was taking on a different profile.</p>
<p>you can see my logs.</p>
<pre><code>naveenarali@NaveenAralis-MacBook-Air gasless-Txs. % git config --global user.name 
0xminer11
naveenarali@NaveenAralis-MacBook-Air gasless-Txs. % git push origin dev
remote: Permission to 0xminer11/gasless-Txs..git denied to cclchd-naveenkumar.
fatal: unable to access 'https://github.com/0xminer11/gasless-Txs..git/': The requested URL returned error: 403

</code></pre>
<p>So is there any solution or suggestions to maintain these conflicts?.</p>
<p>I globally configured my GitHub account username and email. but still am facing the same issue.</p>
","2","21474526","",""
"75930891","7134737","2023-04-04 14:55:59","0","37","<git><github><git-commit><git-rebase>","git - Squashing pushed commits in the protected main branch","<p>I have a bunch of similar commits that are polluting my commit history on the main branch.</p>
<p>Apparently, someone forgot the &quot;Squash &amp; Merge&quot; while merging there branch.</p>
<p>Is there any way I can squash these commits now into a single commit ?</p>
<p>Note: <strong>The main branch is protected, so I cannot write to it without a PR.</strong></p>
<p><strong>I have tried creating a separate branch and squashing the commits and raising a PR. But this does nothing.</strong></p>
<p><strong>It only adds on a commit to this very long list of commits.</strong></p>
<p>Is there any way to change these pushed commits ?</p>
","14","7134737","",""
"75933464","21382803","2023-04-04 20:11:58","0","51","<git><git-commit>","How to Commit Individual Lines of Code with Git","<p>I prefer to commit changes that fulfill specific functionalities, but sometimes I forget to do so, resulting in a commit that encompasses multiple functionalities. This can make it difficult to name the commit accurately. I'm currently using the GitHub interface in VSCode and I'm curious if there's an option to select lines of code without committing changes beforehand, so I can work on multiple functionalities and commit them separately after finshing.</p>
<p>My usual approach is to stage and commit changes after completing a functionality. However, if I forget to do so, I end up giving a broader commit message that describes the changes, which makes me feel bad. Additionally, it can be challenging to roll back to specific changes.</p>
","1","21382803","",""
"75947607","9636379","2023-04-06 08:56:03","0","57","<git><branch><commit><git-branch><git-commit>","Git push commit on different branch","<p>I have a git repository with two branches: <code>master</code> and <code>new_feature</code>. The <code>new_feature</code> branch is created based on <code>master</code> to implement a new feature, so before implementing this new feature they are the same.</p>
<p>Now I implemented this new feature and accidentally committed these changes in the <code>master</code> branch, because this branch was still checked out locally. Before pushing to the remote, I realized I committed the changes on the wrong branch. If I now checkout <code>new_feature</code>, the changes do not come along.</p>
<p>How do I undo this commit to <code>master</code> and redo the same commit to <code>new_feature</code>?</p>
","1","9636379","",""
"75953546","285795","2023-04-06 20:34:28","0","49","<git><visual-studio-code><git-commit>","Flashing From Source Control Icon","<p>Visual Studio Code's <code>Source Control</code> icon is flashing every 3 seconds. The below GIF has been sped up ...</p>
<img src=""https://i.stack.imgur.com/iZsYr.gif"" width=""220"">
<p>When I look at the outputs after running the command <code>Git: Show Git Output</code> it seems to do more than just get a status, and the second command actually fails.</p>
<pre><code>git status -z -uall
git config --get commit.template 
git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track)%00%(upstream:remotename)%00%(upstream:remoteref) refs/heads/main refs/remotes/main 
</code></pre>
<p>The <code>git config ...</code> is failing after running it on the command line:</p>
<img src=""https://i.stack.imgur.com/G0KAV.png"" width=""300"">
<p>How can this be resolved?</p>
<hr />
<ul>
<li>VS Code Version: 1.77.1</li>
<li>Git Version:     2.33.1.windows.1</li>
</ul>
<p><em>Both of those are the latest version as of this post</em></p>
<ul>
<li>Disabling all extensions and looking in the source control section shows this:</li>
</ul>
<img src=""https://i.stack.imgur.com/yRsh8.png"" width=""300""> 
","2","285795","",""
"75972256","4258796","2023-04-09 18:36:48","0","61","<github><git-commit>","Unable to push changes from local to remote branch in GitHub due to access rights","<p>I'm listed as the owner of the organization which has the mentioned repository. I cut a branch and I'm working on this branch locally. A few days back I was able to push my local changes to the remote branch but now I'm getting an error:</p>
<pre><code>fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
</code></pre>
<p>I'm using IntelliJ as my editor. Also, I'm able to pull the changes from remote branch.
Before writing this post I've generated a new Personal access token and added it to IntelliJ.</p>
<p>Not sure how to go about it.</p>
<p>Edit:</p>
<p>I'm selected the following while generating my Personal Access Token
<a href=""https://i.stack.imgur.com/2sT2j.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2sT2j.png"" alt=""enter image description here"" /></a></p>
<p>Edit 2:</p>
<p>The issue was due to the repository. Keeping the question since it's been answered.</p>
","0","4258796","",""
"76033034","9434803","2023-04-17 08:17:29","0","49","<git><github><git-commit><git-push><git-rebase>","Remote commit dates not corresponding with local","<p>I recently rebased my most recent commits to my master branch interactively (<code>rebase -i</code>). I squashed multiple commits into just two, discarding unneeded commit messages (<code>fixup</code>), and subsequently pushed to remote master (on GitHub).</p>
<p>What I noticed is that the commit dates in the remote repo does not correspond to the date of the commit (as provided by <code>git log</code>). Rather the commit dates on the remote branch correspond to the date of rebasing and pushing. From what I can find, the commit history on the remote repo is supposed to correspond to the local one, but the commit dates in my remote and local branch are divergent. I can only assume this has something to do with rebasing, and that my original commits where tampered with.</p>
<h6>Output from <code>git log</code>:</h6>
<pre><code>% git log
commit 09e76b90aa1c0c3f6a780c8b29b0c93dc2f57143 (HEAD -&gt; master, origin/master)
Author: John Doe &lt;john@doe.com&gt;
Date:   Wed Apr 12 13:23:12 2023 +0200

    1st imputation success no interaction or random sl

commit 2ef860eabd90dfff5197c66a3dbb541174e1146b
Author: John Doe &lt;john@doe.com&gt;
Date:   Thu Mar 9 22:32:49 2023 +0800

    First commit on Arch Linux

</code></pre>
<h6>History on GitHub:</h6>
<p><a href=""https://i.stack.imgur.com/rpbZS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rpbZS.png"" alt=""enter image description here"" /></a></p>
<ul>
<li><strong>Why do the commit dates on the local and remote branch diverge?</strong></li>
<li><strong>Is there a way to change Git/GitHub's behaviour so that the commit dates correspond?</strong></li>
</ul>
","2","9434803","",""
"76049576","17366640","2023-04-18 22:47:17","0","43","<git><commit><git-commit>","Do lines starting with '#' really get ignored or still changes are saved either starting with #?","<p>I had some changes done in a cloned repo and now I am trying to commit and push the project. But the changes displayed in the commit section all start with '#'. So do I remove the # for the work to be saved or I leave it that way and either way still saves everything I have done?</p>
","6","17366640","",""
"76067722","8061021","2023-04-20 19:43:48","1","51","<git><merge><git-commit>","Git - get last commit made on branch","<p>I have a git branch, <code>branch-1</code>, whose last commit hash is <code>123456</code>. I also have a git branch <code>branch-2</code> whose last commit is <code>7890ab</code> and was made after <code>123456</code>. Both of these branches are based off of <code>dev</code>.</p>
<p>I then merge <code>branch-2</code> into <code>dev</code> and pull <code>dev</code> into <code>branch-1</code>. Running <code>git log</code> on branch-1 shows the last 3 commits as:</p>
<ul>
<li><p>A merge commit for pulling <code>dev</code> into <code>branch-1</code></p>
</li>
<li><p><code>7890ab</code></p>
</li>
<li><p><code>123456</code></p>
</li>
</ul>
<p>Is there a command I can run that will retrieve the last commit <strong>made</strong> on branch <code>branch-1</code> -- that is, <code>123456</code>? I've tried running <code>git log --no-merges --max-count=1</code>, which excludes the merge commit, but retrieves <code>7890ab</code> because it's not a &quot;merge commit&quot; even though it was retrieved from a separate branch.</p>
<p>Thank you.</p>
","4","8061021","",""
"76069690","14382836","2023-04-21 03:30:04","0","152","<maven-plugin><git-branch><git-commit>","git-commit-id-plugin does not print the git branch name","<p>I use <code>git-commit-id-plugin</code> in my pom.xml as follows:</p>
<pre><code>&lt;plugin&gt;
      &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;
      &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;
      &lt;version&gt;4.9.10&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;revision&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
      &lt;configuration&gt;
        &lt;dotGitDirectory&gt;${project.basedir}/../../.git&lt;/dotGitDirectory&gt;
        &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;
        &lt;generateGitPropertiesFilename&gt;src/main/resources/git.properties&lt;/generateGitPropertiesFilename&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
</code></pre>
<p>Then I build my maven project by Jenkins, in the generated <code>git.properties</code>, the value of <code>git.branch</code> is identical to the value of <code>git.commit.id</code>, what I want is the git branch name, why would this happened, and how do I solve this? Any idea is appreciated.</p>
","0","14382836","",""
"76073291","21543457","2023-04-21 12:44:12","0","78","<bash><hook><git-commit><husky><git-husky>","Regex not working with husky commit-msg hook","<p><strong>.husky/commit-msg</strong></p>
<pre><code>#!/usr/bin/env sh
. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;


PATTERN_COMMITS='(^IMO-[0-9]+\s#time\s([0-9]+([.][0-9]+)?[wdhm])([ ][0-9]+([.][0-9]+)?[wdhm])*\s\|\s[[:alnum:]_].+|Merge|Revert|Apply)'

msg=$(cat $1 | sed '/^#.*/d')
if ! [[ &quot;$msg&quot; =~ $PATTERN_COMMITS ]]; then
  echo -e &quot;\x1b[31mError commit message:\x1b[0m \x1b[33m&quot;$msg&quot;\x1b[0m does not follow conventional commit standard, e.g \x1b[33m 'IMO-1234 #time 1w1d1h1m | This is my commit' \x1b[33m&quot;
  exit 1;
fi
</code></pre>
<p>Git commit command I'm using</p>
<p><code>git commit -m &quot;IMO-1209 #time 1m | testing husky 11&quot;</code></p>
<p>The Hooks should pass the regex and commit should work.
BUT I got error as below</p>
<p><code>Error commit message: IMO-1209 #time 1m | testing husky 11 does not follow conventional commit standard, e.g  'IMO-1234 #time 1w1d1h1m | This is my commit' </code></p>
","0","21543457","",""
"76114595","6591667","2023-04-26 19:54:11","0","33","<git><git-commit><git-stash>","Stash or commit changes so local repo is up to date with remote repo?","<p>I have a local repo with 50 submodules. My teammates recently made some deletions on the remote repo of 5 submodules. So I'm behind one commit and have extra submodules.</p>
<p>I want to update my local I recently Pull to get my local up to date with the remote remo. But it's telling me that I either need to commit or stash the uncommitted changes.</p>
<p>I still don't fully understand the difference. I just want my local repo to be exactly up to date with what's on my remote repo, so it automatically deletes the extra submodules that are on my current local repo.</p>
<p>Which of the two would be the correct option to do this?</p>
<p>And my last question, if I chose commit. What would be the purpose of committing the changes if later on I would Pull what's on the remote repo and end up changing the things I just committed anyways? Thanks</p>
","4","6591667","",""
"76118243","16949958","2023-04-27 08:19:48","0","36","<github><google-colaboratory><git-commit><ipynb>","Upload colab notebook to github gives ""\n"" on all lines when viewed through github","<p>So today I added a new section to my colab notebook and pushed my notebook to github but then when I viewed it all it showed was &quot;\n&quot; on all lines except for a few. You can see it <a href=""https://github.com/SajawalHassan/sentiment_analysis_pytorch/blob/main/sentiment_analysis_pytorch.ipynb"" rel=""nofollow noreferrer"">here</a>.</p>
<p>This was done through colab method (save a copy on github way) as well as downloading the file and then uploading it. All it showed was &quot;\n&quot;.</p>
<p>Viewing the file through the github vs code editor gives me the correct output so I am really confused as to what to do. I have tried searching on the internet for this but had no luck.</p>
","0","16949958","",""
"76125869","2866191","2023-04-28 02:29:32","0","74","<intellij-idea><version-control><ide><git-commit><git-push>","Why isn't there one merged button ' GIT commit+push' in IDEA2018 of JetBrain?","<p>I am searching for a version control button 'Git Commit+Push' in Jetbrain IDEA 2018.
<a href=""https://i.stack.imgur.com/zuGvZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zuGvZ.png"" alt=""enter image description here"" /></a>
But there is only a 'Git Push' button, a 'Git Commit' button as they are two separate buttons,but it seems not too convenient because of tedious design in GIT: 'commit' and 'push' are two different steps.</p>
<p>Can anyone tell where it's?</p>
<p>Maybe it's exists but I don't know where it's, or maybe there's not such button in IDEA2018 at all!
There is a one merged button in Eclipse and it's very convenient.<a href=""https://i.stack.imgur.com/g6myf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/g6myf.png"" alt=""enter image description here"" /></a></p>
","1","2866191","",""
"76154457","21582211","2023-05-02 11:37:19","0","15","<git><github><debian><windows-subsystem-for-linux><git-commit>","Error message whenever I try to commit my changes to GitHub","<p>Whenever I try to commit my changes I get an error message.</p>
<p>I use git version 2.30.2. This is the error</p>
<pre><code>error: unsupported value for gpg.format: ssh

fatal: bad config variable 'gpg.format' in file '/home/greenydev/.gitconfig' at line 9
</code></pre>
<p>This is what my .gitconfig looks like when I cat. Is there also an issue with it?</p>
<pre><code>[user]

        email = &lt;my email&gt;

        name = &lt;my name&gt;

        signing key = /home/&lt;user&gt;/.ssh/id_...

[credentia]

        helper = store --file /home/&lt;user&gt;/.my-credentials

[gpg]

        format = ssh
</code></pre>
<p>I tried this out today and was expecting my. Changes to be committed.</p>
","5","21582211","",""
"76179988","3880973","2023-05-05 07:57:59","0","59","<git><github><git-branch><git-commit><git-merge-conflict>","How does Github (not Git) solve merge conflicts when pushing to remote repository?","<p>I have completed two Github tutorials but this topic was not covered in any of them.</p>
<p>My confusion is, when 5 developers are working on the same branch, they all start working at 10 in the morning, they all pull the repo from remote to their local machine, and makes changes to the same files, when they push their commits to the remote at 5 in evening, the github will receive 5 different commits with 5 different versions of the same file(s), in this case will Github show an error for merge conflicts or it will simply replace the previous versions of a branch by the version who will push the last in time?</p>
<p>Also I was wondering, if anyone can push changes to any branch on the repo, won't he overwrite the previous branch, won't there be an issue with this?</p>
<p>When we &quot;git restore [commit hash]&quot;, can we go back to the commits that were made after the commit hash we just restored to?</p>
<p>I apologize if these were naive questions, I am a learner in github so I am confused. Please help.</p>
","4","3880973","",""
"76195679","21845117","2023-05-07 18:39:25","0","18","<github><terminal><git-commit><git-add><git-repo>",".DS_Store ""Changes not staged for commit?""","<p><em>I'm very new to coding so please be patient</em> On a macOs. I had help from a tutor to move my .ds_store and future .ds_store files into my .gitignore file, (wasn't aware what a .ds_store file even was until I accidentally uploaded it to a repo and had to delete it) but now I'm trying to add to a branch and I have two options come up in regards to the .ds_store file. Says:
Changes not staged for commit: (use &quot;git add ...&quot; to update what will be committed) or (use &quot;git restore ...&quot; to discard changes in working directory) modified: .DS_Store
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Now my question is- do I git add the file to update the changes to my local repo and push them to github? Or am I missing a step?</p>
<p>Haven't tried anything yet because I don't want to make a mess of the repo by adding and deleting a bunch of unnecessary files from the repo, im clueless at the moment.</p>
","0","21845117","",""
"76199286","11738158","2023-05-08 09:36:53","-1","46","<git><merge><git-merge><git-commit>","Can I merge two branches when I am in another branch?","<p>Suppose I am in branch A. How can I merge branches B and C without checking out another branch?</p>
<p>Can I use this command?
<code>git merge B C</code></p>
","3","11738158","",""
"76214573","140872","2023-05-10 02:47:07","3","74","<git><git-commit>","Is there a way to git commit --fixup=amend while changing the commit message non-interactively?","<p>I want to squash some commit through scripting using <code>git commit --fixup</code>, but I have got stuck on the fact that the <code>-m</code> switch for messages cannot be used with <code>--fixup:amend</code>.</p>
<pre><code>$ git commit --fixup=amend::/'Upgrade to foo' -m &quot;Upgrade to bar&quot;
fatal: options '-m' and '--fixup:amend' cannot be used together
</code></pre>
<p>(I would later <code>git rebase --autosquash &lt;some-much-earlier-commit&gt;</code> to squash them all together if I could get that far)</p>
<p>I could use the plain <code>--fixup</code> without <code>amend</code> but then I cannot change the commit message. Without the <code>-m</code> message, the editor opens for editing the commit message, so this cannot be done through scripting.</p>
<p>I understand that these are &quot;porcelain&quot; commands, but as I am doing this through scripting, I was wondering if there is still a way of doing the equivalent of <code>git commit --fixup=amend</code> while still changing the commit message non-interactively using &quot;plumbing&quot; commands?</p>
","8","140872","",""
"76248466","5634777","2023-05-14 16:08:50","0","17","<github><git-commit>","Github doesn't show the amended commit date","<p>I use this command to modify a commit date:</p>
<pre><code> git commit --date=&quot;5 day ago&quot; -m &quot;modifying date&quot;
</code></pre>
<p>The following is the result of the command above:</p>
<pre><code> [main 0ab160a] modifying date
 Date: Tue May 9 18:59:29 2023 +0300
 1 file changed, 1 insertion(+)
</code></pre>
<p>I then push the commit using this command:</p>
<pre><code> git push -f origin main
</code></pre>
<p>Result of pushing the commit:</p>
<pre><code> Enumerating objects: 5, done.
 Counting objects: 100% (5/5), done.
 Writing objects: 100% (3/3), 267 bytes | 89.00 KiB/s, done.
 Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
 To https://github.com/testings1404/Testings.git
 1282afa..0ab160a  main -&gt; main
</code></pre>
<p>I checked the commit through github website and it doesn't show the new date 9th of may. It shows the it was committed few minutes ago:</p>
<p><a href=""https://i.stack.imgur.com/IJocY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IJocY.png"" alt=""enter image description here"" /></a></p>
","0","5634777","",""
"76250716","15994121","2023-05-15 03:26:42","2","88","<visual-studio-code><git-commit>","In VS Code, is there a way to configure source control so that I MUST stage files/changes before they can be committed?","<p>In my current environment, it is possible to accidentally commit <em>all</em> changed files at once, without staging. I don't want that to happen.</p>
<p>(Thankfully, that it does happen and I have not yet synced the changes (AKA pushed to remote), <a href=""https://stackoverflow.com/a/14281090/15994121"">I can just do <code>git reset HEAD~1</code></a>, and all of the files which were just committed will be back in my staging area).</p>
<p>But how would one prevent all this from happening in the first place? It is super easy to <code>Ctrl + Enter</code> and accidentally commit all the files.</p>
","0","15994121","",""
"76252758","221066","2023-05-15 09:38:14","0","50","<github-actions><pull-request><git-commit><argocd>","Github actions: How to view argo cd: kubernetes manifests, application and applicationset changes as in compact diff view of Argo CD GUI","<p>I would like to have manual Sync in my Argo CD cluster and I would like to have my CI pipeline using github workflow action where I will have a Pull Request proposing changes (let say increasing the number of repicas from 4 to 6) and my CI pipeline would would trigger a Workflow that will be react to PR and I need to add to the PR comment or create a new issue with a similar view of this Change like it is shown in Argo CD GUI - Compact diff and I need to know what files changed (in case multiple applicaton or applicationset are changed). I know I can grab the output of running argocd app diff argocd/webapp-kustom-prod
but I need to figure out what is changed in order to find what it the difference)</p>
<p><strong>So how to do this in a github workflow action.</strong></p>
<p><a href=""https://i.stack.imgur.com/rgPFL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rgPFL.png"" alt=""Kubernetes manifests difference in Argo CD GUI"" /></a></p>
<p><a href=""https://i.stack.imgur.com/JABn3.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JABn3.jpg"" alt=""Argo CD CLI diff"" /></a></p>
","0","221066","",""
"76309424","21943058","2023-05-22 19:43:28","1","20","<git><github><git-commit><project-management><github-issues>","Can I connect a Github Projects task to a commit without converting it to an issue?","<p>I am trying to use github Projects to manage my dev, but I can't seem to find info anywhere on how to associate a task (NOT an issue) with a commit.  Is there a way to do this similar to how &quot;fix #xxx&quot; line will link to an issue or do I have to convert my tasks to an issue and then close them in my commits in order to do this?  I am familiar with SourceControl and TFS' approach to this but can't find similar functionality in git and I do not have the option to use SourceControl right now.</p>
<p>Thank you in advance!</p>
<p>UPDATE: added screenshot of the webpage display of a Github Project and tasks as an example for clarity.
<img src=""https://i.stack.imgur.com/pJLpV.png"" alt=""example of a project as shown kanban style in Github web viewer"" /></p>
<p>I have tried looking through github documentation, StackExchange, just googling, and digging through the functionalities available when viewing projects. I do use VSCode as my python IDE and the github extensions but perhaps I am missing a particular extension or searching with the wrong keywords.</p>
","4","21943058","",""
"76342078","7014739","2023-05-26 15:10:19","-1","38","<git><macos><git-bash><git-commit><pre-commit-hook>","How prefix the commit message with the branch type and the Jira ID using a Git Hook?","<p>I need some help with a Bash script for the <code>prepare-commit-msg</code> that will automatically prefix the commit messages with the <strong>branch type/</strong> and the <strong>Jira ticket number</strong> like this <code>feat/JIRA-000: &lt;commit message&gt;</code>.</p>
<p>All the scripts I found out there they can only prefix the commit with the Jira id, but I need to include also the branch type followed by a slash <code>/</code> (feat/, fix/, docs/, hotfix/) and then the Jira ticket <code>ABC-000</code> resulting in a prefix like <code>hotfix/ABC-000: &lt;commit message&gt;</code></p>
<p>Would also be ideal to have some check for the branch type so that only certain name are allowed (e.g. only branch type feat, fix, docs, hotfix). Any help would be highly appreciated!</p>
<p>An example that I found is the following:</p>
<pre><code>#!/bin/bash

# Get the current branch name
current_branch=`git rev-parse --abbrev-ref HEAD`

# Search Jira ID in a pattern such a &quot;feature/ABCD-123-my-feature&quot;
id=$(echo $current_branch | sed -nE 's,[a-z]+/([A-Z]+-[0-9]+)-.+,\1,p')

# Only prepend if an ID was found in the current branch
if [[ ! -z $id ]]; then
 # $1 is the name of the file containing the commit message
 # Prepend &quot;ABCD-123: &quot;
 sed -i.bak -E &quot;1s/^/${id}: /&quot; $1
fi
</code></pre>
<p>But it prefixes the commit with only the Jira ticket ID.</p>
","10","7014739","",""
"76347338","252858","2023-05-27 14:14:24","1","39","<git><macos><git-commit>","Is there a reason git commit --no-verify would still run hooks?","<p>I am currently attempting to commit a WIP branch that breaks the hooks on my project. Executing this command:</p>
<pre><code>git commit --no-verify -a -m &quot;Issue #1149: get past second error&quot;
</code></pre>
<p>... results in Git running commit hooks.</p>
<p>I do have a workaround:</p>
<pre><code>git -c core.hookspath=/dev/null commit -a -m &quot;Issue #1149: get past second error&quot;
</code></pre>
<p>But can anyone propose something about my local setup that would cause this to happen?</p>
<pre><code>$ git version
git version 2.39.2 (Apple Git-143)
</code></pre>
<p>This happens under both VSCode terminals and <code>Terminal.app</code> (I wanted to rule out some sort of strange VSCode behavior related to their shell integration).</p>
","5","252858","",""
"76366456","10581944","2023-05-30 15:36:00","-1","18","<amazon-web-services><jupyter-notebook><amazon-sagemaker><git-commit><gnupg>","How to set signed commit (using GPG) in AWS SageMaker lifecycle configuration?","<p>I understand that we can use lifecycle configuration in AWS SageMaker to setup python environment and install packages, but would it be possible to set signed commit (using GPG) there as well?</p>
<p>I followed the steps mentioned in <a href=""https://stackoverflow.com/questions/53785117/how-do-i-set-the-name-of-my-aws-sagemaker-repo-user"">this page</a> and tried on my notebook, i managed to commit with the desired username, but the commit isn't signed (I'm expecting there's a verified icon next to my commit in GitHub, please see the screenshot below), I have signed commit setup with GPG on my local machine, but does anyone know how to set this up in SageMaker lifecycle configuration? I couldn't find anything similar online...</p>
<p>Many thanks.</p>
<p><a href=""https://i.stack.imgur.com/hc7KZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hc7KZ.png"" alt=""enter image description here"" /></a></p>
","0","10581944","",""
"76380130","10581944","2023-06-01 08:45:48","0","11","<github><jupyter-notebook><git-commit><gnupg><gpg-signature>","Is it possible to set signed commit (using GPG) inside Jupyter Notebook?","<p>I have set up signed commit using GPG on my local machine, but now I wanted to set it up inside Jupyter notebook, is it possible, does anyone ever done this before?</p>
","0","10581944","",""
"76386514","13093381","2023-06-02 00:38:15","2","43","<git><github><version-control><git-commit><git-rev-list>","Get commit hashes between 2 specified commit hash","<p>What I am asking is somewhat similar to this <a href=""https://stackoverflow.com/questions/18679870/list-commits-between-2-commit-hashes-in-git/18680059#18680059"">question</a>. However, it doesn't solve my problem. I want to list the commit hashes present between a start hash and an end hash (including the start and end). Let me give a simple example. For <a href=""https://github.com/danilofes/refactoring-toy-example"" rel=""nofollow noreferrer"">this</a> repository, if we go to the commit history of the master branch, I want commits between <code>f3b628f8f9c71a2cdfa052025c4a1ed78ee4c45d</code> and <code>d4bce13a443cf12da40a77c16c1e591f4f985b47</code>. So I want the following commits to be printed -</p>
<pre><code>f3b628f8f9c71a2cdfa052025c4a1ed78ee4c45d
c286db365e7374fe4d08f54077abb7fba81dd296
0bb0526b70870d57cbac9fcc8c4a7346a4ce5879
a5a7f852e45c7cadc8d1524bd4d14a1e39785aa5
9a5c33b16d07d62651ea80552e8782974c96bb8a
d4bce13a443cf12da40a77c16c1e591f4f985b47
</code></pre>
<p>I initially did something like this - <code>git rev-list --reverse --remotes ^f3b628f8f9c71a2cdfa052025c4a1ed78ee4c45d^ HEAD --</code> but it gave me incorrect results.</p>
<p>After that I did this <code>git rev-list --reverse --ancestry-path f3b628f8f9c71a2cdfa052025c4a1ed78ee4c45d..HEAD</code> which gave me all but the first (starting) commit correctly.</p>
<p>So if someone can please help me on this, I will be really grateful. Also, if possible, please explain the command that you're using and how it's selecting those commits only. Thank you.</p>
","2","13093381","",""
"76392262","22009246","2023-06-02 17:18:57","0","12","<github><bitbucket><git-commit>","What is the best way to transfer 'develop' branch from repository B to repository A's subdirectory with commit history using Bitbucket UI or terminal?","<p>I want to transfer &quot;develop&quot; branch of repository B to repository A's subdirectory named &quot;xyz&quot; under branch &quot;main/develop&quot; of repository A by preserving all commit history of repository B for branch &quot;develop&quot;.</p>
<p>Can someone please suggest solution from mac terminal or UI of bitbucket.</p>
<p>I have tried bundle, subtree, submodule, mirror, bare, but some transfers the data with no commit history and git filter-repo doesn't help me transfer the files itself.</p>
","0","22009246","",""
"76398807","875915","2023-06-04 03:15:23","0","8","<git-commit><git-rebase><git-diff>","How to show differences in a commit message that was modified with ""git rebase -i""?","<p>I did a <code>git rebase -i</code> and reworded a commit.  How do I show the diff between the new commit message that I committed and the old commit message?  (e.g., from the commit in <code>git reflog</code>)</p>
","0","875915","",""
"76410256","3131685","2023-06-05 21:59:43","0","6","<github><git-commit><git-push><git-pull>","How to upload/push files in folderB to remote repo without adding and commiting certain files form folderA","<p>I have two working folders, say fA and fB. I make changes in both fA and fB. I want to commit and push fB first with a particular commit message (e.g. &quot;changes made to fB)&quot; that is not relevant to fA.</p>
<p>How can I do that?</p>
<p>When I add all modified/new/deleted files within fB, (git add fb/*), the <em>git commit</em>, do the <em>git pull --rebase origin main</em> from the remote repo, I get the error:</p>
<blockquote>
<p>error: cannot pull with rebase: You have unstaged changes. error:</p>
</blockquote>
<blockquote>
<p>please commit or stash them.</p>
</blockquote>
<p>I understand why I am getting this error because files changed in fA are not added and committed, but I don't want to do that commit now. Is it possible to do what I want?</p>
<p><strong>Edit:</strong> One thing I am thinking of is put the files/folder in .gitignore that I don't want to commit now, and later remove them from the .gitignore, but this is pretty manual and time-consuming task if I have to repeat again and again.</p>
","0","3131685","",""
"76414984","15387215","2023-06-06 13:06:20","0","21","<git><git-commit>","What is ""create mode 10064 <file>"" in Git? Are there any other modes? What do they mean? Are there numbers other than 10064? What do they mean?","<p>As I was learning Git, I saw the commit message was able to understand what everything meant except this. I searched a bit on google and stack but there is no proper explanation as to what it means and the meaning of different modes or numbers displayed.</p>
","2","15387215","",""
"76471267","5782159","2023-06-14 07:51:02","0","38","<git><git-commit><git-squash>","How to merge multiple commits onto another branch with multi (number of co developers) squashed commit?","<p>Now there is a branch(branch1),<br />
three people P1 P2 P3</p>
<p>they develop together on branch1<br />
with the comimit log<br />
P1  commit1<br />
P2  commit2<br />
P3  commit3<br />
P3  commit4<br />
P1  commit5<br />
P2  commit6<br />
...<br />
P1  commit100</p>
<p>don't need to pay attention to the content of the submission records.<br />
I just want to give an example of how they freely submit on this branch,<br />
and there is a lot of commits</p>
<p>I want to create a new branch(branch2)</p>
<p>merge all code from branch1 into branch2
but each person will only have one commit,<br />
such as</p>
<p>P1 commit1<br />
P2 commit2<br />
P3 commit3</p>
<p>May I ask if this is achievable? If possible, what should I do?</p>
<p>I don't know if these commands will work, such as<br />
git cherry-pick<br />
git rev-list<br />
git filter-branch<br />
git commit-tree<br />
...<br />
and complete interaction through scripts</p>
","1","5782159","",""
"76474287","14833349","2023-06-14 13:47:03","0","38","<git><github><git-merge><git-commit>","What is the correct order of git command I should use?","<p>I have 3 local branches master, A and B. This is a old project, I did not updated the my local repo for a long time.</p>
<p>I made some changes on B, and then <strong>git checkout A; git pull master</strong> to update my local A branch with remote master.
Then I run** git merge B**, resolve the merge conflicts and raise a pull request.</p>
<p>But my colleague tell me that I should do it in this way: first <strong>git checkout A; git merge B; git pull master</strong>, resolve the conflicts and then raise a pull request. I did not realize any differences. Can anyone help me out?</p>
","0","14833349","",""
"76519414","8403867","2023-06-21 01:42:59","0","34","<git><git-merge><git-branch><rebase><git-commit>","How to combine two history commits without making the whole history linear?","<p>For example I have a commit history like this</p>
<pre><code>*   commit XXX
|\  Merge: XXX XXX
| |
| |     Merge branch 'dev'
| |
| * commit XXX
| |
| |     e
| |
| * commit XXX
| |
| |     d
| |
| * commit XXX
| |
| |     c
| |
* | commit XXX
| |
| |     b
| |
* | commit XXX
|/  
|   
|       a
|
* commit XXX

      init
</code></pre>
<p>Note that commit a, b and c, d, e are on different branches, and they have already merged.
How do I combine commit c and d without changing everything else?
I want the final history to be like this</p>
<pre><code>*   commit XXX
|\  Merge: XXX XXX
| |
| |     Merge branch 'dev'
| |
| * commit XXX
| |
| |     e
| |
| * commit XXX
| |
| |     c + d
| |
* | commit XXX
| |
| |     b
| |
* | commit XXX
|/  
|   
|       a
|
* commit XXX

      init
</code></pre>
<p>I tried <code>git rebase -i</code>  onto the commit <code>init</code> and change the commit <code>d</code> to <code>fixup</code> but it makes everything linear.</p>
","4","8403867","",""
"76520840","10889880","2023-06-21 07:16:55","1","16","<angular><git-commit><lint-staged>","validation error while committing code on git","<p>I was working on angular java project. and while committing code i found below error.</p>
<hr />
<p>× Validation Error:</p>
<blockquote>
<p>Invalid value for 'linters': { '<em>.@(js)': [ 'eslint --fix', 'git add' ], '</em>.@(ts)': [ 'tslint --fix', 'git add' ] }</p>
</blockquote>
<p>Advanced configuration has been deprecated.</p>
<p>× Validation Error:</p>
<blockquote>
<p>Invalid value for 'ignore': [ 'spec-dtslint/<strong>/*.{js,ts}', 'api_guard/</strong>/*.{js,ts}' ]</p>
</blockquote>
<p>Advanced configuration has been deprecated.</p>
<hr />
<p>I reinstalled npm with command- <code>npm install</code>, <code>yarn install</code>, <code>yarn build:libs</code> (required steps for my project setup) then I was able to see the changes on git bash like unstaged and staged changes. However it was returning same error again and again.
tried one solution from stackoverflow - remove <code>.git/hooks</code> and reinstall npm - <code>npm install</code>.
still not worked for me.</p>
","2","10889880","",""
"76520329","8403867","2023-06-21 05:54:14","1","8","<github><repository><size><rebase><git-commit>","Reduce github repository size by deleting commits","<p>My github repository once had one commit with a very large executable inside, and some time later I realized this takes me (and other people) huge of time to clone it from anywhere, so I deleted this executable and do the git rebase, and I'm now 100% sure that there're no large files in the current commits. However the previous releases were using the code before the rebase (although the file contents are exactly the same after the rebase), thus github still keeps the reference to those commits. I tested on a private repository without any releases, and I find that the repository size goes back to normal after rebase. My main repository has &gt; 700 stars and I don't want to make a new one. Is there anything I can do to reduce the git clone size? Deleting all the releases is OK for me, but only in the case that it will solve this problem (which I'm not sure). Here's my repository <a href=""https://github.com/SUSYUSTC/MathTranslate"" rel=""nofollow noreferrer"">https://github.com/SUSYUSTC/MathTranslate</a></p>
<p>I tried to do this rebase but not working.</p>
","0","8403867","",""
"76532734","8013881","2023-06-22 14:01:45","0","43","<git><go><git-commit>","How to access the last commit identifier in Go code?","<p>Is there any way to have access to the last commit's identifier in the go code? I'm going to use it for the naming the output files my code generates and in this way I can find outputs related to each commit.</p>
<p>I've tried to find a solution but it seems that there is no trivial solution for it.</p>
","3","8013881","",""
"45780499","3230694","2017-08-20 09:20:24","0","82","<git><branch><git-commit><git-checkout>","Git - find a bug in specified commit","<p>There is a bug appeared in commit <strong>63aeeab</strong>.
There are too many changes between <strong>b947052</strong> and <strong>63aeeab</strong>.
I want somehow checkout <strong>63aeeab</strong> and then discard changes one by one to find the bug. And then go back to my current commit. What is a proper way?</p>

<p><a href=""https://i.stack.imgur.com/ZHUk9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZHUk9.png"" alt=""enter image description here""></a></p>
","0","3230694","0","0"
"11184267","1479142","2012-06-25 06:18:20","23","17862","<git><git-commit><git-amend>","How to push to repo after doing 'git commit --amend'","<p>I made a commit &amp; pushed to repo. Later I modified the commit message by using <code>git commit --amend</code>, In the pop-up window I entered the new message. I could see the new message via <code>git log</code>. After all this process, my <code>git status</code> shows like this. I don't know how to push this change to repo.</p>

<pre><code>On branch master
Your branch and `origin/master` have diverged,
and have 1 and 1 different commit(s) each, respectively.
</code></pre>

<p>Expecting a feasible solution for this.</p>
","3","1479142","0","0"
"14215837","431967","2013-01-08 13:18:10","3","3195","<git><git-commit>","Workaround for git whitespace commits: Commit only 'REAL' changes","<p>Recently I started as a developer in a new company. Most of them aren't used to use shortcuts to 'Format code'. My fingers are practically doing <code>ALT</code>+<code>SHIFT</code>+<code>F</code> after every line of code, as I have been using Netbeans for like 6 years now. But now I have to develop .NET so I use VS2012 and bind the shortcut for command <code>Edit.FormatDocument</code> to <code>ALT</code>+<code>SHIFT</code>+<code>F</code>, and I'm still spamming it :). </p>

<p>The only thing is that my colleagues aren't really fond of this <code>Edit.FormatDocument</code>, and they do everything by hand. So every commit now, from my side, is full of whitespace changes... :/ <strong>Changes in indentation style (tabs vs. spaces) are especially dramatic.</strong></p>

<p>Yes, I've seen some examples <a href=""https://stackoverflow.com/questions/13793241/make-git-undo-any-whitespace-only-changes"">here</a> and <a href=""https://stackoverflow.com/questions/3515597/git-add-only-non-whitespace-changes"">here</a>, but they aren't that easy... and they are probably outdated. Isn't there any feature inside Git that can help me out?</p>

<p><strong>Is it possible to turn a <code>config</code> item on, to <code>ignore whitespace</code> when <code>committing</code> in Git?</strong></p>
","3","431967","",""
"14545234","985383","2013-01-27 07:05:37","3","184","<git><git-branch><git-commit><git-checkout>","Git went back 5 commits and forgot to create a new branch, how to come back?","<p>I had to go back six commits in Git with the command </p>

<pre><code>git checkout idofthecommit
</code></pre>

<p>What I have been doing was continuing commit, commit, commit. Since I have created no real new branch, when I git push to external repositories with </p>

<pre><code>git push origin master
</code></pre>

<p>it tells me that everything is up-to-date.</p>

<p>This means I haven't actually made any changes in the master.</p>

<p>How I can move the commits I have been doing to the master branch?</p>
","0","985383","",""
"31636098","411632","2015-07-26 10:50:27","10","17322","<git-commit><git><git-squash>","Git Squash and remove previous commits","<p>Maybe I misunderstood how GIT works. </p>

<p>I've run <code>git rebase -i HEAD~10</code> and I could squash 10 commits into one. The issue is that all squashed commits are still there, and I thought they were going to be dropped after <em>merging them all into one</em>.</p>

<p>Is this the expected result? If so, can I rewrite the history to remove useless commits (since these changes are already in the commit which all previous commits were squashed)?</p>
","4","411632","0","0"
"60799641","311168","2020-03-22 13:03:26","1","282","<regex><git><rename><git-commit>","Git: Commit Only Specified Files (Renamed, Deleted, Modified, New File, etc)","<p>I've got an older project where I modified many files (more than a hundred). Removed several, renamed a whole bunch, deleted many, etc. There are probably 10 or more commits worth in this batch of changes. How do I write a commit command to select, for example, only those renamed files:</p>

<p><code>git commit ""all renamed files"" -m ""Renamed files.""</code></p>

<p>I'd like to try and avoid doing something like this:</p>

<p><code>git commit file1 file2 file3 -m ""Renamed files.""</code></p>

<p>...because there are too many. I could also commit a folders worth (<code>git commit folder1 . . .</code>) but, unfortunately, there are some files in the folders that aren't to be committed.</p>

<p>I've accepted the answer provided but had to modify the command a bit:</p>

<pre><code>git status --porcelain | grep -E '^(.R|R.)' | \
cut -b4- | awk '{print $1}' | xargs git commit -m ""Bulk renamed files.""
</code></pre>

<p>The reason for this is because running <code>git status --porcelain | grep -E '^(.R|R.)' | cut -b4-</code>, for example, outputs (here's one line to demonstrate): <code>source/__init__.py -&gt; site/__init__.py</code>. When I use <code>xargs</code> to run the <code>commit</code> command, it's not accepted, presumably because of the <code>-&gt; . . .</code> part. So I use <code>awk</code> here to select the first chunk only and this works nicely. Thanks!</p>
","0","311168","0","0"
"60939173","12748458","2020-03-30 20:43:13","1","516","<git><github><git-commit><gnupg><sign>","How to sign my commits to Github repository where I am not the owner?","<p>I am trying to sign my commits in all Github repositories I am associated with. I can sign when the repository is hosted by me, but can not able to sign when I am just a contributor. I get this error mentioned below every time I try to do so.</p>

<pre><code>could not find identity matching specified user-id: &lt;key id&gt;
error: gpg failed to sign the data
fatal: failed to write commit object
</code></pre>

<p>below is my .gitconfig setup</p>

<pre><code>[core]
        editor = \""C:\\Users\\user\\AppData\\Local\\Programs\\Microsoft VS Cod&gt;
[user]
        email = &lt;my email id&gt;
        name = &lt;my name&gt;
        signingkey = &lt;key id&gt;
[commit]
        gpgsign = false
[gpg]
        program = gpg
</code></pre>

<p>Your small help will be very much appreciated.</p>
","0","12748458","",""
"23119549","972783","2014-04-16 20:31:21","1","225","<git><git-branch><git-merge><git-commit>","How does Git retrieve all files from a branch?","<p>I'm currently learning Git and have an issue understanding how Git retrieves files from a branch when you check it out.</p>

<p>From what I understand the branch is just a pointer to a commit. So I believed that when you checkout a branch it back tracks all commits from parent to parent starting from the commit where the pointer is at. But I don't understand how it chooses a parent for a commit that has multiple parents, like in a merge.</p>

<p>For example:</p>

<p><img src=""https://i.stack.imgur.com/A3C64.png"" alt=""enter image description here""></p>

<p>Assuming I want to check out <code>master</code>, how does Git know that at point <code>C5</code> it should go for <code>C4</code> and not <code>C8</code>. Or have I totally misunderstood this?</p>

<p>When you checkout a branch, how does Git know what files to put in your working tree?</p>
","5","972783","",""
"60942753","","2020-03-31 02:56:36","3","9032","<github><git-commit><git-repo>","Delete Commit on Github through Browser","<p>This is my first time using github and I was having trouble with some of the commands and committed the same thing about 7 times through terminal. I don't know how this is possible because I thought you could only commit if there are changes made in the file. I wasn't seeing anything every time I committed so I kept deleting and remaking the same repository with the same name and tried committing over and over until I finally saw them now but theres too many I just want to see 1 initial commit not all 7. I want to know if there is a way to delete a commit if I have my github account open in my browser <strong>not  by using terminal</strong>.</p>

<p><strong>Note on possible duplicate:</strong> Please do not mark question as duplicate. I know there are similar questions/exact same questions asked. However I have read those and most of them are commands you have to type in the terminal and because there is no way to undo that I would prefer to do this through the website. I don't want to accidentally delete something I want and not be able to get my work back later. If there is something else I can use rather then terminal I would prefer to use that instead. </p>
","0","","0","0"
"4630312","320615","2011-01-07 21:09:19","428","254372","<git><git-commit><git-reset><git-revert>","Reset all changes after last commit in git","<p>How can I undo <em>every</em> change made to my directory after the last commit, including deleting added files, resetting modified files, and adding back deleted files?</p>
","2","320615","0","0"
"60945548","13080654","2020-03-31 07:39:44","0","279","<git><github><git-commit><git-log>","How to add metadata info to a git commit","<p>I am working on some git tooling that helps prevent git conflicts. Git commit authors are usually identified by their email address, but many people have multiple email addresses. Instead I would like to use a uuid to identify each committer, and my goal is to somehow include that uuid in the git commit metadata somehow. Is there some way to configure git to include that uuid or is not really possible?</p>

<p>I would assume the only place the uuid could go is the git commit message and that would make them quite noisy?</p>
","3","13080654","",""
"41723101","4380753","2017-01-18 15:21:36","1","2560","<git><github><git-commit>","github - commits not found","<p>When using github, this is what I usually do:</p>

<ul>
<li><code>git pull</code> to make sure if everything is up-to-date</li>
<li><code>git add .</code> to add all my changes</li>
<li><code>git commit -m ""some message""</code> to commit my changes</li>
<li><code>git push</code> to push my changes</li>
</ul>

<p>After every change on my local files, I do the same above operations and go check on the website. The changes are there and everyone can see them. They exist on both local and remote repos. But once in a while, all my commits disappear and they're somehow discarded. I noticed that this happen whenever a colleague working on the same repo makes a change.</p>

<p>If this helps:</p>

<ul>
<li><p><code>git log</code> shows that my commits are logged  </p></li>
<li><p><code>git checkout master</code> says that I am already on master. </p></li>
<li><p>My Github profile says that I committed X number of commits to the repository, but when I click on them, it says ""commits not found"".</p></li>
</ul>

<p>When on the master branch, are <code>git push</code> and <code>git push origin master</code> different?</p>

<p>I would like to know If I am doing something wrong here, so I can avoid doing it in future commits.</p>
","15","4380753","0","0"
"23320461","3065699","2014-04-27 07:09:33","1","231","<git><github><git-commit><git-amend>","How can I change the displayed commit message on Github?","<p>I pushed a commit with one changed file to Github. This was the first (and only) commit to this repo, which was forked from another user. I then changed the commit message using </p>

<pre><code>git commit --amend -m ""New message.""
git push --force origin master. 
</code></pre>

<p>When I look at the main repo page on Github, the amended message is displayed above the file list, but the message displayed next to file name is the original commit message. Is there any way to force the amended message to be displayed next to the file name?</p>
","0","3065699","0","0"
"61325678","10497484","2020-04-20 15:07:22","-1","194","<git><git-commit><branching-and-merging><git-merge-conflict>","I have been creating new Git branches from older branch without checking out to the master","<p>I have been checking out to new branches from the older branch, instead of checking out to the master. 
currently, I have created four new features: home_feature, admin_user-feature, customer_request, blog_feature.</p>

<p>I forgot to checkout to the master before creating the ""customer_request"" branch, and create the feature by moving into the blog feature.
now I am faced with a lot of conflicts. I have tried using 'git rebase' but the commits are up to 80 commits per branch, so it not practical.
How can I resolve these conflicts?</p>

<p><a href=""https://i.stack.imgur.com/K4MzM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K4MzM.png"" alt=""enter image description here""></a></p>
","2","10497484","0","0"
"61338187","12699059","2020-04-21 07:33:59","2","2193","<git><github><git-commit><git-push><remote-repository>","How to make HEAD and origin/master point to same (latest) revision. (HEAD points to latest while origin/master points past revision)","<p>I'm new to git-hub.</p>

<p>I need to update my commit with <code>-m ""First""</code> from local repo to git-hub.</p>

<p>Currently <code>git log --oneline</code> shows below stack.</p>

<p><code>394b23a (HEAD) First
895aa36 (origin/master, master) Second
dc7346a Basic Service
f627cd1 Data Binding.
.
.
.
</code>
If I try to <code>git push origin master</code> I get the message:  ""<strong>Everything up-to-date</strong>"" and remote repo doesn't get updated. I think its because HEAD and origin are pointing to different revisions. I can't find a mean to merge both. I read about <code>git merge</code> but it mostly tells about merging two branches.</p>

<p>Please help to update the same. Thanks in advance.</p>

<p><strong>NOTE:</strong> I have used <code>git reset --hard HEAD</code> in near past, which I think may be responsible for this mismatch.</p>
","2","12699059","",""
"42290389","","2017-02-17 05:54:11","0","1244","<git><automation><push><project><git-commit>","Automatically add the README while creating the new project in GitLab","<p>I am currently using the GitLab CE 8.14.3. Here when I create the new project in the Gitlab every time I need to add the readme file manually. I want to automate this function. That is When I create the new project in the GitLab automatically Readme also added in the master branch. I used the below link to add the readme file</p>

<p><a href=""https://i.stack.imgur.com/jx9Hv.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jx9Hv.jpg"" alt=""enter image description here""></a></p>

<p>I need it because only master and the owner can able to push into the master branch. If Developer tried to add the readme file means he get below error</p>

<p><a href=""https://i.stack.imgur.com/jx9Hv.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9SxC2.jpg"" alt=""enter image description here""></a></p>

<p>I googled regarding this but I don't get the proper idea about it. Have anyone idea about this automation process?</p>
","0","","",""
"42291292","3557930","2017-02-17 06:55:17","2","5076","<git><curl><git-commit><github-for-windows>","ERROR on git push origin master - error: RPC failed; curl 56 SSL read: error:00000000:lib(0):func(0):reason(0), errno 10053 fatal:","<p>I am facing the below error while pushing my changes to origin/master.
error: <strong>RPC failed; curl 56 SSL read: error:00000000:lib(0):func(0):reason(0), errno 10053
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
Everything up-to-date
<a href=""https://i.stack.imgur.com/jg2ri.png"" rel=""nofollow noreferrer"">enter image description here</a></strong></p>

<p>I followed the similar error page, <a href=""https://stackoverflow.com/questions/24952683/git-push-error-rpc-failed-result-56-http-code-200-fatal-the-remote-end-hun"">Git push error: RPC failed; result=56, HTTP code = 200 fatal: The remote end hung up unexpectedly fatal</a> but of no help. Solution provided on this page is not working for me.
Any hints are highly appreciated!!</p>
","2","3557930","0","0"
"42325972","3951861","2017-02-19 10:09:01","0","54","<git><git-rebase><git-commit><git-config>","Fetch all the previous versions of any file committed in Git","<p>I want to fetch all the previous versions of a file (let's assume Abc.xml) that I've committed in Git.</p>

<p>Is there any way to do so? I am sure Git has versioning system and so what I feel that my older file versions can be available. Any suggestions?</p>
","1","3951861","0","0"
"5421694","475850","2011-03-24 15:38:05","5","2943","<git><git-branch><git-commit>","problem with commit message after conflicts been resolved when merge","<p>I am new in Git. Currently, I am experiencing this scenario:</p>

<p>Step 0. I am working on a <strong>sub</strong>-branch</p>

<p>Step 1. I have added &amp; commited file1, file2, file3 on my <strong>sub</strong>-branch with commit message <strong>msg1, msg2, msg3</strong> respectively.</p>

<p>Step 2. I <code>checkout master</code> to switch to <strong>master</strong> branch</p>

<p>Step 3. I <code>pull origin master</code> to update master branch with latest origin version code</p>

<p>Step 4. I <code>merge sub-branch</code> to merge my working code to the current master branch code</p>

<p>Then, I got conflict in <strong>file2</strong>, </p>

<p>Then, I manually resolved the conflicts. Now, <strong>file2</strong> needs to be added because there is changes on this file.</p>

<p>Step 5. I <code>add file2</code> in master branch, because I have resolved the conflicts on this file</p>

<p>Step 6. What commit message should I write now? the <strong>msg2</strong> only? or <strong>msg1, msg2, msg3</strong> all needs to be rewritten now? (I don't want to loose the commit messages <strong>msg1,msg2,msg3</strong> for the files I worked)</p>
","0","475850","0","0"
"61583403","5282060","2020-05-04 00:27:45","5","2628","<c#><git><github><github-api><git-commit>","Edit multiple files in single commit with GitHub API","<p>I'm using the GitHub API in a C# webapp (with Blazor). I want to be able to create a single commit to add, delete, and edit multiple files in a folder in a repository. I know I can send a PUT request to the URL <code>https://api.github.com/repos/[username]/[repository]/contents/[file]</code> with these contents to create a file (and I can also edit a file by adding an SHA hash):</p>

<pre><code>{
    ""message"": ""[Commit message]"",
    ""content"": ""[Content encoded in base64]"",
    ""committer"": {
        ""name"": ""[Committer name]"",
        ""email"": ""[Committer email]""
    }
}
</code></pre>

<p>But this creates one commit for every file change. Is there any way that I can do multiple operations in a single commit (either using the GitHub API or something else)? I would use something like libgit2sharp but I don't want to be cloning the repository to a folder on the filesystem.</p>
","0","5282060","0","0"
"42841227","1566939","2017-03-16 17:41:32","7","11873","<gitlab><git-commit>","Is there a way to rebase and squash commits on Gitlab CE UI?","<p>Is there a way to <code>rebase</code> and <code>squash</code> commits on Gitlab CE UI, instead of using the interactive mode through command-line?</p>
","0","1566939","0","0"
"5721566","666752","2011-04-19 19:26:06","174","162793","<git><commit><git-commit>","Combining Multiple Commits Into One Prior To Push","<p>This question pertains not only to how to accomplish this task, but to whether doing so is good or bad practice with Git.</p>
<p>Consider that locally I do most work on the <code>main</code> branch, but I have created a topical branch I will call <code>feature_branch</code>. In the process of working on <code>feature_branch</code> and switching back and forth to do other work on the <code>main</code> branch, it turns out that I have made more than one commit on <code>feature_branch</code>, but between each commit, I have done no push. My questions are:</p>
<ol>
<li><p>Would you consider this bad practice? Would it not be wiser to stick with one commit per branch per push? In what cases would it be good to have multiple commits on a branch before a push is made?</p>
</li>
<li><p>How should I best accomplish bringing the multiple commits on <code>feature_branch</code> into the <code>main</code> branch for a push? Is it a nuisance to not worry about it and just do the push where multiple commits get pushed, or is it less annoying to somehow merge the commits into one and then push? Again, how to do this?</p>
</li>
</ol>
","1","666752","0","0"
"61602835","6378399","2020-05-04 22:42:32","-1","356","<git><github><gitlab><git-commit><git-remote>","How to hide one remote's commit history from other remotes?","<p>Suppose I've multiple remotes for a single repository. Most of the time I use one git account for the development purpose, and when I'm finished, I push the final version to another remote. Now, how can I hide my commit history of the first remote from the second one?</p>
","0","6378399","",""
"60725073","5996276","2020-03-17 15:07:15","-1","689","<github><git-commit><lint><git-push><github-desktop>","I am getting error while pushing code to github using Github Desktop, Failed to push some refs","<p>I am getting this error while pushing code to github using github desktop. I have attached the image.</p>

<p><a href=""https://i.stack.imgur.com/FW4Qi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FW4Qi.png"" alt=""enter image description here""></a></p>
","0","5996276","",""
"22896228","536299","2014-04-06 15:46:23","0","172","<git><bash><git-merge><git-commit><git-remote>","Interrogations about ""servless CI with git"" bash script","<p>I am in reference to the excellent article by <strong>David Gageot</strong>: <em><a href=""http://blog.javabien.net/2009/12/01/serverless-ci-with-git/"" rel=""nofollow"">Serverless CI with git</a></em>.</p>

<p>Let me include David's script here:</p>

<pre><code>#!/bin/bash
if [ 0 -eq `git remote -v | grep -c push` ]; then
  REMOTE_REPO=`git remote -v | sed 's/origin//'`
else
  REMOTE_REPO=`git remote -v | grep ""(push)"" | sed 's/origin//' | sed 's/(push)//'`
fi

if [ ! -z ""$1"" ]; then
  git add .
  git commit -a -m ""$1""
fi

git pull

if [ ! -d "".privatebuild"" ]; then
  git clone . .privatebuild
fi

cd .privatebuild
git clean -df
git pull

if [ -e ""pom.xml"" ]; then
  mvn clean install

  if [ $? -eq 0 ]; then
    echo ""Publishing to: $REMOTE_REPO""
    git push $REMOTE_REPO master
  else
    echo ""Unable to build""
    exit $?
  fi
fi
</code></pre>

<p>If I understand correctly this script, it will clone the initial git repository to a second hidden git repository where unit tests will be run.</p>

<p>If unit tests pass, the second hidden repository is pushed to the initial working repository.</p>

<p>My questions are as follows:</p>

<ul>
<li>How is one supposed to use this script? By invoking it instead of the <code>git commit</code> command? As a pre-commit hook?</li>
<li>What happens if changes are made to the initial git repository when units test are running?</li>
</ul>
","0","536299","",""
"61614666","1409644","2020-05-05 13:44:19","1","54","<linux><git><configuration><git-commit>","Git not using user.name","<p>I am logged into a Linux system via SSH as user <code>bob</code> and I have </p>

<pre><code>$ git config --list --show-origin
file:/home/bob/.gitconfig     user.name=Robert DaBuilder
file:/home/bob/.gitconfig     user.email=robert.dabuilder@buildingsite.com
file:/home/bob/.gitconfig     color.ui=auto
file:.git/config        core.repositoryformatversion=0
file:.git/config        core.filemode=true
file:.git/config        core.bare=false
file:.git/config        core.logallrefupdates=true
file:.git/config        core.symlinks=false
</code></pre>

<p>When I commit something, I get:</p>

<pre><code>$ git commit -m ""Add further text""
[master ad1cd5e] Add further text
Author: bob &lt;robert.dabuilder@buildingsite.com&gt;
1 file changed, 2 insertions(+)
</code></pre>

<p>So in the 'Author' field, why is my login name <code>bob</code> being used and not <code>user.name</code>?</p>
","0","1409644","",""
"61615598","1036781","2020-05-05 14:33:48","1","241","<git><git-commit><tortoisegit><git-clone>","Update git local branch clone with tortoise git","<p>Architecture:</p>

<ul>
<li>git repo A is on PC A with no internet</li>
<li>git repo C is a duplicate of gitA, created via Git Clone and is on hdd</li>
<li>git repo B is a duplicate of gitC, created via Git Clone and is on pcB</li>
</ul>

<p>Scenario:</p>

<ul>
<li>gitA is a shared folder used between team members</li>
<li>I work on gitB on pcB</li>
<li>I need to update files from gitB -> gitC -> gitA</li>
<li>Then from gitA -> gitC -> gitB after resolving conflict with members in gitA</li>
</ul>

<p>How can I achieve the above scenario?</p>
","5","1036781","0","0"
"4389553","450863","2010-12-08 16:04:49","2","740","<git><whitespace><git-commit>","Git commit stalls on trailing whitespace on lines that don't exist","<p>I'm trying to make a commit in Git, but receive the following error:</p>

<pre><code>$ git commit -m ""Changed model name from Employee to Person for abstraction""
*
* You have some suspicious patch lines:
*
* In app/helpers/people_helper.rb
* trailing whitespace (line 28)
app/helpers/people_helper.rb:28:
* trailing whitespace (line 44)
app/helpers/people_helper.rb:44:
</code></pre>

<p>Fine. I'll remove the whitespace.  The only problem?  Those lines don't exist.</p>

<pre><code>$ cat app/helpers/people_helper.rb
module PeopleHelper
end
$ 
</code></pre>

<p>The file is only two lines long. There can't be white space on lines 28 and 44. </p>

<p>What gives?</p>

<p>I'm on Git version 1.5.4 with no hooks except for the ones installed by default.</p>
","8","450863","",""
"22934746","2391795","2014-04-08 10:50:10","2","1099","<git><clock><git-commit>","Git don't use the computer clock to commit","<p>I'm wondering if there is a way to <strong>not use</strong> the computer clock when I commit using Git VCS.</p>

<p>Why?
The reason is simple, on one of my computer I use an Ubuntu virtual machine. The fact is that when I <strong>pause</strong> the VM the clock is stopped. When I <strong>run</strong> it again the clock is the same than when I paused it, so basically in the past.</p>

<p>When I commit, I commit in the past, for instance, if I commit right now then the commit will be considered as commited yesterday at 7pm. It mess up my git acting like if I did stuff yesterday instead of today.</p>

<p>What's worse is not a simple commit, but when I merge branches or, worse, when I create a branch it mess up the entire local git config and then if I fix the clock I got strange messages about not found branches or not correct branches. Anyway, I'm looking for a workaround that allows me to keep pause my VM and don't mess git.</p>
","11","2391795","0","0"
"61817501","5353461","2020-05-15 10:52:36","-1","255","<git><git-commit>","Semantics of `git commit --include`","<p><a href=""https://stackoverflow.com/a/51587932/5353461"">This answer</a> says that <code>git commit --include</code> is equivalent to a <code>git add</code> of the specified files, followed by a <code>git commit</code>.</p>

<p>The <a href=""https://manned.org/git-commit"" rel=""nofollow noreferrer""><code>man</code>-page</a> says:</p>

<blockquote>
  <p>Before making a commit out of staged contents so far, stage the contents of paths given on the
             command line as well.</p>
</blockquote>

<p>However, I can't get it to work as advertised:</p>

<pre><code>% git init
Initialized empty Git repository in /tmp/git/.git/
% touch foo
% git commit -m ""Why doesn't this work?"" --include foo
On branch master

Initial commit

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)
        foo

nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>How do I get it to work as it's apparently supposed to?</p>

<hr>

<p>Historical note: This question previously used the functionally equivalent command <code>git commit -m ""Why doesn't this work?"" --include -- foo</code>, which confused some people by the inclusion of the unnecessary <code>--</code> pathspec separator.</p>
","3","5353461","",""
"61819127","8686756","2020-05-15 12:22:58","1","449","<git><github><git-commit><git-push><keyword-expansion>","GIT how to inject commit infomation inside a file so that during/after push to remote?","<p>We were given a task to inject commit information like committer, commit date and author name inside a file committed. </p>

<p>After some search and this thread <a href=""https://stackoverflow.com/questions/16524225/how-can-i-populate-the-git-commit-id-into-a-file-when-i-commit"">How can I populate the Git commit ID into a file when I commit?</a>  we achieved injection into a file using keyword expansion and format placeholders. However, information was injected either after checkout or archive. </p>

<p>Is it possible to inject commit info into a file during or after push so that file in remote contains that commit information? We realize this may sound like non-necessary job but we would like to know about possibility of performing this requirement.</p>
","3","8686756","",""
"22976155","3325281","2014-04-09 23:59:10","1","827","<git><github><push><git-commit>","Can't push CSS changes to origin/master.. Everything up-to-date","<p>I am baffled. I made a branch to make css changes to my Ruby on Rails app. Let's call the branch <code>Update_CSS</code>After I made changes, I did <code>git status</code>and it showed that the css files were not added so I added them with <code>git add app/assets/stylesheets/application.css</code>Then I committed my changes with <code>git commit -am ""Updated CSS""</code>. Then I checked out master and merged branch with CSS changes:</p>

<pre><code>git checkout Master
git merge Update_CSS
</code></pre>

<p>Terminal said changes were merged, blah blah. Then tried to push to git: <code>git push</code>. Then I got the following message <code>Everything up-to-date</code>! What?! Sure enough, I looked on Github and the the CSS file was different from the one on my machine. I actually have a couple of CSS files that are merged and committed on my machine and not on origin/master. Any idea what's going on or how to fix this. Ideally, I'd like to override the file in origin/master with the one on my local master.</p>

<p><strong>Update:</strong> When I ran <code>git checkout master</code> with a small ""m"", the output read: <code>Your branch is ahead of 'origin/master' by 9 commits.</code> I wonder if I was careless with the capitalization of ""master"" and that somehow screwed things up. I tried changing other files on Master, committing changes, and pushing to git, and now I always get that <code>Everything up-to-date</code>.</p>
","5","3325281","0","0"
"60968319","11970791","2020-04-01 10:02:42","0","134","<git><git-commit>","Getting a commit hash based on a timestamp in Git","<p>Is it possible to search commits by a range of timestamps?(or just a specific one or simply prior to a specific date)</p>
","0","11970791","",""
"43124494","1960170","2017-03-30 17:22:29","0","51","<git><bitbucket><git-commit><git-push>","Removing a bad commit pushed using git","<p>I am working on a project using BitBucket. I have been able to commit/push all my code until one day my vendor was not ignored, not sure why. </p>

<p>In order to fix I had to un-track the vendor folder. Doing that caused my files in the repository being removed because it was not being tracked anymore.</p>

<p>Now every time I need to push something and do a git pull it deletes my entire vendor folder. </p>

<p><strong>How can  I remove this commit and go back to a good commit?</strong> </p>

<p>Below is my git log showing the merges, etc. I would like to go back to this hash commit(<code>e5835fa</code>) which is my good commit before the ""untrack vendor directory"".</p>

<pre><code>* 66ef40d (HEAD, origin/master, origin/HEAD, master) finalized importing players from excel.
* cfa37b3 pushing import players code
* 3a8f272 implemented importing players from excel.
* 9cf59ad implemented importing players
* 188db12 implemented imprting for players oly from excel file
* 72c086a untrack vendor directory
* e5835fa refactoring chart  display
* a5ffd72 fixed offset on duplicate players started import tool for players and  teams.
* 349dfc0 divided the result by 2
* 27e2845 updqted the sql duplicate teams.
* 80b3741 format change.
</code></pre>
","0","1960170","",""
"15376145","1944451","2013-03-13 02:47:53","0","373","<git><git-commit>","What is the command to add all changes except bin folder in GIT?","<p>I have an Android project in GIT. I want to commit all changes but don't want to commit the bin folder. Is there any command to commit all except the bin folder?</p>
","0","1944451","",""
"15439527","614702","2013-03-15 18:21:12","39","44465","<git><git-push><git-pull><git-commit>","git: Why ""Merge branch 'master' of ... ""? when pull and push","<p>I'm still git newbie. I modified some source files and committed. Then, I did <code>git push</code>. But, I got this error.</p>

<pre><code>To /foo/bar/  ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to '/foo/bar/' To prevent you from
losing history, non-fast-forward updates were rejected Merge the
remote changes before pushing again.  See the 'Note about
fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>This reject seems that I didn't <code>git pull</code> before <code>push</code>. So, I did <code>git pull</code>. Okay, there were two modified files by others.</p>

<p>Then, I was able to  <code>git push</code> successfully.</p>

<p><strong>Question:</strong> In this case, I'm seeing one more log like following with my original commit message:</p>

<pre><code>commit 59e04ce13b8afa...
Merge: 64240ba 76008a5
Author: Jone Doe &lt;jone@doe.com&gt;
Date:   Fri Mar 15 11:08:55 2013 -0700

    Merge branch 'master' of /foo/bar/
</code></pre>

<p>And this is my original commit message.</p>

<pre><code>commit 64240bafb07705c...
Author: Jone Doe &lt;jone@doe.com&gt;
Date:   Fri Mar 15 11:06:18 2013 -0700

    Fixed bugs and updated!
</code></pre>

<p>I'd like to understand why ""merge branch master of location"" is added.</p>
","1","614702","0","0"
"15444467","614702","2013-03-16 01:12:33","0","123","<git><git-push><git-commit>","How to merge pushed two commits?","<p>I committed and pushed some files via <code>git commit .</code> followed by <code>git push</code>.</p>

<p>Then, I found that there were some mistakes in the files. I fixed ti. Then, I recommitted and re-pushed. So, I now see two separate commits in <code>git log</code>, which is ugly.</p>

<p>Can I merge these two pushed commits into one?</p>
","1","614702","",""
"32176134","4170264","2015-08-24 06:58:10","2","297","<git><github><git-commit><pre-commit-hook>","How I initialize a git Repository and add hooks and files into it?","<p>I want to initialize an empty local repository and then fill it with the data (files) from <a href=""https://github.com/dvdvideo1234/Test"" rel=""nofollow"">this</a> one. I want to attach a pre-commit hook for getting me the last revision number and auto-insert it in the source as a text. I red that if I want to do that I need also some crazy folders with names starting with dots ( .git, .gitattrubutes e.g. ). So far I figured out that the structure should look like something like that on the master/<em>.</em> branch:</p>

<pre><code>.gitattributes
.git/(hooks,logs,refs.. e.g.)
Diff.txt,
text.c,
.....
</code></pre>

<p>How should I prepare the pre-commit hook for doing that ( if the lastest revision is 120, it gets 120 increments it and writes 121 )</p>

<p>I am using windows 7 and Tortoise Git</p>

<p>Thanks !</p>
","6","4170264","0","0"
"15479609","1316620","2013-03-18 14:44:29","134","28787","<git><git-commit><git-amend>","git commit --amend without asking for message","<p>From time to time I find myself <em>commit-amending</em> using the same message.</p>

<p>Typically, I do:</p>

<ol>
<li>Add my changes to staging area.</li>
<li>Do <code>git commit --amend</code>.</li>
<li>Wait for the text editor to open.</li>
<li>Save and close it (without changing the message).</li>
</ol>

<p>There is anyway to tell git that I don't want to change the commit message (skipping the step of opening my text editor and saving the message)? Like:</p>

<ol>
<li>Add my changes to staging area.</li>
<li>Tell git to amend my staging area to the last commit without asking me for another message.</li>
</ol>

<hr>

<p>I know I can avoid git firing up my text editor by doing <code>git commit --amend -m ""&lt;message&gt;""</code>. But this way I would have to retype the message.</p>
","0","1316620","0","0"
"68879626","16724881","2021-08-22 08:26:49","2","481","<jenkins-pipeline><git-submodules><git-commit><jenkins-git-plugin>","Jenkins Git plugin is not fetching commits in submodules","<p>I have a Git repository <code>abc.git</code> containing submodules in it. We have a Jenkins job that is used to build <code>abc.git</code> repository.</p>
<p>The Jenkins job uses the GitSCM plugin to check out the code and do the build. Below is the plugin configuration that is used in the job.</p>
<pre><code> checkout([$class: 'GitSCM', changelog: true, branches: [[name: &quot;*/${branch}&quot;]], 
                  extensions: [[$class: 'SubmoduleOption', disableSubmodules: false,
                  parentCredentials: false, recursiveSubmodules: true, reference: '',
                  trackingSubmodules: true]], 
                  userRemoteConfigs:[[credentialsId: '', 
                  url: &quot;${componentUrl}&quot;]]])
</code></pre>
<p>When I do a commit in the <code>ABC</code> repository that commit is reflected in the Jenkins build changelog set. But when I do a commit in the submodules the commit is not getting shown in the Jenkins build changelog set.</p>
<p>Please let me know if there is any other configuration that needs to be added to the plugin configuration to make this work.</p>
<p>Also, let me know if there is an alternative way to solve this if the plugin does not support it.</p>
","0","16724881","0","0"
"50696274","5024157","2018-06-05 09:07:53","-2","60","<git><repository><git-commit>","How can I remove all commits in git?","<p>I have I repository in git and I made a lot of tests to learn it. Now I am on a level to start working. But I have all these test commits, that are disturbing me. Can I remove all commits to start clean? But it means I do not want to remove the changes. The code should stay the way it is now. I just want to have an empty git log.</p>
","2","5024157","",""
"32861378","1061008","2015-09-30 08:28:20","0","702","<git><merge><git-commit>","Why should I have conflict after push->amend->amend->amend->push->pull?","<p>In this question <a href=""https://stackoverflow.com/questions/18588974/git-prevents-pushing-after-amending-a-commit"">Git prevents pushing after amending a commit</a> it is been mentioned that:  </p>

<blockquote>
  <p>This should only be the case if you're amending an already-pushed
  commit</p>
</blockquote>

<p>But what I did was the steps below:  </p>

<ol>
<li>Pushed a bunch of code</li>
<li>commit --amend</li>
<li>commit --amend</li>
<li>commit --amend</li>
<li>Pushed</li>
<li>Pull (CONFLICT (content))</li>
</ol>

<p>This conflict can happend in the future too, as I don't understand why did conflict happen! Could someone shed some light on the process?</p>

<hr>

<p>In step 4:  </p>

<pre><code>$ git commit --amend
[dev cf0f21d] blahhh(blah) is added
 Date: Wed Sep 30 08:39:28 2015 +0330
 5 files changed, 168 insertions(+), 1 deletion(-)
</code></pre>

<p>In step 5:  </p>

<pre><code>$ git push origin dev
To repo:~/something
 ! [rejected]        dev -&gt; dev (non-fast-forward)
error: failed to push some refs to 'repo:~/something'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
","5","1061008","",""
"32861438","3360403","2015-09-30 08:32:15","1","1471","<git><git-commit><git-diff>","Cannot diff committed changes against remote using git diff","<p>What I want to to is to view the changes committed to my local repo against the remote one.</p>

<p>When I do <strong>git status</strong> I'm getting:  </p>

<pre><code>On branch develop  
Your branch is ahead of 'origin/develop' by 6 commits.  
  (use ""git push"" to publish your local commits)  
  nothing to commit, working directory clean  
</code></pre>

<p>As discussed in <a href=""https://stackoverflow.com/questions/1587846/how-do-i-show-the-changes-which-have-been-staged"">How do I show the changes which have been staged?</a>  </p>

<p>One (two) of the git diffs should work. Unfortunately in my case all of them return nothing.</p>

<pre><code>git diff //empty - which seems to be fine 
git diff --cached //empty 
git diff HEAD //empty
</code></pre>

<p>Am I missing something?</p>
","1","3360403","",""
"32873163","793154","2015-09-30 18:24:00","1","375","<git><git-commit>",".gitignore incoming or outgoing?","<p>What I'm trying to do is to have different versions of a file locally and in the master version of the project.  So I'm including it in my .gitignore files.  However I'm still getting errors when pulling and pushing commits. </p>

<p>To clarify this my question is the following.  Are the patterns in my local .gitignore ignored when pulling requests, or are they to be ignored when pushing changes?  </p>

<p>Thanks. </p>
","0","793154","",""
"69264255","13177619","2021-09-21 06:23:01","0","1238","<git><azure-devops><azure-pipelines><git-merge><git-commit>","Automate merge of master to develop branch using Azure DevOps pipeline","<p>Requirement is to merge develop branch to master branch using pipeline so that it can be scheduled and merge will happen without any fail. I am trying to use 'Command Line Script' task in an Azure Pipeline with windows agent to perform the operation.</p>
<p>I have tested above workflow in local machine and it is working fine. But, the same is failing in pipeline. Pipeline is set to run against the 'develop' branch as source. So, the code will be checkout to a folder named 's' in the initial step. Below are the commands I have tried.</p>
<pre><code>cd s
git checkout main
git merge origin/develop
git push origin main
</code></pre>
<p>The error logs are as below:</p>
<pre><code>Previous HEAD position was cb71633 Updated test1.yml
Switched to a new branch 'main'
Branch 'main' set up to track remote branch 'main' from 'origin'.
Updating f1cf63a..cb71633
Fast-forward
 test1.yml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
fatal: Cannot prompt because user interactivity has been disabled.
fatal: Cannot prompt because user interactivity has been disabled.
fatal: could not read Password for 'https://&lt;&lt;user&gt;&gt;@dev.azure.com/&lt;&lt;Org&gt;&gt;/&lt;&lt;Project&gt;&gt;/_git/merge-test-repo': terminal prompts disabled
##[error]Cmd.exe exited with code '128'.
</code></pre>
<p>Can you please help me with the above script?</p>
<p>I would also like to know how can we check the latest status of a build pipeline running from develop branch to confirm that it is ready for a merge. So, the expected flow in the script is as below:</p>
<pre><code>- check if the latest build status of pipeline from develop is success. if yes proceed.
- checkout master branch
- merge source branch (develop) to master. Fail pipeline if there are conflicts.
- push the merge commit to master branch.
</code></pre>
<p>Please guide me with the script creation for above. Thanks in advance.</p>
","0","13177619","",""
"17483389","899260","2013-07-05 07:30:15","7","1994","<version-control><git-commit><git-add><git>","How do I place a dummy file in a git repo?","<p>I'm new at git so please bear with me. </p>

<p>Say i have a file under version control that includes sensitive data. Sure enough, I put that file in my .gitignore file, so it doesn't get pushed to the repo. The problem now is somewhere in my project i have a line like</p>

<pre><code>#include &lt;sensitivedata&gt;
</code></pre>

<p>or whatever your language of choice is. 
The problem is whenever somebody clones from that repo, that file is missing and he gets a fatal error when trying to build / compile the solution.</p>

<p>So, instead of pushing the file I'm actually working on I want to push some dummy file with the same name instead, where I place a comment like </p>

<pre><code>// replace the next line with the sensitive data!!!
</code></pre>

<p>How would I do this?</p>
","0","899260","0","0"
"17491175","2551695","2013-07-05 14:25:57","-6","608","<git><undo><git-commit>","How I undo my last commit?","<p>I accidentally rest my commit  in git and I would undo the last commit are their any way to undo last commit in git . </p>

<ul>
<li>I want to undo the last rest .</li>
</ul>
","1","2551695","",""
"32945783","4307732","2015-10-05 09:58:41","1","64","<ios><xcode><git><repository><git-commit>","whole project rolled back, new project gone on Git","<p>Since my git somehow had some contradiction not making it work, I decided to delete my git because it was old. I create a new remote, and I make a cohering branch. Now trying to switch branch, I get an error saying I need commit changes (I am looking at my newest code of the project). </p>

<p>I press commit (having already deleted this local git), and it switches over to my newly create remote branch. But for some reasons my project now look alike what it did half a year ago, and I can't find the new files?</p>

<p>EDIT: I am almost certain this was a bug enforced by the fact that Xcode and terminal commands was perceiving what was the current branch differently(no idea why). I was then forced by Xcode to commit changes to a branch that didn't exist. Somehow this made my project turn into an old version of the project, losing all files that had been added later etc. </p>
","6","4307732","",""
"17515211","1523238","2013-07-07 18:53:14","2","52","<git><gitignore><git-commit>","Ignoring directories in earlier commits","<p>For all my future commits I ignore a directory because I don't have to keep track of the changes there. In that directory is a bunch of images and since I've earlier for a lot of commits included that directory, my repository is more than 270MB. Can I somehow remove the image directory from my earlier commits to decrease the filesize of the repository?</p>
","0","1523238","",""
"17530702","1241102","2013-07-08 15:41:25","1","456","<git><git-commit>","Git commit locally not working, stalling and hanging to blinking cursor in bash","<p>All of a sudden this morning, I can't seem to commit to git.  When I run:</p>

<pre><code>git commit -m 'replacing location.origin with location.host as former isn't supported in ie8'
</code></pre>

<p>It never seems to execute, I'm left in my git bash with:</p>

<pre><code>&gt; _
</code></pre>

<p>Where the underscore blinks.</p>

<p>I was able to run a git status and git add fine, I just can't seem to commit, where I've never had this problem before.  Anyone have any ideas what's going on and how I can fix this?</p>

<p>I've restarted my PC (I do this first thing every Monday am).</p>

<p>I also tried running a git gc.</p>
","0","1241102","",""
"29074572","2885270","2015-03-16 10:30:55","8","3169","<git><git-merge><githooks><git-commit>","Git: pre-receive hook to allow only merges and not direct commits into master","<p>I have a problem creating a <code>pre-receive</code> hook on a git remote branch, doing what I want.</p>

<p><strong>What's the problem?</strong></p>

<p>Direct commits to the master branch should be not allowed. Only merges into the master branch should be allowed.</p>

<p><strong>Solution</strong></p>

<p>My solution until now is to check, if there are changes in the push from a user, where the master is affected. But the problem is that I can't differentiate if the change is a direct commit or a merge.</p>

<pre><code>#!/bin/sh
while read oldrefid newrefid refname
do
if [ ""$refname"" = ""refs/heads/master"" ]; then
        echo $(git merge-base $oldrefid $newrefid)
        echo ""---- Direct commit to master branch is not allowed ----""
        echo ""Changes only with a merge from another branch""
        exit 1
fi
done
</code></pre>

<p>Has anyone an idea, how to check if the change is a merge?</p>

<p>Thank you!</p>
","0","2885270","0","0"
"12160767","1630406","2012-08-28 13:52:16","0","114","<git><githooks><pre-commit-hook><git-commit>","Getting the list of files which are to be committed in the pre-commit hook with Git","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2412450/git-pre-commit-hook-changed-added-files"">Git pre-commit hook : changed/added files</a>  </p>
</blockquote>



<p>It may be good to add a code verifier or checker of some sort before you commit a list of source codes. Facebook even integrated automated tests into the committing process( or so I heard). What I need is a way to get the list of files that is going to be committed, not just edited. Here is a few reasons for this:</p>

<ol>
<li><code>git commit -m ""message""</code> can modify default message bypasses prepare-message and commit-msg hooks when I tried to use them to get files.</li>
<li>pre-commit hook do not get any arguments from the <code>git commit</code> command so it is not easy to tell what files are being committed, especially from a partial commit.</li>
<li>We have multiple users on one shared workstation, one shared user and one shared local repository( I can do nothing about it, I just do my job there ), so I do not want to verify other's codes when I commit mine (pretty sure this feeling is mutual). So if I use <code>git diff-index --name-only HEAD</code>, I get more codes to verify than I want to.</li>
<li>Automation is awesome and I think it's cool to install a code verifier in the hooks.</li>
<li>The committing process has better to be aborted if the verification fails.</li>
</ol>

<p>If there is any other way to automatically verify the codes in the ways that I described, pleeease tell me how. I really need this. Thank you very much.</p>
","5","1630406","",""
"12165190","289715","2012-08-28 18:20:09","2","2106","<git><git-branch><git-commit><git-show><git-reflog>","what happened to a commit that doesn't show up in any branches but available in ""git show""","<p>I have a commit id available in the bare repo.<br>
<code>git show commit id</code>, shows the commit with the changes.</p>

<p>But the same commit doesn't show up when using the below commands</p>

<pre><code>git branch --contains &lt;commit id&gt;
</code></pre>

<p>or</p>

<pre><code>git reflog show --all | grep &lt;commit id&gt;
</code></pre>

<p>What could have happened to the commit id?</p>
","0","289715","0","0"
"29084198","3006566","2015-03-16 18:21:47","3","1527","<git><terminal><git-commit>","What is a convenient way of writing a multiline commit message?","<p>Rather than write a short, 40-character Git commit message, I would like to write a longer, multiline message.</p>

<p>As I understand it, I'd need to add a newline after the message 'title'. How can I enter a newline in OS X Terminal or in Win8 CMD?</p>
","6","3006566","",""
"12218709","1211337","2012-08-31 15:47:49","0","109","<git><commit><git-commit><git-add>","Git commits un-staged changes of previously staged file, contrary to git-scm book","<p>The section of the book:</p>

<p><a href=""http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Staging-Modified-Files"" rel=""nofollow"">http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository#Staging-Modified-Files</a></p>

<p>says that if I change file A, run 'git add A' and then change file A again, run 'git commit' on this file, only previously staged changes will be committed. To commit unstaged changes - add file again and then commit.</p>

<p>After some testing, however it turns out that git commits all changes of the file A, even those that were made after the file had been staged initially.</p>

<p>Can anyone shed some light on this matter? Thanks.</p>

<p>EDIT:
I am not using -a option
It looks like if I specify the file explicitly for ""git commit A"" (I am not using -a option), it commits unstaged changes as well. Committing without file ""git commit"" asks to enter a commit message and then behaves as described in the book.</p>
","3","1211337","0","0"
"66271095","1704772","2021-02-19 02:49:02","0","418","<git><rebase><git-commit>","Git - accidentally committed and pushed thousands of images - how to I push without that commit?","<p>I accidentally committed <strong>and pushed</strong> several thousand images and didn't notice until about ten minutes later, when I saw it was till pushing. I canceled it mid-push.</p>
<p>I deleted the offending images, added and committed, and want to push again without the bloated commit.</p>
<h1>gitk screenshot</h1>
<p><a href=""https://i.stack.imgur.com/AP5D1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AP5D1.png"" alt=""enter image description here"" /></a></p>
","4","1704772","0","0"
"26350615","700471","2014-10-13 23:49:19","2","137","<mysql><git><go><git-commit><git-pull>","Git Notifications on Pull/Submodule Update","<p>I'm currently on a dev team building a website using MySql, Go, and a customized templating engine for the front-end.  We use Git for version control.</p>

<p>As I edit the model structs, I occasionally have to make breaking changes to the db structure (we're still early in the process here).  We construct our schema in the Go code, so all I need to do is drop my database and the app will recreate a new one on startup, with the correct structure.</p>

<p>However, my teammates aren't necessarily aware of these breaking changes to the db.  They do a pull or a submodule update, and most things may work fine, but when they move to a particular section of the site or use a particular feature they get strange databases errors (go figure, right?).</p>

<p>I'd like to have some way to notify my teammates that the db structure has changed, and that they need to rebuild it.  I can obviously put that information into a commit message, but then they need to inspect the log after every pull.</p>

<p>Is there any way to make a message show up in the console when a user pulls/submodule updates/checks out a particular commit?</p>
","3","700471","0","0"
"26360867","3940520","2014-10-14 12:31:24","2","594","<git><git-commit><commit-message>","Does Git allow me to write my next commit message gradually during developing?","<p>I am new in Git. Is there possible to create commit message step by step during developing? Because I find it very exhausted to review all changes during commit or committing to frequently.
Sorry if I am crowding questions in here :)</p>
","2","3940520","",""
"12278713","1586860","2012-09-05 09:51:27","2","295","<git><staging><git-commit><autocommit>","How to disable automatic stage for a specific file in Git","<p>I have a file that I want it to be part of the repository but I don't want to commit its changes every time I run the <code>commit -a</code> command I normally use, but only when I manually add it to the staging area.</p>

<p>Is it possible with Git?</p>

<p>For the sake of clarity, it's a binary ""output"" file (a spreadsheet) that contains also some logic on how to handle the data, so I want to commit it only when I change its logic/structure and not the stored data.</p>
","0","1586860","",""
"12287380","1085499","2012-09-05 18:12:35","0","2097","<git><git-push><tortoisegit><git-commit>","Git Push not showing in context menu","<p>I am new to Git and don't know much about it. I have made changes to few files and want to push them to remote repository. I am using TortoiseGit as Git client. I have ""Git Commit"" option present in the context menu but there is not ""Git Push"" option.</p>

<p>What could be wrong? Am I missing some Git files?</p>
","2","1085499","",""
"29106996","1166505","2015-03-17 18:29:19","66","89439","<git><git-svn><uniqueidentifier><git-commit>","What is a Git commit ID?","<p>How are the Git commit IDs generated to uniquely identify the commits?</p>

<p>Example: <code>521747298a3790fde1710f3aa2d03b55020575aa</code></p>

<p>How does it work? Are they only unique for each project? Or for the Git repositories globally?</p>
","1","1166505","0","0"
"12309841","150371","2012-09-06 23:31:01","1","374","<git><git-merge><git-commit><git-log><git-show>","Git merged branch's last commit/committer","<p>May be its asked already but I couldn't find it in here.</p>

<p>I have a branch <code>FEATURE</code> merged into a branch <code>STABLE</code> and currently when I do <code>git show</code> from <code>STABLE</code> am getting the last commit which is </p>

<pre><code>commit 265d684b67e66ba762bd438c44e49881f7fd571b
Merge: 5285837 78d9687
Author: xxxxx
Date:   Thu Sep 6 18:58:46 2012 -0400

    Merge branch 'FEATURE' into STABLE
</code></pre>

<p>Couldn't figure out how to find who last committed what change to the <code>FEATURE</code> branch before its merged to <code>STABLE</code>?</p>

<p>This is needed to send a notification to the committer who lastly committed some changes.</p>

<p>Let me know if any further info required and any help/suggestions would be appreciated?</p>
","2","150371","0","0"
"47615387","9045372","2017-12-03 04:54:54","1","1926","<github><rstudio><git-commit>","How do i discard or revert RStudio's git commit?","<p>I have created a project on github and integrated it with my RStudio.
By mistake, I have committed a large file from my computer and now I want to revert back or discard that commit.</p>

<p>Can someone help me how I can do it via RStudio.</p>

<p>Thanks..!!</p>
","1","9045372","",""
"45293231","5749914","2017-07-25 03:07:28","0","1602","<git><git-commit>","What does git core.commentChar=auto do?","<p>I'm testing <code>git commentChar=auto</code> with <code>git-commit</code> for a library that must emulate <code>git-commit</code> for some purposes.</p>

<p>If I run <code>git commit -m ""#message""</code>, and then make a second commit which open the editor to edit the message,
comments are still marked by <code>#</code>. Why is this?</p>

<p>According to the <a href=""https://git-scm.com/docs/git-config#git-config-corecommentChar"" rel=""nofollow noreferrer"">docs</a>:</p>

<blockquote>
  <p><strong>core.commentChar</strong></p>
  
  <p>Commands such as commit and tag that let you edit
  messages consider a line that begins with this character commented,
  and removes them after the editor returns (default #).</p>
  
  <p>If set to ""auto"", git-commit would select a character that is not the
  beginning character of any line in existing commit messages.</p>
</blockquote>

<p>But when I run a test script: </p>

<pre><code>git config --global core.commentChar auto
touch foo
git add foo
git commit -m '#message'
touch bar
git add bar
git commit # opens editor, And I see:

# Please enter the commit message // Wrong! This should not use the # char.
</code></pre>
","0","5749914","",""
"66310858","97714","2021-02-22 06:16:06","0","198","<git><git-commit>","How to remove all no-change commits from git repository?","<p>Due to some conversion mechanism from Mercurial, my git repository has a lot of commits without any change? Is there a way to remove all these no-change commit from this repository?</p>
<p>It is ok to create another repository (with removed commits), keeping the main one intact.</p>
","3","97714","",""
"63800244","1363576","2020-09-08 19:15:49","0","870","<git><macos><git-merge><git-commit><git-checkout>","Can't switch git branch after committing changes","<p>I am working on an Xcode project in macOS. The project is also under git version control. I have a branch in git that I created off of my local master branch. I have done some substantial work in it and have committed the changes. Issuing a <code>git status</code> command reports:</p>
<pre><code>nothing to commit, working tree clean
</code></pre>
<p>I want to switch to the master branch and merge the changes from this branch into it. When I go to switch to the master branch I get a response like the following:</p>
<pre><code>error: Your local changes to the following files would be overwritten by checkout:
    &lt;List of files&gt;
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>
<p>I am puzzled about why it says the files have changed. If I try to do a diff on one of the files, nothing happens; no output Is generated. In a certain sense, git seems to be treating at least some of these files as if they were new files even though they are not. I’ve tried adding the supposedly changed files to a git commit and git status still says</p>
<pre><code>working tree clean
</code></pre>
<p>If I try to commit, git says</p>
<pre><code>nothing to commit, working tree clean
</code></pre>
<p>If I try to do a git stash, it says</p>
<pre><code>No local changes to save
</code></pre>
<p>What can be be done to fix this problem and allow me to merge the changes from this branch into the master branch?</p>
","3","1363576","",""
"26706989","973397","2014-11-03 02:35:21","0","56","<git><github><git-commit>","remove alias and merge github commit (update files w/ commit in github repo)","<p>I have used other source control applications like Versions, and Cornerstone; but I am new to github. I have just made a first commit, and all the updated files I had moved into my working directory to commit, have added to my directory / repo with filename extension '<code>alias</code>' added to the end of each file and did not replace or merge with previous files.</p>

<p>My work flow is working locally and once files are strong and tested, I would commit into git repo / directory to replace older files with update. Currently I added the files to the directory to commit and files add as duplicate almost and with file extension '<code>alias</code>'.</p>

<p>Any suggestions?</p>
","0","973397","",""
"63804440","14245252","2020-09-09 03:41:55","2","320","<github><git-commit><github-desktop>","Github Desktop Commit to master button greyed out if more than one change slected","<p>I have a lot of stuff that I want to add to github so I have the desktop version to make local changes. I add everything I have and before I can push it I have to commit to master, problem is I have 1100 changes and I can only commit one at a time if more than one is selected with pretty much any combination of different files but the button remains greyed out if I have more than 1 file selected.</p>
","1","14245252","0","0"
"29149653","3833055","2015-03-19 16:10:37","1","3157","<java><git><git-commit><jgit>","Fetch file, modify contents, and commit with JGit","<p>I am trying to write code which can fetch file contents from repository, make some changes to file contents and write back to file and commit it.</p>

<p>I was able to get contents, but have no clue on how to write contents to the same file.</p>

<p>Here is the code which I am using</p>

<pre><code>public void test() {
    String filename = ""test.txt"";
    Repository repository = openRepository();
    try {
        ObjectId lastCommitId = repository.resolve(Constants.HEAD);
         RevWalk revWalk = new RevWalk(repository);
            RevCommit commit = revWalk.parseCommit(lastCommitId);
            // and using commit's tree find the path
            RevTree tree = commit.getTree();

            // Here i was able to get data using reader
            ObjectReader reader = repository.newObjectReader();
            ObjectInserter writer = repository.newObjectInserter();
            String data = null;
            try {

                commitNewData(filename, ""Hello"");
            } catch (GitAPIException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            finally {
                reader.release();
            }

            revWalk.dispose();

            repository.close();


    } catch (RevisionSyntaxException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (AmbiguousObjectException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IncorrectObjectTypeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

public Repository openRepository(){
    try{
        Repository repository = new FileRepository(""c:\\gitest\\.git"");
        return repository;
    }catch(Exception e){

    }
    return null;
}

public void commitNewData(String filename, String data) throws IOException, ConcurrentRefUpdateException {
    Repository repository = openRepository();
    ObjectInserter inserter = repository.newObjectInserter();

    PrincipalID principal = new PrincipalID(""me@test.com"");
    PersonIdent author = new PersonIdent(principal.getLocalID(), principal.getID());
    PersonIdent committer = new PersonIdent(""Sample Data"", ""raviteja.bellam@msci.com"");

    try {
        // get head commit
        ObjectId lastCommitId = repository.resolve(Constants.HEAD + ""^{commit}"");

        // Get bytes
        byte[] bytes = data.getBytes(Charset.forName(""UTF-8""));
        System.out.printf(""Data: %s"", data);

        // Create new object hash
        ObjectId resultObjectId = inserter.insert(Constants.OBJ_BLOB, bytes);
        System.out.printf(""BlobId: %s"", resultObjectId.toString());

        // create tree
        TreeFormatter treeFormatter = new TreeFormatter();
        treeFormatter.append(filename, FileMode.REGULAR_FILE, resultObjectId);
        // add existing entries to the tree
        addExistingEntriesToTree(repository, lastCommitId, treeFormatter);
        ObjectId treeId = treeFormatter.insertTo(inserter);
        System.out.printf(""TreeId: %s"", treeId.toString());

        // insert tree to the commit
        CommitBuilder builder = new CommitBuilder();
        builder.setParentId(lastCommitId);
        builder.setCommitter(committer);
        builder.setAuthor(author);
        builder.setTreeId(treeId);
        builder.setMessage(String.format(""Updated %s"", filename));
        ObjectId commitId = null;
        // insert commit
        try{
            commitId = inserter.insert(builder);
        }catch(Exception e){
            System.out.println(e);
        }

        System.out.printf(""CommitId: %s"", commitId.toString());

        // update the ref
        RevWalk rw = new RevWalk(repository);
        RevCommit revCommit = rw.parseCommit(commitId);
        RefUpdate ru = repository.updateRef(Constants.HEAD);
        ru.setNewObjectId(commitId);
        ru.setRefLogMessage(String.format(""commit: %s"", revCommit.getShortMessage()), false);
        ru.setExpectedOldObjectId(lastCommitId);
        RefUpdate.Result rc = ru.forceUpdate();
        RepositoryState state = repository.getRepositoryState();
        switch (rc) {
            case NEW:
            case FORCED:
            case FAST_FORWARD: {
                if (state == RepositoryState.MERGING_RESOLVED) {
                    // Commit was successful. Now delete the files
                    // used for merge commits
                    repository.writeMergeCommitMsg(null);
                    repository.writeMergeHeads(null);
                } else if (state == RepositoryState.CHERRY_PICKING_RESOLVED) {
                    repository.writeMergeCommitMsg(null);
                    repository.writeCherryPickHead(null);
                } else if (state == RepositoryState.REVERTING_RESOLVED) {
                    repository.writeMergeCommitMsg(null);
                    repository.writeRevertHead(null);
                }
                break;
                //return revCommit;
            }
            case REJECTED:
            case LOCK_FAILURE:
                throw new ConcurrentRefUpdateException(
                        JGitText.get().couldNotLockHEAD, ru.getRef(),
                        rc);
            default:
                throw new JGitInternalException(MessageFormat.format(
                        JGitText.get().updatingRefFailed,
                        Constants.HEAD, commitId.toString(), rc));
        } 


        inserter.flush();
    } finally {
        inserter.release();
    }
}

protected void addExistingEntriesToTree(Repository repository, ObjectId lastCommitId, TreeFormatter treeFormatter) throws IOException {
    RevWalk revWalk = new RevWalk(repository);
    // get last commit
    RevCommit commit = revWalk.parseCommit(lastCommitId);
    // get it's tree
    RevTree tree = commit.getTree();

    // now walk the tree
    TreeWalk treeWalk = new TreeWalk(repository);
    treeWalk.addTree(tree);
    //treeWalk.setRecursive(true);
    while (treeWalk.next()) {
        treeFormatter.append(treeWalk.getNameString(), treeWalk.getFileMode(0), treeWalk.getObjectId(0));
    }
}
</code></pre>

<p>I am trying to checkout my file:</p>

<pre><code>Repository repository = new FileRepository(""c:\\Users\\gitest\\.git"");
Git git = new Git(repository);
CheckoutCommand checkout = git.checkout();
        //checkout.addPath(""test.txt"");
checkout.setName(""master"");
        //checkout.setName(""test.txt"");
Ref ref = checkout.call();
</code></pre>

<p>which throws <code>InvalidPathException</code></p>
","0","3833055","0","0"
"66327553","2047843","2021-02-23 05:29:18","4","902","<git><github><git-commit>","What does -CHEAD mean in git commit?","<p>On a <a href=""https://docs.github.com/en/github/managing-large-files/removing-files-from-a-repositorys-history"" rel=""nofollow noreferrer"">GitHub documentation page</a>, I saw the following command:</p>
<blockquote>
<pre><code>$ git commit --amend -CHEAD
# Amend the previous commit with your change
</code></pre>
</blockquote>
<p>I've used the command <code>git commit --amend</code> before, but I've yet to come across the <code>-CHEAD</code> argument. What does <code>-CHEAD</code> mean in this context, and how does it differ from <code>--no-edit</code>?</p>
","0","2047843","",""
"63818094","11167576","2020-09-09 19:10:18","2","4923","<git><visual-studio-code><git-branch><git-commit>","Checking out previous commit with Github and VS Code","<p>I accidentally made a commit that I should not have to the master of my project in GitHub. I am now trying to checkout to a previous commit using VS Code. I got the URL of that commit.  I do have the remote set up in VS Code but cannot figure out how to do this.</p>
<p>My thought was to go to checkout to and enter the URL of the commit. Then I would switch to the master branch and commit this.  But that gives me an error <code>&quot;Can't push refs to remote&quot;</code>.</p>
","5","11167576","",""
"45326709","8369752","2017-07-26 12:14:25","1","110","<git><merge><branch><git-commit>","Git 3 branches merge with every 2 branches having no conflict","<p>I am discussing about git merge issues with a colleague of mine. And I come to a question. There are three branches from a same branch: <code>b1 b2 b3</code>. The three branches have unique modifications(commits). But everyone of them can be merge into any other one without conflict. Then there mustn't be conflicts when merging these three branches into one, is it correct?</p>

<p>A simple example(b-branch  &amp;  c-commit):  </p>

<pre><code>b1 : c1-&gt;c2-&gt;c3-&gt;c4  
b2 : c1-&gt;c2-&gt;c3-&gt;c5-&gt;c6  
b3 : c1-&gt;c2-&gt;c3-&gt;c5-&gt;c7  
b1 can merge into b2 without conflict  
b2 can merge into b3 without conflict  
b3 can merge into b1 without conflict
</code></pre>

<p>When we merge <code>b1</code> and <code>b2</code> into <code>b3</code>, is it possible that this action will result in a conflict?  </p>

<p>In this question, we have a precondition that these 3 branches are created from the same branch, and commits from the parent branch can not be modified(with rebase or other command).</p>
","6","8369752","",""
"12481639","646276","2012-09-18 16:59:12","2168","1921108","<git><git-commit>","Remove file from latest commit","<p>How do I remove a file from the latest commit?</p>
","3","646276","0","0"
"29156932","4209304","2015-03-19 23:38:14","0","554","<git><github><upload><git-commit>","How do I add new files to a shared github repo?","<p>I have a team project and we are using github to shared any files. I need to add a png image into the repo's images folder. How do I do it through the website?</p>
","3","4209304","",""
"12499107","1542339","2012-09-19 16:38:05","2","1337","<git><version-control><git-push><git-commit><git-amend>","why git commit --amend make confliction happened? that is quite strange","<pre><code>*   84b134d - (HEAD, origin/lab_master, lab_master) comment macro defination which is protent to be a fun
|\
| * 735d88f - add small script to ease ctag related option (13 minutes ago) 
* | 6623a94 - add small script to ease ctag related option (4 minutes ago) 
|/
* 0d0913a - add gitignore to ignore ctags file (57 minutes ago) 
</code></pre>

<p>735d88f is a --amend commit, but conflict happened at this moment, why?</p>

<p>i have only one pc, and i always edit files on it, also i have only one local repo, what's more this repo is only used by here, <strong>i think there is no  possibility that conflict may happen</strong>?</p>

<p>but it happened, why?</p>
","1","1542339","",""
"47655987","7422994","2017-12-05 14:29:05","3","1283","<git><git-commit><tortoisegit>","How to differentiate the summary from the description in TortoiseGit commits?","<p>On Github, for example, we can put a Summary message in the commits, but we can also put a Description message, so when a colaborator wants to see a description of the commit, he can know more details of it:</p>

<p><a href=""https://i.stack.imgur.com/m87z2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/m87z2.png"" alt=""Commiting messages on GitHub""></a></p>

<p>How can we do it when commiting a message in TortoiseGit, as he only gives you 1 input to write your message?</p>
","5","7422994","",""
"45347487","8375171","2017-07-27 10:02:45","5","8635","<github><gitlab><atlassian-sourcetree><git-commit>","How to delete any commit from commits table in Gitlab?","<p>In this <code>image</code> you can see list of <code>commit</code>, I want to <code>delete</code> one of them, but I could not find the <code>delete</code> option.</p>

<p><a href=""https://i.stack.imgur.com/1nMJI.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/1nMJI.jpg"" alt=""enter image description here""></a></p>
","0","8375171","",""
"47663749","9049162","2017-12-05 22:33:15","4","5785","<git><visual-studio-2015><tfs><git-commit>","Visual Studio keeps asking to install Git command prompt tools","<p>Im using <code>Visual Studio 2015</code> and using Git as my code repo. In <code>Team Explorer</code> it is asking to <code>Install 3rd-party Git command prompt tools</code>, i have restarted <code>VS2015</code> and restarted my machine and this message still appears under Team Explorer. What i have also noticed is that  when i make changes to any fill and try to <code>commit</code>. I look under <code>Included Changes</code> and the only file that is mentioned is a <code>.suo</code> file , even though i had been making changes to a <code>.cs</code> file.</p>

<p>Update 1:
What i have also noticed  when i go to the file directory and look for a file that i have modified the modified date is not update after i save it.</p>
","1","9049162","0","0"
"29172689","3115294","2015-03-20 17:42:03","0","2924","<git><git-commit>","Nothing to commit - Git","<p>I have created a new repository on github for a project, cloned it and pushed 2 files: README.md and main.c.</p>

<p>But for some reason every time I try to use</p>

<pre><code> git status
</code></pre>

<p>or</p>

<pre><code>git add .
</code></pre>

<p>to commit changes, I get the following message</p>

<pre><code># On branch master
nothing to commit (working directory clean)
</code></pre>

<p>So I can't push anything and the only workaround solution that works is</p>

<pre><code>rm -rf .git
git init
git remote add origin &lt;repo&gt;
</code></pre>

<p>and force pushing the files. After I push the changes it goes back to the 'nothing to commit' message,so I have to reinitialise every time I want to commit.</p>

<p>This problem occurs even when I try to reclone the repository.</p>

<p>I've looked around for solutions, it seems that .gitignore can sometimes cause similar issues but I don't have a .gitignore file in the repo.</p>
","3","3115294","",""
"12544205","851029","2012-09-22 13:31:03","2","238","<git><github><addition><git-commit>","Commit in Github","<p>I use the following commands:</p>

<pre><code>git add *
git commit -am 'updating'
</code></pre>

<p>And I encountered below:</p>

<pre><code># On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   webkomiks (modified content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>What I am supposed to do?</p>

<p>I continued with:</p>

<pre><code>git push myrep master
</code></pre>

<p>I only saw the folder in github not the files inside the folder.</p>

<p>thanks</p>
","3","851029","0","0"
"64103760","997147","2020-09-28 14:03:54","0","126","<git><git-commit><githooks><git-post-receive><git-bare>","How do I configure a remote to have a fixed receive pack?","<p>I have a git bare repository on my server which has a post-receive hook that essentially does</p>
<pre><code>GIT_WORK_TREE=`/path/to/public_html` git checkout -f
</code></pre>
<p>Whenever I do a push from my local repo to this remote I get an error:</p>
<pre><code>fatal: bad config value for 'receive.denycurrentbranch' in ./config
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists
</code></pre>
<p>I found <a href=""https://stackoverflow.com/a/62788948/997147"">a solution for this</a> which works fine. However, I cannot expect to type out the <code>--exec=/usr/local/cpanel/3rdparty/bin/git-receive-pack</code> each time I make a push. I know one option would be to make an alias to the whole command but that doesn't work great either since when I shift to a different system I need to have this command as well.</p>
<p>How do I go about enforcing that the right receive pack is used? The issue seems to be that <a href=""https://documentation.cpanel.net/display/CKB/Guide+to+Git+-+Host+Git+Repositories+on+a+cPanel+Account#GuidetoGit-HostGitRepositoriesonacPanelAccount-Pushlocalchangestothehostedrepository."" rel=""nofollow noreferrer"">I'm using a shared hosting which uses cPanel</a>. Is there anything I can specify on my bare repo to ensure I can normally do <code>git push origin master</code> rather than specifying the pack? Or something that can be done on client side and stored into the main repo also works--as long as when I clone back the repo on another system I can continue using it normally. Suggestions?</p>
","2","997147","",""
"8973041","281488","2012-01-23 14:18:28","0","940","<git><xcode4><git-push><git-commit>","xcode4 git push error 403 while accessing git repo","<p>I recently upgraded to OS Lion and Xcode4 and cloned a git repo of mine to start working on.  The clone worked fine and I can commit changes I've made successfully to my repo but when I try to push the changes I get the following error:</p>

<pre><code>error: The requested URL returned error: 403 while accessing 
https://sadmicrowave@github.com/sadmicrowave/iOS-Time-Blogger.git/info/refs

fatal: HTTP request failed
</code></pre>

<p>What is wrong? I've added my Mac SSH key to my github profile, but I don't know why I'm having this issue...</p>
","0","281488","",""
"27046148","4180667","2014-11-20 17:46:30","1","30","<git><github><commit><git-push><git-commit>","push to the top leaving middle two commits","<p>Let's say I have following commits</p>

<p><code>cccc[recent]</code></p>

<p><code>bbbb</code></p>

<p><code>aaaa</code></p>

<p>Now I have bugs in <code>cccc</code> and I have rolled back to <code>aaaa</code> by </p>

<p><code>git reset --hard aaaa</code></p>

<p>and I have worked here,this all happened in <code>bugs</code> branch</p>

<p>Now when I try to push the cmmits to the <code>bugs</code> branch it is telling </p>

<pre><code>! [rejected]        bugs -&gt; bugs (non-fast-forward)
error: failed to push some refs to 'my url'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I want to push my changes and remove the <code>bbbb</code> and 'cccc` commits.</p>

<p>how to do this? </p>
","0","4180667","",""
"45618692","7157496","2017-08-10 16:11:26","0","376","<git><git-commit><git-cherry-pick>","How to add one ""behind"" commit from Master to Dev where Dev is in head state?","<p>I'm actually learning Git and I'm wondering what would be the best practice to achieve the ""Desired state"" :</p>

<pre><code>Actual state:

Master A-----B------C
             \ 
              \
           Dev D------E------F


Desired state:
Master
A-----B------C
             |
             |
Dev          C------D------E------F
</code></pre>

<p>FYI : I'm in production on Master/Commit-B and I'm developping on Dev/Commit-D-E-F. I've seen that I want to commit a change on production but Dev/Commit-D-E-F are not ready to be merged in production.</p>

<p>I've read about the usefull stackoverflow post : <a href=""https://stackoverflow.com/questions/881092/how-to-merge-a-specific-commit-in-git"">How to merge a specific commit in Git</a> using <code>git cherry-pick</code> but I'm not too sure if i should be concern about <em>""This changing of commit IDs breaks git's merging functionality among other things""</em>? Should I need to change my commit vision to do not reproduce this scenario?</p>

<p>When my developpement will be finished I'm planning to merge the modification from Dev to Master as :</p>

<pre><code>Future desired state:
Master
A-----B------C------D------E------F
</code></pre>
","4","7157496","",""
"19441724","999973","2013-10-18 04:42:08","1","2273","<git><git-commit>","git commit, change to existing file is handled differently","<p>I checked out an existing branch, <em>lessons</em>, and started to change some files, and deleted one.</p>

<p>After doing <code>git add .</code> and <code>git commit</code>, some changes where committed, but others were separated at the end of comment text. As far as I understand, I have to do some operation manually.</p>

<p>So, for the deleted file I did <code>git rm file.name</code>. I got this part.</p>

<p>What should I do with lines 14-17?</p>

<p>All those files were created much earlier, there are not new.</p>

<p>Thank you very much!</p>

<pre><code>  1 
  2 # Please enter the commit message for your changes. Lines starting
  3 # with '#' will be ignored, and an empty message aborts the commit.
  4 # On branch lessons
  5 # Changes to be committed:
  6 #   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
  7 #
  8   deleted:    ../layouts/]
  9 #
 10 # Changes not staged for commit:
 11 #   (use ""git add &lt;file&gt;..."" to update what will be committed)
 12 #   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
 13 #
 14 # modified:   ../courses/show.html.slim                                                                                                   
 15 # modified:   ../layouts/_header.html.slim
 16 # modified:   ../student_levels/_student_level.html.slim
 17 # modified:   ../subjects/_subject.html.slim
 18 #
</code></pre>
","1","999973","0","0"
"253055","3713","2008-10-31 10:23:14","832","571929","<git><git-commit><git-amend>","How do I push amended commit to the remote Git repository?","<p>When I've worked a bit with my source code, I did my usual thing commit and then I pushed to a remote repository. But then I noticed I forgot to organize my imports in the source code. So I do the amend command to replace the previous commit:</p>

<pre><code>&gt; git commit --amend
</code></pre>

<p>Unfortunately the commit can't be pushed back to the repository. It is rejected like this:</p>

<pre><code>&gt; git push origin
To //my.remote.repo.com/stuff.git/
 ! [rejected]        master -&gt; master (non-fast forward)
error: failed to push some refs to '//my.remote.repo.com/stuff.git/'
</code></pre>

<p>What should I do? (I can access the remote repository.)</p>
","6","3713","0","0"
"38689386","5207339","2016-07-31 23:56:01","0","405","<git><emoji><git-commit><github-for-windows><github-desktop>","Remove Emoji in GitHub Desktop First Commit","<p>Whenever I create a new repository in the GitHub Desktop app, it makes an initial commit with the message "":boom::camel: Added .gitattributes &amp; .gitignore files"". </p>

<p>This is fine, EXCEPT for the emoji. How can I permanently disable the emoji being included in messages I don't ever type? I want my messages to look professional, but I don't want to stop using the GitHub Desktop App. </p>

<p>Edit: I forgot to mention that I made several commits after the initial one. </p>
","0","5207339","",""
"39058253","2548663","2016-08-20 20:06:50","0","147","<git><git-commit>","how to go to a commit from history of commits in git?","<p>I deleted one file after my first commit, and I want to know how can I revert back to that commit state (all files  in working dir to that state).
Can someone please help me with this?</p>

<pre><code>$ git log
commit 2e8bd07a1f7446d2acef86f854ad57dabe4e5834
Author: Sam &lt;sam@mysite.com&gt;
Date:   Sun Aug 21 00:21:12 2016 +030

    baseline

g@DESKTOP MINGW64 /c/mydir (master)
</code></pre>
","4","2548663","",""
"39066474","3202538","2016-08-21 16:36:43","0","91","<git><git-commit><magit>","Git commit to a custom parent","<p>Example log-graph:</p>

<pre><code>A B
|/
a
</code></pre>

<p>Wanted local(not pushed yet) workflow:</p>

<ul>
<li>if the commit <code>x</code> is needed just for the branch <code>A</code> - commit <code>x</code> into the branch <code>A</code></li>
<li>if the commit <code>x</code> is needed just for the branch <code>B</code> - commit <code>x</code> into the branch <code>B</code></li>
<li>if the commit <code>x</code> is needed for branches <code>A</code> <strong>and</strong> <code>B</code> - commit <code>x</code> <strong>on-top</strong> of the revision <code>a</code>, the most recent common ancestor of branches <code>A</code> and <code>B</code></li>
</ul>

<p>The last case should change the log-graph into this:</p>

<pre><code>A B
|/
x
|
a
</code></pre>

<p>Whats the easiest way to accomplish such a workflow? (bonus if its in Emacs/Magit)</p>
","4","3202538","",""
"57947283","4820101","2019-09-15 18:55:03","0","496","<git><git-branch><git-commit><git-log><git-history-graph>","git confusing graph. `master` branch seems to have two lines?","<p>On running <code>git log</code> i am seeing strange graph. I will explain it further.
Below is the output for git log with graph.</p>

<pre><code>$ git log --graph  --oneline
*   df1834d (HEAD -&gt; master, tag: r-0.1, origin/master) Merge branch 'master' of https://github.com/samshers/graphql-hibernate
|\
| * d56a675 fixed country null issue
* | ee9bb70 fixed country null issue
|/
* 2617f2a hibernate cascade error issue. country field in state table set to null
</code></pre>

<p>As you an see master has two separate branches in itself. To confirm this further, i ran </p>

<pre><code>$ git branch --contains ee9bb706c8fcc329fac4acf69ad6b684f1069170
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p>And then</p>

<pre><code>$ git branch --contains d56a6751771b1f62d9ceb0bcce9a2391c004ee44
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p><strong>So clearly these two commits are present on master - so then why are there two graphs.</strong> 
How can i know if <strong>changes</strong> both the commits are present on master. Or if only <strong>changes</strong> from one of them is actually present on the master, which one of the two?     </p>

<p><strong>Edit - following responses from RY and Mark</strong>
<a href=""https://i.stack.imgur.com/nYa1M.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nYa1M.png"" alt=""adding the graph screenshot""></a>   ( if color codes add any further meaning, please hint on that as well.)<br>
So, am further trying to understand why a commit (Y) is not based on previous commit (X) ( if X was committed before Y). 
The git log shows that both <code>d56a675</code> and <code>ee9bb70</code>  where committed at the same time. </p>

<pre><code>commit ee9bb706c8fcc329fac4acf69ad6b684f1069170
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue

commit d56a6751771b1f62d9ceb0bcce9a2391c004ee44
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue
</code></pre>

<p>But, on digging further the little difference can be seen..</p>

<pre><code>$ git show -s --format=""%ct"" d56a6751771b1f62d9ceb0bcce9a2391c004ee44
1568030041
</code></pre>

<p>and </p>

<pre><code>$  git show -s --format=""%ct""  ee9bb706c8fcc329fac4acf69ad6b684f1069170
1568031643
</code></pre>

<p>and this info should be enough for git to put the commits in right order. But if it is not, then I guess it is smarter and doing it for reason, just trying to understand the reason and the cause.</p>
","1","4820101","",""
"927358","89904","2009-05-29 18:09:14","25715","12856232","<git><version-control><repository><git-commit><undo>","How do I undo the most recent local commits in Git?","<p>I accidentally committed the wrong files to <a href=""https://en.wikipedia.org/wiki/Git"" rel=""noreferrer"">Git</a>, but didn't push the commit to the server yet.</p>
<p>How do I undo those commits from the <em>local</em> repository?</p>
","15","89904","2","2"
"58094806","2914140","2019-09-25 09:00:34","0","104","<git><rebase><git-commit>","How to fixup commits to upper in Git?","<p>When rebasing in Git we usually can join (fixup, squash) several commits to bottom one, for instance, <code>A, B, C -&gt; A'</code> (here B and C are newer than A). This is not a good practise as you see a <em>date</em> of beginning of work (commit A), but not it's finish (commit C). Like you made a feature on 23.09.2019, but not on 25.09.</p>

<p>Now we have several commits and want to fixup A, B, C to C: <code>A, B, C, D, E -&gt; C', D', E'</code>. How to do this?</p>
","0","2914140","",""
"58101912","7544643","2019-09-25 15:30:23","-1","38","<git-branch><git-commit><git>","How to put each past commit on a separate branch of its own?","<p>So I want to go from this state:</p>

<pre><code>A - B - C - D - E
</code></pre>

<p>to this state:</p>

<pre><code>A (feature/1 branch)
B (feature/2 branch)
C (feature/3 branch)
D (feature/4 branch)
E * master
</code></pre>

<p>How do I do this? Thanks in advance.</p>
","2","7544643","",""
"20138640","1254632","2013-11-22 06:40:18","533","334714","<git><git-commit>","Pushing empty commits to remote","<p>I have pushed one commit to remote but now I realized that the commit message is not correct. I would like to change the commit message but AFAIK it is not possible. So i decided to create empty commit with correct message:</p>

<pre><code>git commit --allow-empty
</code></pre>

<p>Are there any disadvantages/consequences of pushing empty commits? Is there any problem I might face in future because of this empty commit??</p>
","1","1254632","0","0"
"20213758","2311320","2013-11-26 09:59:13","0","143","<git><git-commit><git-extensions>","Is the change of the pushed commit going to cause problems?","<p>I am using <code>Git Extensions</code> and my situation looks like this:
<img src=""https://i.stack.imgur.com/321HQ.png"" alt=""enter image description here"" /></p>
<p>As you see, my target commit is not the last one. And it's already pushed and pulled by other users of the branch. I read some articles about using different commands through the git bash, for doing some work, but here I found an easier way - I <em>right-click the target commit &gt; Manipulate commit &gt; Fixup commit</em> and another window pops out. Then I am able to change the commit message (the green part), and apparently to push the changes, but I haven't done anything yet as, from what I read, this is gonna cause problems in future for the other users of the branch.</p>
<p>What could these &quot;problems&quot; be and how can I fix the commit + avoiding any problems in future?</p>
","0","2311320","",""
"39493167","5715934","2016-09-14 14:35:05","0","76","<git><github><version-control><git-commit>","Committing a reverted commit without reverting the revert?","<p>In my git master branch history something like this has happened.</p>

<p>Assume I have progressed up-to a point (A). And I added some commits (say B, C and D) which was merged from another branch.</p>

<pre><code>(A)--(B)--(C)--(D)
</code></pre>

<p>Then I understood that I don't want to add them now for some reason and I reverted those. So now,</p>

<pre><code>(A)--(B)--(C)--(D)--(-D)--(-C)--(-B)
</code></pre>

<p>Then I have added some other commits. Assume (E), (F), (G).</p>

<pre><code>(A)--(B)--(C)--(D)--(-D)--(-C)--(-B)--(E)--(F)--(G)
</code></pre>

<p>Now, I suddenly want that commits (B, C, D) to be merged via that older branch. So that finally it looks,</p>

<pre><code>(A)--(B)--(C)--(D)--(-D)--(-C)--(-B)--(E)--(F)--(G)--(B)--(C)--(D)
</code></pre>

<p>But just because it already has the commits (B, C, D) in history, I can't do that. Can someone please tell me that what is the ideal solution here.??</p>

<p>Please don't ask me to revert the reverts or undo the past that I cannot.</p>
","10","5715934","",""
"20435691","1888726","2013-12-06 23:55:41","1","461","<git><git-commit><changelog>","How to sync Git commit message, tag message and the CHANGELOG","<p>I want to know the best practices for handling the above. I keep a changelog for my project which I update with detailed information on changes. I also add a summary to the commit message, and add a similar message to the version tag. But what's the difference between, say, a summary on changelog, the commit message, and tag message?</p>

<hr>

<p>CHANGELOG</p>

<p>v1.0.0 - Added this that and that, and changed this.</p>

<ul>
<li>change 1</li>
<li>change 2</li>
<li>change three or somthing</li>
</ul>

<hr>

<p>git commit -am ""...""</p>

<p>Added this that and that, and changed this.</p>

<hr>

<p>git tag v1.0.0 -m ""...""</p>

<p>v1.0.0 - Added this that and that, and changed this.</p>

<hr>
","0","1888726","0","0"
"39556985","1060159","2016-09-18 11:08:22","0","477","<git><ftp><git-commit>","Using git to deploy my website without SSH access","<p>I track my website's changes using git. The directory structure is :</p>

<pre><code>$ ls my-page 
Gruntfile.js     node_modules     webpage      package.json
</code></pre>

<p>Of course, I'd like to push only the <code>webpage</code> subdirectory contents to the server. Besides, I'd like to ignore the <code>webpage/assets/sass</code> subdirectory. My Internet connection is fairly slow, so I'd like the upload to be incremental, or at least upload only the files changed since the last commit. I don't want to upload uncommitted changes.</p>

<p>I know about <code>git-ftp</code> but as far as I see from the docs, I can upload only the whole tree with it.</p>

<p>Is it possible to achieve what I want?</p>
","0","1060159","",""
"1611215","128983","2009-10-23 03:19:02","1329","1676885","<git><git-commit>","Remove a git commit which has not been pushed","<p>I did a <code>git commit</code> but I have not pushed it to the repository yet.
So when I do <code>git status</code>, I get '# Your branch is ahead of 'master' by 1 commit.</p>

<p>So if I want to roll back my top commit, can I just do:</p>

<pre><code>git reset --hard eb27bf26dd18c5a34e0e82b929e0d74cfcaab316
</code></pre>

<p>given that when I do <code>git log</code> I get:</p>

<pre>
commit eb27bf26dd18c5a34e0e82b929e0d74cfcaab316
Date:   Tue Sep 29 11:21:41 2009 -0700


commit db0c078d5286b837532ff5e276dcf91885df2296
Date:   Tue Sep 22 10:31:37 2009 -0700</pre>
","4","128983","0","0"
"20522843","1533046","2013-12-11 15:17:12","0","257","<git><githooks><git-commit>","How do I make git block commits that do not include a certain file?","<p>I have one repo containing several directories which are essentially broken down into separate apps down the folder path, like this:</p>

<pre><code>repo/foo/app1
        /app2
        /app3
    /bar/app1
        /app2
        /app3
    /red/app1
        /app2
        /app3
</code></pre>

<p>I now have a need to provide version info (metadata.rb) for app2. I want to configure git to block any commits for any app2 folder that does not include a change to app2/metadata.rb. I don't have root access to the repo, so I need to do this all locally. I know I can use a hook, but I don't know how to configure the hook. Thanks!</p>
","4","1533046","",""
"39708082","608639","2016-09-26 16:40:35","19","4760","<git><git-commit><sign>","What problem or threat does commit signing solve?","<p>We use GitHub and we have a request to <a href=""http://github.com/weidai11/cryptopp/issues/290"" rel=""noreferrer"">perform commit signing</a>. After studying the process, it's not clear to me what problem commit signing solves. As I understand the process, there's <em>""local source code""</em> that gets committed to a <em>""local repo""</em> that gets pushed to a <em>""remote repo""</em>. So there are three boxes, and two arrows creating a directed graph from the local source files to the remote repository. For the end user, the flows are reversed.</p>

<p>In the model as described, it seems like we want the authorizations to occur at the push to the remote repo; and commit signings have nearly no benefit.</p>

<p>The Git SCM manual, <a href=""https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work"" rel=""noreferrer"">7.4 Git Tools - Signing Your Work</a> does not state the problem it is solving. It does tell me to hunt for the answer, however:</p>

<blockquote>
  <p><strong><em>Everyone Must Sign</em></strong></p>
  
  <p>Signing tags and commits is great, but if you decide to use this in
  your normal workflow, you’ll have to make sure that everyone on your
  team understands how to do so. If you don’t, you’ll end up spending a
  lot of time helping people figure out how to rewrite their commits
  with signed versions. Make sure you understand GPG and the benefits of
  signing things before adopting this as part of your standard workflow.</p>
</blockquote>

<p>I'm presuming the Git engineers have modeled the Git workflows. They identified a problem (or problems), and they placed the <em>""commit signing""</em> security control to remediate it. I'd like to know what problems they identified and solved with <em>""commit signing""</em>.</p>

<p>I think what has happened is folks are confusing/conflating <a href=""http://threatpost.com/javas-losing-security-legacy/102176/"" rel=""noreferrer"">Authentication with Authorization</a> or maybe Code Integrity. Unfortunately, Authentication <strong><em>is not</em></strong> Authorization or Code Integrity despite the willingness to make it so.</p>

<p>What problem does git commit signing solve?</p>
","16","608639","0","0"
"58563856","5280626","2019-10-25 18:26:03","0","558","<git><rebase><git-commit>","git how to move an older commit up to the head without losing any other commits","<p>I have a local branch with commits like:
   head/master  5
                4
                3
                2
                1</p>

<p>I want to move 3 to the head and not lose any other commits:
   head/master  3
                5
                4
                2
                1
Is this what rebase is for?  (Obviously, I'm new)</p>

<p>Ideas?  thanks in advance</p>
","0","5280626","",""
"39717596","3282596","2016-09-27 06:34:35","1","51","<git><git-commit><git-reset>","Completely remove an earlier commit","<p>Consider the following commit history:</p>

<pre><code>* 627f412 (HEAD -&gt; master) final commit
* 1425cf8 added some file
* 2c8bb78 initial commit
</code></pre>

<p>The repository is neither pushed not pulled during these commits.</p>

<p>The second commit 1425cf8 is an unnecessary commit. And I want to completely remove that commit.</p>

<p>So, the new log will look like:</p>

<pre><code>* 627f412 (HEAD -&gt; master) final commit
* 2c8bb78 initial commit
</code></pre>

<p>How do I achieve that?</p>

<p>Is <code>git reset --hard HEAD~1</code> the correct thing to do in this situation?</p>
","0","3282596","0","0"
"39786492","570002","2016-09-30 07:58:38","1","2861","<build><push-notification><continuous-integration><travis-ci><git-commit>","How add email notification in Travis and where?","<p>I wanted to add email notification for me and my colleagues for Travis CI Build.
Whatever the result is failure or Sucess of Build we should get notified.
Should i need some extra settings in my git account?
What to add for email notification in Travis and where?I mean any file or i can add in .travis.yml file?</p>

<p>Thanks</p>
","0","570002","",""
"39803582","5446167","2016-10-01 06:11:26","0","163","<github><git-branch><git-svn><git-commit>","Permission push repo in Github","<p>Can I make permission to push my repo only me? But I don't using private account. How to make permission only me to push all my repository?</p>
","0","5446167","",""
"58735570","1442452","2019-11-06 17:27:32","1","151","<git><git-commit><git-hash>","Git Hash value of last un-pushed local commit","<p>I have 3 local commits on my branch mainline which are ahead of the remote repo. How to get the hash value of the earliest local commit?</p>
<blockquote>
<p>Example:</p>
<p>A &lt;- HEAD(mainline) local<br />
B<br />
C<br />
D &lt;- origin/mainline synced with remote</p>
</blockquote>
<p>How to get hash value of commit C?</p>
","2","1442452","0","0"
"58745882","1541141","2019-11-07 09:42:24","1","116","<git><git-commit>","Xed cursor position during git commit","<p>I've been using <code>xed</code> to write my commit messages.
<code>xed</code> remembers the last cursor position of each file.
Since the file <code>.git/COMMIT_EDITMSG</code> is reused for each commit message, <code>xed</code> opens with the cursor at the position I was at when I committed the previous commit.
It is a PITA to have to manually reposition the cursor back to the first line.</p>

<p>[X]: Where I would expect the cursor to be.</p>

<p>[Y]: Where the cursor is.</p>

<pre><code>[X]

# Please enter the commit [Y] message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch develop
# Your branch is up to date with 'origin/develop'.
#
</code></pre>
","0","1541141","",""
"20889298","156982","2014-01-02 18:24:13","2","472","<git><git-commit><git-add>","Adding to git staging means what?","<p>What is the difference between <code>git add</code> and <code>git commit</code>? </p>

<p>I understand that former adds to staging. But adding to staging means what? </p>

<p>Isn't it an additional step to first add to staging and then do a commit? In fact, it just doesn't end there, we also have to do a <code>push</code> to actually save our changes to the centralized repository. Am I missing any point here?</p>
","1","156982","",""
"58838493","2745495","2019-11-13 13:43:27","1","1217","<git><visual-studio-code><git-commit>","How to let VS Code's Commit UI support a `#` in the commit message?","<p>I need to follow a git commit message format that starts with a <code>#</code> (ex. <code>#1234 ...</code>).</p>

<p>This is <strong>not</strong> a duplicate of <a href=""https://stackoverflow.com/questions/2788092"">Start a git commit message with a hashmark (#)</a> because I know about the <code>commentchar</code> and I already configured my <code>git</code> to use a different comment character:</p>

<pre><code>gino@myrepo$ git config --global --get core.commentchar
;
gino@myrepo$ git config --get core.commentchar
;
</code></pre>

<p>I've also confirmed that it works if I commit from the command line:</p>

<pre><code>gino@myrepo$ git log
Author: ...
Date:   Wed Nov 13 21:59:40 2019 +0900

    # Test `git commit` from terminal
    # These 2 lines should not be treated as comments
</code></pre>

<p>The problem is when I try to do my commits from <a href=""https://code.visualstudio.com/docs/editor/versioncontrol#_commit"" rel=""nofollow noreferrer"">VS Code's Commit UI</a>:</p>

<p><a href=""https://i.stack.imgur.com/41Pya.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/41Pya.png"" alt=""vscode commit""></a></p>

<p>VS Code's Git does not seem to honor the config that <code>#</code> is not a comment, because when I check the <code>git log</code>, it only shows the 2nd line:</p>

<pre><code>gino@myrepo$ git log
commit 1254416d309588293372b96fd1f71e30af51b1fe (HEAD -&gt; master)
Author: ...
Date:   Wed Nov 13 22:23:17 2019 +0900

    These lines should be details.
</code></pre>

<p>It's worse when I try to use a one-line message (<code>#4567: blah</code>). The Commit UI will not allow me to commit (nothing happens when I click on the commit button) and the <em>Command Palette</em> > <em>Git: Commit</em> command will simply abort the commit (probably because it gets treated as an empty commit message).</p>

<p>How do I get VS Code to recognize the custom <code>commentchar</code> setting?</p>

<p>Notes:</p>

<ul>
<li>I know that VS Code uses my <code>git config</code> (global or local) because when I try changing other settings (ex. <code>user.name</code>), it applies it correctly</li>
<li>It's not a duplicate of <a href=""https://stackoverflow.com/questions/2788092"">Start a git commit message with a hashmark (#)</a> because I am talking about committing via VS Code's Commit UI, not via the command line</li>
<li>I can't find a VS Code > Git setting related to commit messages</li>
<li>I'm using VS Code 1.40.0</li>
</ul>
","4","2745495","",""
"58921367","11634814","2019-11-18 19:12:50","0","60","<git><github><save><commit><git-commit>","Urgent Git help needed - lost most commits","<p>So I was working on a project and early on I accidentally detached from the Head, but I still kept commit etc. anyway. I then realized I was detached from the head, so I tried to do the following to reattach to the head:</p>

<pre><code>git log -n 1 (I copied the commit)

git checkout master

git branch (long hash I copied)

git merge tmp (here I realize I forgot to name the branch so I typed again:

git branch tmp (long has I copied)
</code></pre>

<p>i got a warning here about how the rename (long hash) is ambiguous, and Git normally never creates a ref that ends with 40 hex characters</p>

<pre><code>git merge tmp
</code></pre>

<p>here git said ""already up to date""</p>

<pre><code>git branch -d tmp
</code></pre>

<p>output: deleted branch tmp</p>

<p>after doing this, I was taken back to the state in which I was last attached to the head (wayyy back in my project).</p>

<p>Am I screwed? Or is there any way I can recover where I was at?</p>
","1","11634814","",""
"58926699","6521116","2019-11-19 04:35:12","2","1323","<git><git-commit><git-stash>","git apply multi stash at one time","<p>I have stash two times, and I need to commit the two stash in one commit.</p>

<p>I use <code>git stash apply</code> to apply the latest stash, but when I use it again, it throw below error,</p>

<blockquote>
<pre><code>error: Your local changes to the following files would be overwritten by merge:
        library/HQ/groupsql.sql
Please commit your changes or stash them before you merge.
Aborting
The stash entry is kept in case you need it again.
</code></pre>
</blockquote>

<p>How can I pop the two stash then commit them.</p>
","5","6521116","0","0"
"40150649","4620609","2016-10-20 09:33:43","2","968","<git><git-commit><git-detached-head>","How to commit files in detached head mode to a branch","<p>I ended up in a weird situation where I checkout a previous commit on my branch v4.1.0-rc12. I've modified some files around and I want to commit it to the v4.1.0-rc12 branch.</p>

<p>Now that HEAD pointer is in detached mode since I checked out a previous commit, how do I commit this changes to v4.1.0-rc12 branch in detached mode?</p>

<p>I wish I had done ""revert"" instead of ""checkout"" the commit hash.</p>

<p>Is there any possible solution to commit the edited files and add it to my v4.1.0-rc12 branch?</p>

<p>This is what my ""git reflog"" shows</p>

<pre><code> 441bfac HEAD@{0}: commit: Resolved #110
 dc00e4f HEAD@{1}: checkout: moving from v4.1.0-rc12 to dc00e4f
 2542748 HEAD@{2}: commit: Login &amp; SignUp revamp (Broken)
 dc00e4f HEAD@{3}: commit: Resolved #109 and #110
 4472914 HEAD@{4}: commit: Resolved #108
</code></pre>

<p>I want to save 441bfac to v4.1.0-rc12</p>

<p>Any help or notion would be appreciated.</p>
","0","4620609","",""
"21105402","1488917","2014-01-14 03:08:53","0","44","<git><github><git-commit>","Where did this extra text in the commit come from?","<p>While working on <a href=""http://github.com/AsheeshR/skin.flux"" rel=""nofollow noreferrer"">this repository</a>, the following statements (commented with <code>&lt;!-- ?? --&gt;</code>) got added to the <a href=""https://github.com/AsheeshR/skin.flux/commit/567421e2852bf7346c1d1e7f295e2a8010250772"" rel=""nofollow noreferrer"">commit</a> without our knowledge or any visible actions on our part. They seem to be <code>HEAD</code> and <code>SHA-1</code> of two commits. </p>

<pre><code>+&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &lt;!-- ?? --&gt;
17  17  
       &lt;!--&lt;texture&gt;icon-video-sml.png&lt;/texture&gt;--&gt;
18  18  ...
33  33  
       &lt;visible&gt;Container.Content(musicvideos)&lt;/visible&gt;
    34  
+======= &lt;!-- ?? --&gt;
    35  
+      &lt;texture&gt;icon-video-sml.png&lt;/texture&gt;
    36  
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; 987433c381cd8b8b459c569712c282f94dd430db &lt;!-- ?? --&gt;
34  37  
     &lt;/control&gt;
...
37  42  
       &lt;posy&gt;35&lt;/posy&gt;    &lt;!--to display info abt the folder in the videos window at the top right corner--&gt;
    59  
+&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &lt;!-- ?? --&gt;
54  60  
         &lt;visible&gt;Skin.HasSetting(homemenu-horizontal) | [!Skin.HasSetting(homemenu-vertical) + !Skin.HasSetting(homemenu-horizontal)]&lt;/visible&gt;
55  61  
         &lt;posy&gt;13&lt;/posy&gt;        &lt;!--prints ""(no of files)""--&gt;
    62  
+======= &lt;!-- ?? --&gt;
    63  
+        &lt;posy&gt;13&lt;/posy&gt;
    64  
+&gt;&gt;&gt;&gt;&gt;&gt;&gt; 987433c381cd8b8b459c569712c282f94dd430db &lt;!-- ?? --&gt;
56  65  
</code></pre>

<p>Screenshot:</p>

<p><img src=""https://i.stack.imgur.com/fiNIi.png"" alt=""""></p>

<p>Beyond this point, our codebase started performing erroneously (obviously) even after correcting the problem (<a href=""https://github.com/AsheeshR/skin.flux/commit/b236e5784d1deeb98a1f1f3565603256c9384728"" rel=""nofollow noreferrer"">removing these lines</a>). </p>

<p>So, what is this extra text? Where did it come from? What should we do about it?</p>
","0","1488917","",""
"40162876","4810639","2016-10-20 19:24:14","2","2658","<git><git-commit><git-reset><git-add><git-stage>","Undo Add Files in Git","<p>I had a bunch of files in the directory in git that weren't tracked. I made the mistake of doing <code>git add .</code> then <strong><em>committing and pushing</em></strong> the changes. How can I get back to where the files that were untracked before that commit are untracked again, but still in the directory (<code>git reset --hard</code> deleted all the files, not good for me, instead of untracking them again). I have my many files in different locations that need to be untracked, so <code>git reset &lt;FILE&gt;</code> won't work for me.</p>
","5","4810639","",""
"40165914","7050482","2016-10-20 23:09:02","0","235","<git><github><repository><push><git-commit>","Push new local project to exsiting remote Git","<p>I create a Git repo and pushed few commits to GitHub. Then I download this project manually (instead of using <code>git clone</code>). I started working like with new project. Now I want to push this local project to my existing remote repository. How can I do it?</p>
","1","7050482","",""
"23172343","1743189","2014-04-19 16:10:39","0","26","<git><git-commit><git-remote><git-add>","Can't remove files from remote repository","<p>I deleted some files from my local repository, and when I type git status it says they have been deleted but when I try to add them it says that they did not match any files. </p>
","0","1743189","",""
"4708645","128463","2011-01-16 22:52:16","285","180170","<git><vim><windows-xp><git-commit>","Vim for Windows - What do I type to save and exit from a file?","<p>Using Windows&nbsp;XP I accidentally typed <code>git commit -a</code> instead of <code>git commit -am ""My commit message""</code>, and now I'm viewing my CMD prompt filled with the file version of my commit message (""Please enter the commit message for your...""). I've added my message to the top, but now I can't figure out how to save and leave. I tried to press <kbd>Ctrl</kbd> + <kbd>W</kbd> + <kbd>Q</kbd>, but it doesn't do anything, but add <code>^</code> where the cursor is.</p>

<p>I also tried <kbd>Esc</kbd> first, and then <kbd>Ctrl</kbd> + <kbd>W</kbd> + <kbd>Q</kbd>, but it says <code>No write since last change (add ! to override)</code>.</p>
","2","128463","0","0"
"62047229","6026626","2020-05-27 15:45:51","0","93","<git><github><fork><git-commit>","Go back to original clone of repo","<p>I am working on an open source project. I've forked the repo and have been working with it.</p>

<p>I want to create a pull request for the work I've done but all I need to do know is update the readme with a link to my work.</p>

<p>It seems like I can't fork a repo multiple times and I can't figure out how to go back to the original commit when I first forked the repo.</p>

<p>How do I get the original repo I forked and just update the readme to create a pull request?</p>
","1","6026626","",""
"41788889","898042","2017-01-22 08:35:04","0","40","<git><github><version-control><open-source><git-commit>","How can I roll back to the very beginning a big open source project like Calibre?","<p>I use this software ""Callibre"" for ebook conversion and management, it is the best out there and open-source. I want to learn the inner workings of it and <strong>reverse engineer</strong> it. </p>

<p>Since it is on github, it must have an entire history of commits, who did what and when. </p>

<p><a href=""https://github.com/kovidgoyal/calibre"" rel=""nofollow noreferrer"">Callibre</a> has been in production for 7 years now, there must be a long history of commits, my only concern is how to roll it back to the very beginning and step through every major commit that added functionality?</p>
","0","898042","",""
"61018078","7360928","2020-04-03 18:18:18","0","273","<github><git-commit><git-reset>","Github Site shows deleted commit in the commit tab","<p>I am new to github commands and I am a bit confused about what I am doing.</p>

<p><a href=""https://i.stack.imgur.com/rABbe.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rABbe.png"" alt=""what github shows me I currently have""></a></p>

<p>I want to delete the ""MegaMan Game"" commit, revert all changes, and make it dissapear from github 
history. Following this other stack overflow question <a href=""https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git"">Delete commits from a branch in Git</a>, I ran the <code>git reset --hard HEAD ~1</code> command. The commit seems to be deleted judging by the <code>git log</code> command, but on the github website it still shows that the ""MegaMan Game"" commit is still there. Also in source tree happens the same thing. The commit still shows there.
I am a bit confused. Is the website wrong about the commits? Did I run the command wrong?</p>

<p>Here is an image with the exact commands and what git</p>

<p><a href=""https://i.stack.imgur.com/Z8FYL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Z8FYL.png"" alt=""enter image description here""></a></p>

<p>This is a noob question. I need help to undestand how this works.</p>
","0","7360928","",""
"23204114","1110590","2014-04-21 19:08:49","-2","289","<git><version-control><git-commit>","How to undo commits in git","<p>I have committed twice and have not pushed yet. How can I undo this like though I didn't do anything. I had always thought that this would reset it:</p>

<pre><code>git checkout master
</code></pre>

<p>but that didn't work. I also googled and found this post: <a href=""https://stackoverflow.com/questions/1338728/how-can-i-delete-a-git-commit"">Delete commits from a branch in Git</a></p>

<p>The post says that I can do </p>

<pre><code>git reset --hard HEAD
</code></pre>

<p>However, when I do a git status it's still saying I'm behind by 2 commits</p>
","4","1110590","",""
"23391366","1166931","2014-04-30 14:51:14","0","459","<git><git-commit>","How to move commit to master from another branch","<p>I have master branch and a developer branch. I did some work on developer branch, and now i want to commit my final work (final project) to master branch. How to do that?</p>
","0","1166931","",""
"43378906","3575047","2017-04-12 20:18:31","0","1330","<git><git-commit>","Adding an intermediate commit to simplify review","<p>I made a commit that includes the following changes:</p>

<ul>
<li>moved a large chunk of file <code>main</code> to a new file <code>aux</code></li>
<li>then, very minor edits to the content of <code>aux</code></li>
</ul>

<p>Unfortunately, this makes the commit hard to review on GitHub, because GitHub displays the diff as if the whole chunk was deleted and reinserted. Ideally the reviewer would only look at the very minor edits made to <code>aux</code> after the content move.</p>

<p>I would like to add an intermediate commit to simplify reviewing this change. The intermediate commit would simply duplicate <code>main</code> to <code>aux</code> (i.e., <code>aux</code> would be a copy of <code>main</code>). Then the next commit would remove the moved content from <code>main</code> and exhibit the minor changes to <code>aux</code>. Is this a good way of doing it, and if so, how should I go about creating this intermediate commit? Note that unfortunately I have already completed the change, and I would prefer not to redo the entire process.</p>
","2","3575047","",""
"61191145","12318088","2020-04-13 15:26:27","0","32","<git><git-commit>","Removing old commits but keeping recent commits","<p>Quite awhile ago I created a branch based off of a co-workers branch and started making some changes. Now, after making some changes for about a week it turns out there are some commits from early last week that we want to remove, but we want to keep some of the more recent commits.</p>

<p>For example, if the commit history looked like this:</p>

<pre><code>0123456 commit-information
6543210 commit-information
1029384 commit-information
1234567 commit-information
</code></pre>

<p>Where <code>0123456</code> is the oldest commit, and <code>1234567</code> is the most recent commit. Is there a way to delete the first two commits but keep the last two commits?</p>

<p>Edit: The first two commits and the last two commits do not depend on each other.</p>
","0","12318088","",""
"4981126","755","2011-02-12 22:48:01","299","100340","<git><git-commit><git-rewrite-history>","How to amend several commits in Git to change author","<p>I have made a series of commits in Git and I realise now that I forgot to set my user name and user email properties correctly (new machine).  I have not yet pushed these commits to my repository, so how can I correct these commits before I do so (only the 3 latest commits on the master branch)?</p>

<p>I have been looking at <code>git reset</code> and <code>git commit -C &lt;id&gt; --reset-author</code>, but I don't think I'm on the right track.</p>
","2","755","0","0"
"42130053","3282596","2017-02-09 06:48:58","1","1621","<git><git-rebase><git-commit><git-reset><git-revert>","Go to a previous commit, make changes and commit as new head","<p>It is a local only repository. No branches. Log shows</p>

<pre><code> HEAD-&gt;master A
 9812         B
 4578         C
</code></pre>

<p>I want to make the current working directory same as C, edit a few files, replace a few binary files (PDF) and make a new commit, say ModC. So, the new log will be:</p>

<pre><code> HEAD-&gt;master ModC
 7845         A
 9812         B
 4578         C
</code></pre>

<p>Seems simple. But I have struggled and have faced all kinds of branches, merges, rebases, resets!</p>

<p>What is the sure-shot, fool-proof way of achieving what I want to?</p>
","4","3282596","0","0"
"62326295","13277098","2020-06-11 14:06:34","0","32","<git><branch><git-merge><git-submodules><git-commit>","no easy way to merge a git mv?","<p>I have two repo:</p>

<p>App and Libs. Libs is a sub-module of App, so all my libs are like path: App/Libs/lib1 App/Libs/lib2 and so on. I had a library like App/libX and I did: </p>

<pre><code>cd App
git mv libX ../Libs/
</code></pre>

<p>I then did a commit in Libs, and another in App (to update the submodule). Everything seems working in this feature branch- let's call it: ft_branch. </p>

<p>I then wanted to merge these edits in my dev branch, I went in the dev branch of Libs and merged ft_branch into dev. No problem so far. I then went into App and tried a merge of ft_branch into dev, but now I have this error:</p>

<pre><code>CONFLICT (modify/delete): Libs deleted in ft_branch and modified in HEAD. Version HEAD of Libs left in tree at Libs~HEAD.
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>Any hint?</p>
","8","13277098","0","0"
"61374591","1187220","2020-04-22 20:31:05","1","15","<file><github><git-commit>","How can I restore an old file already committed/pushed in GitHub?","<p>I have a hobby project with many commits, and somewhere in the past I probably accidentally removed a file which is committed/pushed.</p>

<p>Is there a way to find / restore the file? (or getting the contents, it's a text file).</p>

<p>I don't know in which commit it has happened.</p>
","0","1187220","0","0"
"43606919","1849358","2017-04-25 09:37:06","10","5082","<git><rebase><git-commit>","git rebase - cannot change 'pick' to 'reword'","<p>I'm trying to change the commit message of a previous commit.  I'm trying to use <code>git rebase --interactive &lt;commit&gt;</code></p>

<p>Once I find the commit I am looking for in the VIM window, when I use the arrow keys to locate the sha1 for the commit, delete the word <code>pick</code> and start to type 'reword' or 'edit' only some of the characters print and the cursor will jump to different parts of the commit message.</p>

<p>What am I doing wrong?</p>
","3","1849358","0","0"
"42156971","7542959","2017-02-10 10:24:29","35","36038","<git><git-commit><git-push><git-pull><git-fork>","Git pull from someone else's fork","<p>We are two students working on our online repository (different repo) that is forked from a common upstream repo. </p>

<p>Let's say other student made Changes, Commits and Pushed to his repo on a specific branch. </p>

<ol>
<li><p>How do I pull these changes into my own local repository? </p></li>
<li><p>Do I need to commit and push those changes to my staged area?</p></li>
</ol>

<p>Thank you!</p>
","0","7542959","0","0"
"24806840","1860929","2014-07-17 14:50:52","3","2414","<git><git-commit><git-tag>","What is the advantage of using a git tag over an empty commit in git?","<p>This question arises more out of curiosity and not due to issues faced while using git.</p>

<p><code>git</code> allows you to make empty commits with <code>git commit -m ""message"" --allow-empty</code></p>

<p>You can also tag specific revisions using <code>git tag -a v1.4 -m 'my version 1.4'</code>.</p>

<p>For all practical purposes I can think of right now, like making a tag to signify an important commit, deploying a particular tag, creating tag to specify version bumps, we can create an empty commit with the same message and then use it instead of the tag. </p>

<p>So, what is the advantage of using tags over empty commits, and vice versa?</p>
","11","1860929","0","0"
"61395952","12287699","2020-04-23 20:00:50","1","206","<git><github><git-commit><merge-request>","Merge request sent from local branch to master while pushing some changes to local branch","<p>We have 5 branches Master, INT, QA, PROD-EXT, PROD-INT. 
Some changes were made in the QA server and the changes were pushed to the QA branch. Then Got an email saying ""pushed new commits to merge request"". We never requested for this to merge to master. </p>

<p>Changes are pushed to local branches everyday but it is strange that we saw merge requests similar to this only a handfull of times. In all cases we never requested to merge.</p>

<p>Commands used to push changes</p>

<pre><code>git status
git add changed-file
git commit -m ""file-a modified""
git push
</code></pre>
","0","12287699","0","0"
"24827270","971083","2014-07-18 14:21:27","3","3267","<git><branch><git-commit><git-checkout>","Newly committed Git branch is not showing","<p>I'm having an issue with Git, I've switched to a new branch and committed my changes but the new branch is not showing up in the list of branches.</p>

<pre><code>git checkout -b new-branch
git branch
 develop
 *new-branch
git commit -am 'new message'
git push -u origin new-branch
git branch -a
[here the new branch does not show]
git checkout origin/new-branch
error: pathspec 'origin/new-branch' did not match any file(s) known to git.
</code></pre>

<p>Is there a step I'm missing?</p>
","0","971083","",""
"25034705","543875","2014-07-30 10:39:50","2","540","<git><git-commit><todo><text-search>","How to print all TODO comments I ever added or edited during any git commit","<p>How can I list all TODO comments I ever added or edited within all commits of a git versioned project? I do not want to see everyone else's TODO comments.</p>

<p>The output should print all lines actually containing <em>my</em> TODO comments:</p>

<pre><code>\\TODO: This should be changed to something else
\\TODO I guess the bug hides here
\\ TODO I need to do something here
</code></pre>

<p>I do not want to just list the commits themselves as <code>git log -S TODO</code> does.</p>
","0","543875","0","0"
"25035243","57428","2014-07-30 11:07:08","2","335","<git><github><version-control><commit><git-commit>","How do I interpret and make use of Github commit pages?","<p>This is a really noob question. I found some code on Github and used part of it in my project and later I found a problem with that code and filed an issue on that project Github page and the maintainer fixed it and the issue now has a link to a ""commit"" page which looks something like this (from <a href=""https://github.com/openssl/openssl/commit/ced3d9158a7a8c676be504bb6cd3b5ffb7cc7f13"" rel=""nofollow noreferrer"">this page</a> - that is not the real one, but good to illustrate the problem):</p>

<p><img src=""https://i.stack.imgur.com/JtKSm.png"" alt=""What&#39;s going one here?""></p>

<p>and well, I guess that page contains the solution to my problem but I don't have a slightest idea of how to interpret it. There're lots of code highlighted with different colors and I just don't get what's going on.</p>

<p>How do I interpret such a commit page and make use of it?</p>
","0","57428","",""
"42367079","7593595","2017-02-21 12:14:08","1","196","<c++><git-commit><libgit2>","Is there a way how to count commits on remote repository using libgit2 in c++?","<p>I would like to count commits on a remote repository, because I want to compare it with the number of commits in my local clone. Is there a way how to get that count?</p>
","2","7593595","",""
"42367510","5032083","2017-02-21 12:34:47","1","32","<git><git-commit><git-checkout>","git - Recover commits that were deleted with checkout","<p>I was 2 commits ahead of Github. I did <code>git checkout</code> and these commits were deleted. I tried recover the files in .git folder to a previous version using the Dropbox history. I ran <code>git status</code> and showed that I was again 2 commits ahead, I got happy, commited and pushed to Github only to see that I didn't recover at all.  </p>

<p><strong>tl;dr</strong>: Lost 2 commits with git checkout</p>
","4","5032083","",""
"25039242","543875","2014-07-30 14:19:15","26","8337","<git><git-commit><todo><text-search>","How to list all my current TODO messages in a git repository?","<p>I want to see all TODO comments that <em><strong>only I</strong></em> wrote and that exist in the current code base that is git managed.</p>

<p><a href=""https://stackoverflow.com/questions/25034705/how-to-print-all-todo-comments-i-ever-added-or-edited-during-any-git-commit"">What I've got so far</a> is printing all TODO comments that I've ever created or modified during the complete git history: <code>git log -p --author=""My name"" -S TODO | grep ""\+.*TODO""</code></p>

<p>But this tool chain lists all TODO comments ever written, even those that I've already resolved and thus removed again from code.</p>

<p>What’s a suitable tool chain that can search the current code base line-by-line, check if it contains ""TODO"" and if this line was authored by me print those lines?</p>
","0","543875","0","0"
"61475666","3088045","2020-04-28 08:18:52","1","268","<git><git-branch><git-commit><git-detached-head><git-dangling>","How to git-commit from a branch to a detached HEAD?","<p>My <em>ref</em> <code>HEAD</code> points the branch <code>foo</code>, that points to the commit <code>123abc</code>; and I have some staged work.</p>

<p>How to <code>git commit</code> that work, moving the <code>HEAD</code> to the newly created commit, but <strong>without advancing the branch</strong>?</p>

<p>(hence: leaving <code>foo</code> point to <code>123abc</code>)</p>

<p>Is it possible to do it with a single <code>git</code> command?</p>
","6","3088045","",""
"23895399","1468585","2014-05-27 17:21:40","2","102","<git><git-commit>","Cannot change an old commit","<p>I am trying to change a commit that is 39 commits old (there is 39 commits ahead of this one).
I only need to change a few lines in only one file.</p>

<p>Here's what I have done thanks <a href=""https://stackoverflow.com/a/1186549/1468585"">to this question:</a></p>

<pre><code>git rebase --interactive e0ea83ac7c68df747705e3f39864cd4931416ae4^
</code></pre>

<p>I wrote <code>edit</code> instead of pick to the line next to this commit, inputed 'Control+X' on nano, typed ""Y"", then enter, and I got:</p>

<pre><code>⭑ shideneyu project/nuddz/public(master) ✔»git rebase --interactive e0ea83ac7c68df747705e3f39864cd4931416ae4^                                               [19:02:01]
Stopped at e0ea83a... Migrated every Reponse + ProvisionalReponse data to Answer
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue
</code></pre>

<p>Here is the problem: I cannot make the necessary changes since the version of the file is already too recent. The file that I got under my eyes is not the one that I had when I commited that commit. Indeed, that file under my eyes is the same than the most recent commit !</p>

<p>Maybe that there is an hint here, when I do git log, here is what I got:</p>

<pre><code>⭑ shideneyu ~/project/nuddz(02b5f2c) ✔»git log 
commit 02b5f2c9c4987d433329b172c9cda28bf74d9db8
Author: sidney &lt;shiden**@gmail.com&gt;
Date:   Mon May 12 15:20:01 2014 +0200

    Migrated every Reponse + ProvisionalReponse data to Answer

commit 75468d2a2dba8d06540781b6a13783610130eed8
Author: Alexis &lt;*****@yahoo.fr&gt;
Date:   Mon May 26 10:44:40 2014 +0200

    Moved debugger gem in developpment

commit 2ff563c63ce395f72b1f9acb4a0de7c0d64fb204
Author: Alexis &lt;*****@yahoo.fr&gt;
Date:   Fri May 23 19:30:31 2014 +0200

    Assets precompile before Heroku push

[...]
</code></pre>

<p>I truncated in purpose (too many records). I don't think that it is normal. The chronology (12 may is the most recent? How come the 26 May exists then if I want to change a commit that existed a dozen days ago if the recent changes exist?) is weird.</p>

<p>I aborted the rebase with <code>rebase --abort</code>, then looked on the differences of the different commits: I am right, I am not crazy, this is the truth, rebase didn't changed the local files to the version they should be 39 commits ago.</p>

<p>How can I make that change then? What should I do?</p>

<p>EDIT: I upload this screenshot which shows the differences while looking at the logs thanks to <code>gitk --all</code>, and visualizing the specific file with <code>cat Gemfile</code> while doing <code>git rebase --interactive e0ea83ac7c68df747705e3f39864cd4931416ae4^</code></p>

<p><img src=""https://i.stack.imgur.com/hXfgs.png"" alt=""enter image description here""></p>
","0","1468585","0","0"
"42417294","1559401","2017-02-23 13:36:06","75","75189","<git><git-submodules><git-commit>","Why does git fail to fetch specific valid submodule for a given commit and how to fix it?","<p>I have a <code>git</code> repo which has another one as a <code>submodule</code> dependency. In the root of my project (where the <code>.git</code>, <code>.gitsubmodules</code> etc. are) I called</p>
<pre><code>git submodule update
</code></pre>
<p>This failed with the following message:</p>
<blockquote>
<p>Fetched in submodule path 'src/framework', but it did not contain cc8c38e9d853491c672452d8dbced4666fc73ec8. Direct fetching of that commit failed.</p>
</blockquote>
<p>where <code>src/framework</code> is a sub-directory of my project (<code>PROJECT_ROOT/src/framework</code>) and should be where the third-party repo lands. The given commit hash is a valid one as in I can use to access that commit through the web interface.</p>
<p>I have also tried <code>git clone --recursive &lt;my-repo&gt;</code> but it fails too.</p>
<p>The contents of my <code>.gitmodules</code> is</p>
<pre><code>[submodule &quot;src/framework&quot;]
        path = src/framework
        url = git@gitlab-blah-internal.de:gh/framework.git
</code></pre>
<p>In addition to that I have to note the following important fact: due to recent updates in the <code>framework</code> repo my code breaks hence I really need to retrieve that specific version of it where things were working fine.</p>
","10","1559401","0","0"
"5526719","346440","2011-04-03 00:08:45","9","12206","<git><macos><bus-error><git-status><git-commit>","How do I fix 'bus error' when trying to do git-commit or git-status","<p>I have a git repository on an OS X server that used to work fine. I was able to add files, commit them, and pull the content to my laptop.</p>

<p>Now, when I ssh into the server and do <code>git commit</code> or <code>git status</code> in the repository, all I see in the command line is <code>bus error</code>. </p>

<p><code>git log</code> does still work properly and gives me the usual output.</p>

<p>I am guessing something is wrong with the repository, because in other repos on the same server both <code>git commit</code> and <code>git status</code> do still work.</p>

<p>How do I go about debugging / fixing this?</p>

<p><b>Update:</b> I re-created the directory I last created before the problem occurred. That allowed me to do <code>git status</code> again!</p>

<p>Running <code>git commit -a</code> directly after that, however, gave the following error:</p>

<pre><code>fatal: Unable to create '/path/to/repo/.git/index.lock': File exists.

If no other git process is currently running, this probably means a
git process crashed in this repository earlier. Make sure no other git
process is running and remove the file manually to continue.
</code></pre>

<p>I then manually deleted the index.lock file, and now the problem is solved..</p>

<p>I have no clue what has gone wrong. Any ideas..?</p>
","0","346440","0","0"
"62618097","485743","2020-06-28 04:06:43","0","98","<git><bitbucket><git-commit><tortoisegit><git-config>","Git config change issue: Cannot push commits because of server-side receive hook","<p>I did a Git Commit and then had to make some config changes (specifically a &quot;email&quot; related config)
So there seems to be some pre-commit hook/check added by my org which checks that the email address should match some specific value</p>
<p>Now I did update the &quot;email&quot; to the expected value and am trying to Push now. However, I am still getting the error (Also shows the earlier/old value);
Invalid Email for commits</p>
<p>If I go to Tortoise Git &gt; Settings and click Edit global .gitconfig, I see the updated value</p>
<p>If I do</p>
<pre><code>git config --list
</code></pre>
<p>from my project folder (from where I am trying to Push), I can see that it has the updated value
Also checked the .gitconfig in a couple of other places (Documents) and it also has the updated value.
My question is why is Git seeing the old value and not the updated value when I am trying to Push.</p>
<p><strong>P.S:</strong> I primarily use TortoiseGit, but I did try to run the &quot;git push&quot; command manually as well with the same issue.</p>
","1","485743","",""
"42436081","1463100","2017-02-24 10:18:27","12","1691","<git><git-commit><signing>","How does commit signing work?","<p>I am currently wondering how git commit signing exactly works.</p>

<p>Tried to find this out but could not find any exact technical documentation. I am aware how to do git commit signing but am wondering what exactly git does to sign a commit.</p>

<p>What exactly is it that is signed? Is it the full data inside the repository at the given commit, so the data like the commit message etc. and the data of all files? Or is it only the commit with pointers to the contained files etc?</p>
","3","1463100","0","0"
"43891105","1480090","2017-05-10 11:26:08","0","72","<git><github><visual-studio-2015><git-commit><git-extensions>","How to get a specific commit of a particular folder from a git repository while keeping rest of the folders as latest?","<p>Following is the exact scenario in my repository:</p>

<p>Folders:</p>

<ul>
<li>Respository

<ul>
<li>Project A</li>
<li>Project B</li>
</ul></li>
</ul>

<p>Developers are working on both the projects. After a while, we realized that we the developers have committed some unwanted and unexpected code in Project B. Now we need to rollback Project B to a specific commit (say, ""ai298349y"") and the developers are expected to work on that, while we want Project A to its current state (i.e., latest commit)</p>

<p>How can I achieve this in Git?</p>

<p>I am using Git extension in visual studio. Can anyone please suggest?</p>
","0","1480090","",""
"62633284","","2020-06-29 07:34:15","1","618","<git><github><git-commit>","Github Cannot get commit count in badge","<p>I have a repository and I'm adding following badge to the readme.</p>
<pre><code>[![GitHub commits](https://img.shields.io/github/commits-since/Naereen/StrapDown.js/v1.0.0.svg)](https://github.com/pawarashish564/AutoCompiler/commit/master)
</code></pre>
<blockquote>
<p>See this</p>
</blockquote>
<p><a href=""https://github.com/pawarashish564/AutoCompiler/commit/master"" rel=""nofollow noreferrer""><img src=""https://img.shields.io/github/commits-since/Naereen/StrapDown.js/v1.0.0.svg"" alt=""GitHub commits"" /></a></p>
<p>I changed the count url from my repository. Still it gets shows 45 . Total commits I have on my repository is 36. Please help me fix this.</p>
<p>thanks ✌️</p>
","5","","",""
"61636339","2095022","2020-05-06 13:23:04","0","33","<git><github><commit><git-commit>","All user commits across different branches","<p>I know that if we goto a github page like this:</p>

<p><a href=""https://github.com/probosckie/cssTreeShaking/commits?author=probosckie"" rel=""nofollow noreferrer"">https://github.com/probosckie/cssTreeShaking/commits?author=probosckie</a></p>

<p>we can get all the commits at a user level -> for a given repo. but it is only for master branch.</p>

<p>But how can we get all the commits by a user for a repo - across all branches?</p>

<p>Is there a git command for it or some github page?</p>

<p>Please help - i want to cherry-pick some commits i made today across few branches but i dont recall the branch names. It is only for 1 repo.</p>
","0","2095022","",""
"25323846","1929857","2014-08-15 09:03:38","1","49","<git><branching-and-merging><git-commit>","How can I make a single commit of specific branch from other pushed commits in Git?","<p>I am new to Git.</p>

<p>I have one main branch ""development"" in which all branches will be merged 
and I'm working on branch ""<code>TESST123</code>""</p>

<p>I have done three commits (using : <code>git commit -am ""comment""</code>) and pushed (using : <code>git push origin TESST123</code>) one by one, e.g.</p>

<pre><code>Commit 07834343kfjsd948343243....
Author myname
date thu aug 14 17:20:37 2014

Commit 34sdsad32432432dfdsf....
Author myname
date thu aug 14 15:12:52 2014

Commit dfasdsadkfjsd948343243....
Author myname
date thu aug 14 00:08:06 2014 
</code></pre>

<hr>

<p>How can I merge all those commits in a single commit in branch <code>TESST123</code> and then again push so the resulting branch will be with one commit containing all applied changes..</p>

<p>I have searched for squash but didn't understand it clearly.</p>

<p>If possible, try to answer with <code>git</code> command.</p>
","1","1929857","0","0"
"42915565","4296244","2017-03-20 23:04:43","0","398","<vim><git-commit><folding>","Stop vim from folding git commit","<p>Vim automatically folds my code when I open a new file. How can I stop it from folding the text when I run <code>git commit -a</code>, since I don't want folding only in this specific case?</p>

<p>I currently have this line in my code <code>setlocal foldmethod=syntax</code> to fold all code automatically.</p>

<p>I tried to add this line before and after setting the foldmethod <code>autocmd FileType gitcommit setlocal nofoldenable</code>, but it did not changing anything.</p>
","1","4296244","",""
"25327743","57428","2014-08-15 13:56:55","51","29359","<github><commit><git-commit>","What flow causes Github commits that are ""authored"" by one user but ""committed"" by another?","<p>For example, <a href=""https://github.com/openssl/openssl/commit/690a2b1fa2c8a7dba0be84dfc052d86b864bedc3"" rel=""noreferrer"">this commit</a> is claimed to be authored by <em>mattcaswell</em> and committed by <em>richsalz</em></p>

<p><img src=""https://i.stack.imgur.com/pFSwt.png"" alt=""enter image description here""></p>

<p>What usage flow could have caused this? Suppose I want a commit which is authored by someone else and committed by me to appear in a repo where I'm a contributor - how would I have that?</p>
","0","57428","0","0"
"62859240","7002766","2020-07-12 09:16:54","0","52","<git><git-branch><git-commit>","How did the following commands get me in detached head state?","<p>I've done some reading to try and understand how someone gets themselves into a detached head state (generally by trying to check out a commit and not a branch), but I'm unclear as to how my set of commands has ended up causing a detached head state (and would also like to know how I can keep the changes made on this branch/commit and move them to another branch that I can push). I ran the following:</p>
<p><code>git checkout - Feature/admin-dashboard</code> - initially i forgot to add the <code>b</code> after the dash, so then I ran:</p>
<p><code>git checkout -b Feature/admin-dashboard</code></p>
<p>Running <code>git reflog</code>, the last 3 logs show the following:</p>
<pre><code>ffc971a (HEAD, origin/feature/admin-dashboard, feature/admin-dashboard) HEAD@{0}: commit: Initial work
5a7a34b (master) HEAD@{1}: checkout: moving from master to Feature/admin-dashboard
5a7a34b (master) HEAD@{2}: checkout: moving from feature/email to master
</code></pre>
<p>I'm not really sure what this is telling me though, or how to get any useful information from it. Any help is greatly appreciated, thanks.</p>
","2","7002766","",""
"61665613","","2020-05-07 18:54:44","0","85","<git><git-commit>","Why is my HEAD ref failing to run on git?","<p>I know there are a lot of simiular issues that people have but my issue is a bit different. I don't know how but my standard built in Documents folder under my PC has a head reference to some weird branch that I know doesn't exist anymore. If it wasn't my built in Documents folder I would just copy all the files/folders in it and start a new one but I can't just delete and start a new one. So basically I need to find out how I can delete this head ref or make a new one. It's making it hard for me to start a new branch in a folder I am working on in Documents with the issue. </p>

<p>The following is a picture of my PC directory with an uncommitted symbol on the built in Documents folder. If you look down at the context menu at where it say's ""Git Commit ->"" there's some old branch I used only for a tutorial a year ago that doesn't exist anymore but I can't get it to go away. I believe I want to ref a new HEAD would be my solution but I don't know how. </p>

<p><img src=""https://i.stack.imgur.com/aVabW.png"" alt=""enter image description here""></p>
","2","","",""
"62871317","8324957","2020-07-13 07:44:00","-1","78","<git><github><git-branch><git-commit><git-fork>","How to remove commits that I pulled in from upstream/develop into feature-branch?","<p>I am really new to git.</p>
<ul>
<li>I forked <code>upstream/develop</code> sometime back.</li>
<li>Now I recently created a <code>feature-brach</code> on it to fix some stuff.</li>
<li>After fixing the bug. I've yet not commited the changes.</li>
<li>I pull from the <code>upstream/develop</code> to get the latest code.</li>
<li>Lo and behold. I get around 31 changes, previous commits the author made on the <code>upstream/develop</code>.</li>
<li>I have modified only 4 files.</li>
<li>My 4 files are also automerged at this point.</li>
<li>I only stage my 4 files and commit them.</li>
<li>Now in the PR its showing 21 commits in my branch and my commit below it.</li>
</ul>
<p>How do remove all those other commits from my feature-branch(they were pulled in from <code>upstram/develop</code>), also why are automerged changes are appearing in diff ?</p>
","0","8324957","",""
"5807137","378170","2011-04-27 16:06:09","1219","961128","<git><git-commit><git-reset><git-revert><git-clean>","How can I revert uncommitted changes including files and folders?","<p>Is there a Git command to revert all uncommitted changes in a working tree and index and to also remove newly created files and folders?</p>
","2","378170","0","0"
"5807274","378170","2011-04-27 16:17:01","1","190","<git-commit><git-branch>","Git - If we want to take a snapshot - should we Branch our should we Commit?","<p>Let's say I'm working on this thing, and I want to preserve this state, so that, if something goes wrong, I can revert to it. </p>

<p>According to this, it's not clear to me: </p>

<p>What should we do when on this situation: </p>

<p>commit or create branch ? </p>
","0","378170","0","0"
"25347802","3949615","2014-08-17 09:06:59","0","29","<eclipse><egit><git-commit>","Egit (local repository) and JavaEE : items don't seem in the index","<p>I am working alone with Eclipse (Kepler Service Release 2) and I am using Egit locally (the git repository is on my hard drive) mainly to benefit from versioning.</p>

<p>When I go to the ressources of the history view, I can only see this : </p>

<p><img src=""https://i.stack.imgur.com/8RXUC.jpg"" alt=""enter image description here""></p>

<p>the name of my project with a green plus and the yellow cylinder. I can't compare anything and I suspect I am not commiting anything.
I can't add items of my project (I mean classes, jsp, and others) to the index, neither could I remove them from it, although every item's got the cylinder.
I made another git, attached my project to it. Nothing I do seems to matter.</p>

<p>I guess I am missing something basic but my local unusual usage makes finding information harder. How can I really add my items to the index and compare them through different versions ?</p>
","2","3949615","",""
"42942095","6264176","2017-03-22 03:16:52","1","1063","<git><git-commit>","Git commit does not open Sublime in a repository","<p>I am taking the Git class on Udacity and have started getting an error when I try to do a git commit in the reflections repository.</p>

<p>Sublime is set as my core editor, and it has been opening when I use git commit.  But now, when I try to commit staged changes, I get this error message:</p>

<blockquote>
  <p>error: cannot spawn --help: No such file or directory<br>
      error: unable to start editor '--help'<br>
      Please supply the message using either -m or -F option.</p>
</blockquote>

<p>I have been able to commit changes to the same files in this repository in the past.  Git commit did open Sublime then.</p>

<p>I can still stage files in the repository.</p>

<p>I can still open Sublime Text 3 using the 'subl' command while in the reflections repository.</p>

<p>In other repositories, git commit still opens Sublime and I can commit normally.</p>

<p>I looked at the files in the .git directory in the reflections repository and this is a list of the files it contains:</p>

<pre><code>./   
COMMIT_EDITMSG  
description  
hooks/  
info/  
objects/   
refs/ 
../  
config          
HEAD         
index   
logs/  
ORIG_HEAD
</code></pre>

<p>The .git directory in the asteroids repository (where I can still commit normally) contains these files:</p>

<pre><code>./   
COMMIT_EDITMSG  
description  
hooks/  
info/  
objects/     
refs/
../  
config          
HEAD         
index   
logs/  
packed-refs
</code></pre>

<p>I have also searched the forums here, but similar questions all seem to be related to errors setting up the core.editor and/or subl alias, and I have not seen this particular error before.</p>
","0","6264176","",""
"44153124","1419127","2017-05-24 08:34:48","0","192","<git><git-submodules><git-commit><git-untracked>","Git submodule now listed as untracked","<p>I have a project with two submodules which I got from other people. I made modifications in both, but only one gets reported as modified and can therefore be staged for committing. The other one is in the ""Untracked files"" section. What did I break ? Both the .gitmodules files and the .git/config file contain the same information about both submodules (name, origin repo, etc ...). What other information must I provide ? Where else are submodules referenced by git ?</p>

<p>Thanks in advance.</p>
","2","1419127","0","0"
"43144262","6848233","2017-03-31 15:19:20","8","4873","<git><git-commit><git-config>","How can I undo commit template?","<p>I once added global commit temlate by command:</p>

<pre><code>git config --global commit.template .gitmessage.txt
</code></pre>

<p>Today I created my own repository and when I tried commit, I got error:</p>

<blockquote>
  <p>fatal: could not read '.gitmessage.txt': No such file or directory</p>
</blockquote>

<p>It's fine, because I don't create <em>.gitmessage.txt</em> file. I wouldn't have a template for this repo. And here comes the question: <strong>How can I undo global commit template?</strong> I can overwrite global commit template but I can delete thi configuration. </p>

<p>I was trying:</p>

<pre><code>git config --global commit.template """"
</code></pre>

<p>but i got similar error:</p>

<blockquote>
  <p>fatal: could not read '''': No such file or directory</p>
</blockquote>

<p>And when I run command </p>

<pre><code>git config --global commit.template
</code></pre>

<p>i got echo current template. Anyone can help me? </p>
","1","6848233","0","0"
"61866482","10270878","2020-05-18 09:29:04","2","349","<git><continuous-integration><continuous-deployment><git-commit><semantic-release>","Semantic-release: How to downgrade the major version that is already published to artifactory?","<p>Say, the previous release was done by squashing the commits. And including <code>BREAKING CHANGE</code> text at the end of the squashed commit message which released version <code>2.0.0</code>.</p>

<p>thereafter, a new patch release was done which published version <code>2.0.1</code>.</p>

<p>After this, a <code>feature</code> was pushed wherein we didn't decide to squash the messages so that semantic-release could decide which version number to bump it to using the commit message.
Technically it should have bumped it to <code>2.1.1</code></p>

<p>Instead it bumped it to <code>3.0.0</code> by considering all the skipped(squashed) commit messages meanwhile and published it to artifactory.</p>

<p>Now how can I downgrade my version to let's say back to <code>2.x.x</code>? either manually or using semantic-release.</p>
","0","10270878","",""
"44163775","1833945","2017-05-24 16:21:53","1","11386","<git><version-control><git-commit><git-push><git-add>","How to avoid to add the target folder into a GIT commit?","<p>I am not so into GIT and I have a doubt.</p>

<p>I have a project that is composed by these folders and file:</p>

<pre><code>$ ls
bin/  lock.lck  pom.xml  src/  target/
</code></pre>

<p>I know that doing:</p>

<pre><code>git add .
</code></pre>

<p>I am adding all the files in my staging area, so if then I commit and push on my remote repository I will put on this repository also the <strong>target</strong> folder.</p>

<p>I want to avoid this situation.</p>

<p>How can I avoid to add, commit and push the <strong>terget</strong> folder?</p>
","2","1833945","",""
"61868291","13566633","2020-05-18 11:12:52","2","1831","<git><repository><git-commit>","How to delete all the commits of a git repository before a particular commit date?","<p>I have a git repository with more than 1000 commits. Its 2 years old. I want to keep only the last 3 months data for which I want to delete all my commits before say 1st February 2020. I tried <a href=""https://stackoverflow.com/questions/4515580/how-do-i-remove-the-old-history-from-a-git-repository"">removing old history from a git repository</a> but it only deleted the older commits from my local machine not remotely. Also, it was deleting last n commits using HEAD~n not by date of commit.</p>
","4","13566633","",""
"7230820","558699","2011-08-29 13:31:59","991","541615","<git><githooks><git-commit>","Skip Git commit hooks","<p>I'm looking at a Git hook which looks for print statements in Python code.  If a print statement is found, it prevents the Git commit.</p>
<p>I want to override this hook and I was told that there is a command to do so.  I haven't been able to find it.  Any thoughts?</p>
","2","558699","0","0"
"25375679","432509","2014-08-19 04:27:58","8","1515","<git><git-commit><git-rewrite-history><git-amend>","Git amend/reword (without adding/changing files)","<p>Often I want to edit a commit message without having to re-select the file-set from the last commit.</p>

<pre><code>git commit file1.c file2.c
</code></pre>

<p>Accidental typo in commit message.</p>

<pre><code>git commit file1.c file2.c --amend
</code></pre>

<p>This works, but Id like not to have to re-select the file-set from the original commit, I once accidentally did <code>git commit -a --amend</code> and added many changes unintentionally.</p>

<p>I know about <code>git rebase -i HEAD~1</code> then replace <code>pick</code> with with <code>r</code> (re-word), but this ends up being a few steps.</p>

<p>Is there a way to re-word the last commit in one step without including any new files?</p>
","2","432509","0","0"
"25381894","3921285","2014-08-19 11:10:20","-1","100","<github><git-commit>","Why git command commit doesn't work on github.com?","<p>After making some changes and typing required add commands, I executed <code>commit</code>. If I check git log I can see that commit has worked but when I check the repository on <a href=""https://github.com/"" rel=""nofollow"">Github</a> I don't see any of the changes I've done. What am I doing wrong?</p>

<p>Thanks</p>
","3","3921285","",""
"7239333","671391","2011-08-30 06:12:08","383","657643","<git><git-branch><git-commit>","How do I commit only some files?","<p>I have two projects. One is the ""official"" project and the second is a light modification (some files added). I created new branch and I put new files to them. But in during development some files common to both branches is changed.</p>

<p>How do I commit only these files?</p>
","4","671391","0","0"
"43172394","1163286","2017-04-02 19:07:34","0","1013","<java><eclipse><git><jar><git-commit>","How to log the latest git commit hash in Eclipse?","<p>I am new to Git. I have developed an app in Java. The app logs every information in a text file during the execution. I have committed the application using Git. Now I want to print the latest Git commit hash value in the log file.</p>
<p>E.g.: Inside <strong>mysteps.log</strong> file:</p>
<p>Start of logging...</p>
<p><a href=""https://i.stack.imgur.com/j0wsm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/j0wsm.png"" alt=""enter image description here"" /></a></p>
<p>Please instruct me how to achieve this? Thanks in advance.. :)</p>
","0","1163286","",""
"62905154","13932050","2020-07-14 22:54:36","2","97","<git><git-commit><git-push>","Commit unstaged deleted files","<p>I have lost some of my local files, but I still have them in my unpushed &quot;commit&quot;. When I try to &quot;git push&quot; them, &quot;Writing objects&quot; is stuck on 20%.</p>
<p>From what I have seen, my commit is perhaps too big to be pushed and <code>http.postBuffer</code> didn't fix it, so I was thinking of splitting my commit into several parts.</p>
<p>I have tried the <code>git rebase -i master</code> command, but I get the <code>Cannot rebase: You have unstaged changes.</code> message.</p>
<p>Since my files are deleted, I can't really do a 'commit' since it will overwrite the existing files in my commit with the deleted ones. Is there a way to push the files?</p>
","2","13932050","",""
"43173399","6525347","2017-04-02 20:50:47","-1","217","<android><git><android-studio><bitbucket><git-commit>","Cannot commit Android Studio Project to Bitbucket - ""Home Variable is Not defined""","<p>I'm trying to commit a project to Bitbucket and I'm getting this error:
<img src=""https://i.stack.imgur.com/O1rJb.png"" alt=""Error Message""></p>

<p>Anyone knows, what I should do? </p>
","3","6525347","",""
"43177928","7017534","2017-04-03 06:34:57","-4","45","<git><git-commit><git-pull>","How can i pull single file (myfile.php) on server?","<p>I make some changes in my locally file with php extension (myfile.php) and i want to pull my file into server. I already use this command :</p>

<ul>
<li>git commit yourfile.js</li>
</ul>

<p>but i have an error like this ""error: pathspec 'function.php' did not match any file(s) known to git."" </p>

<p>I'll be glad for any help. Thanks .</p>
","5","7017534","",""
"6085029","743534","2011-05-21 23:16:49","0","85","<git-push><git-checkout><git-commit><git>","Is this possible with Git?","<p>I want my git repo to be at the state it was at a specific commit. Once the repo is at the state, I want to be able to push to Github, making the remote be at that state. I know I can call <code>git checkout &lt;commit hash&gt;</code> and my local repo will be at the state it was at the given commit, but it won't let you push.</p>

<p>I'm guessing that I should do something with <code>git checkout</code> but I don't know what to do.</p>

<p>Thanks for any help on this simple question :)</p>
","0","743534","",""
"25642821","1420197","2014-09-03 11:09:59","6","5382","<git><date><git-commit>","Is it possible to get the time/date of a commit knowing the commit hash but without access to the repository?","<p>Supposing that I have the commit hash but I don't have any access to the git repository, is it possible to get the time when the commit was made?</p>

<p>How can this be done?</p>

<p>According to <a href=""https://stackoverflow.com/a/8873188/1420197"">this answer</a>, the commit hashes contain dates and times when they were done.</p>

<p>Example:</p>

<p><code>1484e89060b2043be0b71209bacc2254161f1a8f</code> was made on <code>Wed Sep 3 09:30:59 2014 +0300</code>.</p>
","5","1420197","0","0"
"63137829","2883500","2020-07-28 15:36:08","1","219","<linux><git><git-commit><git-diff>","Git successfully stages file but fails to commit the file","<p>Git successfully stages the files via <code>git add</code> (they show up under &quot;Changes to be committed&quot;), but when I run <code>git commit -m &quot;commit message&quot;</code> and friends, the command silently fails (<code>echo $?</code> displays <code>1</code>) and my files are still sitting there listed as &quot;Changes to be committed&quot;...</p>
<p>Other similar questions suggested things such as:</p>
<ul>
<li>The <code>.git</code> file potentially being corrupted, with the solution being to re-clone into a separate directory, copy changed files there, and re-attempt the add/commit cycle. This did not help.</li>
<li>There being some sort of permissions issue with the files, and to <code>chmod 755</code> before retrying. This was not relevant for me as the files were already <code>0755</code>.</li>
<li>Restarting the computer. I actually did try this (cuz who knows) but it did not help.</li>
</ul>
","0","2883500","",""
"61912556","6648103","2020-05-20 11:58:49","2","1253","<eclipse><gitlab><git-commit><egit><git-push>","Unable to fetch the New branch in Eclipse Git Remote Tracking for one machine","<p>I have an Eclipse Project which is maintained in git. After the first commit, yesterday I added new files directly to the master branch (which I later realized was wrong, and should have created a local branch). Today I tried to create a local branch on two machines and tried to push the codes on the respective machines.</p>

<p><strong>STEPS</strong>:</p>

<ol>
<li>Created a new branch in git</li>
<li>Eclipse - Git repository - Fetch from Upstream - added the new branch</li>
<li>Switched to the new branch
and checked out</li>
<li>Making new changes to the code</li>
</ol>

<p>On one machine I could go through these steps smoothly. I am getting stuck on the other machine at #2. I am unable to find the <em>Fetch from Upstream</em> option. I only see <em>Fetch from origin</em>, and when I click on that, system prompts ""No ref to fetch"".</p>

<p><a href=""https://i.stack.imgur.com/Rj828.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rj828.png"" alt=""Fetch from origin""></a></p>

<p><a href=""https://i.stack.imgur.com/7HvTj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7HvTj.png"" alt=""No ref to fetch""></a></p>
","0","6648103","0","0"
"43399959","5848294","2017-04-13 19:08:55","0","65","<git><github><intellij-idea><commit><git-commit>","commiting to GitHub on IntelliJ-idea","<p>When I try to commit, the intellij show this error message:
<a href=""https://i.stack.imgur.com/pRGPr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pRGPr.png"" alt=""enter image description here""></a></p>

<p>That is only solved when I change the name of the folders in the local directory writing wrong like in pathspec <code>Gere^encia</code>, then the intellij-idea does the commit without error, but the commit doesn't go to the remote directory. The problem seems to be with the brazilian portuguese language, or with something in the encoding, but I tried everything, search on the web and nothing solved my problem. </p>

<p>If someone could give a little help I would appreciate.</p>
","0","5848294","0","0"
"43412941","7726272","2017-04-14 13:51:09","2","991","<git><jenkins><jenkins-plugins><git-commit><git-checkout>","Why does jenkins build from multiple commits when it shouldn't?","<p>I have a parameterized job in jenkins. What it does it receives a git hash and then runs a checkout by commit hash (commit hash in the branches parameter). The problem is when jenkins will be offline for some time and in the meantime new commits will be pushed to the repo. When Jenkins is online again, receives a commit hash and when it is supposed to build this one commit, it takes all the commits that were'nt built in the meantime despite that only one hash was passed into checkout. </p>

<p>Why does that happen and how can that be avoided? </p>

<p>EDIT: Here's the job log:</p>

<pre><code>[Pipeline] node
Running on master in /var/lib/jenkins/workspace/tester
[Pipeline] {
[Pipeline] stage (CHECKOUT)
Using the ‘stage’ step without a block argument is deprecated
Entering stage CHECKOUT
Proceeding
[Pipeline] checkout
&gt; git rev-parse --is-inside-work-tree # timeout=10
Fetching changes from the remote Git repository
&gt; git config remote.origin.url http://testrepo.git # timeout=10
Fetching upstream changes from http://testrepo.git
&gt; git --version # timeout=10
&gt; git fetch --tags --progress http://testrepo.git +refs/heads/*:refs/remotes/origin/*
&gt; git rev-parse &lt;mycommithash&gt;^{commit} # timeout=10
Checking out Revision &lt;mycommithash&gt; (detached)
&gt; git config core.sparsecheckout # timeout=10
&gt; git checkout -f &lt;mycommithash&gt;
&gt; git rev-list &lt;someotherhash&gt; # timeout=10
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
</code></pre>
","8","7726272","",""
"62138813","13660500","2020-06-01 18:43:15","-1","31","<git><git-commit>","error while putting correct git commit commands","<p>Can you outline why I am receiving this message in git commit despite correct codes. I have tried all the alternatives and even restarting it again but no positive responses.
Here's the error <a href=""https://i.stack.imgur.com/cr9zd.png"" rel=""nofollow noreferrer"">https://i.stack.imgur.com/cr9zd.png</a></p>
","0","13660500","",""
"25688066","3856173","2014-09-05 14:21:08","4","2566","<git-branch><git-commit><git-stash><github-for-mac><git-status>","Git-branch switching all the uncommited changes are gone","<p>I have made so many changes in so many files in my local git repo.</p>

<p>But when I switched the branch using mac Git-Client without committing changes a warning window came saying there are uncommitted changes so its going to abort the operation.</p>

<p>I thought I couldn't switch to other branch without committing. But what happened is all my changes are simply gone away. </p>

<p>I saw the status using <code>git status</code> terminal and its response was </p>

<blockquote>
  <p>On branch branchname Your branch is up-to-date with 'origin/branchname'.</p>
  
  <p>nothing to commit, working directory clean</p>
</blockquote>

<p>I tried to know if Git-Client stores it as stash using <code>git stash</code> and the response was</p>

<blockquote>
  <p>No local changes to save</p>
</blockquote>

<p>I couldn't recover the uncommitted changes of that branch!</p>
","0","3856173","",""
"43421502","4614493","2017-04-15 02:18:01","1","352","<git><bash><commit><git-bash><git-commit>","Update Author Name in all Commits in git after particular date","<p>I tried it but could not find how can I compare GIT_COMMITTER_DATE with some specific Date to update author and committer email.. This is what I have tried but I need to add date comparison in if conditions extra to update particular commits otherwise it's picking up very old commits too..</p>

<p>Here AFTER_DATE is date after which I want to update author email..</p>

<pre><code>git filter-branch --env-filter '
NAME=""Kautsya Kanu""
WRONG_EMAIL=""kauts_kanu@Kautsyas-MacBook-Pro.local""
CORRECT_EMAIL=""example@gmail.com""
AFTER_DATE=""2017-03-31""
if [ ""$GIT_COMMITTER_EMAIL"" = ""$WRONG_EMAIL"" -a ""$GIT_COMMITTER_NAME"" = ""$NAME"" ]
then
export GIT_COMMITTER_EMAIL=""$CORRECT_EMAIL""
fi
if [ ""$GIT_AUTHOR_EMAIL"" = ""$WRONG_EMAIL"" -a ""$GIT_AUTHOR_NAME"" = ""$NAME"" ]
then
export GIT_AUTHOR_EMAIL=""$CORRECT_EMAIL""
fi' --tag-name-filter cat -- --branches --tags
</code></pre>
","0","4614493","",""
"25956344","1748919","2014-09-21 06:09:08","0","600","<github><visual-studio-2013><commit><git-commit><checkin>","Visual Studio 2013 GitHub Commit Trouble","<p>I use GitHub for my MVC 4 project on Visual Studio. But some pages that I've added, I can't commit to GitHub.</p>

<p>You can see on the image, there are lock symbols for check-in, but others have not. I can commit the pages with lock symbols but I can't commit without lock symbol. How can I fix it? How can I commit these pages to GitHub?</p>

<p><img src=""https://i.stack.imgur.com/FSnrK.jpg"" alt=""enter image description here""></p>
","0","1748919","",""
"63427029","3360864","2020-08-15 14:18:09","1","863","<git><visual-studio><github><git-commit>","Git commit gone from VS 2019: what happened?","<p>I recently updated VS 2019 to 16.7.1.</p>
<p>Now I wanted to commit changes to my local repo and to the github repo.</p>
<p>But alas: the commit is gone from the solution pull-down. I only have a git option (with &quot;undo changes&quot;, &quot;history&quot; and &quot;Blame&quot;): like &quot;read only&quot;.</p>
<p>I have a lot of red marks beside files, so they still have to be committed. But I can't. The option is not there.</p>
<p>Installed Github extension is GitHub.VisualStudio   2.11.102.28613</p>
<p>Sound familiar? What can I do?</p>
","2","3360864","",""
"25959212","805357","2014-09-21 12:33:26","2","502","<git><git-commit><git-stage>","Git stage and commit - what happens to uncommitted files upon reverting?","<p>Suppose I have five modified files, and I stage two of them for commit (let's call this commit A). Then I still have three uncommitted changes which are left for future commits. Now suppose sometime in the future I decide to revert my working directory to commit A, what would be state of the files that were not staged for commit into A, but were modified nonetheless. Would those changes be lost?</p>
","3","805357","0","0"
"25963039","621033","2014-09-21 19:30:42","3","1819","<git><github><git-commit><git-pull>","How to exclude a commit from git pull request?","<p>I have made a git pull request with my repo. Sometime later, before pull request got approved, I proceeded to make another commit&amp;push which also got pushed up to pull request.</p>

<p>Is there a way to remove the last commit from pull request and how to prevent this from happening in the future?</p>
","0","621033","0","0"
"63439030","5117267","2020-08-16 16:01:52","0","159","<git><git-merge><git-branch><git-commit><git-log>","Git reset HEAD~1 goes to the wrong commit","<p>I read about commits, parents, and ancestors. To get more clarification, I tried to experiment with it and created a test git repo. My goal was to merge 3 branches into the master branch to understand how parents and ancestors differ. The following screenshot is the <code>git log</code> prettified.</p>
<p><a href=""https://i.stack.imgur.com/w12ZK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/w12ZK.png"" alt=""enter image description here"" /></a></p>
<p>As we can see in the log, the merge commit <code>44f1883</code> seems to have three parents i.e. <code>4385eae</code>, <code>7288d94</code> and <code>ee647fe</code>. I don't understand why doesn't it have <code>98c9d28</code> as it's parent as well. I think <code>98c9d28</code> should have been it's the immediate parent so that if from <code>master</code>, I run <code>git reset HEAD~1</code>, it should land me at commit <code>98c9d28</code> which is the state before I did merge but unfortunately, it lands me at <code>4385eae</code> which logically is incorrect(although correct from the log perspective).</p>
<p>Am i missing something?</p>
","1","5117267","",""
"63439299","10870007","2020-08-16 16:27:02","0","1282","<git><macos><github><git-commit>","Getting ""env: bash\r: No such file or directory"" I am using Mac terminal and having this issue while doing git commit","<p>I am new to programming and have created a repository on Git. I am trying to add my project folder to Git repo. In order to that, I am using the following set of commands:</p>
<pre><code>   git init
   git add .
   git commit -m &quot;message&quot;
</code></pre>
<p>However, on performing &quot;git commit&quot; I am getting env: bash\r: No such file or directory. I tried to search for a solution and found this: <a href=""https://github.com/clean-docker/Magento2/issues/27"" rel=""nofollow noreferrer"">https://github.com/clean-docker/Magento2/issues/27</a>. Even after performing the steps mentioned in the link. It is not working for me.</p>
<p>Attached is the screenshot for reference.
<a href=""https://i.stack.imgur.com/KHcZg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KHcZg.png"" alt=""enter image description here"" /></a></p>
<p>I posted this question before and it has been marked as duplicate but I am not able to resolve it with the solution provided on Stack overflow. Please help and put comments if you need more information.</p>
","7","10870007","0","0"
"63439552","669586","2020-08-16 16:48:49","2","305","<git><git-branch><git-commit>","Git - rewrite commit authors when pushing to mirror repository","<p>We have a git repository. There is branch <code>A</code> and there is branch <code>B</code>. They have the same contents.</p>
<p>New commits are added to branch <code>A</code>.</p>
<p><b>The problem:</b></p>
<p>Create a script that takes all new commits from branch <code>A</code>, apply them to <code>B</code> and change their commit author. The script can have the first new commit as a parameter.</p>
<p>Branch <code>A</code> shouldn't change.</p>
<p>I know how to change the commit authors using <code>git filter-branch</code> but once I do that, I won't be able to merge <code>A</code> to <code>B</code> again.</p>
<p>I tried to cherry pick the commits using <code>git cherry-pick $COMMIT..A</code> but that breaks on merge commits.</p>
<p>Is there some possibility to take the new commits and reapply them on branch them <code>B</code> automatically?</p>
<p><b>Why we need it</b></p>
<p>I have a project which is stored in a Git repo. Periodically, we have to also push to customer repository (about once a week), which triggers automatic builds. Unfortunately, we cannot work with customer repo directly, because it's accessible only from their intranet. That means every push to their repository is usually composed from tens of commits from different authors.</p>
<p>The problem is that last week their IT enabled the Verify Committer hook. This hook enforces the rule that a developer can push only their own commits. The customer is a big enterprise company and the setting won't be changed. Therefore, we will have to rewrite commit authors before pushing.</p>
","9","669586","",""
"62382501","4948798","2020-06-15 06:25:14","5","4792","<git><github><git-commit><git-lfs>","Remove files larger than 100MB from commit history - migration to Github failing","<p>I am trying to Migrate one project from GitLab to GitHub. The repository size is 685.83MB and it consists of few <code>.dat,.csv,.exe,.pkl</code> files which are more than 100MB to 3383.40 MB. it is failing with below errors.</p>
<pre><code>GitLab To GitHub Migration Steps:-
$ git clone --mirror git@your-gitlab-site.com:test/my-repo.git
$ cd my-repo.git
$ git remote set-url --push origin git@github.com:test/my-repo.git
$ git push

Error
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File Src/project/label/file1.dat is 476.32 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File Src/models/label/file2.dat is 2431.49 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File test/test1/label/model/file3.exe is 1031.94 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File test/test2/usecase/filemarker/file3.csv is 997.02 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File src/msg/sports/model.pkl is 3383.40 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File test/movie/maker/marker.dat is 1373.45 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File project/make/level/project/realmaker.csv is 1594.83 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
remote: error: File src/moderm/network/test.pkl is 111.07 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB

Git LFS/BFG  Method:
$ git clone --mirror gitlab-heavy-repo 
$ cd gitlab-heavy-repo.git 
$ java -jar bfg-1.12.5.jar --convert-to-git-lfs '*.dat' --no-blob-protection
$ java -jar bfg-1.12.5.jar --convert-to-git-lfs '*.exe' --no-blob-protection
$ java -jar bfg-1.12.5.jar --convert-to-git-lfs '*.csv' --no-blob-protection
$ java -jar bfg-1.12.5.jar --convert-to-git-lfs '*.pkl' --no-blob-protection
$ git reflog expire --expire=now --all &amp;&amp; git gc --prune=now
$ git lfs install
$ git remote set-url origin git@github.com:some-org/githubheavy-repo.git
$ git push 
</code></pre>
<p>Even after above process, it fails with same error. it seems Git LFS have 2GB Limitation. So tried to remove the above larger files completely from repository. Followed below method to remove.</p>
<pre><code>1) git clone gitlab-heavy-repo
2) cd gitlab-heavy-repo
3) git filter-branch --force --index-filter &quot;git rm --cached --ignore-unmatch Src/project/label/file1.dat&quot; --prune-empty --tag-name-filter cat -- --all
4) git reflog expire --expire=now --all
5) git gc --prune=now
6) git push origin --force --all
7) git push origin --force --tags
8) rm -rf .git/refs/original/
</code></pre>
<p>Repeated the same steps for all the above larger files. But now in Gitlab repository storage size shows - <code>1.9-GB</code> initially it was only <code>685.83MB.</code></p>
<p>Please correct me. Thanks in advance.</p>
","0","4948798","0","0"
"6635458","586707","2011-07-09 14:48:02","9","6851","<git><git-commit><git-index>","What is the difference between the working directory and the git Index?","<p>The <a href=""http://book.git-scm.com/index.html"" rel=""noreferrer"">git book</a> defines the git index:</p>

<blockquote>
  <p>The Git index is used as a staging
  area between your working directory
  and your repository. You can use the
  index to build up a set of changes
  that you want to commit together. When
  you create a commit, <strong>what is committed
  is what is currently in the index, not
  what is in your working directory</strong>.</p>
</blockquote>

<p>But I am still having a difficult time understanding it, especially the highlighted statement that ""what's committed is <strong>not</strong> what's in my working directory"".</p>

<p>So far, in my limited working with git, <em>everything</em> in the working directory is <em>always</em> committed, if I do:</p>

<pre><code>git add &lt;all new files in the working directory&gt;
git commit -a -m ""git will refuse to commit without this comment"" 
</code></pre>

<p>git then commits <em>all</em> modified files as well as <em>all</em> new files.</p>

<p>So, in effect, my working directory <em>is</em> the staging area?</p>

<p>I am not sure then what the <code>git index</code> is and how it is interpreted as the staging area.</p>

<p>Could you please explain?</p>
","0","586707","0","0"
"6636146","586707","2011-07-09 16:54:38","2","111","<git><git-branch><git-commit>","Undo a git commit + git branch <branchname> -- with a twist","<p>I am in the process of ""documenting in hind-sight"" the history of an application development, by moving existing snapshots of the project's directory tree (that were saved back then by plain &amp; primitive folder copies, not git or any other version control) to git.</p>

<p>After struggling with learning git's new concepts and new terminology, this migration process seemed to have been going well when, all of a sudden I discovered: ""Oops... my last <code>git commit</code> + <code>git branch &lt;branchname&gt;</code> skipped one snapshot.""</p>

<p>Since the order of committing the snapshots is important to me, I would like to completely undo the last <code>git commit</code> + <code>git branch &lt;branchname&gt;</code>, <strong>as if it were never done</strong>.</p>

<p>That is, ""fixing by modifying a commit"" as defined at the bottom of the <a href=""http://book.git-scm.com/4_undoing_in_git_-_reset,_checkout_and_revert.html"" rel=""nofollow"">Undoing in Git</a> chapter in the Git book.</p>

<p>Everything is still local (I didn't ""publish"" nor did I ""push"" anything yet), so I believe this is in line with the warnings about ""rewriting history"". :)</p>

<p>Could you please confirm or correct the following steps required per my understanding?</p>

<ol>
<li>Empty the working directory (without
deleting the <code>.git</code> subdirectory, of
course)</li>
<li><code>git checkout &lt;folder-name&gt;</code>
(bringing working directory back to
the state it were immediately after
I committed the wrong folder and
tagged it via git branch)</li>
<li><code>git branch -D
&lt;branchname-of-mistaken-folder-commit&gt;</code></li>
<li><code>git commit --amend</code></li>
</ol>

<p>At this point I expect that git to no longer remember that the last branch and commit <strong>have ever been done</strong>, and the working directory contain the mistaken folder (which I will be deleting, replacing completely by the one I skipped). Is this correct?</p>
","4","586707","",""
"24854021","229792","2014-07-20 19:19:59","2","804","<git><concurrency><git-commit><git-checkout><git-add>","Concurrent git checkout/add/commit","<p>I am developing an application which uses Git as a database. My current approach is to call out to the <code>git</code> shell command to construct a new commit whenever the application changes something. This is very simple, but a big disadvantage is that it does not allow any concurrent writes to the database: two threads cannot construct a commit simultaneously, because there is a single <code>HEAD</code>, a single <code>index</code>, and a single working copy.</p>

<p>However, since commits, trees, and blobs are all content-addressed, I think it should be possible to construct all of these concurrently. What would be the recommended approach for this? Perhaps:</p>

<ul>
<li>command line flags to <code>git add</code>, <code>git commit</code>, etc., which explicitly specify a different <code>HEAD</code> and <code>index</code> file to use. As far as I can see, such things do not exist.</li>
<li>using git plumbing commands for all operations. However, I am not an expert with them and am not totally sure which are thread-safe.</li>
<li>a Git service, to which one can connect a la traditional database connections, which would provide transactional, concurrent access to a Git repository. As far as I can see, such a thing does not exist. I have considered writing one.</li>
<li>giving up and doing a <code>git clone</code> to get an entirely new working copy for each concurrent user. This is inordinately expensive.</li>
</ul>
","0","229792","0","0"
"43669388","1798928","2017-04-27 23:15:17","4","12064","<xcode><git><github><commit><git-commit>","How do I restore from a previous commit on Xcode 8?","<p>Let's say I have 5 local commits:</p>

<ul>
<li>commit 1</li>
<li>commit 2</li>
<li>commit 3</li>
<li>commit 4</li>
<li>commit 5</li>
</ul>

<p>At this point when I'm working, I'd like to go back to commit 2.</p>

<p>How would I do so?</p>

<p>This was so easy using snapshots in previous versions of Xcode.</p>

<p>""Discard changes"" only goes back to commit 5, right?</p>
","0","1798928","",""
"24857391","636398","2014-07-21 03:38:54","1","662","<git><git-commit><git-log>","List all commits that change specific lines in a specific commit","<p>Suppose a commit X changes line 500 of the file foo.java. I want to see all the past commits that have changed this line.</p>

<p>Inspired by <a href=""https://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file"">this thread</a>, I understand that since git 1.8.4, we can use the <code>-L</code> option of <code>git log</code> to view the evolution of a specific line range. So I use <code>git log -L 500,500:foo.java</code></p>

<p>However, I got a error saying </p>

<blockquote>
  <p>file foo.java has only 450 lines</p>
</blockquote>

<p>I suspect that the reason is that my <code>git log</code> command operates on the HEAD. But between commit X and HEAD, the file foo.java has been modified and ended up with only 450 lines.</p>

<p>So, how can I get all the commits that have changed this line 500 from commit X?</p>
","0","636398","0","0"
"43673264","7787863","2017-04-28 06:18:46","0","168","<git><git-commit><git-add>","Hide/Encrypt part of file in Git","<p>I have version control with Git over the configuration files of a server. A file (namely <a href=""https://github.com/gogits/gogs/blob/master/conf/app.ini"" rel=""nofollow noreferrer"">app.ini</a> from <a href=""https://gogs.io/"" rel=""nofollow noreferrer"">Gogs</a>) requires the database user and password to be stored in cleartext.</p>

<p>Is there any way to transparently commit the file without the password being visible to other users of the Git repository? I could use <code>git add --patch</code> while staging, but I want it to be transparent so the other users (and I) don't have to pay attention to do it in every commit.</p>
","4","7787863","",""
"26001111","2022072","2014-09-23 17:23:19","1","790","<git><git-commit><smartgit>","Failed commit in SmartGit","<p>I did a commit (&amp; push) in SmartGit but I was not connected to the internet. It is represented by a red cross in SmartGits ""Output""-window. The text reads: Unable to access '<strong>_____</strong>': could not resolve host: '<strong>_____</strong>'. After this I did a successful commit of some other files and a successful push.</p>

<p>Do I need to fix something? Will the failed commit that happened earlier mess things up or is everything ok?</p>
","1","2022072","",""
"44758549","989512","2017-06-26 11:20:14","6","489","<node.js><git><git-commit><nodegit>","nodegit - how to get lines added/removed in a commit filewise?","<p>I am new to nodegit. I want to see most recent 10 commits for a repo, files changed and changes introduced in respective commits. </p>

<p>I have got list of 10 most recent commits, but I am stuck on getting commit details.</p>

<p>Here is the code that I am using</p>

<pre><code>var nodegit = require('nodegit');
var repoPath = ""some_repo_path"";

//open branch
nodegit.Repository.open(repoPath).then(function(repo){
//get branch
return repo.getCurrentBranch().then(function(ref) {
    console.log(""On "" + ref.shorthand() + "" ("" + ref.target() + "")"");
    //get commit
    return repo.getBranchCommit(ref.shorthand());
}).then(function(commit) {
    //get commit history
    var history = commit.history();
    p = new Promise(function(resolve, reject) {
        history.on(""end"", resolve);
        history.on(""error"", reject);
    });
    history.start();
    return p;
}).then(function(commits){
    //iterate through last 10 commits
    for (var i = 0; i &lt; 10; i++) {
        var sha = commits[i].sha().substr(0,7),
            msg = commits[i].message().split('\n')[0];
        console.log(sha + "" "" + msg + "" "" + commits[i].author() + "" "" + commits[i].time());
        //get details for this commit
        //number of lines added/removed
        //list of files changed/deleted
        //for each changed file number of lines added/removed
        //for each changes file actual lines added/removed
    }
});
</code></pre>

<p>});</p>
","0","989512","0","0"
"24868339","1221398","2014-07-21 14:59:12","0","94","<git><caching><github><git-commit>","Cleared git cache, broke site","<p>There are a couple of things to know up front:</p>

<ol>
<li>I'm putting together a super simple site <a href=""https://github.com/cmegown/cmegown.github.io"" rel=""nofollow"">here</a>.</li>
<li>I know next to nothing about Git, so I use the GitHub for Windows app.</li>
</ol>

<p>After a couple of successful commits yesterday I started to receive an error every time I tried to create a new one ""Unable to create commit"". After some research it appeared to not add new files, so I figured it had something to do with caching. I did some quick searching and gave this a shot:</p>

<pre><code>git rm -r --cached
git commit -am 'git cache cleared'
git push
</code></pre>

<p>Things still work fine locally, but <a href=""http://www.coreymegown.com/"" rel=""nofollow"">the prod site</a> can no longer find the styles.css file (404). Any ideas? If so, please provide some description around it so that I can understand what went wrong and why.</p>

<p>Thanks!</p>

<p><strong>EDIT:</strong></p>

<p>The issue to the site not building was actually because I had directories that started with underscores, which is prohibited because of the native support for Jekyll. Adding a <code>.nojekyll</code> file to the root of the repo solved the problem.</p>
","0","1221398","",""
"24870265","1795026","2014-07-21 16:40:35","0","124","<git><git-submodules><git-commit><git-cherry-pick>","How to update specific directory on a git repository?","<p>I have two repository, one is a bit outdated, but I use both during the development. (It has historical reason to do so, but it doesn't matter.)</p>

<p>I have a sub-directory which is an almost independent part of the project, a small application. I would like to update only this tool's directory from the newer repo. Practically, I need the same version from this application in the top of both repo.</p>

<p>Is there any way to move only the application related commits to the other repository?</p>

<p>The commits are not in a ""straight line"", I had tons of commits and some of them were patch for this application.</p>

<p>Maybe somehow with cherry-pick?</p>
","0","1795026","",""
"12593113","425964","2012-09-26 00:51:09","14","20866","<git><git-commit><git-log>","View git changes/diffs of local commits not pushed to remote","<p>I have three <code>Git</code> commits that I committed locally, but have not pushed to GitHub. I would like to view the changes/diffs for all three commits, how do I view all the diffs?</p>

<p>I tried: <code>git log --branches --not --remotes</code></p>

<p>Which shows me the three commits, but not all the diffs/changes of each.</p>

<pre><code>commit c08fbb72ae6a06e8b2ff3dbbb96fb555a43f4136
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 18:17:02 2012 -0700

    Updated order of requires in Requires.php

commit 041fe19a48269a8aea2ccf90f53568893d4e0158
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 17:56:42 2012 -0700

    Checking for app.config.php in Requires.php

commit 61c103a8a122bcde2311d081a8340ee1dd71997c
Author: Justin &lt;justin@mydomain.com&gt;
Date:   Mon Sep 10 17:42:20 2012 -0700

    Version bump 0.4.0. See CHANGELOG.md
</code></pre>

<p>Thanks for the help.</p>
","1","425964","0","0"
"12660839","510036","2012-09-30 11:20:59","78","99668","<git><github><git-commit><pull-request>","Pull-Request for only certain files/commits","<p>I have a repository that is forked from <a href=""http://www.github.com/"">GitHub</a> that has a few modifications made to it. However, in a certain commit, a few files were changed that I want to submit a pull-request for, leaving the other modified files out of the request.</p>

<p>Do pull requests merge <em>all</em> commits, or do I need to do something special to isolate this commit?</p>
","3","510036","0","0"
"66370365","14316117","2021-02-25 14:23:08","-1","192","<git><github><git-commit><rm><git-rm>","how can git commit -a work after i remove a file from index","<p>Suppose I have tracked file <code>empty.txt</code>.
Now I remove file from working directory using <code>rm empty.txt</code> .
Now I am removing file from index using <code>git rm empty.txt</code> and now file should be untracked since I have removed it from index.
After this I used <code>git commit -a -m &quot;remove empty.txt&quot;</code> but how it is working as -a parameter is used to skip explicitly adding tracked file to staging area but I already removed file from index?
It should be untracked.</p>
","0","14316117","",""
"12677493","1140997","2012-10-01 16:44:24","2","77","<git><git-branch><git-commit>","How to move certain commit to NEW branch","<p>I have commit X and 2 commits after it. I should move only X to new branch. How can I do this?<br>
(And my repo is in remote repo also, I don't think exactly what is it, but I won't get ""detached head"")<br>
Thanks a lot</p>
","0","1140997","",""
"64157790","1668622","2020-10-01 14:46:09","0","47","<git><git-commit><git-rebase>","Apply changes to an existing commit without interactive rebasing","<p>Sometimes (very often) I make a change on my code base which I want to be part of a specific (not yet published) commit.</p>
<p>Usually I <code>stash</code> my changes, <code>rebase -i ID^</code> to that commit <code>stash pop</code> and <code>--amend</code> those changes and <code>rebase --continue</code>.</p>
<p>Problems emerge when there are more modifications than the one I want to <code>commit --amend</code> - I would first have to get rid of those e.g. by creating a temporary commit..</p>
<p>Is there a way to do all this in one (non-interactive) step? Something like</p>
<pre><code>git commit --amend --rebase ID [file1, file2, ..]
</code></pre>
<p>Or is there a really good reason for all this?</p>
","1","1668622","",""
"66376670","8250234","2021-02-25 21:25:31","0","40","<git><commit><git-commit>","Bit local repo: Remove a file from a old commit","<p>Git beginner here...</p>
<p>I use it with Visual Studio exclusively. I've made 18 commits since the last push to the remote server and commit number 5 has a large file in it that I did not intent to be in there. Because it is over 100MB, I cannot push to the remote server.</p>
<p>How do I edit that old commit and remove that file?</p>
","0","8250234","",""
"45672799","6419559","2017-08-14 10:45:10","2","355","<git><git-commit><git-notes>","Get all notes for a commit including their author and committer","<p>Is there an easy way to retrieve all notes for a certain commit including information about the note author and the note committer?</p>

<p>Using <code>git show --notes=refs/notes/* &lt;commit_hash&gt;</code> I was able to get all notes. However I did not find out how to get the author and committer of the note using plumbing commands.</p>
","0","6419559","",""
"12704568","509213","2012-10-03 08:26:22","58","43326","<git><git-commit>","Undo a git commit","<p>Can you undo a past commit, that has long been merged into your git repository, via a git command? Or do you have to manually undo all the changes made in that commit?</p>
","3","509213","0","0"
"45676964","3197383","2017-08-14 14:34:36","1","421","<devops><git-commit><commitizen>","What Commitizen type should I use for a change that is an improvemant for an existing feature?","<p>Here are the Commitizen types:</p>

<p><img src=""https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png"" alt=""""></p>

<p>What Commitizen type should I use for <strong>a change that is an improvement for an existing feature</strong>?</p>

<p>CZ resources :</p>

<ul>
<li><a href=""http://commitizen.github.io/cz-cli/"" rel=""nofollow noreferrer"">http://commitizen.github.io/cz-cli/</a></li>
<li><a href=""https://github.com/commitizen/cz-cli"" rel=""nofollow noreferrer"">https://github.com/commitizen/cz-cli</a></li>
</ul>
","0","3197383","0","0"
"12715330","1083355","2012-10-03 19:19:30","3","1332","<git><git-commit>","Can I send changes of git staged area for code review (to any code review tool)?","<p>I learned that git has notion of different file states:
  1. New
  2. Modified
  3. Staged
  4. Committed</p>

<p>After searching a lot, what I have found is if I want to send for code review to any tool, I have to make commit to local repository and push it to some central repo set for code review (by any code review tool e.g. Gerrit).</p>

<p>Now,  suppose file was in state A before starting code review process and it went through 10 more reviews rework i.e. 10 more modifications i.e. 10 more commits to local repository and finally file is in state B, which should finally be committed.</p>

<p>From state A to B 10 commits were done.</p>

<p>Assume of these 10, 4 commits were on same section / part of file.</p>

<p>So, finally, when I will push reviewed and accepted file's final state B to main central repository I will have to make 10 commits of which some intermediate commits took rework i.e. unwanted commits. </p>

<p>But I don't want those unwanted commits.</p>

<p>From what I can think is I am interested in final state B to be pushed to repository with only one commit. </p>

<p>So I am looking for any such approach / tool which allows git staged changes to be sent for reviewed. Reviewer will review. If he rejects and suggest some changes then I unstage previous changes. Apply suggested changes, stage those changes and again sent for review.</p>

<p>Thus finally when code reviewed accepts I will make single commit my staged changes and will need only single final push.</p>
","1","1083355","",""
"47702572","2646226","2017-12-07 19:39:09","4","1766","<git><npm><commit><git-commit><commitizen>","how to make commitizen override default git commit command","<p>I am currently creating custom script to run commitizen commit command by doing <code>npm run commit</code> but I want to just let it over ride the default <code>git commit</code> with <code>npm run commit</code> somehow..... So anyone does <code>git commit</code> will automatically direct the person to the commitizen interface and ignore whatever the person put after <code>git commit</code> when commitizen is available.</p>

<p>How can I do that? I did google, can't find a viable solution.</p>

<p>Thanks</p>
","9","2646226","",""
"64175041","4227893","2020-10-02 16:23:05","0","43","<git><git-commit>","Is there anyway to recover a missing git commit?","<p>I've been working with a detached head for longer than I should have granted. I've been lazy and put off merging back into the branch I was originally working in and finally decided that it was high time I do what I ought to do.</p>
<p>So I assumed that the best way was to follow the same procedure as I always do. First I fetched and then pulled down the newest changes to that branch, fixed merge conflicts and then I merged the branch I was going to merge with into the the commit I had first. (in hindsight, I'm not even sure what I did here after thinking it through more thoroughly). Then I wrote down the commit id for the commit I had recently made with all my current work in and then checked out the branch I was going to merge that into........... That's when my stomach hit my feet. The commit was gone. I tried searching for the id in SourceTree and got nothing... I can't find my work anywhere.</p>
<p>Have I blown away all this work or is there some way to get it back?.. I was under the impression that once Git made a commit, it was always there, like a save button.</p>
","4","4227893","",""
"27408639","1914692","2014-12-10 18:51:24","0","1660","<git><git-merge><git-commit>","After merge, how does the commit ID of a merged file (no conflicts) change?","<p>Suppose we have branch A, and branch B.</p>

<p>Branch A works on file a.cpp, and have several commits say commit ID 10000 10001, 10002, 10003 (faked).</p>

<p>Branch B has a.cpp. a.cpp still shows the old commit ID 10000. [Note] Branch B has other commits already. But a.cpp history in Gighub only show one old commit ID 10000.</p>

<p>Now we merge A to B.
In B, we have a.cpp. What are its history commit ID series ""FOR a.cpp File""?
I didn't mean the commit history for B. I mean the history for the file a.cpp (you will see that in Gighub)</p>

<p>Are they same commit IDs?</p>

<p>I assumed they are the same. 
But from one practical project on Github, I find they are not the same!</p>

<p>The problem is: Someone made modification on some other files in Branch B (not on a.cpp file). Later on I merge B to A, since I work on A, I find that there are conflicts for a.cpp file, although they are the same! (but different commit IDs).</p>

<p>I don't want to resolve the conflicts, which is time-consuming.</p>

<p>[Update 1]
Here is some quote from
<a href=""https://stackoverflow.com/questions/24993253/do-the-commit-ids-remain-same-after-a-merge"">Do the commit ids remain same after a merge?</a></p>

<blockquote>
  <p>If your work is rebased (or cherry-picked) into an upstream, and you
  fetch and then attempt to merge the upstream, git will sometimes, but
  not always, be able to detect the duplication and clean up
  automatically. When it cannot auto-detect the duplication, you will
  almost always get various merge conflicts:</p>
</blockquote>

<p>How come? If Git cannot automatically detect no change of some files, it creates a lot of fake merge conflict errors, which is time-consuming to manually solve.</p>

<p>[Update 2] 
Thanks for answers below.
However, in github, I find that different commit IDs for the same commit files, authors and change.
See the quote from <a href=""https://stackoverflow.com/questions/24993253/do-the-commit-ids-remain-same-after-a-merge"">Do the commit ids remain same after a merge?</a></p>

<blockquote>
  <p>I viewed the commit log of the team's branch and realized that
  although the commit message, author(me) &amp; date were same, the commit
  id was different in the remote branch.</p>
</blockquote>

<p>[Update 3]
For Tomato Branch:</p>

<p>1000, 1001, 1002, 1003</p>

<p>For Potato Branch:</p>

<p>1000, 2001, 2002, 2003</p>

<p>Now merge Tomato Branch to Potato Branch:</p>

<p>The common ancestor is 1000,  and the merge commit is 2004</p>

<p>Between 1000 and 2004, there are 1001, 1002, 1003, 2001, 2002, 2003.</p>

<p>it seems Git put them between based on chronicle order, AND change the commit name.
So it would like </p>

<p>1000 </p>

<p>(    3001 (from 1001), </p>

<p>3002 (form 1002), </p>

<p>4001 (from 2001), </p>

<p>4002 (from 2002), </p>

<p>4003 (from 2003), </p>

<p>3003 (from 1003)    ) </p>

<p>2004</p>

<p>Merge are based on common ancestor 1000, and the two latest commits from the two branches (1003, 2003).</p>

<p>Git also give out 4003, which might mean it also merge:</p>

<p>2003 AND 1002</p>

<p>So actually Git might do many merging operations in order to give out an effective chronicle intermediate commits.</p>
","6","1914692","",""
"12799872","597465","2012-10-09 12:17:24","9","7205","<git><diff><commit><git-diff><git-commit>","Apply a commit chunk by chunk","<p>When I add a file to staging, I can</p>

<pre><code>$ git add my_file -p
</code></pre>

<p>And select the chunks I want to stage.</p>

<p>Is there a way to merge/cherry-pick a commit and apply its diff chunk by chunk?</p>

<p>Thanks</p>
","2","597465","0","0"
"9416219","500865","2012-02-23 15:39:38","2","531","<git><git-branch><git-push><git-commit>","How do I make unpushable commits pushable?","<p><code>Master</code> Branch had commits like this : <code>A -&gt; B -&gt; C(HEAD)</code> . <code>HEAD</code> was at <code>C</code>. </p>

<p><strong>What I did :</strong></p>

<p>I checked out <code>B</code> and made commits on top of it. </p>

<p>Now the tree looks like this : </p>

<pre>
    A -> B -> C(master)(origin/master)
         |
         | -> B1 -> B2(HEAD)
</pre>

<p><code>git status</code> on the project directory is giving me the following message :</p>

<pre>
# Not currently on any branch.
nothing to commit (working directory clean)`
</pre>

<p>So it means that <code>B1</code> and <code>B2</code> cannot be pushed. I got to know that this is happening because these commits doesn't exist on any branch. Now, if I switch my branch back to master will these commits be lost? I am expecting a few more commits(<code>B3, B4 ... BN</code>) on these unnamed branch after which I want <code>C</code> to come on top of it. In essence, I would like to see the <code>master</code> branch in this way :</p>

<pre>
    A -> B -> B1 -> B2 -> B3 -------> BN -> C(master)(origin/master)
</pre>

<p>or atleast this way :</p>

<pre>
    A -> B ---------------------> C(master)(origin/master) -> D
         |                                                    ^
         |                                                    |
         | -> B1 -> B2 -> -> ...->BN--------------------------
</pre>

<p>What options I have to accomplish this? I want to be able to save the commits in the <code>origin</code>. </p>

<p>Any suggestions/directions is appreciated.</p>
","3","500865","",""
"46006611","258462","2017-09-01 19:10:44","0","914","<git><github><migration><bitbucket><git-commit>","How to delete all commits and replace the initial commit in a Git repository?","<p>We are moving some repositories from GitHub to BitBucket and we do not want to delete the ones in GitHub because we still have some issues in their issue tracker. We are waiting for <a href=""https://github.com/sorich87/github-to-bitbucket-issues-migration/issues/22"" rel=""nofollow noreferrer"">this bug</a> to be solved so we can correctly export the issues. So for now we just want to delete all the history of the repository and insert as the initial commit a very small README.md file.</p>
","0","258462","",""
"13542213","1090562","2012-11-24 14:36:11","203","129407","<git><git-commit>","Git, see a list of comments of my last N commits","<p>Is there a way to see a list of comments and time of my last N commits in Git?</p>

<p>After looking on SO, the only relevant thing I have found is
<a href=""https://stackoverflow.com/questions/1314950/git-get-all-commits-and-blobs-they-created"">Git - get all commits and blobs they created</a>, but it shows all commits from all users, and outputs a lot of other information.</p>
","0","1090562","0","0"
"64515533","1352856","2020-10-24 16:21:30","0","624","<laravel><github><gitignore><git-commit>","Laravel git ignoring images uploaded to storage","<p>I'm running into an issue which i haven't been able to solve yet.</p>
<p>I was working on a laravel project and than moved this project folder to a newer version of MAMP. So far so good, everything was working fine. I just copied all the folders and files and all was good until i logged in to my laravel application on localhost and uploaded some images.</p>
<p>I know i can do this on my host but i like to work on localhost to add content and than push it to my prod env. Anyway, after i uploaded some images and did a git add . and commit it didnt add my uploaded images, on phpstorm they also turn out red in the storage/app/public/images folder.</p>
<p>On my previous mamp version everything used to work fine.</p>
<p>Stuff I have already tried:</p>
<p>I tried deleting the symlink storage folder and make a new link, didn't help.
I tried deleting the storage folder from gitignore, also didn't help.</p>
<p>My gitignore file looks like this:</p>
<pre><code>/node_modules
/vendor
/public/hot
/public/storage
/storage/*.key
.env
.env.backup
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/config/database.php
/public/sitemap.xml
</code></pre>
<p>When i login on my prod env and i upload images, they turn up fine, but i prefer sometimes to work from localhost to write content and push it to env.</p>
<p>I have also tried to:
git check-ignore -v -- path/to/file</p>
<p>To check why the file (image) is being ignored but it doesnt return anything.</p>
<p>I got one time a message with: Fatal: pathspec ... is beyond a symbolic link.</p>
<p>I hope someone can push me into the right direction. Thank you.</p>
","2","1352856","0","0"
"64520239","1136062","2020-10-25 04:03:22","2","542","<git><github><commit><git-commit>","Github commit with different user","<p>I have a github account. When I make commits it shows a different user than my github account username. How can I fix that?</p>
<p><a href=""https://i.stack.imgur.com/cAsVU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cAsVU.png"" alt=""enter image description here"" /></a></p>
","0","1136062","0","0"
"64520262","13725415","2020-10-25 04:08:21","0","318","<github><git-commit><github-issues>","How can I get the user name of committer in each commit in a project in Git?","<p>I am trying to make analysis between issues and commits of a project in git.</p>
<p>I am getting the name and email of the committer and author from git using the command below:</p>
<pre><code>git log --pretty=&quot;%an %ae %cn %ce&quot;
</code></pre>
<p>I am using '<code>curl -i &quot;https://api.github.com/repos/&lt;repo-owner&gt;/&lt;repo-name&gt;/issues&quot;</code>' to download the issues. This returns the username[login name] for each issue not the name of the user as it is in the git log report:</p>
<pre><code>{   &quot;url&quot;: &quot;https://api.github.com/repos/&lt;repo-owner&gt;/&lt;repo-name&gt;/issues/17625&quot;,
    &quot;node_id&quot;: &quot;MDExOlB1bGxSZXF1ZXN0NTA5NDYyMjgz&quot;,
    &quot;number&quot;: 17625,
    &quot;title&quot;: &quot;......&quot;,
    &quot;user&quot;: {
      **&quot;login&quot;: &quot;xxxxxx&quot;,**
      &quot;id&quot;: 43045863,
       ....
      &quot;type&quot;: &quot;User&quot;,
},
</code></pre>
<p>I check if the issue and commit has been made by the same user. Since I cannot get the username of committer, I cannot relate them. Is there a way to get the username of each commit on a project in git?</p>
","2","13725415","",""
"32991515","1500349","2015-10-07 11:52:52","4","1955","<git><github><git-commit><github-for-mac>","Commit Related to changes is there but the changes are not reflected in the repo , why does this happen?","<p>I made some changes in the git repo and commit my changes and pushed those changes in the repo at that time . But after some days I checked the commit history of a file , in that history latest commit is my commits  . 
I used the below command to check the commit history of a specific file </p>

<p><strong>git log --follow </strong></p>

<p>Above command shows all the commits related to that file , recent commits is none other than my commit .</p>

<p>when I tried following command . </p>

<p><strong>git show commit_id</strong></p>

<p>It shows the changes that i want to keep , but when i look into the file it does not reflect changes related to that commit .</p>

<p>Note : we did not revert that commit .</p>
","3","1500349","",""
"46045821","356105","2017-09-05 01:30:02","3","1467","<git><jenkins><continuous-integration><git-commit><sha>","Jenkins Invalid Git Revisions","<p>In Jenkins I'm using the XML API to get the SHA(s) of a commit, e.g.</p>

<p><a href=""http://jenkins/view/job/test/470/api/xml?xpath=//lastBuiltRevision/SHA1&amp;wrapper=SHAS"" rel=""nofollow noreferrer"">http://jenkins/view/job/test/470/api/xml?xpath=//lastBuiltRevision/SHA1&amp;wrapper=SHAS</a></p>

<p>I put it in a wrapper because often it contains more than one SHA and I'm going to process these further.</p>

<p>However one of the SHAs always is invalid...</p>

<pre><code>&lt;SHAS&gt;
&lt;SHA1&gt;cbf26ebac6b4b3860a794c0b1ad86758e7757a3a&lt;/SHA1&gt;
&lt;SHA1&gt;7e861132ce428911585a818107ba35c44cf12bbf&lt;/SHA1&gt;
&lt;/SHAS&gt;
</code></pre>

<p>The second SHA is fine but when I check the first SHA here on our GIT repo commits it leads to an error page:</p>

<blockquote>
  <p>Commit 'cbf26ebac6b4b3860a794c0b1ad86758e7757a3a' does not exist in
  repository 'test'.</p>
</blockquote>

<p>Does anyone know why we get invalid SHAs on Jenkins and how to resolve this issue?</p>

<p><strong>UPDATE:</strong></p>

<p>The complete lastBuiltRevision ...</p>

<pre><code>&lt;wrapped&gt;
    &lt;lastBuiltRevision&gt;
        &lt;SHA1&gt;cbf26ebac6b4b3860a794c0b1ad86758e7757a3a&lt;/SHA1&gt;
        &lt;branch&gt;
            &lt;SHA1&gt;cbf26ebac6b4b3860a794c0b1ad86758e7757a3a&lt;/SHA1&gt;
            &lt;name&gt;origin/master&lt;/name&gt;
        &lt;/branch&gt;
    &lt;/lastBuiltRevision&gt;
    &lt;lastBuiltRevision&gt;
        &lt;SHA1&gt;7e861132ce428911585a818107ba35c44cf12bbf&lt;/SHA1&gt;
        &lt;branch&gt;
            &lt;SHA1&gt;7e861132ce428911585a818107ba35c44cf12bbf&lt;/SHA1&gt;
            &lt;name&gt;refs/remotes/origin/develop&lt;/name&gt;
        &lt;/branch&gt;
    &lt;/lastBuiltRevision&gt;
&lt;/wrapped&gt;
</code></pre>
","3","356105","0","0"
"17543379","2438804","2013-07-09 08:23:24","4","2436","<git><git-commit><git-gc>","Why git operations becomes slow when repo gets bigger","<p>I know git would get slow when the repo get bigger.<br>
But why?<br>
As git stores files as separate directories and files under <em>.git</em>, i can not find out why the operations get slowwer. Let's have a look at the <em>commit</em> operation. Recently, i cloned the webkit repo and i branch from master, then i commit a <strong>2k</strong> file to the branch. But i feel it gets slowwer than that i do on my small repo.<br>
Because i have not read through git source code, i guess the commit operation compromises storing the file to the disk, inserting the commit log, updating the index and updating the <em>HEAD</em> to the sha value of the file.  </p>

<p>The write is fast.<br>
The inserting is fast.(I guess, if the insert action is append log to a file)<br>
The updating index is fast.<br>
The updating HEAD is fast.  </p>

<p>And why it is slow?
Can anyone illustrate it to me?<br>
Thanks.</p>

<p>Some answers is helpful but not very convincible, it will be great to provide some code snippets to support you.</p>
","0","2438804","",""
"13599262","351614","2012-11-28 06:40:38","0","159","<git><git-commit>","git show last checking when commiting","<p>Is it possible to show the text of the last commit when I do a git commit.</p>

<p>I frequently need to check in and associate with a ticket number and I always tend to forget the number and have to go back and do a git log to find out the previous commit and get the ticket id, it would reduce a bit of friction of this was just included in the commit comments that are shown.</p>
","0","351614","",""
"46263772","4523359","2017-09-17 11:54:28","-1","93","<git><moodle><git-commit><git-diff>","How to make diff between two directories of a repo, then save the diff as a commit","<p>How can I make a diff between two directories of a repository, then save this diff as a commit?</p>

<p>EDIT1:
Use case: There is a software named Moodle, which is hardly module based. Each feature is in a different directory.
I need to keep custom changes of each feature I've done and when the official software is released, I want to integrate my changes to the new release.</p>

<p>EDIT2:
I have an original release tagged with v2.7.0. I made custom changes to 30-40 directories. Now I have a commit with my all changes compared to the release v2.7.0. 
It is too much work to do the merge &amp; conflict solving to release v3.2.0 in one step.
So I would split the changes into directories (features). Then, when I rebase changes over v3.2.0, I can rebase the feature/directory changes one by one. 
This is the job I would like to do now.</p>

<p>I hope it is more clear now. </p>
","6","4523359","0","0"
"27699455","3825112","2014-12-30 04:06:21","1","2791","<git><bitbucket><git-commit>","bitbucket git commits missing","<p>We have migrated from svn to git lately. And I am not good with git till now. My problem is that, I have committed some files and it cause to lose the file changes others did. But the changes are there in my instance but not in any others(they  lost what they committed). The graph shows the details. The top two commits I have marked caused the issue. Please help me to resolve the issue. I am not using commands for git, but tortoise git UI.</p>

<p><img src=""https://i.stack.imgur.com/VtYQx.png"" alt=""enter image description here""></p>
","0","3825112","",""
"17562057","410102","2013-07-10 03:36:42","7","9520","<git><git-commit>","undo last git commit that is pushed to origin","<p>I have committed wrong files to my branch and pushed it to origin. I have seen the article at <a href=""https://stackoverflow.com/questions/927358/how-to-undo-the-last-git-commit"">How to undo last commit(s) in Git?</a> that deals with undoing a local commit, but my problem is that I have pushed the commit to origin. How to undo this?</p>
","0","410102","0","0"
"17570671","1738303","2013-07-10 12:27:58","2","672","<git><git-commit>","Git log and reality mismatch","<p>In relation to my question here: <a href=""https://stackoverflow.com/questions/17527276/git-code-disappeared-after-merge"">Git; code disappeared after merge</a></p>

<p>It happened again, and I don't understand how. The issue is, that a line of code was changed in a commit, but the old line exists in the current repo-version of the file, which seems really weird. Does anyone have any insight into how this is happening, and how we avoid it?</p>

<p>The line in question is the function header for the create_marking method</p>

<p>The commit that changed the line (as expected):</p>

<pre><code>commit 925ec3c11006ccca37cf684443d0fad3e1781dca
Author: xxxx
Date:   Tue Jun 4 14:55:52 2013

    Comment

diff --git a/lib/services/MarkingService.class.php b/lib/services/MarkingService.class.php
index 66a33f7..acf830a 100644
--- a/lib/services/MarkingService.class.php
+++ b/lib/services/MarkingService.class.php
@@ -34,18 +34,12 @@ class MarkingService \{
         return '[' . implode(',', self::getCoordinates($marking)) . ']';
     \}
\}

-    public function create_marking($category, $timestamp, $field_id, $lat, $lon, $accuracy, $lat2 = null, $lon2 = null, $accuracy2 = null, $spread = null, $depth = null, $comment = null) \{
+    public function create_marking($category, $timestamp, $field_id, $coordinates, $spread = null, $depth = null, $comment = null) \{
         $this-&gt;validate_category($category);
         $this-&gt;validate_timestamp($timestamp);
</code></pre>

<p>These next two commits are THE ONLY commits in the history, after the one above, and as far as I can tell, they do not in any way change the line in question:</p>

<pre><code>commit 2ab5fb14765caa269c027e8c57b11232b0441625
Author: xxx
Date:   Thu Jul 4 13:58:26 2013

    Comment

diff --git a/lib/services/MarkingService.class.php b/lib/services/MarkingService.class.php
index 66a33f7..c553876 100644
--- a/lib/services/MarkingService.class.php
+++ b/lib/services/MarkingService.class.php
@@ -8,32 +8,6 @@ class MarkingService {
         return $instance;
     }

-    public static function getCoordinates(lmMarking $marking)
-    {
-        $returnValue = array($marking-&gt;getLatitude() . ',' . $marking-&gt;getLongitude());
-        
-        if (0 &lt; $marking-&gt;getLatitude2()) {
-            $returnValue[] = $marking-&gt;getLatitude2() . ',' . $marking-&gt;getLongitude2();
-        }
-        
-        return $returnValue;
-    }
-    
-    public static function getCoordinatesJavascript(lmMarking $marking)
-    {
-        return '[' . implode(',', self::getCoordinates($marking)) . ']';
-    }
-
     public function create_marking($category, $timestamp, $field_id, $lat, $lon, $accuracy, $lat2 = null, $lon2 = null, $accuracy2 = null, $spread = null, $depth = null, $comment = null) {
         $this-&gt;validate_category($category);
         $this-&gt;validate_timestamp($timestamp);
</code></pre>

<p>and</p>

<pre><code>commit d152befa9977b8fc13df9f3ea3f756217751cb0d
Merge: 77b20e2 2ab5fb1
Author: xxx
Date:   Thu Jul 4 14:43:26 2013

    Comment

diff --cc lib/services/MarkingService.class.php
index acf830a,c553876..f5a8bc4
--- a/lib/services/MarkingService.class.php
+++ b/lib/services/MarkingService.class.php
@@@ -131,34 -157,4 +105,34 @@@ class MarkingService 
              throw new InvalidArgumentException(""Invalid depth: '$depth'"");
          }
      }
 +    
 +    private function validateCoordinates($coordinates)
 +    {
 +        $validatorOptions = array(
 +            'lat' =&gt; array(
 +                'field' =&gt; 'latitude',
 +                'validator' =&gt; FILTER_VALIDATE_FLOAT
 +            ),
 +            'lng' =&gt; array(
 +                'field' =&gt; 'longitude',
 +                'validator' =&gt; FILTER_VALIDATE_FLOAT
 +            ),
 +            'accuracy' =&gt; array(
 +                'field' =&gt; 'accuracy',
 +                'validator' =&gt; FILTER_VALIDATE_INT
 +            )
 +        );
 +        
 +        foreach ($coordinates as $coordinate) {
 +            foreach ($coordinate as $key =&gt; $value) {
 +                if (false === filter_var($coordinate[$key], $validatorOptions[$key]['validator'])) {
 +                    throw new InvalidArgumentException(""Invalid "" . $validatorOptions[$key]['field'] . "": '"" . $value . ""'"");
 +                }
 +            }
 +        }
 +    }
- }
+ }
</code></pre>

<p>and for some reason I cannot fathom, the line in the file now reads</p>

<pre><code>public function create_marking($category, $timestamp, $field_id, $lat, $lon, $accuracy, $lat2 = null, $lon2 = null, $accuracy2 = null, $spread = null, $depth = null, $comment = null) {
</code></pre>

<p>What am I doing wrong?</p>

<p><strong>EDIT</strong>
output of git status</p>

<pre><code>$ git status
# On branch master
nothing to commit, working directory clean
</code></pre>

<p>output of git log    </p>

<pre><code>$ git log lib/services/MarkingService.class.php
commit d152befa9977b8fc13df9f3ea3f756217751cb0d
Merge: 77b20e2 2ab5fb1
Author: xxx
Date:   Thu Jul 4 14:43:26 2013 +0300

    Changed the format of Markings block in Sync API method.
    Send markings coordinates in the API in the new format

commit 2ab5fb14765caa269c027e8c57b11232b0441625
Author: xxx
Date:   Thu Jul 4 13:58:26 2013 +0300

    Changed the format of Markings block in Sync API method.
    Send markings coordinates in the API in the new format

commit 925ec3c11006ccca37cf684443d0fad3e1781dca
Author: xxx
Date:   Tue Jun 4 14:55:52 2013 +0300

    Changed the makrings coordinates structure.
    Allow more points in CreateMarking
</code></pre>

<p>git log --oneline --graph</p>

<pre><code>$ git log --oneline --graph lib/services/MarkingService.class.php
*   d152bef Changed the format of Markings block in Sync API method. Send markings coordinates in the API in the new format
|\
| * 2ab5fb1 Changed the format of Markings block in Sync API method. Send markings coordinates in the API in the new format
* | 925ec3c Changed the makrings coordinates structure. Allow more points in CreateMarking
|/
* bacfb14 An intermediate commit. HOTFIX: Fix markings
* 6479513 LETFARM-1863 DB and API support for markings
</code></pre>
","12","1738303","0","0"
"9921927","759315","2012-03-29 08:43:46","42","14190","<php><coding-style><newline><git-commit>","PHP: Is there a reason to put a newline at the end of file","<p>When I commit a php file to github I get the message ""No newline at end of file"".</p>

<p>It's just a warning and I remember, that for any reason it is good to have a newline at the end of a file.</p>

<p>But why? Is it a remnant of long gone times, does it still have advantages or is it even required in php? If yes, for what reason?</p>
","4","759315","0","0"
"33026270","5425083","2015-10-08 21:29:50","0","310","<git><patch><git-commit><git-add><git-am>","Troubles with git am when applied in a different repository","<p>I have two Git repositories:</p>

<ol>
<li><pre><code>/api/pom.xml
/jpa/pom.xml
</code></pre></li>
<li><pre><code>/mailbox/api/pom.xml
/mailbox/jpa/pom.xml
/protocols/api/pom.xml
</code></pre></li>
</ol>

<p>The second repository have a mailbox folder that has the exact same structure
that the first Git repository. Due to workflow changes, I now need to work on
the second repository, and need to transfer my working branches to the new
repository.</p>

<p>I created a patch in the first one (let say on file <code>api/pom.xml</code>)
and try to apply it in the second one, under the <code>/mailbox</code> path. So I have only
one problem: <code>git am</code> refuses to do the work, pretending that:</p>

<pre><code>&lt;file&gt; does not exist in index
</code></pre>

<p>I tried directory option and <code>-p1</code> option. Note: <code>patch -p1</code> does the job, but I
have ~80 patch to apply in all my branches:</p>

<pre><code>patch + git add + git commit
</code></pre>

<p>Is there any cheaper way to do it?</p>
","0","5425083","0","0"
"13641857","116388","2012-11-30 08:58:34","57","10456","<git><git-commit>","What does it mean when Git says 'rewrite' or 'rename' in a commit message?","<p>Running a <code>git commit</code> leads to the following output:</p>

<pre><code>[manu@host] git: git commit -a -m ""StreamIt instrumentation""
[master 263410f] StreamIt instrumentation
62 files changed, 6117 insertions(+), 5748 deletions(-)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/cluster/ClusterBackend.java (91%)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/cluster/ClusterCodeGenerator.java (95%)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/cluster/code/FlatIRToCluster.java (94%)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/common/ToCCommon.java (92%)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/flatgraph/ScheduledStaticStreamGraph.java (93%)
rename Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/sir/lowering/fission/{StatelessDuplicate.java =&gt; HorizontalFission.java} (98%)
rewrite Code/ALCHEMY/streamit-src-2.1.1/src/at/dms/kjc/sir/lowering/partition/dynamicprog/DynamicProgPartitioner.java (93%)
</code></pre>

<ul>
<li>What does git mean when it reports a file as 'rewrite'?  </li>
<li>What is the meaning of the associated percentage?</li>
<li>Why is a percentage only associated with these lines among the 62 changed in this commit?</li>
</ul>
","7","116388","0","0"
"29703134","4801641","2015-04-17 15:14:52","13","29214","<macos><git><terminal><git-commit>","Why can I not commit? (Your branch is up-to-date with 'origin/master', no changes added to commit)","<p>I have been having some trouble committing a file to GitHub. I can make it to git add, but soon as I try <code>$ git commit -m 'my message'</code> I get an error, not allowing me to complete the process of adding a file. </p>

<pre><code>$ git add HelloWorld.md

$ git commit -m 'Hello world'
</code></pre>

<p>I get the following answer (deleted: <code>README.md</code> &amp; <code>.DS_Store</code> are in red):</p>

<pre><code>On branch master

Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
        deleted:    README.md

Untracked files:
        .DS_Store

no changes added to commit
</code></pre>
","6","4801641","",""
"33055049","1662033","2015-10-10 14:26:33","1","88","<android><eclipse><git><egit><git-commit>","eclipse eGit - what file types to commit?","<p>I am working on an android app in eclipse ADT and just started to use eGit (git plugin).</p>

<p>I set up my repository outside of the workspace - and I am about to do my first commit.</p>

<p>Now, when I do the commit there is a dialog to choose what files do I want to commit.</p>

<p><strong>My question is:</strong> what file types I <strong>should</strong> commit and what file types I <strong>shouldn't</strong> commit <strong>(in an android app project)</strong> and why? </p>

<p>I did see in many tutorials that sometimes they commit only code file (.java) and other files they don't necessarily.</p>

<p>So (for android app) what files should I commit?</p>
","1","1662033","",""
"29709255","2583637","2015-04-17 21:00:54","1","1939","<git><history><git-commit>","Preserving history of GIT commits while moving a GIT repository","<p>I have two GIT projects A and B(empty project). I want to move the entire project A into project B and preserve the history of commits while moving all the files from A to B. </p>

<p>What's an efficient way to do this using GIT ? I tried using git filter-branch but seems like I am not doing it the right way as it gives me ""fatal...xyz/is outside repository"". Could someone give some pointers ?</p>

<p>Thanks !</p>
","8","2583637","0","0"
"27719553","2326896","2014-12-31 10:09:48","3","1040","<git><git-commit>","Last 7 Git commit disappeared and head moved back","<p>So I did a local commit, went to bed. Next day, my last 7 commits disappeared. What happened?</p>

<p>I was able to recover the commit, but I would really like to understand what is going on. It's the first time git gives such a scare.</p>

<p>Git repo partial log:</p>

<pre><code>* 51a1ea1 A Trace-base...
* fe62749 (fixingMess) Implemented...    # &lt;- I has here
* 498792a Finishing proposal
* 847fa4b Adding definition...
* d2ec4a6 Finishing related work
* 7c7c48a Completing proposal...
* f34274f Removed excessibe...
* d9ccd63 Chaning figs to subfigs.
* d1561db Refomulated proposal     # &lt;- Then, it jumped here
* 9e0698b Adding student automatic...
* 46a9cb1 Adding citations...
* b3e2614 Correcting references
* 078ae5f Added Proposal
* f717235 Updating ignore file
* b10811d Cosmetics.
</code></pre>

<p>I looked up my command history and found nothing, although I changed shells at the time and some history was lost. Here is what I have:</p>

<pre><code>git status
git commit -am ""Finishing related work""
git status
git commit add -am ""Adding definition...""
git commit com -am ""Adding definition...""
git commit -am ""Adding definition...""
git push
git status
git commit -am ""Finishing proposal""
git push
</code></pre>

<p>(commands missing)</p>

<pre><code>458  git status
459  git add paper.tex
460  git commit -am ""Implemented...""
504  git status
</code></pre>

<hr>

<p>Some command ran on damage local repo.</p>

<p>When I do <code>git status</code> I receive the following message.</p>

<blockquote>
  <p>Your branch is up-to-date with 'origin/master'.</p>
</blockquote>

<p>Result of <code>git reflog</code>, <code>git reflog HEAD</code> or <code>git reflog master</code>:</p>

<pre><code> d1561db HEAD@{0}: commit: Refomulated proposal
 9e0698b HEAD@{1}: pull: Fast-forward
 b3e2614 HEAD@{2}: pull: Fast-forward
 2f0d4fb HEAD@{3}: pull: Fast-forward
 3a0bef4 HEAD@{4}: pull: Fast-forward
 d7b0ddf HEAD@{5}: pull: Fast-forward
 d96f7ae HEAD@{6}: clone: from gitolite@XXXXXXXXX:graph-moocs
</code></pre>

<p>Result of <code>cat .git/HEAD</code>:
    ref: refs/heads/master</p>

<p>Result of 'git branch':
    * master</p>

<p>I did a new clone and the last 6 commits appear in the new folder. I did not push the last commit to the remote server, so the remote is fine.</p>

<p>I was able to recover my commit with <code>git fsck --lost-found</code> and <code>checkout</code> a dangling commit (after trying all the others).</p>

<p>What happened? How can I investigate this? (I kept a copy of the buggy local repo for investigation!)</p>
","6","2326896","0","0"
"33057097","425275","2015-10-10 17:47:16","1","33","<git><git-commit>","When working on a new feature over several days, how do I manage commits?","<p>I’m working in a feature branch for the last few days. The feature involves various files including templates, stylesheets, and JavaScript modules (both client and server). I will soon complete the feature (it will be in alpha stage), but until then, the involved files are pretty much in flux, so it doesn’t make sense to commit anything.</p>

<p>I don’t like how my work isn’t committed (“saved”) over night, so I do a temporary “WIP” (work in progress) commit, and then <code>git reset HEAD^</code> to revert it whenever I continue work the next day. That way I can do a proper commit whenever the feature reaches alpha stage.</p>

<p>This approach does seem like a hack though, so I’m wondering what I should do instead. Is there a standard way in Git to handle these types of situations?</p>
","0","425275","",""
"33058069","2193439","2015-10-10 19:24:54","1","89","<git><git-commit><git-remote><git-reset><git-revert>","Hard reset to a previous git Commit - Not working","<p>I have run</p>

<pre><code>git log
</code></pre>

<p>And find this-</p>

<pre><code>    C:\WAMP\www\gtwhero [panelist_qa_AJAX_solution]&gt; git log
    commit afbda8a710aab851937532543bb0a99f246874e3
    Merge: 19323e3 cfde9ef
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sun Oct 11 00:51:40 2015 +0600

        Merge branch 'panelist_qa_AJAX_solution' of https://github.com/techmarket/gtwhero into panelist_qa_AJAX_solution

    commit 19323e3d1c8055c324a7ed65c3868e92420aad9f
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sun Oct 11 00:48:43 2015 +0600

        nothing

    commit cfde9eff38fccd15dfc521e7ba075622a31a5a6e
    Merge: 38a68bd b773dd2
    Author: Platon &lt;heonozis@mail.ru&gt;
    Date:   Sat Oct 10 17:08:30 2015 +0300

        Merge remote-tracking branch 'remotes/origin/master' into panelist_qa_AJAX_solution

        Conflicts:
            app/Http/Controllers/WebinarController.php

    commit b773dd225b8ffa34cb9231a4e58063756d7e53f1
    Merge: 1d9923d 21f19e3
    Author: Platon Mysnyk &lt;Heonozis@mail.ru&gt;
    Date:   Sat Oct 10 16:04:29 2015 +0300

        Merge pull request #98 from techmarket/fix-webinar-hosts-all-questions-issue

        Fix webinar hosts all questions issue

    commit 21f19e3585329d3d2006e32254ff62808b241f90
    Author: Ronak &lt;coolronak.shah@rediffmail.com&gt;
    Date:   Sat Oct 10 16:27:21 2015 +0530

        Reverse the QA order in Webinar host Layout

    commit ea539597995011952b2ca083ae61b4ca1c4176aa
    Author: Ronak &lt;coolronak.shah@rediffmail.com&gt;
    Date:   Sat Oct 10 16:12:28 2015 +0530

        Fix Webinar Host Layout QA section update and Also changed the Alert message for Vote chart refreshed in host layo
    commit 38a68bda7d0e7c13d92bf42f791f9c3e805d909d
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 16:23:39 2015 +0600

        ""panelist_id"" and auth fix with help of @Ronak

    commit 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 13:31:08 2015 +0600

        Animation for removing item

    commit 2181c108c76f187c09744ae6df131f8f80f0b16d
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 12:27:53 2015 +0600

        Animation Added in QA

    commit 180337bfe91686d137e3222c196e626f712832b1
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 12:17:34 2015 +0600

        All AJAX of this page ""http://localhost/gtwhero/public/webinar/LB42JgKdjEAOAe5b37MV/panelist"" done

    commit e25c6c19605627a00ca033139c2d98af0feacacf
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 07:45:42 2015 +0600

        Before breakfast - done, remaining AJAX query
</code></pre>

<p>The code is already pushed in github.</p>

<p>I want to go back to the state when I have made a commit-</p>

<pre><code>    commit 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 13:31:08 2015 +0600

        Animation for removing item
</code></pre>

<p>So, what I had tried is-</p>

<blockquote>
  <p>git reset --hard 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2</p>
</blockquote>

<p>When I run it, it says, ""<strong>HEAD is now at 3ba2bfe Animation for removing item</strong>""</p>

<p>But I am finding that, it is not the state when I had made the commmit.</p>

<p>What can I do, can anyone please help?</p>
","4","2193439","",""
"47875085","7814604","2017-12-18 19:22:37","0","69","<git><branch><git-commit><git-revert>","Undo committed changes","<p>I learn from a book, called Ryan Hodson - Ry's Git Tutorial, and it says:</p>

<blockquote>
  <p>Before we undo the changes, we need to return to the master branch. If we didn’t, all of our updates would be on some non-existent branch. You should never make changes directly to a previous revision.</p>
</blockquote>

<p>What does it mean?</p>

<p>In my case, I'm at the tip of the <code>master</code> branch, and i have to revert to the previous commit</p>
","3","7814604","",""
"29737969","1148287","2015-04-20 01:32:54","-1","76","<git><github><git-commit>","How to reverse the ENTIRE commit history in git?","<p>My commit history currently looks like, let's say, <code>A-B-C-D-E-F</code> with <code>F</code> being the HEAD. For some weird reason, I want it to be like <code>F-E-D-C-B-A</code> with <code>A</code> as HEAD. I can't let others just checkout branch <code>A</code> because I want them to see the entire change history from <code>A</code> back to <code>F</code>. Is there any way I could entirely reverse the commit history in git? </p>

<p>Updated:
(Requirement:
Okay, so, there's this huge codebase that's not on git. All we have is vague documentation about changes made (in text files). We want to put that in git, for future users and ease of maintenance. However, we did not have a proper original version. However, we did have the files like how they look now and the rough change docs. So, we took the current version, reverse applied the forward-changes to make it look like versioned-back. That way, we do have the original version now, but it's HEAD. We want the HEAD to be the last (which was the one we started out with) and also need this history.
)</p>
","2","1148287","",""
"33097657","4030539","2015-10-13 08:24:39","3","3650","<git><github><message><commit><git-commit>","How to write a good Git commit message?","<p>I know it's not to be opinionated here but my question is, what is a good way of writing concise commit messages?</p>

<p>I've been using Git (SmartGit, SourceTree) for a couple of months now and as I'm getting more used to it, I'm starting to realize that my commit messages are not clear or detailed enough for history viewing i.e. I'm falling in my own tracks.</p>

<p>So far I've been writing my solution like ""Work in progress/done: yadayada.."" but even so it feels I could do this better.
Anything is welcomed :)</p>

<p>P.S. I do a lot of front-end (html, css, js). </p>

<p>/P</p>
","1","4030539","0","0"
"13708054","279671","2012-12-04 17:01:22","2","214","<git><githooks><git-commit>","Is it possible to change Git standard messages when committing?","<p>Is it possible to change the part:</p>

<pre><code># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
</code></pre>

<p>To say:</p>

<pre><code># Staged:
</code></pre>
","2","279671","",""
"64975319","13173633","2020-11-23 19:46:02","0","193","<git><git-commit><git-checkout><git-log>","How To View The Whole Project In Another Commit While Showing All The Other Commits","<p>I like this neat little feature in Intellij where I can do something like this:
<a href=""https://i.stack.imgur.com/pGw3Y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pGw3Y.png"" alt=""enter image description here"" /></a></p>
<p>As you can see in the picture, I reset HEAD to the commit that reads &quot;revert .... own&quot; where I can view the entire project structure at that commit. However, I still see all of the other commits above that, so at any time I can choose to see one commit above that at any time. For example, if I realized that I wanted to see &quot;correctly used antlr&quot; instead of the commit that I'm on right now, then I can just reset to that commit right away. Intellij shows where HEAD is as and where master is at at all times.</p>
<p>In the command line, however, I couldn't find this same behavior. Looking at other StackOverflow questions, I tried these two methods:</p>
<pre><code>1. git checkout &lt;commit_id&gt;
2. git reset --hard &lt;commit_id&gt;
</code></pre>
<p>With the first method, <code>git checkout &lt;commit_id&gt;</code>, I don't get the same effect as what I intended. Here is what shows when I do a <code>git log</code>:</p>
<p><a href=""https://i.stack.imgur.com/cyJPR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cyJPR.png"" alt=""enter image description here"" /></a></p>
<p>It shows the correct information (where HEAD is at, where master is at). However, I do <code>git checkout HEAD~1</code>. Then when I do <code>git log</code> I get:</p>
<p><a href=""https://i.stack.imgur.com/EJMj3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EJMj3.png"" alt=""enter image description here"" /></a></p>
<p>In this picture, the only information given is where HEAD is at. I don't see any commits above that when I type git log.</p>
<p>The same thing happens when I use <code>git reset --hard</code>. I get reset to that commit, but <code>git log</code> doesn't show any commits above that.</p>
<p>What I want to happen is I can just surf the commits by resetting to that commit to view the entire project at that commit, then when I type <code>git log</code> it shows all the commits (even the most recent one), where HEAD is at, and where master is at. Then I can reset to any commit I choose, even the ones more recent than the current commit.</p>
","0","13173633","",""
"64976151","1706091","2020-11-23 20:44:44","1","986","<git><github><git-commit><pull-request>","GIT Commit Message for a PR","<p>Is there any git Command to get the commit message for a specific PR.</p>
<p><code>git log</code> gives me the complete history, but I have a PR and wanted to list all the commit message for the PR.</p>
","0","1706091","",""
"19764247","2311320","2013-11-04 08:50:21","0","124","<git><git-commit>","how to change commit message of an old commit in git","<p>I found some topics about this, but they were helping for commits that were made just now and are still the last commits in the repository. My situation is that the commit is old. The git repository looks like that:</p>

<pre><code>    ^
    ^
    | ""master"" latest commit
    | 11 other commits
    | merge branch ""master""
    | 5 other commits
    | merge branch ""master""
    | 2 other commits
    | merge branch ""master""
    | THE commits which name I wish to change
</code></pre>

<p>All of these commits have been pushed. So it is deep down. I would appreciate if someone could give me suggestion of how to change the name and also, if the command involves <code>HEAD~number</code> to tell me the number (that is why I showed the current hierarchy condition of the repository). </p>
","3","2311320","",""
"19815792","2796220","2013-11-06 15:16:09","0","833","<git><git-commit>","Delete commits from remote Git repo that are behind local","<p>I have a four unsynced commits in Git, one ahead and three behind. I want to push the commit that is ahead to remote and delete the other commits from the remote branch. How can I do this?</p>
","3","2796220","",""
"57923681","6037217","2019-09-13 12:29:39","1","1190","<git><github><version-control><commit><git-commit>","Is there a way to know if a commit date was modified?","<p>I'm doing classes in a university course and one of the tools we teach and use is VCS, GitHub to be precise.
So, for the students to learn how to use Git and for us to be able to track a student's progress we make them submit their homeworks via GitHub and that's been working very well for the last semesters.</p>

<p>The problem with doing things as explained before is that one can relatively easy modify the commit timestamp, so if a student wanted to they could change the last commit date to be before the deadline even if it was done after.
For now we trust that the students won't do that, but I would like to know if there's a way to know if the timestamp was modified, just in case.</p>
","4","6037217","",""
"39141037","2309869","2016-08-25 09:06:42","0","30","<git><blob><git-commit>","In a git source repo can I get the list of file names and their sizes with just metadata of the Git commit tree?","<p>I want to list down the file names and their sizes in a git repository for some specific commit. </p>

<p>Does <code>Git</code> store this data with the <code>git blob</code> object in the commit tree ? </p>
","0","2309869","",""
"20033023","145277","2013-11-17 16:14:47","10","5786","<git><git-branch><git-commit><git-reset>","revert the git last commit and save it in a different branch","<p>Is there a way to rollback the last commit and put it into a separate branch for later testing? I did some changes which I don't want to entirely throw away, I just want to keep them aside in a different branch for further testing.</p>

<p>Can anyone help me with this?</p>
","0","145277","0","0"
"58078684","4858756","2019-09-24 10:51:55","0","92","<git><git-commit><revision-history>","How to delete merge history of a file in git","<p>I am merging binaries in git repository and keep on updating the binary. Even though I am replacing the binary, the git repository will store the history so size of the repository scales up which I want to avoid.</p>

<p>To illustrate my scenario:</p>

<p>These are my commits:</p>

<pre><code>f7f9345 Updating the xyz binary to latest version 0987.
f7f4fgw Updating the xyz binary to latest version 0986.
f7f9454 Updating the xyz binary to latest version 0985.
f7f923f Updating the xyz binary to latest version 0984.
ig4254v Updating the xyz binary to latest version 0983.
h545433 Updating the xyz binary to latest version 0982.
g7f934w Updating the xyz binary to latest version 0981.
h7f9344 Updating the xyz binary to latest version 0980.
m7f934f Updating the xyz binary to latest version 0977.
i7f9345 Updating the xyz binary to latest version 0976.
u7f9346 Updating the xyz binary to latest version 0987.
w7f934g Updating the xyz binary to latest version 0927.
f7f934d Updating the xyz binary to latest version 0917.
h7f9344 Updating the xyz binary to latest version 0887.
</code></pre>

<p>I am basically replacing xyz binary with new version of itself by deleting the existing binary. But git history would store all the binaries since the first time a binary got created in the repository which will bloat the repository size.</p>

<p>I want to delete the binaries from git history and limit the history to only 5. So when I give git log, I should get only latest 5 commits.</p>

<pre><code>f7f9345 Updating the xyz binary to latest version 0987.
f7f4fgw Updating the xyz binary to latest version 0986.
f7f9454 Updating the xyz binary to latest version 0985.
f7f923f Updating the xyz binary to latest version 0984.
ig4254v Updating the xyz binary to latest version 0983.

</code></pre>
","2","4858756","0","0"
"39252866","","2016-08-31 14:51:34","8","4134","<git><git-rebase><git-commit>","Are there any real differences between using ""fixup!"" or ""squash!""?","<p>I've been reading git documentation on <a href=""https://git-scm.com/docs/git-commit"" rel=""noreferrer"">commit</a> and <a href=""https://git-scm.com/docs/git-rebase"" rel=""noreferrer"">rebase</a>, but I still don't understand the difference between using <code>fixup!</code> or <code>squash!</code> as a prefix for the commit message when doing a <code>rebase --autosquash</code>.  I believe I understand what <code>fixup!</code> does in terms of <a href=""http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html"" rel=""noreferrer"">fixing previous commits</a>, but I fail to see a good example where <code>squash!</code> is used instead.  Can anyone clarify the difference between the two and give some context where they would be used differently?  Thanks in advance!</p>
","3","","0","0"
"20099671","425893","2013-11-20 15:13:31","13","2745","<git><git-commit>","Can additional data be put into a git commit object?","<p>On every tutorial site about git objects I'll see an example where git cat-file displays what the commit object itself looks like, and it's usually something like the following:</p>

<pre><code>tree 552acd444696ccb1c3afe68a55ae8b20ece2b0e6
parent 6a1d380780a83ef5f49523777c5e8d801b7b9ba2
author John Doe &lt;john.doe@exampler.com&gt; 1326496982 -0600
committer John Doe &lt;john.doe@exampler.com&gt; 1326496982 -0600

Some commit message here.
</code></pre>

<p>If there were additional (single line) data fields at the top, would this confuse the git tools? I assume that even if it didn't, these fields wouldn't show up in git log.</p>

<p>If it can have additional fields, which git plumbing command would allow you to create that? git commit-tree doesn't seem that flexible.</p>
","6","425893","0","0"
"39261961","","2016-09-01 02:51:13","9","5273","<git><git-bash><git-commit>","What's the use of ""standard input mode"" for `git commit -F -` in Git Bash for Windows?","<p>I understand that the following command takes the text from standard input and uses it as the message for the commit log:</p>

<pre><code>echo ""hello world"" | git commit -F -
</code></pre>

<p>But, if you just have it as <code>git commit -F -</code> then it brings you to what I call ""standard input mode"" where Git Bash displays the message <code>(reading log message from standard input)</code> and awaits some kind of input...  I guess.  My question is what is this mode really and can it be used at all?  I've entered text and exited by using <code>ctrl-z</code> and <code>ctrl-c</code>, but had no luck in having the commit to run successfully afterwards.  It would just bring me back to the prompt.</p>

<p>Question: What is actually going on in ""standard input mode"" and can it be used to enter the commit log message successfully?</p>

<p>EDIT: I've tried <code>ctrl-d</code>, but nothing changes.  I'm using Windows 10.</p>
","0","","0","0"
"20111919","1353323","2013-11-21 03:32:22","0","140","<eclipse><git><git-commit><git-bash>","Git creating directory in repository [Codespaces]","<p>My Setup: I do the  local commits in Eclipse IDE itself. My local repositories resides within the workspace as well.
Somehow I couldn't do remote commits using Eclipse so I just did, thus I've been using git bash to do remote commits to codespaces.com</p>

<pre><code>git remote add origin git@codespaces.com:acct_name/repo_name
git push origin master
</code></pre>

<p>This has served me well so far.</p>

<p>Now I created another repository, let's say <code>repo_foo</code>.
For this repository, I want to place multiple directories(projects) inside it. I don't really need the codespaces <code>Projects</code> here.
I just want to be able to do this.</p>

<pre><code>git remote add origin git@codespaces.com:acct_name/repo_foo/proj_1 
(currently this gives no repository in path error)
</code></pre>

<p>So the repo structure should looks like this.</p>

<pre><code>repo_foo
 - proj_1
   -src
 - proj_2
   -src
   -lib
</code></pre>

<p>etc.</p>

<p>Any ideas for this?</p>
","0","1353323","",""
"39393048","771469","2016-09-08 14:03:59","2","46","<git><time><git-commit>","All my commits have the same time","<p>As I just pushed my commits to GitHub, the website told my that the last update was 5 hours ago. I figured out the problem was local and that my commits were wrongly timestamped.</p>

<p>In the printscreen below, you can see that the dates and times on the right are exactly the same (I know I program fast, but not that much).</p>

<p>As you can see in the lower part, the <em>Author</em> is me with that enigmatic petrified time, but the <em>Committer</em>, although it's still me, has the normal time at which the commit has been made.
<img src=""https://s10.postimg.org/v6p7wxjll/git_time.png"" alt=""Same time in git""></p>

<p>I don't want to manually update the wrong times, mostly because it's already pushed and that I don't really care about 5 hours, but what can I do to fix the problem from now on?</p>

<p>As someone will obviously ask me to check my system time, now that I did and that it matches the <em>Committer</em> time (i.e. the good one).</p>

<h1>Edit</h1>

<p>The problem solved itself just like <strike>magic</strike> softwares. I still want to know why it happened, but I don't know how to reproduce the bug.</p>
","4","771469","",""
"39518222","6479096","2016-09-15 18:42:25","0","92","<git><pycharm><webstorm><git-branch><git-commit>","Git:Help to retrieve local commit in PyCharm, WebStorm","<p>I made a branch called <code>1.3</code> from master, then </p>

<pre><code>  $ git checkout 1.3
  $ git branch --set-upstream-to=origin/1.3
  $ git push -u origin/1.3
</code></pre>

<p>EDIT: I did a <code>git push -u origin master</code> before the above 3 steps if that makes any difference?</p>

<p>But somehow I lost the last local commit so meaning I can't even push to Bitbucket?</p>

<p>How to retrieve the last commit? Why is it lost or disappeared somewhere along the trace?</p>

<p>After generating ssh-key as personalid.</p>

<p>This is my ~/.ssh/config</p>

<pre><code>  Host bitbucket.org 
    IdentityFile ~/.ssh/id_rsa 

#Default GitHub user 
Host github.com 
  HostName github.com 
  PreferredAuthentications publickey 
  IdentityFile ~/.ssh/b


# Work user account 
Host bitbucket.org 
  HostName bitbucket.org 
  PreferredAuthentications publickey 
  IdentityFile ~/.ssh/workid 

Host bitbucket.org 
  HostName bitbucket.org 
  PreferredAuthentications publickey 
  IdentityFile ~/.ssh/personalid 
</code></pre>
","3","6479096","",""
"20397772","2432030","2013-12-05 10:41:15","0","126","<git><git-commit>","Edit username of old Git commits","<p>My global Git config had the wrong username and email address and I forgot to overwrite it in a specific project.</p>

<p>Now there are many commits and pushes done with the wrong username.</p>

<p>Is there any possibility to revert this or do I have to completely destroy the project and make it new?</p>
","0","2432030","",""
"39594572","2409793","2016-09-20 12:48:56","2","528","<git><github><bitbucket><git-commit>","Importing commit history from Bitbucket to Github","<p>I wanted to import a project from Bitbucket to Github (both public repos).</p>

<p>However at some point in time (not the commit pointed by HEAD) some very large files were used which made the above process to fail.</p>

<p>So I just pushed the plain source code to gh.</p>

<p>I would like however to be able to have the project's commit history to gh.</p>

<p>Is there a way to do this?</p>
","0","2409793","",""
"58603411","183652","2019-10-29 08:09:07","6","11480","<jenkins><jenkins-pipeline><sh><git-commit><commit-message>","How to access git commit message INSIDE sh STEP in a jenkins pipeline?","<p>I need to access commit message of current fetch from git repository, while completing some <code>sh</code> steps of different stages of a pipe in jenkins; but I didn't find any proper solution for it. It would be also nice if I could set the commit message as an environment variable, so that I could access it later on.</p>

<p>Please note that this is not a repetitive question, because none of similar questions on stackoverflow addresses exactly what I need. I need to have commit message in all of <code>sh</code> steps of my pipeline.</p>
","1","183652","0","0"
"20655073","1248175","2013-12-18 10:06:32","101","62565","<git><git-submodules><git-commit>","How to see which commit a git submodule points at","<p>As far as I understand, if you add a submodule in git, then the main repo contains a pointer to a certain commit of the submodule.</p>
<p>Is there any way to see to which commit the main repo points at for a specific submodule, without checking out the code of the submodule?</p>
","0","1248175","0","0"
"58614642","2539135","2019-10-29 20:06:57","0","953","<git><git-commit><git-reset><git-revert>","Reversing the git to the previous commit","<p>I have done something 20 commits before which are now breaking my code because of incompatibility issue and now I want to revert back it to that commit. 
I am stuck in </p>

<blockquote>
  <p>reset and revert </p>
</blockquote>

<p>command. Can anybody please tell me how I can revert back it to the old commit. I have pushed all my changes to master branch as I was working only on one branch. </p>
","3","2539135","",""
"39912814","607874","2016-10-07 08:29:09","1","61","<git><githooks><git-commit>","Git enforce commit of file pairs","<p>In my git repository I have a file <code>workflow.vsd</code> that represents a diagram created in Microsoft Visio.  </p>

<p>Since not everybody in our team has Visio installed, whoever changes the <code>workflow.vsd</code> must also generate a correspondent <code>workflow.png</code>.  </p>

<p>The problem is that quite often, people commit a new version of the <code>vsd</code> file and forget to commit the <code>png</code>, making the image outdated.</p>

<p>Is there some way for git to allow a commit only if both <code>workflow.vsd</code> and <code>workflow.png</code> are added under the same commit hash?</p>

<p>In other words, I want to commit the Visio project only and only if png is also commited:</p>

<pre><code>git add workflow.vsd worflow.png
git commit
</code></pre>

<p>and this should fail:</p>

<pre><code>git add workflow.vsd
git commit
</code></pre>
","1","607874","",""
"40007454","4962956","2016-10-12 20:08:39","0","57","<ruby><git><git-commit><git-log><git-revision>","Git revision id and date stay the same for all files","<p>I am iterating over a git repo, or sub repos recursively and I want to output (along with other details) the revision id of the latest commit (aka most recent) of when a file was modified.</p>

<p>My problem is that the revision id and date stay the same all the time, and I can't find my bug! Can you please help me?</p>

<p>A part of my code:</p>

<pre><code>Dir.glob(Dir.pwd &lt;&lt; ""/**/*"").each do |file|

  filename = ""#{File.basename file}""

  output = `git log -1 -r -n 1 --abbrev=5 --`pretty=format:\""%cd [%h]: #{filename}\""

  # Splits the string into different lines.
  gitLogArray = output.split(""\n"")

  # Outputs the content of the array.
  gitLogArray.each { |singleFile| file }
  puts gitLogArray
  end
end
</code></pre>

<p>As a result, I am getting:</p>

<pre><code>2016-10-12T20:21:47+01:00 [6a2b6]: simple.sh
2016-10-12T20:21:47+01:00 [6a2b6]: writeexit.o 
2016-10-12T20:21:47+01:00 [6a2b6]: writeexit.s
</code></pre>
","5","4962956","",""
"20941147","243827","2014-01-06 00:39:05","0","206","<git><git-commit><git-checkout><git-revert>","continue work and commits on same branch after having reverted/ reset","<p>Man, this git thing surely is a hard nut to crack! </p>

<p>So I have this branch:</p>

<p>a--b--c--d - mybranch</p>

<p>What I would do here is go back to commit 'b' and continue working and committing. but I would want to neither branch anew nor loose 'c' and 'd' commits. 
I have been reading about this git revert thing but can't wrap my head around it for all that is worth.</p>

<p>Help!</p>
","1","243827","",""
"2119480","50979","2010-01-22 18:21:34","401","57839","<git><git-rebase><git-commit><git-rewrite-history><git-amend>","Edit the root commit in Git?","<p>There's ways to change the message from later commits:</p>

<pre class=""lang-sh prettyprint-override""><code>git commit --amend                    # for the most recent commit
git rebase --interactive master~2     # but requires *parent*
</code></pre>

<p>How can you change the commit message of the very first commit (which has no parent)?</p>
","3","50979","0","0"
"20943535","2336762","2014-01-06 05:26:43","0","49","<git><git-commit>","Remove a commit in Git and any change with it","<p>I have added lots of lines in lots of files in a project then I made a commit. Now I want to delete that commit and all changes with it. By that I mean I want to remove the commit and with it all changes of codes done with that commit.</p>
","1","2336762","",""
"58884700","11736235","2019-11-15 21:08:29","1","465","<git><git-branch><git-commit><git-rebase>","Rebase branch preserving commits on another branch based on it","<p>Sorry if the title is misleading, but I'm not really sure how to describe the situation I've got.</p>

<p>I've commits and branches like this</p>

<pre><code>A --- B --- C --- D (master)
                   \
                    E (another)
</code></pre>

<p>and I want to remove commits <code>B</code> and <code>C</code> (preserving <code>D</code>) from <code>master</code> branch but keep them in <code>another</code> branch which is based on master.
So after the transformation my tree should look like this:</p>

<pre><code>A --- D (master)
 \
  B --- C --- E (another)
</code></pre>

<p>I figured, that I probably should just rebase <code>master</code>, but then I'm not sure if <code>B</code> and <code>C</code> will still be included in <code>another</code> not to mention removing / omitting <code>D</code> from it.</p>

<p>How should I proceed to achieve effect discribed above?</p>
","0","11736235","",""
"58963356","496553","2019-11-20 21:04:21","0","357","<git><github><git-commit>","how to git move folder and files to new folder and keep history?","<p>I want to a move folder and files in it to a new folder. Both folder name and file names have changed.</p>

<pre><code>Dir1
  file11
  file12

 TO

Dir2
  file21
  file22
</code></pre>

<p>I also want to keep the history. </p>

<p>Can I do this in one commit? Or I need the following 2 steps?</p>

<pre><code>git mv Dir1 Dir2
commit and push

git mv Dir2/file11 Dir2/file21
git mv Dir2/file11 Dir2/file22
commit and push
</code></pre>
","2","496553","",""
"21038045","3069143","2014-01-10 06:59:38","47","32502","<git><git-commit><git-reset>","How to undo git reset --soft to get my changes back?","<p>I had some local changes in my directory that I committed using git commit. Later I realized that by mistake my changes broke my build. So I did a <code>git reset --soft</code> on my repo.
But I screwed up, as I did not back up the changes that were all undone, as some of them did contain the new functionality that I wanted. Any help on how to undo a <code>git reset --soft</code> operation so that I can get my committed changes back.</p>
","3","3069143","0","0"
"59062440","8278075","2019-11-27 03:09:06","2","616","<git><github><rebase><git-commit><git-interactive-rebase>","What does COMMIT WILL BE LOST when rebasing in Git?","<pre><code>#
# Commands:
# p, pick &lt;commit&gt; = use commit
# r, reword &lt;commit&gt; = use commit, but edit the commit message
# e, edit &lt;commit&gt; = use commit, but stop for amending
# s, squash &lt;commit&gt; = use commit, but meld into previous commit
# f, fixup &lt;commit&gt; = like ""squash"", but discard this commit's log message
# x, exec &lt;command&gt; = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop &lt;commit&gt; = remove commit
# l, label &lt;label&gt; = label current HEAD with a name
# t, reset &lt;label&gt; = reset HEAD to a label
# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c &lt;commit&gt; to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
</code></pre>

<p>Is commenting out the line with the commit hash the same as using the DROP keyword?<br>
I'd like to rebase my Pull Request so it only has one commit submitted.   </p>
","0","8278075","",""
"40115723","5447513","2016-10-18 18:41:45","19","13134","<r><git><github><git-commit><git-rewrite-history>","Undo git commit in Rstudio that is too big to push","<p>I am very new to github and am trying to incorporate it into my work for the first time. I am working in RStudo, using the commit and push buttons in the gui. I put some of my data in the folder on my computer that I am working out of. I made a few commits, then I commited that data, and then I made another few commits. Then I tried to push the whole thing to github. However, I got an error message saying:</p>

<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.        
remote: error: Trace: f4a84c3a176d2c77039d041a21c0c455        
remote: error: See http://git.io/iEPt8g for more information.        
remote: error: File S_Fulltaxonomy.csv is 158.06 MB; this exceeds GitHub's file size limit of 100.00 MB        
To git@github.com:moanam/paper.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to 'git@github.com:moanam/paper.git'
</code></pre>

<p>My branch is now ahead of origin/master by 10 commits, with the problem commit somewhere in the middle.</p>

<p>I have looked for solutions to this and have found posts like
<a href=""https://stackoverflow.com/questions/30803175/undo-commit-in-middle-of-git-history"">undo commit in middle of Git history</a>,
<a href=""https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits"">How to modify existing, unpushed commits?</a>
and
<a href=""https://stackoverflow.com/questions/20002557/how-to-remove-a-too-large-file-in-a-commit-when-my-branch-is-ahead-of-master-by"">How to remove a too large file in a commit when my branch is ahead of master by 5 commits</a></p>

<p>However, the solutions to this are a line of code where the original asker is supposed to substitute a few words and run it somewhere. I really am very new to this and have no idea where to run all this code, what to substitute and how to find and change the problem commit in my work. How do I do this? Or is there a gui based version of undoing the commit in RStudio? Or could someone please explain exactly how to use the code?</p>

<p>I know that this is probably a very simple question and I am sorry for wasting your time with it. However, I have genuinely spent quite a while looking already and can't find anything simple enough for me to work with! There is always too much knowledge assumed. Thanks for your help!</p>
","0","5447513","0","0"
"21142184","2274530","2014-01-15 16:00:03","2","2444","<git><github><push><gitignore><git-commit>","Gitignore does not update a file already on my repo","<p>I have a simple problem with my git :</p>

<p>I have this file <strong>inc.conf.php</strong> on my repository on github.
I don""t want to delete him from the repo, it's a basic config file.</p>

<p>Now, on my local repo, I have the same file <strong>inc.cong.php</strong> with my own config, and I don""t want this file will be commited.</p>

<p>So I create a .gitignore and I add <strong>inc.config.php</strong> in.
(the .gitignore is commit and push on the repo)</p>

<p>But when I update the file <strong>inc.config.php</strong> in local and tape <code>git status</code> :</p>

<pre><code>On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   Swindle-Foundation5/inc.config.php

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>But I don""t want to change the file on the repository from github.
How can I do this ?</p>
","0","2274530","",""
"59067522","712347","2019-11-27 09:59:43","1","4517","<git><commit><git-commit><upstream-branch>","How to push a specific commit to a repo, not including the previous commits, without the history?","<p>I'm trying to push a specific commit to an <code>upstream</code> repo, which is the same as the one I'm working on, but with slight changes.</p>

<p>The current repo is ahead of the <code>upstream</code> one and I want to push some of the changes I made in the current repo, but not all of them.</p>

<p>When I do something like </p>

<p><code>git push upstream &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code></p>

<p>It works, but it also pushes all the other commits done between the last commit in my <code>upstream</code> repo and the commit that I'm pushing.</p>

<p>I want, however, to push only the changes made in <strong>that one commit</strong>, not the changes done prior to that commit. </p>

<p>How to avoid them being integrated?</p>

<p><strong>UPDATE</strong> The answers given explain how to push a specific commit (with all the history before it), but I want to push <strong>just the specific commit without the history behind it</strong>.</p>
","1","712347","",""
"59069648","712347","2019-11-27 11:54:06","4","1500","<git><git-commit><git-rebase><git-cherry-pick>","Git: How to cherry-pick a commit without all previous history","<p>I want to add some specific changes from a specific commit in my <code>current</code> repo to my <code>upstream</code> repo.</p>

<p>Running something like this:
<code>git push upstream &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code></p>

<p>adds the commit plus all the previous changes</p>

<p>Running something like </p>

<pre><code>git checkout -b new-branch 
git pull &lt;remote&gt; &lt;upstream branch&gt; branch is
git cherry-pick &lt;commit hash&gt;
git push &lt;remote&gt; new-branch
</code></pre>

<p>Also writes all the previous changes.</p>

<p>I just want to write the specific changes of that commit into the <code>upstream</code> repo, so it does not include the changes made by the previous commits in my <code>current</code> repo, which are not in the <code>upstream</code>.</p>

<p>There's lots of info on StackOverflow about <code>cherry-pick</code> and <code>rebase</code> but none answers this very specific question.  </p>
","0","712347","0","0"
"40206827","1996022","2016-10-23 19:14:14","2","379","<git><commit><git-commit><counting>","Count commits since last change to file","<p>I'm currently working on a system that automatically increments a version number. The version number is currently stored in a file using a major, minor and patch version. I thought about getting rid of the patch to prevent having to manually change the version number each time.
The patch would then simply be the number of commits since the last time the file (or the version if that works too) was changed.</p>

<p>Is this possible?</p>
","0","1996022","",""
"59078882","143397","2019-11-27 21:46:18","3","437","<git><build><cmake><clion><git-commit>","How to trigger cmake reconfiguration when tracking git commits in a CLion remote toolchain","<h2>Background</h2>

<p>I have a C++ project that uses CMake. I wish to encode the current git commit (and ""-dirty"" flag) into the application in a way that is automatically updated whenever the git commit changes, for example after a successful <code>git commit</code> or <code>git checkout</code>.</p>

<p>I understand I can do this by having CMake depend on the <code>.git/index</code> file, giving this:</p>

<pre><code>find_package(Git QUIET REQUIRED)

execute_process(
    COMMAND ""${GIT_EXECUTABLE}"" describe --match=NeVeRmAtCh --always --abbrev=8 --dirty
    WORKING_DIRECTORY ""${CMAKE_CURRENT_BINARY_DIR}""
    RESULT_VARIABLE res
    OUTPUT_VARIABLE GIT_COMMIT
    ERROR_QUIET
    OUTPUT_STRIP_TRAILING_WHITESPACE)

set_property(GLOBAL APPEND
    PROPERTY CMAKE_CONFIGURE_DEPENDS
    ""${CMAKE_SOURCE_DIR}/.git/index"")

target_compile_definitions(mylib PUBLIC GIT_COMMIT=\""${GIT_COMMIT}\"")
</code></pre>

<p>Then the target program (C++) can just use the <code>GIT_COMMIT</code> preprocessor symbol.</p>

<p>So my requirements are:</p>

<ul>
<li>The application will contain the git commit (and <code>-dirty</code> suffix if uncommitted changes are present) of the source it was built from,</li>
<li>The git commit compiled into the application will be updated if the git commit or the dirty flag state changes,</li>
<li>There should be no recompilation or relinking of the application if the git commit has not changed.</li>
</ul>

<p>This technique meets these requirements for local builds.</p>

<h2>The Complication</h2>

<p>The spanner in the works is that I'm using CLion to remotely compile the application (key issue) on a Raspberry Pi (that specific detail isn't important). Because of how CLion works, the <code>.git</code> directory (and therefore <code>.git/index</code>) is not copied over to the remote system. Therefore <code>.git/index</code> is simply not present when compiling the code on the RPi. This technique therefore fails as the required information is simply not available to the build system on the RPi.</p>

<h2>Question</h2>

<p>So I had the idea to somehow automatically create a new file, in the source directory (so that CLion will sync it to the RPi), that is based on <code>.git/index</code>, or perhaps just the output of <code>git describe</code>, on the host that CLion is running on. I would need this file to be updated whenever the git commit changes. The contents can be used to populate <code>GIT_COMMIT</code>. If this file is appended to <code>CMAKE_CONFIGURE_DEPENDS</code> then it will trigger a reconfiguration when the timestamp on the file changes, regardless of the contents. Instead I'd want the reconfigure to only happen if the <em>contents</em> of the file changes, since it will most likely be automatically updated by a generated makefile each time the makefile runs, but without changing the actual commit.</p>

<p>What is the right way to so solve this problem?</p>

<p>At this point I'm wondering if I'm overcomplicating things, so I'd appreciate any comments that might suggest an alternative approach, please.</p>
","0","143397","",""
"40214321","","2016-10-24 08:56:08","0","461","<git><github><git-merge><git-commit>","How to merge parts of old commit with HEAD in git?","<p>I tried to solve a coding problem using <code>Method A</code>. I committed the best working example of <code>Method A</code> (which I will call <code>""Commit 5""</code>). I wasn't fully satisfied with <code>Method A</code>. So I then continued developing the program using <code>Method B</code>. It is now at <code>""Commit 8""</code>. (All in master branch)</p>

<p>I've now decided to stick with <code>Method A</code>, but many other parts of the code have changed since <code>Commit 5</code>. I want to wind back all the code associated with <code>Method B</code> back to <code>Method A</code>, but keep everything else unchanged. These differences span multiple files.</p>

<p>How would I best achieve this in git? Is there some kind of <code>""manual partial revert-merge""</code> workflow to do this?</p>
","3","","",""
"59085318","6463555","2019-11-28 09:17:51","1","211","<git><github><git-branch><git-commit>","Finding branches to which a commit belongs to on github.com","<p>I want to know to which all branches contain a particular commit in a <a href=""https://github.com"" rel=""nofollow noreferrer"">github.com</a> repository. Suppose I need to list all branches which contain <a href=""https://github.com/esnme/ultrajson/commit/53f85b1bd6e4f27a3e4cdc605518c48a6c7e7e9e"" rel=""nofollow noreferrer"">commit</a>. I am aware of following ways:</p>

<ol>
<li>Swicth to each branch and see the last commit date and compare it with the commit's date. This is not feasible if there are multiple branches and tags.</li>
<li>Checkout the github repo and do <code>git branch --contains &lt;commit&gt;</code> (related <a href=""https://stackoverflow.com/questions/1419623/how-to-list-branches-that-contain-a-given-commit"">SO question</a>). I would prefer not checking out the repo as I need to browse a large number of repos on a daily basis.</li>
</ol>

<p>Both of these ways are time consuming. <strong>Is there a better way?</strong> </p>
","2","6463555","",""
"40293833","2012960","2016-10-27 20:39:37","7","5182","<github><github-api><git-commit><git-tag>","How to get all commits in a Git tag through GitHub API","<p>I have to fetch all new commits that were a part when a new tag was created on a Git repo. This needs to be done through GitHub API. </p>

<p>For example the Git UI says Tagging Tag1 and has a sha associated with it... let's say the sha is : SHA1 </p>

<p>Now how do I get all commits which happened or were a part of Tag1 through GitHub API? I want to store all these commits and perform some analysis on them.</p>
","5","2012960","0","0"
"40529466","1190602","2016-11-10 14:00:58","0","1887","<git><version-control><git-branch><git-commit><git-flow>","How to compare two git branches and filter the differences by commit message?","<p>I have a release branch named <code>release/X.X.X.X</code> which contains all feature branches I want to deploy to production. The release branch is made on top of <code>master</code> which is the current state of production.</p>

<p>On every release day I make sure our release branch contains only those changes planned for the release. I use this command to compare the release and master branch: <code>git log release/X.X.X.X ^master --no-merges</code>. I then manually check the commits for keywords like ""SHR-1234"" which represent ticket numbers in our ticket management system. I need to compare each commit with a list of ticket numbers to identify unwanted changes.</p>

<p>How can I filter commits that are returned by <code>git log release/X.X.X.X ^master --no-merges</code> and <strong>do not contain</strong> keywords like ""SHR-1234""? This way I can identify the ticket number of unwanted changes.</p>

<p>I tried grep and awk but the results are not useful because they don't filter out the whole commit.</p>
","5","1190602","",""
"21515084","1471417","2014-02-02 19:24:51","66","79258","<git><git-commit>","List files modified for particular git commit","<p>I have commit, <code>abc</code>, and I want to list files that were modified for the commit. </p>

<p>What is the git command which will list modified files for that commit?</p>
","0","1471417","0","0"
"2941517","130006","2010-05-31 05:30:21","788","217995","<git><git-commit>","How to fix committing to the wrong Git branch?","<p>I just made a perfectly good commit to the wrong branch.
How do I undo the last commit in my master branch and then take those same changes and get them into my upgrade branch?</p>
","1","130006","0","0"
"21787872","425893","2014-02-14 19:26:27","42","4940","<git><timestamp><epoch><git-commit>","Is it possible to set a git commit to have a timestamp prior to 1970?","<p>Unix timestamps are signed 32 bit integers (64 bit on some systems today, or so I understand). On some software products this allows you to use dates going back as far as 1903 or so. </p>

<p>However, when I try the following:</p>

<pre><code>git commit -m ""this is a test commit"" --date=""1960-04-07 18:00:00""
</code></pre>

<p>I receive an ""fatal: invalid date format"" error.</p>

<p>This isn't very practical (I'm not a time-traveler), but I've been wondering about using git for historical purposes. Can this be forced with a git plumbing command? On a related note: does git always use a 32 bit timestamp, or does this depend on the environment it's built on?</p>
","1","425893","0","0"
"59668696","5432156","2020-01-09 16:50:27","0","880","<git-commit><git>","How do I load the second to last committed version of my project using git?","<p>Suppose that I made some changes and did this:</p>

<pre><code>git add -A
git commit -m ""comment commit_1""
</code></pre>

<p>Now I made more changes and did this again:</p>

<pre><code>git add -A
git commit -m ""comment commit_2""
</code></pre>

<p>Now, I basically want to discard commit_2 and start modifying my project again at the point of commit_1.</p>

<p>How do I do this?</p>
","2","5432156","",""
"40895623","6855545","2016-11-30 18:28:42","1","63","<java><github><repository><egit><git-commit>","Egit - commited new project to wrong repository, can not delate it","<p>I recently created new project (""<code>FirstSimpleWebDataBase</code>"")  and committed it to new repo.<br>
Today I was working on my old project ( ""<code>BeamReinforcement</code>"" )  and accidentally pushed whole ""<code>firstSimpleWebDataBese</code>"" project into it's repository. </p>

<p>When I check repo at Github it's shows this:   </p>

<p><a href=""https://i.stack.imgur.com/fBE8J.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fBE8J.png"" alt=""enter image description here""></a></p>

<p>Added by accident project is grey and I would like to delete it.<br>
I checked history in EGit but there is not such commit so I can not reverse it from eclipse. How can I fix it ? </p>
","0","6855545","0","0"
"21912600","888478","2014-02-20 15:42:05","1","639","<git><git-commit><git-filter-branch><git-rewrite-history>","git filter-branch does fails when used with more than one file from git ls-files","<p>I trying to move some files with their history from one repository to another. There are many topics which discuss this, but i hit some problems which I did not see mentioned yet. </p>

<p>So the steps i do are:</p>

<pre><code>git clone --no-local --no-hardlinks /path/to/origninal-rep repA  
cd repA
git remote rm origin 
git filter-branch -f --prune-empty --index-filter ""git rm --cached --ignore-unmatch $(git ls-files | grep -v 'include/file1.h\|include/file2.h')""
</code></pre>

<p>with an intention to keep history related only to those two files and move them to another repository. However, i hit the following problem:</p>

<p>Rewrite 6768c299b2b25754a558336e025ce92576c954f2 (1/200)/Applications/Xcode.app/Contents/Developer/usr/libexec/git-core/git-filter-branch: line 329: CMakeLists.txt: command not found 
    ....</p>

<p>Strangely enough i can remove files one-by-one, this works for example:</p>

<pre><code>git filter-branch -f --prune-empty --index-filter 'git rm --cached --ignore-unmatch .gitignore' HEAD 
</code></pre>

<p>I also tried this on the dummy repository (with only couple of files) and everything worked fine! So it does not work in real life, perhaps somewhat related to the length of the output of <code>git ls-files</code>?..</p>

<p><strong>UPDATE:</strong>
I keep looking for solution, i wonder what should be the output of <code>git ls-files</code>? I have files listed with line breaks (1 file per line), whereas it seems that <code>git rm</code> should have files in one line, e.g. :</p>

<pre><code>git filter-branch --prune-empty --index-filter 'git rm --cached --ignore-unmatch DIR_1/* DIR_2/*' HEAD
</code></pre>

<p>could that be a problem?</p>

<p><strong>UPDATE2:</strong></p>

<p>I followed <a href=""https://stackoverflow.com/a/18261585/888478"">this</a> solution to achieve the goal, everything worked. </p>
","4","888478","",""
"59793226","11442976","2020-01-17 18:45:20","0","65","<git><gitlab><commit><git-commit>","Two differents accounts for one project GITLAB","<p>I don't speak English very well, but I will try to explain my problem in the best way.</p>

<p>I have two accounts for different gitlab servers, one for my work and another personal, for example:</p>

<p><code>User: personal-user → Email: personal@gmail.com → Server: gitlab.com</code></p>

<p><code>User: work-user → Email: user@work.com → Server: work.gitlab.com</code></p>

<p>But I only have one project, when I commit, gitbash asks me for an user and an email, but they are different for each server.</p>

<p>If I make the <code>commit</code> with a specific user and when I review the <code>commits</code> on the gitlab server it shows me that the user who made the commit is missing.</p>

<p>please check the next image:</p>

<p><a href=""https://i.stack.imgur.com/1a8qD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1a8qD.png"" alt=""enter image description here""></a></p>

<p><strong>How could I manage the project and upload it to the different servers in the best way?</strong></p>

<p>The idea is that when I do a push gitlab can register the commits for each specific user that corresponds to each server</p>
","3","11442976","",""
"41034483","2194736","2016-12-08 07:59:07","7","1518","<git><merge><git-commit>","Merge conflict with myself","<p>I had a merge conflict a while ago and had the suspicion, that it was with myself. Right now I had the same problem again and this time I'm certain, that I'm responsible for the conflict.</p>

<p>Yesterday I made some changes to my branch <code>commit</code>ed the changes and <code>push</code>ed them. This was the first and so far only commit to the branch (local, as well as remote).</p>

<p>Today I made some more changes (in the same files obviously), added the changes and commited them with <code>commit --amend</code>and tried to <code>push</code> them.</p>

<p>This is were I had a merge conflict: <code>Updates were rejected because the tip of your current branch is behind</code></p>

<p>I fixed the changes, added, commited and pushed them. All fine now.</p>

<p>But I want to learn from my mistakes. <strong>What IS the mistake?</strong> (I assume it has something to do with using <code>git commit --amend</code>)</p>
","0","2194736","0","0"
"22067873","1455384","2014-02-27 12:00:02","51","147972","<git><directory><git-commit>","Troubleshooting misplaced .git directory (nothing to commit)","<p>I started getting this message. No matter what I edit and try to commit, it says there is nothing to commit. Looks like git does not see my working directory and looking somewhere else. </p>

<p>If I run <code>git status</code> it outputs the same:</p>

<pre><code>nothing to commit (working directory clean)
</code></pre>

<p>If I create new branch and edit something, then same thing happens. This started happening when I needed to fix merge clashes. When I wanted to merge my one branch with master branch, I had to manually fix it and I needed my files to look exactly as in that branch overwriting master branch those same files. So I added those files and it let me merge it. But then no matter what I change it shows as there is nothing to commit. </p>

<p>What could be done here?</p>
","7","1455384","0","0"
"59928022","2879085","2020-01-27 09:15:33","2","1406","<git><git-branch><git-merge><git-commit>","Finding the source branch of a merge commit","<p>Let's say I have a feature branch called <code>feat</code> which got merged into the <code>master</code> branch:</p>

<pre><code>master feat
  |     .
 (1)    .
  |\    .
  | \   .
  |  \  .
  |   \ .
  |    \.  &lt;-- create branch `feat` from `master`
  |     |
  |     |
  |    (2) &lt;-- make a commit on `feat`
  |    /
  |   /
  |  /
  | /
  |/
 (3) &lt;-- merge `feat` into `master`
  |
</code></pre>

<p>How can I tell from the merge commit (3) what the source branch for that commit was (<code>feat</code>)?</p>

<p>I found that you can get a list of branch names given a commit hash by running <code>git branch --contains &lt;commit&gt;</code>, but then I'm still left with the problem that I don't know the commit hash of the last commit of the source branch (2).</p>

<p><strong>Edit:</strong><br>
No, <a href=""https://stackoverflow.com/questions/2706797/finding-what-branch-a-git-commit-came-from"">Finding what branch a Git commit came from</a> doesn't answer my question. Please read the last paragraph of this question.</p>
","11","2879085","0","0"
"22078931","802302","2014-02-27 19:52:22","2","83","<git><git-commit>","Git commit manually editting hunk","<p>So I have a problem adding hunks for my commit properly.</p>

<p>I have something like so:</p>

<pre><code>@@ -6,6 +9,5 @@
#include ""incfile.h""

 bool func3(int&amp;, const char*);
-int func1(const int, std::vector&lt;std::unique_ptr&lt;type&gt; &gt;&amp;);
-void func2(const std::vector&lt;std::unique_ptr&lt;type&gt; &gt;&amp;);
+int func1(const int, std::vector&lt;std::shared_ptr&lt;type&gt; &gt;&amp;);
 void func4(const int);
</code></pre>

<p>I am trying to only stage only the change to <code>func2</code> I want t he changes to <code>func1</code> in a diff commit, and I am struggling because every time and every combination of me removing <code>-</code> or lines or whatever is resulting in a patch that doesn't apply. I thought that I could simply remove the <code>-</code> from in front of <code>func1</code> and delete the <code>+</code> line for <code>func1</code> and it would be fine but it is not working.</p>
","0","802302","",""
"58232565","3061062","2019-10-04 08:26:08","2","410","<gitlab><branch><commit><git-branch><git-commit>","GITLAB web IDE change default option - create a new branch","<p>I'm using GitLab web IDE, but every time I want to commit my changes the default option is: ""Create a new branch"", with ""Start new merge request"" option checked.<br/><br/>
I want to push on develop branch, then I switch manually every time to develop... but this boring :(
<br/>
But before it was automatically ""Commit to develop branch"".
<br/><br/>Is there a solution to restore the previous configuration? thx</p>
","1","3061062","",""
"58295034","12184967","2019-10-08 23:03:37","0","438","<git><git-commit>","How do I remove an unpushed commit caused by a large file in the repo that has since been deleted?","<p>I am fairly beginner in git. My repo has simple MATLAB code files. I made the mistake of uploading a large file into the repo (> 100 MB).  After that, I used the following commands </p>

<pre><code>git add --all
git commit --all --message ""Moar""
git push --all 
</code></pre>

<p>The push command threw up the following error : </p>

<blockquote>
  <p>remote: error: GH001: Large files detected. You may want to try Git
  Large File Storage - <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>.
      remote: error: Trace: 47cf7a12aa48e59e3007901d70e3843b
      remote: error: See <a href=""http://git.io/iEPt8g"" rel=""nofollow noreferrer"">http://git.io/iEPt8g</a> for more information.
      remote: error: File prepro/workbench-windows64-v1.3.2/workbench/bin_windows64/rfMRI_REST1_LR_Atlas.dtseries.nii
  is 418.46 MB; this exceeds GitHub's file size limit of 100.00 MB
         ...
          ! [remote rejected] master -> master (pre-receive hook declined)</p>
</blockquote>

<p>I then panicked and deleted the above large file that was causing the error. But now I still get the same errors when I try to push to my master!! </p>

<p>These large files do not exist in my local repo anymore. So why isn't git letting me push ?  Also, I have some changes in the local repo after this happened so I cannot revert back to the most recent commit without these large files. </p>

<p>Is there a way to cleanly and precisely do it by letting git know that the large files do not exist in the repo anymore?</p>
","1","12184967","",""
"9674684","1070314","2012-03-12 20:56:06","0","3542","<git><github><git-commit><broken-links>","Git commit resulting in a missing tree error","<p>So I have a newly created repo and I attempted to commit my newly created code but I got an error. So I ran 'git fsck' on my repo and I got this error.</p>

<pre><code>broken link from    tree 9da8f3ce1355d9bdf03734d42ab15e50e5cf6361
              to    tree 64a40fc17140c1ce37720675d327d59aa9105ef1
missing tree 64a40fc17140c1ce37720675d327d59aa9105ef1
</code></pre>

<p>I am new to git, so I was wondering what can I do to fix this error?</p>

<p>Thanks!</p>

<p>I looked at : <a href=""https://stackoverflow.com/questions/5049603/git-missing-commit-error"">Git Missing Commit error</a> and I didn't understand it.</p>
","2","1070314","",""
"9683279","484099","2012-03-13 11:41:20","871","318412","<git><github><git-commit>","Make the current commit the only (initial) commit in a Git repository?","<p>I  currently have a local Git repository, which I push to a Github repository.</p>

<p>The local repository has ~10 commits, and the Github repository is a synchronised duplicate of this.</p>

<p>What I'd like to do is remove ALL the version history from the local Git repository, so the current contents of the repository appear as the only commit (and therefore older versions of files within the repository are not stored). </p>

<p>I'd then like to push these changes to Github.</p>

<p>I have investigated Git rebase, but this appears to be more suited to removing specific versions.
Another potential solution is to delete the local repo, and create a new one - though this would probably create a lot of work!</p>

<p>ETA: There are specific directories / files that are untracked - if possible I would like to maintain the untracking of these files.</p>
","4","484099","0","0"
"64735788","14108750","2020-11-08 07:31:43","4","3058","<git><github><git-commit>","Clear Git commits before push","<p>I committed and then tried to push files that are too large to upload to GitHub.
How can I &quot;clear&quot; this commit in order to be able to make another commit and push it?</p>
","1","14108750","",""
"64742699","2555516","2020-11-08 20:27:26","0","229","<git><git-commit>","Is there a way to set a fallback git commit template?","<p>Reading <a href=""https://git-scm.com/docs/git-commit"" rel=""nofollow noreferrer"">the docs</a> doesn't tell me whether this can be done or not, which indicates to me it can't be done, but I want to check with some smarter people. I think it would be very helpful to indicate both a project template <code>template = .git/gitmessage</code> and a global template <code>template = ~/.gitmessage</code> to fallback to if the project one doesn't exist. I have tried adding 2 <code>template</code> entries in <code>~/.gitconfig</code> and pointed one at a global template and one at a local template and that didn't work no matter what order I put them in.</p>
<p>Relevant documentation:</p>
<blockquote>
<p>When editing the commit message, start the editor with the contents in the given file. The commit.template configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the -m or -F options.</p>
</blockquote>
","0","2555516","",""
"58370807","5145132","2019-10-14 05:56:07","4","1106","<git-commit><git>","What does the git commit --squash option do and why would it be useful?","<p>I've been looking for an alternative solution for squashing a series of commits in a branch. What I've done in the past is to use <code>git rebase -i HEAD~&lt;#commits&gt;</code> and  then chose which commits to squash. Typically I <code>pick</code>ed the latest commit, and squashed redundant commits in between.</p>

<p>This approach works reasonably well, but I was hoping for a faster way. I noticed that there is a <code>--squash</code> option for <code>git commit</code>. But I'm not sure how this works. What does it do exactly, and how do you use it? Would this be a solution for my problem?</p>
","0","5145132","",""
"9727839","736981","2012-03-15 20:41:12","1","8202","<git><git-commit>","How to remove a specific commit in the local git repo?","<p>My local repo contains the following commits:</p>

<pre><code>A ---- B ---- C ---- D ---- E
        \
         1 ---- 2
          \    /
           1.1 
</code></pre>

<p>The lettered changes are on the remote repo. Changes 1, 1.1, and 2 are temporary changes in my local repo that i no longer want. These may have been automatically created when i created a stash with uncommitted changes on top of B; that stash has been deleted. I'd like to make the history less complicated, which is why i'd like to get rid of these.</p>

<p>I can clearly get rid of these by blowing away my local repo and cloning the remote repo again, but this seems heavy handed. And there is a local branch not in the remote repo that i want to keep.</p>

<p>From what i've read so far, the discussions have been on how to squash multiple commits into one. I haven't found anything on deleting commit objects. I also tried to ""git prune &lt;hash of commit 2&gt;"" and it didn't do anything.</p>

<p>How do i get rid of commit objects 1, 1.1, and 2?</p>

<p>Thanks in advance.</p>
","0","736981","",""
"20461641","906658","2013-12-09 01:33:41","3","1618","<git><git-rebase><git-commit>","How to reword a Git commit by its SHA1 hash?","<p>I have created a commit with a commit message that I want to modify. I have not published the commit, yet, so I can rewrite history safely. I can find using git log, so I know its sha1 hash. How can I quickly edit the commit?</p>
","0","906658","0","0"
"64766508","11758792","2020-11-10 09:50:40","2","249","<git><github><git-commit>","Git change user's credentials in past commits without changing the history (date of commits)","<p>I've started to work on some projects in the past without giving my correct GitHub email address in the credentials of git from Terminal. So every commit was showed as follows:</p>
<p><a href=""https://i.stack.imgur.com/dRaRn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dRaRn.png"" alt=""enter image description here"" /></a></p>
<p>These commits are made without my user name so these commits are also not showing in the contributions section:</p>
<p><a href=""https://i.stack.imgur.com/8shgl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8shgl.png"" alt=""enter image description here"" /></a></p>
<p>As it is shown in image 1 that I've made a commit on March 14 but it is not shown in the contributions (because of the wrong email was set for the git credentials). Now I all my latest contributions are shown correct but I also want all the old contributions of my past projects to be shown like this. But I don't want to change the history of commits (i.e. date).</p>
","4","11758792","",""
"64770626","4332744","2020-11-10 14:16:32","-1","31","<git><git-commit>","How to reset git back to what I have pushed","<p>I have did a checkout and the crontab did an entry in one file. I have commited the changes withouth push. Now I want to go back to the last comit before the checkout. Anyone knows how exactly to do this?</p>
","0","4332744","",""
"9742073","408324","2012-03-16 17:46:29","75","25804","<github><git-commit>","Graphics in GitHub commit messages","<p>How to add graphics/image in git commit messages (pushed to Github)?</p>
","3","408324","0","0"
"9745941","454780","2012-03-16 23:51:22","9","10196","<git><git-push><git-pull><git-commit>","How do I use the --work-tree option with git? I keep getting an error","<p>I have a normal repo where there is a working tree and a .git folder in the same directory as the working tree.</p>

<p>I'm trying to run a git command from outside this location with the command</p>

<pre><code>git --git-dir=/path/to/repo/.git --work-tree=/path/to/repo pull /some/other/repo master
</code></pre>

<p>but I keep getting the error <code>fatal: /usr/libexec/git-core/git-pull cannot be used without a working tree.</code>.</p>

<p>What am I doing wrong?</p>
","2","454780","0","0"
"20535194","2012282","2013-12-12 04:42:17","0","2629","<git><git-commit><git-checkout>","Commit then checkout another branch in git carries old commit?","<p>If I am on branch <code>b-one</code> and I run <code>git commit -m ""init commit""</code> and then <code>git checkout -b b-two</code>, does the commit carry to the new branch? More generally, are commits branch specific? Or when you commit, are you just committing on your local machine and can access that commit from any branch?</p>
","1","2012282","",""
"27863541","497669","2015-01-09 15:09:59","1","390","<git><git-merge><git-commit>","Merge code without creating a new commit id in git","<p>Is there a good way for doing a merge from some_other_repo_branch into another_branch without creating a new commit_id?</p>

<p>I've been using this:</p>

<p><code>
git checkout my_branch
git pull --rebase &lt;remote&gt; other_branch_where_are_the_changes
</code></p>
","2","497669","",""
"10153760","613318","2012-04-14 12:50:04","15","5152","<git><git-push><git-commit>","Edit an incorrect commit message in Git that has already been pushed","<p>I did a Git commit and push, but wrote the totally wrong thing in the comment. </p>

<p>How do I change the comment? I have already pushed the commit to the remote.</p>
","6","613318","0","0"
"10158594","509205","2012-04-15 00:33:43","8","2146","<git><version-control><git-push><git-commit>","git: how to ""consolidate"" the local commits","<p>I like to commit quite frequently (and even randomly) when I am working on some code, because if I screw up somewhere I can always roll back my changes. </p>

<p>However, when I decide to push all the changes to the master repository, I don't like people to see all the random commits, because some of them are really meaningless to them, and it makes the change tree unnecessarily long. </p>

<p>How do I ""consolidate"" all my local commits before I push? </p>
","2","509205","0","0"
"65099347","605578","2020-12-01 22:14:14","1","987","<git><azure-devops><git-merge><git-commit><pull-request>","Confused with pull request for dev back into master, listing merged commit again and again","<p>I use Azure Dev Ops and have a <strong>master</strong> branch and a very fresh <strong>dev</strong> branch that had master as &quot;parent&quot;.</p>
<p>Master has a policy that it can only be changed by pull requests.</p>
<p>When I make some changes in the <strong>dev</strong> branch, commit and push them I want those changes also &quot;going back&quot; into the master branch.</p>
<p>So I start a pull request for <strong>dev</strong> to <strong>master</strong>. There are no conflicts and I can complete the pull request/merge.</p>
<p>So, all is fine? But when I create a new pull request right away, again from <strong>dev</strong> to <strong>master</strong>, it lists me again the previous commit from <strong>dev</strong>. Shouldn't it (git/Azure Dev Ops) know, that this git has already been merged into <strong>master</strong>?</p>
<p>I thought I was being clever and now merged <strong>master</strong> into <strong>dev</strong>, thinking that this is maybe needed that <strong>dev</strong> is up-to-date (knowing the latest merge of the dev-commit into master - yes, I realize this is very likely silly). Then pushing this merge and checking in Azure Dev Ops. But now <strong>dev</strong> is ahead 2 commits and when I start a new pull request from dev to master, it now lists me the two commits as part of the new pull request. The first commit (which is already in master and the merge commit (master to dev).
<a href=""https://i.stack.imgur.com/nnhHm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nnhHm.png"" alt=""enter image description here"" /></a></p>
<p>So, I am now a bit confused and I believe I have never noticed this before. I thought that normally git knows, that commits have been already merged by a pull request and don't list them again and again.
<a href=""https://i.stack.imgur.com/bq09U.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bq09U.png"" alt=""enter image description here"" /></a></p>
<p>Is there something wrong maybe with the master branch and if yes, how could I fix this?</p>
","10","605578","0","0"
"65101141","3693060","2020-12-02 01:55:42","0","642","<git><github><azure-devops><git-commit>","Maintain same commit history in multiple repositories","<p>I have an ADO repository and a GitHub repository. Both repositories have a 'master' branch with the same commit history.
When I complete a Pull Request from any branch to 'master' branch and add a new commit to 'master' branch in ADO repository, I have to add the same commit to the GitHub repository and vice-versa so that commit history will remain the same. Is that possible? Please provide an example.</p>
<p>UPDATE:</p>
<p>I have tried the suggested solution:</p>
<pre><code>git clone https://msit.visualstudio.com/&lt;org&gt;/_git/&lt;repo-name&gt;
git config --global user.name &quot;abc@xyz.com&quot;
git config --global user.name &quot;ABC DEF&quot;
git checkout master
git add .
git commit -m &quot;abc&quot;
git push https://github.com/xyz/project.git
</code></pre>
<p>On trying the same, I get teh following error:</p>
<pre><code>fatal: Cannot prompt because user interactivity has been disabled.
fatal: could not read Username for 'https://msit.visualstudio.com': terminal prompts disabled
Switched to a new branch 'master'
Branch 'master' set up to track remote branch 'master' from 'origin'.

*** Please tell me who you are.

Run

  git config --global user.email &quot;you@example.com&quot;
  git config --global user.name &quot;Your Name&quot;

to set your account's default identity.
Omit --global to set the identity only in this repository.
</code></pre>
","3","3693060","",""
"58575177","5017647","2019-10-26 22:21:45","2","1033","<linux><git><githooks><git-commit>","Git hooks not getting pushed to bare repository","<p>I have a bare repository on a host machine and a local repository on my laptop.
I have 2 hooks: one pre-commit and one post-receive hook. Both are in my local hook folder:</p>

<pre><code>malek@laptop:~/Desktop/portfolio-website/.git/hooks$ ls
post-receive  pre-commit
</code></pre>

<p>And of course, I push my local repository to the remote repository (my local pre-commit hook works fine) but my hooks are not updated on my bare remote repository.</p>

<pre><code>malek@laptop:~/Desktop/portfolio-website/.git/hooks$ git push -u origin --all
Branch 'master' set up to track remote branch 'master' from 'origin'.
Branch 'production' set up to track remote branch 'production' from 'origin'.
Everything up-to-date
</code></pre>

<p>As you can see below:</p>

<pre><code>malek@localhost:~/portfolio-website/hooks$ ls
applypatch-msg.sample      pre-applypatch.sample      pre-rebase.sample
commit-msg.sample          pre-commit.sample          pre-receive.sample
fsmonitor-watchman.sample  prepare-commit-msg.sample  update.sample
post-update.sample         pre-push.sample
</code></pre>

<p>The <code>git log master</code> command returns</p>

<pre><code>commit 3403657fc4d08f406416711255cf04390a2df070 (HEAD -&gt; master)
Author: “Malek &lt;“myemail@gmail.com”&gt;
Date:   Sat Oct 26 18:06:06 2019 -0400

    Write Makefile and hooks

commit 484c283a9faf0afed14328c9b71e635338c86187 (production)
Author: “Malek &lt;“myemail@gmail.com”&gt;
Date:   Tue Oct 22 00:17:11 2019 -0400

    Master branch creation
</code></pre>

<p>Why aren't my hooks updated on my remote repository if the commit was sent successfully?</p>
","3","5017647","0","0"
"58586596","12055579","2019-10-28 06:36:28","0","255","<git><vim><command-line><git-commit>","How to recover old commit messages after accidentally exiting vim editor?","<p>Using: Windows 10, command-line with git commands</p>

<p>I was using git (following this tutorial: <a href=""https://help.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message"" rel=""nofollow noreferrer"">https://help.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message</a>) to change some old messages to commit messages to add something to each one. I used the command: <code>git rebase -i HEAD~10</code> and this showed the last 10 commits. After naming each 'pick' with 'reword' to the commit messages I wanted, I was not sure how to exit and save. Therefore, I decided to click the cross button on the command prompt and when I checked git log again on my project, all the last 10 commits were gone. How can I recover them?</p>
","1","12055579","",""
"58589411","7796773","2019-10-28 10:37:55","0","750","<r><github><rstudio><git-commit>","Git does not recognize my global user.email inside RStudio","<p>I am trying to commit my script changes inside RStudio, but I always get an error about not having a git account to refer to. </p>

<p>I have already tried to run in RStudio's Terminal:</p>

<pre><code>git config --global user.email ""you@example.com""
git config --global user.name ""Your Name""
</code></pre>

<p>Then I confirm that my account is correctly recognized:</p>

<pre><code>$ git config --global --list
user.email=my@email.com
</code></pre>

<p>I also refreshed the Git tab, and reopened the commit window, to no avail.</p>

<p>I checked <code>Tools --&gt; Version Control --&gt; Project Setup...</code>, which show my project URL correctly.</p>

<p>I expected to be solved after my e-mail being shown by the Terminal, but that's not the case.</p>
","8","7796773","",""
"58591147","656585","2019-10-28 12:43:17","1","76","<hook><git-commit><tortoisegit>","TortoiseGit's start-commit hook is executed too late","<p>I'm using TortoiseGit 2.8.0.0 with Git 2.20.1.windows.1 on Windows 10. In TGit I specified a start_commit_hook to execute a <code>.bat</code> file from the home folder of the local repository.</p>

<p>According to <a href=""https://tortoisegit.org/docs/tortoisegit/tgit-dug-settings.html#tgit-dug-settings-hooks"" rel=""nofollow noreferrer"">TortoiseGit Manual</a>:</p>

<blockquote>
  <p>Start-commit: Called before the commit dialog is shown. You might want to use this if the hook modifies a versioned file and affects the list of files that need to be committed and/or commit message. However you should note that because the hook is called at an early stage, the full list of objects selected for commit is not available.</p>
</blockquote>

<p>And indeed that's what I want: The hook shall modify some files before they are committed, while this is not regarding the commit message.</p>

<p><strong>Problem:</strong> The hook script is executed later than expected. This happens after the commit has been executed, which causes the files to be changed after the commit is finished.</p>

<p>Did I miss anything to configure?</p>
","3","656585","",""
"20640764","2499960","2013-12-17 17:26:02","5","1726","<git><git-branch><git-merge><git-commit>","Merge branch 'X' of URL into X","<p>When I and my colleague work on the same git branch, each of us sees a strange commit with message</p>

<p>""Merge branch 'X' of URL into X""</p>

<p>where X - the same branch.</p>

<p>after pull has been performed (and new changes came from remote).
I said ""strange"" because I previously work with SVN, and this process in SVN is transparent - SVN doesn't create a commit when I perform ""svn update"" in order to obtain changes from server.</p>

<p>Is it possible to avoid such commits? They litters log history...</p>
","0","2499960","",""
"65124470","10812503","2020-12-03 10:47:46","4","304","<git><push><commit><git-commit><git-push>","Git - programatically prevent ability to commit or push","<p>My use case:<br />
I have a project where I have to add one line of code so it runs on my machine. Before committing and pushing it I have to remove this line of code again.<br />
I often forget this so I was wondering if I could write a tool where I can &quot;raise a flag&quot;, which prevents me to commit or to push a commit until I &quot;remove&quot; the flag again.<br />
Is there a way to create some kind of lock file or set a setting so that git bash refuses my commit/push?</p>
","0","10812503","",""
"46466798","2709692","2017-09-28 10:25:08","0","102","<android><git><git-commit><git-checkout><repo>","Checkout to forward commit id","<p>Lets suppose I synced repo 10 days back through <code>repo sync -c -m &lt;manifest.xml&gt;</code> command.</p>

<p>Now, I want to checkout to a forward commit id which is 5 ahead from where currently I am. (I also have 5 days back manifest file too), is that possible? </p>

<p>As git log cant help as I am on 10 days back repo so read 5 days back manifest and got forward commit id.</p>
","0","2709692","",""
"65133524","2601512","2020-12-03 20:19:12","0","491","<git><git-commit><git-tag>","How to list all tags containing a commit's changes?","<p>Suppose I have 2 tags <code>X</code> and <code>Y</code> such that</p>
<pre><code>tag X log history: C1 C2 ... Cn
tag Y log history: Z1 Z2 ... Zm
</code></pre>
<p>If <code>hash(Ci) = hash(Zj)</code> (for a given <code>i</code> and <code>j</code>) and I want to know all tags having commit <code>Ci</code> I can just do, as answered in &quot;https://stackoverflow.com/questions/7923091/how-to-list-all-tags-that-contain-a-commit&quot;,</p>
<pre><code>git tag --contains Ci
</code></pre>
<p>and that would give me <code>X</code> and <code>Y</code>.</p>
<p>Is it possible to get the same response for the case that <code>hash(Ci) != hash(Zj)</code> but they both apply the same changes (say, for instance, they both add the same line in the same file but they differ in the commit message)?</p>
<hr />
<p><strong>Edit</strong></p>
<p>By saying that a tag &quot;contains a given commit's changes&quot; I mean that in the tag's log history, there's a commit <code>C</code> applying the same modifications than the given commit.</p>
","3","2601512","",""
"10207321","194428","2012-04-18 10:16:13","10","9961","<git><git-push><git-commit>","Git push all commits as single commit with custom message","<p>I was wondering if it is possible to push all my local commits (all 'unpushed' commits of the day) to the remote repository as a single commit with a custom message. None of the posts on Stack Overflow seem to answer this. I'm using Git Bash on Windows. </p>

<p>Thanks in advance.</p>
","0","194428","0","0"
"65136561","3693060","2020-12-04 01:16:13","1","63","<github><git-commit>","Getting rid of commit after completing Pull Request in GitHub repository","<p>I'm trying to create a Pull Request in GitHub repository from one branch to another branch. On completing the Pull Request, I see 2 commits being added:</p>
<p><a href=""https://i.stack.imgur.com/beUYK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/beUYK.png"" alt=""enter image description here"" /></a></p>
<p>Is there a way to get rid of the commit &quot;Merge pull request from ...&quot; via settings?</p>
<p>In ADO repository, there is an option to &quot;Rebase and fast-forward&quot; to get rid of that commit. Is there something similar in GitHub?</p>
<p><a href=""https://i.stack.imgur.com/9iOj2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9iOj2.png"" alt=""enter image description here"" /></a></p>
<p>Thank you!</p>
","0","3693060","",""
"65140997","623867","2020-12-04 09:27:23","1","856","<git><gitlab><commit><git-commit>","Managing multiple git commit email addresses","<p>I use my personal laptop for work (they are fine with it) but I have noticed that all my work commits use my personal email address. I don't want to default to my work email address globally on my machine for git, is there a way that when I commit I can have my personal email address for some repos and my work email for others?</p>
<p>I'm not bothered about rewriting the history on the existing commits, just moving forward.</p>
","1","623867","",""
"1962094","105760","2009-12-25 22:30:51","714","220934","<git><git-commit>","What is the Sign Off feature in Git for?","<p>What's the point of the <a href=""https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff"" rel=""noreferrer"">Sign Off feature in Git</a>?</p>
<pre><code>git commit --signoff
</code></pre>
<p>When should I use it, if at all?</p>
","0","105760","0","0"
"10230007","211659","2012-04-19 14:14:36","6","2263","<git><git-commit><gitk>","How do I do the reverse of gitk's ""Write commit to file""?","<p>I have written a commit to a file from <code>gitk</code> by right-clicking the commit and selecting ""Write commit to file"".</p>

<p>How do I apply the commit from this file? I can do <code>git apply</code>, <code>git add</code> and <code>git commit</code> combo, but isn't there a one-step command to just take the output (with the commit message and meta-data) and commit it as it is?</p>
","10","211659","",""
"10237071","714112","2012-04-19 21:28:45","938","299333","<git><commit><git-commit><git-amend>","How to amend a commit without changing commit message (reusing the previous one)?","<p>Is there a way to amend a commit without <code>vi</code> (or your <code>$EDITOR</code>) popping up with the option to modify your commit message, but simply reusing the previous message?</p>
","8","714112","0","0"
"39905991","426822","2016-10-06 21:36:28","0","140","<git><git-commit>","Modify commit message of past commit in git","<p>All I need to do is modify the commit message of some past commits in my branch locally, then push those modifications up to the server. I don't need to actually change any files in the past commits, and the past commits are not the most recent, they're from 2-3 commits ago.</p>

<p>Most answers I've seen deal with either modifying the files of past commits, or else just modifying the most recent commit message. Neither is quite what I'm looking for.</p>

<p>I'm hoping this is a quick and easy one for all you git experts :-)</p>
","1","426822","",""
"46495873","3130163","2017-09-29 19:40:22","0","948","<git><gitlab><commit><gerrit><git-commit>","Creating git project with initial commit?","<p>What is the difference between a git project with initial commit and with out initial commit in gerrit?</p>

<p>I have created project now users are facing issue with it.</p>
","1","3130163","",""
"10245445","800011","2012-04-20 11:34:26","1","617","<git><git-push><git-commit><git-amend>","How do I fix incorrect pushed commit in Git?","<p>I was so dumb that I committed and pushed it to the server and found out that the commit message was wrong. So I used --amend to fix the comment. But now I can't push to the server anymore :S </p>

<p>What to do?</p>
","1","800011","0","0"
"58848989","4565728","2019-11-14 03:35:31","1","88","<git><git-commit>","How do I roll back master to a prior commit, make a change, and then reapply everything that was rolled back?","<p>I have a master branch and a development branch both are in sync with each other currently.</p>

<p>I need to roll back my master branch to a prior commit (at least 30 commits back) so I can make a change and commit it. Then I would like to reapply everything and bring it back up to the current date in sync with development.</p>

<p>Can I do this by reverting master to a prior commit? Make the change, commit it, and then merge development into master. Would that work? Is there an easier or more appropriate way to do this?</p>

<p>Thanks in advance for your help!</p>
","2","4565728","",""
"27946405","4292689","2015-01-14 15:23:20","0","57","<netbeans><github><git-commit><netbeans-8>","GitHub with NetBeans strange contributor","<p>I am new to GitHub. </p>

<p>I am using NetBeans 8.0.2. </p>

<p>When i make commit and then push the changes on the GitHub website some strange user (<a href=""https://github.com/leandroizr"" rel=""nofollow"">https://github.com/leandroizr</a>) appears as contributor. </p>

<p>When NetBeans asked for username and passowrd i provided mine, why the commits are not appearing from my username ? 
When i make changes from the website, it shows my account.</p>

<p>p.s this is my account <a href=""https://github.com/milestojkovski"" rel=""nofollow"">https://github.com/milestojkovski</a> </p>
","4","4292689","",""
"39988118","4962956","2016-10-11 23:06:13","3","81","<ruby><git><git-commit><git-revision>","Git commit revision id to be five chars long when using pretty format in Ruby script","<p>My code is the following</p>

<pre><code>system('git log --pretty=format:[%h]: %an')
</code></pre>

<p>where %h gives the revision id of the commit, and it is seven characters long and %an is the author name.</p>

<p>My problem is that I want to have a five-digits revision id and not seven, but I can't find any flag of the form.</p>

<pre><code>--date=iso-strict
</code></pre>

<p>or whatever to do so.</p>

<p>How do I do it?</p>
","1","4962956","0","0"
"58858043","10864356","2019-11-14 13:35:00","1","56","<git><visual-studio-code><bitbucket><git-commit>","How to find commit when file was deleted?","<p>I just realized a file that I had a long time ago was deleted, and I want to find the specific commit in which it was deleted. I'm using Bitbucket and VsCode.</p>
","1","10864356","",""
"20925119","521070","2014-01-04 18:43:14","9","14799","<git><git-merge><git-commit>","Git: commit before merge?","<p>I was advised to commit all my changes before running <code>git pull</code> and merge. Does it make sense ? What if I run <code>pull</code> and <code>merge</code> <em>before</em> committing my changes and commit them <em>after</em> the merge?</p>
","0","521070","0","0"
"10677002","1048171","2012-05-20 20:38:15","3","2314","<git><github><git-merge><git-pull><git-commit>","Are ""Merge remote-tracking branch 'xxx/master'"" commits a trouble for Pull Request?","<p>There is a Github repository <a href=""https://github.com/C-Duv/AlerteLeboncoin"" rel=""nofollow noreferrer"">I have forked</a> on which multiple commits where made afterwards.</p>

<p>I wanted these corrections to be part of my forked repository I might have merged them (but can't remember how) and I now have a commit named <a href=""https://github.com/C-Duv/AlerteLeboncoin/commit/ec93dec3786a255f52ddfc1407220dd2d1222ff0"" rel=""nofollow noreferrer""><em>Merge remote-tracking branch 'blount/master'</em></a>.</p>

<p>Is it a problem for future pull requests I will make? Or will they have no incidence at all when the owner will accept my pull request?</p>

<p>I've found the <a href=""https://stackoverflow.com/questions/6406762/why-am-i-merging-remote-tracking-branch-origin-develop-into-develop""><em>Why am I merging “remote-tracking branch 'origin/develop' into develop”?</em></a> stackoverflow question which says how to avoid this situation, but not if existing <em>merge-commit</em> are a problem.</p>
","0","1048171","0","0"
"46817610","6540215","2017-10-18 19:15:08","-3","69","<git><github><visual-studio-code><git-commit><git-push>","If I edit local repo directly, what is the point of commits? Where are repo's stored? How does GitHub know who I am?","<p>I'm very new to git/GitHub and stack, so I'm sorry if I say anything wrong or phrase things badly.</p>

<p>I just downloaded VS code on my mac, and chose the option to ""Clone a Git Repository"" I entered the link of the one I previously made, which just had a readme.md. I then some dragged an empty-example project into the local repository, under documents, staged the files committed and pushed.
The repo is here: <a href=""https://github.com/Goel25/homePage"" rel=""nofollow noreferrer"">repo</a></p>

<p>My questions are:</p>

<ol>
<li>When I hit cmd+S, is it saving it directly in the local repo under my documents (where I chose to save it), or is the somewhere else?</li>
<li>If #1 is saving it directly in the local repo, what is the point of commits? Just to have a message?</li>
<li>Before I started using github, I just saved it in a projects folder on my desktop, is it possible for me to have the files saved on my desktop, commit changes to the local repo and then, every once in a while, push to the origin?</li>
<li>How does VS code already know my account? I remember when I was watching git tutorials I did <code>git config --global user.name ""my username went here""</code> and <code>git config --global user.email ""myemail.email.com""</code>, but do I not have to enter a password or anything? Can't I just type in someone elses username/email, and have all of their permissions?</li>
</ol>

<p>I really appreciate all the help, again sorry if I'm asking this badly, I'm very new to all of this.</p>
","6","6540215","",""
"21018486","2630106","2014-01-09 11:08:36","0","388","<git><github><git-commit><git-amend>","Why i can't use comand ""git commit --amend"" and push that to github","<p>firstly I cloned my own repo from github, because i wanna amend the last commit, so i type ""git commit --amend"" and push to github, but some errors occur. Some guys said that the operation doesn't allowed by github, unless make another commit, Is that true?  and how can i amend the last commit on github?</p>
","0","2630106","",""
"58953912","10118668","2019-11-20 12:01:52","0","156","<git><github><command-line-interface><git-commit>","Can I get my folder back after running git commit but not push?","<p>So I created a folder and created some files inside it.Now
I ran</p>

<pre><code>git init
git add .
git commit -m ""some message""
</code></pre>

<p>and now if I deleted the folder can I get it back</p>
","0","10118668","",""
"28275804","2715898","2015-02-02 10:39:19","18","22753","<git><git-commit>","git commit command hangs indefinitely","<p>When I tried to make a commit using <code>git commit</code>, the sublime text editor did open, I wrote the commit message and saved and closed the editor but the changes were not being committed. The terminal hanged at the <code>git commit</code>. </p>

<p>I searched the net and found someone with the same issue and applied the same fix without thinking anything. I ran the command: </p>

<pre><code>git config --global core.editor ""mate -w"" 
</code></pre>

<p>and now I have a new error when I run <code>git commit</code>:</p>

<blockquote>
  <p>mate -w: 1: mate -w: mate: not found
  error: There was a problem with the editor 'mate -w'.
  Please supply the message using either -m or -F option.</p>
</blockquote>

<p>Please help. I am very new with git and using Ubuntu 14.04. </p>
","6","2715898","0","0"
"46825958","8129489","2017-10-19 08:43:58","0","28","<git><github><git-commit><pull-request>","Github showing commits with other collaborators knowing the fact that I haven't changed those files","<p>The PR Page of the repo<br>
<img src=""https://i.stack.imgur.com/V3AOG.png"" alt=""The PR Page of the repo""></p>

<p>I have had only one commit and that is the fourth one in that list but there are extra three commits with collaborations from other developers which I havent taken part in. What is the main reason behind this and how do I fix it?</p>
","3","8129489","",""
"17683458","2585142","2013-07-16 17:41:45","2045","571828","<git><case-sensitive><git-commit><git-config>","How do I commit case-sensitive only filename changes in Git?","<p>I have changed a few files name by  de-capitalize the first letter, as in <code>Name.jpg</code> to <code>name.jpg</code>. Git does not recognize this changes and I had to delete the files and upload them again. Is there a way that Git can be case-sensitive when checking for changes in file names? I have not made any changes to the file itself. </p>
","4","2585142","0","0"
"65295631","13858953","2020-12-14 19:59:04","0","36","<github><repository><git-commit><git-fork>","When to commit your changes?","<p>Suppose I fork a repository and create a branch from the forked master repository.
Now while I am working on the file on Github itself without cloning it to the local disk other people commit to the master repository so like now I see this message on the top -</p>
<p>This branch is 1 commits ahead, 15 commits behind pandas-dev:master.</p>
<p>Now after doing my stuff should I directly raise a pull request ? or first do something so that it is not 18 commits behind.</p>
","0","13858953","",""
"29805204","1039350","2015-04-22 17:44:34","3","6508","<ruby><regex><git><githooks><git-commit>","Regex for Git commit message","<p>I'm trying to come up with a regex for enforcing Git commit messages to match a certain format. I've been banging my head against the keyboard modifying the semi-working version I have, but I just can't get it to work exactly as I want. Here's what I have now:</p>

<pre><code>/^([a-z]{2,4}-[\d]{2,5}[, \n]{1,2})+\n{1}^[\w\n\s\*\-\.\:\'\,]+/i
</code></pre>

<p>Here's the text I'm trying to enforce:</p>

<pre><code>AB-1432, ABC-435, ABCD-42

Here is the multiline description, following a blank 
line after the Jira issue IDs
- Maybe bullet points, with either dashes
* Or asterisks
</code></pre>

<p>Currently, it matches that, but it will also match if there's no blank line after the issue IDs, and if there's multiple blank lines after.</p>

<p>Is there anyway to enforce that, or will I just have to live with it?</p>

<p>It's also pretty ugly, I'm sure there's a more succinct way to write that out.</p>

<p>Thanks.</p>
","1","1039350","0","0"
"66577391","4687048","2021-03-11 06:19:44","2","1328","<git><git-commit><line-endings>","Git not converting line endings to LF on commit","<p>Even when setting <code>core.autocrlf=true</code> we are still seeing line endings committed as CRLF instead of LF (I can see the <code>^M</code> symbol when running <code>git diff</code> and <code>git log -p</code>)</p>
<p>This is causing merge conflicts sometimes as different developers use different settings in their editors.</p>
<p>How can we fix this with minimal future conflicts in a very active repository environment?</p>
","0","4687048","",""
"13767309","261159","2012-12-07 16:43:23","3","7253","<git><git-pull><git-commit>","Committing everything before doing a pull, why?","<p>While working in a branch I'll have a few files that I'm changing.  One of my colleagues tells me that he's pushed a change that I should pull to fix an immediate issue.  If I don't commit my changes, git won't let me pull. Even though none of my files I have modified are being updated.</p>

<p>I'm wondering why this is the case and if possible, is there a way to avoid this?</p>
","6","261159","",""
"33165849","4243217","2015-10-16 08:31:28","0","248","<git><github><git-commit>","git push in the open PR when local branch of it deleted","<p>I've created a pull request in the upstream with a branch named eg. <code>testbranch</code></p>

<p>Now, Unfortunately, my whole <code>git</code> folder from local gets deleted.</p>

<p>I've created a new <code>git</code> on my local where I can see only <code>master</code> when I do <code>git branch</code></p>

<p>I see that I need to push some commits to the open PR. But as the local branch is deleted, How can I do this? Is there any way that origin branch gets recreated on my local terminal and I can push the commits to the PR ?</p>

<p>Thanks.</p>
","0","4243217","",""
"28079546","821880","2015-01-22 00:43:03","16","23910","<git><git-merge><git-commit><git-pull><git-log>","How can I tell what happened in a Git commit with two parents that did not merge in the changes from the second parent?","<p>In Gitk I can see a team member's commit (X) that has two parents, the first parent is his own previous commit (A), the other parent contains lots of other people commits (1 through 5). After his merge all changes made by other people (1 through 5 and others) are no longer present at X, B, C, etc...  </p>

<pre><code>A------------
              \
               X - B - C 
              /
1--2--3--4--5
           /
e--r--j--k
     /
l--m
</code></pre>

<p>If I diff commit X to commit A it shows no differences, if I diff commit X to commit 5 it shows all the missing changes. Also, at commit X, B, or C git log does not show changes that were made to files in commits 1 through 5. However, if I do git log --full-history then history does show the changes that were made in 1 through 5, but those changes are not still present in the actual file and history does not show them being being undone. So git log --full-history seems to contradict the current file contents. </p>

<p>I talked to the user who made commit X. He says he did not do a reset or rebase and he says he hasn't reverted any commits during the time in question. However, he says that he does sometimes do a pull origin master that results in everyone else's changes getting put in his index or working tree as if he had made those changes and not the actual authors of those changes. He says when that happens he does a fresh clone and does not push anything from that local repo to master because he believes Git has done something wrong.</p>

<p>Are the two things related (bad pull and bad merge)?</p>

<p>How can I tell exactly what happened so that we can avoid this in the future?</p>

<p>And what causes Git to sometimes put changes pulled from origin master to be placed in the local working directory or index as if they were local changes?</p>
","2","821880","0","0"
"13770818","510036","2012-12-07 20:54:13","5","922","<git><git-submodules><git-commit>","Easy way to add -A/commit main/all submodules","<p>By using <code>git add -A</code> and <code>git commit -a</code>, I can obviously add/commit all changes to the repo I'm currently situated in. However, is there a way to include <em>all</em> submodules in an add/commit and apply the same commit message to each?</p>
","0","510036","0","0"
"46640326","301637","2017-10-09 06:49:29","0","1169","<git-commit><git-extensions><git>","Git Extensions 'Do not commit' not working","<p>I’m using the Git Extensions version [2.50.02 - latest (current)]. When I open the ""Merge branches"" I see the checkbox “Do not commit” is checked. </p>

<p><a href=""https://i.stack.imgur.com/HTww0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HTww0.png"" alt=""enter image description here""></a></p>

<p>When I perform a Merge, I see all changes are committed (not pushed to the remote). I was expecting these changes are not to be committed so I could review before pushing to the remote branch.</p>

<p>Log shows Git Extension performs the following command </p>

<blockquote>
  <p>git merge <em>branch</em> --no-commit --no-ff</p>
</blockquote>

<p>Has anyone seen this issue? If yes is there a work around?</p>
","9","301637","",""
"29822109","2471233","2015-04-23 11:29:00","0","82","<git><git-commit>","How to undo a deleted folder in a git commit","<p>I have a git branch that contains many needed changes.  It also appears that a big folder was accidentally deleted and committed to the same branch at the same time.</p>

<p>Is there a way to tell git to ignore the changes to the deleted folder that already were commited (within the branch, not merged yet) while keeping the other changes?</p>
","4","2471233","",""
"28091171","2851353","2015-01-22 14:28:11","0","1217","<git><git-commit><git-amend>","git amend added files in the staging area too","<p>I had changed a lot of files and added them in the Git staging area. Then, before committing them, I realised that I had to change the commit message of the previous commit. So, I did a <code>git commit --amend</code> and changed the commit message without going through the change log. Well, that added the files in the staging area to the previous commit too.</p>

<p>What should I do so as to make the previous commit in its original form and get my changed files back in the staging area so I could commit them separately ?</p>

<p>For what it's worth, I realise that I should have committed my changes first and then changed the commit message history using <code>git rebase -i</code>.</p>
","4","2851353","",""
"17754093","","2013-07-19 19:32:44","3","183","<python><git><github><git-commit>","Git not commiting files","<p>I created an executable of my Python Software via Py2Exe, which creates two new directories and multiple files in them. I also created a new Python File for doing this, called setup.py.</p>

<p>Whenever I open up Git GUI it shows the only uncommitted changes are in my .idea\workspace.xml file (this comes up with every commit), and setup.py. My other directories and files that I created do not show up. I've tripled checked that the files are in the correct directory (../Documents/GitHub/..), does anyone know of this happening before, or a solution to it?</p>

<p>EDIT: When trying to add the files, I get the error:</p>

<p><code>fatal: 'C:\Users\me\Documents\GitHub\Project\SubDir\build' is outside repository</code></p>

<p>EDIT: Fixed the problem, I wasn't able to add the directories on Friday, but today it let me for what ever reason.</p>
","9","","",""
"29845933","2765160","2015-04-24 11:08:24","1","164","<android><jenkins><jenkins-plugins><git-commit><spoon>","jenkins how to execute perticular command based on the keyword in the git commit message?","<p>When I do a git commit, in commit message I will specify <strong>test class name</strong> and in junkins post-build step I am running a shell command(spoon) which needs the <strong>class name parameter</strong> which is in the git commit message.</p>

<p>I have 6 test classes depending upon the commit message perticular command should run.</p>

<p>example commit message :- git commit 'update [<strong>coreTest.java</strong>]'</p>

<p>command to run</p>

<pre><code>java -jar spoon-runner-1.1.9-jar-with-dependencies.jar \
--apk example-app.apk \
--test-apk example-tests.apk
--class-name  coreTest.java
</code></pre>

<p><strong>coreTest.java</strong> is the class name should be placed depending on the commit message.</p>
","0","2765160","0","0"
"29848873","4716828","2015-04-24 13:31:56","4","4032","<git><wildcard><git-commit>","How do I add multiple files within the same commit, using a wildcard","<p>I have 7 files that I want to commit to a remote repo, that start with the word 'Sanity....'</p>

<p>For example Sanity1, Sanity2, Sanity3, etc.</p>

<p>I want to be able to commit them all at once using a wild card string rather that try and commit them one by one.</p>

<p>Is this possible, please?</p>

<p>Thanks</p>
","0","4716828","",""
"13811962","862877","2012-12-11 00:59:29","4","441","<git><git-commit><git-amend>","Why doesn't git amend warn you when there's nothing to amend?","<p>I oftentimes make the mistake of making a change to a file right after a commit, then running <code>git commit --amend</code> followed by a quick <code>git push -f origin master</code></p>

<p>The issue, obviously, is that I never ran <code>git add foo.md</code>. So my amend didn't actually amend any of my committed code.</p>

<p>Question is: Why doesn't git warn you when amending a commit with no changes? Better yet, why does it even complete successfully? Is it merely behaving like a ""touch"" in changing the timestamp of a given commit?</p>
","0","862877","0","0"
"33214492","5326499","2015-10-19 12:32:21","0","1282","<git><git-branch><git-push><git-commit>","git push only one commit from branch","<p>I have a commit <code>C1</code> in <code>master</code>. I have branched out after that and have made commit <code>C2</code> in branch. Now I want to push only commit <code>C2</code> to <code>master</code>.(<code>C1</code> is not yet ready to be pushed) How to do that.. </p>

<pre><code>    C2(branch)
  /
|
|
C1 (master)
</code></pre>

<p>Thanks..</p>
","0","5326499","0","0"
"29865578","1278284","2015-04-25 13:07:26","4","1239","<git><github><version-control><git-svn><git-commit>","How to find number of commits done to a file across a repository","<p>i was looking at a video ""Treat Your Code as a Crime Scene"".</p>

<p><a href=""http://www.infoq.com/presentations/code-bugs-legacy-pitfalls"" rel=""nofollow noreferrer"">http://www.infoq.com/presentations/code-bugs-legacy-pitfalls</a></p>

<p>inorder to know the complexity of the code he says to find the the number of commits done over to each file.This means that those file need more maintainance. how do i find hotspot like this guy done in this video.</p>

<p>This is between 13:20 - 14:20 in that video.</p>

<p><img src=""https://i.stack.imgur.com/5n5gz.png"" alt=""Treat Your code as crime scene""></p>

<p><img src=""https://i.stack.imgur.com/4QsKZ.png"" alt=""Treat you code as crime scene 2""></p>
","0","1278284","0","0"
"69317620","15178070","2021-09-24 15:30:23","1","1604","<python><git><git-bash><git-commit>","git commit is not working with ""python was not found..."" warning","<p>I am trying to commit a couple of files using <strong>git bash</strong> on <strong>windows 10</strong>. After doing <strong>git add</strong>, the file get staged and appear in green. Next when I run <strong>git commit</strong> , there is below message and nothing happens</p>
<p><em>&quot;Python was not found but can be installed from the Microsoft Store: ms-windows-store://pdp/?productid=9NJ46SX7X90P&quot;</em></p>
<p>I checked the python version by running python --version is git bash and it displays Python 2.7.2</p>
<p>Can someone please help me fix the issue with git commit ?</p>
","9","15178070","0","0"
"33240564","2012224","2015-10-20 15:23:02","2","848","<git><warnings><git-commit><git-amend>","How to make Git warn me about changing pushed commits?","<p>tl;dr: Committing something, pushing that, amending that commit and trying to push again without using <code>--force</code> fails. How to set up Git so that it tells, when I try changing 'published commits'?</p>

<hr>

<p>I am using Git for quite some time now and it still is one of the best things which ever happened to me (software-wise): it totally supports the way I do stuff out of the box. Just yesterday I did something stupid: I committed some stuff, pushed it to my remote, left the work for some minutes and when I came back, I noticed that I changed one of the files after I had added it, so that the commit was not complete. As usual, I used <code>git commit --amend</code> to fix this minor problem.</p>

<p>I worked on for several hours and decided that it was time for another <code>git push</code>. To my dismay, git refused to that and reading the message, scrolling back some thousand lines I saw what I did and knew what was going on. The remote basically is nothing more than a private off-site backup and nobody else uses it to push or pull. So I did not run into trouble with anybody rewriting history using <code>git push --force</code>. Since I would not like this to happen in a multi-user environment (either clean up my history or force-push) I thought about how to prevent this in future: Git could just issue a clearly visible warning, maybe even requiring me to type something. I'd notice and probably decide against amending.</p>

<p>So, the question is: how can I configure Git to warn me about amending commits which have already been pushed? Or more generally: how can I configure Git to warn me about changing published history?</p>

<p><strong>Edit #1 (~6 h later)</strong>: Unfortunately, I do not feel confident enough to try to implement this on my own, but maybe it helps somebody to help me :) I thought that since <code>--amend</code> affects the latest commit only, it would suffice to have a pre-commit hook that checks the hash of the commit I am trying to amend and the current/latest commit pushed to the remote. For example currently I get <code>b45025a...</code> as the latest commit to master on my local machine, I pushed that and <code>cat .git/refs/remotes/&lt;remote-name&gt;/master</code> gives <code>b45025a...</code> as well. So, would it work to check if the corresponding remote branch is at the same commit as the one I am trying to amend right now?</p>

<hr>

<p>Before writing this I asked Google and also briefly looked over questions I found here, but nothing seems to fit (selection):</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/1459150/how-to-undo-git-commit-amend-done-instead-of-git-commit"">How to undo &quot;git commit --amend&quot; done instead of &quot;git commit&quot;</a></li>
<li><a href=""https://stackoverflow.com/questions/32951719/git-rebase-interactive-already-pushed-commits"">git rebase interactive already pushed commits</a></li>
<li><a href=""https://stackoverflow.com/questions/2085871/strategy-for-preventing-or-catching-git-history-rewrite"">Strategy for preventing or catching git history rewrite</a></li>
</ul>
","0","2012224","",""
"69322195","8184810","2021-09-25 00:23:10","1","170","<git><git-merge><git-branch><git-commit>","Git: master branch merged into master? (with graph picture)","<p>I don't understand the following GitLab graph and I'm lacking vocabulary to express my question precisely. For reference, the graph below shows:</p>
<ul>
<li><a href=""https://gitlab.com/linux-kernel/stable/-/network/master"" rel=""nofollow noreferrer"">linux-kernel stable repository</a> mirror on GitLab</li>
<li>Highest (most recent) commit: <a href=""https://gitlab.com/linux-kernel/stable/-/commit/7a31ec4d215a800b504de74b248795f8be666f8e"" rel=""nofollow noreferrer"">7a31ec4d</a></li>
<li>Lowest (oldest) commit: <a href=""https://gitlab.com/linux-kernel/stable/-/commit/a68de80f61f6af397bc06fb391ff2e571c9c4d80"" rel=""nofollow noreferrer"">a68de80f</a></li>
</ul>
<sup>
    I am not contributing to linux-kernel. Curiosity just drove me there and this GitLab graph confused me.
</sup>
<p><a href=""https://i.stack.imgur.com/fXxLI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fXxLI.png"" alt=""GitLab graph"" /></a></p>
<p>(Ignore green branches)</p>
<p>Please, correct any wrong vocabulary in the following questions.</p>
<ul>
<li><p>Between arrow <strong>1</strong> and arrow <strong>2</strong>, the left side <code>master</code> branch has no commit, while the right one has some.</p>
</li>
<li><p>The arrow <strong>1</strong> shows a point where <code>master</code> is like &quot;diverging&quot; from <code>master</code> itself. But there is no commit between the moment it &quot;diverges&quot; and the moment it is merged. Then it is not really a branch? How is this called? Why one would do this, and how?</p>
</li>
<li><p>At arrow <strong>2</strong>, the &quot;diverged&quot; <code>master</code> is merged back into <code>master</code>. What is the point of doing so? How is it called? A use case would help to understand.</p>
</li>
<li><p>Why is there a &quot;hole&quot; between the commit pointed by arrow <strong>1</strong> and the next commit on the right side <code>master</code>? How does this work?</p>
</li>
</ul>
<p>I feel like all these points are connected by a git logic, but I can't figure out which one and my lack of vocabulary didn't help to find relevant search results.</p>
","1","8184810","0","0"
"17815895","1113063","2013-07-23 16:31:33","97","29823","<git><github><git-commit>","Can I edit two files then make one commit using GitHub Web-based editor?","<p>GitHub has the nice feature of Web-based file editing. However, it seems that after editing one file I have to commit the changes for this file before continuing. Is there a way I can edit two or more files then make one commit for all the changes of them? </p>

<p>I think this would be better since too many unnecessary commits are annoying.</p>
","2","1113063","0","0"
"29912460","2462759","2015-04-28 07:01:14","0","155","<git><github><git-commit><pull-request>","Seeing commits of another branch","<p>I have access to repository on <code>git</code> but not ""master"" branch. I make another branch ""paul_project"" and when I am on this branch: I create another branch under it.</p>

<pre><code>Admin@PAUL~/watirproject/AutomationProject (paul_project)
$ git checkout -b feature_one
</code></pre>

<p>which looks like this:</p>

<pre><code>master
  paul_project
     feature_one
</code></pre>

<p>Similarly people like me, making another branches on top of ""paul_project"" as they also don't have access to ""master"". Which finally looks like this</p>

<pre><code>master
  paul_project
     feature_one
     feature_two
     feature_three
</code></pre>

<p>Now problems is while raising <code>PR (Pull request)</code> we are seeing each other's commits too. And because of that, person who is going to review <code>PR</code> is having problem in reading commits, because on reading commits it looks like ""feature_two"" has more commits in it than it suppose to have, as it shows commits of ""feature_one"" also.</p>

<p>What is that we are doing wrong?</p>
","0","2462759","",""
"50767721","6454348","2018-06-08 20:04:53","0","968","<git><repository><git-commit>","Git commit 2 times","<p>I have the following problem. I have two files a.txt and b.txt in my local Repository. I changed the name to a1.txt and b1.txt after that I added in each text document one word. 
After that I need to commit 2 times, the first commit is for changing the name of the text documents and the second commit after adding the words to the documents.
My Question is how can I do that?
What git commands would help me do so.</p>
","2","6454348","",""
"29914794","1269037","2015-04-28 08:56:58","5","48","<github><git-commit>","Why doesn't the number of commits for a project match the sum of commits from contributors?","<p><a href=""https://github.com/tagspaces/tagspaces"" rel=""nofollow noreferrer"">This project</a> shows 1993 commits, but clicking on Contributors shows a total less than half of that, only 925 total.</p>

<p>Why the discrepancy? Each branch has over 1800 commits.</p>

<p><img src=""https://i.stack.imgur.com/gvGUJ.gif"" alt=""TagSpaces on GitHub""></p>
","0","1269037","0","0"
"50768222","2342399","2018-06-08 20:51:17","1","54","<git><git-merge><atlassian-sourcetree><git-commit>","git merge overwrites all previous changes","<p>I have 2 core branches:</p>

<pre><code>-develop: used for development
-master: used to ship code to production
</code></pre>

<p>developers work from develop. </p>

<p>I recently merged the pink branch with the commit ""user authentication"" to develop and it overwrote everything. This particular commit contains a large new feature. </p>

<p>I've reset the current develop branch to a commit before this merge for the moment. </p>

<p>I'm not sure what to do next? I need to marge this pink branch but I'm not sure how?</p>

<p><a href=""https://i.stack.imgur.com/pan09.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pan09.png"" alt=""enter image description here""></a></p>
","6","2342399","0","0"
"17841858","","2013-07-24 18:20:13","0","2757","<git><github><git-commit><git-reset><git-add>","After doing `git commit` git tells me there is nothing to commit","<p>I am on my <code>gh-pages</code> branch and when I </p>

<pre><code>$ git add &lt;file&gt;
$ git commit -m ""&lt;message&gt;""
</code></pre>

<p>I see</p>

<pre><code># On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>Then I will do and see the following </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?

$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I tried to dig deeper to figure out whats messed up </p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages

$ git reflog 
d712282 HEAD@{0}: checkout: moving from master to gh-pages
9bf529e HEAD@{1}: checkout: moving from gh-pages to master
d712282 HEAD@{2}: commit (initial): 1st push to gh-pages
</code></pre>

<p>I am not sure what is going on here but before this I was trying to get rid of my last commit trying the following commands</p>

<pre><code>git reset --soft HEAD
git reset --hard HEAD
git reset HEAD
git reset .
git reset
</code></pre>

<p>Perhaps I made things worse with those. Not sure. Also I tried </p>

<pre><code>$ git push origin gh-pages 
Counting objects: 1156, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (1141/1141), done.
Writing objects:   6% (70/1156), 2.27 MiB | 680.00 KiB/s   
</code></pre>

<p>then I immediately cancel because I don't want that commit/add anymore. </p>

<p><strong>How do I revert/delete that last commit/add and start over clean?</strong></p>

<h2>UPDATE</h2>

<p>Ok I first followed I am John Galt's answer. I ran </p>

<pre><code>$ git checkout d712282
</code></pre>

<p>and got this </p>

<pre><code>Note: checking out 'd712282'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d712282... 1st push to gh-pages
</code></pre>

<p>at this point I really did not know what to do. All I wanted was to be back at my <code>gh-pages</code> branch and no longer have that dam <code>d712282</code> commit plaguing me. So at that point I </p>

<pre><code>$ git checkout gh-pages
</code></pre>

<p>and foolishly I thought the <code>d712282</code> commit died with the detached head and so I proceeded as I would before doing </p>

<pre><code>git add index.html 
</code></pre>

<p>but when I checked to see if had been staged I got </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
</code></pre>

<p>It seemed at this point that nothing changed from before but I kept on just to be thorough. When I tried to run a commit I got </p>

<pre><code>$ git commit -m ""added index.html to gh-pages"" 
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>and then I did</p>

<pre><code>$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I wanted to see what was up and running <code>$ git log</code> gave me</p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages
</code></pre>

<p>There is that same old <code>d712282</code> commit. I also ran <code>$ git reflog</code> and got</p>

<pre><code>$ git reflog
d712282 HEAD@{0}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{1}: checkout: moving from gh-pages to d712282
d712282 HEAD@{2}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{3}: checkout: moving from gh-pages to d712282
d712282 HEAD@{4}: checkout: moving from master to gh-pages
9bf529e HEAD@{5}: checkout: moving from gh-pages to master
d712282 HEAD@{6}: commit (initial): 1st push to gh-pages
</code></pre>

<p>and this point I tried Geoffrey's suggestion and ran and got </p>

<pre><code>$ git reset --hard d712282
HEAD is now at d712282 1st push to gh-pages
</code></pre>

<p>So at this point all I want to do is get rid of d712282 because everytime I try <code>git push origin gh-pages</code> git starting pushing the d712282 commit which has like 1156 files. Way too much. I wants it dead.</p>
","1","","",""
"17861351","2392038","2013-07-25 14:46:56","1","225","<git><language-agnostic><git-commit>","status shows (new commits) in default directory, but not in repo","<p>So I have a directory called <code>Codebase</code> as my default git directory. Within it I have 2 folder for Java and Python.</p>

<p>The directory structure is like this:</p>

<pre><code>Codebase (default git dir)
---- .git
---- .metadata
---- Java
-------- .metadata
-------- Proj1 (git init here)
-------- Proj2 (git init here)
---- Python
-------- Proj1 (git init here)
-------- Proj2 (git init here)
</code></pre>

<p>See the following pic to see the problem I'm facing:</p>

<p><img src=""https://i.stack.imgur.com/Mwdam.png"" alt=""git status""></p>

<p>As you can see, <code>git status</code> in <code>Codebase</code> shows that I have new commits and changes (in other files), but <code>git status</code> within the project directory shows no changes. This is the same for all other files too. I have no actual changes yet the files appear here.</p>

<p>What's going on?</p>
","4","2392038","0","0"
"29942520","1542339","2015-04-29 11:35:00","1","78","<git><git-commit><git-filter-branch><git-rewrite-history><git-history-graph>","how to abandon commits of certain characteristic when using git?","<p>for example i want to abandon all commits whose commit message is ""temp commit"", that is if the original commit history is as follows:</p>

<pre><code>    X1 - X2 - X4 -X7 - .... Xn-2 -  Xn-1 - Xn
       \_ X3 -X5 - ..
             \_ X6 - X8  ..


    and x4 ""temp commit""
    X6 ""temp commit""
    Xn-1 ""temp commit""
</code></pre>

<p>then the commit history will rewritten as follows, that is the commits x4, x6 and xn-1 are abandoned. </p>

<p>if a repo have totally 2000 commits, and 500 of the commits whose message is ""temp commit"", then the 500 commits will be abandoned, and only 1500 commits remains, how to do this git history rewritten?</p>

<p>i know it may have something to do with filter-branch, i know how to remove a folder using --tree-index, but how to remove commits of certain characteristic?</p>

<pre><code>    X1 - X2 -X7 - .... Xn-2 - Xn
       \_ X3 -X5 - ..
             \_  X8  ..
</code></pre>
","0","1542339","",""
"47007336","527702","2017-10-30 02:26:01","2","2301","<git><git-commit><git-stash>","Does ""git stash"" internally ""commit"" to my local repo?","<p>I only ever manually <code>commit</code> to my local repo just before <code>push</code>ing to the remote repo.</p>

<p>But more often I <code>pull</code> to get my coding partner's changes.</p>

<p>Sometimes we've both worked on the same file and there's a conflict. In these cases he's told me to do a <code>git stash</code> before my <code>git pull</code> and then a <code>git stash pop</code> afterward.</p>

<p>But sometimes this results in git telling me next time that I can't <code>pull</code> because I have unmerged files. These are usually experimental changes in my local tree that I don't wish to <code>commit</code> or <code>push</code>.</p>

<p>A couple of times I've needed to send my work in and the result has been intermediate revisions in the remote repo including my local experiments, debug code, etc, that I never wished to send. I want to avoid making such mess.</p>

<p>Is this due to <code>stash</code> modifying my local repo? If so, how can I avoid that? If not, what else could be causing it? I'm a total noob at git and only use these few commands.</p>
","2","527702","0","0"
"17873180","1023045","2013-07-26 04:54:29","0","102","<git><patch><git-commit>","Modify minor changes to patch series in git","<p>Let say I have a patch series ready for submitting to some open source project.
For instance, A, B, C, D, and E which correspond to individual commit. 
After commit C, I found several minor mistakes (e.g., coding style), I fixed several places where all commits (A to E) are somehow related. And, I commit the change to F. 
The question is:</p>

<p>Can I apply the changes in F to the separated commits (i.e., A to E), while maintaining the commits of A to E?</p>
","0","1023045","",""
"13914257","906230","2012-12-17 12:32:34","1","60","<git><branch><git-commit>","Git new branch is not a branch when using a previous commit","<p>I was on a branch in Git, doing some work. Then I decided to check out one of my previous commits on that branch using the commit's hash, with <code>git checkout -b new_branch 6e559cb</code>. Now when I enter ""git branch"" it says that I'm currently on ""(no branch)"". How do I merge this no-branch into the branch it was split from? Thanks!</p>
","2","906230","0","0"
"13929526","1275959","2012-12-18 09:06:35","15","59811","<git><git-commit><git-revert>","Git revert failed","<p>I made several commits (commit1/2/3), I changed my working directory without stashing. Then I wanted to go back several commits ago. So I git revert commit1 commit2 commit3, but I was told to commit my changes (commit4), so I did it, and then I made again git revert commit1 commit2 commit3 commit4, but I had a message</p>
<blockquote>
<p>error: a cherry-pick or revert is already in progress  hint: try &quot;git
cherry-pick (--continue | --quit | --abort)&quot;</p>
</blockquote>
<p>When I run git branch -va, HEAD is pointing to commit 3.</p>
<p>I don't quite understand what is going on.  What should I do now to make things reverted?</p>
","1","1275959","0","0"
"17902809","172815","2013-07-27 21:53:02","4","3528","<git><git-commit>","Start fresh with Git and make a repository's last commit the only commit","<p>I have a Git repository with dozens of commits.
I want the last commit to be the only commit - meaning the repository would behave as if it was just initialized and the current file state is the only commit. </p>

<p>Is there a better way to do it than creating a new repo?</p>
","3","172815","0","0"
"33329514","3310838","2015-10-25 12:11:16","2","114","<git><git-branch><git-commit>","Rollback two commits. Reapply second commit. Branch and apply first commit","<p>In my project, I've recently made two commits. The commits are on different sets of files. I've also pushed these commits remotely. Something like the following-</p>

<pre><code>git commit file-a file-b -m ""first commit of new features""
git commit file-c file-d -m ""second commit of new features""
git push -u origin master
</code></pre>

<p>I would like to do the following- </p>

<ol>
<li>Rollback the master to before the first commit and then apply
<em>only</em> the second commit.</li>
<li>Create a feature branch at this point
and apply the second commit (it should have the first commit too).</li>
</ol>

<p>Is this possible to achieve in a simple way? I've thought about creating and using a patch file with git diff, but I thought I'd check first if there's a better way.</p>
","1","3310838","0","0"
"33334942","5406048","2015-10-25 20:50:03","-2","47","<ruby-on-rails><git><ruby-on-rails-4><github><git-commit>","Git wont let me commit because it ""found a file by the name of '.COMMIT_EDITMSG.swp'""","<p>This happens every time i try to commit (not always but today). I don't have anything up on any window or anything. I looked up other similar questions on stack overflow and i did what they said but its still not working. I found and deleted the file but it makes a new one when i try to run 'git commit .'</p>
","2","5406048","",""
"50955378","5932012","2018-06-20 19:06:18","1","1145","<git><git-commit>","Git commit: disable opening editor","<p><code>git commit</code> has a <code>--no-edit</code> flag which will ""use the selected commit message without launching an editor"".</p>

<p>For example, when <code>git merge</code> produces conflicts, after these have been resolved running <code>git commit --no-edit</code> will commit without opening the editor, using to the default merge commit message.</p>

<p>I want a way to permanently enforce this behaviour so I don't have to specify <code>--no-edit</code> each time I run <code>git commit</code>.</p>

<p>I can find an equivalent setting for <a href=""https://stackoverflow.com/a/12752465/5932012""><code>git merge</code></a>, but nothing for <code>git commit</code>.</p>
","0","5932012","",""
"30012587","1542339","2015-05-03 10:08:18","0","1276","<git><git-rebase><git-commit><git-log>","why git rebase -i based squash could lead to conflicts?","<p>in fact <strong>there is only one person work on that repo, and there is only one branch on that repo</strong>, 
i use <code>git rebase -i HEAD~200</code> to get rid of some meaningless commits which have ""tirval commit"" message in commit log, i think all these commit could be squash to previous commits, it is so natural that my current branch is not in conflict state, and all previous commits are without conflicts, even when there were conflicts, they were solved, why squash could lead to conflicts?</p>

<p><img src=""https://img.itc.cn/photo/jfnTnW35fjc"" alt=""""></p>

<p><img src=""https://img.itc.cn/photo/jfnTw1DhDFA"" alt=""""></p>

<p>btw, is there quiet mode to do git rebase -i without confirming lots of popups?</p>
","1","1542339","",""
"34190320","89691","2015-12-09 22:35:32","1","766","<git><git-branch><git-commit>","How do I recover cleanly from this ""no branch"" scenario","<p>As a result of my experimenting with switching between two commits, I have ended up in a situation where GitExtensions reports <code>(no branch)</code> for my repository.  Here's the output from <code>git reflog</code>:</p>

<p><a href=""https://i.stack.imgur.com/Zt4g7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Zt4g7.png"" alt=""enter image description here""></a></p>

<p>I haven't use branches, or intentionally anyway. My last commit was <code>91d96ff</code>. I then started the experimenting.  I checked out the previous commit (<code>699415c</code>) and confirmed that the working set had reverted to the files as they were at that commit (except for the datestamps - I can't get used to that!).  I then checked out <code>91d96ff</code> again and then bounced a couple of times between these two commits, the last checkout leaving the head at <code>91d96ff</code>, where it was when I started.  I have made changes to the sources since the last commit.  </p>

<p>Here's how GitExtensions shows it:</p>

<p><a href=""https://i.stack.imgur.com/bLkqL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bLkqL.png"" alt=""enter image description here""></a></p>

<p>And I notice that the little red triangle that is normally next to the <code>Master</code> is missing - I assume that indicates where the head is (or isn't in this case).  I presume I have a detached head?  </p>

<p>Why is Git reporting this ""no branch""?  What is the clean and proper way to recover from this? Is GitExtension's <code>Reset current branch to here</code> all I need?   </p>

<p>I'm curious to know what I might have done to end up in this state.</p>
","9","89691","",""
"34190496","1523603","2015-12-09 22:49:36","0","40","<git><git-commit><git-revert>","Reverting commited changes for local changes","<p>I have made a bunch of changes to a repo.  </p>

<p>When the changes were completed I completed a stage, staging all those changes. Then committed them locally.</p>

<p>Once complete I attempted a push, but the repo had changed.  </p>

<p>I then completed a rebase (instead of merge) on the master. This found a conflict on a small JSON file. </p>

<p>This was the only conflict that showed, I clicked continue to (what I thought) would merge that in. However, my commit has now been pushed with only that single file change.</p>

<p>The other file changes have disappeared. Is there a way to get those back? </p>
","0","1523603","",""
"34207046","659751","2015-12-10 16:32:49","7","1007","<git><github><bitbucket><commit><git-commit>","reverse back to certain commit and test what the issue?","<p>Is there a way to keep all my changes now, and still reverse back my app to a certain commit and start going through all other commits to see which one caused an issue in my app?</p>

<p>I did a lot of changes, and it would take me a long time to check everything, so I want to get my previous commits and when I find the issue, I'll revert back to most recent commit and then just apply the necessary changes.</p>

<p>There's this answer here: <a href=""https://stackoverflow.com/questions/6794110/git-revert-back-to-certain-commit"">git revert back to certain commit</a> but I still want to keep all my recent changes, can someone walk me through the thought process? </p>

<p>I'm thinking if I commit my most recent changes now, its in bitbucket, then use the method: <code>git reset --hard {commit numbers}</code> and just keep going through my list of commits, and when I find the issue, <code>git reset --hard {most recent commit}</code> this will bring me back to most recent state?</p>
","0","659751","0","0"
"28524774","3929110","2015-02-15 09:34:48","0","979","<git-branch><git-commit>","Unable to find branch in git repo","<p>In the current directory. I had made a repository yesterday from this directory.
now:<br>
        git branch foo<br>
After doing some changes in the file..<br>
    git add .<br>
    git commit -m ""commit1""<br>
    git push.<br>
I am unable to see the branch from my repo on github. While git branch does show this foo.</p>
","0","3929110","",""
"65735744","15012254","2021-01-15 12:00:22","5","8800","<git><git-commit><git-revert>","How to delete a pushed git merge commit","<p>I merged a couple of devel commits into the master branch of my repo just to find out that GitAhead screwed up the master at some point.</p>
<p>Now I tried various methods described on SO in order to undo these commits (there is no other commit than merges on master). This way master was indeed reset to an earlier version.</p>
<p>However, I still have the full merge history in headless branches (the grey path on the image):</p>
<p><img src=""https://i.stack.imgur.com/fumZD.png"" alt=""enter image description here"" /></p>
<p>I tried to revert, reset, etc the branch without success alas!</p>
<p>How can I fully delete the commits (c518859ce4, 7574f10f68)?</p>
","3","15012254","",""
"30893040","4219264","2015-06-17 13:27:21","208","219540","<git><git-commit>","Remove commit from history","<p>I entered a curseword in my code and I pushed the code on the master branch. I pushed a few more times after that so people do not pull the bad stuff, but I can still find the curseword in the commits history.</p>
<p>I don't want to add the file to <code>.gitignore</code> because we need that file.</p>
<p>Is there a way to delete the commit from history?</p>
","4","4219264","0","0"
"50965908","3836801","2018-06-21 10:09:35","1","88","<android><git><version-control><git-commit>","Searching git commits by Android versionName","<p>I'm not sure what question I need to ask to google for this one. Maybe you can point me in the right direction.</p>

<p>I have a detected a bug in my app that started happenning between a range of versionName attribute changes in my AndroidManifest.xml.</p>

<p>The last versionName that was working okay was 4.8.1.50, and the one I saw the bug appear for the first time was 4.8.1.60.</p>

<p>Many git commits were made in between, affecting different files, some affecting the AndroidManifest, others did not.</p>

<p>Do you guys know if there is any way I can search and filter for all of those commits?</p>

<p>Thanks in advance.</p>
","2","3836801","",""
"47073895","387076","2017-11-02 11:12:38","0","329","<git><branching-and-merging><git-commit>","Commit to alternative branch in git (leaving working copy unmodified)","<p>I'm working on a branch <code>topic</code>. I've made some changes which I want to commit on a side branch <code>attempt1</code>. After committing these changes, I want to continue working on <code>topic</code>, <strong>from my current state</strong> (as opposed to going back to the last commit on <code>topic</code>).</p>

<p>The reason to do this is, I need to work some more before the changes are good enough to get into a published branch (I push <code>topic</code> regularly), but I want to save a copy of the current state in case I mess up the rework. I don't want to change my working copy while I'm doing this. I expect to end up with an empty index.</p>

<p>Note that I want to keep <code>attempt1</code> around for a while — this isn't just a very temporary commit that I'll rebase away a few minutes later. Sometimes I decide to change my approach on <code>topic</code>, and in parallel pursue an alternative approach on <code>attempt1</code>. I want to create a branch, not just stash one commit.</p>

<p>Also, I'm after something robust, so interactive rebasing is out. Temporarily committing to <code>topic</code> then moving the commit to a new branch would be fine, as long as I can do that without modifying the working copy.</p>

<p>In graphical terms, I'm in the state</p>

<pre><code>HEAD
 |
 v
 A  topic
</code></pre>

<p>with uncommitted changes, and I want to get to</p>

<pre><code>HEAD
 |
 v
 A  topic
  \
   B  attempt1
</code></pre>

<p>with an unchanged working copy that's identical to B.</p>

<p>I could do <code>git checkout -b attempt1</code> then (<code>git add</code> new files and <code>git rm</code> deleted files then) <code>git commit -a</code>. But then how would I switch back to <code>topic</code> without modifying the working tree?</p>

<p>Basically, how do I do</p>

<pre><code>git commit --to-alternate-branch=attempt1
</code></pre>

<p>or (after creating and committing to <code>attempt1</code>)</p>

<pre><code>git checkout --do-not-modify-working-tree topic
</code></pre>

<p>or <code>git stash --no-revert</code> (followed by <code>git branch attempt1 stash@{0}</code>), or whatever? All the combinations I can think of mess up my working copy at some point.</p>
","1","387076","0","0"
"28543596","2052564","2015-02-16 14:26:51","14","14683","<git><gitignore><git-commit>","Git - Commit file in .gitignore","<p>I want to commit and push two new files that are inside a folder that is listed in the project's .gitignore. I figure I can just change the .gitignore file, but then I would require two commits: one commit to push the two new files, and a second commit to reset the .gitignore. I'd like to do this in one commit if possible.</p>

<p>Is there any way to commit &amp; push a specific file that is ignored?</p>
","1","2052564","0","0"
"48458567","550478","2018-01-26 09:23:06","17","7499","<git><git-commit>","How to commit changes to Git repository anonymously","<p>I have an empty git repository (hosted on GitHub or wherever).</p>

<p>I want to commit my changes to it <em>anonymously</em> like the below picture. How should I setup my git configuration (preferably project specific config) to achieve that?</p>

<p><img src=""https://i.stack.imgur.com/f1WKn.jpg"" alt=""below picture""></p>

<p>Thanks</p>

<p>PS: In case you're asking <em>But why?</em>, check out the conferences <a href=""https://www.journals.elsevier.com/social-science-and-medicine/policies/double-blind-peer-review-guidelines"" rel=""noreferrer"">Double-Blind review process</a>.</p>
","4","550478","0","0"
"65755376","13280293","2021-01-16 22:25:24","0","45","<git><github><git-commit><git-remote>","How to delete 2 old commits?","<p>I'm happy with my current code, but I have 2 commits that went in the wrong direction and I would like to delete them.  They are in my local git (xcode source control), and have also been pushed to Github.</p>
<p>How do I delete those two older commmits from my Git history while preserving what I have now?</p>
<p>Thanks very much in advance!</p>
","2","13280293","",""
"48463763","2232225","2018-01-26 14:50:51","0","2318","<git><visual-studio-2017><tfs-2015><git-commit><git-history>","Edit another developers GIT commit message on TFS","<p>Iv been asked can i modify a set of checked in comments in the git history for a project that contain in-appropriate wording by another developer.</p>

<p>Can someone show me how to achieve this (or confirm if this is not possible)?
I'm Administrator on TFS so access rights is not an issue.
Our TFS is on premise using SQL Express &amp; GIT as the Source control.
TFS version is 15.117.26714.0</p>

<p>We use Visual Studio 2017 on our local machines with Team Explorer plugin.</p>
","2","2232225","",""
"21121576","1015595","2014-01-14 18:51:27","0","331","<git><bitbucket><git-commit><git-log><git-squash>","How do I fix this git commit log?","<p>I have a repository on Bitbucket. I kinda screwed up the commit log when I tried to squash the commits <code>c265825</code> and <code>0a1837e</code>:</p>

<p><img src=""https://i.stack.imgur.com/FdZs4.png"" alt=""enter image description here""></p>

<p>Trying to squash these commits resulted in <code>0942142</code>, which is basically empty. What I mean is if I try and view that commit it shows no files changed, which could be normal for a ""merge"" commit - I don't know.</p>

<p>Obviously I need to fix things like this before pushing to Bitbucket, but how can I fix it after the fact? I'd like to squash <code>0942142</code>, <code>c265825</code> and <code>0a1837e</code> if possible so it looks like a single commit called ""Removed unused files.""</p>

<p>PS: This is a private repo (for now), so nobody has pulled any of these changes (yet).</p>

<p><strong>Edit:</strong> TheBuzzSaw's answer below is correct for squashing every commit since <code>0a1837e</code>. I wanted to just squash those three commits and keep the rest of the history, however (the screenshot is a mockup - not representative of actual changes). So I had to do this:</p>

<pre><code>git reset --hard HEAD~7
git cherry-pick -n 0a1837e..c265825
git cherry-pick -n -m 1 0942142
git commit -m ""Removed unused files""
git cherry-pick 8f8308b
git cherry-pick f7b14f5
git cherry-pick bb90ff9
git cherry-pick 976985d
git cherry-pick 6f4d0c2
</code></pre>

<p>Now my commit log is beautified:</p>

<p><img src=""https://i.stack.imgur.com/enfhY.png"" alt=""enter image description here""></p>
","0","1015595","",""
"65512894","5038503","2020-12-30 20:00:08","2","168","<git><git-merge><rebase><git-commit><git-rewrite-history>","Automatic rebase to drop a commit that modifies a file?","<p>I'm new to git rebase and doing something a bit wacky and stupid.
So let's say I have these commits which all modify the same file <code>file.txt</code></p>
<p><code>a -&gt; b -&gt; c -&gt; d -&gt; e</code></p>
<p>I want to just remove commit <code>c</code>.</p>
<p>My strategy for this is to rebase <code>b</code> onto <code>d</code>, keeping <code>d</code>'s changes so it reads like this</p>
<p><code>a -&gt; b -&gt; d -&gt; e</code></p>
<p>I'm trying to do this with this command</p>
<pre><code>git rebase --rebase-merges --onto c^ c
</code></pre>
<p>This results in a failed merge, I've also tried it with <code>-s ours</code> but that fails as well.</p>
<p>This works when each commit modifies a different file, however.</p>
<p>What should I do to satisfy this goal?</p>
","0","5038503","",""
"28294375","1283776","2015-02-03 08:29:08","4","3821","<git><git-commit>","Error related to editor when running git commit?","<p>I get the following error when running Git commit:</p>

<pre><code>c:/Program/ Files/ /(x86/)/Notepad++/notepad++.exe: -c: line 0: syntax
 error near unexpected token `('
c:/Program/ Files/ /(x86/)/Notepad++/notepad++.exe: -c: line 0: `c:/Pr
ogram/ Files/ /(x86/)/Notepad++/notepad++.exe \$@\'
error: There was a problem with the editor 'c:/Program/ Files/ /(x86/)
/Notepad++/notepad++.exe'.
Please supply the message using either -m or -F option.
</code></pre>

<p>What does it mean? How can I fix it?</p>
","0","1283776","0","0"
"10721624","1355158","2012-05-23 14:04:50","62","232924","<git><github><version-control><git-commit><git-add>","github changes not staged for commit","<p>I have a very basic github setup with a readme, a directory, and another directory inside it with an html file. On github I can only view the readme and the first folder but none of its contents, and I am getting this message</p>

<pre><code>tc349 ryntc3$ git add *
tc349 ryntc3$ git status
On branch master
Changes not staged for commit:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
(commit or discard the untracked or modified content in submodules) 

modified:   week1 (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>I feel like if I am adding all to be staged that it should not be an issue. Any help?</p>
","0","1355158","0","0"
"46848403","3022571","2017-10-20 11:45:06","0","36","<git><git-commit><git-push>","Push different commits in git","<p>I have commited every times in the local repository and now I want to push all my commits in the remote repository. Should I do any special action or is it enough if I do a commit and push?</p>

<p>Example: 
I have done the Commit1 Commit2 and Commit3. Now I want to commit again (Commit4) and push all my commits (Commit1, Commit2, Commit3 and the current Commit4). With Commit and push are the last commits also pushed?</p>
","3","3022571","",""
"21134960","551273","2014-01-15 10:29:33","324","627091","<git><github><version-control><git-commit><git-add>","What does ""Changes not staged for commit"" mean","<p>I thought if you want to track the files you should  <code>git add [files you want to track]</code></p>

<p>I don't know why I got the messages <code>Changes not staged for commit</code>.</p>

<p>If those files were not staged, shouldn't <code>git</code> shows me those files were  <code>Untracked</code> like that</p>

<p><img src=""https://i.stack.imgur.com/aQtQ0.png"" alt=""enter image description here""></p>

<p>All I've done was create a new feature from <code>develop</code> branch and worked in <code>feature/change_excel_format</code> branch</p>

<p>I thought Those files should be in <code>staged</code> status,</p>

<p>But <code>git status</code> told me <code>Changes not staged for commit</code></p>

<p><img src=""https://i.stack.imgur.com/Zxl9h.png"" alt=""enter image description here""></p>

<p>To brief, 
I only know there are 3 stages in git  <code>untracked</code>, <code>staged</code>, <code>committed</code>
Can any one tell me , what was the stage in for <code>Changes not staged for commit</code>
<img src=""https://i.stack.imgur.com/CEwGG.png"" alt=""enter image description here""></p>

<p>So if I modified the  file <code>a</code>  (already in the repo)</p>

<p>and type <code>git st</code> , the git will tell me <code>Changes not staged for commit</code></p>

<p>if I  <code>git a</code> then the file <code>a</code> will be in <code>staged status</code></p>

<p>if I modified the <code>file a</code> now, there will be two status of <code>file a</code> in <code>git</code>, right ?</p>

<p>So I have to decide if make the <code>staged a</code> be commit or make the <code>not stage a</code> to be staged,
and then the previous staged <code>file a</code>will be discard ?</p>

<p><img src=""https://i.stack.imgur.com/6kLX2.png"" alt=""enter image description here""></p>
","1","551273","0","0"
"65524950","1169781","2020-12-31 19:35:26","1","142","<git><git-submodules><git-commit>","Git submodule updating - HEAD doesn't match up to git log","<p>I'm having trouble getting git's submodules to update properly when I pull a repository and the submodule's commit has changed.  First off, I believe this question is different from <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master"">this</a> question because that question is concerned with staying up to date with a particular branch.  I don't want the latest commit on a branch, I want the commit specified in the parent repository.</p>
<h3 id=""heres-my-scenario-0l4q"">Here's my scenario:</h3>
<p>Git repo <code>A</code> has repo <code>B</code> as a submodule.  Repo <code>A</code> lists submodule <code>B</code> as being on commit <code>abc</code>.</p>
<p>Then, inside repo <code>A</code>, I do a <code>git pull</code> and receive a new commit for repo <code>A</code>.  This new commit states that submodule <code>B</code> should now be on commit <code>def</code>.  I run a <code>git submodule update</code> just to make sure everything is up to date.</p>
<h3 id=""now-heres-where-the-problem-arises-c4rr"">Now here's where the problem arises.</h3>
<p>I <code>cd</code> into submodule <code>B</code> and run <code>git status</code>.  It reports <code>HEAD detached at abc</code>.  Hmm, that's not right, it should be on <code>def</code>.  <strong>But here's the confusing part</strong> - I run <code>git log</code> and the very first commit it lists is <code>def</code>, preceded by <code>abc</code>!  <strong>How can that be?</strong> Shouldn't <code>git log</code> always start with <code>HEAD</code>?  And if it knows about the new commit, <strong>why hasn't the working copy updated to reflect that?</strong></p>
<p>Even after getting the submodule in the state described above, I can't figure out what <code>git submodule ...</code> command, if any, would move the <code>B</code>'s head to be at <code>def</code>.  The only fix I found was to <code>cd</code> into <code>B</code> and manually run <code>git checkout def</code>.</p>
<p>Help, please!  I want a <code>git pull</code> in repo <code>A</code> to update submodule <code>B</code> to the commit has as indicated by <code>A</code>.</p>
","3","1169781","0","0"
"65528041","12238225","2021-01-01 07:43:19","10","29870","<git><gitlab><gitlab-ci><git-commit>","Push existing folder to GitLab","<p>In Gitlab project from the instructions, they tell how to add an existing_folder to Git repository.
But after I press <code>git commit</code> the console open a vim.</p>
<p>Then how can I go to the last one <code>git push -u origin master</code> and push my repository to gitlab.</p>
<pre><code>cd existing_folder
git init
git remote add origin [remote url]
git add .
git commit
git push -u origin master
</code></pre>
","2","12238225","0","0"
"10741763","267416","2012-05-24 16:41:11","1","71","<git><rebase><git-rebase><git-commit>","Git History and Rebase issue","<p>I do a commit to my local repo, then I pushed it to origin after that I amended the commit and tried to push it but I got an error saying that I need to pull from origin, I made that and a conflict happened I fixed it and committed the change to local and remote repos. Now my commit history is horrible here it is:</p>

<p><img src=""https://i.stack.imgur.com/Itgld.png"" alt=""enter image description here"">
The commit I made named: <strong>An early version of the ImportImageModel</strong></p>

<p>How I can rebase the history to fix these unnecessarily commits?</p>
","2","267416","",""
"28313664","1795917","2015-02-04 04:43:37","36","22296","<git><version-control><git-commit>","Remove empty commits in git","<p>I just migrated a project from Mercurial to Git. Mercurial adds empty commits when you add tags, so I ended up with empty commits in Git that I would like to remove.</p>

<p>How do I remove empty commits (commits that do not have any files in them) from Git?</p>

<p>Thanks.</p>
","0","1795917","0","0"
"10745957","702275","2012-05-24 22:05:36","5","8913","<git><github><git-push><git-commit>","git freezing at push while compressing objects","<p>hi I'm using Github to push some files from my local server to my Github repository. I accidentally included a 500Mb video file in the commit and I think this totally screwed up the <code>add/commit/push</code>.</p>

<p>Specifically, my command stalls at the <code>push</code> like this:</p>

<pre><code>git push -u myGithubRepository master
Counting objects: 52, done.
Delta compression using up to 4 threads.
Compressing objects:  97% (36/37) 
</code></pre>

<p>It's been many hours and is still stuck. </p>

<p>I'd like to commit all the other changes I made so I don't want to revert back to what's on my Github repository. I just want to resolve this conflict. I'm a Git novice so please take it easy on me.</p>

<p>thanks,
tim</p>
","2","702275","0","0"
"40280170","5244485","2016-10-27 08:50:20","1","4443","<github><git-commit><git-push><git>","Remote permission denied in github while trying to push to origin","<p>I have started to contribute to a public repository on GitHub, but after I have created a pull request it says remote: Permission when I am trying to push another code to my origin. </p>

<blockquote>
  <p>remote: Permission to una/CSSgram.git denied to Pradhvan.<br> fatal:
  unable to access '<a href=""https://github.com/una/CSSgram.git/"" rel=""nofollow"">https://github.com/una/CSSgram.git/</a>': The requested
  URL returned error: 403</p>
</blockquote>
","4","5244485","",""
"10753268","1203556","2012-05-25 11:00:59","64","233642","<git><github><git-commit><git-push><git-add>","GitHub - error: failed to push some refs to 'git@github.com:myrepo.git'","<p>I ran these commands below:</p>
<pre><code>git add .
</code></pre>
<pre><code>git commit -m 't'
</code></pre>
<p>Then, when running the command below:</p>
<pre><code>git push origin development
</code></pre>
<p>I got the error below:</p>
<pre><code>To git@github.com:myrepo.git
 ! [rejected]        development -&gt; development (non-fast-forward)
error: failed to push some refs to 'git@github.com:myrepo.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>
<p>Are there any ways to solve the error above?</p>
","0","1203556","0","0"
"10757530","960657","2012-05-25 15:49:07","1","148","<git><git-push><git-commit>","GIT on push to a remote server exlude folders/files","<p>Is there a way to exclude certain directories when using ""git push remote_name"".</p>

<p>For example I have this folder/file structure in the repository:</p>

<pre><code>/applications/
/libs/
/themes/
/misc/
/index.php
/robots.txt
/sitemap.xml
</code></pre>

<p>when I am working locally I commit all the changes I do to any files/folders, but when I need to ""push"" everything out to the remote server repository I want to exclude certain files and folders, like the ""/themes/"" folder and robots.txt file</p>

<p><strong>Summary</strong>: locally I ""commit"" everything but the moment I need to do a ""git push"" I want to be able to exclude folders and files.</p>

<p>I hope that makes sense.</p>

<p>Thanks</p>
","0","960657","",""
"46875559","8210211","2017-10-22 15:02:27","30","12385","<git><github><branch><git-commit><git-push>","Share publically a part of a private repo on Github","<p>I'm wondering what's the best way to publically share on Github a file that's on a private repo on Github. </p>

<p>I would like thet every time a make a push in my private repository automatically the file is updated too.</p>

<p>In particular I have a .tex project: I would like to keep secret the tex files but I would like to make available to everyone the pdf file.</p>

<p><strong>Note</strong> I'm aware of the existence of the gitignore option, but I don't want to use it since I want to keep track of the improvements on the tex files</p>
","1","8210211","0","0"
"46878849","7922511","2017-10-22 20:27:57","0","63","<git><shell><sh><git-commit><git-squash>","How can I parse arguments in a shell function and then make a multiline commit with it?","<p>I'm following the <a href=""https://conventionalcommits.org/"" rel=""nofollow noreferrer"">conventional commits</a> standard and I want to make a shell function to do a <em>squash and merge</em> and commit changes with a parsed message, improving my coding speed and my commits consistency.</p>

<p><strong>My problem is</strong> to parse the arguments and then use the result in the commit message.</p>

<ul>
<li><p>My actual code:</p>

<pre><code>function git_merge_squash() {
  git merge --squash ""$1""
  shift
  msg= echo $'\n'""$*"" | tr . \\n | tr - ' '
  # echo $msg
  git commit -m $msg
}

alias gmrs=git_merge_squash
</code></pre></li>
<li><p>Usage example:</p>

<pre class=""lang-none prettyprint-override""><code>$ gmrs f/my_branch Features.- Signup.-- Save hashed password
asynchronously.-- Retrieve token.- Login.-- Retrieve token.-
Logout.-- Destroy token
</code></pre></li>
<li><p>Expected result:</p>

<pre><code>git merge --squash f/my_branch
git commit -m ""
Features
  Signup
    Save hashed password asynchronously
    Retrieve token
  Login
    Retrieve token
  Logout
    Destroy token""
</code></pre></li>
</ul>

<p>As you can guess, in my actual code my commented <code>echo</code> prints exactly the message that I want. But <code>git commit -m</code> command takes <code>$msg</code> as a string. I tried multiple other options, like simulating a file input with the <code>-F</code> flag, but I couldn't work it out.</p>

<p>How can I achieve my goal? Thank you in advance.</p>
","5","7922511","",""
"2608869","94154","2010-04-09 15:52:15","5","17441","<git><git-gui><git-commit>","How can I commit many new files with git gui without clicking each of it?","<p>I have a ton of new files to commit. Clicking each one in git gui (Windows) to stage is annoying.</p>

<p>How can I can I commit a whole bunch of files at once?</p>
","1","94154","0","0"
"21352795","1292591","2014-01-25 16:00:05","-7","70","<git><github><git-commit><git-bash><git-add>","If a file is being tracked and you modify it, can you commit without adding?","<p>Assuming that <code>&lt;filename&gt;</code> is being tracked by git, is 
<code>git commit -m ""message"" &lt;filename&gt;</code> 
possible without doing a 
<code>git add &lt;filename&gt;</code>?</p>
","0","1292591","",""
"21353136","148298","2014-01-25 16:31:23","0","633","<git><git-rebase><git-commit>","Why can't I combine commits into one?","<p>Ok. I am at my wits end trying to find out why I can't merge two commits into one. Git is horribly complicated. I have series of commits that looks like this locally and remotely:</p>

<pre><code>commit 6abb264c06b06d42ea7e07a469107b9d3d72dffa
Author: XXXX &lt;xxx@xxxx.xxx&gt;
Date:   Thu Jan 23 15:59:03 2014 -0500

   First Check-in again (forgot to add project file and forgot to tick off append to last commit)


commit 90b2468f5267a471d52f2d7cc7cb1cd8604b3b86
Author: XXXX &lt;xxx@xxxx.xxx&gt;
Date:   Wed Jan 22 22:57:20 2014 -0500

   First check-in 
</code></pre>

<p>I want to combine them together into to look like this:</p>

<pre><code>commit 90b2468f5267a471d52f2d7cc7cb1cd8604b3b86
Author: XXXX &lt;xxx@xxxx.xxx&gt;
Date:   Wed Jan 22 22:57:20 2014 -0500

   First check-in 
</code></pre>

<p>I tried to rebase using pick, squash and whatever gourd named command available to no avail. It tells me it has squash/merged/picked whatever, but I always see two commits instead of one. </p>

<p>Also couldn't figure out what the difference was between pick and squash.  Also, I can't tell what the difference is between a commit and a branch. Moreover, I read that a branch is just a commit, but why do we have to merge branches but pick/squash (??) commits?  This is terribly confusing. </p>
","0","148298","",""
"10782978","1402685","2012-05-28 10:17:46","13","8217","<git><git-commit><git-reset><git-add><git-reflog>","Recover files that were added to the index but then removed by a git reset","<p>I added some files to the index but then by mistake I deleted them with <code>git reset --hard</code>.  How do I recover them?
Here's what happened:</p>

<ol>
<li>I added all files using <code>git add .</code></li>
<li>I then committed</li>
<li>When I checked the status, there were still files that weren't included in the commit from the add, which was strange</li>
<li>I added the untracked files again and it worked this time</li>
<li>But I wanted everything to be in 1 single commit so I looked up how to unstage what I just committed</li>
<li>I used <code>git reset --hard HEAD^</code> — bad idea obviously, all files were deleted</li>
<li>so then I used <code>git reflog</code> to find where I left off</li>
<li>then I used <code>git reflog ______</code> to go back to my last commit.</li>
<li>then I used <code>git reset HEAD</code> to unstage the commit (what I should have originally done) but the files I added (see above) after the commit were still gone.</li>
</ol>

<p>How do I get those files back?</p>
","4","1402685","0","0"
"65864463","13273054","2021-01-23 21:14:52","0","208","<git><github><commit><git-commit><git-diff>","Make Github to not show commit differences between a file for a particular commit","<p>I was working on a project which uses the API secret ids to perform a particular task. Initially, I used them (secret ids) as a string in my project and committed it to git. later I moved those secret ids to my environmental variables and again committed and pushed it to Github. Now when I go to the last commit, it shows the commit difference between the file (as usual) and it also shows the secret ids which I used before as string in my code.</p>
<p><a href=""https://i.stack.imgur.com/miDJv.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/miDJv.png"" alt=""enter image description here"" /></a></p>
<p>This can cause security issues.
How can I make a commit <strong>not show</strong> the commit diff for a particular commit? or any alternative solutions would be appreciated.</p>
","5","13273054","",""
"21362629","1197249","2014-01-26 11:10:04","0","57","<git><version-control><git-branch><git-merge><git-commit>","How can I remove a file from a commit of a private branch?","<p>I was working on master branch modifiying 10 files and adding 5 new ones.<br>
I realized that one of the files should not be modified and I should unstage it as the original version was correct.<br>
I also decided to continue my work in a branch.<br>
I did a: <code>git checkout -b newBranch</code><br>
Then I did a <code>git add</code> and <code>git commit</code> of all my work to the branch.<br>
But I forgot that I had to unstage one of the files!<br>
So now the only solution I can think of is to copy the original file from the master branch to my branch and then adding and commiting to replace the modified file.<br>
I think this should work, but I think it will be strange to merge later my last commit of my private branch with my master branch and deliver a file same as the one on the master.<br>
Is there a better way to deal with this mess?</p>
","0","1197249","",""
"65868438","14002066","2021-01-24 08:21:03","-1","1036","<git><git-commit><git-push><git-pull>","How to un-commit all un-pushed git commits without losing the changes","<p>Is there any way to undo all un-pushed commits (I made 3 commits to the wrong branch without pushing) without losing the changes?</p>
","4","14002066","",""
"40490714","7132439","2016-11-08 15:30:35","2","1452","<git><git-commit><aws-codecommit>","Can't commit to CodeCommit","<p>I'm not able to commit any files to my new CodeCommit repository, not sure why.</p>

<p>I've been able to clone my repository, so I'm able to connect to it. This would seem to rule out authentication issues. However, once I add and then commit a file I get the following error:</p>

<pre><code>$ git commit -m ""test""
*** Please tell me who you are.
Run
git config --global user.email ""you@example.com""
git config --global user.name ""Your Name""
to set your account's default identity.
Omit --global to set the identity only in this repository.
fatal: empty ident name (for &lt;(null)&gt;) not allowed
</code></pre>

<p>I've created an IAM user with the AWSCodeCommitPowerUser policy attached to it. This is the user currently configured by calling aws configure on the command line.</p>

<p>I've checked <code>git config --global -l</code> and it does return the contents of <code>.gitconfig</code>, so it is picking up the gut config setup as per AWS guidelines. The contents of this file are as follows:</p>

<pre><code>[credential]
    helper = !aws codecommit credential-helper --profile=IAMUserName $@
    UseHttpPath = tru
</code></pre>

<p>I'm really not sure what I'm missing here. I can connect to the repository and clone it, and my config looks to match the contents of the tutorial but I can't commit. I've tried removing the <code>--profile</code> part of the <code>.gitconfig</code> file but this hasn't resolved the issue either.</p>

<p>Can anyone advise what I'm missing here?</p>
","4","7132439","",""
"2745076","173634","2010-04-30 14:17:12","996","887367","<git><push><git-commit><git-push><git-index>","What are the differences between ""git commit"" and ""git push""?","<p>In a Git tutorial I'm going through, <code>git commit</code> is used to store the changes you've made. </p>

<p>What is <code>git push</code> used for then?</p>
","3","173634","0","0"
"21468771","2501747","2014-01-30 22:27:39","0","87","<git><git-commit><git-checkout>","Open specific version of Git repo in explorer","<p>Is there a way to open a version of a Git repository within Windows explorer?</p>

<p>I only see the current state in my explorer but I want to see a specific version. There must be a way with Git.</p>
","1","2501747","0","0"
"65904978","5582875","2021-01-26 16:14:12","1","137","<git><git-branch><git-commit><git-diff><git-log>","Git not displaying pending commits from remote master branch","<p>Sorry if this was answered somewhere else. I've looked at several threads, but to no avail :(</p>
<p>Simple question.
We have a remote master branch. A Dev has committed several changes to that remote master branch. I need to apply those to a local branch (the QA server, actually; no dev here), but before doing that, I want git to tell me which commits are pending.</p>
<p>I've tried several combinations of &quot;git diff&quot;, using the results from &quot;git branch -a&quot;, but nothing came back. Always empty.</p>
<pre><code>$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/respaldo
$
$ git diff HEAD master
$ git diff HEAD origin/master
$ git diff master origin/master
$ git diff master remotes/origin/master
$ git log origin/master..HEAD
$ git diff origin/master..HEAD
$
</code></pre>
<p>What am I doing wrong?</p>
<p>Thanks a lot!</p>
","5","5582875","",""
"65905772","5175709","2021-01-26 17:01:29","2","2847","<git><git-commit>","What does 'delete mode 100644' mean in a git commit?","<p>I made a commit and I get:</p>
<pre><code>229 files changed, 16 insertions(+), 22970 deletions(-)

delete mode 100644 Foo.file
.
.
.
delete mode 100644 Bar.file
</code></pre>
<p>FWIW I recently did some <code>git-worktree</code> stuff and created a new worktree but I don't think that has anything to do with this.</p>
","1","5175709","0","0"
"47235166","8245046","2017-11-11 06:41:11","4","319","<git><git-commit>","Is it possible to get the number of commits in last pull ?","<p>Assume that i am pulling changes from the repo to update my local repository. The changes which I pulled includes 4 commits. Is there any way to get the number of commits in the recent ""git pull"" ? Thanks!</p>
","2","8245046","0","0"
"47239362","7224731","2017-11-11 15:08:21","4","2816","<git><github><git-commit><squash>","Squash Commits of a branch after merging in GIT","<p>Hi I have a branch stable which contains merged commits of other branches. The structure is as follows:</p>

<p>Commit History:</p>

<pre><code>Commit 1 - Branch 1 commit 1 ------------- Hash Code 1
Commit 2 - Branch 2 commit 1 ------------- Hash Code 2
Commit 3 - Branch 2 commit 2 ------------- Hash Code 3
Commit 4 - Branch 2 commit 3 ------------- Hash Code 4
Commit 5 - Branch 3 commit 1 ------------- Hash Code 5
</code></pre>

<p>Branch 1,2,3 are deleted and has been merges with stable. Is there any way that in the commit history I can squash Commit 3 and Commit 4.</p>

<p>The desired result:</p>

<pre><code>Commit 1 - Branch 1 commit 1 ------------- Hash Code 1
Commit 2 - Branch 2 commit 1 ------------- Hash Code 2
Commit 5 - Branch 3 commit 1 ------------- Hash Code 5
</code></pre>

<p>When I do git rebase -i, it gives the noop scrren in rebasing.<a href=""https://i.stack.imgur.com/tZbiJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tZbiJ.png"" alt=""enter image description here""></a></p>
","3","7224731","",""
"47240380","7224731","2017-11-11 16:48:56","0","789","<git><github><git-commit><pull-request>","Squash commits of a closed pull request","<p>I have a merged and closed pull request. After that I deleted that branch. And all the commits of that branch now shows in the history of merged branch. Now There is an option to restore the branch in Git, but what I really want is to squash some commits of that PR so that it will not be shown in the commit history of branch where it is merged. Say initially PR has 5 commits and successfully merged and closed. 
Is there any way to squash some commits from the merged and closed PR?</p>
","3","7224731","",""
"21608432","631051","2014-02-06 16:25:41","7","25212","<git><git-commit><git-revert>","Why is git revert telling me ""bad revision"" when I use a commit hash?","<p>I am trying to revert to an earlier git commit but get the error ""bad revision"".  Why?</p>

<p>Here is a transcript (with author names removed):</p>

<pre><code>Ellen@ELLEN-PC /c/Users/Susan Mills/git/hello-github (master)
$ git status
# On branch master
nothing to commit, working directory clean

Ellen@ELLEN-PC /c/Users/Susan Mills/git/hello-github (master)
$ git log | head
commit e3eb30cc7ca6d4cd10de755b63821cad75da1e83
Date:   Wed Feb 5 17:54:32 2014 -0800

    I changed my greeting.

commit 063ac580e28bab524286dac7b0a8f88d9e7d365f
Date:   Mon Feb 3 07:53:19 2014 -0800

Ellen@ELLEN-PC /c/Users/Susan Mills/git/hello-github (master)
$ git revert 9e7d365f
fatal: bad revision '9e7d365f'
</code></pre>

<p>Why am I getting ""bad revision"", and what should I do?  I am using <code>git bash</code> on Windows 7  with my origin on github.</p>
","0","631051","0","0"
"40622813","7165063","2016-11-16 01:56:37","-1","6351","<bash><git><git-commit><git-add>","How do I add the src directory instead of the individual files?","<p><strong><em>I've created a directory called 'src' which contain the files 'level.txt' and 'notes.txt':</em></strong></p>

<pre><code>Remys:git-practice Remyce$ cd src

Remys:src Remyce$ ls

level.txt   notes.txt
</code></pre>

<p><br>
<strong><em>How do I add the src directory instead of the individual files? It keeps coming up with:</em></strong></p>

<pre><code>Remys:src Remyce$ add src

-bash: add: command not found
</code></pre>

<p><strong><em>I also need to commit the files to the repo.</em></strong></p>
","1","7165063","0","0"
"59499569","5761286","2019-12-27 10:44:00","0","108","<git><git-commit><gitpython>","Release hash of a repo does not show in its ""git log""","<p>To mine repositories. I'm basically traversing its git commits to extracting info. However, in many repositories, I see that the hash of a release is not present in the git log.</p>

<p>For example in project <a href=""https://github.com/bitcoin/bitcoin/releases"" rel=""nofollow noreferrer"">bitcoin</a>, the hash of release v0.19.0.1 is 1bc9988. The git log does not show this commit hash. However, ""git log --all"" contains this commit hash.</p>

<p>I'd like to know the reasoning behind this. Why is this hash not present in a git log? My mining work is dependent on extracting data from major releases of a project. I'm using PyDriller to do this.</p>

<pre><code>from pydriller import RepositoryMining

commits = RepositoryMining(repo_path, only_in_branch=repo_branch).traverse_commits()
for commit in commits:
    // working with a commit
</code></pre>

<p>How can I get the commits of the major releases?</p>
","2","5761286","",""
"47249985","7366236","2017-11-12 14:32:08","-2","1802","<git><github><git-commit>","Change datetime of a Git commit","<p>Is it possible to change the date of a commit in Git?</p>

<p>If yes does this modification leave any track?</p>

<p>Basically I want to change the date of a commit but it should not be visible to anyone that the date has changed by me.</p>

<p>As I have researched it is possible to change the date by using <code>git filter-branch</code> but I do not know whether this leaves any history. </p>
","6","7366236","",""
"65923031","1391441","2021-01-27 16:13:23","3","2632","<git><git-branch><git-commit><git-stash>","Moving uncommitted changes to a new branch: git: stash vs checkout","<p>I've done some changes to my code in <code>branch1</code>, but now I need to move those changes to another branch.  Graphically, I have:</p>
<pre><code>master
  |___develop
         |___branch1
</code></pre>
<p>and I need to move all the <strong>uncommitted changes and untracked files</strong> to a new branch <code>branch2</code> (which does not exist):</p>
<pre><code>master
  |___develop
         |___branch1
         |___branch2
</code></pre>
<p>after which I'll just delete <code>branch1</code> since all its changes are already pushed, and be left with all the uncommitted changes and untracked files in <code>branch2</code>:</p>
<pre><code>master
  |___develop
         |___branch2
</code></pre>
<p>There are quite a few of similar questions in SO but I'm still not sure how I should proceed in my case. Some say to use <code>git stash</code> (<a href=""https://stackoverflow.com/q/556923/1391441"">How do I merge my local uncommitted changes into another Git branch?</a>, <a href=""https://stackoverflow.com/q/7217894/1391441"">moving changed files to another branch for check-in</a>) which in my case I guess would be:</p>
<pre><code>git stash -u
git checkout develop
git checkout -b branch2
git stash pop
</code></pre>
<p>but other answers (<a href=""https://stackoverflow.com/q/4746672/1391441"">Put current changes in a new Git branch</a>, <a href=""https://stackoverflow.com/q/13687334/1391441"">Moving uncommitted changes to a new branch</a>) say to simply use <code>checkout</code> as:</p>
<pre><code>git checkout -b branch2
</code></pre>
<p>but I'm not sure if this will carry my untracked files too. There's a newer answer that recommends using <code>switch</code> (<a href=""https://stackoverflow.com/q/1394797/1391441"">Move existing, uncommitted work to a new branch in Git</a>), but my <code>git</code> version  2.17.1 does not have this command.</p>
<p>Any help will be much appreciated.</p>
","3","1391441","0","0"
"21625291","2112025","2014-02-07 10:29:48","2","1578","<git><github><git-commit>","How to do a git commit without the log is being recorded","<p><strong>Scenario Explained:</strong> I have done my functionalities and pushed to some git branch &amp; shared the commit version to my Project manager. Later on, I realized that I missed out a functionality and I want to push it to the same branch without any commits being logged., The newly pushed commit should get appended to the last commit with the same commit version I shared to my Project Manager.</p>
","0","2112025","",""
"65950520","571816","2021-01-29 07:45:21","0","67","<git><gitignore><git-commit>","Git force ignored files, are they available at clean checkout/clone?","<p>lets say I add one file to .gitignore and still commit it with -f (forced). Does someone else get it automatically when they do checkout/clone on their pc? Or since the file is ignored, its not downloaded?
Thanks</p>
","1","571816","",""
"47279658","5939026","2017-11-14 07:09:17","0","48","<cmd><bitbucket><git-commit><git>","Remove all commits form bitbucket repositry","<p>I am new in git. I have a repositry in bitbucket. I want to remove all commits of repositry but it's shouldn't affect local files.</p>

<p>Which commands should I use.</p>

<p>How to do this.</p>

<p>Thanx</p>
","4","5939026","",""
"21758477","2268310","2014-02-13 15:28:41","0","226","<git><github><git-commit>","Git merge from master to stage overwrite conflicts","<p>So I have a git branch that I wrote directly to master the fixes for the files.  I was working on the files in stage in the same area.  Now I have CONFLICTS.  The problem is I'm having conflicts with about 1900 files.  I don't want to go in and fix each conflict.  Is there anyway to merge the master with stage overwriting all conflicts and taking what's in master?</p>
","6","2268310","",""
"59637512","12507489","2020-01-07 23:25:39","1","34","<github><repository><atlassian-sourcetree><git-commit><git-pull>","How do I commit changes to a repository while I am 1 behind and 2 ahead?","<p>So I am 1 behind and 2 ahead on this GitHub repository.<br>
When I got to pull to solve the 1 behind problem it gives me this output:</p>

<pre><code>git --no-optional-locks -c color.branch=false -c color.diff=false -c color.status=false -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree fetch origin 
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I'm not really sure what this means and would like to solve this issue as soon as possible and upload some files onto the repository.<br>
I'm a beginner when it comes to GitHub and SourceTree. </p>
","0","12507489","0","0"
"40861048","3234814","2016-11-29 08:30:08","1","811","<git><github><git-commit>","How to re-authorize a GIT commit?","<p>This may be a dumb question, wondering if this was possible or not? 
I have one local commit which I cherry-picked from some other branch and want to re-authorize that commit. Currently it shows Authored by 'someone else'. I want it to be re-author so that it shows Authored by 'me'. 
Is re-authorization possible? </p>
","2","3234814","",""
"47525960","6870826","2017-11-28 07:16:43","0","117","<git><github><push><git-commit>","How to get back to a previous commit stage","<p>I was working with some people on a project. I made some changes on my local machine and then committed the changes. There was an error that my branch was behind the master branch. So I pulled these changes and committed mine. But then I realized that I had a lot of errors (which came after I pulled the changes on Github and merged it with my project) in my project and I had pushed the changes to the master branch along with the errors.</p>

<p>All I want to know is that how can I get back to a stage marked by a previous commit (which a teammate of mine did). </p>
","0","6870826","",""
"11886637","623453","2012-08-09 15:20:44","1","1696","<git><git-commit>","git commit -m ""some message"" returns error: pathspec","<p>I'm trying to push a commit to my repository with a command-line commit message:</p>

<pre><code>git commit -m ""some commit message""
</code></pre>

<p>but I keep getting the following error:</p>

<pre><code>error: pathspec 'commit' did not match any file(s) known to git.
error: pathspec 'message' did not match any file(s) known to git.
</code></pre>

<p>I've seen this question answered for obvious cases, like forgetting to use the '-m' flag when pushing a commit (<a href=""https://stackoverflow.com/questions/4133138/how-do-i-correct-the-error-pathspec-message-when-committing-in-git"">here</a>), but I'm using the correct flag -- this exact syntax works on other machines with clones of the same repository. On the troublesome (Red Hat 4.1.2) machine, I'm using:</p>

<pre><code>git version 1.7.3.3
</code></pre>

<p>And I get the same error if I try using the long-form flag:</p>

<pre><code>git commit --message=""some commit message""
</code></pre>

<p>Has anyone seen this before? I don't have root access on this machine, so I can't update, but I'm wondering if this is a known issue with the above version (didn't find anything from googling though), or possibly a problem with the git configuration on this system?</p>

<p><strong>Edit: Solved!</strong></p>

<p>I think I found the problem. I'm not too familiar with Red Hat, but what I found is the executable <em>/usr/local/bin/git</em> points to some executable called <em>run-rhel</em>, e.g. </p>

<pre><code>/usr/local/bin/git -&gt; run-rhel
</code></pre>

<p>and this executable is messing with git's command structure. I prepended the real git executable to my $PATH:</p>

<pre><code>export PATH=/path/to/real/executable:$PATH
</code></pre>

<p>and now everything seems to work! Thanks for the quick response though!</p>
","1","623453","",""
"3228457","374605","2010-07-12 12:24:19","12","1676","<git><branch><checkout><git-commit><git-checkout>","Git: Howto move changes since last commit to a new branch","<p>I have been working on a branch which we can call ""A"". I just realized that the code I have added since I last committed should rather be in a specific (experimental) branch, but not in ""A"". How can I commit the changes to a new branch and leave branch ""A"" as it was when I last committed?</p>
","1","374605","0","0"
"21888303","3329205","2014-02-19 17:46:46","0","620","<git><git-push><git-commit>","same file displayed in ""not staged for commit"" and ""to be committed"" since the file isnt edited","<p>Hi I have a problem with Git and hope somebody can give me some help.</p>

<pre><code>             /`\
            / : |
   _.._     | '/
 /`    \    | /
|  .-._ '-""` (
|_/   /   o  o\
      |  =  () )= FOLLOW THE WHITE RABBIT!
       \  '--`/
       / ---&lt;`
      | ,    \\
      | |     \\_
      / ;     |.__)
     (_/.-.   ;
    { `|   \_/
     '-\   / |
        | /  |
       /  \  '-.
       \__|----'

Last login: Wed Feb 19 13:28:48 2014 from xxx.xxx.xxx.xxx
</code></pre>

<p>Logged in and doin some things</p>

<pre><code>user@matrix:~$ cd htdocs/blabla.de/
user@matrix:~/htdocs/blabla.de$ git status
# On branch master
nothing to commit (working directory clean)

user@matrix:~/htdocs/blabla.de$ git pull origin master
Enter passphrase for key '/home/any/path/.ssh/id_rsa':
From ssh://git.ownserver.de:22/any/project
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.

user@matrix:~/htdocs/blabla.de$ git checkout dev
Switched to branch 'dev'

user@matrix:~/htdocs/blabla.de$ git pull origin dev
Enter passphrase for key '/home/any/path/.ssh/id_rsa':
From ssh://git.ownserver.de:22/any/project
 * branch            dev        -&gt; FETCH_HEAD
Already up-to-date.

user@matrix:~/htdocs/blabla.de$ git checkout master
Switched to branch 'master'
</code></pre>

<p>created my new Branch for some style changes</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git checkout -b cal/style
Switched to a new branch 'cal/style'
</code></pre>

<p>Change styles with IDE</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git status
# On branch cal/style
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   fileadmin/templates/css/reiseseiten.css
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Added changed File to Index</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git add fileadmin/templates/css/reiseseiten.css
</code></pre>

<p>Commit Changes</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git commit -m '11715 Hintergrundfarbe bei Modulen (CAL)'
[cal/style aada6a3] 11715 Hintergrundfarbe bei Modulen (CAL)
 1 file changed, 3 insertions(+), 3 deletions(-)
 mode change 100644 =&gt; 100755 fileadmin/templates/css/reiseseiten.css
</code></pre>

<p>Switch to master</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git checkout master
Switched to branch 'master'
</code></pre>

<p>Merge Changes into master</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git merge cal/style
Updating b3260c3..aada6a3
Fast-forward
 fileadmin/templates/css/reiseseiten.css |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)
 mode change 100644 =&gt; 100755 fileadmin/templates/css/reiseseiten.css
</code></pre>

<p>Push into repository -> Without Errors</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git push origin master
Enter passphrase for key '/home/any/path/.ssh/id_rsa':
Counting objects: 11, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 554 bytes, done.
Total 6 (delta 5), reused 0 (delta 0)
To ssh://git@git.ownserver.de:22/any/project.git
   b3260c3..aada6a3  master -&gt; master
</code></pre>

<p>Doin some other shit in Firebug (not in any File of this GitRepo)</p>

<p>20 Minutes later check status of the project (THIS IS ONLY A LOCAL PROJECT, ONLY I HAVE ACCESS)</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   fileadmin/templates/css/reiseseiten.css
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   fileadmin/templates/css/reiseseiten.css
#
</code></pre>

<p>I looked for the commit time (17:18) and inside the filesystem for the last-change time of the File.</p>

<p>Same Time for both, so nobody changed this file after commit</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git log
commit aada6a375bce002c26910afea6024c40c6f754a1
Author: Christian user &lt;user@me.de&gt;
Date:   Wed Feb 19 17:18:14 2014 +0100

    11715 Hintergrundfarbe bei Modulen (CAL)
</code></pre>

<p>Think thats a sideeffect and already done with a fetch</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git fetch
Enter passphrase for key '/home/any/path/.ssh/id_rsa':
</code></pre>

<p>But iam wrong thats no sideeffect, BUT WHAT IST THIS?</p>

<pre><code>user@matrix:~/htdocs/blabla.de$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   fileadmin/templates/css/reiseseiten.css
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   fileadmin/templates/css/reiseseiten.css
#
</code></pre>

<p>Looked inside the Diff and see that are the changes of my last commit.</p>

<p>Whats wrong?</p>
","7","3329205","",""
"21893187","1190203","2014-02-19 21:46:26","3","913","<git><github><git-commit>","How do i fill out the description field when doing a git commit?","<p>In the github for mac application there is a summary and description field to you can fill out with each commit.  i know that the summary field is the same as using the -m option in command line but what about the description field, how do i do that part over command line?</p>
","0","1190203","0","0"
"29030532","1632286","2015-03-13 11:00:10","0","52","<git><github><commit><git-commit>","Git commits reset unknown to my name","<p>I changed my desktop(old to new) and forgot to add gitconfig file with username and email.</p>

<p>I commit and pushed lot of stuff on github from the last 1 month but didn't noticed my name was unknown.</p>

<p>Is there anyway i can reset that commits username from unknown to mine.</p>

<p>I already added config now but my previous major  contribution is unkown :-(.</p>

<p>Any help would be appreciated. </p>
","0","1632286","0","0"
"47542147","7405434","2017-11-28 22:40:43","2","307","<xcode><git><bitbucket><git-merge><git-commit>","Pushing new git changes without checking out master (Xcode/Bitbucket)","<p>I'm new to git and I started making changes to a previous commit without creating a new branch. (oops) </p>

<p>Now my local version is no longer the current master. Trying to push the changes gives me the following error: ""The current branch could not be determined."" If I check out the current master, I can commit as normal, but I lose all the changes I made after the mistake (but save in a backup local copy).</p>

<ol>
<li><p>How do I push my new changes without checking out the current master? (branch, merge, etc.)</p></li>
<li><p>Or how do I connect my existing project to a new repository and start over? 
(I tried changing the repository location to a new url, but I still have to check out the master to push..)</p></li>
</ol>

<p>If the answer requires terminal commands, baby steps would be appreciated.</p>
","6","7405434","",""
"2432579","75924","2010-03-12 12:15:54","472","554432","<git><git-commit>","git: Your branch is ahead by X commits","<p>How does this actually come about?</p>

<p>I am working in one repo by myself at the moment, so this is my workflow:</p>

<ol>
<li>Change files</li>
<li>Commit</li>
<li>Repeat 1-2 until satisfied</li>
<li>Push to master</li>
</ol>

<p>Then when I do a <code>git status</code> it tells me that my branch is <em>ahead by X commits</em> (presumably the same number of commits that I have made). Is it because when you push the code it doesn't actually update your locally cached files (in the .git folders)? <code>git pull</code> seems to 'fix' this strange message, but I am still curious why it happens, maybe I am using git wrong?</p>

<hr>

<blockquote>
  <p>including what branch is printed in the message</p>
</blockquote>

<p>My local branch is ahead of master</p>

<blockquote>
  <p>where do you push/pull the current branch</p>
</blockquote>

<p>I am pushing to GitHub and pulling to whichever computer I happen to be working on at that point in time, my local copy is always fully up to date as I am the only one working on it.</p>

<blockquote>
  <p>it doesn't actually check the remote repo</p>
</blockquote>

<p>That is what I thought, I figured that I would make sure my understanding of it was correct.</p>

<blockquote>
  <p>are you passing some extra arguments to it?</p>
</blockquote>

<p>Not ones that I can see, maybe there is some funny config going on on my end?</p>

<pre><code>$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)
</code></pre>
","5","75924","0","0"
"21320851","1977946","2014-01-23 22:41:39","3","1846","<git><vim><git-commit>","How to get Vim to open .git\COMMIT_EDITMSG instead of .git\.git\COMMIT_EDITMSG?","<p>For some reason, vim keeps trying to open file <strong>COMMIT_EDITMSG</strong> from the wrong path every time. I've been doing multiline commit messages using git-gui cause I was too lazy to fix this problem but I'm getting tired of opening explorer just to commit something. Here's a screengrab that shows what happens when I try to edit a previous commit message:</p>

<p><img src=""https://i.stack.imgur.com/O9jne.png"" alt=""enter image description here""></p>

<p>And when I try to write the file(note the wrong path):  </p>

<p><img src=""https://i.stack.imgur.com/ngrxG.png"" alt=""enter image description here""></p>

<p>It suddenly works when you change the editor to <strong>notepad</strong>:</p>

<p><img src=""https://i.stack.imgur.com/opWIp.png"" alt=""enter image description here""></p>

<p><strong>EDIT</strong>:</p>

<p>I've narrowed down the possible causes of the problem to these two settings(after a clean installation and some trial and error):</p>

<pre><code>set autochdir
set encoding=utf-8
</code></pre>

<p>The error can be reproduced with only these two lines your <strong>.vimrc</strong>(at least in mines). The strange thing is that, commenting out one of these statements causes the error to disappear.</p>

<p>Another way to reproduce that error is through these commands:</p>

<p>You should get <code>"".git\COMMIT_EDITMSG"" [New DIRECTORY]</code> with this commmand:  </p>

<pre><code>vim -N -u NONE --cmd ""set autochdir | set encoding=utf-8"" .git\COMMIT_EDITMSG
</code></pre>

<p>And strangely enough, it should open the file with either of these:  </p>

<pre><code>vim -N -u NONE --cmd ""set autochdir""        .git\COMMIT_EDITMSG
vim -N -u NONE --cmd ""set encoding=utf-8""   .git\COMMIT_EDITMSG
</code></pre>
","0","1977946","0","0"
"59237984","9207943","2019-12-08 17:28:51","0","476","<git><git-commit>","Use of git commit to push to local repo","<p>I came to know that the 'git commit' command is to save the files in local repo. 
The local repo is our computer where we locally make changes. If so why do we need to use the command to save the changes in local? Please someone explain me. </p>
","0","9207943","",""
"59238571","2950593","2019-12-08 18:28:36","4","3690","<git><gitlab><git-commit><git-filter-branch>","How to change author of git commit using ssh keys","<p>I have created the ssh key and added it to my gitlab account.</p>

<p>Then, I've made a commit:</p>

<pre><code>git add .
git commit -m ""w""
git push origin master
</code></pre>

<p><img src=""https://i.stack.imgur.com/Zgg4M.png"" alt=""enter image description here"">(<a href=""https://prnt.sc/q7yc4q"" rel=""noreferrer"">https://prnt.sc/q7yc4q</a>)</p>

<p>But as you can see my username when I committed was <code>root</code>(this is because user on my laptop is <code>root</code></p>

<ul>
<li><p>1)How do I set the desired username let's call it <code>batman</code>, so instead of root I want batman to be displayed as commit author?</p></li>
<li><p>2)Can I do this using only gitlab interface and without messing with my git
config on my laptop? (I am asking because I have several git accounts and I need to use
different accoounts for my projects)</p></li>
</ul>
","0","2950593","0","0"
"59238956","6625422","2019-12-08 19:10:35","1","50","<git><git-commit>","How to change what is shown in commit editor?","<p>When I type <code>git commit file.c</code>, <code>vim</code> is opened with something like</p>

<pre><code>
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# Explicit paths specified without -i or -o; assuming --only paths...
# On branch work                      &lt;- From here -&gt;
# Changes to be committed:
#       modified:   file.c
#
# Untracked files:
#       job.sh                        &lt;- To here -&gt;
</code></pre>

<p>I can tell the section I quoted is something like the output of <code>git status</code>. How can it be changed? I want it to show <code>git diff file.c</code>. Can it be done? If yes, how? </p>

<p>Thanks</p>
","0","6625422","",""
"40374564","5584928","2016-11-02 07:33:30","0","4542","<git><git-branch><git-commit><cherry-pick><git-add>","How to merge specific commit id from different branch in same repo","<p>I had two branches master &amp; trunk.</p>

<p>I have created one more branch in local using <code>git checkout -b new_branch origin/master</code> to take the master code in that branch.</p>

<p>I have added committed some changes in this new branch &amp; pushed as:</p>

<pre><code>git add --all
git commit -m ""my custom message""
git push origin new_branch
</code></pre>

<p>Now i have to merge only this commit id changes(In branch new_branch) in my trunk branch.</p>

<p>I know about <code>git cherry-pick</code>. <strong>Can any one confirm if below procedure is correct:</strong></p>

<p><strong>Step 1:</strong> I have to switch to trunk branch using <code>git checkout trunk</code><br/>
<strong>Step 2:</strong> Now merge that commit id using <code>git cherry-pick MY_COMMIT_ID</code><br/>
<strong>Step 3:</strong> Now push those changes to trunk using <code>git push origin trunk</code><br/>
<strong>Step 4:</strong> Now use <code>git pull origin trunk</code> in remote server</p>
","1","5584928","0","0"
"2593365","26630","2010-04-07 14:41:42","3","384","<git><trac><git-commit>","How can I create a custom cleanup mode for git?","<p>I'd like to have a commit message cleanup that will not necessarily remove lines beginning with a <code>#</code> in the message itself. The default <code>--cleanup=strip</code> removes <strong>all</strong> lines starting with a <code>#</code> character. </p>

<p>The reason being is unfortunately, the <a href=""http://trac.edgewall.org/"" rel=""nofollow noreferrer"">Trac</a> engine's wiki formatter uses hashes in the beginning of a code block to denote the syntax type. This creates difficulty when using the engine's syntax in my commit messages. </p>

<p>Example:</p>

<pre><code>Created demo of perl added to helloworld.pl

{{{
#!/usr/bin/perl
use strict;
# say hi to the user.
print ""hello world\n"";

}}}

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD^1 &lt;file&gt;..."" to unstage)
#
#   added:   helloworld.pl
# and so on and so forth...
</code></pre>

<p>I would like the following result in the final logged commit message:</p>

<pre><code>commit 1234567890123456789012345678901234567890
Author: Danny &lt;...&gt;
Date:   Wed Apr 7 13:34:29 2010 -0400

     Created demo of perl added to helloworld.pl

     {{{
     #!/usr/bin/perl
     use strict;
     # say hi to the user.
     print ""hello world\n"";

     }}}
</code></pre>

<p>I'd like to use a custom filter that removes all lines beginning with a hash from the bottom of the commit message upwards. Leaving the lines in the message I have added alone. Where or how can I specify this in git?</p>

<p>Note, creating a sed or perl script to perform the operation is not a problem, just knowing <em>where to hook it</em> into git is the question.</p>

<p>My apologies on the confusion of my question, I hadn't realized how vague it was.</p>
","3","26630","",""
"21450008","2900182","2014-01-30 07:12:28","10","18652","<github><git-commit><github-for-windows>","How Can I hide a commit in GITHUB","<p>I posted some code in github but accidentally posted some passwords too and I changed them but it still seen in the commit section.</p>

<p>How could I hide that commit?</p>
","1","2900182","",""
"59354221","9593832","2019-12-16 09:58:04","3","1998","<github><git-commit>","Do you lose contributions of a project if you get removed from this project?","<p>I can't seemed to find this information anywhere, but just wanna ask that if you are a contributor of a project and you worked on it so you can see all of those contributions on the chart, but then for whatever reason the owner of the project removed you, do you lose all of those contributions? as in will those green contribution grids(the days you work on it) go back to grey?</p>
","0","9593832","0","0"
"2730720","262667","2010-04-28 15:11:51","1","685","<git><git-commit><git-amend>","What happens when amending an old commit with git?","<p>I don't really understand what happens if I check out an old commit, do some modifications, and commit using <code>git commit --amend</code>. </p>

<p>Will that change automatically propagate to future commits? How does it work?</p>
","0","262667","",""
"21462380","834176","2014-01-30 16:44:28","1","945","<git><git-commit><changeset><git-tfs><commit-message>","Make Git commit message reflect edited TFS changeset comment","<h2>TL;DR</h2>

<p>As described in <a href=""https://stackoverflow.com/a/17245697/834176"">this post</a>, I changed a TFS changeset comment. How can I get this to be reflected in the corresponding Git commit in my local Git repository, using Git-Tfs?</p>

<h2>Verbose version</h2>

<p>I'm a Git-Tfs user. My workflow is such that I try to commit extremely small increments of code to my local Git repository (""one line change&mdash;tests green&mdash;commit"" sort of thing) and push it up to the TFS server once I have a meaningful (but hopefully still small) changeset. Often this is after just one Git commit, but sometimes it is after several.</p>

<p>When checking several Git commits into TFS at once, Git-Tfs combines the Git commit messages as the default TFS check-in comment. So far so good. I usually tamper with them to make them a read more smoothly as a single changeset comment. But today I forgot to and checked in a message that would have been less than helpful to my TFS-using coworkers.</p>

<p>Okay, no big deal. I used TFS to edit the changeset comment to make it more coherent. However, I have not been able to get my local Git repository synced up with this change. This is not a big deal, because mainly I changed it for other people. However, I am curious to see if I can get it synced up.</p>

<h2>What I've tried</h2>

<p>I tried this, but the commit message is still what it was before I edited the changeset comment:</p>

<pre><code>git reset --hard HEAD~
git tfs pull
</code></pre>
","0","834176","",""
"21462900","1476878","2014-01-30 17:07:13","1","95","<git><git-commit><git-log>","git log shows only the most recent revision of a file","<p>In order to compare two revisions of a file in a project, I did a <code>git log /path/to/file</code> which only returns the last commit.</p>

<p>When executing <code>git blame /path/to/file</code> I got the trace of each line with the correct sha, dates, and authors.</p>

<p>So the commits are stored but somehow <code>git log</code> doesn't show them.</p>

<p>Any idea on how to fix this?</p>
","1","1476878","0","0"
"59452697","11703262","2019-12-23 09:13:56","0","370","<python><git><git-commit><gitpython>","How can I calculate commit size difference of each commit in python?","<p>For example consider a git repository having 5 commits with size 1Mb, 2Mb, 2.5Mb, 3Mb and 2Mb at each of the commits. I wish to obtain the difference of each commit size in python. That is 1Mb, 1Mb, 0.5Mb, 0.5Mb, -1Mb.</p>

<p>Is there any way or command in python wherein I could calculate the size of the repository at each commit, and then I could simply subtract each subsequent entry to obtain the difference, or a direct command to do so. </p>

<p>I am using gitpython from a python script to perform git operations. </p>
","6","11703262","0","0"
"40582038","904344","2016-11-14 04:49:33","3","300","<git><github><git-bash><git-commit><git-gui>","Git for Windows is creating commits with duplicate dates to the one before it?","<p>I use Git for Windows and the GUI that comes along with it, and when I create a new commit either in Git Bash or Git GUI, it's creating new commits with the same date as the one before it.</p>

<p><a href=""https://i.stack.imgur.com/D1gZ8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/D1gZ8.png"" alt=""Git GUI showing duplicate dates created""></a></p>

<p>I have no idea why it's doing this. I've gotten most of the commits I needed done tonight, but I don't want all my commits to be stuck on November 13th!</p>

<p>A week later (11/20) and I am still able to reproduce this issue. These are my global Git variables:</p>

<pre><code>MINGW64 /d/Users/Public/Music/Playlists (master)
$ echo ${!GIT_*}
GIT_EXEC_PATH

MINGW64 /d/Users/Public/Music/Playlists (master)
$ echo $GIT_EXEC_PATH
C:\Program Files\Git\mingw64/libexec/git-core
</code></pre>
","13","904344","0","0"
"40589934","4302760","2016-11-14 13:30:31","0","2272","<git-commit><pull-request>","How to create pull request to specific commit","<p>I have a forked project with latest commit in master is some C {A->B->C},
and i have another branch say some ""dev"" with commits ex:A->B->C->X->Y->Z</p>

<p>Now how can i create multiple pull requests(split every commit X,Y,Z as pull request) from my branch.</p>

<p>If is there any possibility , please suggest me...</p>
","0","4302760","",""
"40599152","1768008","2016-11-14 22:48:48","1","79","<git><git-commit>","How to remove commits from master without 'revert' or 'rebase' commands?","<p>I have a <strong>master</strong> branch. I want to remove the commits from the point of a previous commit which was two weeks ago to this point from the <strong>master</strong> branch.</p>

<p>I can't use <code>git revert</code> due to an existing revert already in that branch and will cause issues. I'm looking for a solution to point the <strong>HEAD</strong> to a previous commit or <strong>SHA1</strong> in the <strong>master</strong> branch and set that <strong>SHA1</strong> as the master.</p>
","1","1768008","",""
"40609483","1197249","2016-11-15 12:07:14","0","527","<git><git-commit>","How to partially revert/amend a pushed commit?","<p>There is a pushed commit that modifies e.g. 8 files.<br>
I would like to revert that commit but only keep the changes in 2 of the files.<br>
That is because I would like to change the implementation of this commit.<br>
What I was thinking is to do a <code>git revert</code> and then on the revert commit <code>commit —amend</code> code so as to not have 1 revert and 1 new commit.<br>
Is there a better way for this?</p>
","0","1197249","",""
"59576593","11472299","2020-01-03 10:06:30","2","460","<git><git-commit><git-push><git-amend><git-alias>","Git alias with multiple command","<p>After a review, i need to change some code and repush all my change code on the remote branch.</p>

<p>So i would like to automate on git with an alias (ex: <code>git repushall</code>) these different commands:</p>

<p><code>git add .</code>
 <code>git commit --amend</code> (and ctrl + x)
 <code>git push --force-with-lease</code></p>

<p>I know it's in the <code>.gitconfig</code> file </p>

<p>Do you have any idea ?</p>
","0","11472299","",""
"59583523","998537","2020-01-03 18:25:50","0","514","<git><phpstorm><editor><git-commit><jetbrains-ide>","Git PhpStorm - cannot close commit dialog","<p>This is a pretty simple scenario. In <a href=""https://www.jetbrains.com/phpstorm/"" rel=""nofollow noreferrer"">PhpStorm</a> <strong>v2018.3</strong> while using git, if I commit anything then the built in terminal there says it is waiting for the user to close the dialog to be popped up now. The dialogue window pops up and  lets me add a message regarding the commit. And at the end of the message dialogue, I see the lines : </p>

<pre><code>^G Get Help      ^O Write Out     ^W Where Is      ^K Cut Text      ^J Justify       ^C Cur Pos       M-U Undo         M-A Mark Text    M-] To Bracket
^X Exit          ^R Read File     ^\ Replace       ^U Paste Text    ^T To Spell      ^_ Go To Line    M-E Redo         M-6 Copy Text    ^Q Where Was
</code></pre>

<p>I typed both <code>^X</code> and <code>exit</code> and then hit the <code>Enter</code> key but the dialogue window does not close. How can I close that ?</p>

<p><strong>EDIT:</strong>
 I am adding a screenshot of the PhpStorm Editor in the mentioned scenario. <strong>Open the image in a new tab to see it in large view.</strong>
<a href=""https://i.stack.imgur.com/dEFMj.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dEFMj.jpg"" alt=""enter image description here""></a></p>
","3","998537","",""
"59588400","1331568","2020-01-04 06:13:55","3","1525","<github><flutter><commit><git-commit>","File ios/Flutter/Flutter.framework/Flutter is 351.71 MB; this exceeds GitHub's file size limit of 100.00 MB","<p>I am trying to push my latest commit to GitHub. But is is showing me following error:</p>

<pre><code>remote: Resolving deltas: 100% (43/43), completed with 41 local objects.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: c8bf146b362d19d128f2ffe74b5b5b9d
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File ios/Flutter/Flutter.framework/Flutter is 351.71 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/ChandraPrakashJangid/geo_tags.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
</code></pre>
","1","1331568","",""
"21715279","994466","2014-02-11 23:17:14","0","198","<git><git-commit><git-diff><gitk>","Why is committing code so much faster than running diff?","<p>I like to check my commits before I push them upstream, so I always run a <code>gitk</code> (I like a little visual) before committing. I've noticed, though, that it's much quicker to commit the code first and then run gitk.</p>

<p>Slower:</p>

<ol>
<li>[with uncommitted changes]</li>
<li><code>gitk</code></li>
<li>review uncommitted changes</li>
</ol>

<p>Quite a bit faster: (haven't timed it, but it seems instant, as opposed to a few second lag)</p>

<ol>
<li>git commit</li>
<li><code>gitk</code></li>
<li>review last commit</li>
<li>Revert or amend as necessary.</li>
</ol>

<p>My understanding was the <code>git</code> basically runs a diff when it creates commits. So why does it take so much longer to diff the uncommitted code than to commit and review the last commit?</p>
","7","994466","",""
"59595224","7120091","2020-01-04 22:03:03","0","52","<linux><git><github><git-commit><git-config>","Commit -m not working after staging changes","<p>I've used git many times before but since I made a new Linux installation, I've not been able to commit my changes. I keep receiving this error:</p>

<pre><code>*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: empty ident name (for &lt;my@mail.com&gt;) not allowed
</code></pre>

<p>So of course, I run the steps provided with my own credentials and I keep receiving the same error every time I try to commit changes.</p>

<pre><code>    git config -l --show-origin
    file:/home/george/.gitconfig    user.email=my@mail.com
    file:/home/george/.gitconfig    user.name=George Lastname
    file:.git/config        core.repositoryformatversion=0
    file:.git/config        core.filemode=true
    file:.git/config        core.bare=false
    file:.git/config        core.logallrefupdates=true
    file:.git/config        remote.origin.url=https://github.com/mygithub/repo
    file:.git/config        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
    file:.git/config        branch.master.remote=origin
    file:.git/config        branch.master.merge=refs/heads/master
</code></pre>
","1","7120091","",""
"21716845","232988","2014-02-12 01:30:49","1","743","<git><git-commit>","Git Reset File Changes not working","<p>I am using Git Extension with development on Visual Studio. </p>

<p>In the commmit window, it is showing files which I haven't change. (Also those are not one or two line change but the change in complete file). While trying to reset changes by selecting that file nothing happens and that file appears again in unstage portion</p>

<p>Is this the issue with CRLF and LF ? </p>
","7","232988","0","0"
"3042437","69684","2010-06-15 04:00:08","2951","1529367","<git><git-commit>","How to change the commit author for a single commit?","<p>I want to change the author of one specific commit in the history. It's not the latest commit.</p>
<p><strong>Related:</strong> <a href=""https://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git"">How do I change the author and committer name/email for multiple commits?</a></p>
","4","69684","0","0"
"59604722","5587982","2020-01-05 22:22:19","1","77","<github><git-commit><coda>","I can't push multiple files to Github from Coda 2","<p>I cloned my Github repository into local machine.</p>

<p>I'm using Coda to create new files. If I create some files and I try to push all them to my remote repository from <strong><code>File &gt; Source Control &gt; Commit All Changes</code></strong> Coda says commiting, but the files not are arriving to Github.</p>

<p>I can only commit the files one by one, using the optios of <code>SCM</code> at Coda's right panel:</p>

<p><a href=""https://i.stack.imgur.com/Z1SeE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Z1SeE.png"" alt=""enter image description here""></a></p>

<p>There is one possibility of push multiple files into one commit? How I can achieve this?</p>

<p>Mi versión of Coda is <code>2.7.5</code></p>
","0","5587982","",""
"40828632","7017670","2016-11-27 11:52:57","4","5254","<git><github><continuous-integration><git-commit><pull-request>","Git Pull Requests are Failing","<p>I started working on github and made a few changes to public repositories and submitted the pull requests.</p>
<p>I always get a red cross around my pull requests and it says that:</p>
<blockquote>
<p>All checks have failed</p>
</blockquote>
<p>This is happening to me on <strong>every repository</strong>, the build tests or continuous-integration fails even though I <strong>just made changes to ReadMe</strong> of the public repository.</p>
<p>Please help as this just blocks any of my contributions.</p>
","7","7017670","0","0"
"59709670","6780389","2020-01-13 01:37:21","0","71","<git><rust><commit><git-commit><libgit2>","Finding commits with a given prefix using libgit","<p>How do I get the commit corresponding to the hash prefix string <code>""r23e23""</code> using libgit2?</p>

<p>A <a href=""https://crates.io/crates/git2"" rel=""nofollow noreferrer"">git2-rs</a> based solution would be preferred.</p>
","0","6780389","",""
"40834966","5063401","2016-11-27 23:07:07","0","926","<git><github><push><git-commit><git-fetch>","pushing limited commit history to remote git","<p>I have a git repository on a lab machine at my school and have been running into an issue I've been trying to solve.  </p>

<p>Due to arrangement of the CUDA SDK we're using, I have two remotes in the same directory, but I do not want all the commits from one remote, origin, being pushed to the other remote, ""proj1"".  I'll be more clear below:</p>

<p>Originally, this directory had a git repository with a single remote, and for example, the following commit history:</p>

<pre><code>A-B-C-D-E &lt;-(origin/master)
</code></pre>

<p>I then added a second remote and created a local branch from which I would push to and fetch from:</p>

<pre><code>A-B-C-D-E-G &lt;-(origin/master) (master)
        '        
        '-F-H-I &lt;-(proj1/newbranch) (newbranch)
</code></pre>

<p>Now when I go to push my changes from ""newbranch"" to remote ""proj1/newbranch"", I do NOT want to push commits A-E with it, I want only to push from F and forward.</p>

<p>I know that an orphaned branch is exactly what I'm looking for here, but our lab is running git 1.7.x, which does not have that feature yet, and getting the admins to update it simply takes too long (we don't have permissions to do it ourselves of course).</p>

<p>I also read I could reorder my commits with rebase so that F is the oldest commit, then I could push a single commit to ""proj1"".  But wouldn't doing this alter/mess up my history on the master branch as well? (A-E are already on origin/master)</p>

<p>So I am wondering if I am missing some feature of git to accomplish what I'd like?  Is there some other way to delete the commit history of ""newbranch"" or at least break it off?  Maybe what I am doing is bad practice, but like I said, I need to have all files in this directory for the CUDA SDK, and I don't want to mess with that.  </p>
","7","5063401","",""
"22139222","1404150","2014-03-03 05:22:18","1","1978","<git><git-merge><git-commit>","git commits are missing from file history after merge","<p>Some files in my project are using their old versions (I've committed and pushed changes to these files but these commits do not show up in file history log).</p>

<p>I can pinpoint the problem to a faulty merge committed by a team-mate. I don't know how it happened but the merge must've reset the versions of some files. Reverting the merge doesn't work because the files that got reverted to their old versions are not part of the changeset.</p>

<p>How can I fix this problem so that the files use their latest version?</p>

<p><code>git log -- &lt;filename&gt;</code> shows only the commits up to the old version</p>

<p><code>git log -- full-history -- &lt;filename&gt;</code> shows all the commits up to the latest version</p>

<p>I want the files to use the full history.</p>
","0","1404150","",""
"3533470","424592","2010-08-20 17:48:20","4","492","<git><commit><gitignore><git-commit>","How to forbid git commit if there are untracked files?","<p>Sometimes, it makes sense to forbid git commit when there are untracked files, because you should add them either to files to commit or gitignore. And an option like -f to force this commit is also necessary. So is there any option/plugin/etc to do that? Thank you very much.</p>
","0","424592","",""
"59994705","4475605","2020-01-30 21:22:18","0","55","<git><commit><git-commit>","Optimizing git multi-merge to master","<p>Given a collection of hashes for branch tips, is it possible to construct a tree of some sort to determine which tips are candidates for merging and which ones aren't with the current master of a project? </p>

<p>I'm not a CI/CD guy, but I'm trying to understand from a physics for poets standpoint if it's possible to construct a tree of some sort to determine which branches are eligible to be merged to master and which ones aren't.</p>

<h2>Clarification</h2>

<p>For the purposes of this query, the collection of branch tips in question are branches that 1) have no conflicts with master and 2) have passed all CI tests.</p>
","3","4475605","0","0"
"3541647","165673","2010-08-22 13:34:24","122","67182","<version-control><git-commit><git-add><git>","git add . vs git commit -a","<p>What's the difference between:</p>

<ul>
<li><code>git add .</code></li>
<li><code>git commit -a</code></li>
</ul>

<p>Should I be doing both, or is that redundant?</p>
","1","165673","0","0"
"59999245","4508208","2020-01-31 06:55:22","1","130","<git><jenkins><git-commit><azure-cli>","Upload files from latest commit to Azure Storage using Azure CLI","<p>I have a Jenkins pipeline. Every time I check into git, I need to access the changed files (or all files in a particular directory) and upload them into my Azure Storage account. </p>

<p>I'm able to upload files into the storage account using Azure CLI but I'm unable to access the git files. When I try to use the following in my JenkinsFile, I get null and null for both values.</p>

<p><code>echo ""The commit hash is ${env.GIT_COMMIT} ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}""</code></p>

<p>Given my use case, what should be my best approach? Is there any way I can access the files so that I can upload them?</p>

<p>My Jenkins version - 2.214.</p>
","0","4508208","",""
"41252670","1197249","2016-12-20 23:11:31","0","29","<git><git-commit>","How is it clear which of the files listed in a git tree are part of a specific commit?","<p>A commit in git has a reference to a tree and that tree references blobs or other trees and captures a ""snapshot"" of the project.<br>
What I am not clear about is how the association is done between a specific commit with the actual files affected by the commit.<br>
Example in my project I have the files <code>README</code> and <code>notes.txt</code>.<br>
If I add a new file e.g. <code>contracts.txt</code> and commit it I would have the new commit <code>XYZ</code> and if I did <code>git show XYZ</code> I would see only the file <code>contracts.txt</code> listed.<br>
But if I do <code>git cat-file -p XYZ</code> I would see that its associated tree is <code>ABC</code> which doing <code>git cat-file -p ABC</code> would show:  </p>

<pre><code>blob F123 README  
blob A0F8 notes.txt  
blob DA03 contract.txt  
</code></pre>

<p>So I can't tell from this how could we figure out that from these 3 reported blobs reported as part of the tree, only <code>DA03 contract.txt</code> was added as part of the commit <code>XYZ</code>.<br>
How is the association done?</p>
","0","1197249","",""
"60154519","5328889","2020-02-10 16:29:26","0","51","<git><github><git-commit><git-push><git-reset>","Commit my newly modified code so that it will be patched on the original codebase, and not on top of my last commit?","<p>I did a git commit followed by git push. After that, I made some code changes and want to commit this code instead. 
But now if I do a git push, the changes will be shown on top of my changes (showing deleted lines from my first commit which never existed in the codebase).</p>

<p>How can I commit my newly modified code x such that it will be patched on the original codebase, and not on top of my last commit (as if it were my first commit)? </p>
","2","5328889","",""
"41275330","1499296","2016-12-22 03:25:26","1","1851","<git><github><git-commit><git-log><git-hash>","git push - where's my commit hash - git log is not showing in the history MIRROR repository","<p>I cloned from a GIT repository (latest). At this point, the latest commit in the repository was: <code>a10cb09</code> </p>

<p>I cloned from using the following command (where I set variable <code>r</code> = 1st parameter passed (for repo name aka <code>ansible</code>) in my tiny wrapper script:</p>

<pre><code>  git clone git@github.com:mycompany/${r}.git
</code></pre>

<p>and made few changes and did the following simple steps: (i.e. make changes, add file/folder, commit and push) and I got a new commit hash <code>a08c263</code> (short). </p>

<pre><code>[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    roles/mycompany.mycompany-ansible/
    mycompany-ansible.yml

nothing added to commit but untracked files present (use ""git add"" to track)
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ 


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git add mycompany-ansible.yml roles/mycompany.mycompany-ansible

[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git commit -m ""mycompany.mycompany-ansible playbook and role"" mycompany-ansible.yml roles/mycompany.mycompany-ansible 
[master a08c263] mycompany.mycompany-ansible playbook and role
 14 files changed, 1771 insertions(+)
 create mode 100644 roles/mycompany.mycompany-ansible/README.md
 create mode 100644 roles/mycompany.mycompany-ansible/defaults/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/handlers/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/meta/.galaxy_install_info
 create mode 100644 roles/mycompany.mycompany-ansible/meta/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/apt_install.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/main.yml
 create mode 100644 roles/mycompany.mycompany-ansible/tasks/yum_install.yml
 create mode 100644 roles/mycompany.mycompany-ansible/templates/10-statsd.conf.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/10-mycompany.conf.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/proxy_auth_credentials.set.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/telegraf.conf.wfcopy.j2
 create mode 100644 roles/mycompany.mycompany-ansible/templates/mycompany-proxy.conf.j2
 create mode 100644 mycompany-ansible.yml
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ 


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git push
Counting objects: 21, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (21/21), 18.65 KiB | 0 bytes/s, done.
Total 21 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:repogroup/ansible.git
   a10cb09..a08c263  master -&gt; master
[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $  


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git log -1 --pretty=format:%h 
a10cb09


[arun@ip-10.20.30.33 ~/aks/always-latest-ws-repogroup/ansible] $ git rev-parse a08c263
a08c263
fatal: ambiguous argument 'a08c263': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
</code></pre>

<p>When I'm going to Github repo to see my latest changes, it's not there. <code>git log</code> is also not showing my commit (instead, it's showing me the commit hash which was at the top before my commit). What did I miss?</p>

<p>It seems like I can't even see the long hash using <code>git rev-parse a08c263</code> (small hash).</p>

<pre><code>$ git remote -v
origin  git@github.com:mycompany/ansible.git (fetch)
origin  git@github.com:mycompany/ansible.git (push)
</code></pre>

<p>and</p>

<pre><code>$ git reflog 
a10cb09 HEAD@{0}: clone: from git@github.com:mycompany/ansible.git
</code></pre>

<p><strong>PS</strong>: If I do the same steps for other repositories sitting under <code>mycompany</code> repo group and all those repos get my commit/push changes successfully in github if I follow the similar steps.</p>

<p><strong>UPDATE:</strong> one of my browser page was still having this open. After I did commit+push, I was able to see my committed change(new hash <code>a08c263</code> as the latest commit at the top repo level). When I clicked on it, it opened this attached browser page where I can see the FULL hash and also the folder/files. If I visit the opened browser URL for my commit, it's still there (so Git did save something) but clicking back on the repository's root level i.e. <code>ansible</code>, the latest commit is not my commit+push (new hash) but it's listing <code>a10cb09</code> as the latest one (which per the snapshot is the parent hash for my newly generated hash). See here:</p>

<p><a href=""https://i.stack.imgur.com/5gf2H.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5gf2H.jpg"" alt=""enter image description here""></a></p>

<p>That now brings the main questions:<br/></p>

<ol>
<li><p>If I didn't had this browser page still opened, then how would I have got the long hash and my folder/files (contents)?<br/></p></li>
<li><p>If I cloned from a github.com/mycompany/ansible (repo) which was a MIRROR of the ansible repository, actually hosted in Phabricator (where the actual original repository clone URL would be different than what I used in my tiny script above), then what command / option should I have used to push my new change to the original Phabricator <code>ansible</code> repository? <br/></p></li>
<li><p>If commit+push was complete at my end, why <code>git log</code> and other similar <code>git</code> commands are not showing any information against my new hash? </p></li>
</ol>
","11","1499296","0","0"
"60291586","1219813","2020-02-19 01:05:58","1","55","<git><git-commit><git-push>","GIT: Move changes from one branch to other","<p>I have 2 branches A and B. 
I made some changes to A and committed them.
I then made more changes to A (by mistake).
I pushed them to B and committed them. </p>

<p>But now  I see changes from A (old) and B (new) being committed. How do I revert this? </p>
","1","1219813","0","0"
"41399557","7358495","2016-12-30 16:37:35","3","63","<git><bash><shell><sublimetext3><git-commit>","Use Sublime Text as a core editor of Git Bash","<p>I'm following a novice guide for Git and Github, but I'm having problems to connect Git Bash with Sublime Text.</p>

<p>I'm using Windows 10 and to use Git I have installed Git Bash. Once I installed this, I created an alias like this:</p>

<pre><code>echo 'alias subl=""C:/Program\ Files/Sublime\ Text\ 3/sublime_text.exe""' &gt;&gt; ~/.bashrc
</code></pre>

<p>Then I wrote this to test if this worked:</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>With this I can open Sublime Text from my Git Bash:</p>

<pre><code>subl hi.txt
</code></pre>

<p>And to make Git Bash remeber where to find this alias everytime I open it, I created a <code>.bash_profile</code> and wrote this:</p>

<pre><code>if [ -r ~/.profile ]; then . ~/.profile; fi
case ""$-"" in *i*) if [ -r ~/.bashrc ]; then . ~/.bashrc; fi;; esac
</code></pre>

<p>With this, I can open Sublime Text properly, but by some reason, git can't use this command. I wrote this on Git Bash:</p>

<pre><code>git config --global core.editor ""subl -n -w""
git config --global push.default upstream
git config --global merge.conflictstyle diff3
</code></pre>

<p>But when I do a commit, it says that <code>subl -n -w</code> is undefined while it is, because if I try to use this command manually it works.</p>

<p>I tried to write the route directly like this:</p>

<pre><code>git config --global core.editor ""'C:/Program\ Files/Sublime\ Text\ 3/sublime_text.exe' -n -w""
</code></pre>

<p>But this way, Git says that this route doesn't exist. I tried to use this command manually and it works properly.</p>

<p>I thought this problem was related with Sublime Text, so I installed Package Control and then, installed Git package, but it still doesn't work.</p>

<p>Maybe it's foolishness, but I'm still a novice and I don't know what is happening here. Am I missing something?</p>

<p>Sumary:</p>

<pre><code>subl hi.txt -&gt; works
subl -n -w -&gt; works
git commit -&gt; doesn't work
</code></pre>
","1","7358495","",""
"60321741","5078576","2020-02-20 14:03:59","2","121","<git><diff><git-commit>","Automatically count the modification (for instance added/deleted letters) along a whole git branch","<p>Is there a way (or a hack or a script) that can be used to count the number of letters added (or deleted) in every commit of a git branch? Any idea on how to do that? </p>

<p>I know how to use <code>git diff</code> just between two commits. Is there an instruction that solves the issue?</p>

<p><strong>Other Informations: why may I want this feature?</strong></p>

<p>The goal, for me, should be to plot the evolution of work using some figures of merits. I know this figure of merit is absolutely far away from being a good metric. However, it is still interesting to have this data and use them in the way you prefer (plotting the evolution using python is just an example).</p>

<p><strong>An idea on how to perform it</strong>:</p>

<ul>
<li>to perform a <code>git diff</code> of all consecutive commits in a branch.</li>
<li>to count, for every output of the previous point, the number of letters (making a distinction between deleted and added).</li>
<li>to save the data in some variable and use the result in the way you prefer the most.</li>
</ul>

<blockquote>
  <p>I will try to implement the procedure with a script and share the
  solution in this question. However, I am wondering if there are some
  other direct methods</p>
</blockquote>
","0","5078576","0","0"
"3945382","477347","2010-10-15 19:20:30","31","7305","<git><git-commit><git-blame>","Git commit that doesn't override original authors in git blame","<p>I've used a perl script to modify all tab characters in a php git repository and changed them all to 4 spaces.</p>

<pre><code>$ find -iname \*.php -exec perl -pi -e ""s/\t/    /g"" {} \
</code></pre>

<p>I can commit this change with <code>git commit</code>, but it will mark me as the author of all changed lines inside <code>git blame</code> after this commit is made.</p>

<p>Is there any way to commit this massive change that doesn't mark me as the author of the changed lines, but retains the original author?  That's a lot of history we don't really want to lose in our project.</p>

<p>Our purpose in replacing tabs with 4 spaces is not to make things appear different in git blame, but to follow proper PEAR coding standards.  E.g. no tabs, use 4 spaces for indentation.</p>
","3","477347","0","0"
"41556153","4127646","2017-01-09 20:13:37","2","158","<git><search><git-commit>","git search commits for changed string and list files with that string in that commit","<p>I have managed to find a resource to search for ""a"" string in all commits (link below).  But I do not know how to do the same command and have the specific files within the commits be listed (which added or lost that string).</p>

<p>All commits would be good but ideally I'd also like to get a list of files that added or lost that string within a <strong>specific</strong> commit.  How would I do this for all or a specific commit?</p>

<p><a href=""https://stackoverflow.com/questions/5816134/finding-a-git-commit-that-introduced-a-string-in-any-branch"">Finding a Git commit that introduced a string in any branch</a></p>
","0","4127646","0","0"
"22647959","1996889","2014-03-25 22:49:40","4","2380","<git><github><git-commit><github-for-windows><git-amend>","Edit incorrect commit message in GitHub for Windows","<p>I've managed to muck up a commit message bad enough, that when I read it back, even I can't work out what is says!</p>

<p>This commit hasn't been pushed and I know that the message can be changed with:</p>

<pre><code>git commit --amend -m ""New commit message""
</code></pre>

<p>(thanks to <a href=""https://stackoverflow.com/questions/179123/how-do-i-edit-an-incorrect-commit-message-in-git?newsletter=1&amp;nlcode=125703%7cea0a"">this</a> post)</p>

<p>However, I am using the GitHub for Windows GUI. So is there any way for me to change the commit message without jumping into powershell?</p>
","0","1996889","",""
"41582823","7659995","2017-01-11 04:41:09","1","131","<git><vim><git-commit><git-push>","Why does Git write to my files?","<p>I have a few source files in a Git repo, <code>main.c</code> and some others. I use Vim to edit these files.</p>

<p>Say I'm editing <code>main.c</code>. I make a change, tell Vim to write-out, then switch to a terminal (without killing Vim) and commit/push. If I go back to Vim with <code>main.c</code> and try to write-out again, I receive this warning:</p>

<pre><code>WARNING: The file has been changed since reading it!!!
Do you really want to write to it (y/n)?
</code></pre>

<p>How does committing/pushing modify my source files? Why?</p>
","0","7659995","0","0"
"60678366","4849325","2020-03-13 23:25:09","1","145","<git><git-commit>","Start text of git commit with the text of the parent commit","<p>When you create a new commit in git, you can specify that you want your commit message editor to start up with the contents of a file, by specifying <code>git commit -t &lt;filename&gt;</code> or the <code>commit.template</code> environment variable. Is there a way to specify that you always want to use the full text of the parent commit as your template?</p>

<p>Context: My usual codebase, like many others, requires an annotation of what bug/issue a commit is work on to be present in every commit. Remembering bug/issue numbers is hard, and frequently I have a stack of commits on the same topic, to be submitted in sequence. It's awkward to use incantations like <code>git commit; Ctrl+Z; g log -1; &lt;click&gt;; Shift+Ctrl+C; fg; Shift+Ctrl+V</code>, which is what I'm usually forced to do.</p>
","0","4849325","0","0"
"4307728","126749","2010-11-29 20:22:03","78","99972","<git><git-commit>","Git still showing deleted files after a commit","<p>How can I remove deleted files from my Git repo?</p>

<p>I've deleted a folder of a JavaScript library, which contained many files. I then went to commit the changes like so:</p>

<pre><code>git add .
git commit ""message""
git status
</code></pre>

<p>But it shows all those files as ""deleted ...."".</p>

<p>How can I make them go away?</p>
","2","126749","0","0"
"23109822","3229670","2014-04-16 12:43:23","0","112","<php><github><git-commit>","How to push modified files to git from PHP","<p>In a backoffice, I'm generating some files that need to replace other files on different websites. Those websites are deployed via Github.</p>

<p>So basically I need to push some files to a Github repo, from PHP. </p>

<p>What's the best way to do that?
Can I only clone those files and not pollute my backoffice with the whole repo?</p>
","5","3229670","",""
"41705228","7350714","2017-01-17 19:18:18","0","129","<github><git-commit><ibm-jazz><git>","How to get the commits for master branch after dev branch is cut from it","<p>I had master branch which had all my code commits.Few days back I've cut a new branch from master called dev.I made some commits in both the branches..Now I want to get all commits in master branch after dev is cut from it..
Is there any command for this .Can someone help me quickly</p>

<p>Thanks!</p>
","3","7350714","",""
"65759156","1858999","2021-01-17 09:43:14","2","542","<git><git-commit><pre-commit-hook>","Git commit with pre-commit hook, why it get different results?","<p>I have a pre-commit hook to run a python script that will modify the staged files and re-add those files with <code>git add .</code> at the end of the script.</p>
<p>The pre-commit look like this:</p>
<pre><code>#!/bin/sh
python2.7 .git/hooks/editfile.py
</code></pre>
<p>The python script look like this:</p>
<pre><code>import os
import mmap
import sys
import subprocess

def getmodifiedfiles():
  files = []
  args = ['git', 'diff', 'HEAD', '--name-only', '-r', '--diff-filter=M']
  with open(os.devnull, 'w') as b:
     files = subprocess.check_output(args, stderr=b).splitlines()

  files = [i for i in files if os.path.isfile(i)]
  return files

def updaterevision(line):
    strVer = line.split(&quot;$Revision: &quot;)[1].split()[0]
    version = [x for x in strVer.split('.')]
    ver = [int(i) for i in version]

    if ver[1] == 99:
      ver[0] += 1
      ver[1] = 0
    else:
      ver[1] += 1

    strVer = &quot;%d.%02d&quot; % (ver[0], ver[1])
    return str.replace(line, line.split(&quot;$Revision: &quot;)[1].split()[0], strVer)

def main(args):
  filelist = getmodifiedfiles()  
  
  for file in filelist :
    lines = open(file).readlines()

    i = 0
    for line in lines:
        if '$Revision:' in line:
          lines[idx] = updaterevision(line)
        
        i += 1

  with open(file, 'w') as r:
    r.writelines(lines)          

  args = ['git', 'add', '.']
  subprocess.call(args)
  
if __name__ == '__main__':
    main(sys.argv)
</code></pre>
<p>It works as expected with <code>git commit -m &quot;msg&quot;</code> command, when git status I got the following result:</p>
<pre><code>On branch master
Your branch is ahead of 'origin/master' by 1 commit.

nothing to commit (working directory clean)
</code></pre>
<p>But if commit using <code>git commit &lt;filename&gt;</code> or <code>git commit -m &quot;msg&quot; &lt;filename&gt;</code>, I got the following result which I don't want:</p>
<pre><code>On branch master
Changes to be committed:
   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

   modified:   filename.py

Changes not staged for commit:
   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

   modified:   filename.py
</code></pre>
<p>What are the different? I don't want to fix user to only use the first command to commit. Any ideas?</p>
","3","1858999","",""
"28885425","4520145","2015-03-05 18:48:55","0","50","<git><github><git-commit>","How do I delete all the local Git commits I've made?","<p>I need delete all local commits from a Git project.  I need to do so that I can commit everything as a single unique commit before sending it upstream.</p>
","3","4520145","",""
"49159681","9365684","2018-03-07 19:18:30","0","971","<git><visual-studio><github><commit><git-commit>","try to change the author name in the git commit but getting an error","<p>I am trying to change the author name in the git commit but getting an error. I have tried several things but I cannot make this work.</p>

<p>this is what I am trying but getting the error below:</p>

<pre><code>git commit --amend --author=“Nik Ron &lt;nik.ron@gmail.com&gt;”


LM0810:Automation nik.ron$ git commit --amend --author=“Nik Ron &lt;nik.ron@gmail.com&gt;”
bash: nik.ron@gmail.com: No such file or directory
</code></pre>

<p>I am following this tutorial - <a href=""https://confluence.atlassian.com/bitbucketserverkb/how-do-you-make-changes-on-a-specific-commit-779171729.html"" rel=""nofollow noreferrer"">https://confluence.atlassian.com/bitbucketserverkb/how-do-you-make-changes-on-a-specific-commit-779171729.html</a></p>
","8","9365684","",""
"66087700","9953550","2021-02-07 12:04:46","5","8040","<git><git-commit><git-push>","Is there a danger of using ""git push --force"" if I am working on a project alone?","<p>Is there a danger of using <code>git push --force</code> if I am working on a project alone? I know there are danger when I am working with a team. But what if I am alone?</p>
","1","9953550","0","0"
"28894273","2616191","2015-03-06 07:48:52","0","1825","<git><github><timestamp><git-commit>","Git wrong commit time stamp","<p>I was trying to push some changes to a forked copy of a repo. At the time of the commit my system date was wrong and ahead of one day. Now after the upstream repo merged my changes, my commit time stamp is ahead of the actual merging time stamp. How can this be corrected?</p>

<p>Why there is no check from remote while committing? </p>
","1","2616191","0","0"
"67538636","3033183","2021-05-14 17:34:01","0","48","<git><git-commit>","Git commit bypassing other commits","<p>We have an issue where one of our devs has committed some changes which have in effect bypassed a bunch of other commits by the rest of the team.</p>
<p>You can see this in the image where K has a commit on 14/05/2021 which loops back past the other commits to their previous commit on 30/04/2021.</p>
<p><img src=""https://i.stack.imgur.com/oYNGM.png"" alt=""Git Log"" /></p>
<p>As a result all the other commits between 30/04/2021 and 14/05/2021 are being removed when we do a pull.</p>
<p>Is there anything we can do to reinsert the changes made between these 2 dates or remove the change which caused this?</p>
<p>Many Thanks</p>
","6","3033183","",""
"49171153","9096708","2018-03-08 10:43:19","1","1057","<git><git-commit><cherry-pick>","Git how to make an empty commit with two parents","<p>I’ve some issues finding the right git command for the job. </p>

<p>A place I work at is currently switching source control (TFVC -> Git). However, the old version in TFVC still needs bug fixing from time to time. </p>

<p>I’ve handled that by creating a build with some PowerShell scripts that ensure that my “tfvc-merge” branch contains those changes. </p>

<p>So here is what I do afterwards.</p>

<ul>
<li>Checkout from integration branch</li>
<li>I cherry-pick the commit from “tfvc-merge” branch to my
“mergerhandler” branch</li>
<li>(my Issue) Now I wanna make an empty commit that have 2 parents.
First parent is the last commit i have made on ""MergeHandler"" branch, next
parent is the commit of the “tfvc-merge” branch.</li>
</ul>

<p>I tried to draw it up. So basically, the empty commit at the pull request will have the parent of 1 and 2 in my drawing. </p>

<p><a href=""https://i.stack.imgur.com/fMCS9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fMCS9.png"" alt=""Cherry-Pick Strategy""></a></p>

<p>I've been searching around, for a few hours without finding the right way to do this. So it would be nice with a hint that could point me in the right direction. Thanks in advance.</p>
","0","9096708","0","0"
"67540500","2839078","2021-05-14 20:15:33","0","124","<sql><git-commit><tsqlt>","committing both live code and tsqlt tests","<p>My company has recently started using tSQLt to test our codebase.  We've built a few good test suites and now we're trying to figure out the best way to commit them.</p>
<p>We're using an SQL server with Redgate to commit our live code to a github.com repository.</p>
<p>One option we thought of would be to commit the tSQLt scripts alongside our live code in the same repository, but we feel this isn't the best choice.  It would mean our test code would/could be uploaded to the live servers.</p>
<p>Another option would be to commit the tSQLt scripts to a second repository.  This solution keeps the code separate but has more overhead.  When our developers want to run test cases they would have to first pull the live code onto their dev databases, then pull the tSQLt code onto their databases.  Also, when developer create new live code and make the corresponding tSQLt tests, they have remember to push the live code and test code to the appropriate repository.  Seems like a lot of extra work.</p>
<p>Has anyone run into this issue?  How did you resolve it?  Are there best practices when committing test code?</p>
<p>Thanks!!</p>
","0","2839078","",""
"19015132","1342454","2013-09-25 21:00:37","0","938","<git><version-control><git-commit><visual-studio-2013>","How do you pull a certain version of the code in TFS 2013 from within Visual Studio 2013?","<p>I need to take a look at the code as of a certain version (commit).  I'm using the Team Explorer tab in Visual Studio 2013.  It has stuff for fetch, push, pull, commit, but I don't see any way to get a certain version of code from the repository.</p>

<p>Suppose I wanted to take a look at the Master branch and work with a snapshot of the code from 2 months ago?  How would I go about doing that?</p>

<p>Also, how do I view commits that have occurred on a specific branch that have been pushed?</p>

<p>Are the above things not available from inside of Visual Studio?  If not, where are they available?</p>
","0","1342454","",""
"67556589","14010518","2021-05-16 12:19:55","0","665","<git><visual-studio><github><git-commit>","Fatal error when committing changes to git from visual studio","<p>So everything was working fine, until yesterday I wrote some code and pushed, but nothing changed in GitHub, so I came and added a comment line and commited then it said fatal error :</p>
<p><strong>Git failed with a fatal error.
error: invalid object 100644 342bad3922f69c8ae111f019ceffc916dd4982cb for 'DataAccess/Concrete/EntityFramework/EfColorDal.cs'
error: bad tree object HEAD</strong></p>
<p>first the path was pointing to another class, I deleted and wrote it again, and when I committed again it showed this class this time, I figured it would just keep going.
and when I run out of everything to try from internet, I decided to restart, upon opening again it said Fixing errors in D disk, where is my solution is placed. It was fixing for like an hour, when it finally ended, nothing changed.</p>
<p>I used gitbash console to execute the codes
when I run codes like git --fsck it said:</p>
<p><strong>Checking object directories: 100% (256/256), done.</strong></p>
<p><strong>notice: HEAD points to an unborn branch (master)</strong></p>
<p><strong>notice: No default references</strong></p>
<p><strong>missing tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904</strong></p>
<p>As I dont know anything about git coding, I tried some more stuff previous posts suggested, but none of it worked. My local repository is in C disk and it holds the code before yesterday, so I could write the code again, but there is no guarantee it wont happen again, so Im open to any help offered. Thanks</p>
","0","14010518","",""
"67556825","3104189","2021-05-16 12:44:28","4","4241","<visual-studio-2019><git-commit><git-push>","Visual Studio 2019 Git shows ""commit --allow-empty-message --file=-"" message on commit & push, after new update installed. no more commit & push","<p>After updating my visual studio 2019(v 16.9.5), when I do a git commit &amp; push, a message appears above the &quot;git changes&quot; window with this content &quot;commit --allow-empty-message --file=-&quot; and the process fails and stuck at this point.</p>
","0","3104189","",""
"11489471","369854","2012-07-15 04:37:54","4","1318","<git><git-commit><git-stash>","how to alias git checkout && git stash apply","<p>So I have two branches master and formtest</p>

<p>I have an [alias] ""git switch"" that lets me stash any works in progress and checkout another branch.</p>

<p>""git switch""</p>

<pre><code>switch = !git stash &amp;&amp; git checkout
</code></pre>

<p>Now I want to create an [alias]</p>

<p>""git switchback""</p>

<pre><code>switchback = ???
</code></pre>

<p>when run it I want it to say </p>

<p>switch to this branch ""formtest""</p>

<p>and then run stash apply</p>

<p>to unstash the last WIP done and return things back before I first ran ""git switch""</p>
","7","369854","0","0"
"67568409","14370029","2021-05-17 11:02:14","-2","62","<git><git-commit>","reruning git status does not work properly","<p>I initialized the git on my myproject folder in desktop
and when I type git status command I get this</p>
<pre><code>On branch master

No commits yet

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        newfile.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>and after I rerun the git status it should pop up like this:</p>
<pre><code>On branch master

Initial commit

Changes to be committed:
  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)
</code></pre>
<p>but mine still says No commits yet and untracked file how should I fix this problem?
Thank you so much</p>
","2","14370029","",""
"67573747","11456921","2021-05-17 16:34:57","0","91","<git><github><git-commit>","How to get last commit code added in a particular file to another temp file","<p>This is the latest commit code change (added text &quot;new line added&quot;).
How can I get this text to another temp file?</p>
<pre><code>$ git show
commit c3fc4d58275740e5abc85219d75c2c00f3027a46 (HEAD -&gt; my_branch, origin/my_branch)
Author: ********
Date:   ********

    test

diff --git a/test.txt b/test.txt
new file mode 100644
index 000000000..e833ecb7d
--- /dev/null
+++ b/test.txt
@@ -0,0 +1 @@
+new line added
\ No newline at end of file
</code></pre>
","0","11456921","",""
"66116949","11441056","2021-02-09 10:16:10","4","2528","<git><visual-studio-code><git-commit><gnupg>","GIT commit error - VSCODE in WSL2 (error: gpg failed to sign the data fatal: failed to write commit object)","<p>I have VSCode installed</p>
<pre><code>code --version
</code></pre>
<blockquote>
<p>1.53.0
8490d3dde47c57ba65ec40dd192d014fd2113496
x64
Git version:</p>
</blockquote>
<pre><code>git --version
</code></pre>
<blockquote>
<p>git version 2.27.0</p>
</blockquote>
<p>I have active keys. When i commit i get the title error. I get the error in command line and clicking submit in vscode.</p>
<pre><code>GIT_TRACE=1 git commit -m &quot;start&quot;
</code></pre>
<blockquote>
<p>11:50:45.606604 git.c:442               trace: built-in: git commit -m
start
11:50:45.649422 run-command.c:663       trace: run_command:
/usr/bin/gpg --status-fd=2 -bsau
&quot;active-key&quot;</p>
</blockquote>
<p>error: gpg failed to sign the data</p>
<p>fatal: failed to write commit object</p>
<pre><code>gpg --status-fd=2 -bsau &quot;active key&quot;
</code></pre>
<blockquote>
<p>[GNUPG:] KEY_CONSIDERED &quot;ACTIVE KEY&quot; 2</p>
<p>[GNUPG:] BEGIN_SIGNING H10</p>
<p>^C</p>
<p>gpg: signal Interrupt caught ... exiting</p>
</blockquote>
<p>It hangs until i stop.
Any ideas?. Thank you.</p>
","0","11441056","0","0"
"49917092","9668773","2018-04-19 09:10:18","2","280","<git><git-commit><git-diff><git-blame>","How to find overlapping Git commits","<p>I'm doing a kind of archeology for my team's Git repo. The goal is to find all overlapping commits, e.g. all pairs of commits touching the same lines of code.</p>

<p>I tried to do this with diff and blame commands. The first one is not that reliable since code line ranges it provides have a sort of relative addressing. And it's hardly to track these addresses through 1000+ commits. The second option gives nice per file output but without any intermediate information (especially on deleting of a code lines).</p>

<p>I believe there must be a better way to achieve my goal. Looking forward for any advice!</p>
","3","9668773","0","0"
"19065833","1471417","2013-09-28 10:20:36","0","169","<git><git-commit>","How to list all files for specific commit?","<p>For particular commit, I want to see what files have been modified/added. Is there a git command which will list all files that have been modified/added for particular commit?</p>
","3","1471417","",""
"19067876","289011","2013-09-28 14:11:48","1","72","<git><git-commit>","Git: Insert my work into two commits","<p>I'm pretty new to Git and I think I created a mess in my master branch.</p>

<p>Here's what happened:</p>

<p>I was working (peacefully and without messing with anybody) and I got my commits like this.</p>

<pre><code>a --&gt; b --&gt; C --&gt; D
</code></pre>

<p><code>a, b</code> being commits from other people, and <code>C</code> and <code>D</code> being my commits. I pushed all to our main repository and an automatic tool we have to run tests on every push said that the build was failing. So I panicked. I created a new directory and re-cloned the repository until commit <code>b</code> (when that automated tool was saying that the build was ok) made some very small changes and <em>forced</em> a push (yeah, not very clever of me, but it was late and I was freaking out) so at that point, the remote repository looked like this:</p>

<pre><code>a --&gt; b --&gt; E
</code></pre>

<p>But it turns out that my initial commits <code>C</code> and <code>D</code> were correct, and it was the automated tool who failed. It was giving false positives!! When I realized, someone had commited again to the main branch (remote repository), so at this point it looks like this.</p>

<pre><code>a --&gt; b --&gt; E --&gt; f
</code></pre>

<p>What I want to do is safely and without destroying my coworker's work insert my good commits <code>C</code> and <code>D</code> into the branch. I still have those commits in a directory within my computer, but as soon as I do a <code>git pull</code>, they'll be destroyed.</p>

<p>I would like the remote repository to look something like:</p>

<pre><code>a --&gt; b --&gt; C --&gt; D --&gt; f
</code></pre>

<p>or </p>

<pre><code>a --&gt; b --&gt; f --&gt; C --&gt; D
</code></pre>

<p>or even</p>

<pre><code>a --&gt; b --&gt; E --&gt; f --&gt; C --&gt; D
</code></pre>

<p>(keeping the super-dummy commit <code>E</code>, I don't mind)</p>

<p>Basically, I want <code>C</code> and <code>D</code> there, without destroying my coworker's <code>f</code> commit.</p>

<p>Is this even possible to do?</p>

<p>I'm in a panic mode so anything would help.</p>
","0","289011","",""
"69546587","5248324","2021-10-12 20:22:14","0","320","<git><batch-file><command-line><git-commit>","Batch script git commit with dynamic comment","<p>I am using a .bat file to commit a project to git and github. I would like it to take one optional argument that is the username of the person calling the file. That will be passed in using the command line. Don't worry about that part, it works fine. The part that is not working is the <code>git commit -m &quot;%comment%&quot;</code> line. The <code>ECHO %comment%</code> line prints out what I would expect it to print, but then it's not being passed to the git comment. The text <code>%comment%</code> is the comment being passed in instead of <code>Saved on Mon 10/11/2021-21:45:34.59 by makpo</code>. What am I doing wrong?</p>
<pre><code>@ECHO OFF

SET comment=Saved on %date%-%time%

IF &quot;%~1&quot;==&quot;&quot; GOTO COMMIT
SET username=%1
SET comment=%comment% by %username%

:COMMIT
ECHO %comment%
git checkout development
git add .
git commit -m &quot;%comment%&quot;
git push origin
</code></pre>
<p><strong>GitHub</strong>
<a href=""https://i.stack.imgur.com/3mhdo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3mhdo.png"" alt=""enter image description here"" /></a></p>
<blockquote>
<p>NOTE: I also posted this on <a href=""https://superuser.com/questions/1681255/batch-script-git-commit-with-dynamic-comment"">superuser</a>, but I'm never really sure if that is the right place to ask these kinds of questions. Also, I feel like overflow has a lot more engagement.</p>
</blockquote>
","8","5248324","0","0"
"68458023","12847951","2021-07-20 16:03:02","1","165","<git><github><git-merge><git-commit>","How to convert pushed regular merge into squash-merge in git?","<p>I have accidentally merged my 20 commits using <code>regular commit</code> from <code>feature branch</code> to the <code>main</code> branch. Is there any way to revert it and make it as <code>squash and merge</code>? The purpose is to make the <code>main</code> branch clean. It should only have one commit for my 20 commits in the <code>feature branch</code>.</p>
","2","12847951","",""
"49923106","235472","2018-04-19 14:03:15","0","728","<git><git-commit>","git: can add files but cannot commit them","<p>Problem committing files in an existing git repository:</p>

<pre><code>cd src
git add *.cpp
</code></pre>

<p>OK so far.</p>

<pre><code>git commit -m ""Log message""
</code></pre>

<p>Here I get:</p>

<blockquote>
  <p>On branch New_code<br>
  nothing to commit, working tree clean</p>
</blockquote>

<p>In the current directory there are *.cpp files, they are not empty, and they have never been committed before.</p>

<p>From <code>git status</code> I get, again:</p>

<blockquote>
  <p>On branch New_code<br>
  nothing to commit, working tree clean</p>
</blockquote>

<p>Platform:<br>
Windows 7</p>
","7","235472","",""
"11527069","784597","2012-07-17 16:42:45","34","102108","<git><github><git-commit><git-pull>","Merging Issues with Git","<p>I am using <code>git version 1.7.11.msysgit.0</code></p>

<p>I created a repository under GitHUB and added a file called as README.md with some text content .</p>

<p>Later on , I have installed GIT Client , did a clone to get the server contents on to my machine .</p>

<p>Then I deleted the file README.md on to my local machine .</p>

<p>Now when I do git commit , I get this error </p>

<pre><code>praveenk@MSIN-BT-100 /d/workspace/MYTestRepo (master|MERGING)
$ git commit ;
U       README.md
error: 'commit' is not possible because you have unmerged files.
hint: Fix them up in the work tree,
hint: and then use 'git add/rm &lt;file&gt;' as
hint: appropriate to mark resolution and make a commit,
hint: or use 'git commit -a'.
fatal: Exiting because of an unresolved conflict.
</code></pre>

<p>This is with <code>git pull</code>:</p>

<pre><code>$ git pull;
U       README.md
A       One.txt
Pull is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'
as appropriate to mark resolution, or use 'git commit -a'.
</code></pre>

<p>How to resolve these errors ?</p>
","4","784597","0","0"
"66133423","15181771","2021-02-10 08:36:57","-1","549","<git><heroku><git-commit><heroku-cli>","how to push only one changed file","<p>So, i have python app on heroku with some “database.db” when the app is running this database is filling up.</p>
<p>For example i have this files in my project:</p>
<pre><code>bot.py
database.db
</code></pre>
<p>when i make changes in bot.py and trying to push changes, my database is refreshing and when updates are deployed it already cleared.</p>
<p>i using this algorithm to push changes:</p>
<pre><code>heroku login
cd %dir%
git add .
git commit -am “commit”
git push heroku master
</code></pre>
<p>so how to push only bot.py changes, without touching database?</p>
","2","15181771","",""
"47461612","8979283","2017-11-23 18:31:46","1","6830","<github><cmd><git-commit>","Commit failed - exit code 128 received","<p>I was trying to commit to Github desktop(windows 8.1)(my first time I only did it on Linux before), and I got this error <code>Commit failed - exit code 128 received</code>, and this section </p>

<pre><code>git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""
</code></pre>

<p>which apparently I should run in the prompt.The thing is I don't know which path I should set in the prompt before running these commands and I couldn't find <code>git.exe</code> I found <code>git.bat</code> are they the same?</p>

<pre><code>C:\Users\&lt;username&gt;\AppData\Local\GitHubDesktop\bin\git.bat 
</code></pre>
","0","8979283","0","0"
"19085807","821742","2013-09-30 02:57:00","820","896667","<macos><git-merge><git-commit><git>","Please enter a commit message to explain why this merge is necessary, especially if it merges an updated upstream into a topic branch","<p>I am using Git. I did a pull from a remote repo and got an error message:</p>

<blockquote>
  <p>Please enter a commit message to explain why this merge is necessary,<br>
  especially if it merges an updated upstream into a topic branch.  </p>
</blockquote>

<p>I try to type a message and press <KBD>Enter</KBD> but nothing happens.</p>

<p><strong>How do I tell Git/Terminal I am done typing in my message?</strong></p>

<p>I am using Terminal on OS X.</p>
","4","821742","0","0"
"11533199","1002260","2012-07-18 01:44:41","304","75085","<git><commit><git-commit><git-log>","How to find the commit in which a given file was added?","<p>Say I have a file <code>foo.js</code> that was committed some time ago. I would like to
simply find the commit where this file was first added.</p>

<p>After reading the answers and my own tinkering, this works for me</p>

<pre class=""lang-sh prettyprint-override""><code>git log --follow --diff-filter=A --find-renames=40% foo.js
</code></pre>
","3","1002260","0","0"
"47465841","4885518","2017-11-24 03:15:15","7","12781","<git><git-commit><git-push><git-pull>","Pull-Commit-Push or Commit-Pull-Push?","<p>Which is preferable over the other and why? If I pull before commit, do the changes that other developers made merge with what I am currently working on? If so, that means this one is more preferable? </p>
","2","4885518","",""
"19092160","2100279","2013-09-30 10:41:33","0","401","<git><version-control><git-commit>","Git Snapshots, how they work?","<p>Can somebody please explain the concept of snapshots in git. I do understand who data can be stored as a series of changesets, but how is that different from snaphots in git. and why is it better this way? </p>

<p>The basic Git workflow goes something like this: (As taken from git documentation)</p>

<ol>
<li>You modify files in your working directory.</li>
<li>You stage the files, adding snapshots of them to your staging area.</li>
<li>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</li>
</ol>
","1","2100279","",""
"68469961","8534285","2021-07-21 13:00:18","0","261","<git><github><git-commit>","Git - List all files last committed in master branch","<p>My Question is very similar to this - <a href=""https://stackoverflow.com/questions/46205090/may-i-list-the-files-of-the-current-commit"">May I list the files of the current commit?</a></p>
<p><strong>Problem Statement:</strong> I am trying to get the list of all the files which were new/changed in the last commit in &quot;master&quot; branch.</p>
<p><strong>What I tried:</strong>  Ran these commands from the directory where my <code>.git</code> directory is for the project. <code>git show --name-only</code> and <code>git show --name-only master</code> but doesn't show the expected result.</p>
<p>It shows me this:</p>
<pre><code>Merge: f733602 4d98b76
Author: Some Name &lt;some.name@company.com&gt;
Date:   Thu Jul 1 11:34:49 2020 -0700

    Merge pull request #28 from secret/my_rqd_files
</code></pre>
<p>What I am expecting is - it should show the list of all the files with their full path in the repo.</p>
<p><strong>Question:</strong> What should I do or what I am doing wrong?</p>
","2","8534285","",""
"11536726","1534016","2012-07-18 07:56:11","2","433","<git><git-commit>","Git find what changes have been done in a tag for a given file","<p>I want to find for my source code file Foo.cpp what all changes has been done in the version tag v3.4.0.</p>

<p>Hope above sentence is good enough to explain my question. actually I have to find all changes in only one file which has been pushed for version tag v3.4.0</p>
","1","1534016","",""
"68473581","16315061","2021-07-21 16:54:11","0","293","<github><push><git-commit><git-push>","I forgot 'git push'","<p>I have several commits on my branch but I forgot to push them. Currently, those changes are in another computer so I wonder if there is a way to reach that commits without pushing.</p>
","5","16315061","",""
"47471400","245549","2017-11-24 10:36:22","32","22657","<git><git-commit><git-add>","Why are changes in one branch visible in another branch?","<p>I execute the following sequence of commands:</p>

<pre><code>git init rep
cd rep/
echo '111' &gt; 1.txt
git add 1.txt 
git commit -m '1'
git checkout -b dev
echo '222' &gt; 1.txt 
git checkout master
more 1.txt 
</code></pre>

<p>As a result of these commands I see</p>

<pre><code>222
</code></pre>

<p>And I do not understand why. As you can see I create and go into the 'dev' branch. I do some changes there but I do not add and do not commit them. Why after going back from 'dev' to 'master' I do see the changes that I did in 'dev'? Shouldn't they stay in dev until I add, commit and merge them back to master?</p>
","3","245549","0","0"
"66146181","14039503","2021-02-10 22:41:52","3","1746","<python><python-3.x><git><git-commit><python-3.8>","Python: fatal: not a git repository Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set)","<p>When I run</p>
<pre><code>proc = subprocess.Popen(['git', 'add', '-A'], stdout=subprocess.PIPE)
</code></pre>
<p>I get this error</p>
<pre><code>fatal: not a git repository (or any parent up to mount point /media)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
</code></pre>
<p>But running</p>
<pre><code>os.system('git add -A')
</code></pre>
<p>Does the job perfectly.</p>
<p>If you think the folder does not have a <code>.git</code> file,</p>
<pre><code>proc = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE)
</code></pre>
<p>shows that it is already in the cwd.</p>
<p>Why <code>Popen</code> cannot stage the files, nor can it do the commit while <code>os.system</code> does both?</p>
<hr />
<p><strong>Update:</strong></p>
<p>Here is my failed MWE</p>
<pre><code>import subprocess
import os

cwd = os.getcwd()
proj_path = os.path.join(cwd, 'newproj')
os.makedirs(proj_path)
os.chdir(proj_path)
proc = subprocess.Popen(['git', 'init'], stdout=subprocess.PIPE)
proc = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE)
print(proc.stdout.read().decode('ascii'))
proc = subprocess.Popen(['git', 'add', '-A'], stdout=subprocess.PIPE)
out, err = proc.communicate()
if err:
    print('Error:\n', err.decode())
print(out.decode('ascii'))
</code></pre>
<p>output</p>
<pre><code>.
..
.git

fatal: not a git repository (or any parent up to mount point /media)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
</code></pre>
","7","14039503","0","0"
"31765012","4009451","2015-08-01 18:45:14","2","1192","<git><macos><github><git-push><git-commit>","Initial commit using ""git commit -am"" failing and causing error when pushing to GitHub","<p>I am new to Git/GitHub and am having enormous difficulty pushing my new repo up to GitHub.</p>

<p>I created my project locally, which essentially has the following directory structure:</p>

<pre><code>myapp/
    src/
        &lt;A bunch of source files&gt;
    build.grade
    gradle.properties
    README.md
    .gitignore
</code></pre>

<p>For good measure, here's my <code>.gitignore</code> (in case its the culprit):</p>

<pre><code>.idea
*.iml
*.ipr
*.iws
/out
.gradle
/build
/files
/*.yaml
/*.sh
</code></pre>

<p>I confirmed Git was installed by running <code>git —version</code> which produces:</p>

<blockquote>
  <p>git version 2.3.2 (Apple Git-55)</p>
</blockquote>

<p>I then created a new GitHub repo (private) and left it empty so I wouldn’t have to merge anything.</p>

<p>I then attempted to init my project as a new git repo and here’s the command-line history:</p>

<pre><code>myuser@mac:~/sandbox/eclipse/workspace/myapp$ git init
Initialized empty Git repository in /Users/myuser/sandbox/eclipse/workspace/myapp/.git/
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git commit -am ""Initial barebones commit.""

*** Please tell me who you are.

Run

    git config --global user.email ""you@example.com""
    git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'myuser@mac.(none)')
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git config --global user.email ""myuser@example.org”
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git config --global user.name “mygithubusername”
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git commit -am ""Initial barebones commit.""
On branch master

Initial commit

Untracked files:
.classpath
.gitignore
.project
.settings/
README.md
bin/
build.gradle
gradle.properties
gradle/
gradlew
gradlew.bat
src/

nothing added to commit but untracked files present
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git remote add origin https://github.com/mygithubusername/myapp.git
myuser@mac:~/sandbox/eclipse/workspace/myapp$ git push -u origin master
error: src refspec master does not match any.
error: failed to push some refs to 'https://github.com/mygithbusername/myapp.git'
</code></pre>

<p>So as you can see I tried:</p>

<ol>
<li>Running <code>git init</code></li>
<li>Adding and pushing changes to the local repo, but had to first setup my email and username (again I’m brand new to Git here)</li>
<li>Added &amp; committed</li>
<li>Added the new remote repo</li>
<li>Tried pushing to that remote rep</li>
</ol>

<p>According to <a href=""https://stackoverflow.com/a/7572252/4009451"">this answer</a>, this “<em>src ref spec master does not match any</em>” error may be due to the fact that I have’t actually committed anything yet, which might jive with the “untracked file” errors/warnings I see above it.</p>

<p>Either way, where did I go awry, and what do I do to fix it?</p>
","0","4009451","",""
"14697801","1057519","2013-02-04 23:43:34","21","32333","<git><git-commit>","Git: move specific commits to another branch","<p>A have repository with two branches.</p>

<p>Master branch commits:</p>

<p>c1, c2, c3, c4, c5, c6, c7, ..., c15, ...</p>

<p>Staging Branch commits:</p>

<p>c1, c2, c3, c4, c5, c6, c7</p>

<p>I want to move all commits from Master branch after <strong>c7</strong> to staging branch</p>

<p>and then revert Master branch </p>

<p>with </p>

<pre><code>git reset --hard c7-hash
</code></pre>

<p>How to move/copy specific commits from one branch to another ?</p>
","3","1057519","0","0"
"49964800","6034245","2018-04-22 10:13:53","3","280","<git><count><grep><git-commit><commit-message>","Git count filtered commits","<p>Is it possible to get a number of git commits filtered by commit-message?</p>

<pre><code>$ git log --all --grep='SEARCH_STRING'  
</code></pre>

<p>With this snippet I get a list of all commits with the searched string.
But I got a lot of commits and its hard to count this by Hand.</p>

<p>Is there a way git tells me the sum of the commits in this list?</p>
","4","6034245","0","0"
"68508106","12862712","2021-07-24 08:02:13","0","85","<git><github><git-commit><git-push>","what happens after the amend and force push in isolated branch","<p>I used force push to amend a commit message on my branch <code>B</code>. I'm working alone on this branch, then I requested a PR to <code>master A</code>.</p>
<p>Will there be a problem after the PR is accepted?</p>
<p>according to <a href=""https://stackoverflow.com/a/8981216/12862712"">this</a> answer, people that have pulled from my branch will get an error. But nobody did pull from my branch. But after PR merge, my branch along with the amended commit will be in master. So will developers that have pulled/will pull from <code>master</code> get any error?</p>
<p><a href=""https://stackoverflow.com/a/27255423/12862712"">this</a> answer doesn't say if there will be any errors for other developers fetching from <code>master</code> after the PR merge</p>
","3","12862712","",""
"19167901","1732772","2013-10-03 19:44:13","42","33633","<git><file><commit><git-commit><git-diff>","File not shown in git diff after a git add. How do I know it will be committed?","<p>I had an untracked file which was not appearing in a git diff and when I added it to the 'changes to be committed' area, it still doesn't show up in the git diff. I shows up with a <code>git status -v</code> when I do a diff against HEAD.</p>

<p>I'm still very new to git, so could anyone please tell me if the file will be committed even if it doesn't show up in a regular diff, as it has been added to the staging area?</p>
","0","1732772","0","0"
"68512641","1495015","2021-07-24 18:10:36","0","194","<git><github><search><git-commit>","Is there a simple way to search through all the code of a git repo through all previous commits?","<p>I have a private git repo where I have a keyword like <code>abcde</code> I previously wrote down in 1 of the files that may or may not still be in the repo today. Is there a simple way to search all the files of all previous commits for my keyword <code>abcde</code>?</p>
<p>I'm thinking I need to write a script to search every current file but if it's not present just start <code>git reset --hard previousCommit</code> until it reaches the very 1st commit.</p>
","2","1495015","",""
"69567500","12234745","2021-10-14 08:31:28","0","3175","<eclipse><github><git-commit>","Getting Can't connect to any URI (not authorized) error while pushing the commit to github repo","<p>I'm simply trying to push my practice project code (from eclipse) to the github public repo. But unable to do so as it say <strong>Can't connect to any URI (not authorized) error</strong>
Is generating the ssh key is mandatory?
<a href=""https://i.stack.imgur.com/YVXd3.jpg"" rel=""nofollow noreferrer"">Error Screenshot</a></p>
","2","12234745","",""
"19176359","2764163","2013-10-04 08:11:18","99","143585","<git><git-commit>","How to get the last commit ID of a remote repo using curl-like command?","<p>I want to get the last commit ID of the <strong>remote</strong> git repo.</p>

<p>The command <code>git rev-parse HEAD</code> works for a locally-cloned git repo, but I want to get it from the original GIT repo by a CURL command or so. </p>

<p>Eg: I want to get the last commit ID of the git URL <a href=""https://git.appfactorypreview.wso2.com/history/apiapp.git/"">https://git.appfactorypreview.wso2.com/history/apiapp.git/</a>.</p>

<p>How?</p>
","0","2764163","0","0"
"19177924","2764163","2013-10-04 09:34:54","-1","582","<git><curl><git-commit>","Getting the last commit ID via a curl command to a git repo URL","<p>How can I invoke the URL <a href=""https://git.appfactorypreview.wso2.com/history/apiapp.git/"" rel=""nofollow"">https://git.appfactorypreview.wso2.com/history/apiapp.git/</a> as shown in the documentation <a href=""http://developer.github.com/v3/repos/commits/"" rel=""nofollow"">http://developer.github.com/v3/repos/commits/</a>? I mean, what is the CURL command that I have to give?</p>
","0","2764163","",""
"12959520","623334","2012-10-18 16:39:27","10","2136","<git><github><git-commit>","How can I delete a commit to git","<p>There are a few commits on a remote branch that i would like to get rid of. For example if the history looks like:</p>

<pre><code>A-&gt;B-&gt;C-&gt;D
</code></pre>

<p>I would like to delete C and D to give me:</p>

<pre><code>A-&gt;B
</code></pre>

<p>where B is now HEAD?</p>
","2","623334","0","0"
"19178869","1542339","2013-10-04 10:20:54","1","4202","<git><git-commit><git-log>","how to merge two git commits into one?","<p>i have made two commits while in fact one commit is enough, the reason that i make two commits is because i forget to add one file after i make the first commit, so i add it and make another commit, after that i found that i find i have made two commit with the same comment, so how to merge these two commits into one?</p>

<pre><code>* 3e381e7 - (HEAD, master) now i have add load script which can open many pages automatically at one time (4 seconds ago) 
* 2d97025 - now i have add load script which can open many pages automatically at one time (21 seconds ago) 
</code></pre>

<p>how to merge commits 3e381e7 and 2d97025 so that there is only one commit log?</p>
","1","1542339","",""
"34437341","2711241","2015-12-23 14:01:41","2","1209","<git><git-commit><git-stash><post-build-event>","Apply stash with untracked files already committed","<p>I've been asked to write a script to run in post-build events in Visual Studio that will respond to an output-updating build by committing all changes, including new (untracked) files, to a local ""autocommit"" branch. The idea is to help the lazy developer backup buildable code frequently so they can avoid losing their work.</p>

<h3>My current approach (see snippet below):</h3>

<p>If the user isn't on the autocommit branch, I stash their changes and untracked files, checkout the autocommit branch, apply the stash, and commit before returning to the previous branch and popping from the stash to return to the initial state.</p>

<h3>My problem:</h3>

<p>If a file is untracked on the user's current branch, but has already been auto-committed to the autocommit branch, then <code>git stash apply</code> fails to overwrite the file tracked on the autocommit branch with the untracked version in the stash.</p>

<p>From the <code>git stash</code> <a href=""https://git-scm.com/docs/git-stash"" rel=""nofollow"">documentation</a>, it doesn't seem like there are any relevant arguments I could use on the <code>apply</code> call to get around this. I can detect untracked files in the current branch before stashing by parsing the result of a <code>git status --porcelain</code> for lines starting with <code>??</code>, but that won't tell me which of those are already being tracked on the autocommit branch.</p>

<p>I'm currently required to use Windows batch files, so I'd like to limit my solution to tools likely to be available in that environment on any dev machine.</p>

<p>Here's the relevant snippet from my current approach:</p>

<pre><code>git stash save --include-untracked -keep-index
git checkout autocommit
git stash apply
git add -A
git commit -m ""Autocommit of build %VERSION%""
git checkout  %BRANCHNAME%
git stash pop
</code></pre>

<h3>Deviation from git philosophy</h3>

<p>The auto-commit process is intended to serve strictly as a convenience, git-based, auto-save system that doesn't require the developer to touch git or take any additional manual steps every time they rebuild their project successfully. </p>

<p>It doesn't align with normal git philosophy, because it's not intended to be used for source control or code sharing. I simply want to use git to provide snapshots for the developer to revert to e.g. if they lose their project to file corruption. This will lead to a large volume of tiny commits with little individual value, and that's okay - in fact, it's ideal for my needs.</p>

<p>The script assumes that the uncommitted changes on the current branch can be sensibly applied and committed to the autocommit branch. Any reason that assumption is invalid would be caused by the developer's direct interaction with the repo. As part of any such interaction, the developer is responsible for updating the autocommit branch accordingly so that the script's assumptions are valid the next time it's run.</p>
","6","2711241","",""
"69572261","14382247","2021-10-14 14:13:39","1","33","<bash><git><git-commit>","Automatic creation and committing of a file whenever I'm creating a certain type of file","<p>I want to create an automatic script that will be part of the commit,
This script will add to a ceratin file line that say the file x was created.
For example: If I'm creating a file a.txt than it will automatically add to the commmit in file b.txt the line: &quot;a.txt was created&quot;.</p>
","6","14382247","",""
"34455174","3124288","2015-12-24 15:56:20","7","4675","<git><vim><commit><git-commit>","Why does `:Wq` in VIM cause my commit to fail later?","<p>Often when I'm finished writing a commit message in VIM, I type <code>:Wq&lt;ENTER&gt;</code> instead of <code>:wq&lt;ENTER&gt;</code> because I'm holding down the shift key to type the colon. This causes VIM to respond with <code>E492: Not an editor command: Wq</code>.</p>

<p>This is all fine so far, I just retype <code>:wq&lt;ENTER&gt;</code> to save the commit message and exit VIM. However, the commit does not work then, and the terminal shows something like this:</p>

<pre><code>$ git commit
$ error: There was a problem with the editor 'vi'.
$ Please supply the message using either -m or -F option.
</code></pre>

<p>Why does accidentally entering <code>:Wq&lt;ENTER&gt;</code> before doing the correct <code>:wq&lt;ENTER&gt;</code> cause the commit to fail? Is there any way to get the commit to happen after entering <code>:Wq&lt;ENTER&gt;</code>?</p>
","0","3124288","",""
"66449211","15069040","2021-03-03 00:52:37","20","48363","<git><git-commit><github-desktop>","A lock file already exists in the repository, which blocks this operation from completing","<p>I'm working on an ASP.NET Core project. I'm trying to <code>push</code> a commit to my branch using GitHub Desktop. But every time I try to commit, I keep getting this error:</p>
<blockquote>
<p>A lock file already exists in the repository, which blocks this operation from completing.</p>
</blockquote>
<p>Upon searching the internet, the only solution I've found is to delete <code>index.lock</code> file inside <code>.git</code> folder manually.</p>
<p>But when I delete this file, it keeps re-appearing every time I try to commit, making it impossible for me to commit. I have already tried to commit from Visual Studio but it also failed.</p>
<p>Can anyone help me?</p>
","1","15069040","0","0"
"31829938","342097","2015-08-05 10:30:31","1","144","<git><git-merge><git-commit>","Git merge behavior (ahead of x by y commits)","<p>I've came across Git behavior I cannot fully understand. The repo is used by tens of people. The case is like this:</p>

<pre><code>$ git checkout master
$ git merge --no-commit feature
Automatic merge went well; stopped before committing as requested

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

All conflicts fixed but you are still merging.
  (use ""git commit"" to conclude merge)

Changes to be committed:

    modified:   web/webapp/grails-app/views/layouts/empty.gsp

$ git commit -m 'commit message'
[master e6cc2eb] commit message

$ git status
On branch master
Your branch is ahead of 'origin/master' by 21 commits.
  (use ""git push"" to publish your local commits)
</code></pre>

<p>What confuses me is this part:</p>

<pre><code>Your branch is ahead of 'origin/master' by 21 commits.
</code></pre>

<p>How come it's not 1? Just make it clear, there was only a single change in that empty.gsp file. </p>

<p>There are actually 20 more commits, but why they do not show up after <code>git status</code>? Any hints what I might be missing?</p>
","7","342097","",""
"13081986","295639","2012-10-26 06:38:21","2","165","<git><git-commit>","How do I take a bunch of my git local commits and merge them into one commit?","<p>In my company we have recently moved git. While in the process of working in this environment, I end up making a bunch of local commits (in my local branch). In order to keep my code updated I make pulls. Now the end result is that when I do a git log, I find my commits as well as other developers' commits in that log. Before pushing my commits to remote I would like to gather a all of my local commits and merge them into one commit (inorder to reduce noise in the log) and push it to remote. How do I do that in git? </p>
","0","295639","",""
"50009171","4661576","2018-04-24 19:07:33","2","1190","<git><githooks><git-commit><pre-commit-hook>","Custom Message to be displayed after every git commit","<p>We have recently migrated our git repository from Gitlab to Bitbucket. </p>

<p>Now i want to make sure that the team needs to commit to both repositories until Gitlab gets decommissioned. </p>

<p>By just telling them, it will not be sufficient as one might forget to push to the bitbucket which has the new repository and it might lead to production issues. </p>

<p>What i want to do is to have some kind of message like <strong>""please push to the BitBucket repository as well to avoid the conflicts""</strong> displayed on user's machine when he tried to make any commit in Gitlab(which is the current repo) so that he is reminded of it every time when he commits to Gitlab. </p>

<p>Can someone please tell me how to achieve this with the help of git hooks.</p>
","4","4661576","0","0"
"30038999","4724142","2015-05-04 20:05:39","182","95527","<git><visual-studio><github><git-commit>","Differences between Commit, Commit and Push, Commit and Sync","<p>I'm using visual studio 2013, and I'm faced with 3 options for when I commit my C# code. I need an explanation of the differences between each of the options with regards to what happens to my local repo vs. the GitHub repo. </p>

<ul>
<li>Option 1 says Commit</li>
<li>Option 2 says Commit and Push</li>
<li>Option 3 says Commit and Sync</li>
</ul>

<p>I don't quite understand the difference between the last 2 options. When should I use Commit and Sync as opposed to Commit and Push?</p>
","0","4724142","0","0"
"14768701","766584","2013-02-08 08:43:45","1","3040","<git><git-commit><fast-forward>","Git status shows local branch ahead by X commits - should only be 1","<p>I've been searching and trying the various solutions here on stack and other forums but can't seem to get this issue resolved.</p>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/10966498/git-branch-is-ahead-by-x-commits-doesnt-help-doing-git-pull"">Git: Branch is ahead by X commits. Doesn&#39;t help doing git pull</a></p>
  
  <p><a href=""https://stackoverflow.com/questions/12009089/why-does-git-say-i-am-40-commits-ahead-when-i-seem-up-to-date-and-a-push-pull-n"">Why does git say I am 40 commits ahead when I seem up to date and a push-pull (no files) fixes it?</a></p>
  
  <p><a href=""https://stackoverflow.com/questions/11032661/why-does-it-say-your-branch-is-ahead-of-origin-master-by-857-commits-when-i-ne"">why does it say &quot;Your branch is ahead of origin/master by 857 commits&quot; when I need to *pull* origin master</a></p>
</blockquote>

<p>The overall issue is that I pulled a site checkout then had to make some local changes to the configs (database, api locations, etc.) and to prevent having to stash and re-applying each time I went ahead and committed the local changes to these files. I did all this under 1 local commit as ""Local config commits"". And at this time git status shows its ahead by 1.</p>

<pre><code>root@web1 web]# git status
 On branch master
 Your branch is ahead of 'origin/master' by 1 commits.
</code></pre>

<p>However, over the past month we've been developing and fixing things. We all work off of our separate branches and merging back into a develop branch and then from there to master and so on. As things are ready, I pop into production and pull the changes down using 'git pull'. This seems to have been working well, however I noticed today that the status has now changed.</p>

<pre><code>root@web1 web]# git status
On branch master
Your branch is ahead of 'origin/master' by 31 commits.
</code></pre>

<p>When I look at the git log against origin/master it seems like I'm seeing the merges coming in as local commits?</p>

<p>Small log snippet:</p>

<pre><code>[root@web1 web]# git log origin/master..HEAD 
commit 336743eb411804487ad2f8a2e31701b094fb03f0
Merge: 58c8230 3478924
Author: root &lt;root@web1.(none)&gt;
Date:   Fri Feb 1 15:32:35 2013 -0500

    Merge branch 'master' of http://gitrepo.com/Site

commit 58c82303c523a3c9217dd677ba23582e168007cc
Merge: 6c9de32 0e1c327
Author: root &lt;root@web1.(none)&gt;
Date:   Fri Feb 1 15:04:58 2013 -0500

    Merge branch 'master' of http://gitrepo.com/Site

commit 6c9de32c2fed77e442e73389aa8041f067a23cc4
Merge: ff586b4 52a7ea9
Author: root &lt;root@web1.(none)&gt;
Date:   Fri Feb 1 14:38:08 2013 -0500

    Merge branch 'master' of http://gitrepo.com/Site
</code></pre>

<p>I would suspect my repo to have been properly 'fast-forwarded' and still be sitting 1 commit ahead after each pull. When doing the diff against origin/master you can see that I don't have many changes (seemingly) just the configs. This was from the original config changes and local commit.</p>

<pre><code>[root@web1 web]# git diff origin/master..HEAD --name-only
application/config/api.php
application/config/config.php
application/config/database.php
</code></pre>

<p>I've tried the various links above and have tried the fetches, more pulls, etc. to no avail. Is there a way I can have my local repo properly fast-forward such that I only see the 1 local commit that I've made as being how var 'ahead' I am? I can't exactly push these changes out to master as this would cause those changes to then be pulled down to other installs. And then I guess after resolving this issue what is the best way of deploying, changing some configs and being able to continually update. From my understanding stash would work, but this in essence moves your changes out of place, then you can pull, and then re-apply but I can't afford the downtime of this small step especially if it involves having to sort out any merge conflicts.</p>

<p>Or, is there a way I can somehow pluck these files out of commit so that I can push to get everything sorted?</p>
","0","766584","0","0"
"66618282","15390531","2021-03-13 20:33:41","-2","25","<github><git-commit>","How do I get my Git commits to show on github?","<p>I am new to this world and enrolled in a bootcamp. We created a GitHub account a few months ago. At the time everything worked fine. I was able to make changes locally and commit them via the command line, fork repos, clone them, make changes, and commit. All the good stuff.</p>
<p>Now after not using GitHub for much recently we are back working on a project there. However, now whenever I make a commmit it is not tracking on GitHub. When I make the change, add it and commit it I receive the below message and no changes show on GitHub.</p>
<p>1 file changed, 1 insertion(+), 1 deletion(-)</p>
<p>I am not sure what has happened. Is it possible I have moved the files to the wrong directory? At this point I am not sure how to tell what directory I need to have the files in. Any insights would be much appreciated.</p>
","1","15390531","",""
"31844126","627003","2015-08-05 22:51:57","1","1099","<python><git><pycharm><git-commit>","How to amend *only* a git commit message in PyCharm 4.5.3?","<p>In <code>git</code> there is a command <code>git commit --amend</code> to edit one's last commit message (among other things). I was looking for this type of functionality in PyCharm and can't seem to find it.</p>

<p>When file changes are being added to an amended commit, the <em>Commit Changes</em> dialog shows a <em>Amend commit</em> checkbox, but I find no obvious way to amend <strong>only</strong> the commit message. (I can trick the checkbox into showing up by selecting a file, checking the <em>Amend commit</em> box, and then unselecting the file, but the <em>Commit</em> button is greyed out.)</p>

<p>Google turns up ""<a href=""https://stackoverflow.com/questions/24999131/how-to-edit-a-commit-message-in-pycharm"">How to edit a commit message in PyCharm?</a>"" but it was not answered satisfactorily (or perhaps it's not applicable to the current version?). The <a href=""http://www.jetbrains.com/pycharm/webhelp/committing-changes-to-a-local-git-repository.html"" rel=""nofollow noreferrer"">help page</a> linked to in the previous question does not provide the answer, nor have I been able to find it in the rest of the docs. (Per <a href=""https://meta.stackexchange.com/questions/1471/"">meta.stack*</a> <a href=""https://meta.stackexchange.com/questions/7046/"">suggestion</a> I attempted to update the existing, unanswered question, but my edits were <a href=""https://stackoverflow.com/review/suggested-edits/9059365"">rejected</a>.)</p>

<p>Further review turns up ""<a href=""https://stackoverflow.com/questions/14075919/"">Using IntelliJ to amend git commit message</a>"", a couple years old and without an accepted answer, and since PyCharm is based on IDEA, possibly applicable.</p>

<p>Is this even possible in PyCharm 4.5.3?</p>
","5","627003","",""
"30088693","442351","2015-05-06 22:20:38","20","5612","<git><git-commit><git-reset>","What happens to orphaned commits?","<p>I have a repo with four commits:</p>

<pre><code>$ git log --oneline --decorate
6c35831 (HEAD, master) C4
974073b C3
e27b22c C2
9f2d694 C1
</code></pre>

<p>I <code>reset -- soft</code> to the <code>C2</code> commit and now I have a repo like so:</p>

<pre><code>$ git reset e27b22c --soft

$ git log --oneline --decorate
e27b22c (HEAD, master) C2
9f2d694 C1
</code></pre>

<p>Now I add an extra commit, so the log looks like this:</p>

<pre><code>$ git log --oneline --decorate
545fa99 (HEAD, master) C5
e27b22c C2
9f2d694 C1
</code></pre>

<p>What happened to commits <code>C3</code> and <code>C4</code>?  I haven't deleted them, so I assume they are still there, <code>C3</code>'s parent is still <code>C2</code>.</p>
","0","442351","0","0"
"34531339","2010471","2015-12-30 14:21:53","0","592","<git><caching><git-commit><pre-commit-hook><jscs>","Is it possible to use cache for Git pre-commit hook?","<p>I use a pre-commit hook to check code-style and other rules for my project. </p>

<pre><code>gulp.task('git-preCommit', ['jscs', 'jshint', 'tslint', 'stylint']);
</code></pre>

<p>Often this process is long-running. I wonder, is it possible to set some cache for changed files in Git, or in jscs, jshint etc. </p>

<p>For example there are 150 diff files, <code>preCommit</code> checked 149 successfully and threw an error on 1 (<code>path/example.ts</code>). I fix the last one, and when I commit next time - <code>git cache</code> (or some tools) will know that I fixed only 1 file and check only this one, not all 150.</p>
","1","2010471","",""
"34532430","1956602","2015-12-30 15:33:41","2","87","<linux><git><gnupg><git-commit><pgp>","View git pgp sigs in a commit with out gpg installed","<p>In some cases I will be using a system that does not have gpg installed and I do not want to take the time the set it up and get the pub key installed. I would like to just view the signature on the commit and copy it to another system to validate it. I can not seem to find a way to view the signature with out gpg being installed. Git only gives an error the gpg is not installed when ever I try to use any of the git commands to view it. </p>

<p>Is there a way to view git pgp signed commits with the pgp signature in tacked without having gpg installed on the system?</p>

<p>I have been looking everywhere for an answer to this and have not found anything of use. Thanks for any help or pointers you can provide.</p>
","0","1956602","",""
"50326618","1951298","2018-05-14 09:04:00","0","368","<git><git-branch><git-commit>","Creating different branches of the same duplicate folder","<p>I am working on a project, and my git knowledge is basic. Trying to merge a branch to the master branch, but with different features, I want to tackle this with my basic logic (I'm seeking ease) even if it's not the best way to treat the issue.</p>

<p>I copied the same project folder with different names trying to create branches with features names. features all act on different files and sometimes on the same file, but I want to commit with different messages to different branches, then merge them one by one with the master branch.</p>

<p>The first challenge, is why I go to different folders, I get the same branch name. Can I just rename the branch based on features.</p>

<p>Is this a valid workflow ?</p>
","2","1951298","",""
"50326801","5710014","2018-05-14 09:13:17","1","54","<git><github><git-branch><git-commit><git-checkout>","How to pull work from particular commit","<p>I checkout to previous commit and then accidentally added and commit on that commit, now when i checked out to dev branch my work vanished, how can i retrieve my work</p>

<p><a href=""https://i.stack.imgur.com/5gtcl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5gtcl.png"" alt=""enter image description here""></a></p>

<p>the commit on which i checked out displaying as ((741a...) and then i git add . and git commit the commit changes ((5b78c...)</p>
","10","5710014","0","0"
"11981028","465378","2012-08-16 05:09:41","3","233","<git><git-branch><git-rebase><git-commit>","How can I insert a commit before rebasing?","<p>I have a history that looks a little like this right now:</p>

<pre><code>                  origin/master
                        |
A --- B --- C --- D --- E
                   \
                     -- F
                        |
                     master
</code></pre>

<p>I want to rebase my changes (commit F) after E, but there are some fairly major issues in commit E I would like to correct first. Basically, this is what I want to be able to get to:</p>

<pre><code>                  origin/master
                        |
A --- B --- C --- D --- E --- G
                   \
                     -- F
                        |
                     master
</code></pre>

<p>I <em>then</em> want to rebase F on at the end, for a final, simple result:</p>

<pre><code>                              origin/master
                                    |
A --- B --- C --- D --- E --- G --- F
</code></pre>

<p>How can I ""put aside"" commit F while I work on the main trunk, then rebase it on later? I would assume it would involve <code>git branch</code>, but I don't know enough git to know the sequence of commands to issue. What is the best way to do this?</p>
","0","465378","",""
"11987914","63984","2012-08-16 13:11:15","146","24321","<git><message><git-rebase><git-commit><revision-history>","How do I reword the very first git commit message?","<h2>I have a working tree containing 3 commmits:</h2>

<p>➜  ~myproject git:(master) <code>git log</code></p>

<pre><code>commit a99cce8240495de29254b5df8745e41815db5a75
Author: My Name &lt;my@mail.com&gt;
Date:   Thu Aug 16 00:59:05 2012 +0200

    .gitignore edits

commit 5bccda674c7ca51e849741290530a0d48efd69e8
Author: My Name &lt;my@mail.com&gt;
Date:   Mon Aug 13 01:36:39 2012 +0200

    Create .gitignore file

commit 6707a66191c84ec6fbf148f8f1c3e8ac83453ae3
Author: My Name &lt;my@mail.com&gt;
Date:   Mon Aug 13 01:13:05 2012 +0200

    Initial commit (with a misleading message)
</code></pre>

<h2>Now I wish to <a href=""http://git-scm.com/docs/git-rebase"" rel=""noreferrer""><code>reword</code></a> the commit message of my <em>first commit</em> (6707a66)</h2>

<p>➜  ~myproject git:(master) <code>git rebase -i 6707</code></p>

<p>(…entering vim)</p>

<pre><code>pick 5bccda6 Create .gitignore file
pick a99cce8 .gitignore edits

# Rebase 6707a66..a99cce8 onto 6707a66
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like ""squash"", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
</code></pre>

<p>In this case, I wish to correct (<code>reword</code> in git parlance) the commit message in question:</p>

<blockquote>
  <p>Initial commit (with a misleading message)</p>
</blockquote>

<p>…to something appropriate.</p>

<p>Unsurprisingly, my attempt above didn't succeed since the first commit obviously doesn't have any <em>parent</em> commit. (And when you <code>rebase</code>, you need to reference the next oldest commit <em>prior</em> to the one you wish to <code>reword</code>, right?)</p>

<p>The gist of my question, thus, can you achieve this by any other means of doing it?</p>
","7","63984","0","0"
"22032714","2781359","2014-02-26 05:36:22","0","54","<git><egit><git-push><git-commit>","Can't Push Commit a Folder from Egit?","<p>I am having three Project folders in Eclipse.I want to push those folders into Git through EGit .</p>

<p><img src=""https://i.stack.imgur.com/t3uqQ.jpg"" alt=""enter image description here""></p>

<p>Only two folders are being Pushed .The Client is not being Pushed. I am followedthe same procedure for all the projects.</p>

<p>I don't know why it is show the client in a Different way ...</p>

<p><img src=""https://i.stack.imgur.com/MJdAX.jpg"" alt=""enter image description here""></p>

<p>Thanks for your Help ..</p>
","3","2781359","",""
"41005278","1403588","2016-12-06 21:31:18","2","2589","<git><github><git-commit><github-for-windows>","Git commit not showing on Github webpage","<p>I am newbie when using Github so I have a question.
I am using the Windows Github client. I forked one repo and added some changes.
These changes are not shown on the Github webpage.</p>

<p>For example, <a href=""https://github.com/amacar/NiceHashBot/commit/7e0c8c94de9c589c9a13cc013461bc04a0a9fc8c"" rel=""nofollow noreferrer"">here</a> is my commit.</p>

<p><a href=""https://github.com/amacar/NiceHashBot"" rel=""nofollow noreferrer"">Here</a> is the repo.</p>

<p>But on GitHub I see that there are no new commits, last is from forked repo:
<a href=""https://i.stack.imgur.com/NNFZu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NNFZu.png"" alt=""enter image description here""></a></p>

<p>But if I download the ZIP from: <a href=""https://github.com/amacar/NiceHashBot"" rel=""nofollow noreferrer"">https://github.com/amacar/NiceHashBot</a> then there I can see changes that I committed before.
I am a little confused as to what is wrong.</p>
","1","1403588","0","0"
"66228019","2182021","2021-02-16 16:08:38","14","6555","<git><github><gitlab><git-commit><githooks>","How to configure git hooks for all developers","<p>I want to apply consistent commit message rule globally for all developers to have jira issue in commit message.</p>
<p>Using enterprise github.</p>
<p>As found, it can be achieve using, <code>.git/hooks/commit-msg</code> file to updated accordingly.</p>
<p>Issue: How to apply this updated git hooks to available for all the developers.
I don't see any changes appear on <code>git status</code>.
Not sure if it has to configure different way so, <code>commit-msg constrain</code> will apply for all developers instead of locally one.
Can you please guide on this.</p>
","2","2182021","",""
"47549430","8937838","2017-11-29 09:36:02","0","511","<git><git-commit><git-clone><libgit2><libgit2sharp>","libgit2sharp not able to commit files only to particular Branch. Help required","<p>I have cloned a repo in my local drive. And was able to create branches using libgit2sharp. Below is the code I have used.</p>

<pre><code>//Clone
var WorkDir = Repository.Clone(&lt;git-url&gt;, &lt;local-path&gt;);

//Branch create 
var branch = repo.CreateBranch(""&lt;branchName&gt;"");                     

repo.Branches.Update(branch,
    b =&gt; b.Remote = repo.Network.Remotes[""origin""].Name,
    b =&gt; b.UpstreamBranch = branch.CanonicalName);

repo.Network.Push(branch);
</code></pre>

<p>The above code works and I am able to see the branches on both local .git folder and the git server.</p>

<p>However, When I try to commit files into the created branch they are not visible in the remote git.</p>

<p>Below is the code.</p>

<pre><code>Commands.Stage(repo, &lt;local-clone-path-with-file&gt;);                    
serName = System.Security.Principal.WindowsIdentity.GetCurrent().Name.Split(new string[] { ""\\"" }, StringSplitOptions.None)[1];

// Create the committer's signature and commit
Signature author = new Signature(userName,userName+""@atkinsglobal.com"", DateTime.Now);
Signature committer = author;

string comment = timeStamp + ""_"" + ""&lt;BranchName&gt;"" + ""_"" + userName;

//// Commit to the repository
Commit commit = repo.Commit(comment+""_initial"", author, committer);

Remote remote = repo.Network.Remotes[""origin""];

repo.Network.Push(remote, @""refs/heads/""+&lt;BranchName&gt;, new PushOptions());
</code></pre>

<p>Please Note: Requirement is that files must be committed to only specified branch, master branch must not have these files.</p>
","0","8937838","",""
"47552212","9025399","2017-11-29 11:52:46","0","348","<git><file><intellij-idea><git-commit>","In intelij How to get rid of unwanted changes to files in git","<p><a href=""https://i.stack.imgur.com/X6zZm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/X6zZm.png"" alt=""Screenshot from IntelliJ""></a></p>

<p>In intelliJ When I change code 
the intelliJ stage the files for commit.
I have few files that I didn't do any change on them yet they are always stage for commit.
how can I configure the intelliJ to ignore changes in those file?</p>
","0","9025399","",""
"66232384","4898202","2021-02-16 21:25:05","1","82","<git><git-commit>","git commit only modified files as atomic commit, then commit only deleted files as separate atomic commit","<p>I have a mix of <code>deleted</code>, <code>new</code> and <code>modified</code> files in my <code>git staging</code> area,
i.e. they are already all <code>add</code>ed to the staging area and are ready to be finally <code>commit</code>ted to the repository.</p>
<p>How do I commit file by 'status' instead of using a pathspec?</p>
<p>Example, how do I <code>commit</code> (from the <code>staging</code> area) only the files that have been <code>deleted</code>, but leave <code>new</code> and <code>modified</code> files alone, in staging?</p>
<p>The reason is because I want to create separate atomic commits with separate comments that are more exact/applicable to the files being committed.</p>
","0","4898202","0","0"
"12032375","1335527","2012-08-20 04:44:23","1","476","<git-commit>","Why GIT commit need 30GB of memory for a commit?","<p>I have a big repository, around 80GB</p>

<pre><code>git --version
#git version 1.7.12
git init .
#Initialized empty Git repository in /reponame/.git/
git add -A .

git commmit -m ""Backup 2012-08-19 03:43:44""
#fatal: Out of memory, malloc failed (tried to allocate 32220431361 bytes)
#[master (root-commit) 8053f0d] Backup 2012-08-19 03:43:44
</code></pre>

<p>Why GIT need 30GB of memory for a commit?</p>

<p>This is not in accordance with the first paragraph of the home main home of GIT:</p>

<blockquote>
  <p>Git is a free and open source distributed version control system designed to handle everything from small to <strong>very large projects with speed and efficiency.</strong></p>
</blockquote>
","5","1335527","",""
"47809758","4783205","2017-12-14 09:18:21","4","2976","<git><tfs><git-branch><git-commit>","Why can I not see the branch tree in TFS?","<p>I'm not able to see the branch tree inside TFS web portal or from Visual Studio. If I open <code>gitk --all</code> I see a perfect tree of the branches.</p>

<p>Is it me that misunderstand something about git and TFS?</p>

<p><a href=""https://i.stack.imgur.com/ygLfm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ygLfm.png"" alt=""gitk""></a></p>

<p><a href=""https://i.stack.imgur.com/3zqJk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3zqJk.png"" alt=""enter image description here""></a></p>
","2","4783205","",""
"3580013","49376","2010-08-26 22:21:20","675","147269","<git><git-commit><conventions><commit-message>","Should I use past or present tense in git commit messages?","<p>I <a href=""https://web.archive.org/web/20100827225248/http://progit.org/book/ch5-2.html"" rel=""noreferrer"">read once</a> that git commit messages should be in the imperative present tense, e.g. &quot;Add tests for x&quot;. I always find myself using the past tense, e.g. &quot;Added tests for x&quot; though, which feels a lot more natural to me.</p>
<p><a href=""http://github.com/jquery/jquery/commit/c5382ad7c118ca54dde630b6c7146f1c3b6afb80"" rel=""noreferrer"">Here's a recent John Resig commit</a> showing the two in one message:</p>
<blockquote>
<p>Tweak some more jQuery set results in the manipulation tests. Also fixed the order of the expected test results.</p>
</blockquote>
<p>Does it matter? Which should I use?</p>
","13","49376","0","0"
"29383444","773079","2015-04-01 05:28:39","15","6936","<git><git-commit><git-patch>","How to create git patch from two files?","<p>I am a newbie to git and I was just wondering, if it's possible to create a git patch from two different file. There is no git repo, the scenario is that I have a file and I modified it, now I want to create a patch with the difference between these two files. Any pointers? Or should I just go ahead with creating a repo and then modifying the file and then commit the changes?</p>
","0","773079","0","0"
"29399906","4227","2015-04-01 20:13:24","4","299","<git><sublimetext3><git-commit>","sublime text option ""-n -w"" (for git) always open my previous tabs","<p>I have the folling command set for my commits in git under windows using git bash:</p>

<pre><code>core.editor='c:\Program Files\Sublime Text 3\subl' -w -n
</code></pre>

<p>I would like to enter the commit window in a new separate window. That part works fine.</p>

<p>The problem hower is that whenever I commit something and that sumblime window opens, it also opens a 2nd window with all the tabs that I am currently working on (unless sublime was open already anyway). When there is currently no sublime text window open and I commit something, two windows instead of just one open.</p>

<p>How can I prevent sublime from openening the other window (with my previous tabs) too <strong>and at the same time</strong> when I open sublime normally (e.g. from the task bar or start menu), that all my previously open tabs will show up?</p>

<p>I know I can set these options:</p>

<pre><code>""hot_exit"": false,
""remember_open_files"": false
</code></pre>

<p>Bu that will disable remembering the open tabs globally and not just for the context of git.</p>
","0","4227","",""
"41158344","2552451","2016-12-15 07:08:09","1","204","<git><branch><git-commit>","Switching branches brings committed folders and files of the previous branch","<p>I have been working on GIT for 3 years, but don't remember facing this issue.
I have created a new repository, where each branch has a different code. The folder structure is roughly the same at the outer level, but some sub-folders and a few files change for each branch (quite a common situation). </p>

<p>I have an empty branch which I use as base to create new customer branches. I have created 'n' customer branches from here. For the 1st Customer branch, I copied the code from my local to the 1st branch. Commited and pushed the changes. Now when I checkout the second branch (ideally should be empty), but the 1st branch code remains as untracked files. I'm doing a clean -df before copying fresh code to each branch. </p>

<p>Why do I get the <strong>committed</strong> changes from the previous used branch, to my new branch, as untracked files?</p>

<p>Git Version - 1.7</p>
","9","2552451","",""
"13339397","1815551","2012-11-12 06:48:04","12","26905","<git><git-commit><git-add>","Git add not adding files","<p>when I try to git add my files, I typed </p>

<pre><code>git add &lt;insert file names here&gt;
</code></pre>

<p>That works correctly. However, when I try to do </p>

<pre><code>git commit -a
</code></pre>

<p>My git repository tells me that it's empty. What is outputted is:</p>

<pre><code># On branch master
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed) 
#
&lt;insert name of files here&gt;

nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>Might anyone know the solution to this? Thanks.</p>
","1","1815551","0","0"
"13340329","1817493","2012-11-12 08:21:15","251","153945","<git><git-commit>","How to save a git commit message from windows cmd?","<p>I run git from the command line.</p>

<p>How does one save the commit message?</p>

<p>I mean what keys should I press to go past this screen:</p>

<p><img src=""https://i.stack.imgur.com/Gc6FJ.png"" alt=""Commit message interface""></p>
","0","1817493","0","0"
"41281560","3458727","2016-12-22 10:58:13","0","746","<git><bitbucket><git-commit><git-log>","Download git commit log from bitbucket within a date range","<p>I want to download latest git commit log from the bitbucket as pdf/excel/any document type. I want to get commit log within a date range. So far, i have found some solution by using <strong>git log .....</strong>. I want a different option to get the log. How can i do this ? </p>
","2","3458727","",""
"41287891","1399018","2016-12-22 16:40:23","11","3973","<git><version-control><git-commit><git-alias>","git commit --amend is dangerous","<p>I sometimes accidentally type <code>git commit -amend</code> when I really wanted to <code>git commit --amend</code>. Git detects that and asks me </p>

<pre><code>$ git commit -amend
error: did you mean `--amend` (with two dashes ?)
</code></pre>

<p>which is great. </p>

<p>However, sometimes I write <code>git commit -ammend</code> and then git will just accept that and treat my spelling mistake as <code>git -a -m ""mend""</code>, so it justs commits with the log message ""mend"". </p>

<p>I am looking for a way to stop git doing so. I've tried to define an alias for <code>git commit -ammend</code> but failed for now. Do you have any suggestions how to deal with this issue?</p>
","5","1399018","0","0"
"22365370","759466","2014-03-12 22:36:34","70","215750","<git><git-commit><atlassian-sourcetree>","How to rollback everything to previous commit","<p>Recently in a project with multiple people, a commit was made as seen in the image below. Marked in red you can see a commit with the description/comment of 'Merge?'.</p>

<p>This commit added numerous files and altered numerous others and was never intended to take place.</p>

<p>Using <a href=""/questions/tagged/atlassian-sourcetree"" class=""post-tag"" title=""show questions tagged &#39;atlassian-sourcetree&#39;"" rel=""tag"">atlassian-sourcetree</a> what do I need to do to roll everything back to the commit highlighted in blue? (I am 8 commits behind as seen in the screenshot.)</p>

<p><img src=""https://i.stack.imgur.com/wmoTF.png"" alt=""sourcetree troubs""></p>
","5","759466","0","0"
"13399430","273743","2012-11-15 14:21:21","5","3606","<git-commit><github-for-mac>","How to do ""git commit --amend"" using GitHub For Mac","<p>Is the ""commit --amend"" feature not included in GitHub For Mac?</p>
","0","273743","0","0"
"29485165","4757366","2015-04-07 06:28:06","1","324","<git><git-merge><git-commit><git-review>","git review is failing to push my changes","<p>I am new to git. And as practice, i am working on 2 braches say program_1, program_2. </p>

<pre><code>git branch program_1
ls temp
git branch program_2 # (create program_2 branch)
git checkout program_2
git merge program_1 program_2 # (as i need temp folder in program_2)
# Add some files in temp folder (say 1.c, 2.c)
git add temp/1.c temp/2.c
git commit
# &lt;some explanation reg commit&gt;
git review
</code></pre>

<p>Here i am getting conflict.</p>

<pre><code>You are about to submit multiple commits. This is expected if you are
submitting a commit that is dependent on one or more in-review
commits. Otherwise you should consider squashing your changes into one
commit before submitting.

The outstanding commits are:

9610151 (HEAD, program_2) program_2 submitting for review
8760f55 (program_1) Adding temp to program_1

Do you really want to submit the above commits?
Type 'yes' to confirm, other to cancel: 
</code></pre>

<p>So what does this means? and how to resolve this? what i am missing?</p>

<p>Can anyone know the answer?</p>
","1","4757366","0","0"
"60333236","1654358","2020-02-21 06:30:40","1","420","<git><gitlab><git-commit>","Delete commits and files to reduce repo size","<p>I dont know how to do it so I would like to ask you.
In git repo(gitlab) I got 5 commits: A->B->C->D->E and I pushed always a file/files contains 20MB
Now Repo is a bit too big. I want to remove commits and FILE from these commits B,C,D.
What shoul I do?
I have already done:</p>

<pre><code>git checkout &lt;hash-A&gt;
git cherry-pick &lt;hash-E&gt;
git branch -f master
git checkout master
git push -f origin master
</code></pre>

<p>and</p>

<pre><code>git rebase -i &lt;hash-A&gt;
git push -f
</code></pre>

<p>After that commits are deleted but Repo have the same size as before.
Is there any option to remove commits AND size Repo as well?</p>
","5","1654358","",""
"41440933","1197249","2017-01-03 10:06:03","5","99","<git><git-commit><git-stash>","Why does git stash creates 2 commit objects? Seems like 1 was adequate","<p>When doing <code>git stash</code> 2 commits are created. One is referenced by the <code>stash</code> ref and has 2 parent commits. One parent is the index of where we did the stash. The other parent has the actual contents of what we stashed.<br>
Why are 2 commits needed for the stash? It seems to me that only 1 was sufficient. I.e. just make <code>stash</code> ref to the commit that has the actual contents.<br>
Would this not work?</p>
","0","1197249","",""
"3966714","42645","2010-10-19 08:56:34","53","28266","<git><git-commit>","How can I change the default comments in the git commit message?","<p>Is it possible to modify the commented part of the default git commit message?
I want to add a bit more 'context' information for my users.</p>

<pre><code># Please enter the commit message for your changes.
# (Comment lines starting with '#' will not be included)
# Explicit paths specified without -i nor -o; assuming --only paths...
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   test.txt
#
</code></pre>
","0","42645","0","0"
"3973994","297201","2010-10-20 00:54:59","124","116726","<git><git-commit><git-push>","How can I recover from an erronous git push -f origin master?","<p>I just committed the wrong source to my project using <code>--force</code> option.</p>

<p>Is it possible to revert? I understand that all previous branches have been overwritten using <code>-f</code> option, so I may have screwed up my previous revisions.</p>
","1","297201","0","0"
"60362949","12948549","2020-02-23 13:58:22","3","428","<git><atom-editor><commit><git-commit>","When I Git commit, cmd.exe not found","<p>Quite new to git, so if i made any obvious mistakes I am sorry.<br>
When I do git commit, it prints the following message:</p>

<pre><code>hint: Waiting for your editor to close the file... /c/Users/UserName/AppData/Local/atom/bin/../app- 
1.44.0/resources/cli/atom.sh: line 23: cmd.exe: command not found
Aborting commit due to empty commit message.
</code></pre>

<p>I am assuming it is to do with <code>cmd.exe</code> written in atom.sh file, but I am not sure, I tried reinstalling atom and git but nothing. And i did </p>

<pre><code>git config --global code.editor ""atom --wait"" 
</code></pre>

<p>I also tried replacing ""atom"" with its actual directory path, then it says:</p>

<pre><code>Waiting for your editor to close the file...
and says aborted due to empty commit message, then opens atom editor.
</code></pre>

<p>Sorry if it is a bit confusing question, I have been stuck on this for so long.
Thanks</p>
","18","12948549","0","0"
"60367641","1593077","2020-02-23 22:52:50","1","191","<git><automation><git-commit>","How to easily examine empty commits on a git branch from some point on?","<p>I suspect I may have a commit on a branch of mine - after the branch point from a master branch - which is empty. I want to find this commit (or maybe more than one?) and have a look at its commit message</p>

<p>Now, I could of course examine all commits from the branch point one by one and check whether they're empty or not. I could probably even write a shell script which takes the number of commits to look back and keeps executing</p>

<pre><code>git diff HEAD^{n+1}  HEAD^^^^...lots of ^{n}
</code></pre>

<p>and checking the number of output lines, and using that to get the commit IDs. But - I was hoping there was some either way to better automate this. I know that there's a <code>git filter-branch</code> command which could <em>remove</em> empty commits, but I first want to know whether I had any and where they are. Also I don't want to go all the way back to the initial commit.</p>
","3","1593077","",""
"60501840","3132457","2020-03-03 07:10:39","4","421","<git><github><git-commit>","Reset commits are counted as contribution (in terms of commit count)","<p>I created a new repo and made a number of commits and pushes.</p>

<p>In the middle of commiting/pushing I realized some commits weren't needed so I ""deleted"" them both locally and in remote too:</p>

<pre><code>git rebase -i
git push origin +master
</code></pre>

<p>After doing this a couple of time, my repo now has 8 commits. This doesn't count those ""deleted"" commits. However, on my profile page the number of commits for this repo is more, say 12. I realize it counts those ""deleted"" commit in this count, but how can I make sure it shows only the 8 commits here too?</p>

<p>Note: my question looks like <a href=""https://stackoverflow.com/questions/44993889/repository-commit-count-wrong"">this one</a> but it didn't answer my question.</p>
","3","3132457","",""
"60507490","1220895","2020-03-03 12:40:16","0","60","<git><visual-studio><git-commit><csproj>","A file passes to modified after a git pull from a clean working dir","<p>I'd like to understand the following situation about my git repository.</p>

<p>I'm at <strong>commit XXX</strong> and I have a clean repos (nothing untracked/modified) aligned with the last commit on origin/develop.</p>

<p>My colleague has created and pushed with Visual Studio, a new <strong>commit YYY</strong> on top of the previous <strong>commit XXX</strong> containing among others a <strong>project.csproj</strong> file having 4 new lines.</p>

<p>Just after that I pulled from origin/develop and retrieved only the <strong>commit YYY</strong>.</p>

<p>Now, the <strong>project.csproj</strong> file and only this one appears modified and impossible to undo with <code>git checkout project.csproj</code>.</p>

<p>The difference with the modified <strong>project.csproj</strong> and the one on the <strong>commit YYY</strong> is that mine (the modified) has 4 less lines.</p>

<p><strong><em>My question is, since i have pulled the commit with those 4 new lines why they weren't took into account?</em></strong></p>

<p><code>git clean, git reset, git clone</code> changed nothing.</p>

<p>If i <code>git stash</code> the file <strong>project.csproj</strong> is copied to a new stash instead of being moved.</p>

<p>My colleague went back again to his VisualStudio and the <strong>project.csproj</strong> was surprisingly still modified with 4 new lines. He added the file to a <strong>commit ZZZ</strong> and pushed it to origin/develop.</p>

<p>When i pulled the <strong>commit ZZZ</strong> everything went back to normal, and <strong>project.csproj</strong> isn't anymore in modified status.</p>

<p>The SHA generated on project.csproj (in <strong>commit ZZZ</strong> and <strong>commit YYY</strong>) with </p>

<pre><code>git ls-files -s project.csproj
</code></pre>

<p>after checking out  is the same.</p>

<p>This situation is reproducible when I return to the <strong>commit YYY</strong></p>

<p>Could someone clarify the situation?</p>

<p>Thank you in advance</p>
","4","1220895","",""
"60528076","","2020-03-04 14:16:06","-1","2790","<git><ubuntu><github><github-pages><git-commit>","How Can I Update My Github Pages Website?","<p>I have my github website deployed to a.github.io. Now, I have made some changes locally and want to push changes but I am unable to do so. This is what the settings of my repo says in the Github Pages section:</p>

<p><a href=""https://i.stack.imgur.com/d18Gp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/d18Gp.png"" alt=""enter image description here""></a></p>

<p>In my repo, I can see that the commits are being shown. However, the website is still not updated. If I run it locally, i see the changes but not on the actual website. Note that the original account where website it hosted is also different than the one through which I am making commits. </p>

<p>When I go to my local repo through terminal and run</p>

<pre><code>git config --list
</code></pre>

<p>Instead of my username and email, I get two different emails of my two different accounts. The first user.name is basically my email for where I am hosting the website. The user.email is the email through which I am pushing changes.</p>

<p>user.name= ab@hotmail.com
user.email=ab@gmail.com</p>

<p>This is how I am trying to update the website (the pushing worked last time but it's not even working rn):</p>

<pre><code>git add *
git commit -m ""added new picture""
</code></pre>

<p>Results:</p>

<pre><code>On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use ""git push"" to publish your local commits)

Changes not staged for commit:
    deleted:    favicon.ico
    deleted:    logo192.png
    deleted:    logo512.png
    deleted:    z&lt;

no changes added to commit
</code></pre>

<pre><code>git push
</code></pre>

<p>Result:</p>

<pre><code> ! [rejected]          master -&gt; master (fetch first)
error: failed to push some refs to 'https://github.com/aa
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>and then <code>npm run deploy</code></p>
","3","","",""
"60548842","12810581","2020-03-05 15:28:56","0","37","<git><github><git-commit>","How can i delete a commit on github which i committed 3 days before without losing later data?","<p>I committed some file 3 days before but now i want to remove that commit(or delete files included in that commit specifically if possible) without losing any data after or before that date.if that's possible please Help.
Thanks!!</p>
","0","12810581","",""
"41611216","135829","2017-01-12 10:49:58","2","545","<git><hash><naming-conventions><git-commit>","How to convert a Git commit hash to a more readable and easy-to-memorize form?","<p>I put a git commit hash into each project build automatically, it looks like this:</p>
<pre><code>0ba74ab23528b122923e83b5a7c6d2ce2e5a9313
</code></pre>
<p>It can hardly be easily read and remembered by a developer.</p>
<p>I have an option to use a short version of the commit hash that looks like this:</p>
<pre><code>0ba74ab
</code></pre>
<p>Which looks better but there is still room to make it more readable and easy to memorize.</p>
<p>I think about generating a human-readable name for the hash which could be remembered and more or less stably mapped to a unique hash.</p>
<p>It could look like a string generated from a set of predefined strings with some suffix, like this:</p>
<pre><code>drunk-coala-83
empty-pockets-95
</code></pre>
<p>Or just a synthetic vocable word like this:</p>
<pre><code>jimakrow
</code></pre>
<p>As the project is not large and used only by me and a couple of my teammates, I can easily integrate it.</p>
<p>Is this technique used somewhere in projects? How can I tackle this problem so that to keep git workflow unaltered. Where should I start with this problem?</p>
","2","135829","",""
"60822693","3195596","2020-03-23 22:57:01","-1","22","<composer-php><version><updates><git-commit>","Can composer display git commits while in stable mode?","<p>When running <code>composer update -v</code> in a project with <code>""minimum-stability"": ""dev""</code>, we can see the latest commits to the package being updated:</p>

<pre><code>composer update -v
...
Extracting archive  - Updating organization/project (v1.0.0 =&gt; v1.0.1):  Checking out hash3
    Pulling in changes:
      hash3 - Contributor #1: Improve service
      hash2 - Contributor #2: Improve SQL query
      hash1 - Contributor #3: Hotfix service
</code></pre>

<p>This is helpful because it gives us some hints on what code was changed.</p>

<p>However, now that our project is in <code>""minimum-stability"": ""stable""</code> mode, when running <code>composer update -v</code>, we can no longer see the latest commits to the package being updated:</p>

<pre><code>composer update -v
...
Updates: organization/project:v1.0.2
 - Updating organization/project (v1.0.1 =&gt; v1.0.2): Downloading (100%)
</code></pre>

<p>No git commits are shown. We have tried using <code>composer update -vv</code> and <code>composer update -vvv</code> to no avail.</p>

<p>Therefore, is it possible to still show git commits when updating a package while in stable mode?</p>
","0","3195596","",""
"22994233","1560517","2014-04-10 16:51:06","1","263","<git><version-control><git-branch><git-commit>","Git Commit to New Branch","<p>Based on the git documentation, if I want to save my changes to a new branch the standard produce is</p>

<pre><code>1) git branch new_branch (assuming the branch hasn't been created)
2) git checkout new_branch
3) write new code
4) commit, and it automatically gets put in the new branch
</code></pre>

<p>But what if I did things in this order</p>

<pre><code>1) write new code
2) git branch new_branch
3) ???
</code></pre>

<p>How do I now save that new code to the new branch?</p>
","0","1560517","",""
"44890563","7945425","2017-07-03 16:46:30","-1","69","<git><bitbucket><git-commit>","How to setup git on ubutu server?","<p>I want to configure git on ubutu server and commit our source code using shell command.</p>

<p>Thanks   </p>
","2","7945425","",""
"8470547","140330","2011-12-12 06:12:38","123","316831","<git><git-commit>","Git commit -a ""untracked files""?","<p>When I do a <code>git commit -a</code>, I am seeing the following: </p>

<pre><code>  # Please enter the commit message for your changes. Lines starting
  # with '#' will be ignored, and an empty message aborts the commit.
  # On branch better_tag_show
  # Changes to be committed:
  #   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
  #
  # modified:   ../assets/stylesheets/application.css
  # modified:   ../views/pages/home.html.erb
  # modified:   ../views/tags/show.html.erb
  # modified:   ../../db/seeds.rb
  #
  # Untracked files:
  #   (use ""git add &lt;file&gt;..."" to include in what will be committed)
  #
  # ../assets/stylesheets/
  # ../views/pages/
</code></pre>

<p>What does those untracked files mean? All the changes have been indeed tracked. I don't understand why git is warning me about untracked files here. </p>

<p><strong>EDIT</strong>:</p>

<p>Ok I see a lot of confused replies. This is what happens after I <code>git commit -a</code> this.</p>

<pre><code># On branch master
nothing to commit (working directory clean)
</code></pre>

<p>As you can see, there is NOTHING other than those four files that had changes applied.</p>

<p>My question should be rephrased as follows: <strong>Why is git warning me about untracked files when all of the changes in this commit has been tracked?</strong> </p>

<p>In other words, <strong>is the untracked warning in the git commit message <em>unnecessary</em>?</strong></p>
","9","140330","0","0"
"45205404","7191539","2017-07-20 04:48:22","9","1809","<git><github><git-commit>","git push rejected, merge conflicts, git pull --rebase","<p>I'm trying to push my commit, but couldn't since there is another commit (same-level in the HEAD race :) </p>

<p>I know I need to merge those two commits together, not exactly sure how to do it.<br>
I already tried <code>git pull --rebase</code>. </p>

<p>My <a href=""https://i.stack.imgur.com/7eDAE.png"" rel=""nofollow noreferrer"">GIT-CLI</a>:</p>

<p><a href=""https://i.stack.imgur.com/7eDAE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7eDAE.png"" alt=""git cli""></a></p>
","0","7191539","0","0"
"63702763","10823","2020-09-02 09:35:28","0","243","<git><git-commit>","Light and fast Git Export and fetch commit-id","<p>How does one export a remote git repository to a local space, only taking the head revision of a given branch, and then for each exported file, acquire the commit-id of that file?</p>
<h2>What I have tried so far</h2>
<p>Execute this:</p>
<pre><code>git clone {gitUrl} {repoDir} --branch {branch}
</code></pre>
<p>And then for each thusly exported file (ignoring .git and contents), execute this:</p>
<pre><code>git rev-list -1 HEAD {file}
</code></pre>
<p>... where the following place-markers are defined this way:</p>
<ol>
<li><code>{gitUrl}</code> is the http url of the repository. User credentials can be embedded.</li>
<li><code>{repoDir}</code> is the path of the export in your local system.</li>
<li><code>{file}</code> is the full path of the exported file that you are extracting the commit id for.</li>
</ol>
<p>While this works, the problem is that it is too slow and inefficient. The git clone operation includes the whole history of the repo for that branch. Whereas we are only interested in the HEAD version and its meta data.</p>
<p>Alternatively, we could perform the export with:</p>
<pre><code>git clone {gitUrl} {repoDir} --branch {branch} --depth 1
</code></pre>
<p>This is more efficient, as it just pulls down the HEAD version. But the problem with this, is that the subsequent <code>git rev-list -1 HEAD {file}</code> command will return the commit-id of the HEAD as a whole, and not the file's commit-id.</p>
<p>Can I have my cake and eat it too?</p>
","0","10823","",""
"26600506","90096","2014-10-28 03:37:34","9","1271","<git-commit><git>","Git: restore my changes which were amended to merge commit","<p>I accidentally amended merge commit instead of creating new one. Now I don't know how to extract the changes to normal commit which I can push. The changes will show up in gitk, but will not appear in format-patch. Please, help.</p>
","4","90096","0","0"
"45226207","4429104","2017-07-20 22:29:16","1","657","<c#><git><tfs><git-commit><tfs-workitem>","How can I programmatically link a commit to a work item in TFS? (need second GUID in LinkedArtifactURI)","<p>I am attempting to programmatically link a commit to a work item in TFS and I think I'm close. When creating a new <a href=""https://msdn.microsoft.com/en-us/library/microsoft.teamfoundation.workitemtracking.client.externallink(v=vs.120).aspx"" rel=""nofollow noreferrer"">ExternalLink</a>, I'm struggling to form the <code>LinkedArtifactUri</code> property. I can run a simple query for a work item to see this property should like something like the following:</p>

<p><code>""vstfs:///Git/Commit/ef43137b-a906-47b1-8dd4-0438b26c20c4%2fd211ee62-075d-4419-9d0b-cb58b76ae9dd%2fedfe1d438a77c2a95afa30e625f5dabe2656dea0""</code></p>

<p>So I set out to determine where the GUIDs in this string come from and I was able to figure out the first two, but am currently stumped on the last one. The first GUID is the project ID (retrievable by doing something like <code>_store.Value.Projects[TEAM_NAME].guid</code>. The second is the Git Repo ID. Can someone please inform me as to what the third GUID might be?</p>

<p>Here is my code that should work if I can figure out where to get that last GUID:</p>

<pre><code>var item = _store.Value.GetWorkItem(165464); //work item id #
var gitRepoService = _projectCollection.GetService&lt;GitRepositoryService&gt;();
var gitProjectRepoService = gitRepoService.QueryRepositories(""TEAM_NAME"");
var defaultGitRepo = gitProjectRepoService.Single(gr =&gt; 
gr.Name.Equals(""REPO_NAME""));

var gitGuid = defaultGitRepo.Id;

var proj = _store.Value.Projects[""TEAM_NAME""];
var id = proj.Guid;

var linkToAdd = new ExternalLink(_store.Value.RegisteredLinkTypes[ArtifactLinkIds.Commit], $""vstfs:///Git/Commit/{id}%{gitGuid}%{Where_does_this_guid_come_from}"");
item.Links.Add(linkToAdd);
item.Save();    
</code></pre>

<p>Thank you very much for your time. Please let me know if I am being unclear or if you need anything else from me.</p>
","3","4429104","",""
"41057333","4849865","2016-12-09 09:41:46","3","5072","<github><git-commit><pull-request><git-fork>","Git how to pull only some commits","<p>I have some commits that i have made to my own forked repo from the master, now I would like to create a pull request for only some of my commits (some are reverted in my repo). I don't want to clutter up the pull request with my unnecessary commits, what should I do.</p>
","0","4849865","",""
"41063296","1833945","2016-12-09 15:05:29","-1","1083","<git><intellij-idea><ide><git-commit>","How can I change the textual comment of my last GIT commit using IntelliJ? (I think that is the commit --amend operation)","<p>I am using GIT on IntelliJ and I have the following problem.</p>

<p>I have done a commit with a wrong text message (I have commited it into my staging area but not pushed on the remote repository). I want to change it. I thino that (from command line) I can change the comment of my last commit performing the command:</p>

<pre><code>git commit --amend
</code></pre>

<p>How can I do the same thing by the IntelliJ GIT tool?</p>
","1","1833945","",""
"41181942","4398050","2016-12-16 10:11:01","0","1004","<git><git-commit><commit-message>","git commit with template message","<p>is it possible to do a git commit and when the editor opens it is already filled with a message to be edited?</p>

<p>example:</p>

<p><code>git commit ""some string""</code></p>

<p>would open the text editor with ""some string"" that could be edited.</p>

<p>Use case: I have a git alias to commit work in progress (end of the day for instance) <code>git commit -m "":construction: WIP""</code> (yes, I use emojis on some commit messages), but I would like to add some extra details sometimes.</p>

<p>For the <a href=""https://git-scm.com/docs/git-commit"" rel=""nofollow noreferrer"">git documentation</a> there's:</p>

<ul>
<li>the <code>--message</code> flag but doesn't open the editor</li>
<li>the <code>--template=&lt;file&gt;</code> but it uses a message template from a file</li>
</ul>

<p>Any solutions?</p>
","0","4398050","",""
"60086817","5288560","2020-02-06 02:16:50","1","2019","<git><github><git-commit><git-pull>","Pull request contains my commits on other branch?","<p>i am aware of this changing branch base trick  and it's not working, from this question: <a href=""https://stackoverflow.com/questions/16306012/github-pull-request-showing-commits-that-are-already-in-target-branch"">GitHub pull request showing commits that are already in target branch</a></p>

<p>in my case, i am getting MY commits from other branch i work on before switching to a branch. How do i fix this?</p>
","0","5288560","",""
"22245446","119765","2014-03-07 08:51:08","1","473","<git><osx-mavericks><git-commit>","Git commit fails with no error","<p>I keep pulling these commands</p>

<pre><code>Macintosh:project david$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   cloud-hosting.html
#   modified:   complete-package.html
#   modified:   css/hosting-1.0.css
#   modified:   css/slider.css
#   new file:   domains.html
#   modified:   index.html
#   modified:   js/bootstrap-slider.js
#
Macintosh:project david$ git commit -m 'test git commit because git is broken' .
Macintosh:project david$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#   modified:   cloud-hosting.html
#   modified:   complete-package.html
#   modified:   css/hosting-1.0.css
#   modified:   css/slider.css
#   new file:   domains.html
#   modified:   index.html
#   modified:   js/bootstrap-slider.js
#
</code></pre>

<p>including every different permutation on <code>git commit</code> that I could find and nothing will let me <code>git push</code> - because it says 'everything up to date'.</p>

<p>I've tried GUI clients that say everything from 'a git error occurred' to 'git error: (null)' I don't even know how to get any further diagnostic information about my git actions...!</p>

<p>In terms of a 'clean system' I'm far from that, and I think this might have something to do with it -- I recently upgraded to mavericks, changed over my Xcode implementation and upgraded Xcode command line tools because Coda needed it (it couldn't find my old git client)</p>

<p>Does changing your git client change anything? (Should it)</p>

<p>Thanks </p>
","7","119765","",""
"22254300","2502723","2014-03-07 15:35:34","0","130","<git><git-commit>","How can I edit a previous commit and without erasing the commits ahead of it in git?","<p>I attempted to branch from a previous commit (not HEAD), but when I committed those changes, rather than keeping the change in the branch it obliterated my commits past that point in HEAD.  I can see how this could be useful, but I thought the point of a VC was to keep all commits forever so that you could always go back to a previous state if you wanted to.</p>

<p>How do I edit a previous commit and submit it without erasing the commits ahead of it on the master?</p>

<p>Thanks!</p>

<p>EDIT:</p>

<p><img src=""https://i.stack.imgur.com/YMg3v.jpg"" alt=""This is the image that lead me to believe my other changes had been deleted""></p>

<p>This is the image that lead me to believe my other changes had been deleted</p>

<p><img src=""https://i.stack.imgur.com/WGGM4.jpg"" alt=""Here are the hidden branches I thought had been deleted""></p>

<p>Here are the hidden branches I thought had been deleted.  Why does gitk not show the other branch(HEAD,master)</p>
","5","2502723","",""
"3824050","171428","2010-09-29 17:03:39","58","24040","<git><git-merge><git-commit><git-hash>","Telling if a Git commit is a Merge/Revert commit","<p>I am writing a script that requires checking whether a particular commit is a Merge/Revert commit or not, and I am wondering if there is a git trick for that.</p>

<p>What I came up with so far (and I definitely don't want to depend on the commit message here) is to check <code>HASH^2</code> and see if I don't get an error, is there a better way?</p>
","0","171428","0","0"
"41339117","673593","2016-12-27 04:44:47","3","650","<git><git-merge><git-rebase><git-commit>","Isn't git merge --squash really git rebase -squash?","<p>Trying to understand why the command</p>

<pre><code>git merge --squash mybranch
</code></pre>

<p>isn't called </p>

<pre><code>git rebase -squash mybranch
</code></pre>

<p>Since it seems the operation it does is much more like a rebase than a merge.  My understanding is it searches back in the commit tree until it finds a common base commit for the current branch and <code>mybranch</code>.  Then it reapplies (rebases) all the commits from that base node up to the head of <code>mybranch</code> onto the head of the current branch.  But does this into the index/workspace so it can be applied as a single commit.  When done there is no merge node as there is in a normal merge showing the two branches that were merged.  Do I have a correct understanding?</p>
","3","673593","0","0"
"41342494","6089536","2016-12-27 09:31:08","0","628","<git><command-line><bitbucket><atlassian-sourcetree><git-commit>","Git Commit without using command line","<p>I'm new in git and I'm using sourcetree on a bitbucket server. I created a repo and I can upload and commit files and folders with command line properly. </p>

<p>On sourcetree I can see all the branches and the uploaded files. Now I want to do all this stuff manually by drag and drop files in the specific folder, if I try to do that on sourcetree I get a message ""uncommitted file"". </p>

<p>I've already configured my mail and username by command line, maybe I have to configure other things?</p>

<p>So is there a way to upload file without using the command line?</p>
","1","6089536","",""
"41354938","1084174","2016-12-28 03:20:07","0","100","<git><version-control><commit><git-commit><git-log>","Git - Find which commits are local","<p><strong>How do I know which of local commits are not in remote?</strong></p>

<p>By, <code>git log</code> I see commit history, but I want to find if the last commit is already pushed into server or just a local one. Is there any way to know that without going to server and matching with local history?</p>
","1","1084174","",""
"41483125","7378726","2017-01-05 10:53:02","1","782","<git><github><git-commit>","Git commits with the incorrect name","<p>I have a personal account on GitHub and an organization. But my recent project is a personal project and not owned by my organization. Unfortunately my last commit is owned by my organization. I tried to change my name (<code>git config --global user.name ""YOUR NAME""</code>). But there's everything right. Why does Git commit with my organization name and how do I change this?</p>
","0","7378726","",""
"22576133","1305462","2014-03-22 10:05:01","2","1375","<git><git-commit><atlassian-sourcetree>","GIT cannot revert to prior commit - remote won't accept push","<p>I'm just starting with Git and I've got something that I need to reverse to a previous commit. I can do this locally no problem.</p>

<p>git reset --hard hashcode (or using sourcetree)</p>

<p>However when I try to push to bitbucket, souretree is gives me an error until I pull the previous commits down and I'm back where I started unable to revert to hte previous commit.l</p>

<p>How do I revert to a previous commit locally and then push to bitbucket overriding and removing all the commits that came after the one I'm reverting to?</p>

<p>The error message is:</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags origin Development:Development
Pushing to git@bitbucket.org:Username/project.git

To git@bitbucket.org:Username/project.git
 ! [rejected]        Development -&gt; Development (non-fast-forward)
error: failed to push some refs to 'git@bitbucket.org:Username/project.git'

hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
","4","1305462","0","0"
"22725469","718333","2014-03-29 00:31:25","5","1939","<git><git-commit>","Calculate time between git commits","<p>I would like to calculate the time between commits in git, this (I hope) will give me a rough measure of my productivity. Is this possible?</p>
","1","718333","",""
"60579091","7601359","2020-03-07 15:22:59","0","1244","<git><git-commit>","Cant remove commit from Master GIT","<p>I can't remove a commit from master. I tried lots of commands from stackOverflow, but nothing works.</p>

<p>Last command <code>git revert 655734672ea28811e0723981853f05cbcdda8ec8</code> just changed the commit. This how it looks now.  </p>

<pre><code>.............................................(master)
$ git log
commit ddd171a390ce613a87e7f4e00135b48a1b03c2ad (HEAD -&gt; master)
Author: pet......... &lt;fffffafafa@yahoo.com&gt;
Date:   Sat Mar 7 15:08:57 2020 +0000

    Revert ""adding jacoco-maven-plugin""
    This reverts commit 655734672ea28811e0723981853f05cbcdda8ec8.`
commit 655734672ea28811e0723981853f05cbcdda8ec8 (_D)
Author: pet.... &lt;petttttttt@yahoo.com&gt;
Date:   Sat Mar 7 13:42:48 2020 +0000

   adding jacoco-maven-plugin
</code></pre>
","6","7601359","",""
"4181861","426522","2010-11-15 06:09:10","3960","4134738","<git><git-commit><git-clone><git-add><git-refspec>","Message 'src refspec master does not match any' when pushing commits in Git","<p>I clone my repository with:</p>

<pre><code>git clone ssh://xxxxx/xx.git 
</code></pre>

<p>But after I change some files and <code>add</code> and <code>commit</code> them, I want to push them to the server:</p>

<pre><code>git add xxx.php
git commit -m ""TEST""
git push origin master
</code></pre>

<p>But the error I get back is:</p>

<pre class=""lang-none prettyprint-override""><code>error: src refspec master does not match any.  
error: failed to push some refs to 'ssh://xxxxx.com/project.git'
</code></pre>
","18","426522","0","0"
"60590190","7078456","2020-03-08 17:31:12","1","73","<git><github><git-commit>","How can I see commit pushed in different branches together?","<p>I want to list down last commits which were made in different branches together. ie. I want to see the branch name, even if I've forgotten in some cases.</p>

<p><strong>Scenario =></strong> Let's take - I was working in 3 different branches in a single day &amp; I wanted to see what last commits I have made in all those 3 branches together ie. - Not by mentioning any branch name.</p>

<p>I can get all commits pushed in a particular branch with this command -</p>

<pre><code>git log mybranchName
</code></pre>

<p><strong>Is there any provision which can give me result like -</strong> </p>

<p>Branch <code>login</code> => <code>commit: Added form design.</code></p>

<p>Branch <code>register</code> => <code>commit: Registration module completed.</code></p>

<p>Branch <code>master</code> => <code>commit: Release v1.0.0</code></p>

<p><strong>Note -</strong> Not just 3 branches, It should be a flag to get how many of the last branches I wanted to list down. The only purpose is to list down the branches in which I am working on without jotting down it.</p>

<p>Also happy if any flag can help me to achieve this. 🙂</p>
","4","7078456","0","0"
"48506419","1506850","2018-01-29 17:03:33","0","27","<git><branch><git-commit><git-add>","committing a file to another branch","<p>I have a project managed with git with multiple active branches.
e.g. <code>feature1, feature2, feature3,..., master</code></p>

<p>I was working <code>feature1</code>: I have created files, made modifications, committed and pushed my changes to <code>remote feature1</code>.</p>

<p>Now I have realized one of the modifications (edited file <code>x.x</code>) on this branch would be very useful on <code>feature2</code> as well.
However, if I  <code>checkout feature2</code> <code>x.x</code> is not there so I can not commit it in this branch.</p>

<p>What is the clean way to get <code>x.x</code> on <code>feature2</code>, without having to merge  <code>feature1</code> into <code>feature2</code>?</p>
","3","1506850","",""
"30957561","525169","2015-06-20 18:38:18","3","795","<git><git-push><git-commit>","git: What is the ""right way"" to fix an incorrect pushed commit message","<p>I wrote an incorrect commit message, and I've pushed it to the remote. There are no small number of questions that already deal with this:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/179123/edit-an-incorrect-commit-message-in-git"">How to modify existing, unpushed commits?</a></li>
<li><a href=""https://stackoverflow.com/questions/5032374/accidentally-pushed-commit-change-git-commit-message"">Accidentally pushed commit: change git commit message</a></li>
</ul>

<p>are just a couple. But they all seem to terminate with <code>git push --force</code>, and the additional warning about why this is a bad idea - it edits the history, which means that everyone else who uses the repository suffers when they try to pull. They don't seem to say what the ""right"" thing to do is.</p>

<p>So what's the recommended or ""correct"" way to deal with this situation? I thought I could add an extra message with <code>git commit --allow-empty</code>, but supposedly there is ""<a href=""https://stackoverflow.com/a/12470056/525169"">rarely a good reason to do this</a>"". Is <code>--allow-empty</code> indeed the right way to fix things? If not, what <em>is</em> the right way?</p>

<p><strong>Note</strong>: Doing things the ""right way"" can involve ""admitting I screwed up"". As an example of what I'm looking for, the <code>git tag</code> man page has a <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-tag.html#_on_re_tagging"" rel=""nofollow noreferrer"">discussion on retagging</a> pushed tags. It clearly discusses methods to re-tag incorrectly tagged commits, giving both a recommended course of action and a <code>--force</code>-ish way of doing things.</p>
","5","525169","0","0"
"66843980","10252177","2021-03-28 17:04:43","3","1894","<git><security><digital-signature><git-commit><gnupg>","Resign previous Git commits with a new GPG key","<p>I am trying to transition to a new GPG key. I would like to re-sign all of my previous commits in a Git repository (that have a <em>valid signature with my formerly used key</em>) with the new GPG key.</p>
<p>In other words, how can I automatically resign (with my new key) all of the commits that I signed with my previous key?</p>
<p>If you need key fingerprints to use in your example, please use <code>0000000000000000000000000000000000000000</code> as my old GPG key fingerprint and <code>1111111111111111111111111111111111111111</code> as my new key fingerprint.</p>
","0","10252177","0","0"
"66845557","15501470","2021-03-28 19:46:19","1","141","<git><timestamp><git-commit>","Is there a way to see the original Git commit time after changing it?","<p>I have a college project due at 11:59pm that needs a git repository be handed in. I don't want whoever is marking my assignment to see I started on the day it's due so i used the <a href=""https://github.com/PotatoLabs/git-redate"" rel=""nofollow noreferrer"">git-redate</a> tool to set my commits back about a week ago. Is there any way that the marker can see that I changed the date or see the original date? I'm sorry English is not my first language.</p>
","4","15501470","0","0"
"30973287","3457012","2015-06-22 06:25:47","1","130","<git><github><git-commit><git-add><git-init>","Can git ever send your code to a repo that isn't yours?","<p>Can running </p>

<pre><code>git add .
git commit -m ""message""
</code></pre>

<p>in a git repo which you've initialized using</p>

<pre><code>git init
</code></pre>

<p>ever result in your code being sent to a repo that is not yours? I am concerned because I did this while not logged in to my git hub account.</p>
","6","3457012","0","0"
"30983500","2659898","2015-06-22 15:08:07","20","12579","<git><git-commit><git-detached-head>","How to save changes when in detached-head state?","<p>Working with Git, I had to go back to a specific commit. I made some changes and I now want to commit them. What is a proper way of doing this? </p>

<p>My project is now in detached-HEAD state. Will my changes be saved if I make a commit with</p>

<pre><code>git commit
</code></pre>

<p>? Otherwise, what should I do to not lose my changes?</p>
","6","2659898","0","0"
"66870294","11472162","2021-03-30 11:39:57","6","3095","<git><gitlab><git-commit>","Link another commit's reference in commit message gitlab","<p>I know we can mention issue in commit messages as'#issue_no', but is it possible to link it to another commit in gitlab?</p>
<p>either mention commit SHA or complete commit URL in the commit message?</p>
","0","11472162","0","0"
"30998033","4824577","2015-06-23 08:48:36","0","141","<git><tags><git-commit>","GIT Tag not on current commit","<p>What I want to achieve is to commit changes and tag current commit, for this I did </p>

<pre><code>git add &lt;my stuff&gt;

git pull origin master
</code></pre>

<p>1st Commit</p>

<pre><code>git commit -m &lt;message&gt;

git push origin master

git tag -a -f -m &lt;message&gt; &lt;Tag_Name&gt; 
</code></pre>

<p>and then</p>

<pre><code>git push origin &lt;Tag_Name&gt;
</code></pre>

<p>Every thing works fine and commits take place.</p>

<p>But issue is that tag is pushed on a previous commit than that of which I created just before pushing the tag. I can clearly see it in GIT Blit browser and compare the files for the respective commit.</p>

<p>Am I missing something? or how can I manage to synchronize tag with commit?</p>
","2","4824577","0","0"
"31008675","421949","2015-06-23 16:44:18","0","64","<git><git-commit>","Move the commit from username to another?","<p>I've recently modified my git username. I was wondering if there is a way to move my commits under my old username to the new one?</p>
","3","421949","",""
"66905485","11480918","2021-04-01 13:32:48","2","230","<git><git-commit><git-log>","Git Log Multiline Output","<p>I'm trying to get git log to output the <strong>full commit message</strong> in a <strong>multi-line</strong> format or with placeholder characters so that I can replace them later.</p>
<p>I would like the output including the id, author, date and multi-line message of the commit to be in a xml or json format.</p>
<p>I am using batch, since i want to run the snippet on VisualStudio prebuild.</p>
<p>Thanks in advance!</p>
","2","11480918","",""
"31049728","2265943","2015-06-25 11:57:34","2","1520","<git><github><commit><git-commit>","remove commits from contributor","<p>I have a Git repo with a lot of old commits from a contributor. Those commits do in no way influence the current version of the repo. I would like to remove all the commits from that contributor. How to proceed?</p>

<p>Thanks!</p>
","3","2265943","0","0"
"66935004","13891097","2021-04-03 19:16:43","1","2459","<git-commit><git-config>","fatal: unable to auto-detect email address (got 'M S@folder.(none)')","<p>i just not able to add file on github using git bash</p>
<p>error message :</p>
<pre><code>fatal: unable to auto-detect email address (got 'M S@folder.(none)')
</code></pre>
<p>i tried this command:</p>
<pre><code>git commit -m &quot;first commit&quot; filename
</code></pre>
<p>any help ?</p>
","4","13891097","",""
"31063684","3362420","2015-06-26 01:57:27","12","1363","<git><git-commit>","Display the Authors and commit message for commits that cause a conflict","<p>I have two long-running branches <code>dev</code>, and a far future release called <code>future</code> .  We create fixes for the supported release by branching from the tag that exhibits the bug, fix it, and then open pull-requests to the two branches. If there is a conflict in the 'future' branch, our developers are suppose to create a new branch, resolve the conflicts, and open another PR to future.</p>

<p>Unfortunately, our team is large enough that plenty of these second PRs haven't been made.  I need to now figure out which exact commits caused conflicts.  I can do this manually by running git blame on each conflicted file, and seeing the commits on each side of the <code>======</code> line, but that doesn't actually give me enough information, and I have to manually run git blame for every conflict and every file.</p>

<p>Is there an easier way?  Ideally, I'd want something equivalent to:</p>

<pre><code>Commit X: &lt;coworker1&gt; I updated something.
Commit Y: &lt;coworker2&gt; Something fixed.
Conflicts: 
   some/file/here
   a/different/file.
</code></pre>

<p>for every single conflict.</p>

<p>Though anything that just gives me the list of conflicting commits would be useful enough to warrant the bounty.</p>
","0","3362420","0","0"
"31066005","2891692","2015-06-26 06:03:07","0","2645","<git><github><git-push><git-commit><atlassian-sourcetree>","SourceTree: dst ref refs/heads/master receives from more than one src","<p>I don't understand this git (sent via SourceTree) error, and I have no idea why it is happening. I simply commit to my own repository, working alone on the project. What could i try to do?</p>

<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags origin master:master using_php_inside:master
Pushing to https://github.com/sl5net/SL5_AHK_Refactor_engine
error: dst ref refs/heads/master receives from more than one src.
error: failed to push some refs to 'https://github.com/sl5net/SL5_AHK_Refactor_engine'
</code></pre>
","1","2891692","",""
"50353511","236081","2018-05-15 15:02:52","4","1171","<git-commit>","Is there a Git config setting to auto-signed-off-by my commits?","<p>In some repos I want to always include ""signed-off-by"" messages in my commits (<code>git commit -s</code> not <code>git commit -S</code> which is for a cryptographic signature). Is there a <code>.gitconfig</code> value I can set to make this happen (so I can just type <code>git commit</code> instead of <code>git commit -s</code> every time)?</p>
","0","236081","0","0"
"66943401","11556211","2021-04-04 16:22:41","0","47","<git><commit><git-branch><git-commit><branching-and-merging>","git commit -a -m gives error for file not being tracked","<p>I am learning to work with git and I'm playing around with branching.
I created a file &quot;test.rb&quot; and committed a version on a 'testing' branch.</p>
<p>Being on 'master' I use <code>git commit -a -m 'msg'</code> and get this message:</p>
<pre><code>On branch master
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        test.rb

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>I cannot understand why, since the '-a' flag should add everything to staging and commit it.</p>
<p>What am I missing?
Thanks !</p>
","2","11556211","",""
"14154524","739331","2013-01-04 09:35:39","22","13439","<git><git-commit><git-log>","Your branch is ahead of 'origin/master' by X commits. How to find the X commits?","<p>I was checking the X commits using the following command:</p>

<pre><code>git log --author=&lt;my-name&gt; -&lt;X&gt;
</code></pre>

<p>But the problem is that I accidentally pulled code from another repository and added the commits from the repository to my local git repository.</p>

<p>So I cannot use the above command since the new commits contains some other authors.</p>
","5","739331","0","0"
"15647221","2043758","2013-03-26 20:55:38","39","38968","<github><git-commit>","How to find the branch from commit id","<p>So, I am trying to find branch name in which a given commit was made. (<code>c853d8cf3ae34dae9866b874b96c6529515d7e90</code>)</p>

<p>I have the parent id and commit id referenced on the git issue.<br>
How can I find that given commit id was pushed in '<code>x</code>' branch?</p>
","2","2043758","0","0"
"15648700","2059238","2013-03-26 22:35:24","1","66","<git><version-control><github><git-push><git-commit>","Multiple unpublished commits - Unable to publish any. What's wrong?","<p>So I'm using GitHub for Windows. And I have 4 unpublished commits (all 4 are the initial 4 commits). So technically, the repo hasn't been created yet on my GH account. To clarify, here's the commit history:</p>

<p><img src=""https://i.stack.imgur.com/hjOgA.png"" alt=""enter image description here""></p>

<p>When I try to publish any of them, I get an error that:</p>

<p><img src=""https://i.stack.imgur.com/a0UHs.png"" alt=""enter image description here""></p>

<p>When I <code>git status</code>, I get this:</p>

<p><img src=""https://i.stack.imgur.com/WfFKr.png"" alt=""enter image description here""></p>

<p>Any one can help me, please?</p>
","0","2059238","",""
"15658832","1637508","2013-03-27 12:30:34","1","1046","<git><git-commit>","how to cancel a commit in Git","<p><img src=""https://i.stack.imgur.com/8FTrs.png"" alt=""enter image description here""></p>

<p>I want to <strong>cancel the blue commit</strong><br>
Is there a effective way to do it???<br>
Thanks!</p>
","2","1637508","0","0"
"48661982","8356121","2018-02-07 10:52:40","0","120","<git><github><git-commit>","Commit in git with different user","<p>I am using git in a enterprise server and git has a specific user configured in config files. My user in git has permission to make changes in git repository, but I would like to be able to do git commit with my user because I don't know the password of configured user.</p>

<p>How can I do that? For example, I can do a pull with next command: </p>

<pre><code>git pull https://myusername@github.com/projectfolder/projectname.git master
</code></pre>

<p>Thanks beforehand.
Mike.</p>
","0","8356121","",""
"48677606","1746118","2018-02-08 04:34:52","0","501","<git><github><git-commit><git-push>","Unable to push to forked repo using git commit and push using a script","<p>I have forked a repository on GitHub and clone the forked repository to my local with following <strong><code>.git/config</code></strong> :</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
        ignorecase = true
        precomposeunicode = true
[remote ""origin""]
        url = git@github.com:namannigam/commons-io.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
        remote = origin
        merge = refs/heads/master
[remote ""upstream""]
        url = git@github.com:apache/commons-io.git
        fetch = +refs/heads/*:refs/remotes/upstream/*
</code></pre>

<hr>

<p>Now that I have a script formulated(indented for question readability) for such repositories to be in sync with the upstream and pushing my latest code to the server (my forked branch) with something like this :</p>

<pre><code>cd $d # traverse directory
&amp;&amp; git checkout master # checkout the master branch of my fork
&amp;&amp; git fetch -a # fetch all the branches
&amp;&amp; git fetch upstream # https://help.github.com/articles/syncing-a-fork/ 
&amp;&amp; git pull upstream master
&amp;&amp; git merge upstream/master
&amp;&amp; git commit -am ""`date`"" #commit the current code 
&amp;&amp; git push origin master #push the code to the master of my fork
</code></pre>

<p>The challenge that I am facing is that the push to my origin/master doesn't succeed with the above script. On the other hand, if I execute all the commands sequentially on the command prompt it works.</p>

<hr>

<p>What I noticed was that the <em>combination of commit and push is making it difficult</em> for me to execute the script since the behavior is same as when executing the following separately on the command line from project directory :</p>

<pre><code>git commit -am ""`date`"" &amp;&amp; git push origin master  #results into no push
</code></pre>

<hr>

<p>If in case it may matter: </p>

<pre><code>git --version =&gt; 2.16.1
</code></pre>

<hr>

<p>On-demand sample logs against the above script commands for one of the projects :</p>

<blockquote>
<pre><code>Already on 'master'
Your branch is up to date with 'origin/master'.
remote: Counting objects: 350, done.
remote: Compressing objects: 100% (120/120), done.
...
From github.com:dropwizard/dropwizard
   4db822962..3f9cf2253  master     -&gt; upstream/master
 * [new tag]             v1.3.0-rc5 -&gt; v1.3.0-rc5
From github.com:dropwizard/dropwizard
 * branch                master     -&gt; FETCH_HEAD
Updating 4db822962..3f9cf2253
Fast-forward
 docs/pom.xml                                                 |  2 +-
 .... # list of files wiht lines changed
++++++++++-----------
 49 files changed, 147 insertions(+), 116 deletions(-)
Already up to date.
On branch master
Your branch is ahead of 'origin/master' by 21 commits.
  (use ""git push"" to publish your local commits)

nothing to commit, working tree clean
</code></pre>
</blockquote>
","2","1746118","",""
"32229870","2696258","2015-08-26 14:49:34","3","719","<git-commit><git-reset><git-revert><git>","Reverting accidentally commited changes on mainline, back to what is in the main repository on git","<p>I am working a project, and noob to git architechture. I have accidentally commited a few changes to mainline, now I want to revert them back to what is in the main repository. </p>

<p>Now I am on a new branch, but those commits are still there in the mainline branch. How do I do that?</p>

<p>And what exactly is HEAD, I am very much confused.</p>

<p>There are 3 commits i need to revert. So for one of them I did               ""git revert "". Now when I do ""git revert HEAD~3"" it shows I need to merge changes and commit n all. But I dont want those changes, that is why I reverted.</p>

<p>I might sound very foolish and confusing, but I am very new to this, and dont want to loose any changes, as its a very crucial project and rather dont want to mess up the mainline branch as well.</p>
","2","2696258","",""
"67016485","2181056","2021-04-09 07:02:12","1","155","<git><git-commit>","restore git latest commit from local computer","<p>I created my code on local computer.</p>
<p>Once I pushed the code to git server.</p>
<pre><code>git add -A
git commit -m &quot;test&quot;
git push -u ...
</code></pre>
<p>After that on the same branch I made lot of changes, and than did commit</p>
<pre><code>git add -A
git commit -m &quot;test&quot;
</code></pre>
<p>The commit succeeded, but I instead of push I did</p>
<pre><code>git checkout master
</code></pre>
<p>Then I realized I didn't push the code, so I did</p>
<pre><code>git checkout mybranch
</code></pre>
<p>I realized again that the checkout I did was from the git server, and I didn't see code of mine, even I did commit.</p>
<p>I know that commit is kept on my local computer, but is my latest changes gone?</p>
<p>How can I restore the latest changes of mine?</p>
<p>Thank you in advanced.</p>
","1","2181056","0","0"
"67019717","15590871","2021-04-09 10:48:54","0","1824","<github><git-commit><pull-request><branching-and-merging>","Can't push commits to Pull Request in GitHub","<p>I set up an private free github repo to work on a project with my friends. I set up a branch protection rule as you can see in listing 1. So when I want to push new commits to my pull request I get an error.</p>
<pre><code>remote: error: GH006: Protected branch update failed for refs/heads/neo-14-block-prefab-hp-system.        
remote: error: At least 1 approving review is required by reviewers with write access.        
error: failed to push some refs to 'git@github.com:robinsadeghpour/nogame_prototypes.git'
To github.com:robinsadeghpour/nogame_prototypes.git
!   refs/heads/neo-14-block-prefab-hp-system:refs/heads/neo-14-block-prefab-hp-system   [remote rejected] (protected branch hook declined)
</code></pre>
<p>How can I enable pushing commits to my open pull request?</p>
<p><a href=""https://i.stack.imgur.com/aYMPV.png"" rel=""nofollow noreferrer"">branch protection rule</a></p>
","0","15590871","",""
"48698704","9092138","2018-02-09 04:23:35","5","4106","<git><gitlab><git-commit>","Gitlab remove old commits","<p>I have cloned a repo from gitlab. Without removing the .git folder i have worked and edited the cloned project and done certain commits.Now my gitlab has old commits as well as my commits .Is there any way to remove old commits and maintain my commits only.?Thanks</p>
","4","9092138","0","0"
"48699317","6610946","2018-02-09 05:34:18","1","16279","<github><git-commit><git-amend>","What is a comment in commit_editmsg in github","<p>I have spent a long time reading and trying to figure out git commit --amend, but I still do not understand how the # are used in the editmsg.</p>

<p>I am worried to edit this without knowing what I am doing because I have read that git commit --amend only does the most recent commit,and once I save and exit , it will be counted as a new commit.</p>

<p>I have accidentally committed and pushed (but the push failed) some large files.  But I have also written scripts that were supposed to be pushed from the same commit as the large files.</p>

<p>I am trying to delete the lines with the large files in the new commit , but I don't understand how to do this. </p>

<p>This is my commit file below, but I don't understadn if I should delete the lines with the # (I tried this but it didn't work , and the git log is the same ): </p>

<pre><code>the commit message of the one I want to change is here but I don't want to just change the message, I want to delete the large files in the commit so that the push works.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# Date:      Thu Feb 8 18:30:32 2018 -0900
#
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use ""git push"" to publish your local commits)
#
# Changes to be committed:
#   new file:   script.py
#   new file:   super_large_file.npy &lt;--- I deleted this line but it appeared again, it is becuase deleting a line with # is ignored?  Do I just rewrite the stuff after the # lines? 
</code></pre>

<p>My question is , why does deleting the line of the large file (including the # ) not work and the commit remains still wanting to push the large file?</p>

<p>Should I just rewrite the commit file without the # ? But I also read that git takes away the # , so I am confused</p>
","0","6610946","0","0"
"31164479","3472065","2015-07-01 14:39:27","1","2324","<git><bash><date><git-commit>","With GIT show commits older than a specific date with specific format","<p>I need to print the latest 10 commits that are older than a specific date with specific format. I need to handle the date, obtained through the bash command:</p>

<pre><code> date +""%Y%m%d%H%M""
</code></pre>

<p>I tried some options, but so far nothing</p>

<pre><code>e.g.: git log -5 --no-merges --format=format:%cd --after=201506301524
</code></pre>
","1","3472065","0","0"
"15745045","417629","2013-04-01 14:11:34","1053","1904810","<git><git-commit>","How do I resolve git saying ""Commit your changes or stash them before you can merge""?","<p>I made some updates on my local machine, pushed them to a remote repository, and now I'm trying to pull the changes to the server and I get the message;</p>
<pre><code>error: Your local changes to the following files would be overwritten by merge:
wp-content/w3tc-config/master.php
Please, commit your changes or stash them before you can merge.
</code></pre>
<p>So I ran,</p>
<pre><code>git checkout -- wp-content/w3tc-config/master.php
</code></pre>
<p>and tried again and I get the same message. I'm assuming that <code>w3tc</code> changed something in the config file on the server. I don't care whether the local copy or remote copy goes on the server (I suppose the remote one is best), I just want to be able to merge the rest of my changes (plugin updates).</p>
<p>Any ideas?</p>
","2","417629","0","0"
"31178662","3472065","2015-07-02 07:55:55","7","4323","<git><path><git-commit><git-log>","In git, obtain commits using git log with path","<p>I would like to obtain the last 10 commits using git log specifying the path of my repository. I used the option <code>-path</code> but I have &quot;is outside repository&quot; error</p>
<pre><code> git log --no-merges -10 -p /home/my_folder/git/repo

 fatal: /home/my_folder/git/repo: '/home/my_folder/git/repo' is outside repository
</code></pre>
<p>The comand is running for example in the folder /home</p>
","0","3472065","",""
"31182517","1112503","2015-07-02 10:50:10","2","36","<git><git-commit>","git - get result change from several non consequent commits","<p>Let's say I have the following history in my git repo:</p>

<pre><code>C (master)
x (origin/master)
B
x
A
x
</code></pre>

<p>A, B and C are commits that I am interested in, while x are some other changes (may be more than 1 commit). I would like to know what result change was performed by commits A, B and C ignoring any other changes that were done by other commits in between.</p>

<p>Is it possible to do so?</p>
","0","1112503","0","0"
"32242240","2589224","2015-08-27 06:33:32","4","3361","<github><properties><teamcity><push><git-commit>","Is it possible to push changes to a VCS root in Team City?","<p>As the title says, </p>

<p>I am currently running a build in Team City where the VCS root is pointing to a github repo. I would like to run this build where it also updates property files within my github repo. I have only found ways to publish artifacts to Team City, but has anyone been able to commit and push from Team City to their VCS root?</p>

<p>Thank you very much in advance.  </p>
","0","2589224","0","0"
"14277428","318280","2013-01-11 11:39:51","2","1040","<git><signing><git-commit><git-tag>","How to verify the author of each commit in git","<p>I'm studying a migration from subversion to git. For starters, a central-repository scheme will be used, just like svn.</p>

<p>The problem is that I want to make sure each commit was created by the real person.</p>

<p>In subversion, assuming you <strong>don't</strong> cache your svn password, you can be sure the commit author is the real author.</p>

<p>From what I read after countless searches on the net, I should create a <strong>signed tag every time I push</strong> the central repository. In order to sign the tag, I should review <strong>each</strong> of the previous commits, to make sure no one changed anything while I was away from the computer (for example introducing malicious code and removing it later, making it invisible in the overall diff, but still being executed in the continuous build/test server).</p>

<p>This means I have to double-check commits: first when I create each commit, and then again when I decide to push with a signed tag. But that is time consuming and redundant. If signed tags are the way to go, then I suppose I should be creating <strong>a signed tag for each commit</strong>. Which will fill the entire repository with tags. That doesn't sound quite right in my opinion.</p>

<p>The cleanest solution I can think of, is <strong>signing each commit</strong> (supported since <a href=""http://git.kernel.org/?p=git/git.git;a=blob_plain;f=Documentation/RelNotes/1.7.9.txt;hb=HEAD"" rel=""nofollow"">git 1.7.9</a>). But for some reason I don't understand, doing that is <a href=""http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-tp2582986p2583316.html"" rel=""nofollow"">totally stupid</a>. Supported by git, but still supposedly stupid.</p>

<p>What am I supposed to do? Waste time double-checking all commits and doing per-push tag-signing; or tag-signing every single commit; or sign every single commit? Is there an alternative I don't know about?</p>

<p>Thanks in advance.</p>
","0","318280","",""
"67610147","2416601","2021-05-19 20:04:18","0","61","<git><bitbucket><git-commit><git-checkout>","Instead of git checkout file one by one, checkout a whole commit","<p>I have a situation where I committed to a branch B1. In the commit I have several files. Now I want those files to be copied to a Branch B2.</p>
<p>Actually I am using the following command for each file in the commit on my current branch B2:</p>
<pre><code> $ git checkout B1 path/to/file1
 $ git checkout B1 path/to/file2
 ......
 $ git checkout B1 path/to/fileN
</code></pre>
<p>I guess that there should be a syntax that will allow me to directly checkout the specific commit from branch B1 to branch B2. I tried several solutions but they are rewriting the whole branch which I do not want, nor history of the all files. I only want the state of the file in the particular commit. Overwriting is not a problem.</p>
<p>How to achieve this ?</p>
","1","2416601","",""
"15794578","2238121","2013-04-03 17:57:26","1","4239","<git><bitbucket><repository><git-commit>","Smartgit error: ""Push Error Not all refs have been pushed""","<p>I am using Smartgit with a repository hosted from 'bitbucket.org'. </p>

<p>I got this error message:</p>

<blockquote>
  <p>Error Not all refs have been pushed</p>
</blockquote>

<p>And changes are not committed.  What does this error mean?</p>

<p>Here is the complete log for my latest action around this repo:</p>

<pre><code>LF will be replaced by CRLF in apps/frontend/modules/persona/templates/indexSuccess.php.
The file will have its original line endings in your working directory.
LF will be replaced by CRLF in apps/frontend/modules/persona/templates/indexSuccess.php.
The file will have its original line endings in your working directory.
LF will be replaced by CRLF in apps/frontend/modules/persona/templates/indexSuccess.php.
The file will have its original line endings in your working directory.
LF will be replaced by CRLF in apps/frontend/modules/persona/templates/indexSuccess.php.
The file will have its original line endings in your working directory.
LF will be replaced by CRLF in apps/frontend/modules/persona/templates/indexSuccess.php.
The file will have its original line endings in your working directory.
[master 3c24f17] Modificada la plantilla, añadidos enlaces para editar/eliminar
 1 file changed, 8 insertions(+), 6 deletions(-)
'master' rejected (non-fast-forward)
error: failed to push some refs to 'https://reynierpm@bitbucket.org/reynierpm/hisclinicas.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I tried the suggestion from @niculare I did a <code>git pull</code> but now I get these errors:</p>

<blockquote>
  <p>Rebase: rebase failed (return code 1)     Eliminados ficheros de BD
  antiguos e inservibles    # Please enter the commit message for your
  changes. Lines starting   # with '#' will be ignored, and an empty
  message aborts the commit.    # Not currently on any branch.  # You are
  currently rebasing.   #   (all conflicts fixed: run ""git rebase
  --continue"")  #   # Changes to be committed:  #   (use ""git reset HEAD ..."" to unstage)     #   # modified:   database.sql  # modified:<br>
  hisclinicas.sql   #   [detached HEAD 277cd27] Eliminados ficheros de BD
  antiguos e inservibles     2 files changed, 1155 deletions(-)      rewrite
  database.sql (100%)    rewrite hisclinicas.sql (100%)     Rebasing (3/10)
    Rebasing (4/10)     Rebasing (5/10)     Rebasing (6/10)     error: could not
  apply 7b8d48e... Eliminadas las tablas y los modulos ciudades y
  parroquias (se dejo solo en Estados -> Municipios)    When you have
  resolved this problem, run ""git rebase --continue"".   If you prefer to
  skip this patch, run ""git rebase --skip"" instead.     To check out the
  original branch and stop rebasing, run ""git rebase --abort"".  LF will
  be replaced by CRLF in
  lib/filter/doctrine/base/BaseHclinicaFormFilter.class.php.    The file
  will have its original line endings in your working directory.    LF
  will be replaced by CRLF in
  lib/filter/doctrine/base/BasePersonaFormFilter.class.php.     The file
  will have its original line endings in your working directory.    LF
  will be replaced by CRLF in
  lib/form/doctrine/base/BaseHclinicaForm.class.php.    The file will have
  its original line endings in your working directory.  LF will be
  replaced by CRLF in lib/form/doctrine/base/BasePersonaForm.class.php.
    The file will have its original line endings in your working
  directory.    LF will be replaced by CRLF in
  lib/model/doctrine/base/BaseHclinica.class.php.   The file will have
  its original line endings in your working directory.  Could not pick
  7b8d48e4229e423994f0cb6148bfb35c1e1c744d</p>
</blockquote>

<p>What does the error mean and how do I fix it?</p>
","4","2238121","",""
"67611111","1015560","2021-05-19 21:24:40","1","341","<git><azure-devops><git-commit>","How do I undo a git commit that made sitewide changes 7 commits earlier","<p>So I thoughtlessly used CodeMaid to reformat my work project. All it did was change the usings and remove blank lines. However the byproduct of it was to change the version dates on all files.</p>
<p>Now the Manager won't let me commit my branch, naturally enough, as all files have now been changed.</p>
<p>Is it possible to remove the one commit and have its changes cascade upwards undoing themselves? Or, as I have started to do, make a new branch below the commit and manually add in every change after it?</p>
","4","1015560","0","0"
"67617525","15109215","2021-05-20 09:19:17","0","718","<git><repository><commit><git-commit>","What to do about uncommitted changes","<p>I just migrated my files from the old PC to the new. That includes a few development git repositories.</p>
<p>But I guess because the files were copied, the datestamps are different, and so git is now seeing them as uncommitted changes, even though there are no other changes to the files.</p>
<p>What is the best thing to do about this, just commit the files or is there some git magic (commands) to tell git everything is OK?</p>
","8","15109215","",""
"67620532","8936551","2021-05-20 12:39:42","1","45","<git><github><git-commit><git-push>","Recently enabled 2fa for my github account failed to push the code and shows you don't have right access. (Able to clone the project)","<p>After enabling 2fa failed to push the code and shows you don't have right access. (Able to clone the project)</p>
<p>I can able to clone the project but failed to push the code in gitub repo. Recently I have enabled the 2fa for my github.</p>
<p>Any solution for this</p>
<pre><code>ERROR: Repository not found.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>
","10","8936551","0","0"
"15804349","536768","2013-04-04 06:49:36","0","787","<git><github><branch><git-commit><pull-request>","How to make a commit and pull-request on a branch in Github?","<p>Seems fairly easy I thought...</p>

<ul>
<li>I forked a repo called <code>abc</code> and cloned it locally. </li>
<li>The original repo I forked from has a branch called <code>2.1-stable</code></li>
<li>I don't have this branch on my repo or locally</li>
<li>I need to make a commit on this branch and do a PR to the original repo I forked from</li>
</ul>

<p>This is what I have tried:</p>

<pre><code>// clone into a separate folder
git clone git:github.com/some/abc.git -b 2.1-stable ../ext
// set to my repo
git remote set-url origin git://github.com/me/abc.git
</code></pre>

<p>When I now edit a file by adding a space somewhere and try to commit, I'm told:</p>

<pre><code>local branch is ahead of remote by 1 commit
</code></pre>

<p>I tried to fetch/pull, but this creates a ton of merge conflicts (since I just ""spaced"", most likley not due to my doing), but anyway... I'm stuck.</p>

<p>Second attempt was to add the branch inside my repo:</p>

<pre><code>git branch -a
</code></pre>

<p>This showed that the branch I was looking for was in <code>remotes/upstream/2.1-stable</code>. I tried to add that:</p>

<pre><code>git checkout -b 2.1-stable remotes/upstream/2.1-stable
</code></pre>

<p>but this feels wrong already and even trying to commit like </p>

<pre><code>git push -u https://github.com/me/abc/2.1-stable.git 2.1-stable:2.1-stable
</code></pre>

<p>failed to authenticate.</p>

<p>I'm probably doing 100 things wrong in the above... </p>

<p><strong>Question</strong><br>
Can someone tell me how to do this correctly?</p>

<p>Thanks! </p>
","0","536768","0","0"
"67625966","12980866","2021-05-20 18:19:13","4","812","<git><commit><git-commit><git-add>","Why should someone use git add before git commit? OR why should someone use git add at all?","<p>I am not an expert in git and I understand that the whole idea behind version control is to be able to record the history of the files. If we can keep track of changes made to files in the working directory by making commits, then why should I perform <code>git add</code> to keep a record of the files when I can just <code>git commit</code>?</p>
<p>I went through <a href=""https://stackoverflow.com/questions/3673537/when-should-i-use-git-add"">this</a> thread on SO and found this:</p>
<blockquote>
<p>I use git add when I think a file is ready to be committed, even if I know I won't make the commit until some time later. All else apart, git diff reports on the differences between what is in the index (staging area) and what is out in the working directory.</p>
</blockquote>
<p>Which shows the benefit of doing <code>git add</code> before <code>git commit</code>. Are there any more such benefits or is <code>git add</code> a common convention that someone should follow (but why?), or doing <code>git commit</code> without doing <code>git add</code> works all the time?</p>
<p>Sorry if I sound dumb. Thanks in advance!!</p>
","5","12980866","",""
"32246503","5272153","2015-08-27 10:08:45","563","686600","<branch><gitlab><git-commit><git-push><git-add>","Fix GitLab error: ""you are not allowed to push code to protected branches on this project""?","<p>I have a problem when I push my code to git while I have developer access in my project, but everything is okay when I have master access. Where is the problem come from? And how to fix it?</p>
<p>Error message:</p>
<blockquote>
<p>error: You are not allowed to push code to protected branches on this project.<br />
...<br />
error: failed to push some refs to ...</p>
</blockquote>
","2","5272153","0","0"
"14283262","1970576","2013-01-11 17:14:49","1","859","<github><aptana><git-commit>","Sending a git commit with aptana shows ""commit by unknown"" in github.com","<p>I set up Aptana 3 under windows 7 using egit more than a year ago. </p>

<p>I put my settings to :
preferences -> Team -> Git -> Configuration:</p>

<pre><code>user.name = My Name
user.email = myName@myCompany.com
</code></pre>

<p>so in 
D:\web.metadata.plugins\com.aptana.portablegit.win32\etc\gitconfig</p>

<p>i can find these lines 
[user]</p>

<p>name = My Name
email = myName@myCompany.com</p>

<p>and the same in :
C:\Users\MY username.gitconfig</p>

<p>i did this by this commands in git Bash:</p>

<pre><code>$ git config --global user.name ""My Name ""
$ git config --global user.email ""myName@myCompany.com""
</code></pre>

<p>this worked perfect until last October. </p>

<p>Now: when i do a commit to any file and after this a git push, in github i can see my name as the one you had send the push, but the commit is show as ""unknown"" (all commits before october are perfect)  </p>

<p>Reinstalling my system in december (what was needed because of switching from w7/32-bit to w7/64bit) does not bring help. </p>

<p>on my colluege on same repository it still works (but he is using aptana under mac so there is shure a diffrence in settings..) </p>

<p>i today updated to latest version of egit :
  Eclipse EGit  2.2.0.201212191850-r    org.eclipse.egit.feature.group 
with no change ..</p>

<p>(for me it looks like i got this since version 
2.1.0.201209190230
that i installed at the end of September, but as the PUSH always shows my name i did not notice that it was missing at the commit .. </p>

<p>so:any hints are welcome ..
joerg</p>

<p>EDIT:
When i use the Git GUI i alos installed, and use the button ""sign"" i get that additional line in the commit:</p>

<p><code>Signed-off-by: myName &lt;myName@myCompany.com&gt;</code></p>
","0","1970576","0","0"
"68944289","10868981","2021-08-26 19:22:45","-1","647","<git><git-commit><git-log>","git log --oneline command not displaying recent commit","<p>Interesting issue I ran into at work the other day. So I'm a new data engineer learning the ropes. I made a git commit of two files to my remote branch and made a PR, waiting to be reviewed for merging.</p>
<p>However, my manager told me to suppress one of the files as there were barely any changes. The novice in me made a big no no, and from this window deleted the file. (<em>For examples sake, news/reddit.py is the sample file</em> <a href=""https://i.stack.imgur.com/LH1r5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LH1r5.png"" alt=""enter image description here"" /></a></p>
<p>Now, this obviously makes a new commit. I would like to revert these changes using <code>git revert &lt;commithash&gt; --no-edit</code>. The issue I'm having is when I run <code>git log --oneline</code> in the terminal, there is no hash for the commit created upon file deletion.</p>
<p>Now when I grab the hash from github here:</p>
<p><a href=""https://i.stack.imgur.com/bnz1h.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bnz1h.png"" alt="""" /></a></p>
<p>and run <code>git revert 738bd6a --no-edit</code></p>
<p>I receive this error: <code>fatal: bad revision '738bd6a'</code></p>
<p>Also running the revert command with the full hash I receive this: <code>fatal: bad object 738bd6a3bccab7d96e9e7f93871285eea72943cf</code></p>
<p>I know I can just close the PR and recommit the files, but wanted to see if anyone had any ideas why the hash's won't work and why I can't find the hash running <code>git log --oneline</code></p>
<p>Thanks!</p>
","0","10868981","",""
"67669150","4061902","2021-05-24 08:50:16","-1","622","<git><azure-devops><git-commit><git-squash>","Azure Devops Git Squash-Commit Issue fake commits","<p>my company is currently working on Azure Cloud, managing our code repositories using Azure Devops and Git.</p>
<p>For some months we decided to use the Squash-commit when we wanted to merge our feature branches into our develop branch through the means of Pull Requests.</p>
<p>Since then, we are experiencing big issues in merging files as in the File-Updates sections we can see thousands files updates listed. Most of them have already been commited to our Development branch, so they are fake and they only raise many concerns about the possible implications of committing them again.</p>
<p>Why does git recognize these files as changed (newly)? Is there anything we re missing? or doing wrong?</p>
<p>Regards</p>
","2","4061902","",""
"68946047","9541426","2021-08-26 22:34:26","6","9868","<git><zsh><git-commit><gnupg>","Signing issue with `export GPG_TTY=$(tty)`","<h3>What I am trying to do</h3>
<p>I would like to sign my git commits with a gpg key, I have the line <code>export GPG_TTY=$(tty)</code> in my .zshrc file. I am able create a signed commit when I source my .zshrc.</p>
<h3>Issue I am facing</h3>
<p>I have found that in vscode integrated terminal (I haven't tried this in a iTerm window) after a while that I will get <code>failed to sign commit, make sure to set email, username</code>. but once I export again it works as expected.</p>
<p>I also downloaded the gpg suite to allow me to still sign commits, and that seems to make this issue go away. but I would prefer it to be a temporary solution while I figure this out.</p>
<p>I'm not sure what would cause the GPG_TTY to &quot;expire&quot;.</p>
<h3>Current configuration</h3>
<p>Im am using a Mac, with zsh, and Powerlevel 10k.
(this issue existed before I started using p10k)</p>
<p>Any, and all help is appreciated!!</p>
","4","9541426","0","0"
"49319426","815653","2018-03-16 11:14:29","0","200","<git><git-commit>","Given the commit hash of a fix,how could I get the figure out how exactly the code is fixed?","<p>Suppose I have the commit hash of a fix that fixes a bug. I would like to know how exactly the developer changed to code in that fix. What is the git command line for me to get me the info? Should I do something like</p>

<pre><code>git diff &lt;fix-hash&gt; &lt;before-fix-hash&gt;
</code></pre>

<p>I an unsure whether this would be the right direction, and I do not see how to get the  part Any idea?</p>
","0","815653","0","0"
"67696960","15701955","2021-05-25 23:57:24","0","540","<git><git-commit><git-rebase>","Git rebase without changing the commiter of each commit","<p>I changed the author name of some past commits (commits I made) using rebase starting at the root.</p>
<p>I used <code>git rebase -i -p --root</code>, and then marked the commits I wanted to change with &quot;edit&quot;.</p>
<p>Then I used <code>git commit --amend --author=&quot;Username &lt;email&gt;&quot; --no-edit</code>
and then <code>git rebase --continue</code> for each commit.</p>
<p>It worked perfectly for the ones I marked edit, however, I am not the only one working in the repository.  <strong>All the commits that I did not mark edit (ones that were not mine)</strong> now say that someone else authored but I committed. I reset the repository to before the rebase, but would like to know if there's a way to rebase without making it seeming like I committed everything? There must be a way to leave some commits alone during a rebase, but I can't find anything online.</p>
","7","15701955","0","0"
"49338820","9489594","2018-03-17 15:53:39","0","285","<github><git-commit><git-push>","Ignoring certain files when pushing to github","<p>I need to ignore some files when pushing to github account. I read about git ignore. How to add files into gitignore? Can anyone help on this?</p>
","3","9489594","",""
"67711478","11092881","2021-05-26 19:24:35","1","1083","<git><git-branch><git-commit>","How do I uncommit last merge on a protected branch?","<p>How do I uncommit last merge on a protected branch?</p>
<pre><code>git reset --hard HEAD~1

git push -f origin master
</code></pre>
<p>I did the following after noticing that the last merge had a UI bug on production, but not local environment.</p>
<pre><code>$ git push -f origin master
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
remote: error: GH006: Protected branch update failed for refs/heads/master.
remote: error: Cannot force-push to this protected branch
To https://github.com/Ivory/Web.git
 ! [remote rejected]     master -&gt; master (protected branch hook declined)
error: failed to push some refs to 'https://github.com/Ivory/Web.git'
</code></pre>
<p>However, I can't do a force-push, is there a way to uncommit the changes?</p>
","9","11092881","",""
"68951024","8335629","2021-08-27 09:22:50","0","133","<git><git-submodules><git-commit>","How to make the parent git folder always point to latest commit whenever there is a new commit in child module(submodule) - Any Alternative?","<p>Every time I push a commit to the submodule I need to update the parent repo to the latest commit in the submodule. Is there any automatic way to do that in the remote?</p>
<p>I understood that there is no way directly I can achieve this, but cCan someone suggest an alternate for git submodules? I just saw git-tree, google repo tools but not sure how to change my current setup to use those?</p>
","6","8335629","",""
"67726534","2171276","2021-05-27 16:44:39","1","403","<git><git-commit>","How to copy to clipboard exact git message to use in another commit","<p>I have to create a commit with the same message as another. First thing I thought was simple to run</p>
<pre><code>git show 7777777777
</code></pre>
<p>and copy the message from the console, but the message is complicated, has multi lines and spaces/tabs.</p>
<p>So I am afraid that in the copy + paste process I would miss anything.</p>
<p>Is there a command to copy to clipboard the git message of a given commit?</p>
","1","2171276","",""
"32262264","5269159","2015-08-28 02:05:58","3","10037","<git><commit><git-commit><git-bash>","Cannot get past the comment section after git commit?","<p>After I do a git commit, it would prompt me to comment so I can push to bitbucket and normally I press alt+x, then I exit and then git push. But for some reason, it's not letting me exit. </p>

<pre><code>committed new changes to bitbucket

Please enter the commit message for your changes. Lines starting
with '#' will be ignored, and an empty message aborts the commit.
On branch master
Your branch is up-to-date with 'origin/master'.

Changes to be committed:
   new file:   blocks/folder-navigation.block
   new file:   blocks/index-album.block
</code></pre>

<p>.... </p>
","6","5269159","0","0"
"49366175","135605","2018-03-19 15:07:23","1","43","<git><git-commit>","Working with file that has had several commits","<p>I have a file which I've been working on for quite some time. My boss had me working on a branch that other people have been working on. There have been several commits to a file which I've been working on. <code>How do I merge my changes into the file since it's had several commits now?</code> I have not pulled the recent commits yet.,</p>
","5","135605","",""
"15890047","387018","2013-04-08 22:20:22","4","3503","<git><git-commit><git-subtree>","How to remove history of deleted git subtree folder?","<p>I added a git repository using git-subtree. The problem is that I did a hard reset back to before the repository was added with git-subtree. Now the commit history is still in the repository but it's disconnected from master. </p>

<p>Any idea how to remove it? I tried git rm --cached with no luck. </p>
","2","387018","0","0"
"67741685","12898885","2021-05-28 15:27:17","0","24","<git><version-control><repository><git-branch><git-commit>","Using git to see differences between similar code","<p>I started to code with a previous written code from someone else, but I didn't initiate any git repository at the moment. I still have access to the files made by this other person. I would like to use git to help to compare the initial code and the changes I've made so far. Any idea of how is the best way to do that? Is it necessary to create a git rep or is there a simpler way?</p>
<p>A more general question should be: How to initiate a git repository on an existing folder which has similar code to origin (supposing I initiate a rep with the unchanged code) and then commit your changes merging the similar code as it was part of the remote without losing the changes you made?</p>
<p>Would creating another branch and making a PR to the main with the unchanged code be the best choice?</p>
","1","12898885","",""
"67763904","1083855","2021-05-30 17:16:57","1","750","<c#><git><git-commit><libgit2sharp><git-history-rewrite>","How to get all git commits with libgit2sharp, regardless the branch?","<p>AFAIK, <a href=""https://github.com/libgit2/libgit2sharp/blob/df3b22a754ef56da8d7e3c330ce2d783c2b7982e/LibGit2Sharp/Repository.cs#L389"" rel=""nofollow noreferrer"">Repository.Commits</a> property return all commits reachable from current branch.</p>
<p>I would like to get all possible commits, regardless the branch.
I am using the following command :</p>
<pre><code>var commitsToRewrite = repository.Branches.SelectMany(x =&gt; x.Commits)
                .GroupBy(x =&gt; x.Sha)
                .Select(x =&gt; x.First())
                .ToArray();
</code></pre>
<p>It is slow but it seems to work (maybe I missed some special cases that are not covered).
Is this the right way to do ? Is there a more efficient, faster way ?</p>
","0","1083855","0","0"
"67767962","6021363","2021-05-31 04:34:35","0","36","<git><git-commit><git-worktree>","What were existing files from working-tree at a given commit?","<p>I want to know, if it's possible, what were the existing files from my working-tree at the time that a concrete commit was made.</p>
","0","6021363","0","0"
"49414218","6560462","2018-03-21 18:38:02","19","8867","<git><git-commit><git-tag>","Difference between tag and commit message","<p>I understand one always needs a message for committing the changes but when and why do I need to also tag a commit? Let's say I made some changes and I commit using</p>
<pre><code>git add -A
git commit -m &quot;add feature 1&quot;
</code></pre>
<p>and now</p>
<pre><code>git tag -a -m &quot;includes feature 1&quot; v0.1
</code></pre>
<p>The question is when does this make sense.</p>
","2","6560462","0","0"
"15922860","1057545","2013-04-10 10:07:03","0","109","<git><gitignore><git-commit><git-add>","git- filter certain file","<p>I have a constants file, this file is needed but every developer keeps changing this for his environment and often pushes this changed file. Is there a way that there can be a filter where in this constants file will not get added/pushed.
.gitignore does not help as we need that file in the repo with the default configuration for someone who clones the project afresh. I just want to keep it out of the developers commit changes
Asking every developer not to add this constant file in this commit and enforcing this is other dirty way</p>

<p>regards,
Harsha</p>
","0","1057545","",""
"15930892","1361532","2013-04-10 16:03:28","1","3672","<git><git-rebase><git-commit><git-tag>","Git rebase on tags and not individual commits","<p>I have a project where my development branch is 2 tagged releases ahead of my stable branch but I want to remove the first tagged set of changes (which is a series of functionality I no longer want) but apply the most recent tagged changes (second tag) onto the stable tag.</p>

<p>For example:</p>

<p>Commits:</p>

<pre><code>[tag] 3.0 - 
sdaf213 Some Commit of the tag 3
sdaas34 Some other commit in this tag
[tag] 2.0 -
wert78 Some commit of tag 2
werg99 Another commit of tag 2
werh55 And another of tag 2
[tag] 1.0 (Stable) -
pry77 Commits of tag 1
...older commits
</code></pre>

<p>Is there a way to git rebase on tags and not commits such that I can rebase all the commits of [tag] 3.0 on top of [tag] 1.0 but exclude everything from [tag] 2.0?</p>
","1","1361532","0","0"
"49427520","1376496","2018-03-22 11:28:49","1","462","<xcode><git><github><git-commit><git-push>","Pods folder not showing under Git tracking","<p>I am trying to add one of my folder called as Pods - Its for iOS and not showing under Git tracking
I have used below command to check </p>

<pre><code>Git status
</code></pre>

<p>To check the current tracking status but not getting help
I have checked the current tracking files by using the command</p>

<pre><code>git ls-tree --full-tree -r HEAD
</code></pre>

<p>And the folder getting list as ""Pods""
But It's not getting the push on the branch and not showing in git status
I have also tried to check /info/exclude file but this is already blank so no chance to ignore  </p>

<p><a href=""https://i.stack.imgur.com/N60n3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/N60n3.png"" alt=""enter image description here""></a></p>

<p>After applying <code>git log --stat -- Pods</code>
It shows me like 
<code>Pods | 1 +
 1 file changed, 1 insertion(+)</code></p>
","0","1376496","",""
"67797470","16100417","2021-06-02 00:22:55","0","191","<git><git-commit>","Can there be git commits, that point to the same tree?","<p>I know that multiple git-trees can point to the same blob. This happens, when we only change the filename and do a commit again. But can there be git commits, that point to the same tree? If yes, when does it occur?</p>
","0","16100417","",""
"31430579","2265237","2015-07-15 12:36:07","0","30","<git><bitbucket><git-branch><git-commit>","Bitbucket - Commiting to a new Branch caused issue, not sure how to fix","<p>This is the order of actions which caused this problem.</p>

<ol>
<li>Branch created from Master, branch name v1</li>
<li>Changes made to this new Branch and pushed</li>
<li>I pulled this Branch (after push) and made some changes as well</li>
<li>Another user made some changes and pushed (before me)</li>
<li>Decided to make a Branch off that Branch, v1_adminui</li>
<li>sent a <code>git fetch</code> to get the new Branch and issued a <code>git checkout v1_adminui</code></li>
<li><code>git checkout v1_adminui</code> complained that I need to commit first because v1_adminui has some files edited which I was working on</li>
<li>I issued <code>git add --all</code> and <code>git commit -a -m ""Changes to Admin UI""</code> then did the <code>git checkout v1_adminui</code></li>
<li>Now I'm on v1_adminui but I don't have my admin ui commit changes</li>
</ol>

<p>How do I get my admin ui changes to v1_adminui? It looks like the <code>commit</code> happened to v1 so now I'm stuck... Any help would be great please.</p>

<p>Note that I can't push that commit, it needs to be reviewed first before merging.</p>
","0","2265237","",""
"49458654","2483101","2018-03-23 21:41:55","-1","331","<git><production-environment><git-commit><git-pull>","Git error on untouched repo: Please commit your changes or stash them before you merge","<p>Today I pushed 5 commits to one of my projects, then on the server I pulled the updates, everything was fine. 
After a few hours pushing then pulling on the webserver again and git throws:</p>

<p><code>
error: Your local changes to the following files would be overwritten by merge:
    storage/.DS_Store
    storage/app/.DS_Store
    storage/app/public/.DS_Store
    storage/app/public/css/admin.css
    storage/app/public/css/master.css
    storage/app/public/img/.DS_Store
    storage/app/public/img/products/77/textures/black.png
    storage/app/public/img/slider/image1.jpg
Please commit your changes or stash them before you merge.
</code></p>

<p>no one edited these files on the production server in the meantime, then why is git complaining? Does anyone have an idea?</p>
","3","2483101","",""
"67822160","16117284","2021-06-03 13:12:33","0","385","<linux><git><git-branch><git-commit><git-checkout>","How do I not transfer changes done to files from a branch to a another in git","<p>I have a homework assignment where I need to make three different implantations to the same program. The professor recommended using git and having each implantation in a different branch. Thing is that when I do a change on a branch named A, it'll also modify the same file in the master branch...I don't want it to carry my changes around every branch, instead keep the changes saved locally on each branch alone. How do i do this ?</p>
<p>(I'm new to using git)
(We work on linux, a remote server, on the terminal)</p>
<p>EDIT: The commands i used to make my project directory:</p>
<p><code>git init</code></p>
<p><code>git commit -m &quot;my message&quot;</code></p>
<p><code>git checkout // to switch branches</code></p>
<p><code>git branch branchname // to create a branch</code></p>
","3","16117284","",""
"49472058","9035180","2018-03-25 02:49:02","0","34","<git><github><repository><git-commit>","github- only newest commit showing","<p>I recently opened my first GitHub account, to be able to easily share my code when applying for internships. I taught myself how to do it, so here are the commands I've been using, in GitBash (Windows):</p>

<pre><code>cd ""folder name""
git init
git add *.cpp
git commit -m ""xyz""
git remote add origin https://github.com/myUserName/myRepositoryName.git
git remote -v
git push -f origin master
</code></pre>

<p>After each one I check to see that it has appeared on GitHub, and add a README to explain the code. I did this for a number of files before I realized that only the latest commit and its README are being shown in my repository...
My GitHub account says I have 35 commits, but I can only see the most recent 2.
The files all have different names, so I don't think they are being overwritten. Also, the email in GitBash does match the email in my GitHub account, so I don't think that's the problem.
It may be something obvious, because I'm very new to this, so any help would be very much appreciated!
I'm hoping I don't have to start over again, because it did take some time...Thanks :)</p>
","4","9035180","",""
"49472692","7882180","2018-03-25 05:02:04","1","179","<git><bitbucket><git-branch><git-commit><pull-request>","Is it okay to update the Pull Request with commits before code is reviewed and commented on?","<p>I have created a pull request of my branch after work is done, and have assigned it to code reviewers. After that I opened the pull request and observed my changes. Before anyone could review, I found 1 or 2 simple mistakes. I have corrected them on my local. If I commit and push them, the pull request will get updated.</p>

<p>Is it professionally correct to update pull request before it is reviewed and commented on by the code reviewers?</p>

<p>Thanks in advance.</p>
","1","7882180","",""
"31437793","775283","2015-07-15 18:02:11","3","585","<git><batch-file><git-commit>","Git commit 500 files at a time?","<p>I have thousands of files that I need to commit but I'm having problems committing them all at once. How can I commit 500 files at a time automatically? The first 500 files should have the commit message ""Initial commit part 1"", the next 500 should say ""Initial commit part 2"", and so on. I am using Windows, if that matters.</p>
","0","775283","0","0"
"67848200","9285310","2021-06-05 09:34:19","2","2536","<git><intellij-idea><git-commit>","How do I commit a git message in IntelliJ's terminal?","<p>When committing my changes to git using the IntelliJ terminal and a message is prompted, how do I then save that message and complete the commit?</p>
<p>Since it's using vim the usual approach is to hit esc and then type :wq to save and quit. However hitting esc just retargets the window I was viewing before (in this case the code file).</p>
<p>Is there a different way to save these files when using the built in terminal?</p>
<p>Thanks.</p>
","0","9285310","",""
"49507405","6057372","2018-03-27 08:01:05","0","95","<git><github><git-commit><git-pull>","cannot git commit, push or pull","<p>I am having problems doing <code>git commit -m</code> and <code>git pull</code>. I have done <code>git init</code> and made changes for many times and had had no problems working on branches and pushing to GitHub. However, now the problem occurs out of blue.</p>

<p>I can no longer git commit or git push. Every time I made changes and after doing <code>$git add .</code>, it shows </p>

<pre><code>$ git commit -m ""fixed plot fonts""
On branch convergence
Your branch is up-to-date with 'origin/convergence'.
nothing to commit, working tree clean


$ git pull
Already up-to-date.

$ git branch
* convergence
master
show
shown

$ git status
On branch convergence
Your branch is up-to-date with 'origin/convergence'.
nothing to commit, working tree clean


$ git pull
Already up-to-date.
</code></pre>

<p>Could someone give me some directions? Thank you!!</p>

<p><strong>UPDATE</strong></p>

<p>After I reinitialized git, I still could not git commit and git push.</p>

<p><code>$ git init
Reinitialized existing Git repository in /Users/xyz/Documents/R packages/bio/.git/</code></p>

<p><code>h$ git add .</code></p>

<p><code>$ git commit -m ""change font sizes of ggplot""
On branch convergence
Your branch is up-to-date with 'origin/convergence'.
nothing to commit, working tree clean</code></p>
","14","6057372","0","0"
"68978013","13855852","2021-08-30 00:54:44","0","23","<git><github><google-api><git-commit><private-key>","How can I delete a previos commit file on github or hide it? Accidentally exposed a private key","<p>I accidentally exposed a private key in one of my files when I pushed it to github. Thankfully I got a warning email from google about my api being exposed.
After I updated the file and pushed the commit, i have been unable to delete my previous commits.</p>
<p>Is it possible to delete previous commits on github or do I have to delete my repositoy and start all over again?<a href=""https://i.stack.imgur.com/JAb5W.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JAb5W.png"" alt=""enter image description here"" /></a></p>
","2","13855852","",""
"14344832","1594368","2013-01-15 18:53:55","10","75054","<git><bitbucket><git-clone><git-commit>","What to do after cloning repo from git","<p>I am just a <strong>git starter</strong>, basically I clone a git repository and now I wanted to commit the changes that I made in a file. when I run the command <code>git commit</code> it says <code>not a git repository</code>,</p>

<p>So being a starter in git i just wanted to ask that do i need to run this command first - <code>git init</code> and then <code>git commit</code>?  Or in between these some more steps to follow to commit the file? </p>

<p>I need to commit files on Bitbucket.</p>

<p>Screenshot-</p>

<p><img src=""https://i.stack.imgur.com/AUlQH.jpg"" alt=""enter image description here""></p>
","2","1594368","0","0"
"49527126","7628875","2018-03-28 05:58:30","0","59","<git><commit><git-commit><git-log>","How to determine git commits on a branch but not inherited from different branch?","<p>I am trying to determine git commits on a particular branch, which excludes git commits inherited.</p>
","4","7628875","",""
"68985129","16725460","2021-08-30 13:39:18","0","57","<git><github><git-commit>","name of commit in the terminal is different in the github","<p>I try to combine commit for my branch. However, the id(?) or the name of the commit listed in the git hub is different with the terminal. How to resolve this problem so that i combine 3 commit into 1.</p>
<p>in the terminal the name of the commits are:</p>
<ol>
<li>chapter_3</li>
<li>message content</li>
<li>chapter 7</li>
</ol>
<p>in the github, the name of the commits are:</p>
<ol>
<li>message content</li>
<li>chapter 7</li>
<li>merge branch 'main' into chapter_7</li>
</ol>
<p><a href=""https://i.stack.imgur.com/ieAR4.png"" rel=""nofollow noreferrer"">commit listed in the github</a></p>
","2","16725460","",""
"68985398","2516892","2021-08-30 14:00:21","0","49","<git><gitlab><git-commit>","Did the git-commit-hash change? (8 to 7 digits)","<p>Some of my CI/CD-Workflows depend on the commit-hash of git and I noticed one digit disappeared when I'm using:</p>
<pre><code>echo $(git log --pretty=format:'%h' -n 1)
f7dc8fd
</code></pre>
<p>In the command-line to obtain the hash - notice the 7 digits. (Usually I save it for further usage)</p>
<p>On Gitlab the hash is different. 8 digits.</p>
<p><a href=""https://i.stack.imgur.com/tlpdW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tlpdW.png"" alt=""The hash on Gitlab: Notice 8 digits"" /></a></p>
<p>It seems to be new, it used to be the same. How to sync it again? Should a different command or configuration be used?</p>
","8","2516892","",""
"31448445","3928061","2015-07-16 07:56:54","103","111982","<git><git-commit><git-log>","git log show one commit id only","<p>I need some help. It is possible to only show one commit id? Since git log -3 show the log from 1 - 3, I just want to show only 3. What possible command will match for it?</p>

<p>I use the command</p>

<pre><code>       git log -3 --pretty=format:""%h""
</code></pre>

<p>the result is</p>

<pre><code>       ffbef87
       cf0e073
       1c76c5d
</code></pre>

<p>I only want to display the <strong>1c76c5d</strong> only.</p>
","0","3928061","0","0"
"50430006","821780","2018-05-19 22:21:49","0","17","<git><diff><git-commit>","Git tarball for diff between commits","<p>I am looking for a way to export to a file the diff (e.g. as plaintext) between two git commits in a local repo. Then a way to apply that as a patch in another local repo (transferring a file with a pendrive).</p>

<p>Reasons:</p>

<ol>
<li>One computer cannot be connected to the Internet, or to any of our servers, for the matter.</li>
<li>So far we are copying the whole Git repo, but it is becoming rather inconvenient.</li>
</ol>

<p>Preferably:</p>

<ol>
<li>It would be very good if intermediate commits were kept, with their hashes, etc.</li>
<li>It would also be good if authorship information was preserved and <code>blame</code> worked everywhere.</li>
</ol>

<p>I thought this was trivial with Git, but I am finding no information in the Internet about how to do it, it is clearly not trivial, is it possible? If so, how?</p>
","4","821780","",""
"16047834","411524","2013-04-16 21:56:31","0","65","<git><git-commit><git-fork>","Git cleaning up commit log when there are multiple forks","<p>I learnt <a href=""https://stackoverflow.com/questions/495345/git-removing-selected-commit-log-entries-for-a-repository"">this trick</a> to clean up the commit log. I want to do it but I have a little concern.</p>

<p>My repo is currently forked by a few people and I wonder if It is wise to clean up my own commit log. For example, I don't know if that will affect future pull requests ? Please tell me if it is safe or else what kind of problem should I expect ?</p>
","0","411524","",""
"32303799","1509401","2015-08-31 04:01:19","1","61","<ios><xcode><git><branch><git-commit>","Git Ignored File When GitIgnore Doesn't Exist","<p>I have an iOS project on XCode. I've been working off of a branch for some time. I've made particular changes to a file and have been committing the branch for some time. When I moved to an old branch, merged the code, and deleted the most recent branch, I realized this file was never updated to Git. I don't have a <code>.gitignore</code> file. </p>

<p>All my other files were pushed except for this particular set of header and main Objective-C files. I have no idea why the code was never pushed up. I've spent quite a bit of time working on this and losing this updated file is a great blow to me. When I moved to an older commit from the deleted branch the file took its original form.</p>

<p>What could have caused this and is there any wy for me to fix this?</p>

<p><strong>UPDATE</strong></p>

<p>This is not my first rodeo with git. Let me further explain. </p>

<p>Every commit I've made I've used <code>git add .</code> and followed up with <code>git commit</code> and <code>git push</code> respectfully.</p>

<p>I've attempted to pull the branch from the remote repository but the file does not reflect all of the changes I've made to it as of my most recent commit. </p>
","1","1509401","",""
"50030709","534298","2018-04-25 20:20:22","-1","100","<git><git-commit>","Is it possible to suppress commit message editing","<p>Often times, I make edits on top of an existing commit, then run</p>

<pre><code>git commit -a --amend
</code></pre>

<p>It then asks to edit the existing commit message, which I don't need to change. Is there a way to amend without editing the message?</p>
","0","534298","",""
"31860273","836820","2015-08-06 15:48:41","2","1278","<git><bitbucket><git-commit><git-subtree>","Git: Remove irrelevant commits from history after subtree split","<p>I have repo <code>personal_stuff.git</code> which I used to store a whole bunch of early-maybe-not-quite projects.</p>

<p>Every now and then one of them takes off, and I have to split a subfolder from <code>personal_stuff/coolnewthing</code> into its own <code>coolnewthing.git</code> repo.</p>

<p>To do this I use </p>

<p><code>git subtree split -P personal_stuff/coolnewthing -b coolnewthing</code> </p>

<p>and then pull the new branch from another new git directory via:</p>

<p><code>git pull ../../../../personal_stuff coolnewthing</code></p>

<p>This works great, but I have all these commits in my history related to files that no longer exist.</p>

<p>How do I filter these out and keep only the commits relevant to the files that I still have?</p>
","6","836820","",""
"31860421","5011086","2015-08-06 15:55:35","3","546","<email><github-api><git-commit><github3.py>","Getting committer emails","<p>I am trying to get the email addresses of the committers of a project to specific files. After creating a query that finds the code files in a list of repos matching specific criteria, I get the correct results in the form of code_results (of type CodeSearchResult). Now to try access the commit information, I do the following</p>

<pre><code>for code_result in code_results:
            repository = code_result.repository
            file_path = code_result.path
            commits = repository.commits(path=file_path)
            for commit in commits:
                if commit.committer is not None:
                    print commit.committer
</code></pre>

<p>The problem is that trying to get the email through commit.committer.email always returns None even though the documentation says that a commit contains the committer's email. I also tried author instead of committer since the documentation says the author is a dict containing the email, but I'm not sure what the dict keys are.</p>

<p>Thanks!</p>
","0","5011086","",""
"50035966","8577371","2018-04-26 06:14:35","0","282","<java><git><netbeans><gitlab><git-commit>","Force Committing via Netbeans","<p>I've recently run into an issue when trying to commit and push a group project. </p>

<p>When trying to commit and push my changes to my team's GitLab through NetBeans, I encountered the ""REJECTED_NONFASTFORWARD"" error. I've managed to resolve the nonfastforward issue, but was curious if there was any way to force a commit through NetBeans?</p>

<p>The way I was able to fix my REJECTED_NONFASTFORWARD issues were to merge and rebase my origin/master. </p>

<p><strong>Is there any way to push my commits with --force through NetBeans? Or is it only possible via terminal?</strong></p>
","6","8577371","",""
"32312610","745903","2015-08-31 13:36:15","0","75","<git><version-control><git-commit><git-add>","Can I make git reject an all-commit if I have before manually added files?","<p>Most of the time, I commit with <code>git commit -am</code>, because all I've done to the project belongs to the commit I'm working on.</p>

<p>Only sometimes, there are some changes I do not want to commit, so I use <code>git add -p</code> to stage only what I really want. Trouble is, I'm so used to typing <code>git commit -am</code> that I usually end up doing it anyway. I then get a commit with stuff I didn't want, and have to laborously go back to <code>HEAD^</code>, and also re-do the <code>add -p</code>.</p>

<p>Clearly, when some changes have already been added manually, <code>commit -am</code> doesn't make sense anymore. Is there a way to prevent git from accepting the option in this case (or some alternative to <code>-am</code> that is just as convenient)?</p>
","0","745903","",""
"31873577","517868","2015-08-07 08:55:33","5","3360","<git><git-commit>","Custom Git Commit Message Template","<p>How do I craft customized commit message template?</p>

<p>I would like to have something like:</p>

<pre><code># Short (50 chars or fewer) summary of changes

# More detailed explanatory text
</code></pre>
","0","517868","0","0"
"16118947","1986826","2013-04-20 09:53:18","14","46771","<git><gerrit><git-commit><git-amend>","How to create a new Patchset in Gerrit?","<p>I am new to Gerrit and want to create a new Patch when new changes are submitted. I setup Gerrit with this guide <a href=""https://review.typo3.org/Documentation/install-quick.html"" rel=""nofollow noreferrer"">https://review.typo3.org/Documentation/install-quick.html</a></p>

<p>Then I try to create a new patch with <a href=""http://gerrit.googlecode.com/svn/documentation/2.0/user-changeid.html"" rel=""nofollow noreferrer"">http://gerrit.googlecode.com/svn/documentation/2.0/user-changeid.html</a> and also added <code>Change-Id</code> line at bottom of the Commit-message.</p>

<p>But I am getting new Change instead of new Patchset. Can anyone help me?</p>

<p>Thanks</p>
","0","1986826","0","0"
"68595471","683518","2021-07-30 18:13:32","-3","217","<git><git-commit>","Merge multiple commits into one in git","<p><code>Commit 1</code> contains <code>file1</code> and <code>file2</code></p>
<p>I did some changes in <code>file2</code> and committed it as <code>commit2</code>
But I want <code>commit2</code> to include both <code>file1</code> and <code>file2</code> even though there is no change in <code>file1</code>.</p>
<p>Or</p>
<p>I would want a single commit that includes/merges both <code>commit1</code> and <code>commit2</code></p>
<p>Is there a way to do this in git?</p>
<p><strong>Why do I have to include unmodified files in my commit?</strong></p>
<p>My deployment happens using hash id generated as part of the commit. So in this case if I provide <code>commit2</code> then it will include only <code>file2</code>, hence I would like to create a commit that includes the changes in <code>commit1</code> and <code>commit2</code>. This may be an unconventional way, but this is my requirement!</p>
","18","683518","",""
"31892555","3311276","2015-08-08 11:20:52","2","1540","<git><subprocess><git-commit><gitpython>","How to amend the Git commit message through Python?","<p>I have used <code>subprocess.check_output</code> to get the result of Git command but I can't think of a way how to update the commit message that we do with the command <code>git commit -amend</code> ?</p>
","0","3311276","",""
"14832963","20520","2013-02-12 12:49:03","15","9131","<git><rename><git-commit>","How can I control the rename threshold when committing files under git?","<p>I'm trying to place into git's history successive snapshots of a specific project. I am doing this by populating the repository directory with the contents of each snapshot and then running</p>

<pre><code>git add -A .
git commit -m 'Version X'
</code></pre>

<p>This is the method recommended in <a href=""https://stackoverflow.com/a/3148117/20520"">this answer</a>.  However, I see that the commit recognizes file renames only when 100% of the file contents remain the same.  Is there a way to influence rename detection of <code>git commit</code> to make it find renames where the file contents have changed a bit?  I see that <code>git merge</code> and <code>git diff</code> have various options for controlling the rename threshold, but these options do not exist for <code>git commit</code>.</p>

<p>Things I have tried:</p>

<ul>
<li>Locating the renamed files with a home-brew script, and performing a commit with the original files renamed to their new locations before committing the new file contents.  However, this introduces an artificial commit, and seems inelegant, because it doesn't use git's rename detection functionality.</li>
<li><p>Creating a separate branch for each snapshot and then merging the successive branches onto <code>master</code> using</p>

<p><code>git merge -s recursive -Xtheirs -Xpatience -Xrename-threshold=20</code></p>

<p>However, this left me with the renamed files of the old version in place, while also failing to detect the renames.</p></li>
</ul>
","2","20520","0","0"
"16171129","929062","2013-04-23 13:51:45","0","59","<git><github><git-commit>","remove git object directory?","<p>I copied a few hundred megabytes of images from my production environment into my development environment. Even though I have them in <code>.gitignore</code> (<code>public/uploads/</code>) and they are not under version control (I checked with <code>git ls-tree -r master --name-only</code>) my last commit to GitHub was huge (a few hundred megabytes).</p>

<p>I saw that the few hundred megabytes seem to be in the following directory: <code>.git/objects/</code> in subfolders named from <code>00</code> to <code>ff</code>.
I can't see the <code>.git</code> directory on GitHub (where I commited to), but since there is the huge amount of data in it I guess it must be the reason for the commit > 100 MB. Can I simply delete the subfolders under <code>.git/objects</code> or how can I get rid of the hunderd MBs of images that I do not want to have under version control?</p>
","6","929062","",""
"16174564","158449","2013-04-23 16:29:14","8","1155","<git><vim><version-control><vim-plugin><git-commit>","How can I tell git which vim to use?","<p>When I edit a commit message with vim (by entering <code>git commit</code>), vim opens, but first with a prompt that the <a href=""https://github.com/Valloric/YouCompleteMe"">YouCompleteMe plugin</a> is unavailable:</p>

<pre><code>$ git commit
YouCompleteMe unavailable: requires Vim 7.3.584+
Press ENTER or type command to continue
</code></pre>

<p>When I check the version using <code>:version</code> after pressing <code>ENTER</code>, I see that vim 7.3 is running. However, if I start vim directly from the command line (not using <code>git commit</code>), I see that I'mrunning vim 7.3.754. How can I tell git to use the newer version of vim?</p>
","0","158449","",""
"31906658","4282823","2015-08-09 17:04:25","0","311","<git><github><git-commit>","How to push an older checked out commit to github","<p>I checked out one of my older commits with git checkout. Now I want to push this commit but keep getting errors. After I try to git push:</p>

<p><a href=""https://i.stack.imgur.com/7Ppzo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7Ppzo.png"" alt=""enter image description here""></a></p>

<p>I tried:</p>

<p>git push origin HEAD:new branch</p>

<p>But that didn't work. I've tried a lot of combinations of stackoverflow answers but can't figure it out.</p>
","3","4282823","0","0"
"16202319","649167","2013-04-24 21:15:00","2","405","<git><github><ssh><git-commit>","Git commits not using forwarded ssh agent?","<p>Setup:</p>

<p>We have several users with access to a Github repo.
These users all have deploy privileges on various servers.
The servers do not have access to the Github repo - they use ssh-agent forwarding to grab the users' credentials.
Everything works as intended when transferring data from Github to the servers.</p>

<p>For accountability, deploys commit some data to the repo. This is all scripted and run server-side with no user intervention needed.</p>

<p>Problem:</p>

<p>Git commits set the committer name and email to whatever is set on the server (defaults to server username if not set explicitly). Is there a way to force Git (as the sender) or Github (as the receiver) to associate the commits with the forwarded user credentials?</p>
","1","649167","0","0"
"60607952","9883469","2020-03-09 20:32:53","0","48","<java><android><github><git-commit>","Check if a commit occurred on a github page","<p>I'm trying to create a notification in Android.</p>

<p>I want to check if in a github link (for example: <a href=""https://github.com/Bocci94/csv_corona/blob/master/files.csv"" rel=""nofollow noreferrer"">https://github.com/Bocci94/csv_corona/blob/master/files.csv</a>) a commit occurred or this csv file has been modified. I need to create a script in Android that somethimes check if there is a modify.</p>

<p>Is this possible?</p>

<p>Thnks for answer.</p>
","0","9883469","",""
"68637275","16503275","2021-08-03 13:49:08","0","43","<linux><git><unix><hash><git-commit>","Getting script and path name from commit hash","<p>Is it possible to get the script name and the path where that script is located,  from git hash commit value</p>
<p>Suppose with the following details</p>
<p>script name - <code>script.sh</code></p>
<p>path - <code>/c/training/</code></p>
<p>I make some changes in <code>script.sh</code> and the commit hash is 123456789asdasdasdas (placeholder value)</p>
<p>Using the <strong>commit hash</strong> value, the output should be</p>
<pre><code>script.sh /c/training/
</code></pre>
","7","16503275","",""
"41621250","1380285","2017-01-12 19:20:51","0","62","<git><commit><git-commit>","How to delete the most recent git commit?","<p>I can't believe I'm the first one to ask this, but my searching through git questions hasn't given me the precise answer I need, so:  I just made a commit on the master branch and I realize that it is buggy and won't be ready for prime time without alot of work, so I just want to get rid of it.  How do I do this?  <code>git reset --hard HEAD</code> and <code>git reset --hard sha-of-bad-commit</code> don't do anything except move the <code>HEAD</code> back to this bad commit.</p>
","1","1380285","",""
"50478136","6358339","2018-05-23 00:14:53","0","22","<intellij-idea><gitlab><commit><git-commit>","editing remote files locally and committing them to intellijea IDEA","<p><a href=""https://i.stack.imgur.com/B9nWZ.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/B9nWZ.jpg"" alt=""enter image description here""></a></p>

<p>I am currently writing a program with intellijea IDEA. I cloned my gitlab project. However, when I try to create new class, I don't get to see the option to create new class. Please what I am doing wrong? Or is there a better way to resolve this issue?</p>

<p><a href=""https://i.stack.imgur.com/TbpiX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TbpiX.png"" alt=""enter image description here""></a></p>
","0","6358339","",""
"69039788","711006","2021-09-03 05:09:24","4","2605","<visual-studio-code><commit><git-commit>","Differences between Commit, Commit Staged, and Commit All in VS Code","<p>There are three commands for Git committing in Visual Studio Code:</p>
<ul>
<li>Commit</li>
<li>Commit Staged</li>
<li>Commit All</li>
</ul>
<p><a href=""https://i.stack.imgur.com/gZQqm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gZQqm.png"" alt="""" /></a></p>
<p>What are the differences between them?</p>
<ul>
<li><p>I expect <em>Commit Staged</em> works as a regular <a href=""https://git-scm.com/docs/git-commit"" rel=""nofollow noreferrer""><code>git commit</code></a> command.</p>
</li>
<li><p>I’ve found that <a href=""https://stackoverflow.com/q/49549490/711006""><em>Commit All</em> commits unstaged and untracked files</a>, too. (Similarly to <a href=""https://learn.microsoft.com/en-us/azure/devops/repos/git/commits?view=azure-devops&amp;tabs=visual-studio"" rel=""nofollow noreferrer""><em>Commit All</em> in the “classic” Visual Studio</a>.)</p>
</li>
<li><p><strong>However, what does <em>Commit</em> do, and how does it differ from the two commands above?</strong></p>
</li>
</ul>
<p>Unfortunately, I have not found any documentation or web pages on this. (I am not interested in the differences between <code>git pull</code> and <code>git fetch</code> or <em>commit – amend</em> or <em>commit – signed off</em> as most searches suggest – all of these are documented well. The <em>Commit</em> command is also missing in the comprehensive list in the German article <a href=""https://www.microsoft.com/de-de/techwiese/know-how/visual-studio-code-07-git-als-quellcodeverwaltung-einsetzen.aspx"" rel=""nofollow noreferrer"">Visual Studio Code (7): Git als Quellcodeverwaltung einsetzen</a>, for example.)</p>
","2","711006","",""
"60626190","12043558","2020-03-10 21:28:11","2","469","<git><version-control><kernel-module><git-commit>","Retrieve git commit hash from a kernel module's srcversion","<p>Is there a way to retrieve git commit hash from a kernel module's srcversion?</p>

<p>I am using a pre-built module (installed, and I can see its info using modinfo). I need to know the version of the code when this module was compiled. I can see srcversion there; is it related to a git commit hash? The git commit hash is 40 chars whereas the srcversion is 23.</p>

<p>I can see this in modinfo:
<a href=""https://i.stack.imgur.com/AHTWo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AHTWo.png"" alt=""enter image description here""></a>
And I know that this the source file:
<a href=""https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_dctcp.c"" rel=""nofollow noreferrer"">https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_dctcp.c</a></p>

<p>Can I know which commit was used?</p>

<p>Thanks.</p>
","3","12043558","",""
"60627850","13006498","2020-03-11 00:52:33","-5","286","<git><git-commit>","Why should we use -m in a git commit command?","<pre><code>git commit -m &quot;my commit&quot;
</code></pre>
<p>We used this command to add the commit to my Github repo.</p>
<p>What does this &quot;-m&quot; mean?</p>
","3","13006498","",""
"16278057","1119979","2013-04-29 11:56:00","2","209","<git><git-commit>","How to find all my commits made in last few days?","<p>I have been doing </p>

<pre><code>git log | grep ""chakra"" -A3 -B3
</code></pre>

<p>for each branch separately.</p>

<p>Is there a simple way to find out all the commits a person made.</p>
","1","1119979","0","0"
"31952483","757971","2015-08-11 21:44:10","5","1846","<git><jenkins><jenkins-plugins><git-commit><email-ext>","Get Multiple line commit message in jenkins email notification","<p>I need to modify the extended email part for email notification in jenkins. 
This is what I have right now:</p>

<p><a href=""https://i.stack.imgur.com/xaPc7.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/xaPc7.png"" alt=""enter image description here""></a></p>

<p>This just shows first line of commit message in the email. I would like to grab multiple lines from commit message. </p>

<p>I found this: <a href=""https://issues.jenkins-ci.org/browse/JENKINS-12289"" rel=""noreferrer"">https://issues.jenkins-ci.org/browse/JENKINS-12289</a> 
So I tried following, did not work. </p>

<p><a href=""https://i.stack.imgur.com/Ae8vz.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Ae8vz.png"" alt=""enter image description here""></a>
Please somebody suggest how to fix it. </p>

<p>Thanks tons!</p>
","4","757971","0","0"
"69050536","14768","2021-09-03 21:04:19","1","32","<git><git-merge><git-commit><git-merge-conflict>","git command to show the merge sources for %A and %B","<p>What I want to know are the commits from which %A and %B are drawn.</p>
<p>I am writing a merge driver that can apply domain knowledge and clean up 99% of merge conflicts in a certain set of files for which the default merge driver cannot. But conflicts can still happen and should be labelled appropriately.</p>
<p>Any reasonable display form is possible. I can parse output with regex if need be.</p>
","1","14768","",""
"50491446","6187009","2018-05-23 14:50:13","0","129","<git><git-branch><git-commit>","how to combine commits and push to the remote","<p>At the beginning the local branch is uptodate and now I use <code>git rebase -i HEAD~3</code> and modify the <code>pick</code> of the two newest commits to <code>fixup</code> to combine 3 commits at the local branch，and now I want to push the local branch to the remote. And I only want to show a combined commit at the remote. 
However，after combined the local branch falls behind with remote by two commits and I cannot push directly. How can I deal with it?</p>
","4","6187009","",""
"68676427","16605056","2021-08-06 05:12:21","3","1227","<git><github><git-commit>","When you use git commits on local computer do you lose branches/commits when you turn off the computer?","<p>Probably a simple question but when you are using git locally on your computer do you lose branches and commits when the computer is turned off?</p>
","1","16605056","0","0"
"69053983","9598078","2021-09-04 09:19:19","-2","1044","<git><github><gitlab><git-commit><git-push>","What is the difference between 'git push' and 'git commit' - GitBash","<p>What are the differences between <code>git push</code> and <code>git commit</code> ?
If I want to merge code to my local branch and have not committed and pushed my code; does <code>git merge</code> work in that case?</p>
","3","9598078","",""
"69054602","15150677","2021-09-04 10:49:10","2","1465","<git><github><git-branch><git-bash><git-commit>","How do I remove a branch in GitBash?","<pre><code>Hemang Joshi@SOLO MINGW64 ~ (add-hemang-joshi)
</code></pre>
<p>Hii, I am new to GitHub and I want to know that what is this, and why it is showing every time and how can I remove it? (add-hemang-joshi) is in green colour in GitBash. See the image as well.</p>
<p>I tried using:</p>
<pre><code>git branch -D add-hemang-joshi
</code></pre>
<p>but didn't work and showed an error viz.</p>
<pre><code>error: Cannot delete branch 'add-hemang-joshi' checked out at 'C:/Users/7386-856
15SG 2913642'
</code></pre>
<p><a href=""https://i.stack.imgur.com/bIaOL.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bIaOL.jpg"" alt=""My gitBash looks like this"" /></a></p>
","0","15150677","",""
"68679621","7691729","2021-08-06 09:52:02","0","323","<git><vim><git-commit>","How to show `git log` in the editor during `git commit`?","<p>I repeatedly caught myself calling <code>git log</code> before <code>git commit</code> to see what were the last commits before making a new one.</p>
<p>Is there a way how to automatically populate the commented-out section of the <code>git commit</code> message in the editor with the output of <code>git log</code>? Perhaps even with some options like <code>-n5</code>? Right now, it shows the branch and staged files.</p>
<p>Very similar with <a href=""https://stackoverflow.com/questions/4750148/git-show-index-diff-in-commit-message-as-comment"">git: Show index diff in commit message as comment</a> question but <code>--verbose</code> does not show the logs.</p>
<p>I use vim as my editor if it is relevant.</p>
","3","7691729","",""
"50134477","2838542","2018-05-02 12:16:54","0","44","<git><git-commit>","What is the best practice for getting compiled files onto production servers","<p>I'm not sure if this question has already been asked in the passed or not, I've been strolling through blogs and tutorials and not yet come across exactly what I'm looking for, looking for some advice on where to get started.</p>

<p>So my situation. I have a React App that gets build via webpack. I have had a read into getting the production code onto servers and that you should not build them directly on the prod servers, but instead push the compiled files at this stage.</p>

<p>What would be the best practice for getting these files committed?</p>

<ul>
<li><p>If I remove the compiled files from the <code>.gitignore</code> and add them, pull on production and then add them back to the <code>.gitignore</code> once this process has been complete then would this not create conflicts on the complied files for the Dev's on their next pull?</p></li>
<li><p>Or do we set up a whole separate branch for production and commit the
build files to this branch following the same process as above?</p></li>
</ul>

<p>Is there any hard and fast rules around this? Or has anyone come up with some kind of process to use as a guideline?</p>
","3","2838542","",""
"31972185","591410","2015-08-12 17:54:15","3","4185","<git><merge><git-commit><revert>","Merge an old git commit to the top of the current branch","<p>I made few git commits (commit 1, commit 2...commit 5) in my project. I had to fix a bug, so I reverted to commit 2 using the below command - </p>

<pre><code>git checkout &lt;commit_id&gt; .
</code></pre>

<p>I made some code changes and committed the changes. Now, I want to merge these changes and go back to the latest version of the code (that was in commit 5). What should I do? </p>

<p>Thanks in advance!</p>
","2","591410","",""
"16354897","2255923","2013-05-03 08:49:14","4","2264","<git><version-control><git-merge><git-commit><revision-history>","Understanding Git Graphs","<p>I am new to Git and need help understanding Git history graphs, i.e. the relationship between commits and merges as they are displayed on the graph in tools like SmartGit or GitGui. In the image below, what is the relationship between the commits in red, specifically ""IA-481"" and ""Merge branch IA-481(Release2)...."" I am mainly asking because ""IA-481"" was intended to go in a branch called ""IA-481(Release2), not in Master. </p>

<p>So here is a little more detail:</p>

<ol>
<li>I originally checked in my files in a branch called ""IA-481(Release)"". </li>
<li>I then switched to Master, called merge from the Master Branch to merge the files from ""IA-481(Release)"" with Master. I made a few more changes but realized it was too soon to commit to Master, so I didn't commit to Master. </li>
<li>Instead, I created and switched to another new branch called ""IA-481(Release2) and I committed the merged files to that second new branch (not to Master).</li>
<li>Someone else switched to the IA-481(Release2) branch to check out my work, and made some check-ins.</li>
</ol>

<p>Later we find out that the IA-481 commit I originally made to the ""IA-481(Release2)"" branch somehow wound up in the Master Branch.  and I'm trying to figure out how it got there. Was it the commit called ""Merge branch IA-481(Release2)"" made by that other person that merged it with Master, or was it already in Master with my IA-481 check-in. At which commit did things go wrong?</p>
","2","2255923","",""
"60861963","13080654","2020-03-26 06:25:50","1","255","<git><github><git-commit><git-push>","Fastest way to get a unique list of all emails used to push git commits","<p>Say I have 30 git repos cloned to my local computer. What I want to do is a find a list of all the email addresses I have used as the git author in those repos. Is there a way to discover which commits in those repos I have made from my local laptop and the email address for those commits?</p>

<p>Basically, I only want to consider the commits that were made from the current machine and find out the email address for the author of those commits.</p>

<p>I believe the way to do it would be to go to each repo and run:</p>

<pre><code>git config user.email
</code></pre>

<p>but that might only be the current email address, not for previous commits.</p>
","1","13080654","",""
"14927831","1114864","2013-02-18 00:33:24","2","5888","<git><git-commit><git-add>","Git Not Committing Directory Contents","<p>I'm trying to add every single thing I have in directory through git.  However, for one particular directory, it loads the folder, but none of the contents.  I tried to use </p>

<pre><code>git add -A
</code></pre>

<p>but was returned</p>

<pre><code># On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#   modified:   sendgrid-php (untracked content)
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>upon trying to commit my changes.  What could be the problem here?</p>
","2","1114864","",""
"69069512","","2021-09-06 05:31:35","0","220","<git><git-commit><git-push>","Solving the rejected push of only-a-file push","<p>how solving the rejected push of only-a-file push to replace its remote counterpart on github ?<br />
Try this <a href=""https://happygitwithr.com/push-rejected.html"" rel=""nofollow noreferrer"">https://happygitwithr.com/push-rejected.html</a>
without any success</p>
<p>e.g. message</p>
<pre><code> ! [rejected]        main -&gt; main (fetch first)
error: failed to push some refs to 'https://github.com/abdulbadii/MatrixMultiplier'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details
</code></pre>
","2","","",""
"50166839","5241470","2018-05-04 03:46:02","-1","1619","<git><git-commit>","Im getting an error on git bash unable to create file exists","<p>Here is the problem <a href=""https://i.stack.imgur.com/0jdBl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0jdBl.png"" alt=""enter image description here""></a>
What should I do?</p>
","1","5241470","",""
"16432809","816213","2013-05-08 04:42:36","5","13351","<git><merge><git-commit>","How to get rid of Merge commits in git","<p>I have a repository which is shared by more than 1 person So often I see there are a lot of merge commits in commit history. I want to get rid of them to make my commit history to look cleaner.</p>

<p>What is the practice we should follow to avoid these merge commits? Is it doable ?</p>

<p>I read about merging using <code>--ff-only</code> switch. Can this switch help me ?</p>
","3","816213","0","0"
"16449029","401393","2013-05-08 19:49:40","20","8224","<git><workflow><git-commit><squash>","Is squashing commits into one best practice (for this particular workflow)?","<p>I have the following <code>git</code> workflow:</p>

<ol>
<li>Create new feature branch</li>
<li>Work on feature branch</li>
<li>Commit often</li>
<li>Once feature is complete, merge into <code>master</code> branch</li>
<li>Rinse and repeat</li>
</ol>

<p>However, sometimes, I have the need to revert a whole feature from master. This could involve a whole lot of <code>revert</code>ing. (<em>The reason for needing to revert a feature is I have a website that works off of one repo. From there, we use a script that deploys the site to either our Production site or Staging site. Both are done from our master branch. Don't ask, that's just what I've been given to work with. Sometimes, I'm working on something that I stage, but then an immediate change needs to be made, so I needed some way to pull my changes in order to clean the repo.</em>)</p>

<p>I'm thinking that the easiest way to do so is if each feature branch has only one commit. Then I could <code>revert</code> that commit. So naturally, I am thinking of squashing all commits of a feature branch into one, prior to merging it into <code>master</code>.</p>

<p>So now my workflow would look like:</p>

<ol>
<li>Create new feature branch</li>
<li>Work on feature branch</li>
<li>Commit often</li>
<li>Once feature is complete <strong>git rebase -i HEAD~number_of_commits</strong> (or if remote branch is available, <strong>origin/feature_branch</strong>)</li>
</ol>

<p>Is there any issues with this logic? Does it go against any best practices? I did some testing myself and the whole workflow seems to run smoothly and solves my problem, but I wanted to run the idea by other (smarter) Git-ers to see if there is anything wrong with it.</p>

<p>Thanks!</p>
","5","401393","0","0"
"4581740","459950","2011-01-03 02:36:15","40","18641","<git><github><git-merge><git-commit>","Pull in changes from a Github fork","<p>Someone forked a Github project of mine and made some changes. How can I merge the changes back in to my upstream version? </p>

<p>Also, is it possible to pull in just a specific commit?</p>

<p>What I'm looking is if there is a way to pull a specific commit instead of the entire branch.</p>
","3","459950","0","0"
"60918976","","2020-03-29 18:33:57","0","63","<git><github><git-merge><git-commit>","How to undo faulty commit without delete","<p>Instead of deleting a faulty commit from master branch, is there a good way to add a new commit on top that somehow reverts the same changes as the faulty commit introduced?</p>
<p>In other words, we merged a commit that introduced a regression so we want to &quot;undo that commit&quot; but we'd rather not delete the commit somehow since then existing feature branches would have to be forced merged/pushed to master.</p>
","1","","0","0"
"16515594","1344509","2013-05-13 05:51:30","1","124","<eclipse><git><aptana><git-commit>","Git duplicates commit files","<p>I'm using Aptana plugin for Eclipse. When I try to commit, it doubles file, i.e one exactly file appears couple times. If I have 10 files to commit, it shows 20 files (1 file 2 times). I tried close and open project, Clean by Eclipse (<code>Project</code> menu -> <code>Clean</code>), Refresh project. Not helped. Even it shows one file 3 times. How can I show files correctly, only once? </p>

<p><strong>EDIT</strong><br/>
It's screenshot of duplicated files:<br/><br/>
<img src=""https://i.stack.imgur.com/Vtzev.jpg"" alt=""enter image description here""></p>
","5","1344509","0","0"
"61068462","13242035","2020-04-06 20:31:02","1","1245","<git><github><git-commit><git-lfs><git-add>","Git commit adds/removes files not staged for commit","<p>I'm fairly new to using git and I've dug myself in to a hole a couple of times where one of my git commits ends up modifying files that do not show up when doing a <code>git status</code>.  I'm curious if anyone knows might cause my local repository to get in to such a state since I seem to need to re-clone the repository to fix my issue.</p>

<p>An example git status with one unstaged file.</p>

<pre><code>User@User-DESKTOP:~/code/tap$ git status                                                    
On branch what-is-programming                                                            
Changes not staged for commit:                                                           
  (use ""git add &lt;file&gt;..."" to update what will be committed)                             
  (use ""git restore &lt;file&gt;..."" to discard changes in working directory)                  
        modified:   exampleFile.cs   

no changes added to commit (use ""git add"" and/or ""git commit -a"")       
</code></pre>

<p>Then I add the file</p>

<pre><code>User@User-DESKTOP:~/code/tap$ git add .
warning: LF will be replaced by CRLF in exampleFile.cs
The file will have its original line endings in your working directory
</code></pre>

<p>Then I commit the file</p>

<pre><code>User@User-DESKTOP:~/code/tap$ git commit -m ""some message"" [what-is-programming bd86d6b] some message
 3 files changed, 88 insertions(+), 186 deletions(-)
 create mode 100644 someFileIDontExpect.cs
 delete mode 100644 anotherFileIDontExpect.cs
</code></pre>

<p>If I do a diff against the previous commit it shows what I expect</p>

<pre><code>User@User-DESKTOP:~/code/tap$ git diff --name-status HEAD~
M       exampleFile.cs
</code></pre>

<p>Same if I diff against master</p>

<pre><code>User@User-DESKTOP:~/code/tap$ git diff --name-status master
M       exampleFile.cs
</code></pre>

<p>But when I push to github, it shows me creating someFileIDontExpect.cs and deleting anotherFileIDontExpect.cs.</p>

<p>The potential places I see me doing ""weird"" stuff that I sometimes do a <code>git commit -m ""WIP""</code> and then later a <code>git reset --soft HEAD~</code> to continue working on the WIP commit.  I've found the workflow better than <code>git stash</code> but maybe it creates issues?  I'm not exactly sure how to figure out what is broken since diffing my commit seems fine but once it gets to github it is very much in an unexpected state.</p>

<p>We're also using git-lfs but this is occurring with source files so I'm not sure it's having an impact.</p>

<p>Thanks for any insight you could provide!  I'm very curious how I'm breaking things.</p>

<h1>EDIT</h1>

<p>@mkrieger1 you're right that <code>git add .</code> adds all the files in my working directory but <code>git status</code> did not show any other unstaged files.  Also the git diff of my commit shows no other added or modified files.</p>

<p>@matt I'm not sure I follow. <code>git diff --name-status HEAD~</code> should list the added or modified files from the previous commit right?  It shows only the <code>exampleFile.cs</code> as being modified even though my commit message showed <code>someFileIDontExpect.cs</code> being created and <code>anotherFileIDontExpect.cs</code> being deleted.  I expect <code>git diff --name-status master</code> to show me the changes in my branch <code>what-is-programming</code> that are not in <code>master</code> and they also show just <code>exampleFile.cs</code> as being modified.  My local copy of <code>master</code> matches the remote so why when I push do the two other files show up in a pull request?  Is there something I should be diffing against to see what will show up in my pull request?</p>
","10","13242035","",""
"69099728","13177619","2021-09-08 08:39:16","1","246","<git><azure-devops><git-commit><azure-devops-rest-api>","How to automate commit of code architecture to an Azure DevOps Repository?","<p>I am working on an automation, that will create repositories and pipelines based on standards and requirements. To create repositories and pipelines, I have used Azure DevOps REST APIs and it is working fine.</p>
<p>Now, along with creating repo, the requirement is to also commit a code structure - basic architecture of application - as initial commit. Using Azure DevOps REST API, I can find that we need to mention file by file and there is no option for bulk commit - <a href=""https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pushes/create?view=azure-devops-rest-6.0"" rel=""nofollow noreferrer"">Pushes - Create</a>.</p>
<p>I have also tried forking the seed/base repo while creating the new one but this will also bring the commit history and repo properties of base repo to new one and it is not expected. Also, the icon of forked repo is different and I believe, it is treated differently than other repo.</p>
<p>Can anyone please guide me on how to approach this requirement and how can it be implemented - to automate commiting a bulk code (base architecture) to a newly created repo?</p>
","2","13177619","",""
"32417174","4801219","2015-09-05 20:01:06","2","2522","<git><git-commit>","git - Remove commit before HEAD","<p>Okay I am new to Git and would like to know how to remove a commit before the HEAD. For instance-:</p>

<pre><code>commit foo (This is the HEAD)

commit bar (This is what I want to remove)
</code></pre>

<p>How do I delete <code>commit bar</code> entirely from this branch but keep <code>commit foo</code>?</p>
","0","4801219","",""
"16588170","","2013-05-16 13:00:29","0","470","<github><git-commit>","Get lost commits on GIT","<p>Me and my partners are working on the git remote and both have write access to the remote.</p>

<p>He did some changes, commited them and pushed them to remote,</p>

<p>I did few changes in my machine and without fetching/pulling just force pushed my commits.
Which in turn resulted in lost of the commits of my partner.</p>

<p>So I have 2 questions:</p>

<p><strong>1. Is there any way to get those commits back?</strong></p>

<p><strong>2. After my push, will my partners fetch, pull remove the changes he did, from his machine as well?</strong></p>
","0","","",""
"16595908","1570307","2013-05-16 19:31:53","62","21112","<git><vim><git-commit>","Exit Vim without committing changes in Git","<p>When I use <code>git commit --amend</code> or <code>git rebase -i</code>, vim opens up for me to make changes. If I then change my mind and exit vim without making any changes, a commit is still made which shows up in <code>git reflog</code>.</p>

<p>How do I exit the editor without committing anything?</p>
","4","1570307","0","0"
"50546043","9549922","2018-05-26 18:50:34","0","1161","<git><git-bash><git-commit>","Git: What happens if you don't commit before closing?","<p>I'm surprised I couldn't find a more thorough explanation of the nature of staging/commits so I'm asking myself. I'm new to GitHub (and don't have Bash downloaded on this computer, so I'd rather have people answer).</p>

<p>Specifically, let's say you are working in a project directory with GitBash. You make some basic changes and save. Without staging or committing anything, you close all your applications. What happens to the changes you made? Do they get wiped or do changes stay? I guess the same question applies for if you committed your things but then exited out. </p>

<p>Are ""commits"" stored in a folder somewhere? Is the ""staging area"" just a temporary Bash thing or is there a physical folder for that too?</p>

<p>Would you have to re-commit changes if you exit out?</p>

<p>Thanks for the help.</p>
","1","9549922","",""
"50562840","675100","2018-05-28 09:12:24","2","203","<git><git-commit><git-log><git-tag>","How to list tags matching pattern since X date?","<p>I need to list all tags matching pattern <code>X</code> that have been created after <code>Y</code> date.</p>

<p>I've tried the following: </p>

<pre><code>git show --quiet $(git rev-parse --tags=""linux*"" --since=""1 month"")
</code></pre>

<p>but this lists ALL tags matching <code>linux*</code> in my repo.</p>

<p>I've also tried:</p>

<pre><code>git show --quiet $(git rev-list --tags=""linux*"" --since=""1 month"")
</code></pre>

<p>this lists all tags since last month but doesn't take the pattern into account.</p>
","0","675100","",""
"41879242","4606981","2017-01-26 17:19:14","1","8087","<git><rebase><git-commit><git-squash>","Edit commit message after squashing","<p>I want to implement featureX and I have committed it after writing it by  </p>

<pre><code>git commit -m ""featureX""
</code></pre>

<p>After that I have done some changes and committed by   </p>

<pre><code>git commit -m ""yo1""
</code></pre>

<p>squashed the commit by</p>

<pre><code>git rebase -i HEAD~2
</code></pre>

<p>again some changes and committed by </p>

<pre><code>git commit -m ""yo1""
</code></pre>

<p>squashed the commit by</p>

<pre><code>git rebase -i HEAD~3
</code></pre>

<p>Now git log shows - </p>

<pre><code>featureX
yo1
yo2
</code></pre>

<p>I want to change commit message yo1 and yo2 to change1 and change2.</p>

<p>Also, I want to know that how can I see the changes that I have done in yo1 and yo2 because I have forgot what changes I have done in yo1 and yo2.</p>
","0","4606981","",""
"50567577","9859038","2018-05-28 13:28:31","0","89","<c#><git><visual-studio><gitlab><git-commit>","How do I commit at the same time to multiple VS solutions that have files in common?","<p>I have two Visual Studio C# solutions that share some .cs projects, and I wanna know if there's a way to, if I commit and push (to GitLab) on one solution, the other one also gets updated, so I don't need to commit on both separately.</p>

<p>I wanna have one repository for solution A and one for solution B, but they must have a project in common (a few projects actually). If I'm coding on these projects on solution A and commit them, are they/how do they get updated on solution B repository?</p>
","5","9859038","",""
"41881722","6179733","2017-01-26 19:48:12","4","7060","<git-commit><git-config><git>","How can I force ""git commit -s"" using ""git commit"" command?","<p>I'm looking for a way to write the <code>Signed-off-by:</code> tag automatically when I commit.</p>

<p>I tried configuring it through the .git/config file <a href=""https://harryrschwartz.com/2014/11/01/automatically-signing-your-git-commits.html"" rel=""nofollow noreferrer"">(Reference)</a>. I put these lines of code:</p>

<pre><code>[alias]
    commit = commit -s
</code></pre>

<p>This did not work. As commented below, you can not edit git's own alias (like commit).<a href=""https://git-scm.com/docs/git-config#git-config-alias"" rel=""nofollow noreferrer"">(Reference)</a></p>

<p>I also tried using the command <a href=""https://stackoverflow.com/questions/21302034/how-to-sign-off-signed-off-by-a-git-commit-in-pycharm"">(Reference)</a>:
<code>git config --global format.signoff true</code></p>

<p>Also had no effect. <a href=""https://stackoverflow.com/questions/15015894/git-add-signed-off-by-line-using-format-signoff-not-working/15018905#15018905"">This explains</a> why.</p>

<p>I'm looking for any solution that automatically places the tag and allows me to edit the commit message directly on git, without having to use a system alias.</p>
","5","6179733","0","0"
"50570615","3745022","2018-05-28 16:45:44","0","902","<c#><git><tfs><git-commit><tfs-sdk>","How to determine whether a branch contains a commit with TFS WebApi client library?","<p>Basically I'd like to find an API alternative to <a href=""https://stackoverflow.com/questions/43535132/given-a-commit-id-how-to-determine-if-current-branch-contains-the-commit/43535152#43535152"">git branch --contains </a> with TFS WebApi <a href=""https://www.nuget.org/packages/Microsoft.TeamFoundationServer.Client/15.112.1"" rel=""nofollow noreferrer"">client libraries</a>:</p>

<pre><code>var commitId = ""123456789abcdef"";
var branchName = ""branch"";
var tpc = new TfsTeamProjectCollection(new Uri(""""));
var git = tpc.GetClient&lt;GitHttpClient&gt;();
var isInBranch = git.?????(branchName, commitId);
</code></pre>

<p>Is there a way to accomplish it? </p>

<p>Or should I rather operate on a local clone with git.exe/libgit instead (the repository in question is a bit too large and, if possible, I'd much prefer to avoid cloning it)?</p>
","0","3745022","",""
"16738949","1044650","2013-05-24 15:50:26","19","11389","<git><automation><git-commit>","Go back N commits in Git to find commit that causes test regressions","<p>Is there a command that will let me checkout a commit based on its distance from the current commit instead of using commit IDs? </p>

<h3>Use Case</h3>

<p>Basically I am thinking of setting up a cron job type script to do the following on a build server:</p>

<ul>
<li>Pull down the latest of a specific git branch (git pull dev).</li>
<li>Build it, run the tests. </li>
<li>If the pass percentage is lower than the last stored percentage:

<ul>
<li><strong>Recursively go back a commit, build, run tests, until it finds the commit where the percentage changed.</strong></li>
<li>Log the commits that introduced regressions.</li>
</ul></li>
</ul>

<p>I have a rough idea for how this would hinge together but it won't work unless I can go back one commit periodically.</p>

<p>If there is no specific command I suppose I could grep the commit log and take the first one each time?</p>

<p>I appreciate any ideas or help!</p>

<p>Unlike:
<a href=""https://stackoverflow.com/questions/927358/how-to-undo-last-commits-in-git"">How to undo last commit(s) in Git?</a></p>

<p>I want to go back ""N"" number of commits.</p>
","4","1044650","0","0"
"23300574","2938344","2014-04-25 18:36:07","3","2022","<github><git-commit>","I can't I see my latest commit on github?","<p>1) I push a commit to Github with <code>git push origin master</code>.  </p>

<pre><code>C:(...)[master]&gt; git log
commit 35c4d94b2c6be21d2928d3725cc637090b48463c
... 
commit ed38979291835368e25466a136b2a0c84a56818c
...
</code></pre>

<p>2) On <strong>github.com</strong>, I refresh my project's commits page but can't see my latest commit.   </p>
","4","2938344","",""
"23301019","1672804","2014-04-25 19:00:52","21","23611","<git><undo><git-commit>","Git Revert Not Working","<p>So i've got a develop branch with a commit that I want to revert. So I type in <code>git revert &lt;commit-hash&gt;</code></p>

<p>But when it runs it says:</p>

<pre><code>$ git revert 165702b305
On branch develop
nothing to commit, working directory clean
</code></pre>

<p>This commit has been tracked down as the culprit of a bug and id like to revert it, but for some reason its not working. Could it be corrupted somehow? Other answers and searches have not been able to help.</p>
","4","1672804","0","0"
"4850717","457036","2011-01-31 12:14:48","901","1091574","<git><git-reset><git-commit>","How to cancel a local git commit?","<p>My issue is I have changed a file e.g.: README, added a new line '<em>this for my testing line</em>' and saved the file, then I issued the following commands:</p>
<pre><code>git status

# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#   modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)


git add README

git commit -a -m 'To add new line to readme'
</code></pre>
<p>I didn't push the code to GitHub. Now I want to cancel this commit.</p>
<p>For this, I used</p>
<pre><code>git reset --hard HEAD~1
</code></pre>
<p>But I lost the newly added line '<em>this for my testing line</em>' from the README file.
This should not happen. I need the content to be there. <strong>Is there a way to retain the content and cancel my local commit?</strong></p>
","2","457036","0","0"
"16765502","","2013-05-27 02:06:50","0","75","<file><github><git-commit><git-diff><git-log>","Comparing a commit to its parent to see changes to a file","<p>When you run <code>git diff (specific commit)^..(specific commit)</code>, or in other words when you compare a commit to its parent, how do you know what was changed on the file. What does the change for that specific commit look like? </p>
","1","","",""
"5032374","72530","2011-02-17 17:29:52","69","46817","<git><git-commit><git-amend>","Accidentally pushed commit: change git commit message","<p>In my local repo I have one commit with an incorrect commit message.</p>

<p>I've already published the incorrect commit message with <code>git push</code>.</p>

<p>Now the remote repo (which is GitHub-hosted) has the incorrect commit message, too.</p>

<p>I've already tried <code>git commit --amend</code>, but found that it will not work for me in this situation because I've made additional commits since the incorrect one.</p>

<p>How would you fix this situation?</p>
","2","72530","0","0"
"69147042","16595981","2021-09-11 22:06:36","0","367","<git><github><netbeans><git-commit><git-push>","Issue with Pushing Changes to GitHub with NetBeans","<p>I am currently using NetBeans with GitHub to save my project. However, I've been having some trouble committing the changes. It keeps producing errors that I have been unable to solve, even after looking them up on the internet. I have attached a video of the errors.</p>
<p><a href=""https://user-images.githubusercontent.com/79435335/132960447-f1eb2bfc-9a7a-45ec-b31d-1cf4ead62192.mp4"" rel=""nofollow noreferrer"">Video of the Errors</a></p>
<p>Edit: <code>git status</code> prints:</p>
<pre><code>On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commits each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)

Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    modified:   pom.xml
    new file:   runPom.xml
    modified:   src/ios/Default-Info.plist
    new file:   src/ios/assets/Assets.xcassets/AppIcon.appiconset/Gluon-ipad-app-icon-76@2x.png
    modified:   src/ios/assets/iTunesArtwork
    modified:   src/ios/assets/iTunesArtwork@2x
    renamed:    src/main/java/com/mysecondapplication/DrawerManager.java -&gt; src/main/java/com/superpengoo/DrawerManager.java
    renamed:    src/main/java/com/mysecondapplication/MySecondApplication.java -&gt; src/main/java/com/superpengoo/Therabot.java
    renamed:    src/main/java/com/mysecondapplication/utils/BrowseUtils.java -&gt; src/main/java/com/superpengoo/utils/BrowseUtils.java
    renamed:    src/main/java/com/mysecondapplication/views/OctonaryView.java -&gt; src/main/java/com/superpengoo/views/OctonaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/PrimaryView.java -&gt; src/main/java/com/superpengoo/views/PrimaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/QuaternaryView.java -&gt; src/main/java/com/superpengoo/views/QuaternaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/QuinaryView.java -&gt; src/main/java/com/superpengoo/views/QuinaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/SecondaryView.java -&gt; src/main/java/com/superpengoo/views/SecondaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/SenaryView.java -&gt; src/main/java/com/superpengoo/views/SenaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/SeptenaryView.java -&gt; src/main/java/com/superpengoo/views/SeptenaryView.java
    renamed:    src/main/java/com/mysecondapplication/views/Session.java -&gt; src/main/java/com/superpengoo/views/Session.java
    renamed:    src/main/java/com/mysecondapplication/views/Sessions.java -&gt; src/main/java/com/superpengoo/views/Sessions.java
    new file:   src/main/java/com/superpengoo/views/Subsession.java
    renamed:    src/main/java/com/mysecondapplication/views/TertiaryView.java -&gt; src/main/java/com/superpengoo/views/TertiaryView.java
    modified:   src/main/resources/META-INF/native-image/jni-config.json
    modified:   src/main/resources/META-INF/native-image/reflect-config.json
    modified:   src/main/resources/META-INF/native-image/resource-config.json
    modified:   src/main/resources/META-INF/native-image/serialization-config.json
    renamed:    src/main/resources/com/mysecondapplication/style.css -&gt; src/main/resources/com/superpengoo/style.css
    renamed:    src/main/resources/com/mysecondapplication/views/octonary.css -&gt; src/main/resources/com/superpengoo/views/octonary.css
    renamed:    src/main/resources/com/mysecondapplication/views/primary.css -&gt; src/main/resources/com/superpengoo/views/primary.css
    renamed:    src/main/resources/com/mysecondapplication/views/quaternary.css -&gt; src/main/resources/com/superpengoo/views/quaternary.css
    renamed:    src/main/resources/com/mysecondapplication/views/quinary.css -&gt; src/main/resources/com/superpengoo/views/quinary.css
    renamed:    src/main/resources/com/mysecondapplication/views/secondary.css -&gt; src/main/resources/com/superpengoo/views/secondary.css
    renamed:    src/main/resources/com/mysecondapplication/views/senary.css -&gt; src/main/resources/com/superpengoo/views/senary.css
    renamed:    src/main/resources/com/mysecondapplication/views/septenary.css -&gt; src/main/resources/com/superpengoo/views/septenary.css
    renamed:    src/main/resources/com/mysecondapplication/views/tertiary.css -&gt; src/main/resources/com/superpengoo/views/tertiary.css

Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    deleted:    src/ios/assets/Assets.xcassets/AppIcon.appiconset/Gluon-ipad-app-icon-76@2x.jpeg

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    .DS_Store
    src/.DS_Store
    src/ios/.DS_Store
    src/ios/assets/.DS_Store
    src/ios/assets/Assets.xcassets/.DS_Store
    src/ios/assets/Assets.xcassets/AppIcon.appiconset/.DS_Store
    src/main/.DS_Store
    src/main/java/.DS_Store
    src/main/java/com/.DS_Store
    src/main/java/com/superpengoo/.DS_Store
    src/main/resources/.DS_Store
    src/main/resources/META-INF/.DS_Store
    src/test/
    target/
</code></pre>
<p>Edit2: new <code>git status</code> output:</p>
<pre><code>On branch master
Your branch and 'origin/master' have diverged,
and have 3 and 1 different commits each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    .DS_Store
    src/.DS_Store
    src/ios/.DS_Store
    src/ios/assets/.DS_Store
    src/ios/assets/Assets.xcassets/.DS_Store
    src/ios/assets/Assets.xcassets/AppIcon.appiconset/.DS_Store
    src/main/.DS_Store
    src/main/java/.DS_Store
    src/main/java/com/.DS_Store
    src/main/java/com/superpengoo/.DS_Store
    src/main/resources/.DS_Store
    src/main/resources/META-INF/.DS_Store
    src/test/
    target/

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
superpengooooo@Ariettas-MacBook-Pro Therabot % git add
Nothing specified, nothing added.
hint: Maybe you wanted to say 'git add .'?
hint: Turn this message off by running
hint: &quot;git config advice.addEmptyPathspec false&quot;
superpengooooo@Ariettas-MacBook-Pro Therabot % git add .DS_Store
        src/.DS_Store
        src/ios/.DS_Store
        src/ios/assets/.DS_Store
        src/ios/assets/Assets.xcassets/.DS_Store
        src/ios/assets/Assets.xcassets/AppIcon.appiconset/.DS_Store
        src/main/.DS_Store
        src/main/java/.DS_Store
        src/main/java/com/.DS_Store
        src/main/java/com/superpengoo/.DS_Store
        src/main/resources/.DS_Store
        src/main/resources/META-INF/.DS_Store
        src/test/
        target/
zsh: permission denied: src/.DS_Store
zsh: permission denied: src/ios/.DS_Store
zsh: permission denied: src/ios/assets/.DS_Store
zsh: permission denied: src/ios/assets/Assets.xcassets/.DS_Store
zsh: permission denied: src/ios/assets/Assets.xcassets/AppIcon.appiconset/.DS_Store
zsh: permission denied: src/main/.DS_Store
zsh: permission denied: src/main/java/.DS_Store
zsh: permission denied: src/main/java/com/.DS_Store
zsh: permission denied: src/main/java/com/superpengoo/.DS_Store
zsh: permission denied: src/main/resources/.DS_Store
zsh: permission denied: src/main/resources/META-INF/.DS_Store
zsh: permission denied: src/test/
zsh: permission denied: target/
</code></pre>
","0","16595981","0","0"
"16801989","1203565","2013-05-28 21:43:34","1","1861","<git><git-commit>","git add . not including all the directory content .","<p>I m trying to push a repository to github.com . After following their instructions </p>

<pre><code>touch README.md
git init
git add README.md
git commit -m ""first commit""
git remote add origin https://github.com/VihaanVerma89/RandomSolutions.git
git push -u origin master
</code></pre>

<p>I see that my project bin and src folder are empty on github  , a similar <a href=""https://stackoverflow.com/questions/4425082/git-commit-directory"">problem</a> solved this issue by </p>

<pre><code>git add .
</code></pre>

<p>However after following this advice I still see that some files are not getting staged for commit. gitk shows Local uncommited changes, not checked to index (check the last image).
<img src=""https://i.stack.imgur.com/6Ji57.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/BbHdl.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/bvUfr.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/9BNcG.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/w6UQs.png"" alt=""enter image description here""></p>
","8","1203565","",""
"16845572","1306419","2013-05-30 20:44:34","0","89","<git><github><git-push><git-commit>","How to get rid of a particular commit( after being pushed to git hub)","<p>Currently, in one of my branch, I have two commits <code>commit old</code> and <code>commit latest</code>.  <code>commit latest</code> was done after the <code>commit old</code>. Now, I want to merge only <code>commit latest</code> to the master. I don't want any changes the <code>commit old</code> will do. How can I remove a particular selected commit from github? After reading other answers, I found that I cannot do directly from github. I need to first revert back the changes on my local branch and then make a push again? Its confusing me how can I only revert changes of a particular commit and still keep the changes of my latest commit and if I do that what I need to do after it?</p>

<p>I would really appreciate any help or link. I am new to git/github. </p>
","3","1306419","",""
"61269830","10988704","2020-04-17 10:51:00","-2","323","<bitbucket><git-commit><git-amend><git>","Git - Adding more changes to an old commit","<p>I have a git branch called 'AAA'. I made my initial commit &amp; created a pull request of this branch yesterday. But today after reviewing comments, I have to do some changes to my code.</p>

<p>I done the changes. Then I looked at remote repository commit list and I found one new commit has been done.</p>

<p>So how can I commit my new changes to the remote branch. Can anyone help me on this?</p>
","2","10988704","",""
"16877530","1401900","2013-06-01 21:40:37","35","21910","<git><github><git-commit>","Completely remove a file from whole git repository","<p>Using git for a project, I accidentally added to a commit a big <code>.zip</code> file. I didn't notice until I started uploading it to github. When I noticed, I hit <code>ctrl-c</code>, <code>git remove</code>, <code>git commit</code> and uploaded it again (now with the file untracked).</p>

<p>I know that this wasn't the right choice to do, because once I committed the <code>.zip</code>, it stays in the repo until I revert the commit, but sadly I didn't.</p>

<p>Now, when someone tries to download from the repo, it takes a lot of time to do it, sometimes yields <code>git the remote end hung up unexpectedly</code> (which I've read can be solved by doing some <code>git config</code>) and is very annoying.</p>

<p>My point is: <strong>is there a way to tell further pull/fetch request that forget this specific file in this specific commit version?</strong></p>
","3","1401900","0","0"
"16899243","1115833","2013-06-03 14:33:26","17","54222","<git><bitbucket><git-commit>","git rejected push non-fast-forward","<p>I am quite new to git, and I had been working on a small side project for the last 2 months and had been pushing stuff onto bitbucket with no problems. A couple of days ago, I zipped my project folder (since I had to reinstall my Linux OS) and now unzipped this after my reinstallation of Linux OS.</p>

<p>So, now, I went to my project folder, kept happily working and finally did:</p>

<pre><code>git add -A &amp;&amp; git commit -m ""modified code"" &amp;&amp; git push origin master
</code></pre>

<p>..which is what I usually do..</p>

<p>and I get:</p>

<pre><code>To https://johnsproject@bitbucket.org/johnsproject/proj.git
! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://johnsproject@bitbucket.org/johnsproject/proj.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I have had a look at a few SO questions where they suggest the use of a force flag <code>-f</code> - but I am unsure if I should be doing this.</p>

<p>p.s: I am on the master branch - which is the <code>only</code> branch on my repo.</p>

<p>Would really appreciate if anyone could point me in the right direction here.</p>

<p>Thanks.</p>
","3","1115833","0","0"
"61283229","13232323","2020-04-18 01:33:36","0","211","<git><gitlab><git-commit><verify>","Is there a way to go back and verify commits on github?","<p>Is it possible to verify old commits on github I've already pushed? Simply because I want them to appear on my activity graph</p>
","0","13232323","",""
"50615057","1433268","2018-05-31 00:28:02","-1","463","<git><git-commit>","Git: How can I jump back to a previous commit, thus undoing recent changes I've made?","<p>I've made 4 commits in my branch and pushed to Github. The last 3 of those commits contain changes that should not have been made. I want to 'jump back' to the first commit, removing all my un-wanted changes from the branch completely.</p>

<p>So far I have tried</p>

<pre><code>git reset --hard 6b9b9baa6758598ca2ed48d5e029b4b5a2a7f194
</code></pre>

<p>and</p>

<pre><code>git revert &lt;SHA&gt;
</code></pre>

<p>but these seem to do nothing - the unwanted changes remain in my pull request.</p>

<p>Does anyone know how I could go about this?</p>

<p>UPDATE: 
I need to go back to commit 6b9b9baa6758598ca2ed48d5e029b4b5a2a7f194. Log looks like:</p>

<pre><code>commit 0a90687022fb458de36ac3ff3b3fd3f3920f6b0d
Author: Me
Date:   Thu May 31 10:04:36 2018 +1000

    Removed svg

commit 7dbcceb6e294572a531d84837753f5698bf192f6
Author: Me
Date:   Thu May 31 10:02:12 2018 +1000

    Removed icon from icons directory

commit 97cfd16c87ea280a4e6a7570272157e86195542e
Author: Me
Date:   Wed May 30 17:27:55 2018 +1000

     Added icons

commit 6b9b9baa6758598ca2ed48d5e029b4b5a2a7f194
Author: Me
Date:   Wed May 30 16:27:33 2018 +1000

    Updated css
</code></pre>
","3","1433268","",""
"23525677","1740488","2014-05-07 18:36:13","5","3102","<github><git-commit><format-patch>","How to quickly get a patch from a specific commit in GitHub?","<p>I have a specific commit on a GitHub repository from which I want to extract a patch to apply in a different place, similar what I would get when using <code>git format-patch</code>.</p>

<p>I am lazy or the repository is too big and I don't want to fetch the whole repository just to extract that patch.</p>

<p>How can I do this quickly?</p>
","7","1740488","0","0"
"61452435","5260488","2020-04-27 05:47:10","0","177","<git><github><git-commit><git-push>","How to maintain same folder structure in github with git commands","<p>I want to <code>track</code> my project folder and its subfolder with <code>node modules</code> together with <code>git add</code>.</p>

<p>But it seems I can't push from my <code>parent</code> to git .</p>

<p>How can I commit my changes into same <code>repository</code> ?</p>

<p>What I am facing issue here if I push from parent the <code>client</code> folder is not updating for the first time. 
If I make commit from <code>clint</code> the parent is removed fully from my git.
What changes i needs to make here.</p>

<p>any suggestion.</p>

<p>//gitignore.</p>

<pre><code>node_modules
package-lock.json
.env
</code></pre>

<p><a href=""https://i.stack.imgur.com/ulETS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ulETS.png"" alt=""Folder structure""></a></p>
","2","5260488","",""
"32543915","1812993","2015-09-12 21:27:16","0","3940","<git><github><merge><git-commit>","github merge up to a specific commit","<p>Git allows one to merge up to a specific commit. For example, merging the master branch up to a commit on dev which is not necessarily the latest commit. The command for this is as follows:</p>

<pre><code>git merge &lt;commitId&gt;
</code></pre>

<p>The github web application allows one to manage their branches by kicking of a merge. One accomplishes this using ""Create a pull request"" under the ""Compare Changes"" view. I'm confused by the interface because, if I specify a changeset rather than a branch for comparison, github will not give me the option of starting a pull request (though it will perform the comparison).  </p>

<p>Does anyone know whether it is possible to accomplish a merge up to a specific changeset or tag from the github webapp? </p>
","0","1812993","0","0"
"32547405","5303309","2015-09-13 07:40:05","5","4892","<git><git-commit>","Git commit fails: ""Please supply the message using either -m or -F option.""","<p>When I type the git commit command to commit my file, I get this error message:</p>
<blockquote>
<p>Microsoft Visual Studio: Microsoft: command not found</p>
<p>error: there was a problem with the core editor 'Microsoft Visual Studio'.</p>
<p>Please supply the message using either -m or -F option.</p>
</blockquote>
","3","5303309","0","0"
"50632722","1790753","2018-05-31 21:01:00","15","21725","<git><git-rebase><git-commit><git-amend>","How can I edit an old git commit message programmatically?","<p>You can programmatically edit only the last commit message:</p>

<pre><code>git commit --amend -m 'xxxxxxx'
</code></pre>

<p>Or a random commit interactively:</p>

<pre><code>git rebase -i HEAD~n
# Vim opens up, select the commit you want to modify, and change the word ""pick"" for ""edit""
git commit --amend -m ""Changing an old commit message!""
git rebase --continue
</code></pre>

<p>How do I combine both? I want to change a message programmatically, but to a prior commit, not just the last one.</p>

<p>The commit I want to modify has already been pushed to a git server, but having other people re-sync the git project is not a concern. </p>
","10","1790753","0","0"
"42253765","6413977","2017-02-15 15:40:08","5","3532","<git><bash><travis-ci><git-commit><release-management>","Getting TravisCI to commit and push a modified file with Tags (releases)","<p>I was helped by Sir Athos (thank you greatly) earlier today on a separate question which helped me greatly. </p>

<p>I am now stuck at a point where I want to modify a simple text file and include it in my push. So basically I want to add the modified text file to a commit and push it as a commit with it's build number tag as a release. Hope I am making sense here.</p>

<p>My code to do try and do this so far is</p>

<pre><code>#!/bin/bash
YEAR=$(date +""%Y"")
MONTH=$(date +""%m"")
git config --global user.email ""${GIT_EMAIL}""
git config --global user.name ""${GIT_NAME}""
git config --global push.default simple
export GIT_TAG=v2.$YEAR-$MONTH.$TRAVIS_BUILD_NUMBER
git fetch --tags
msg=""Tag Generated from TravisCI for build $TRAVIS_BUILD_NUMBER""
echo ""$msg"" &gt;&gt; $TRAVIS_BUILD_DIR/build.txt
git add -A
if git tag $GIT_TAG -a -m ""$msg"" 2&gt;/dev/null; then
git tag $GIT_TAG -a -m ""Tag Generated from TravisCI for build $TRAVIS_BUILD_NUMBER""
git push https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG} HEAD:master &amp;&amp; git push https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG} --tags HEAD:master
ls -aR
else echo Tag already exists!; fi
</code></pre>

<p>The if ... else ... code given to me by Sir Athos earlier works 100% with it picking up if the tag exists and then either pushing if it does not exist or not pushing it it does exist.</p>

<p>I'm just stuck with now getting Travis to include the simple build.txt file which I echo $TRAVIS_BUILD_DIR into with an append.</p>

<p>What's interesting is if I add to my travis.yml deploy option like this:</p>

<p><code>file:
  - build.txt</code></p>

<p>Travis pushes the build.txt file with the release but is not committing the file. I know I'm doing and missing something really stupid here but go easy I'm new to Travis.</p>

<p><strong>Update:</strong> </p>

<p>Now I have modified my bash script as follows, removing adding the extra tag within the if statement. This now works and pushes the modified build.txt file to the repo. But once complete Travis then starts other builds with <code>untagged-cc6ebe6dbcbb13bc599c</code> and now it's throwing Travis into a loop just continuing to build and build and build. I think Travis will drive me mad yet, I know I have some logic wrong somwehere. </p>

<pre><code>    #!/bin/bash
    YEAR=$(date +""%Y"")
    MONTH=$(date +""%m"")
    git config --global user.email ""${GIT_EMAIL}""
    git config --global user.name ""${GIT_NAME}""
    git config --global push.default simple
    export GIT_TAG=v2.$YEAR-$MONTH.$TRAVIS_BUILD_NUMBER
    git fetch --tags
    msg=""Tag Generated from TravisCI for build $TRAVIS_BUILD_NUMBER""
    if git tag $GIT_TAG -a -m ""$msg"" 2&gt;/dev/null; then
    echo ""$msg"" &gt;&gt; $TRAVIS_BUILD_DIR/build.txt
    git add $TRAVIS_BUILD_DIR/build.txt
    git commit -m ""Update build version file with $TRAVIS_BUILD_NUMBER""
$TRAVIS_BUILD_NUMBER""
    git push https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG} HEAD:master &amp;&amp; git push https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG} --tags HEAD:master
    ls -aR
    else echo Tag already exists!; fi
</code></pre>

<p>I think I must re-look at this with my travis.yml in the morning and work on doing things before_deploy and then use deploy to do the final push. Think I have figured out why I am causing Travis to loop non-stop. Have disabled it for tonight so Travis doesn't go mental all night long.</p>
","0","6413977","0","0"
"69343504","10961317","2021-09-27 08:32:34","0","104","<github><git-bash><git-commit><git-push>","How do I commit my code to github via gitbash?","<p>When I try to do so I face the below issue</p>
<p><a href=""https://i.stack.imgur.com/1uvPZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1uvPZ.png"" alt=""enter image description here"" /></a></p>
","3","10961317","",""
"69202915","15150677","2021-09-16 05:45:27","-1","1516","<git><github><git-bash><git-commit><git-checkout>","Unable to do ""git checkout main""","<p>Whenever I am trying to run:</p>
<pre><code>git checkout main
</code></pre>
<p>I am getting an error:</p>
<pre><code>error: The following untracked working tree files would be overwritten by checkout:
    README.md
Please move or remove them before you switch branches.
Aborting
</code></pre>
<p>I have tried doing the following steps:</p>
<ol>
<li>
<pre><code> git rm --cached README.md
 git checkout main 
</code></pre>
<p>Didn't work.</p>
</li>
<li>
<pre><code> git add -all
 git commit -m &quot;initial commit&quot;
 git checkout main 
</code></pre>
<p>Still the same output.</p>
</li>
</ol>
","1","15150677","0","0"
"32574276","2605112","2015-09-14 21:31:13","3","253","<git><github><git-branch><git-commit><git-cherry-pick>","Is a new branch necessary before git cherry pick?","<p>I've been following this example <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html"" rel=""nofollow"">here</a>, and it shows that you create a temporary branch before you use <code>git cherry-pick</code>, and then you cherry pick onto that temporary branch.  </p>

<p>In the example, the temporary branch is called <code>newbar</code>, and it branches off from <code>foo</code>.  </p>

<p>Is it necessary to have the temporary branch?  Or can you just cherry pick from <code>foo</code>?  The example doesn't make it clear the purpose of this temporary branch.  </p>
","2","2605112","",""
"50791696","9923581","2018-06-11 06:37:43","1","1721","<python><git><githooks><git-commit>","How to test pre/post commit scripts in git?","<p>I've created a git post-commit hook in python and made a file executable and placed it into .git/post-commit. </p>

<p>It works when I run it via Python. Now I want test it locally in git. How can I do that?  I can't make a commit to git locally from my computer in an easy way, right?</p>

<p>Should I copy the hook file to my server and make test commits to test it? Is there another way?</p>
","0","9923581","",""
"69347391","13776178","2021-09-27 13:21:10","0","1063","<git><bitbucket><commit><git-commit><git-push>","How can I recover last commit after git push force","<p>I have a project repository on bitbucket with master branch. This branch has some commit that have been committed by my team (the latest commit was not committed by me).</p>
<p>I just did the <code>git push --force</code> without knowing that it would delete all the commit after the latest pull I did. So now my team's commit just deleted and the latest commit was the <code>git push --force</code> I just did.</p>
<blockquote>
<p>Is there a way I could recover my team's commit after I did the <code>git push --force</code> ?</p>
</blockquote>
<p>I have read some solution and it says by doing <code>git reflog</code> then doing <code>git reset –hard HEAD@{HEAD-NUMBER}</code>. But I'm afraid, could it recover the latest commit or just recover my latest commit (not the latest commit that my team did) ?</p>
","2","13776178","0","0"
"50637753","5829906","2018-06-01 06:58:24","1","130","<git><github><git-commit><git-fetch>","git: 3 commits ahead from original repo","<p>I am new to git, so sorry for this noob question.</p>

<p>The changes which were made in original repo in GitHub by others, I updated those changes in my local copy from the original repo and committed to my forked repo, now it is showing 3 commits ahead, inspite of it being identical to the original repo, what should I do? How can I make it even with the original repo? It showing me to pull request changes which are already done in the original repo</p>

<p>I was using Github desktop
,I did the following</p>

<pre><code>1)Change Remote repository in Repository/Repository Settings/Remote/Primary Remote Repository to the the repository I have forked my repo.
2)Press ""Fetch Origin"" button on the main screen.
3)Press ""Pull Origin"" button on the main screen.
4)Change Back ""Primary Remote Repository"" to my fork repository.
5)Press ""Fetch Origin"" button on the main screen.//This step I skipped
6)Press ""Push Origin"" button on the main screen.
</code></pre>

<p>I wanted my forked repo to be identical to original repo, which I achieved, but it is showing 3 commits ahead </p>
","11","5829906","",""
"32580578","1306132","2015-09-15 07:51:20","2","652","<git><git-commit>","Why the `git commit -am` command is working with untracked file (in the documentation's samples)?","<p>Often in the Git documentation I see something like <a href=""http://git-scm.com/book/en/v1/Distributed-Git-Contributing-to-a-Project"" rel=""nofollow"">this</a>:</p>

<pre><code>$ git clone john@githost:simplegit.git
Initialized empty Git repository in /home/john/simplegit/.git/
...
$ cd simplegit/
$ vim lib/simplegit.rb
$ git commit -am 'removed invalid default value'
[master 738ee87] removed invalid default value
 1 files changed, 1 insertions(+), 1 deletions(-)
</code></pre>

<p>From <a href=""http://git-scm.com/docs/git-commit"" rel=""nofollow"">the documentation</a>:</p>

<blockquote>
  <p><strong>-a<br/>
  --all</strong></p>
  
  <p>Tell the command to automatically stage files that have 
  been modified and deleted, <strong>but new files you have not told Git 
  about are not affected</strong>.</p>
</blockquote>

<p>Pay attention, the <code>lib/simplegit.rb</code> file wasn't tracked when it was created at once. Whay the <code>-a</code> option does it tracked? I use <em>Git for Windows</em> and this sample doesn't work when I try to do the similar:</p>

<pre><code>bushm@DESKTOP-ISD2NUH MINGW64 /d/src/sample
$ git init
Initialized empty Git repository in D:/src/sample/.git/

bushm@DESKTOP-ISD2NUH MINGW64 /d/src/sample (master)
$ vim ./text.txt

bushm@DESKTOP-ISD2NUH MINGW64 /d/src/sample (master)
$ git commit -am ""First commit""
On branch master

Initial commit

Untracked files:
        text.txt

nothing added to commit but untracked files present

bushm@DESKTOP-ISD2NUH MINGW64 /d/src/sample (master)
</code></pre>
","3","1306132","0","0"
"69205509","14724869","2021-09-16 09:07:28","0","81","<github><version-control><pycharm><git-commit>","Pushes done by Pycharm or the terminal are not being counted in the commit calender of github","<p>I am using pycharm on windows 10 home edition and whenever I push a the commit , the commit is shown on the website but not on the commit calender</p>
<p>When I click on one of the repos created by pycharm , and then click on <code>commits</code> , I can see my name but there's no picture of mine beside my name . On the other hand when I make changes through the website itself like making a readme ; the calender gets updated and if i go in the <code>commits</code> tab I can see my display picture beside my name.</p>
<p>What do I do to update the calender on pushes done by pycharm</p>
","4","14724869","",""
"17106529","47738","2013-06-14 10:35:00","3","361","<visual-studio-2010><git><git-pull><git-commit>","Automatically include newly added files when pulling from GIT","<p>User 1: creates a new class and commit and push that to git.</p>

<p>User 2: does a git pull. newly created class file gets downloaded but not included in project. Has to right click and do ""Include in project""</p>

<p>Is there a way to automatically include a newly added file while doing pull from git?</p>

<p>Do I need to commit any other file (.csproj/.sln) to solve this issue?</p>

<p>IDE: Visual Studio 2010</p>
","4","47738","0","0"
"61547291","1641112","2020-05-01 17:16:55","1","58","<git><git-commit>","Amending two previous commits in a pull request with a code cleanup","<p>I've made a pull request to a git repo on github. The pull request consists of changes to three files:</p>

<ol>
<li>commit #34a3f04 - Creates a file with a new test for the patch</li>
<li>commit #e6298db - the actual patch to the code </li>
<li><p>*commit #49090b3 - changelog commit</p>

<ul>
<li>commit #3 is where HEAD is on my local repo.</li>
</ul></li>
</ol>

<p>So I screwed up and forgot to tidy up my code. So the #1 and #2 commits failed the Travis test.</p>

<p>I have since tidied up the code in the two files on my local repo. Now I want to figure out how to commit these cleanly back into the pull request. I think I have to amend the previous two commits but I'm not quite sure what the best way to pull this off is. I'm sure I will screw it up and cause myself an hour of headaches and I'm hoping to avoid that. </p>
","1","1641112","",""
"35113580","5430959","2016-01-31 11:59:00","0","39","<github><atlassian-sourcetree><git-commit><sourcetree>","Github - Set a commit to origin (using Sourcetree)?","<p>I want to set the last commit to the origin. 
(So that my origin is the same as my last commit)</p>

<p>My history looks like this: </p>

<p><a href=""https://i.stack.imgur.com/779aw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/779aw.png"" alt=""enter image description here""></a></p>

<p>What do I have to do? 
(I'm a github noob..)</p>
","0","5430959","",""
"17115832","1057413","2013-06-14 19:22:47","1","57","<git><git-branch><git-merge><git-commit>","Copy one git branch with an extra commit to another that is one behind","<p>I have the following git structure (Numbers denote commits):</p>

<pre><code>  _ 1 _ 2 _ 3 _ 4  (Branch mainline)
_|
 |_ 1 _ 2 _ 3 _ 4 _ 5 (Branch Test)
</code></pre>

<p>Thus, Test has one extra commit than mainline does. I basically need to copy over that commit to mainline. How do I do that?</p>

<p>So my end state should be:</p>

<pre><code>  _ 1 _ 2 _ 3 _ 4 _ 5 (Branch mainline)
_|
 |_ 1 _ 2 _ 3 _ 4 _ 5 (Branch Test)
</code></pre>
","0","1057413","",""
"51181096","705725","2018-07-04 21:48:10","1","112","<git><github><rebase><git-commit><git-reset>","Changing previous commit titles without using --force or --force-with-lease","<p>Here's what happened:</p>

<ol>
<li>Forked a private GH repo</li>
<li>Made some minor changes and committed</li>
<li>Made some other changes, committed and pushed to (my) <code>master</code> branch</li>
<li>Created a PR</li>
</ol>

<p>The problem is that the commits are supposed to follow a certain format to hook up w/Jira's stories and can't be merged to the original repository unless they <strong>ALL</strong> follow this format.</p>

<p>I managed to amend the previous commit using <code>git rebase -i HEAD~2</code>, but...</p>

<p><em>force push to master is disabled for this repo (and my fork) anyway</em></p>

<p>Is there a way to ""start over"" on a PR or a particular commit without using force push? It's such a small change I'm ok with just starting over and (apparently) never ever making a mistake in the commit message again because they appear to be impossible to push even to a fork?</p>

<p>All I want to do is change just one penultimate commit title. How can I accomlpish this?</p>
","0","705725","0","0"
"35119735","1046657","2016-01-31 21:31:33","0","2817","<git><github><git-commit>","How to delete zip file from GitHub","<p>I uploaded a zip file to a repository in GitHub and I found out that every time I click on this zip file, it downloads the file (does not allow to explore the content of this zip file). However, I decided to delete this zip file from the repository. I pressed the delete button and it was successfully deleted but the problem is that I found the zip file in the <code>commits</code>. I tried to delete it from the <code>commit</code> but I couldn't. How can I delete it permanently from the <code>commits</code>?</p>

<p>Thanks</p>
","1","1046657","",""
"69210621","15132136","2021-09-16 14:47:35","0","39","<git><visual-studio-code><git-commit>","Visual Studio Code Git Branches","<p>I am new to VSC and coding in general. I am currently working in Visual Studio Code to create new data on our website. However I noticed that at the end of the day, I close my computer and then reopen it the next day and continue working on the same branch. Is this normal to do? Or should I always commit my work at the end of the day? What are the disadvantages of not committing at the end of the day?</p>
","2","15132136","",""
"46599572","490315","2017-10-06 06:29:07","0","197","<git><rebase><git-commit>","Git: add, commit and rebase/squash in same operation","<p>I often find myself on a feature branch, having committed a change. Then, I figure out I have to make a change, so I:</p>

<ol>
<li>Make the change</li>
<li>Add all the file changes to the index using <code>git add -A</code></li>
<li>Commit the changes using <code>git commit -m &lt;commit message&gt;</code></li>
<li>Rebase the changes and squashing the last two commits using <code>git rebase -i HEAD~2</code>, and squashing the newest commit, so that I end up with 1 commit</li>
</ol>

<p>This is a flow I commonly use a lot, but it feels quite cumbersome and manual. Is there a smarter way of doing this, or is it more common to just create shell functions or aliases for this kind of task? I am talking about steps 2 through 4.</p>
","0","490315","",""
"46607843","4591992","2017-10-06 14:16:02","34","18438","<git><macos><git-commit><xcode9>","Xcode 9 commit: Couldn't communicate with helper application","<p>I've recently updated to OSX Sierra (from El Capitan) and to Xcode 9. I removed all compatibility issues (like autolayout issues) and would like to commit to my local gitrep now.</p>

<p>the following error appears:</p>

<p><a href=""https://i.stack.imgur.com/6kOII.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6kOII.png"" alt=""enter image description here""></a></p>

<p>I thought it might be the same bug appeared in XCode 7 mentioned here:
<a href=""https://stackoverflow.com/questions/14694662/xcode-and-git-source-control-the-working-copy-xxxxx-failed-to-commit-files"">Xcode and Git Source Control : “The working copy XXXXX failed to commit files”</a></p>

<p><a href=""https://i.stack.imgur.com/zOxxR.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zOxxR.png"" alt=""enter image description here""></a></p>

<p>But it wasn't. I tried the solution mentioned above. Username and EMail are properly set. I did save everything, tried restarting the machine and a few other minor things. Nothing worked - i can't commit.</p>

<p>Any help appreciated.</p>

<p><strong>EDIT</strong></p>

<p>I got it to work by commiting manually and adding changes before with</p>

<pre><code>git commit -a -m ""Fixes""
</code></pre>

<p>I will keep an eye on that if it happens again once i made more changes and report here if so.</p>
","1","4591992","0","0"
"28352825","3642107","2015-02-05 19:53:00","1","126","<git><git-merge><git-commit>","Easy way to keep using current HEAD in Git?","<p>I have the following situation in Git: I did a lot of refactoring and detached the head because I went back and forth between versions a few times. Because of the detached head I am no longer able to commit to the origin/master remote branch.</p>

<p><img src=""https://i.stack.imgur.com/cuMI0.png"" alt=""branches""></p>

<p>The HEAD is my version that I want to keep. What I tried is merging the origin/master remote branch into HEAD so I can commit that version back. During the merge I said I want to keep my own changes wherever there were conflicts.</p>

<p>The result was a mess with a lot of missing files. Luckily I made a file copy before the operation so I could go back to the situation that I just described.</p>

<p>Now I am stuck. I don't want to go through each and every change and decide what I want to keep (there are many). I only want to commit the lost HEAD back to origin/master, including the new directory structure. Any easy way to do that?</p>

<p>--</p>

<p>After I ran through the steps recommended by @Martin my status is now these (see comment as well):</p>

<p><img src=""https://i.stack.imgur.com/xAFzS.png"" alt=""new status""></p>
","1","3642107","",""
"10798863","766901","2012-05-29 12:08:42","1","202","<git><merge><git-extensions><git-commit>","How do I match code to Git commit, and create branch?","<p>I have a git repository on my ""DEV"" machine. A while ago, I copied some code to my PROD machine. Since then, there have been many commits in my DEV machine. However there may have been a couple of ad-hock code changes on my PROD machine that was never committed or ""Brached"" out.   </p>

<p>Question: How can I find the commit on DEV that is closest to code on PROD? </p>

<p>I then will create a branch and merge. The objective is to merge all into 1 branch. There are many files on PROD that have never been modified so maybe that will be easier, just search all commits for an exact match. </p>

<p>I use git-extensions. </p>

<p>ty. </p>
","0","766901","",""
"28357919","4354956","2015-02-06 03:05:50","1","105","<eclipse><git><weblogic><egit><git-commit>","Git: Automatically Commit on Publish or Restart of Web Aplication","<p>When developing on my local, I would like to automatically commit all outstanding changes to Git every time I republishing my web project in Eclipse. This way I can get a good view of the steps that I took in my development activities. I will of course rebase before pushing to the public repository. I only want to use this for local history.</p>

<p>Some details:</p>

<ul>
<li>Eclipse</li>
<li>Weblogic 10.3.5</li>
<li>Web Project</li>
</ul>

<p>I am looking for a solution that will not require me to change the project itself, so any solution that requires changes to my Servlet class, or to the web.xml will not be satisfactory, although I guess I can do that as a last resort.</p>

<p><strong>Additional Information</strong></p>

<p>I have found that there is a <em>Builders</em> section under a project's properties. This can be configure to do whatever I want, but the only options seem to be to ether run it when manually building, during or after a clean (all of which will not commit often enough), or after an automatic build (which happens every time I save a file, making it way too often too be useful).</p>
","2","4354956","0","0"
"65575319","7046441","2021-01-05 08:24:06","3","485","<git><git-merge><git-commit><git-merge-conflict><git-stage>","git: Commit staged changes (without merge conflicts) during merge","<p>We have a project (Microsoft Business Central) where we have to do a very big merge with thousands of merge conflicts. When we merge the two branches we get about half the changes as staged changes (where the merge was successful) and about half as changes with merge conflicts.</p>
<p>I would like to commit these staged changes before starting with the merge conflicts (because the merge conflicts have to be solved by different people). Unfortunately when I try to commit the staged changes I get the git error</p>
<pre><code>&quot;error: Committing is not possible because you have unmerged files.&quot;
</code></pre>
<p>Is there any possibility to commit only a part of an ongoing merge?</p>
","0","7046441","",""
"65582413","","2021-01-05 16:06:04","0","211","<git><git-commit><git-revert>","Git revert removing files that shouldn't be removed","<p>I have three commits and I tried reverting back to the first commit. In doing that, Git removed two files and I don't know why as they were in the first commit I tried reverting to. If the two files Git removed were in the original commit, why did it remove them?</p>
<p>This is the code I used:</p>
<pre><code>git revert &lt;commit id&gt;
</code></pre>
<p>and this is the error message:</p>
<pre><code>    Removing style.css
CONFLICT (modify/delete): pages/services.html deleted in (empty tree) and modified in HEAD. Version HEAD of pages/services.html left in tree.
Removing index.html
error: could not revert 9b23173... inital commit
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add &lt;paths&gt;' or 'git rm &lt;paths&gt;'
hint: and commit the result with 'git commit'
</code></pre>
","7","","",""
"28380689","1942551","2015-02-07 09:52:03","1","477","<linux><macos><git><git-commit><pre-commit>","Checking comments in code for messages before committing with Git","<p>If often find myself writing out helpful messages in my code when developing locally. See this code snippet as a simple example:</p>

<pre><code># Public API
namespace :api do
  namespace :v1 do
    # REMOVE THE FIRST LINE WHEN DONE TESTING
    get :delivery_report, to: 'delivery_report#index'
    post :delivery_report, to: 'delivery_report#index'
  end
end
</code></pre>

<p>The point here is that when I am done and I feel like I can finally commit my work I need to remember that I have to remove the line <code>get :delivery_report, to: 'delivery_report#index'</code></p>

<p>Is it somehow possible to tell git that before accepting a commit or maybe before staging it, it should warn me about a line in my code that has some content? In this case that would be my comment or any other pre-defined line.</p>
","0","1942551","",""
"28385791","1981338","2015-02-07 18:28:53","0","391","<git><replace><git-push><git-commit><commit-message>","Replace e-mail address in every commit message","<p>I recently noticed that I've accidentally been using the sign-off feature in msysgit to sign several commits with an incorrect e-mail address. Unfortunately, I have already pushed the commits to my GitHub repository.</p>

<p>Is there any way to remove (or at least replace) the incorrect e-mail address from all commit messages? I'd prefer leaving no traces of the incorrect e-mail at all.</p>

<p>I've already tried replacing every occurrence of e-mail address in every file in the .git directory and its sub-directories, and pushed the changes using <code>git push --force --tags origin 'refs/heads/*'</code>, but it didn't seem to work.</p>

<p><strong>NOTE:</strong> I am the owner of the GitHub repository. It's currently a private project; no one else is working on it.</p>
","5","1981338","",""
"65618894","1934283","2021-01-07 19:39:32","1","1506","<windows><git><ubuntu><github><git-commit>","Git commit from Win10 and Ubuntu WSL - How to handle file execute mode change?","<p>I'm working on a project in both Ubuntu WSL and Windows 10. I want to be able to edit the files in both windows 10 files system via sublime/...and in Ubuntu WSL via VScode/...and push changes to remote. I have noticed 2 issues when doing this:</p>
<ol>
<li>When I edit via VSCode on Ubuntu WSL, the file mode is changed to 755 and when I edit on windows the filemode changes to 644. So, every single commit has thousands of changes - just for the file executable bit change.</li>
</ol>
<p>What should I do such that editing and pushing changes across windows filesystem and WSL filesystem retains the same mode?</p>
<p>Right now, I'm experimenting with using the below command every time I do a change via windows.</p>
<p><code>git add . --chmod=+x</code></p>
<p>(source: <a href=""https://stackoverflow.com/questions/21691202/how-to-create-file-execute-mode-permissions-in-git-on-windows"">How to create file execute mode permissions in Git on Windows?</a>)
Is there a better way to handle this situation?</p>
<ol start=""2"">
<li>Sometimes, the git diff shows the entire file being removed (i.e, all lines) and all lines added again. something like:</li>
</ol>
<pre><code>- print('hello')
+ print('hello')
</code></pre>
<p>I'm not sure why this happens.</p>
<p>I'm still learning Git and would like to know if what I'm doing is correct or if there are better ways to handle editing the same repo from different file systems.</p>
","2","1934283","",""
"28407126","401523","2015-02-09 10:02:37","2","98","<git><git-commit>","Is there a way to configure the output of git commit?","<p>I checked the man page for git-commit and search the webs but couldnt' find any reference to configuring the output of git commit. </p>

<p>By default, the output of of git commit looks like this:   </p>

<pre><code>[master 5d50e46]  #Bug#123 commit message""
53 files changed, 267 insertions(+), 173 deletions(-)
</code></pre>

<p>Is there an (easy or otherwise) way to override this output and make it either terser or more detailed? </p>
","1","401523","0","0"
"65630519","1349365","2021-01-08 14:07:13","0","118","<git><git-commit>","Delete a merge commit middle of other commits","<p>In our team, we maintain <code>flat git history</code> by rebasing from other branches. And squash-merge from <code>feature</code> branch to <code>dev</code> branch.</p>
<p>Mistakenly, I merged a branch into another branch. After merging, I also committed a few changes in the current branch and pushed. Then I found that we don't do that. My current git history looks like this.</p>
<p><a href=""https://i.stack.imgur.com/xlDIf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xlDIf.png"" alt=""enter image description here"" /></a></p>
<p>As you can see, I don't need that merged commit. I want to remove that commit preserving previous and later commits. If I can remove that commit completely, I can easily rebase that branch again.</p>
<p>How I can do that?</p>
<p>One way could be, didn't try yet though, I can create a new branch cherry-pick the changes, and delete this branch from local and remote.</p>
","0","1349365","0","0"
"28416470","3088045","2015-02-09 18:11:43","19","59217","<git><github><merge><git-commit><abort>","How to stop merging in git?","<p>I had a three-way-merge branch merge:</p>

<pre><code>git checkout master
git merge BranchA

&gt;&gt; Fast-forward merge

git merge BranchB

&gt;&gt; Three-way-merge (prompts for a merge commit message)
</code></pre>

<p>My questions are two:</p>

<ul>
<li><p><strong>How can I abort the merging?</strong> With the three-way-merge I'm showed the editor where to write the merge-commit message.
But if I exit without saving, <em>git</em> will anyway proceed with the merge (just the merge-commit message will be the default one instead the one I could have written but aborted)</p>

<pre><code>commit 11111233
    Merge 'BranchB' into master
</code></pre>

<p>while, obviously not having confirmed the commit message, I would expect the merge to not happen (as the same behaviour of when I do NOT confirm a normal commit message)</p></li>
<li><strong>Will the commits from the two merged branches be sorted in chronological order</strong>?
Or first (in the <code>git log</code>) will I see the commit from the <strong>BranchA</strong>, followed THEN from the commits of the <strong>BranchB</strong>?</li>
</ul>

<hr>

<h2>EDIT</h2>

<p>To explain better the second question I made a test:
2 branches (A and B) starting from the <em>master</em> branch. I made a commit on B, then on A, then again on B, and finally again on A.
Then I merged <em>BranchA</em> into <em>master</em>. And then <em>BranchB</em> into <em>master</em>.</p>

<p>But when I <code>git log</code> on <em>master</em>, this is what has come out, and why I asked the second question:</p>

<pre><code>commit 730fdd4d328999c86fa4d3b6120ac856ecaccab1
Merge: 7eb581b cc1085a
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Mon Feb 9 21:24:27 2015 +0100

    Merge branch 'BranchB' into master_COPY

commit 7eb581b39a8402e1694cc4bf4eab4a3feb1143f8
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Mon Feb 9 21:23:18 2015 +0100

    BranchA) - This should be the (second) last change of the branch, and be the
    most recent into the git log, even if I merge another branch into master,
    AFTER the one where we are committing this.

commit cc1085a6aaa2ee4b26d3c3fbb93bee863d9e7c28
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Mon Feb 9 21:20:29 2015 +0100

    (BranchB) - Add settings to the last new features

commit 5f5b846a2f89886d01244ba77af941f554233b51
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Mon Feb 9 21:18:54 2015 +0100

    (BranchA) - Add some changes

commit 92a57a56b6b7c9694fbedda71b8070fc58683dde
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Mon Feb 9 21:18:17 2015 +0100

    (BranchB) - Some changes

commit 221765476e348833cf8da73b1bf5239f3d4240e8
Author: Arthur Conandoyle &lt;Arthur.Conandoyle@live.com&gt;
Date:   Tue Feb 3 12:12:19 2015 +0100

    Change (this is the last commit of the parent 'master' branch)
</code></pre>

<p>(As <em>Srdjan Grubor</em> wrote) I would have been expected first (chronologically) all the commit from the merged <em>BranchA</em> and <strong>THEN</strong> all the commits from the merged <em>BranchB</em>, following the order of merging...
.. but it's funny how the <code>git log</code> instead show them in chronological order and the commits are not shown as grouped in branches!</p>
","9","3088045","0","0"
"28425670","4527253","2015-02-10 06:45:35","28","61382","<git><commit><git-commit><git-config>","GIT Error:- expected committer email '' but found 'karan@xyz.com'","<p>Git push is getting rejected with the following error message:</p>

<pre><code>expected committer email '' but found 'karan@xyz.com'
</code></pre>

<p>I have already tried:</p>

<ol>
<li>setting use properties in .gitconfig file.</li>
<li>trying git push making different clones of same repository.</li>
<li>setting up whole system all together after formatting it.</li>
</ol>

<p>But none has worked. What else can I do to resolve it.</p>
","0","4527253","0","0"
"28443554","1999035","2015-02-10 23:01:40","0","99","<git><github><git-commit><multiple-accounts>","Multiple git accounts, wrong git account is pushing to my personal repo","<p>I'm trying to do a personal project. I haven't used git much except for work which I got working a while ago. I'm trying to push an initial commit to a personal repo but I keep getting: </p>

<blockquote>
  <p>Permission to personalAcc/project.git denied to workAcc</p>
</blockquote>

<p>I have tried the steps that are taken here: <a href=""https://help.github.com/articles/generating-ssh-keys/"" rel=""nofollow"">https://help.github.com/articles/generating-ssh-keys/</a> but I still get the same errors. Could anyone give me a hand? Thanks in advance.</p>
","0","1999035","",""
"10911317","1009442","2012-06-06 09:14:37","289","138237","<git><repository><commit><git-commit>","How to remove the first commit in git?","<p>I am curious about how to remove the first commit in git.</p>

<p>What is the revision before committing any thing? Does this revision have a name or tag?</p>
","6","1009442","0","0"
"28776427","2175650","2015-02-28 00:05:55","4","3245","<git><github><git-commit><pull-request><git-revert>","Why reverted commit won't show in new PR?","<p>Here's what's happening:</p>

<ol>
<li>created branch XYZ from master</li>
<li>committed changes in branch XYZ</li>
<li>made PR of XYZ branch to master</li>
<li>PR got accepted and code merged into master</li>
<li>PR got reverted (it broke stuff)</li>
<li>made some commits in branch XYZ in order to fix what commit on item #2 had broken</li>
<li>went to Github.com and created new PR, but I only see the last commit and NOT the other commit that was made on item #2</li>
</ol>

<p>I guess my question is: Why isn't the code committed in item #2 not showing up in my new PR? will the commit that got reverted also be included in this new PR even though I don't see it in the list of changed files?</p>

<p>Thanks!</p>
","2","2175650","0","0"
"28777041","3110574","2015-02-28 01:29:53","0","862","<git><gitignore><git-commit>","Git how to not include specific file(s) to commit","<p>Im trying to not include some files to be commit. For example, I don't want any change in the following files to be included in a commit:</p>

<pre><code>bootstrap/start.php
</code></pre>

<p>So I include them in <strong><em>.gitignore</em></strong> like this:</p>

<pre><code>/bootstrap/compiled.php
/bootstrap/start.php
/vendor
composer.phar
composer.lock
.env.local.php
.env.php
.DS_Store
Thumbs.db.idea
.idea/
/public/dbase
/public/user_images
/app/config/lenovo
</code></pre>

<p>but when Im running <code>git status</code> I still get this message:</p>

<pre><code>On branch master
Your branch is up-to-date with 'origin/master'.

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   .gitignore
    modified:   bootstrap/start.php

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>How to do that? thank you</p>
","0","3110574","",""
"47394685","3935035","2017-11-20 14:47:37","1","3978","<git><version-control><branch><commit><git-commit>","Create new branch from specific commit onwards","<p>I want to create a new branch, starting from a certain commit. However, I want all the commits that were commited afterwards to be part of that branch too.</p>

<p>Lets assume this is <code>branch-D</code> with all the commits.</p>

<pre><code>&gt; branch-D
commit-A ---- commit-B ---- commit-C ---- commit-D
</code></pre>

<p>I want to remove everything from <code>commit-B</code> to a new <code>branch</code>, lets name it <code>branch-C</code>, and only keep <code>commit-A</code> on <code>branch-D</code></p>

<pre><code>&gt; branch-D
commit-A

&gt; branch-C
commit-B ---- commit-C ---- commit-D
</code></pre>

<p>I haven't pushed anything to a remote repository yet. 
Is there a way to do this?</p>
","1","3935035","",""
"28878846","2964112","2015-03-05 13:22:11","0","186","<git><git-push><git-commit><git-add>","Git - Adding files to the index without committing them","<p>I am working in a project of around 50k files, of which I am only modifying a few of them. I have the project locally in my computer and I am using Gitorious to push the changes I make to it, but as for now I have to manually look for the changed files and I don't want to miss any of them. </p>

<p>Therefore, I would like to add all my project to the index, so after that GIT can tell me what changes I have made. The problem is that I don't want to commit and push all the project afterwards, but only the modified files. Is it possible?</p>

<p>Example: I modified 14 files in the project, so I would like to push these 14 files. I don't want miss any of them, so I would like GIT to tell me what files have been modified.</p>
","9","2964112","",""
"23213318","3212246","2014-04-22 07:32:48","0","57","<git><github><git-merge><git-commit>","Git merging and commit issue","<p>I have 2 branches - master and develop
While I am on the develop branch, I have commit and pushed a change (Added in a file) and it is successful.</p>

<p>However, when I type <code>git checkout master</code>, followed by <code>git merge develop</code>... Instead of getting the output messages like (I am copying this message from a previous merge that I did), and did a <code>git push</code>:</p>

<pre><code>Updating 325ac4a..51ffb06
Fast-forward
Test_Folder/Images/Img_01.jpg | Bin 0 -&gt; 4224 bytes
2 files changed, 1 insertions(+)
create mode 100644 Test_Folder/Images/Img_01.jpg
</code></pre>

<p>I was asked to add in a commit message in the Terminal itself... 
This is very different from all the previous merging that I have did and it is the first time I have seen it. Though I managed to get pass the <code>commit</code> followed by a <code>git push</code>, am I doing it wrong somehow?</p>

<p>Even so, should the above 'issue' seems correct, is there any way that I can commit the message without going thru the terminal style?
(By the way, I tried to do using <code>git gui</code> but apparently I am seeing no files or whatsoever)</p>
","0","3212246","",""
"61223842","12023261","2020-04-15 07:51:02","2","423","<git><github><git-commit><git-merge-conflict>","In my first commit I am unable to push the changes as i already have .gitignore and README.md in my github,diff from local","<p>I am very new to git and I am self learning it.</p>

<p>I have created a repository in github which has these two files .gitignore and README.md. <strong>only</strong>.</p>

<p>Now I have an angular project in a folder in my local.</p>

<p>I want to push my project to the newly created github repository,
so i used the following commands in order--</p>

<ul>
<li>rd .git /S/Q</li>
<li>git init</li>
<li>git add .</li>
<li>git commit -m ""First commit""</li>
<li>git remote add origin
<a href=""https://github.com/Arpan619Banerjee/test-git-commands.git"" rel=""nofollow noreferrer"">https://github.com/Arpan619Banerjee/test-git-commands.git</a></li>
<li>git push -u origin master</li>
</ul>

<p>after this I am getting the following error---</p>

<pre><code>To https://github.com/Arpan619Banerjee/test-git-commands.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'https://github.com/Arpan619Banerjee/test-git-commands.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I understood that the .gitignore and README.md files that are present in my github repo is diff from what i have in local , so i have to pull the changes first and then merge it and then i can push it.
But I tried doing that--
I executed the following commands in order, started from the very begining as i do not know how to proceed after getting the error, so I thought I will pull an dmerge the changes before pushing it.</p>

<ul>
<li>rd .git /S/Q</li>
<li>git init</li>
<li><p>git remote add origin
<a href=""https://github.com/Arpan619Banerjee/test-git-commands.git"" rel=""nofollow noreferrer"">https://github.com/Arpan619Banerjee/test-git-commands.git</a></p></li>
<li><p>git pull origin master</p></li>
</ul>

<p>Then I got the following message. I do not know how to proceed after this-</p>

<pre><code>error: The following untracked working tree files would be overwritten by merge:
        .gitignore
        README.md
Please move or remove them before you merge.
Aborting

</code></pre>

<p>I searched in Google I got this answer--</p>

<pre><code>The problem is that you are not tracking the files 
locally but identical files are tracked remotely so
 in order to ""pull"" your system would be forced to 
overwrite the local files which are not version controlled.

Try running

git add * 
git stash
git pull
</code></pre>

<p>But here the local files are getting overwritten , I do not want this. I want my local changes to be pushed. How to resolve the merge conflict here to preserve my local changes.</p>

<p>Through Vs code git GUI i was able to merge my local changes, but i want to do it through cmd.
Please help me.</p>
","0","12023261","",""
"23457116","1540845","2014-05-04 14:01:24","9","749","<git><git-commit><git-config>","Prevent git from automatically generating user email if missing","<p>Is there a way to globally configure <code>git</code> to not automatically generate user's email, if none is set and abort the commit instead?</p>

<pre><code>$ git commit -m ""test""
[master (root-commit) 71c3e2e] test
Committer: unknown &lt;my.user@my.very.own.hostname&gt;
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
</code></pre>

<p>This can cause serious privacy leaks if the committer is not careful enough to check <code>git</code> warnings.</p>
","2","1540845","0","0"
"42014103","5112180","2017-02-02 23:14:13","2","1118","<git><karma-runner><git-commit>","Questions about the Karma commit message convention","<p>About the Karma commit message convention:</p>

<blockquote>
  <p>feat, fix, docs, style, refactor, test, chore</p>
</blockquote>

<p>I'm in doubt which prefix to use in certain situations, such as:</p>

<ol>
<li>I need to version a logic that complements an existing code.</li>
<li>I need to change the name of some variable.</li>
<li>I need to add or remove spaces in the code.</li>
<li>I need to add or remove comments in the code.</li>
<li>I need to change an HTML structure (change the order of some element or increment/decrement some attribute, for example).</li>
<li>I need to add a CSS code (change the color of some element or the layout, for example).</li>
<li>I need to version the service worker file (a script that the browser runs in the background).</li>
</ol>

<p><strong>Convention References</strong></p>

<blockquote>
  <p><a href=""http://karma-runner.github.io/1.0/dev/git-commit-msg.html"" rel=""nofollow noreferrer"">Convenção de mensagens de commit - Karma</a></p>
</blockquote>
","0","5112180","0","0"
"42014892","727429","2017-02-03 00:36:59","0","471","<git><git-commit>","git recommit image that it doesn't recognize changed (png w/ alpha space filled)","<p>Git doesn't recognize that some of my image files have changed.</p>

<p>In this case, it is a PNG that used to have alpha space, and now some of the alpha space is filled in with white pixels.</p>

<p>How do I force git to know this file is modified and commit it with accurate data? This is important because my build server isn't my local computer and needs the proper data from the git repository.</p>

<p>A convoluted solution I thought of is to remove the file, commit, push, put the file back in, commit and push. This seems messy and there has to be a better way.</p>

<p>I was also thinking of git mv -f and just renaming the file but I'm not sure if that will do it.</p>

<p>Any insight appreciated. </p>
","0","727429","",""
"42200228","3001352","2017-02-13 09:04:38","0","651","<git><git-commit>","Git change a project name without deleting and recreating project in repository","<p>I have a project in my git repository named outbount and since the name of the project should be changed to outbound (spelling mistake happened.), i changed it and tried to commit and push. But when i'm going to commit, it shows like the old project is deleted and new project is created. I just need to change the folder name. How can i do that? Please make me correct if i got the concepts wrong.</p>
","0","3001352","0","0"
"42512472","754174","2017-02-28 15:17:54","1","666","<git><branch><rebase><git-commit>","Can I git commit to parent branch + rebase in one go?","<p>I have a branch <code>develop</code>, and branched a big feature called <code>next</code> from it.</p>

<p>In <code>next</code> there is a continuous process of editing files that are originally from <code>develop</code>, and files that are created new exclusively in <code>next</code>.</p>

<p>TL;DR: You can skip the next section and go to the question directly.</p>

<hr>

<p>(a) The changes in <code>next</code> on files that were inherited from <code>develop</code> are always backwards-compatible and are always committed there (too).</p>

<p>(b) Meanwhile, <code>develop</code> itself is also undergoing development, and these changes should also be visible in <code>next</code>. Therefore, <code>next</code> is rebased on <code>develop</code> every now and then.</p>

<p>Committing back to <code>develop</code> causes merge conflicts because (b), and rebasing causes merge conflicts because (a). The latter can be fixed by <code>-X theirs</code> because the conflicts were already resolved in the first step.</p>

<p>But this is not efficient.</p>

<hr>

<p><strong>Is there a way to automatically:</strong></p>

<ol>
<li>Commit files that were originally from a parent branch to the parent branch (e.g. <code>develop</code>)</li>
<li>Commit files that do not exist on the parent branch to the current branch (e.g. <code>next</code>)</li>
<li>Rebase the current branch upon the parent branch to bubble up the changes?</li>
</ol>

<hr>

<p><strong>Possible complex solution</strong></p>

<p>I can imagine that some 'simple'(r) git-foo is possible because this wish is not unique. But if not, some <code>bash</code> scripting might be possible. For example, the following command:</p>

<pre><code>git ls-tree -r develop --name-only
</code></pre>

<p>will show a list of files that were indeed in <code>develop</code>. Files not in that list would be only in <code>next</code>.</p>

<p>I guess if all else fails, I could create a shellscript to:</p>

<ol>
<li>First commit all files that exist on <code>develop</code> to <code>develop</code></li>
<li>Then commit all other files to <code>next</code></li>
<li>Rebase <code>next</code> on <code>develop</code></li>
</ol>

<p>But it's not as simple as it sounds.</p>
","0","754174","",""
"42518104","7147393","2017-02-28 20:27:06","25","44342","<git><git-commit>","How to remove a commit from the middle of a branch","<p>I've made some commits and have pushed it to my remote repo. One of those I want to remove. It includes only one binary file, which was changed only in that commit in that branch. How to remove it without harm for later commits?</p>
","2","7147393","0","0"
"42550116","5363038","2017-03-02 08:20:16","4","855","<git><git-merge><git-rebase><git-commit><git-pull>","How to auto-detect if a Git commit or rebase contains something like ""<<<<< HEAD""?","<p>I recently made a stupid mistake of committing a code containing Git rebase messages, something like <code>&lt;&lt;&lt;&lt;&lt; HEAD</code>. </p>

<p>I believe it happened because I <code>git add . ; git rebase --continue</code> without double-check if a file contains those messages.</p>

<p>I would like to know if there's anyway to prevent this? I mean, normally Git warns you when merging that there's messages like this.  But after you <code>git add .</code> I believe Git then treats those as part of my code?</p>

<p>I checked a famous tool called overcommit ( <a href=""https://github.com/brigade/overcommit"" rel=""nofollow noreferrer"">bridage/overcommit</a> )
but there seems to be no such check. </p>

<p><strong>Edit:</strong> in overcommit, there's this <strong>PreCommit/MergeConflicts</strong> hook, which only check my manual commits by <code>git commit</code>, but if it happens during a rebase, it won't trigger.</p>

<p>Hope I can find a real way to detect this.</p>
","2","5363038","0","0"
"42552605","3607573","2017-03-02 10:16:49","0","1480","<git><git-merge><git-commit><git-push>","git pushing to remote branch is throwing error","<p>I have created a branch from remote repository and changed the local repo name. Later I have removed the tracking by running the <code>git branch --unset-upstream</code> command. 
Now when I try to push my local changes to the remote branch I am getting the below error</p>

<pre><code>git push --set-upstream origin feature/my_remote_branch

error: src refspec feature/my_remote_branch does not match any.
error: failed to push some refs to 'https://pradeep@bitbucket.comp.com/scm/app/app.git'
</code></pre>

<p>Where am I going wrong?</p>
","8","3607573","",""
"61505145","10161504","2020-04-29 15:10:55","0","48","<git><repository><git-commit><git-push><git-pull>","How can we not lose our work with git if we are coding simultaneously","<p>I am new with git and I'm basically only using <code>pull</code>, <code>commit</code> and <code>push</code>; right now a question in my head popped up. </p>

<p>Lets say we are 2 people coding right now on the same project; don't we both risk of losing our work if one of us does <code>pull</code> then <code>commit</code> and <code>push</code>?</p>

<p>If i <code>push</code> first, then he will have to <code>pull</code> and his work is wiped out to receive mine; if he pushes first my work is wiped out when i <code>pull</code>; if we just <code>commit</code> but not <code>push</code> we end up having 2 different versions of the project in our local repositories; so what should I do?</p>

<p>My only idea for now is that we should message eachother to not code simultaneously, can git manage this situation somehow?</p>
","6","10161504","",""
"42561981","71376","2017-03-02 17:25:15","2","7418","<git><git-commit>","git commit -m not working","<p>I have been committing to my local repository today with <code>git commit -a</code> and entering my commit messages. Everything fine.</p>

<p>At the end of the day I wanted to commit a small change with a single line commit, so I used <code>git commit -m ""some message""</code> and got the following:</p>

<pre><code>On branch ChartFeature
Your branch is ahead of 'origin/ChartFeature' by 2 commits.
  (use ""git push"" to publish your local commits)
Changes not staged for commit:
        modified:   SomeFolder/Scripts/app/SomeScript.js

no changes added to commit
</code></pre>

<p>What have I done wrong? </p>

<p>How do I get git to allow <code>commit -m</code> again?</p>

<p>Footnote: After failing with <code>-m</code> a few times and seeing nothing wrong with <code>git log origin/ChartFeature..HEAD</code> I tried <code>git commit -a</code> as before and it worked (as expected) though <code>git commit -m</code> still does not.</p>
","5","71376","",""
"42561568","1120481","2017-03-02 17:03:50","3","2391","<git><branch><git-commit><sha>","How to get the SHA of the base commit a branch is started from?","<pre><code>C    E
|   /
B  D
| /
A
</code></pre>

<p>How to get the SHA of the commit <code>A</code> if <code>E</code> is the current <code>HEAD</code>?</p>
","2","1120481","",""
"42644679","","2017-03-07 09:36:42","1","5650","<git><version-control><git-commit>","How to revert to a commit but keep the changes","<p>I've a local repo with quite a lot of changes.<code>git log --oneline</code> gives me the following history:</p>

<pre><code>fb2d06e Included table view in posters ui
b749eb9 Final Dark theme with Posters before gitflow.
8a8e2c3 Added Dark theme, posters &amp; only 'video' files in jsTree display
ee9b6f4 Segregated semantic dark &amp; light themes
e3bda4c Display and save nly 'video' files
7f80737 Updated dark theme settngs in sematic UI
bf8342d Removed files Accordion
48d8719 Adding multiprocessing
</code></pre>

<p>Now, I wish to keep the changes after <code>bf8342d</code> but I dont want the commits made after them to be wiped fro history. Would be able able to revert to <code>bf8342d</code> and make it the next commit? Like this:</p>

<pre><code>okn3wco Reverted to 'bf8342d'
fb2d06e Included table view in posters ui
b749eb9 Final Dark theme with Posters before gitflow.
8a8e2c3 Added Dark theme, posters &amp; only 'video' files in jsTree display
ee9b6f4 Segregated semantic dark &amp; light themes
e3bda4c Display and save nly 'video' files
7f80737 Updated dark theme settngs in sematic UI
bf8342d Removed files Accordion
48d8719 Adding multiprocessing
</code></pre>
","5","","",""
"42651753","5735436","2017-03-07 15:09:43","1","59","<git><svn><github><commit><git-commit>","How to commit a Git file locally?","<p>I want to commit a file to a Git repository locally for my sample projects</p>

<p><strong>Failed Attempts to Commit File Locally</strong></p>

<pre><code>Divyanshu (master +) asteroids $ git commit -m ""Fire one bullet at a time""

fatal: cannot lock ref 'HEAD': Unable to create 'C:/Users/Divyanshu/Desktop/dktop/focus/
Udacity/Git-hub/version-control/repositories/asteroids/.git/refs/heads/master.lock': 
File exists.

Another git process seems to be running in this repository, e.g. an editor opened by 'git 
commit'. Please make sure all processes are terminated then try again. If it still fails,
a git process may have crashed in this repository earlier: remove the file manually to 
continue.
</code></pre>
","0","5735436","",""
"42670241","5174659","2017-03-08 11:34:07","-1","77","<git><github><git-commit>","Commits in the old branch are also showing in the new branch","<p>I have recently started to learn github. I have first made a branch under the origin develop which is named as branch1 and made one commit. After that i have created one more branch under the origin develop. after that i made a new commit. so, the problem is all other commit from another branch also showing inside that branch. How to show commit which are from same branch only?</p>
","0","5174659","",""
"42721117","1764881","2017-03-10 14:46:39","0","34","<git><git-commit><git-remote><git-reset><git-revert>","remove remote commits that are not HEAD","<p>I have a tricky situation. I need to remove and re-commit some commits that I already pushed to github remote repo. But these commits are not HEAD anymore (people pushed theirs on top of it).</p>

<p>I understand I can do revert commits, therefore preserving the commit history. But the requirement is to let wrong commits <em>disappear</em>.</p>

<p>So:</p>

<pre><code>D &lt;- other people's commit
|
C &lt;- B and C are wrong commits! They need to be removed
| &lt;- The changes that should be preserved from B and C will be
B &lt;- committed on top of D
|
A &lt;- this was the initial state
</code></pre>

<p>To give more explanation, I'm using 2 different GitHub accounts for work/personal. I accidentally committed B and C to company repo using personal GitHub account. So, I need to remove these commits from non-employee account</p>
","0","1764881","",""
"42746891","7698018","2017-03-12 11:33:35","1","1046","<git><ssh><git-commit><git-reset>","Resetting GIT local to remote version","<p>I'm trying to reset my Git because I'm having all kinds of problems. It would not allow me to push several large files to my remote and I don't know how to delete them from the commit. I don't recall even committing the files.</p>

<p>my remote is: pmp_staging</p>

<pre><code>kjlin@LAPTOP-BU6U18C6 MINGW64 /c/wamp64/www/postmyproject (master)&lt;br&gt;
$ git push pmp_staging master&lt;br&gt;
Enter passphrase for key '/c/Users/kjlin/.ssh/id_rsa':&lt;br&gt;
Counting objects: 7215, done.&lt;br&gt;
Delta compression using up to 4 threads.&lt;br&gt;
Compressing objects: 100% (7006/7006), done.&lt;br&gt;
Writing objects: 100% (7215/7215), 44.69 MiB | 1.01 MiB/s, done.&lt;br&gt;
Total 7215 (delta 1112), reused 0 (delta 0)&lt;br&gt;
remote: Resolving deltas: 100% (1112/1112), done.&lt;br&gt;
remote:   git.wpengine.com: validating&lt;br&gt;
remote:   - info: detected push to staging application ...&lt;br&gt;
remote:   - info: validating files in 9f1931e ...&lt;br&gt;
remote:   - info: found application servers ...&lt;br&gt;
remote:  failed...&lt;br&gt;
remote:   system/large file types detected:&lt;br&gt;
remote:   ------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/preamble.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/redis-object-cache.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/s3-uploads.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/util.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/admin-footer.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/admin/advanced.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/admin/debug-db.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/admin/notice-sticky.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/admin/notice.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/general/powered-by.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/modal.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/staging-modal.php&lt;br&gt;
remote: wp-content/mu-plugins/wpengine-common/views/wpe-migration-preview-&lt;br&gt;template.php
remote: wp-content/mu-plugins/wpengine-common/wpe_wpdb.php&lt;br&gt;
remote:   ------------------------------------------------------------------
remote:   please remove these files from your source, re-commit, and push...
To git.wpengine.com:staging/postmyproject2.git
 ! [remote rejected] master -&gt; master (pre-receive hook declined)
error: failed to push some refs to'git@git.wpengine.com:staging/postmyproject2.git'&lt;br&gt;
</code></pre>

<p>I couldn't figure out how to remove these files from the original commit. I tried moving the head back to the origin but can't seem to get rid of them. Instead, I'd like to start fresh. I just want my Git remote to match my local so I can start practicing pushes and commits. Everything I look for on stack overflow doesn't seem to work.</p>

<pre><code>kjlin@LAPTOP-BU6U18C6 MINGW64 /c/wamp64/www/postmyproject (master)&lt;br&gt;
$ git fetch pmp_staging&lt;br&gt;
Enter passphrase for key '/c/Users/kjlin/.ssh/id_rsa':&lt;br&gt;
&lt;br&gt;
kjlin@LAPTOP-BU6U18C6 MINGW64 /c/wamp64/www/postmyproject (master)
$ git reset --hard master/master&lt;br&gt;
fatal: ambiguous argument 'master/master': unknown revision or path not in the working tree.&lt;br&gt;
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'&lt;br&gt;
&lt;br&gt;
kjlin@LAPTOP-BU6U18C6 MINGW64 /c/wamp64/www/postmyproject (master)&lt;br&gt;
$ git reset --hard pmp_staging/master&lt;br&gt;
fatal: ambiguous argument 'pmp_staging/master': unknown revision or path not in the working tree.&lt;br&gt;
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
</code></pre>

<p><br>
<br>
Thanks!</p>
","2","7698018","",""
"42748222","7697554","2017-03-12 13:51:14","0","7789","<git><bash><vim><git-commit>","How to deal with a swap file error from the 'git commit -a' command?","<p>I'm currently working on git hub and I'm in my elementary stage practising how to control files.</p>

<p>The following is my current status:</p>



<pre class=""lang-none prettyprint-override""><code>On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   index.html

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>Now I'm trying to commit modifications using the <code>git commit -a</code> command.</p>

<p>But as soon as I type <code>git commit -a</code>, the bash shell shows something like:</p>

<pre class=""lang-none prettyprint-override""><code>E325: ATTENTION
Found a swap file by the name ""~/Desktop/ComputerScience/GitHub/.git/.COMMIT_EDITMSG.swp""
      owned by: choehyeong-gyu   dated: Sun Mar 12 22:31:25 2017
     file name: ~choehyeonggyu/Desktop/ComputerScience/GitHub/.git/COMMIT_EDITMSG
      modified: YES
     user name: choehyeong-gyu   host name: choehyeong-gyuuiMacBookPro.local
    process ID: 6651
While opening file ""/Users/choehyeonggyu/Desktop/ComputerScience/GitHub/.git/COMMIT_EDITMSG""
         dated: Sun Mar 12 22:41:36 2017
  NEWER than swap file!

(1) Another program may be editing the same file.  If this is the case,
be careful not to end up with two different instances of the same
file when making changes.  Quit, or continue with caution.
(2) An edit session for this file crashed.
If this is the case, use "":recover"" or ""vim -r /Users/choehyeong-gyu/Desktop/ComputerScience/GitHub/.git/COMMIT_EDITMSG""
to recover the changes (see "":help recovery"").
If you did this already, delete the swap file ""/Users/choehyeong-gyu/Desktop/ComputerScience/GitHub/.git/.COMMIT_EDITMSG.swp""
to avoid this message.

Swap file ""~/Desktop/ComputerScience/GitHub/.git/.COMMIT_EDITMSG.swp"" already exists!
[O]pen Read-Only, (E)dit anyway, (R)ecover, (D)elete it, (Q)uit, (A)bort:
</code></pre>

<p>I was unprepared for this, and just entered 'E'. Then, the shell shouts out,</p>

<pre class=""lang-none prettyprint-override""><code>E325: ATTENTION
Found a swap file by the name     ""~/Desktop/ComputerScience/GitHub/.git/.COMMIT_EDITMSG.swp""
      owned by: choehyeong-gyu   dated: Sun Mar 12 22:31:25 2017

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#       modified:   index.html
#
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
""~/Desktop/ComputerScience/GitHub/.git/COMMIT_EDITMSG"" 7L, 209C
</code></pre>

<p>Now nothing's working and I do not know how to take my next step.</p>
","0","7697554","0","0"
"42756565","4057038","2017-03-13 04:19:36","0","87","<git><github><git-merge><git-commit>","Merging files from previous commit to current head","<p>I made a commit to the master branch sometime back which I revert back for some reason. Now few months have passed and I want to include those changes in my code again. I want to do this in my local repository by creating a new branch of the master in my local repository and add the changes from the reverted commit. Any help on how I can go about it?</p>
","0","4057038","",""
"61711855","12720264","2020-05-10 12:19:20","2","344","<github><project><git-commit>","Upload a complete project vs. complete while uploaded (GitHub)","<p>For those that had uploaded their repositories and projects to GitHub already, is it easier to upload first and then finalize the project, or to upload a <em>""final""</em> version only (not taking in the account future bug-fixes, if any). </p>

<p>I think of how easy it is to later on substitute the files in the existing repository, if the project is already on GitHub: seems like a <strong>hassle</strong> to delete all files and re-upload them again. Or, the more <strong>commits</strong> - the better?</p>
","0","12720264","0","0"
"43000743","3699649","2017-03-24 13:26:59","2","805","<java><git><netbeans><git-commit><git-push>","push a commit into multiple branches with git and netbeans","<p>I need to push a commit into two or more branches as the same time, using Git and Netbeans. Those branches are not local, but in BitBucket and shared with others developers.</p>

<p>The situation is this: 
We have a branch which is used as a master (soon we will rebase it) and we are working on an another one. WHen I find a problem on the older branch, I'll switch to that and do the modification, then commit. I want the pushed code to be merged also with the newer branch.</p>

<p>How Can I do ?</p>
","3","3699649","",""
"61738836","8753752","2020-05-11 20:37:18","3","147","<git><github><git-commit><git-rebase><git-squash>","How to divide commits into multiple squashes","<p>I need some help with squashing commits in GitHub.</p>

<p>I have about 30 commits and I want to squash the first 10 commits into one single squashed commit and another 10 commits into another squashed commit. I have used <code>git rebase -i HEAD~10</code> and squashed the first 10 commits. That works fine. But when I try to squash the next 10 commits, the previously squashed commit also appears in the list. Even though I didn't change the option for squashed commit from ""pick"" to ""squash"" that was also included in the resulting squashed commit. As a result I got only one squashed commit.
Can anybody please guide me to get two separate squashed commits as per my requirement.</p>

<p>Thanks in advance</p>
","1","8753752","0","0"
"43226205","6076911","2017-04-05 08:45:17","0","217","<git><github><git-commit><pull-request>","Update Github checklist on commit / pull request","<p>Just like you can <a href=""https://github.com/blog/1506-closing-issues-via-pull-requests"" rel=""nofollow noreferrer"">close and issue via commit / pull request</a> on Github, is it possible to update a <a href=""https://help.github.com/articles/about-task-lists/"" rel=""nofollow noreferrer"">checklist (a.k.a task-list)</a> in a similar way???</p>

<p>What I mean is if there exist some <a href=""https://help.github.com/articles/closing-issues-via-commit-messages/"" rel=""nofollow noreferrer"">special syntax</a> to do this, instead of manually going to Github and clicking on the check boxes.</p>
","0","6076911","",""
"43249207","","2017-04-06 08:02:07","2","113","<ios><xcode><git><bitbucket><git-commit>","Unknown filename appears on hierarchical while commiting","<p>I do not understand one file which is not on git repository &amp; not on local repository (not even local &amp; physical folder) but while I am going to commiting or push it seems in files hierarachical? By unchecking this file I am able push &amp; pull code properly but I am curious to find what is the exact issue.</p>

<p><a href=""https://i.stack.imgur.com/dLRdX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dLRdX.png"" alt=""enter image description here""></a></p>
","1","","",""
"29521005","4565018","2015-04-08 17:06:26","-2","53","<git-commit><atlassian-sourcetree><git>","How can i push a commit to Git","<p>How can i push a commit to git by using source tree or Terminal from Mac.I tried to find answer on internet but did not get any proper answer.I am totally new to git so any help will be appreciated.</p>
","2","4565018","",""
"6158111","734804","2011-05-27 21:58:06","2","115","<git><git-commit>","How to know if a commit is pushed in a repository?","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/5549479/git-check-if-commit-xyz-in-remote-repo"">git: check if commit xyz in remote repo?</a>  </p>
</blockquote>



<p>If I have a commit hash, how can I know if it is pushed in a repository?</p>
","2","734804","",""
"29525895","4766057","2015-04-08 21:43:00","0","151","<visual-studio-2013><build><azure-devops><git-push><git-commit>","TFS Team Build with VSO - Git Commit/Push files that have been altered by the build process","<p>I have created a build definition that uses the Default Template(GitTemplate.12.xaml). I have a Pre-Build Script that updates the version numbers for all of the assemblies in the build.</p>

<p>I would like to be able to commit and push the files that have been altered by the build definition to the git repository. </p>

<p>I have tried doing this using a PowerShell script but was not able to do this because Git with VSO requires that you pass in user credentials.</p>

<p>I have downloaded the template to see if I can customise it to complete this task but can see no obvious way of solving my problem.</p>

<p>My next step will be to investigate writing a custom piece of code that can be called by the template.Just wanted to find out before I delve into this any deeper if I am wasting my time.</p>

<p>I am using VSO and VS2013.</p>

<p>Does anybody have a solution to my problem?</p>
","0","4766057","",""
"29533464","1614973","2015-04-09 08:26:05","3","1102","<git><version-control><git-commit><git-add>","Git add and commit all files in one _native git_ command?","<p>The most common Git command sequence is:</p>
<pre><code>git add .
git commit -m &quot;Message&quot;
</code></pre>
<p>I have searched for a native Git command to do it with one line but surprisingly could not find it. There are at least two big threads concerned with this question <a href=""https://stackoverflow.com/questions/4298960/git-add-a-git-commit-in-one-command"">HERE</a> and <a href=""https://stackoverflow.com/questions/2419249/git-commit-all-the-files-using-single-cmd"">HERE</a>, but surprisingly they have high voted answers not doing the job or doing it using additional hacks.</p>
<p>The top voted solution in the first thread linked above suggest to define a macro</p>
<pre><code>git config --global alias.add-commit '!git add -A &amp;&amp; git commit'
</code></pre>
<p>which has the downside of having to do it again and again for every new software environment. The second voted solution</p>
<pre><code>git commit -a -m &quot;message&quot;
</code></pre>
<p>does not work - it does not add new files! Other &quot;solutions&quot; involve writing the same two commands in a single line - this offers no advantage in terms of typing!</p>
<p>Further, <a href=""https://progit.org/"" rel=""nofollow noreferrer"">Pro Git</a> - one of the well-known books states on page 22:</p>
<blockquote>
<p>2.2.7 Skipping the Staging Area</p>
<p>Although it can be amazingly useful for crafting commits exactly how you want them,
the staging area is sometimes a bit more complex than you need in your workflow. If
you want to skip the staging area, Git provides a simple shortcut. Providing the -a
option to the git commit command makes Git automatically stage every file <strong>that is
already tracked</strong> before doing the commit, letting you skip the git add part...</p>
</blockquote>
<p>The emphasis is mine - this is indeed only works with files that are <strong>already tracked</strong>. But your new files are never tracked (or I can I change setting to make the being tracked?), so you can't have the added and committed using that command!</p>
<p>I am looking for a clean single line solution <strong>provided by the standard git software</strong> without additional hacks. Given so many rich advanced options of Git, it is hard to believe such a command does not exist. If there is anything I am missing here, will be happy to learn!</p>
","2","1614973","",""
"6403601","225769","2011-06-19 16:24:17","151","57600","<git><git-commit><git-filter-branch><git-rewrite-history>","Purging file from Git repo failed, unable to create new backup","<p>I tried to remove a file from my remote repo by running:</p>

<pre><code>git filter-branch --index-filter 'git rm --cached --ignore-unmatch Rakefile' HEAD
</code></pre>

<p>But Git complains that </p>

<blockquote>
  <p>Cannot create new backup. A previous backup already exists in refs/original/<br>
  Force overwriting the backup with -f<br>
  rm: cannot remove /.git-rewrite/backup-refs : Permission denied<br>
  rm: cannot remove directory /.git-rewrite : Directory not empty</p>
</blockquote>

<p>This was after I already deleted the .git-rewrite directory on Windows.</p>

<p>How can I remove that file? It's a 29Mb file sitting on my repo, so I quite need to remove the file. </p>

<p>I tried to delete the commit in <code>git rebase -i</code>, but apparently because the commit touched a lot of different files, Git complains of conflicts and I aborted to be safe.</p>
","1","225769","0","0"
"47850375","1169091","2017-12-16 22:05:01","0","114","<github><push><commit><git-commit>","GitHub commit log seems inconsistent with respect to commit dates","<p>Today is December 16, 2017. I just screen-snipped this GitHub commit log:
<a href=""https://i.stack.imgur.com/ILGaz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ILGaz.png"" alt=""Screen Snip from GitHub commit log""></a></p>

<p>If today is 12/16, why does a commit from 12/14 appear as 5 days ago?</p>
","3","1169091","0","0"
"62203080","13633933","2020-06-04 19:54:48","0","138","<git><git-commit><git-rebase><git-remote><git-reset>","Need to split old pushed commit on the branch to many","<p>There are 30 pushed commits on the branch. It is necessary to split the 2nd commit on the branch into 20+ commits without damaging the following commits (insert splitted commit between 1st and next 28 commits). The 2nd commit on the branch has a bunch of changes that can be placed in 20+ commits. </p>

<p><strong>Is it possible to split without damaging following commits?</strong> </p>
","4","13633933","",""
"13529199","1847483","2012-11-23 12:30:23","1","307","<git><githooks><git-commit>","prepare-commit-msg test the output for different scenarios","<p>I made a prepare-commit-msg hook that will add a lot of data to the commit message that will be presented to my developers.</p>

<p>I want to test the output of the prepare-commit-msg hook automatically so i can use jenkins to validate if the new changes i made is messing up the old format.</p>

<p>But how do i ""trigger"" and get the output from the prepare-commit-msg hook without git opens op an editor.</p>

<p>is there a workaround. </p>

<p>git commit -m ""Text"" 
Does not give me the output anywhere or maybe it does ? </p>

<p>or should i really add this testing internally in the hook so when i enable debugging i should get the output ?</p>

<p>I would just prefer git could give me the output instead as it is the message that will be presented to the developer. </p>
","0","1847483","",""
"29601266","3311276","2015-04-13 08:46:46","1","179","<git><git-branch><git-push><git-commit>","getting update that remote branch has new commit?","<p>Is there a way in git to get an update new commit has been made to the branch by the user?</p>

<p>I have used a command <a href=""https://github.com/jakeonrails/git-notify"" rel=""nofollow"">git notify</a>, but it only gives notification if user pulls the branch</p>
","2","3311276","",""
"62210378","2217604","2020-06-05 07:39:36","0","168","<git><git-branch><atlassian-sourcetree><git-commit><smartgit>","How to replace a commit with the commit from another branch","<p>I have a commit from a branch that was deleted. I'm referring to the selected commit in the picture below. The deleted branch is the yellow one.</p>

<p><a href=""https://i.stack.imgur.com/Chy7g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Chy7g.png"" alt=""enter image description here""></a></p>

<p>As you can see, right under that selected commit, there is an exact duplicate of that commit on the Basic_Gameplay branch (which is the green branch to the left).</p>

<p>I want to get rid of the commit on the no-longer-existing yellow branch and just use the duplicate on the green branch. However, the problem is that the selected yellow commit is referenced in a merge with the blue master branch as you can see in the picture.</p>

<p>Is there a way to get rid of the yellow commit and replace it with the commit from the green Basic_Gameplay branch so that the commit being referenced for the merge with the blue master is the green one, not the yellow one?</p>
","0","2217604","",""
"17136488","384706","2013-06-16 18:44:50","0","29","<git><git-branch><git-commit>","Why I can commit a change from a different branch than the one I staged it?","<p>I am on branch <code>master</code>. I create a new file e.g. <code>Util.java</code> . This is untracked. So I do <code>git add Util.java</code> and the file is in the staging area ready for commit.<br>
Then I do <code>git checkout -b temp</code> so I switch to the <code>temp</code> branch.<br>
On <code>git status</code> I see that there is the file <code>Util.java</code> staged and ready to be commited. I did not expect this since I assumed that once I switch branch, everything is clean.<br>
I do <code>git commit Util.java</code> and the file is commited and the <code>git log</code> graph shows that <code>Util.java</code> is part of the branch of <code>temp</code>. I.e. it follows another ""timeline"" than the one of <code>master</code>.<br>
Why does this work like that? I was expecting to not be to commit <code>Util.java</code> since I created it on a different branch</p>
","0","384706","",""
"32630379","5269166","2015-09-17 12:32:12","27","65820","<git><git-commit><git-reset>","git: Your branch and 'origin/somebranch' have diverged - how to throw away local commits","<p>I have a question that most closely matches my problem was made, but could not add a comment.</p>

<p><a href=""https://stackoverflow.com/questions/19864934/git-your-branch-and-origin-master-have-diverged-how-to-throw-away-local-com"">git: Your branch and &#39;origin/master&#39; have diverged - how to throw away local commits?</a></p>

<p>I ran the tips and answers to the question above, but nothing decided. I am following with a progress chart using the sofwae source tree. I close the software and run the commands in the bash git. But there is the same mistake quoted.</p>

<pre><code># Your branch and 'origin/master' have diverged,
# and have 7 and 11 different commits each, respectively.
#   (use ""git pull"" to merge the remote branch into yours)
</code></pre>

<p>I am also facing the same problem. follow the steps running 2 comentos but not worked. I think my problem is that before I made a checkout for a indiividual head, made a commit in individual head and then I went back to the tree branch / master, and commit that I did, I believe that references the tree head individual. In summary I can not undo this commit, I'm displayed graphically on SourceTree software</p>

<p><strong>EDIT - ADD INFORMATION:</strong>
I'd like to throw out of the unpublished commits and make server checkout. But the solutions I found an internet not working. I also tried git reverse in gitBash the console displays the message that I do deveo</p>

<pre><code>$ Git status
On branch processos_criminais_151029
Your branch and 'origin / processos_criminais_151029' have diverged,
and 7 and 11 have different commits each, respectivamente.
   (use ""git pull"" to merge the remote branch into yours)

Changes not staged for commit:
   (use ""git add &lt;file&gt; ..."" to update what will be committed)
   (use ""git checkout - &lt;file&gt; ..."" to discard changes in working directory)
</code></pre>

<p>I tried the two solutions but none worked. If I try and push gives the conflict a huge amount of files, and I tried to solve these problems with the automatic merge, but to make a new git status he points out that the same quantidde files are conflicts.</p>
","4","5269166","0","0"
"33401029","21704","2015-10-28 20:29:59","4","8124","<git><api><hash><gitlab><git-commit>","How do I find commit hash of a file using GitLab API?","<p>I am trying to find out what the commit hash is for files within my repository. Different files got modified with different commits.</p>

<p>I see this information displayed on GitLab web interface:
<a href=""https://i.stack.imgur.com/VYkBP.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VYkBP.jpg"" alt=""File&#39;s commit hash vs master&#39;s commit hash""></a></p>

<p>But how do I get this information using the GitLab API? I tried doing:</p>

<pre><code>GET /projects/:id/repository/files
</code></pre>

<p><a href=""https://gitlab_server/api/v3/projects/1234/repository/files?file_path=test/file2.tconf&amp;ref=master"" rel=""nofollow noreferrer"">https://gitlab_server/api/v3/projects/1234/repository/files?file_path=test/file2.tconf&amp;ref=master</a></p>

<p>But the commit_id from the response matches HEAD's hash <strong>0f05a8e4bf45942b1189fce923184129821845f1</strong>, instead of what's seen in the screenshot above.</p>

<pre><code>{
  ""file_name"": ""file2.tconf"",
  ""file_path"": ""test/file2.tconf"",
  ""size""     : 44,
  ""encoding"" : ""base64"",
  ""content""  : ""..."",
  ""ref""      : ""master"",
  ""blob_id""  : ""50450759d2b0694b044ed3d7eaf93c2c98dacbba"",
  ""commit_id"": ""0f05a8e4bf45942b1189fce923184129821845f1""
}
</code></pre>

<p>Any clues?</p>
","0","21704","0","0"
"33407449","5256636","2015-10-29 06:37:58","1","1357","<git><bitbucket><git-commit><git-clone>","bit-bucket - download file for specific commit","<p>I can get the project through git clone command, but is there any way where i get my file for my previous-specific commit or can pull my file for previous-specific commit. 
please , suggest me !</p>
","1","5256636","0","0"
"35137351","2509435","2016-02-01 18:06:08","1","152","<git><git-commit><git-checkout><git-reset>","Check commit where a file's history was lost","<p>I have lost some commits in a file. If I check the history of the project, the commits are there, but they are not in the file's history. I suspect that a team member used <code>git reset</code> on the file in a merge conflict, loosing the history in the reset, but I am not sure.</p>

<p>How can I find in which commit a file lost its history?</p>

<p>I've tried several ways without luck. I tried <code>git log --follow {file}</code>, this fetches the missing commits, but it doesn't show me the commit where the history was lost.</p>
","3","2509435","",""
"35151797","1272105","2016-02-02 11:08:51","0","150","<git><commit><git-submodules><git-commit>","Hot to push commit id of a specific submodule to main git repository?","<p>I have a repository A, containing two module B and C. When i commit and push from A, B and C commit id are pushed to the main repo. This can be done via a </p>

<pre><code>git add -A
git commit -m 'great commit!'
git push origin master
</code></pre>

<p>Now, I need to push to the main repo the commit id of B, but <em>not</em> that of C. If it was a normal file, I would do</p>

<pre><code>git add specific_file.ext
git commit -m 'another great commit!'
git push origin master
</code></pre>

<p>but in case of a submodule, how to reach the same result?</p>
","0","1272105","",""
"50801823","9926016","2018-06-11 16:01:45","0","183","<git><git-commit>","How to split a file rename and file change into two commits in Git?","<p>What I'm trying to do is split up both changes into two separated commits.
For example I got a file foo.txt with the following content:</p>
<pre><code>foo.txt

1 foo
</code></pre>
<p>now the <em>filename</em> <strong>and</strong> <em>content</em> was changed to the following:</p>
<pre><code>bar.txt

1 foo
</code></pre>
<p>I managed to let git recognize the filename change and stage it (with <em>git rm</em> and <em>git add</em>), this is what git shows me with</p>
<blockquote>
<p>git status</p>
<p>renamed:    foo.txt -&gt; bar.txt</p>
</blockquote>
<p>How can I continue to get two commits, one with the filename change and one with the content change?</p>
","2","9926016","",""
"51229671","1175080","2018-07-08 07:14:24","6","1725","<git><configuration><git-commit>","How do I prevent Git from auto-detecting user.email?","<p>I don't have any global <code>user.email</code> or global <code>user.name</code> setup on purpose.</p>

<p>I like to set my user.email and user.name per repo by using the <code>git config user.email</code> and <code>git config user.name</code> commands.</p>

<p>On macOS with git version 2.17.0, if I forget to set <code>user.email</code> or <code>user.name</code> for a repo on my Mac, when I run <code>git commit</code> I get this error:</p>

<pre><code>*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'lone@mymac.(none)')
</code></pre>

<p>This is good because it reminds me that I need to set the <code>user.email</code> and <code>user.name</code> config for my repo.</p>

<p>But on my Debian system with git version 2.11.0, if I forget to set <code>user.email</code> or <code>user.name</code> for a repo, whe I run <code>git commit</code> it commits the change with <code>Lone Learner &lt;lone@mydeb&gt;</code> as the author. I am guessing that it auto-detects <code>user.name</code> from <code>/etc/passwd</code> and auto-detects <code>user.email</code> as <code>&lt;user&gt;@&lt;host&gt;</code>.</p>

<p>I would like to disable this auto-detection of <code>user.name</code> and <code>user.email</code> on Debian or any system Git is on. If I have not explicity set <code>user.name</code> or <code>user.email</code> I want Git to fail in the manner it fails as shown in the Mac example above or in some other way. Is there anyway to achieve this either using <code>~/.gitconfig</code> or some other way?</p>
","3","1175080","0","0"
"5910992","289715","2011-05-06 11:51:18","0","153","<git-branch><git-merge><git-commit><fast-forward><automerge>","Find all commits in a particular branch in GIT","<p>This might be a repeated question but i didn't find exact answers.</p>

<p>Lets say i have 2 branches br1 and br2 with 3 commits each.</p>

<p><strong>br1</strong></p>

<ul>
<li>commit a </li>
<li>commit b</li>
<li>commit c</li>
</ul>

<p><strong>br2</strong></p>

<ul>
<li>commit d </li>
<li>commit e</li>
<li>commit f</li>
</ul>

<p>When i merge from br2 to br1, git log on br1 show commits a,b,c,d,e,f.</p>

<p>Lets say i have 2 branches br1 and br2 with 3 commits each.</p>

<p><strong>br1 after merge with br2</strong></p>

<ul>
<li>commit a </li>
<li>commit b</li>
<li>commit c</li>
<li>commit d </li>
<li>commit e</li>
<li>commit f</li>
</ul>

<p>Is there a way to filter commits that were created on br1 alone? (I have tried git log br1..br2 but is there any other method?)</p>

<p>If the merge was Fast-forward or Automerge, will GIT record any commit for the merge? (i see commit when there is a conflict but not in an automerge)</p>
","0","289715","0","0"
"33445991","1870583","2015-10-30 22:51:05","2","849","<git><repository><commit><git-commit>","How can I transfer the commit history of a repository to another repository?","<p>I've spent a few months working on a project.  It broke, I started a new project and just transfered the files, but I would like to transfer just the commit history into the new repository/project?  I am a little familiar with git.  What command line codes would I need to only transfer the commit history?</p>
","0","1870583","0","0"
"35182778","7315037","2016-02-03 16:42:22","0","82","<git><git-branch><git-commit>","Diffrence between a commit and branch in git","<p>I just started using git in my project . But i am still little confuse between a commit and a branch . They do the same function i think so . Can anyone explain me what the difference  between them . Please explain .</p>
","1","7315037","",""
"61767821","3848207","2020-05-13 06:32:09","1","220","<github><commit><git-commit>","How to delete specific commit histories in Github created via file upload?","<p>I normally upload my files to Github repository through the web interface. I accidentally uploaded a file to Github repository recently and this file contains information which I don't want others to see. Now, this private info is permanently recorded in the commit history.</p>

<p>How can I delete this specific commit from Github?</p>

<p><em>EDIT: The commit history was created through the file upload website of github. It was not created using git.</em></p>
","3","3848207","0","0"
"33460008","3192664","2015-11-01 07:07:15","2","315","<ruby-on-rails><git><github><git-commit><octokit>","Create a new repo and push all the code to created repo using octokit.rb - Rails","<p><a href=""https://github.com/octokit/octokit.rb"" rel=""nofollow"">Octokit.rb</a> is a <code>Ruby</code> toolkit for the <code>GitHub API</code>. I want to use it to create a new repo and then push my code to that repo. I am able to authenticate user but not able to create a repo. Can someone point me to the right direction, or if anyone knows any better <code>Github</code> api client please tell.</p>
","0","3192664","",""
"69368280","10782809","2021-09-28 20:46:09","0","536","<git><cron><git-commit>","How do I create a cron job that will commit all my changes in my repository every friday","<p>I'm new to using Git and I made some research and discovered that I can run cron jobs to make my commits into my repository every certain time, my question here is.</p>
<p>Can I create a cron job that runs every Friday at 16:00?</p>
","2","10782809","",""
"18067030","2623678","2013-08-05 20:22:18","-1","151","<git><commit><git-branch><git-commit>","Quickest way to find the initial creation of a branch in git","<p>What is a quick way to find the initial creation of a branch in git?</p>

<p>I want to run it with a diff on HEAD</p>
","3","2623678","",""
"18073106","822580","2013-08-06 06:30:05","11","19877","<git><git-commit><git-checkout><git-stash>","On local branch, don't want to commit changes, but need to switch to another branch","<p>I am working on branch <strong>A</strong> and the feature/task is not done. Then I need to switch to another branch <strong>B</strong> for a quick fix. When I try to switch on another branch Git forces me to save my local changes otherwise I 'll lose my all local changes.</p>

<p>I need to commit my incomplete code. Is there any way that I can switch between multiple branches without committing and losing any code? Or is there a better way to handle the situation?</p>
","1","822580","0","0"
"69371809","4279155","2021-09-29 07:04:37","1","1003","<windows><git><hash><git-commit><file-properties>","How to add commit hash to details of an executable file","<p>One of my previous employers added the GIT hash of the current commit to the &quot;Details&quot; tab of the file properties of the executable, once it was built.</p>
<p>As I found <a href=""http://stackoverflow.com/questions/949314"">here</a>, this command gives the current commit hash:</p>
<pre><code>git rev-parse --short HEAD
</code></pre>
<p>But does anybody know how I can add this to the &quot;Details&quot; tab of the properties of a file?</p>
<p><strong>Edit follow-up of this question:</strong><br />
This question has been written while I had no clue how to start, and there are some general answers. Afterwards, I have decided to go for the <code>GitVersion</code> way of working. I have some question about this too, and those are handled in <a href=""https://stackoverflow.com/questions/72011195"">this follow-up question</a>.</p>
","4","4279155","0","0"
"33497279","745250","2015-11-03 10:53:07","2","971","<git><merge><git-merge><git-commit>","Git merge-base like for a single file","<p>Is there any command to find a common ancestor of a file in two branches?</p>

<p>Say there is a file that was modified independently in two branches. I want to find the last version of that file common to both branches. I believe this boils down to finding the single parent commit for the file in both branches.</p>

<p>However, merge-base only allows to find a parent commit for commits, not files. I tried to specify two last commits modifying the file in their respective branches but the parent commit I got was not in the history of changes of that file in either branch, which is probably due to the fact that a commit usually contains changes to more than one file.</p>
","2","745250","",""
"43076857","7344905","2017-03-28 18:07:29","2","4991","<git><git-commit><git-filter-branch><git-rewrite-history><git-lfs>","Remove all traces of large files in old git commit history","<p>I'm trying to put a Git project on GitHub but its history contains certain large files. If we try <code>git push</code> to GitHub, we are getting an error:</p>

<pre><code>remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: File .OldFiles/blah1/[file].[ext] is 257.29 MB; this exceeds GitHub Enterprise's file size limit of 100.00 MB
</code></pre>

<p>Our first commit(say <code>commit_1</code>) was containing a few large files which were removed in one subsequent commit(say <code>commit_2</code>) without rewriting the git commit history.</p>

<p>We are using <code>AFS File System</code>(may be an extra info) and all the old large files are stored at a specific location in <code>.OldFiles</code> directory.
In <code>commit_2</code>, we have removed <code>.OldFiles</code> with it's contents and also have added <code>blah1</code> directory to <code>.gitignore</code>, but this is not removing their history within Git.
Unfortunately, we need to keep intact several other commits(literally <strong>n</strong> number of commits!) after <code>commit_1</code> &amp; <code>commit_2</code>. </p>

<p>I have tested over a clone at local sandbox by creating a duplicate branch from as <code>commit_1</code>:</p>

<pre><code>git checkout -b fix_branch &lt;commit_1_sha_id&gt;
</code></pre>

<p>Found that <code>fix_branch</code> is still containing large files: <code>.OldFiles/blah1/[file].[ext]</code>.</p>

<p>Maybe we need to remove these large files in <code>OldFiles</code> &amp; it's respective commit histories to do a successful GitHub push.</p>

<p>Tried <a href=""https://stackoverflow.com/questions/307828/completely-remove-file-from-all-git-repository-commit-history"">this</a> but we are getting an error at <code>git rebase</code>:</p>

<pre><code>error: unrecognised input
error: could not build fake ancestor
</code></pre>

<p>Also have tried <a href=""https://gist.github.com/wrburgess/3711050"" rel=""nofollow noreferrer"">this</a> but failed:</p>

<pre><code>git filter-branch --force --index-filter \ 'git rm --cached --ignore-unmatch [project]/.OldFiles/blah1/[file].[ext]' \ --prune-empty --tag-name-filter cat -- --all
</code></pre>

<p>I'm not sure whether we can use git <a href=""https://docs.acquia.com/article/removing-large-files-git-without-losing-history"" rel=""nofollow noreferrer"">cherry-pick</a> as we can not discard all files in <code>commit_1</code> but only these large files.</p>

<p>Is it possible to remove all large files traces by rewriting git history and by editing the commits by using <code>git filter-branch</code> and <code>git rebase -i</code>?</p>

<p>P.S. We do not have <code>lfs</code> or <code>bfg</code> installed in our project space. </p>

<p>A li'l help will be much appreciated to this newbie! :)</p>
","9","7344905","",""
"69737078","14807111","2021-10-27 10:35:31","3","604","<visual-studio-code><git-commit>","How can I add an extended Git commit message in VS Code","<p>I use Visual Studio Code as my IDE. When I make a Git commit, I can only enter the commit message (subject line). Where can I write in the commit body or the extended commit message?</p>
","1","14807111","",""
"33508977","1043012","2015-11-03 21:00:19","0","515","<git><version-control><git-merge><git-commit><git-revert>","Undo multiple git merges","<p>I have two git branches (master and fix_log_messages). I have been making various commits in the fix_log_messages branch and then periodically merging these changes/commits into master. As a result, the master branch contains multiple merges, due to the periodic merging of fix_log_messages branch into master branch. </p>

<p>I now need to remove all the commits which belong to fix_log_messages branch from master branch.  In other words I need to undo multiple merges. I understand that I can revert a single merge using <code>git revert -m 1 &lt;merge-commit&gt;</code>.  But what would be the workflow for removing multiple merges on a branch?</p>

<p>FYI - Changes to master have already been pushed to remote.  All merges were performed using <code>git merge --no-ff fix_log_messages</code>.</p>
","1","1043012","",""
"69738398","13969419","2021-10-27 12:06:53","0","203","<git><image><github><git-commit>","Unable to commit greyed-out files after rename","<p>I have renamed a couple of images in a project to have their names aligned with the names of the files that I receive from API, strangely some of them did commit and went through to remote repo, and some of them didn't. I am unable to commit them no way, I have tried to rename them, remove them, but even so those are still different in color, no matter if renamed or deleted and pasted again, please advise what can I do in this situation.</p>
<p>Those that are more gray (darker) are the ones that are causing problem
<a href=""https://i.stack.imgur.com/P4ZNA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/P4ZNA.png"" alt=""enter image description here"" /></a></p>
<p>Thanks</p>
<p>Hi, thanks @jingx this is my git status</p>
<pre><code>Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   public/assets/images/.DS_Store
        modified:   public/assets/images/categories/korepetycje/chemia.jpg
        deleted:    public/assets/images/categories/korepetycje/matematyka.jpg
        modified:   public/js/RootHomepage.js
        modified:   public/js/app.js
        modified:   resources/js/RootHomepage.js

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Matematyka is shown as deleted because I have renamed the file to Matematykaaa.jpg, and it still is grey in color the thing is that I need it to be capitalized - Matematyka, and this is the new name of the file, however git status is showing that the file name is matematyka lowercased
<a href=""https://i.stack.imgur.com/qP6EJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qP6EJ.png"" alt=""enter image description here"" /></a></p>
","6","13969419","",""
"43267364","663853","2017-04-06 23:31:35","2","98","<git-bash><git-commit><git-extensions><git-add><git-status>","GitBash / GitExtensions issue committing local changes","<p>I am a get newbie.</p>

<p>I have completed development and ready to check in my files.  I thought I checked everything in, but when I look at my repo, I see a sub-directory was not checked in.  So I tried to force the <code>git add . -f</code> but I got this error:</p>

<pre><code>`$ git status
On branch develop
Your branch and 'origin/develop' have diverged,
and have 1 and 5 different commits each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
nothing to commit, working tree clean`
</code></pre>

<p>what should I do?</p>

<p>I don't care about any differences in the repo i want to put my code in the repo as is (no concern for what is in the repo, my code should replace everything)</p>

<p>again, what should i do?</p>
","0","663853","0","0"
"33517230","256465","2015-11-04 08:41:42","4","7688","<git><git-commit>","Format of Git commit messages","<p>What is the name of the format of these Git commit messages?</p>
<pre><code>fix(short message): expanded message
docs(short message): expanded message
feat(short message): expanded message
refactor(short message): expanded message
</code></pre>
","0","256465","0","0"
"18121005","2663585","2013-08-08 08:09:06","0","362","<git><git-push><git-commit>","git: Allow specific files in a commit to be allowed via push to the remote repository based on certain criteria","<p>I have a situation wherein my pre-receive hook script needs to allow only those files in commits whose name starts with <code>Tag_</code></p>

<p>For example, I have a commit which contains 3 files,</p>

<pre><code>Tag_a
Tagb
Tag_c
</code></pre>

<p>now my pre-receive script should allow only <code>Tag_a</code> and <code>Tag_b</code> but not <code>Tagb</code>.</p>

<p>I read somewhere on Stack Overflow that if we reject a file and allow the other files to be pushed, then the hash (sha1) value of the commit may change. </p>

<p>So my question is, is there a way to achieve this?</p>
","3","2663585","",""
"6185695","7965","2011-05-31 09:40:39","6","2330","<git><git-branch><git-commit>","How to combine multiple commits in to one without losing history","<p>I have multiple commits in one branch. When I push these commits for code review, our code review tool creates one review for each commit. </p>

<p>To avoid this I want to merge multiple commits to a single commit. At the same time I don't want to lose the history of commits. Is it possible to create a new branch only for review  and combine all the commits in my master branch to a single commit in my review branch? How do I do this?</p>
","0","7965","0","0"
"69380590","7101888","2021-09-29 16:56:49","5","458","<intellij-idea><pycharm><git-commit>","PyCharm git commit split code block change","<p>Is there a way in PyCharm/IntelliJ to split a block of code-changes into multiple parts, so I can commit only parts of it and if so, how?</p>
<p>I.e. in the example I can only tick the checkbox on line 222 and get the entire code-block in my changeset. What I'd like is to only add line 223 to the commit, but not line 224.</p>
<p><a href=""https://i.stack.imgur.com/uQ7e3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/uQ7e3.png"" alt=""enter image description here"" /></a></p>
","2","7101888","0","0"
"6191138","85616","2011-05-31 17:19:54","69","33633","<git><branch><git-merge><git-commit><git-log>","How to see commits that were merged in to a merge commit?","<p>If <code>my-feature-branch</code> was merged into <code>my-main-branch</code>, how can I see what commits were merged in from <code>my-feature-branch</code>?</p>
","0","85616","0","0"
"6201802","7965","2011-06-01 13:19:32","4","1766","<git><git-merge><git-reset><git-commit>","GIT Pull deleted my commit","<p>After git pull I have done git reset hard to undo the merge with commit id before merge.Somehow my entire commit is gone and I cant the see the commit in history also. But I have the commit id , on git show command I can see my changes.</p>

<p>How can I get back my changes and how to track what mistake I have done</p>
","3","7965","0","0"
"50834445","3311276","2018-06-13 10:02:49","2","671","<git><git-commit><git-log>","How do I get all the commit SHA ID from a branch locally and on remote?","<p>I am trying to get list of all the commit id's for a specific branch,</p>

<p>I am only aware that <code>git ls-remote &lt;git-repo-url&gt; | awk '{print $1}'</code> gives the latest commit sha of all the branches/heads.</p>

<p>my objective its to find if the local latest commit I get from <code>git rev-parse &lt;branch_name&gt;</code> is present in the list of all the commit's retrieved from the remote. if so I need to rebase, if the latest commit SHA on remote is present in the list of local commit sha then but is not my latest that means my branch locally have moved ahead and I do not need to do rebase but just push.</p>
","2","3311276","",""
"50835958","1902346","2018-06-13 11:21:24","0","291","<git><visual-studio><git-commit>","unit test filling form on git commit","<p>I want to have the ability to fill a form (a couple of questions) for every git-commit I do. Something more than a comment. I mean that every time I git-commit, a little unit-test form will pop-up with a couple of built-in questions and the developer will write what was unit-tested before this feature/change commit.</p>

<p>Usually we do commit from command line or from visual studio (we write in C#).</p>

<p>Does anyone know a nice automatic solution for that ?</p>

<p>Thanks !</p>
","1","1902346","",""
"18183392","2663585","2013-08-12 09:16:38","1","906","<git><githooks><git-push><git-commit>","List of files in a git push using git archive","<p>Is there a way to get only those files that are in a <code>git push</code>, onto a separate folder, using <code>git archive</code>?</p>

<p>I tried the below solution</p>

<pre><code>git archive --format zip --output /full/path/to/zipfile.zip ${commitid}
</code></pre>

<p>but I can get the entire repository content. </p>

<p>I am basically looking for files that are being committed and pushed at the server side(pre-receive).</p>
","1","2663585","",""
"43321132","4508728","2017-04-10 10:45:17","0","1148","<git><github><bitbucket><commit><git-commit>","Git commit only for me","<p>I was wondering, is there an option in git for me to commit my changes so I can continue working on my other PC/laptop without anyone else being able to pull?  </p>

<p>Example, I'm working on a feature in one of the branches (notice that I don't want to create a new branch), on my desktop pc and since I didn't finish it and I have to go some place for a couple of days, I want to continue working on my laptop, but I don't want others to be able to pull since it isn't finished it can cause some unwanted behaviour.  </p>

<p>So basically, to commit only for myself and later when I finish I can push to everyone else on the project.</p>
","13","4508728","",""
"6459080","286802","2011-06-23 18:44:31","305","214757","<git><git-push><git-commit>","How can I undo a `git commit` locally and on a remote after `git push`","<p>I have performed <code>git commit</code> followed by a <code>git push</code>.  How can I revert that change on both local and remote repositories?</p>

<pre><code>$ git log
commit 364705c23011b0fc6a7ca2d80c86cef4a7c4db7ac8
Author: Michael Silver &lt;Michael Silver@gmail.com&gt;
Date:   Tue Jun 11 12:24:23 2011 -0700
</code></pre>
","0","286802","0","0"
"69401731","16702732","2021-10-01 06:59:44","0","95","<git><git-commit><git-status>","git-status does not reflect modified file","<p>Eventhough I have made unsaved changes to the README.md file, git status does not reflect modified file and instead says nothing to commit, why is this so?</p>
<p><a href=""https://i.stack.imgur.com/Qnwnn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Qnwnn.png"" alt=""enter image description here"" /></a></p>
","0","16702732","",""
"43527527","2903708","2017-04-20 18:46:28","0","24","<git><git-commit><git-fork>","Moving Assets from one Repo to another, git commit history?","<p>I am moving only section of an apps repo from one to another but was wondering if its possible to keep commit history like in fork on github. </p>
","0","2903708","",""
"33631073","2754599","2015-11-10 13:25:00","0","79","<git><github><compare><git-commit>","Is it possible to automatically split a commit for Github compare view?","<p>At our company code reviews are done in Github compare view by adding comments. Of course you can use difftool or someting. But I'd like to know if there is a way to automatically warn / split a commit when it exceeds <a href=""https://help.github.com/articles/what-are-the-limits-for-viewing-content-and-diffs-in-my-repository/"" rel=""nofollow"">the Github limits</a>?</p>
","0","2754599","",""
"18244416","1205711","2013-08-15 00:18:45","12","4651","<git><version-control><xcode4><git-commit>","Edit a commit message using source control in Xcode","<p>I committed my project using source control in Xcode. After the commit, I realized I forgot to add something to my commit message.</p>

<p>How can I go back and update the commit message?</p>
","3","1205711","0","0"
"43542426","7901333","2017-04-21 12:13:06","6","2270","<json><git><github><git-commit>","Get only the content of each commit in a json ? ( git diff json)","<p>So I'm storring on my github all the differences I get on a json file during time ( I call an api that updates each time the json and only store the differences). To give you an idea ; It's the changes of availability, either an id is available or not. 
What I'm trying to do now : I want to get the content of each commit in a json file in my local machine. SO later I can loop through all the json files in sequence using nodejs or python and then generate a CSV with the data that interest me.</p>

<p>Thank you for your help, </p>
","0","7901333","",""
"69409502","14241023","2021-10-01 16:55:20","-1","238","<git><github><git-commit>","How to recover locally committed changes(but not pushed to remote) after deleting branch from locally?","<p>I have done few changed in my branch which i committed locally but not pushed to remote..but mistakenly i removed that branch from local and then again fetch that branch from remote.</p>
<p>In this scenario how can i get changes which i committed locally?</p>
<p>Thank you for help</p>
","0","14241023","",""
"18267794","356815","2013-08-16 07:13:27","1","149","<git><git-commit>","git commit logs CREATE and COPY multiple times with curly brackets - Why?","<p>Recently I analysed the commit log of my local repo and noticed the following and I would like to know what is happening here. Can anybody give an answer or a pointer to a web site explaining this?</p>

<p>Let's say I have the following file structure:  </p>

<pre><code>/path/a.txt  
/path/b.txt  
/path/c.txt  
/path/d.txt  
</code></pre>

<p>When I commit it, I saw the following in the log:</p>

<pre><code>create mode 100644 path/a.txt
create mode 100644 path/b.txt
copy path/{a.txt =&gt; b.txt} (100%)
create mode 100644 path/c.txt
copy path/{a.txt =&gt; c.txt} (100%)
create mode 100644 path/d.txt
copy path/{a.txt =&gt; d.txt} (100%)
</code></pre>

<p>all files are completely different content-wise.
So what do those curly brackets <code>{=&gt;}</code> mean?</p>

<p>Git version: 1.7.0.4 (don't ask me why I am not using the latest version, it's a client's server where I can not just install the latest version.)</p>
","2","356815","",""
"62281209","7032246","2020-06-09 11:09:33","3","449","<git><github><git-commit><git-filter-branch>","Different SHAs for same commit after filter-branch, when I merge to dev or master wouldn't it fail? How can I prevent this?","<p>I accidentally added a large file to a git repo on a specific branch and had to change the commit history for the branch to remove the file with:</p>

<pre><code>git filter-branch -f --index-filter ""git rm -rf --cached --ignore-unmatch path_to_file"" HEAD
</code></pre>

<p>Now I see different SHAs for the commits on the branch I ran the command, which I am fine with, as the repo is fairly new and only I use it currently. But, when I checked the master branch and the other dev branch, I see the SHAs for the same commit are different. When I do a merge to dev or master (which I didn't do yet) wouldn't it fail? How can I rectify this issue? </p>

<p>The series of git commands that were executed:</p>

<pre><code>git checkout -b move_branch master

add files from location1 commit
add files from location2 commit
add files from location3 commit
merge the master branch of an older repo which was added as a remote   introducing some files including the big file commit 

git filter-branch -f --index-filter ""git rm -rf --cached --ignore-unmatch path_to_file"" HEAD

add files from location5 commit
add files from location6 commit


A--B--C                             master
        \
X--Y--Z--A--B--C--D--E              move_branch (Z is the commit with  big file)

X--Y--I--J--K--L--M--N              move_branch (after filter-branch)
</code></pre>
","7","7032246","0","0"
"43559554","4776831","2017-04-22 13:02:01","0","175","<git><git-commit>","Show who is responsible for which line after in a git project","<p>I know it's possible to visualize who of the team commited to the project and how many changes they have done.</p>

<p>But is it also possible so analyse all current files of the project and generate a documentation like so you know who did the most for some parts of a file like:</p>

<pre><code>User A is responsible for line 1-10
User B is responsible for line 11-30
</code></pre>

<p>With github or any other platform it's only possible to watch the differences between two commits.</p>
","4","4776831","",""
"6762900","133479","2011-07-20 13:39:54","5","575","<git><tortoisegit><git-commit>","Has anybody seen git create a commit that has no date & an all-zero hash?","<p>So a fellow team member, using TortoiseGit in Windows, pulled up his log the other day, and at the top was a commit with a hash entirely of zeroes, no user, and no date, but it did have four modified files and a commit message.</p>

<p>It appears to be a commit from some time ago, but other than that we've no idea.</p>

<p>Is there any way to either correct this commit, or to just remove it, so it's not sitting at the top of his log all the time?</p>
","1","133479","",""
"62504798","179715","2020-06-21 21:47:05","8","439","<git><git-branch><git-commit><git-hash>","How can I get all symbolic names from a Git commit hash?","<p>If a Git commit hash has multiple tags associated with it and/or is the head of multiple branches, is there a good way to list <em>all</em> of them?</p>
<p>I've looked through the options to <code>git name-rev</code>, <code>git describe</code>, and <code>git symbolic-ref</code> but haven't found any options that seem to do what I want.  Frustratingly, <code>git name-rev</code> has a <code>--tags</code> option to list <em>only</em> tags but no apparent mechanism to list only branches (and <code>git name-rev</code> always seems to prefer tags over branches for me anyway).</p>
<pre class=""lang-sh prettyprint-override""><code>$ git checkout -b branch1
$ git checkout -b branch2
$ git tag tag1
$ git tag tag2
$ git name-rev HEAD
HEAD tags/tag1
$ git describe --all HEAD
HEAD tags/tag1
$ git symbolic-ref HEAD
refs/heads/branch2
</code></pre>
<p>To map a commit hash to all of its symbolic names, will I need to run <code>git tag --list</code> and <code>git branch --all --list</code> and then run <code>git rev-parse</code> on all of the results?</p>
","0","179715","",""
"62506819","5374379","2020-06-22 02:59:03","2","89","<git><github><git-commit>","Removing and creating a file in git and the file history: possible bug?","<p>I have a file that I removed using <code>git rm</code> after which I committed successfully.<br />
Later on, I created a new file named after the original file and commit successfully.<br />
But when I look at <code>git log file.txt</code> on this file, instead of seeing a single commit, I see the history of the earlier deleted file.<br />
I was expecting the deleted file to be distinct and unrelated to the new file although both are named the same.<br />
I tried with <code>--follow</code> and I still see the same behaviour.</p>
<p>Did I miss something? (Or is this a bug? I’m using version 2.25 of git on Fedora )</p>
<pre><code>git --version
git init
touch master.txt ; git add . ; git commit -m &quot;Master original created&quot;
git rm master.txt ; git commit -m &quot;Master original Removed&quot;

echo junk &gt;dummy ; git add . ; git commit -m &quot;Dummy Commit&quot;

echo &quot;only line in Master&quot; &gt;master.txt ; git add . ; git commit -m &quot;Master New Created&quot;

git log --oneline --no-rename master.txt
git log --oneline -M100% --no-rename master.txt
</code></pre>
<p>========================================</p>
<pre><code>it version 2.25.1
Reinitialized existing Git repository in /home/sony/gitwork/tt/.git/
On branch master
nothing to commit, working tree clean
rm 'master.txt'
[master ad596ad] Master original Removed
 1 file changed, 1 deletion(-)
 delete mode 100644 master.txt
On branch master
nothing to commit, working tree clean
[master 02492e1] Master New Created
 1 file changed, 1 insertion(+)
 create mode 100644 master.txt
02492e1 (HEAD -&gt; master) Master New Created
ad596ad Master original Removed
42c32af Master New Created
1a057ca Master original Removed
beb0903 Master original created
02492e1 (HEAD -&gt; master) Master New Created
ad596ad Master original Removed
42c32af Master New Created
1a057ca Master original Removed
beb0903 Master original created
</code></pre>
","1","5374379","0","0"
"18322224","1389890","2013-08-19 20:08:59","0","36","<git><git-pull><git-commit><git-status>","git-pull omits a file","<p>Git is saying everything is up to date but there is a file missing on one node's copy of the source tree. On system A:</p>

<pre><code>$ ls -l
abc.py
xyz.py

$ git add xyz.py
$ git status
nothing added to commit...

$ git commit
nothing added to commit...

$ git push
Everything up-to-date
</code></pre>

<p>On system B:</p>

<pre><code>$ git pull
Already up-to-date
$ ls -l
abc.py
</code></pre>

<p>My question is: What happened to file xyz.py on system B? Why did the pull not create it on System B?</p>
","2","1389890","",""
"43779339","7806805","2017-05-04 09:43:51","0","63","<git><github><commit><git-commit>","Strange thing during committing changes with git","<p>So, I am on elementary os. I type git commit. Sublime text opens up with 1st line empty rest lines starting with # i.e. comments telling me what to do.I type my message. I save the file. I exit the editor. I run git status.What the heck?My file is still in the staging area and not committed.I try git commit -m ""My message over here"".This works absolutely fine. But the above message doesn't seem to work at all!!</p>
","7","7806805","",""
"50869111","3016392","2018-06-15 04:29:14","1","478","<github><continuous-integration><continuous-deployment><git-commit><cloud-foundry>","Is there any pipeline for CI/CD from GitHub to Cloud Foundry during commits","<p>My microservice code is in GitHub. I want to automate the CI/CD on pivotal cloud foundry whenever there is a commit in my remote repository of GitHub. Is there any pipeline or hook available in GitHub which can be used out of box to achieve this.</p>
","3","3016392","0","0"
"24978611","969565","2014-07-27 06:50:26","4","3037","<git><github><git-push><git-commit><gitattributes>","What does ""*.jpg binary -delta"" do in the .gitattributes file?","<p><a href=""http://thread.gmane.org/gmane.comp.version-control.git/146957/focus=147598"" rel=""nofollow"">This thread</a> is suggesting placing </p>

<pre><code>*.jpg binary -delta
</code></pre>

<p>in the <code>.gitattribute</code> file for repos in git but I am not sure what it does. I cannot find any examples of the '-delta' flag for git.</p>

<p>The purpose is to apparently speed up commit or push times for larger files.</p>
","0","969565","0","0"
"62527864","2498327","2020-06-23 05:25:00","6","1047","<git><git-merge><git-commit>","How to determine which parent is the first one for a merge commit in Git","<p>I was reading about the difference in using a <code>~</code> vs <code>^</code> operator in git and I came across this question <a href=""https://stackoverflow.com/q/2221658/2498327"">What's the difference between HEAD^ and HEAD~ in Git?</a></p>
<p>The one thing I could not find a good explanation for online after googling is how does git distinguish the first parent of a merge commit from the second one?</p>
<p>Is there a rule of thumb?</p>
<p>Take this example where a <code>feature</code> branch is merged <strong>into</strong> the <code>develop</code> branch, creating the merge commit <code>G</code>.</p>
<pre><code>develop feature/foo
     A   D
     |   |
     B   E
     |   |
     C   F
      \ /
       G &lt;- develop(HEAD)
</code></pre>
<p>Which one is the first parent of <code>G</code>? <code>C</code> or <code>F</code>? Why is it the first parent?</p>
<p>NOTE: This is not a request for the git command to determine the first or the second parent. I'm aware that it can be achieved using <code>git show G^1</code> and <code>git show G^2</code>. I see that <code>C</code> is the first parent of <code>G</code> and <code>F</code> is the second parent. But, I do not understand why that is the case. Is it like the branch on which the merge commit is made determines the first parent?</p>
","1","2498327","",""
"63741176","4554883","2020-09-04 12:26:55","0","664","<git><git-commit>","Is it possible to set multiple user emails in git config?","<p>Is there a possibility of setting multiple user emails?</p>
<p>I'm trying to associate all future commits with several emails so that, for example, they could be found in GitHub/GitLab/(etc) UI by either of the emails, and also an existing GPG signature would still be applicable to that commit. Can this be done?</p>
<hr />
<p>Let me also specify what I don't mean:</p>
<ul>
<li>this is not about setting different emails for author and committer;</li>
<li>this is not about setting multiple authors and/or multiple committers;</li>
<li>this is not about setting different local <code>user.email</code> and global <code>user.email</code>;</li>
</ul>
<p>Basically, I want to change this:</p>
<p><img src=""https://i.stack.imgur.com/QeaYr.png"" alt=""enter image description here"" /></p>
<p>… into something like this:</p>
<p><img src=""https://i.stack.imgur.com/kDUF5.png"" alt=""enter image description here"" /></p>
","0","4554883","0","0"
"45253550","244297","2017-07-22 10:36:48","11","2051","<git><merge><git-commit>","How to check if a merge commit contains manual changes (e.g. resolved conflicts)?","<p>How can I find out if there were conflicts when merging a branch and what shenanigans did the person have to do to resolve those conflicts?  </p>

<p><code>git log -p</code> seems to show empty diffs for all merge commits, regardless whether they have manual changes or not.</p>
","1","244297","0","0"
"8900627","504252","2012-01-17 19:37:26","0","559","<git><version-control><git-submodules><git-commit>","Track Custom commits on Read Only git submodule","<p>I'm working with Three20 as a git submodule on my iPhone app.  I have a couple custom modifications I've made to the three20 library and would like to commit them such that my project sees the commits.  I don't want, nor can I, commit these changes to the actual three20 repo.</p>

<p>Thanks</p>
","4","504252","",""
"45568925","","2017-08-08 12:52:45","0","60","<git><github><version-control><git-commit><git-push>","How to move back to an old version of git repository after having lost all previous commits?","<p><em>Backstory</em> :</p>

<p>My repo (say 'ABC') is hosted in github (but I don't have a version of it locally).</p>

<p>I wanted to add few more files to the same repo.</p>

<p><em>What I did</em> :</p>

<p>I created a new local directory (say 'xyz')</p>

<p>Moved into it and initialized git</p>

<pre><code>cd xyz
git init
</code></pre>

<p>added git remote to link 'ABC'</p>

<pre><code>git remote add origin {link to ABC}
</code></pre>

<p>created some new files and committed them</p>

<pre><code>git add ./
git commit -m ""commit message""
</code></pre>

<p>Next, when I tried pushing the new commit to github</p>

<pre><code>git push origin {branch-name}
</code></pre>

<p>I received a warning that some files of the remote repository are missing in my local machine.</p>

<p>Then, I tried a <em>forced push</em></p>

<pre><code>git push -f origin {branch-name}
</code></pre>

<p>Naturally (which I didn't knew then) I lost all my previous files of 'ABC' and all I have now is 1 single commit (the forced push one).</p>

<p>Also; I don't even have the SHA's of previous commits (atleast I couldn't find them) so, <code>git checkout &lt;commit&gt;</code> doesn't works. Nor does <code>git reset</code> or <code>git revert</code></p>

<p>But searching around in the ABC github repository, I find a <em>tree</em> which shows exactly the files I want to get back. Can I use this tree anyhow or <em>any other steps</em>, to get back my lost files.</p>

<p>Please ignore any mistake and my childlike writing. Some of the technical descriptions may-be wrong as I'm new to git. Feel Free to ask back.</p>

<p>Thanks in advance!</p>

<p>**</p>

<p>Present State of my ABC repo with 1 commit : <a href=""https://github.com/rdrsadhu/UEM-Kolkata-B.Tech"" rel=""nofollow noreferrer"">https://github.com/rdrsadhu/UEM-Kolkata-B.Tech</a></p>

<p>[this is not true anymore. I restored my files by commit c005a51 ]</p>

<p>The tree of ABC repo I'm talking about : <a href=""https://github.com/rdrsadhu/UEM-Kolkata-B.Tech/tree/9e394c24e708e590ec72e5d772be13749fb8cad3"" rel=""nofollow noreferrer"">https://github.com/rdrsadhu/UEM-Kolkata-B.Tech/tree/9e394c24e708e590ec72e5d772be13749fb8cad3</a></p>
","2","","",""
"45571353","1475735","2017-08-08 14:40:57","0","75","<bitbucket><git-commit>","bitbucket file commit always goes to root folder","<p>I do a <code>git add</code>, then <code>git commit</code>, then <code>git push origin</code> of a file from <code>my-dir/x/</code>. Yet each commit always winds up in bitbucket.com's root folder <code>my-dir/</code> (it does not wind up in <code>my-dir/x/</code> folder).</p>

<p>I tried:</p>

<pre><code>git add file.php
git add file.php my-dir/x/file1.php
git add file.php /my-dir/x/file1.php
git add file.php ./my-dir/x/file1.php
</code></pre>

<p>What simple thing am I missing?</p>
","10","1475735","",""
"26986304","3390772","2014-11-18 03:52:13","2","769","<git><svn><gitlab><git-commit>","Revert Merge and history ""undo"" from git","<p>Our normal process on the team is to merge our feature branches into QA branch, test that branch, and then move our feature branch into Master.  Someone on the team was following the normal process, but instead of merging his branch into Master after it was QA'd he merged all of QA into Master.  This screwed up our main branch as items that were not done being QA'd from other developers entered the branch. </p>

<p>The merge was done from the interface of gitLab and not terminal.  What we want to do is completely revert this merge and all 102 commits. We don't want any history of it after the revert.  What is the best way to do this on our remote?  I've seen people mention using -m with git revert, but if i understand correctly it messes up history.  Is there no true ""undo"" for merges?  We're a little desperate here.  THanks!</p>
","0","3390772","",""
"26991777","1697563","2014-11-18 10:16:30","0","248","<regex><git><sed><git-commit>","Regex / sed - how to match the last space character in a line before a 72 character limit","<p>I'm trying to write a command that will format a text file for git commit messages by inserting a line break after character 72 in any relevant lines, but not in the middle of words. If character 72 is in the middle of a word the line break should be inserted at the last space in the line before character 72. The following:</p>

<pre><code>sed -e ""s/.\{72\}/&amp;\n/g"" &lt; msg.md
</code></pre>

<p>will do the insertion at position 72 regardless of word boundaries, but I can't think how to get it to take account of these boundaries properly.</p>

<p>It could be done with a more complex bash/python script or something to go through each line, but I'm curious if it can be done entirely in regex / sed.  </p>
","0","1697563","",""
"27002709","1988876","2014-11-18 19:47:05","1","80","<git><git-push><git-commit><git-reset><git-revert>","Is a git commit required if I rollback using 1) git hard reset or 2) git revert?","<p>I understand there are two ways of rolling back a git commit in remote repository.</p>

<p>Method 1:</p>

<pre><code>git reset --hard &lt;old-commit-id&gt;
git commit -m ""rolling back""
git push -f
</code></pre>

<p>Method 2:</p>

<pre><code>   git revert &lt;old-commit-id&gt;
   git commit -m ""reverting the changes""
   git push -f
</code></pre>

<p>In various posts that I have seen, there is no mention of <code>git commit</code> to be done. But my colleague is convincing me that <code>git commit</code> should be issued and that <code>git push</code> with <code>-f</code>. otherwise, the push will fail. Is my colleague correct? I am still doubtful about it</p>
","0","1988876","",""
"64077534","14308854","2020-09-26 12:11:41","1","661","<git><git-merge><git-commit><pull-request>","Which git command give me only merge commits for the master branch?","<p>I just merged PR to the master.</p>
<p>I want to log all the merges commits.</p>
<p>So which <code>git command</code> give me only <strong>merge</strong> commits for the <em>master branch</em>?</p>
","0","14308854","",""
"45605617","8353123","2017-08-10 06:02:29","0","202","<javascript><github><git-commit>","Get Date & Day from Git commit api","<p>I have called Git commit api, which gives array of 7 days which starts from Sunday, i want day &amp; date from that array. eg. Sun 6 Aug Mon 7 Aug Tue 8 Aug ....
I try to get this with following code which is suggested by 1 developer, but it gives only start day &amp; date. Pls help me to achieve it.</p>

<p>Suggested code:</p>

<pre><code>var data = data.json().data;
        if (data) {

            var months = {};
            for (var i = 0; i &lt; data.length; i++) {
                console.log(data[i]);
                var monthNum = 0;
                if (data[i].week) {
                    console.log(new Date(data[i].week * 1000));
                    monthNum = new Date(data[i].week * 1000).getMonth();
                } else {
                    monthNum = new Date().getMonth()
                }
                if (!months[monthNum]) {
                    months[monthNum] = [];
                }
                months[monthNum].push(data[i]);
            }
            console.log(months);
        }
</code></pre>

<p>Api Response</p>

<pre><code>    {  
   ""success"":true,
   ""data"":[  
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1471132800
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1471737600
      },
      {  
         ""days"":[  
            0,
            0,
            2,
            4,
            0,
            0,
            0
         ],
         ""total"":6,
         ""week"":1472342400
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1472947200
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1473552000
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1474156800
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1474761600
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ],
         ""total"":0,
         ""week"":1475366400
      },
      {  
         ""days"":[  
            0,
            0,
            0,
            0,
            0,
            0,
            0
         ]
    }
</code></pre>
","0","8353123","",""
"45874616","3882565","2017-08-25 04:50:38","3","58","<git><edit><rebase><git-commit>","Git interactive rebase rewrite commit","<p>I want to edit a commit with interactive rebase. When I replace pick with edit, the changes of this commit are still applied on the repo (so that I can edit the commit) but I want to rewrite it from scratch. How can I do that?</p>
","0","3882565","0","0"
"64373424","12044935","2020-10-15 14:09:41","-1","152","<git><git-commit>","git branch is behind origin/branch by 1 commit","<p>My branch is behind origin/branch because I accidentally pushed (there were no changes from the last commit) without adding or committing and then ran <code>git reset --soft HEAD~1</code>.</p>
<p>EDITED:
One strange thing is, the changes I made in my last commit are showing up in my remote branch, but also appear as staged changes (I can make it staged or unstaged in VScode, but the fact that they locally appear as not committed yet).
The command prompt says that I can <code>git pull</code> to fast forward but it didn't do anything.
How can I fix this issue?
Thank you.</p>
","8","12044935","",""
"45880087","4571939","2017-08-25 11:13:10","0","122","<github><gitlab><git-commit><git-diff>","Is there a way to find the important commits in GIT before a release?","<p>As in not only the major changes maybe the installed dependencies and all before a release without checking one by one?</p>
","1","4571939","",""
"45896586","5533446","2017-08-26 14:41:36","2","909","<git><github><bitbucket><git-bash><git-commit>","Git Merging selected branches into a new branch, retaining access to the branches","<p>What exactly do I type to go from:
(I also get a sense from other people that my drawings suggest I don't quite understand git - bear with me.)</p>

<pre><code>               -&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;- (B)
             /            
-----master-            
             \         
               --&lt;&gt;-&lt;&gt;- (A)

where '&lt;&gt;' is a commit.
</code></pre>

<p>to this:</p>

<pre><code>                    (merge A and B into C)

               --------------o-&gt; (C, new 'clean' branch off master)
              /             /
             /-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-/ (B)
            //            /
-----master--            /
              \         /
               --&lt;&gt;-&lt;&gt;-/ (A)

where 'o' is a merge of A and B into C.
</code></pre>

<p>And will I then still be able to <code>git check-out</code> the branches <code>(A)</code> and <code>(B)</code>?</p>

<p>And/or could I do this:</p>

<pre><code>               --------------o-&lt;&gt;-(C)
              /             /
             /-&lt;&gt;-&lt;&gt;-&lt;&gt;-&lt;&gt;-/-&lt;&gt;-&lt;&gt;-(B)
            //            /
-----master--            /
              \         /
               --&lt;&gt;-&lt;&gt;-/-&lt;&gt;-&lt;&gt;-&lt;&gt;-(A)
</code></pre>

<p>If you can, even in some round about way, could you explain? Thanks.</p>
","3","5533446","",""
"27330291","336557","2014-12-06 09:39:11","4","2552","<git><android-studio><git-commit>","Android Studio: How to add line break in git commit message?","<p>When inserting the git commit message, how can I add a line break? Writing another message on a new line doesn't have the effect and the 2 messages are shown in one line on the site (Bitbucket).</p>

<p>I know I can achieve this with command line, but what about here?</p>

<p><img src=""https://i.stack.imgur.com/4hIXm.png"" alt=""enter image description here""></p>
","0","336557","0","0"
"64395646","5432315","2020-10-16 19:58:21","-3","851","<git><alias><commit><git-commit><one-liner>","How can I commit everything that's changed in my git repo with just one command?","<p>I want to commit all of the changes in my repository with <strong>one command</strong>.</p>
<p>I know I can do it with two—using <code>git add -A</code> and then <code>git commit -a</code>—but, as a wise man once said... <a href=""https://youtu.be/VvPaEsuz-tY"" rel=""nofollow noreferrer"">why waste time say lot word when few word do trick?</a>.</p>
<p>Is there not an <code>-A</code> option for <code>commit</code> like there is for <code>add</code>?</p>
","1","5432315","",""
"45900249","71376","2017-08-26 22:43:32","10","3422","<git><git-commit><git-checkout>","Why are folders left in my local git working directory after commit and checkout","<p>I have created a folder containing files in my local working git structure. I created a new branch with git checkout -b and used git add . and git commit -m ""..."" to add those files to my local branch. But, when I do git checkout master the folder I created and committed is still there. Why? I thought git commit would put the folder and its contents into my local branch, switching it out when I checkout master.</p>
","3","71376","0","0"
"45913384","4464551","2017-08-28 07:01:44","10","3588","<git><git-commit>","How to commit a single staged file?","<p>I have staged two files <code>file1.js</code> and <code>file2.js</code> but I only want to commit <code>file2.js</code>. How can I do this?</p>
","0","4464551","",""
"64411383","5761286","2020-10-18 08:46:35","2","1001","<git><github><git-commit>","Commit hash does not exist in git log","<p>I was exploring GitHub projects using git. Some things don't make sense to me.</p>
<p>For example in <em>Opencv</em> I can checkout to commit <code>539f065446a993825d61dddc5d9dc72ae54d7a29</code> (which is version 4.2.0). However when I use <code>git rev-list --all</code> to view the list of all commits, I don't find this hash (539f...).</p>
<p>Why is this the case? This is happening for many tagged commits.</p>
","4","5761286","",""
"9333995","220474","2012-02-17 19:15:00","2","753","<git><git-merge><git-commit><merge-conflict-resolution>","Is the following Git commit strategy correct?","<p>I've just done the following thing with Git but I am not sure if it's the right way of doing things. What I have is a file that has some stuff. Then there is a branch that adds extra stuff to this file (extends it, it's a plugin we sell separately). Let's say branch1 and branch2 have a file with the following content:</p>

<pre><code>-----------
branch1
-----------
123

-----------
branch2
-----------
123
qwe
-----------
</code></pre>

<p>Then I did some work on a major feature in branch1 and made a commit to that branch. After that I merged branch1 into branch2 to re-apply this new feature to the plugin version of the file as well. Now the files are</p>

<pre><code>-----------
branch1
-----------
1234

-----------
branch2
-----------
1234
qwe
-----------
</code></pre>

<p>But the code doesn't completely work and I now need to switch to branch2 and do some changes to the code that extends the file there (change ""qwe"" to ""qwer""). However while working I am also finding some mistakes in the base code (""1234"") and fix them (change ""1234"" to ""12345""). Now my working directory with the HEAD being in branch2 has the following</p>

<pre><code>-----------
branch2 (working directory)
-----------
12345
qwer
-----------
</code></pre>

<p>Now I need to commit this, the result I am aiming for is</p>

<pre><code>-----------
branch1
-----------
12345

-----------
branch2
-----------
12345
qwer
-----------
</code></pre>

<p>I fear that if I just commit this to branch2 and then will separately reapply the 1234->12345 change to branch1 and commit that too, this will yield the results I am looking for but Git will recognize this as two separate and fully independent commits and when I'll be going through a similar process in future (e.g. 12345->123456 in branch1 and then branch1->branch2 merge), I'll get a conflict in that place. So my solution is to use interactive staging to commit only qwe->qwer change to branch2. Then stash the remaining changes (otherwise it won't allow to switch back to branch1), switch to the other branch, apply stash, commit 1234->12345 to branch1 and finally merge branch1->branch2.</p>

<p>That did the trick however since I am relatively new to Git I am not very sure if I am using things right and in the best possible way. Please let me know if the above makes sense and if it doesn't please tell me a better way of doing that.</p>
","0","220474","",""
"64423688","2512151","2020-10-19 08:28:14","-1","857","<git><github><commit><git-commit>","get the git future commit hash before PR is merged","<p>I have some specific scenario.
I have raised one PR . There are multiple commits to this PR.</p>
<p>Now I need to get the commit hash, which is going to be generated after merging this PR to master.
Is it possible to get the commit hash before merging it ?</p>
<p>suppose one application component is : xyz</p>
<ol>
<li><p>we created a PR for that feature branch to master
jenkins -&gt; PR build starts -&gt; deploy the application on a node -&gt; jacoco plugin in the application creates a exec file</p>
</li>
<li><p>PR merge happend from master build -&gt; no deployment for CC now ...</p>
</li>
<li><p>After the deployment is done, from a separate place CC coverage job is triggered -&gt; which is going to take the exec file and push to sonar.</p>
</li>
<li><p>here I was trying to make it like .. the exec file name will have the &lt;Future_git_commit_hash&gt;_xyz.exec</p>
</li>
<li><p>in CC coverage job i will checkout this commit_id .. and then push to sonar.
(here generally we dont need the commit_id, master only we can checkout and push to sonar) ...</p>
</li>
</ol>
<p>problem comes if : before pushing to sonar, again one more PR is raised. and new exec file gets created. so i was thinking to have the commit id so that i can differentiate.</p>
<p>anyway if getting the commitid before merging is not possible.. need to check other approaches.</p>
","5","2512151","",""
"27384695","1975002","2014-12-09 17:08:21","3","2954","<git><git-commit><visual-studio-2015>","Visual Studio 2015 Preview - Can't commit with Git","<p>I can't commit my projects from Visual Studio 2015 Preview.</p>

<p>When I press the <code>Commit</code> button from the Team Explorer window, I get this error message :</p>

<p><img src=""https://i.stack.imgur.com/JTDgF.png"" alt=""enter image description here""></p>

<p>The last sentence in english : <em>The process cannot access the file because it is being used by another process.</em></p>

<p>I couldn't find if any other process actually use the specified file.</p>

<p>In Visual Studio 2013, everything works fine. So actually I'm switching between VS2015 and VS2013 everytime I need to commit some changes made on a project, but it's a real waste of time.</p>
","0","1975002","0","0"
"46162208","5927569","2017-09-11 18:30:32","0","2049","<git><commit><git-commit><git-clone>","Gitcola says ""you must stage at least 1 file before you can commit""","<p>Although I have made changes to the folder of the repository I cloned, somewhy I cannot commit..</p>
","3","5927569","",""
"27600712","363603","2014-12-22 10:22:00","0","323","<git><egit><git-commit><staging>","What happens to the git index when I commit?","<p>When I run <code>git commit</code>, the changes in the index are added to the local repository.</p>

<p>However, what happens to the index afterwards? Some GUI tools, e.g Eclipse EGit shows that the index is cleared, but isn't that misleading? After a commit, are the contents of the index just the same as the contents of the local repository?</p>
","0","363603","0","0"
"46174085","4462399","2017-09-12 10:30:56","31","27608","<npm><dependencies><repository><git-commit><package.json>","Should changes in a package.json file be commited to a repository as well?","<p>I am not sure that if it is correct to commit and push the changes in the package.JSON file into a repository. as far as I understood, the others in the git can install new dependencies by executing this command: npm install and accordingly, their package.JSON will be updated too.OR, this files actually says what are the new dependencies and needs to be pushed as well.
It would be great if some could clarify me. :)</p>
","1","4462399","0","0"
"64827492","740067","2020-11-13 20:16:30","2","861","<git><git-commit><gnupg><sign><dotfiles>","How do you approach signing git commits on many machines?","<p>Let's say I have my dot files and 2 computers</p>
<ol>
<li>home computer</li>
<li>job computer</li>
</ol>
<p>I have configured git, like this (inspired by <a href=""https://dev.to/chakrit/multiple-identity-gitconfig-with-gpg-signing-8c0"" rel=""nofollow noreferrer"">https://dev.to/chakrit/multiple-identity-gitconfig-with-gpg-signing-8c0</a>)</p>
<pre><code># default case
[include]
  path = config.personal

# when working with company-x
[includeIf &quot;gitdir:**/company-x/**/.git&quot;]
  path = config.company-x
</code></pre>
<p>where config files are</p>
<pre><code># home config
[user]
  name = Firstname Lastname
  email = firstname.lastname@home.example.net
  signingkey = some-key1

# job config
[user]
  name = Firstname Lastname
  email = firstname.lastname@job.example.net
  signingkey = some-key2
</code></pre>
<p>This is going to work on as long as I have <code>some-key1</code> and <code>some-key2</code> GPG keys on all machines, but I can't, can I?
So what's the approach for that?</p>
<p>Should I separately generate all keys for all computers (like <a href=""https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/#generating-a-gpg-key"" rel=""nofollow noreferrer"">https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/#generating-a-gpg-key</a>)?</p>
<p>Should I share my home key somehow or generate it on my job computer?</p>
<p>Should I sign my personal projects with my company key &amp; email? I'd rather not.
I'd like to have my personal email in my personal projects, regardless on which computer I did a commit.</p>
","1","740067","0","0"
"46183254","3242384","2017-09-12 18:30:15","1","793","<git><gerrit><git-commit><git-review>","Is it possible to review an old commit (ie. already merged commit)?","<p>I had an audience member ask if Gerrit will allow you to review a commit after the fact. This would allow their current project to keep moving forward while their larger and older team could continue to learn Gerrit usage along the way. This way, their next project could fully adopt Gerrit as a gate for their commits as intended.</p>
","4","3242384","",""
"64840485","12857878","2020-11-15 01:47:19","3","3184","<git><git-commit><git-sign>","What is the difference between git commit -S and -s?","<p>I recently got to know about signed commits and they are recommended. We can sign commits locally with <code>git commit -S</code>. After that I read the git man page and there was an option called <code>-s</code> (used as <code>git commit -s</code>) and it said that option signs the commit. When I look up <code>-S</code> it says that it signs the commit with GPG keys.</p>
<p>I am setting up signed commits with GPG keys in GitHub. Does this make a difference when pushing or is it the same when it comes to pushing to remote?</p>
","2","12857878","0","0"
"46196359","4869170","2017-09-13 11:28:11","2","776","<git><azure-devops><git-commit><azure-pipelines><azure-pipelines-build-task>","Trigger build if commit messages contain text","<p>Is there any way for a VSTS build definition to interrogate the git commit messages and only trigger if any of the commit messages contain pre-defined text?</p>

<p>Alternatively is it possible to have a task within the build definition that will stop the build if the predefined text does not exist in any commit message?</p>
","2","4869170","",""
"46205090","2054434","2017-09-13 19:04:49","11","18605","<git><git-commit>","May I list the files of the current commit?","<p>Imagine that everytime I commit files, before I push them, I'd like to list them to check. How may I do that ?  </p>

<p>I tried:  </p>

<pre><code>git ls-tree -r --name-only master
git ls-files -stage
</code></pre>

<p>If I edit a single file, <code>add</code> then <code>commit</code> it. If I try the above codes, it shows me all my files.</p>

<p>I want to list ONLY the files that will be pushed on the current commit.</p>
","2","2054434","0","0"
"27635980","4322932","2014-12-24 11:13:17","0","47","<git><git-push><git-commit><git-pull>","Git push prevention to remote","<p>I have created a git bare repository in my local system and I have maintained a few files in it now. Other users can clone, pull, push and commit changes, who know my ip address and git path. All I want to do is allow all user with only read permission. I dont want them to push it into the repository without me reviewing it. So when they commit the changes.I should be able to review it and then update it in the repository.Can anyone help me with this setting and the git commands to use.</p>

<p>Regards,</p>

<p>Sathya Prasad P</p>
","0","4322932","",""
"27642116","4071486","2014-12-24 20:58:06","-1","51","<github><git-commit><git-add><git-status>","Doing a commit in github","<p>Actually i am a beginner in using github.
so here is my question.when i try to show commits in github i have a problem,so before adding the modification when i run <code>git status</code> i not only get the modifications inside the file as changes modified but also the total file as modified. for eg:</p>

<pre><code>user@ubuntu:~/folder$ git status -s
 M path/to/file
 M path/to/file~
</code></pre>

<p>so due to this when i commit my commits show 2 changes instead of just one change but this is not the actual problem as i can solve this by giving <code>git add path/to/file</code> and commiting.
But when i try to show changes in a macro level how i can i solve this problem???</p>

<p>For eg: if i edit 50 documents in my repo which already exist,how can i just add the changes in the documets and not the whole document including the changes as 2 separate changes in my commit history?</p>

<p>I add link to an example commit for more clarification if needed.
<a href=""https://github.com/Dhinesh-Ravi/Example/commit/01b78ffd25cfbbc18845e57bdad45f4131e2fa5c"" rel=""nofollow"">Example Commit Click Here</a></p>

<p>Hope I have clearly explained my doubt.
I would be more thankful if u clear my doubt step by step.</p>
","3","4071486","0","0"
"27642908","3888177","2014-12-24 23:04:17","5","4145","<git><git-commit><commit-message>","If git commit messages written in the imperative, how do I clarify what hasn't yet been done? 'Don't add hashing' or 'Didn't/Doesn't add hashing'?","<p>I'm still not totally clear about the way git commit messages are supposed to be written.</p>

<p>I know the basic rules, but this one confused me. In my practice project, I created a login system and a user signup, but had not yet implemented secure password storage in the database. They were still being stored Sony style in plain text. I wanted to make a note of that in the commit message, but I found myself in a bizarre quandary about how to phrase that in the imperative.</p>

<p>Any thoughts?</p>

<p>I do think, personally, that this should be included in the commit message, even though it is a statement of what <em>isn't</em> included in the commit, because it represents important info for anyone wishing to use the code that may not be obvious by glancing at the changes.</p>
","5","3888177","0","0"
"9842698","1276724","2012-03-23 16:14:50","1","2683","<git><github><commit><git-commit>","How to do a Second Commit in Github","<p>Can anybody explain how can use github to store my project. I have created an account,created a repository, uploaded my files to it all these are done mechanically by following their help.  But i dont know what to do next. How can i do a second commit.
and what is mean by branch please explain it as to a beginner i am not understanding their help too.</p>
","4","1276724","0","0"
"27646646","1675976","2014-12-25 11:09:02","2","507","<git><git-commit>","How can I delete commits that are after the current HEAD?","<p>In my Git repository, I created three commits in a row: <code>commit1</code>, <code>commit2</code>, and <code>commit3</code>. </p>

<p>I then realized I messed up in <code>commit2</code> and <code>commit3</code>, and decided to go back to <code>commit1</code>. To do that, I ran</p>

<pre><code>git checkout commit1
</code></pre>

<p>Now I am in <code>commit1</code>. How do I delete <code>commit2</code> and <code>commit3</code>?</p>
","1","1675976","",""
"46218133","1611620","2017-09-14 11:39:48","0","657","<git><visual-studio-2017><git-commit>","VS 2017 - fatal error on sync or pull","<p>I am trying to sync in VS 2017 incoming and outgoing commits and I'm getting an error:</p>

<pre><code>Git failed with a fatal error.
pull --verbose --progress --no-edit --no-stat --recurse-submodules=no origin
</code></pre>

<p>If I'm trying to pull only, the error is the same.</p>

<p>Have no clue what's this about and how I can overcome it. Don't know much about git.</p>
","3","1611620","",""
"46221861","140053","2017-09-14 14:34:53","4","19661","<git><git-commit>","Git commit without staging","<p>I noticed that git allows to commit a tracked file (which was modified locally) directly without using staging, eg:</p>

<pre><code>$ git status -s .
 M   myfile.txt
$ git commit myfile.txt -m""1 way""
</code></pre>

<p>Is it better to use, instead, the ""classic"" two steps ? :</p>

<pre><code>$ git add myfile.txt
$ git commit myfile.txt -m""2 way""
</code></pre>
","1","140053","0","0"
"27655875","4395484","2014-12-26 10:28:40","3","744","<git><tfs><azure-devops><git-commit>","Git Commit policy in TFS","<p>We are currently using Visual Studio On-line and TFS. As a company policy we want to enforce a commit to have work item assigned, but we can't find a way to enforce this, Is anyone know to enforce commit policy in TFS with GIT repository ? </p>
","0","4395484","0","0"
"27671550","4398609","2014-12-27 21:17:43","-1","184","<git><github><git-push><git-commit>","delete or change commits after pushing to github","<p>I made my commits and pushed to github. Then, I realized that one is a wrong file and I forgot to add a new file.
I would like to either completely undo or delete my pushed commit or add and delete the files from my pushed commits.
Which is easier and what should I do?(I am the only one working on this repo so no one hasn't pulled or changed my commits.) </p>
","3","4398609","0","0"
"64903220","2789681","2020-11-18 23:52:11","0","299","<git><github><git-commit><pull-request>","Additional git commits not showing up on initial PR in GitHub","<p>I have a forked branch that was cloned from github.
I pushed a commit to the forked branch and created a PR to merge to the original branch. The PR looked fine.
Problem started when I pushed a second commit to the forked branch, I expected the PR to be auto-updated but the 2nd commit didn’t show up. What went wrong?</p>
","0","2789681","",""
"65190008","3693060","2020-12-07 21:55:07","0","480","<git><github><git-commit>","Different commit number after PR completion to master branch","<p>I'm trying to create a Pull Request in GitHub repository from one (example: develop) branch to master branch. The commit number in master branch is different from commit number in develop branch after PR completion.</p>
<p>Commit in develop branch:</p>
<p><a href=""https://i.stack.imgur.com/wbxFs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wbxFs.png"" alt=""enter image description here"" /></a></p>
<p>Commit in master branch after PR completion:</p>
<p><a href=""https://i.stack.imgur.com/31hFr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/31hFr.png"" alt=""enter image description here"" /></a></p>
<p>Is there a way to make sure that the commit number <strong>won't change</strong> after PR completion? It <strong>stays the same</strong> as in develop branch?</p>
","0","3693060","",""
"43970559","7990023","2017-05-15 01:56:54","3","33899","<git><github><git-commit>","What is exactly meaning of commit command in git","<p>commit is </p>

<blockquote>
  <p>A commit, or ""revision"", is an individual change to a file (or set of
  files). It's like when you save a file, except with Git, every time
  you save it creates a unique ID (a.k.a. the ""SHA"" or ""hash"") that
  allows you to keep record of what changes were made when and by who.
  Commits usually contain a commit message which is a brief description
  of what changes were made.</p>
</blockquote>

<p>but i didn't got it </p>

<p>What is exactly meaning of <code>commit</code> in git and git hub?</p>

<p><strong><em>NOTE</em></strong>:-This not dupli of any Q I am clear about <code>git push</code></p>
","4","7990023","0","0"
"46557365","1204344","2017-10-04 05:04:06","1","596","<regex><bash><git-bash><githooks><git-commit>","Git multiple lines commit message validate with regex","<p>I'm working on git commit-msg and I created regex which should validate commit message. When I create regex for one line it works. When I have message in multiple lines it doesn't. I'm working on Windows. This is code I created (regex was checked at regex101.com):</p>

<pre><code>#!/usr/bin/env bash

commit_regex='^(TASK([0-9]+))\ \-\ ([A-Z](.*))[\n\r]{2}(\-\ (.+))(([\n\r]{1}-\ (.+))?)$'
error_msg=""Commit message invalid""
if ! grep -iqE ""$commit_regex"" ""$1""; then
    echo ""$error_msg"" &gt;&amp;2
    exit 1
fi
</code></pre>

<p>Sample text to validate:</p>

<pre><code>TASK123 - Task description

- commit description
- additional info (optional)
</code></pre>

<p>Some suggestions how to correct this script? I'm not familiar with git hooks that much and creating bash.</p>

<p>Edit:
When I add z option to like this -izqE it still doesn't work.</p>
","4","1204344","",""
"65230093","3835843","2020-12-10 07:22:20","6","3650","<git><git-commit><git-husky><lint-staged>","Unstaged changes could not be restored due to a merge conflict","<p>When I execute <code>git commit -m &quot;commit message&quot;</code> command, lint-staged shows this error:</p>
<p><a href=""https://i.stack.imgur.com/jzuwl.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/jzuwl.png"" alt=""enter image description here"" /></a></p>
<p>My configuration in package.json:</p>
<pre><code>&quot;husky&quot;: {
    &quot;hooks&quot;: {
        &quot;pre-commit&quot;: &quot;npm run validate &amp;&amp; lint-staged&quot;
    }
},
&quot;lint-staged&quot;: {
    &quot;*.+(js|ts|tsx)&quot;: [
        &quot;eslint&quot;
    ],
    &quot;**/*.+(js|json|ts|tsx)&quot;: [
        &quot;prettier --write&quot;
    ]
},
</code></pre>
<p>It works fine on <strong>mac</strong> but <strong>windows-10</strong> shows this error. Can anyone tell me what's going wrong with windows?</p>
","1","3835843","0","0"
"65241389","12368797","2020-12-10 19:52:43","0","10128","<git><github><gitlab><git-commit>","Apply range of commits from one branch to another","<p>I got 2 branches</p>
<pre><code>a -- b -- c -- d -- e -- f -- g -- h     &lt;-- master

a -- b -- c                              &lt;-- Branch1
            
</code></pre>
<p>i need to apply the commits e, f and g onto Branch1</p>
<p>Tried with:</p>
<p><code>git rebase --onto gSha1 eSha1 hSha1</code> after checkout on Branch1 and it didn't worked (as said <a href=""https://stackoverflow.com/a/45336654/12368797"">here</a>)</p>
<p>tried with <code>git cherry-pick eSha1^..gSha1</code> but it dont worked too (As mentioned <a href=""https://stackoverflow.com/questions/1994463/how-to-cherry-pick-a-range-of-commits-and-merge-into-another-branch"">here</a>)</p>
","3","12368797","",""
"65243181","2510839","2020-12-10 22:26:38","1","170","<git><git-branch><git-commit><git-rebase>","Git: add file to old commit being parent of a new branch already merged back?","<p>given the following git log, how do i add a file (which never existed in any commit) to commit B, so that this new file will appear in every other commit that A?</p>
<pre><code>A --&gt; B -----&gt; D ------&gt; F
       \--&gt; C --&gt; E --/
</code></pre>
<p>In my attempts with git rebase --onto i did not succeed in not having to essentially duplicate every commit amending the contents but i am sure i am not approaching it using the full power of git. Any help?</p>
<p>Note: remote is fine to be forced, or even deleted and pushed again, that's not a worry.</p>
<p>Thanks a lot</p>
","0","2510839","",""
"66674084","7536271","2021-03-17 13:27:43","0","293","<git><github><git-commit>","Git - Delete unwanted commit messages on source code","<p>I'm <strong>new to Git</strong> and I have made a mistake when trying to push the project onto Github using Git Bash. The project has been successfully uploaded onto Github. However, I later noticed that source code contains unwanted lines of code (<strong>e.g: &quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&quot;</strong>), as well as the commit message which should <strong>not</strong> appear within the source code. How can I rectify these errors, please? I'm including a couple of screenshots to display the unwanted comments. Thanks in advance!</p>
<p><img src=""https://i.stack.imgur.com/ob6XC.png"" alt=""image"" /></p>
","3","7536271","",""
"47988748","5916915","2017-12-27 08:24:52","16","1844","<git><git-rebase><git-commit>","Show diff when writing commit messages during an interactive rebase","<p>When doing a regular git commit, <code>git commit --verbose</code> shows the diff in the text editor when writing the commit message.</p>

<p>Suppose I am doing an interactive rebase (<code>git rebase --interactive</code>) to edit previous commits. To 'continue' rebasing, I run <code>git rebase --continue</code>. This opens a text editor for editing the commit message, but it does not show the diff. After making changes to a commit, how can I display the diff when (re)writing the commit message during an interactive rebase?</p>

<p><code>git rebase --continue --verbose</code> doesn't seem like a valid command...</p>
","4","5916915","0","0"
"30346096","293420","2015-05-20 09:47:42","0","102","<git><git-commit>","Git remove specific files from all previous commits","<p>I started a small project (10mb) and as it grew and produced output images it grew exponentially (to 12 gb). I realize I was uploading my images which are not part of the code. I removed them, added a rule not to upload images and kept commiting. Problem is now the code is still a few mb but the whole repository weighs 2 gb. I would like to revert or remove all the changes in the history where I uploaded images I mean every time I sent</p>

<pre><code>new file: image.png 
</code></pre>

<p>to the server it uploads the image, now I want to remove any trace of the images.</p>

<p>I am working in a brach on my own.</p>

<p>Can some one tell me how to do this?</p>
","0","293420","",""
"6695134","561638","2011-07-14 14:46:59","0","1227","<git><git-merge><git-submodules><git-commit><git-pull>","Git submodules reference is not a tree","<p>A developer here ran the steps we recommend for git usage, and has lost a submodule commit.  I understand that this error means that she pushed in the super project but not in the submodule, but she denies this and has a history of her commands that she showed me.  Here are the steps that seemed to have caused this.  I would like to understand how to tell her to avoid this in the future.</p>

<ul>
<li>She committed in the submodule and in the superproject.</li>
<li>she pulled in the latest on her branch.  This caused a submodule conflict with no real content conflicting</li>
<li>she ran git commit -a in the superproject to resolve it.  (It would be helpful to understand this type of conflict too).</li>
<li>She ran a merge from another branch and committed in both places.</li>
<li>She ran a global push which cds into each submodule, runs push and then runs push in the superproject.</li>
</ul>

<p>At this point, her work committed in the original commit in the submodule disappeared from <code>git log</code>.</p>
","2","561638","",""
"43721422","413225","2017-05-01 15:13:46","0","616","<git><git-commit><git-reset>","Roll back both on local branch and master branch?","<p>How can I roll back to the last commit both local branch and master branch?</p>

<pre><code>$ git reset --hard HEAD^
HEAD is now at e861a3e Added push menu label.

$ git status
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)
nothing to commit, working tree clean
</code></pre>

<p>It asks me to pull. But if I pull I wiil get the same commit back from the master branch.</p>

<p>I made a mistake in my code and I have committed and pushed. So I need to roll back the commit and the push.</p>

<p>How can this be done correctly?</p>
","2","413225","",""
"30390337","2759617","2015-05-22 07:03:50","10","18125","<git><git-commit><git-pull>","Working on the same branch, how to pull without losing changes?","<p>I am working on the same branch as my colleagues. Now I have committed some files and sent for code review and so has some other co-worker. Now he pushes his code before I do. I now need to pull his changes back and then add my changes. But it's already committed.</p>

<p>How do I get his changes and then add my changes without the history looking bad and me having to jump hoops? I am very new to git.</p>
","2","2759617","0","0"
"66687171","3416648","2021-03-18 08:19:27","0","32","<java><git><newline><git-commit>","Make git ignore consecutive newlines","<p>I'd like to track in git just the code (java), I'd like to have it ignore additions of multiple newline from previous commit (if no other code has changed) ex:</p>
<p>I'd like this</p>
<pre><code>class MyApp{
    public static void main(String[] args) {
        if (args.length &gt; 0) {
            for(String s : args){
                system.err.println(&quot;arg is &quot;+s+&quot;\n&quot;);
                }//end-for
            }//end-if
        }//end-met
    }//end-class
</code></pre>
<p>And this:</p>
<pre><code>class MyApp{


    public static void main(String[] args) {


        if (args.length &gt; 0) {
            for(String s : args){

                system.err.println(&quot;arg is &quot;+s+&quot;\n&quot;);

                }//end-for
            }//end-if


        }//end-met



}//end-class
    
</code></pre>
<p>to be considered the same (code should be seen as different only if non-newline character is added)</p>
<p>The goal of doing this is avoid replica of the same file when only noise has been added (if I search the file in git I'd like to get only when &quot;actual&quot; code changes has happened)</p>
","3","3416648","",""
"43729526","7949773","2017-05-02 03:18:53","1","198","<eclipse><git><git-commit><git-merge-conflict>","Git: Weird phenomenon in commit conflict","<p>I'm new to the git world and here is a very weird commit conflict problem which is happening to me all the time. I use git through eclipse.
It is pretty weird so I try to explain it simply. Here is what I've done</p>

<ol>
<li>checkouted source from remote to local branch</li>
<li>made some change to the file A.java and did the commit-push 
A new commit was created and pushed to the remote. Everything was just normal.</li>
<li>made sure that nobody made any change or pushed new commits</li>
<li>made some change to the file A.java again and did the commit-push again</li>
<li>then it told my present local version was not fast-forward and a conflict had been caused, the file A.java</li>
</ol>

<p>Here is the history </p>

<pre><code>origin source ------- second commit-push

      |
      -------- first commit-push
</code></pre>

<p>The second commit-push's parent was not the 'first commit-push', which was so confusing. Wasn't it supposed to be the 'origin source'? </p>

<p>And this weird phenomenon doesn't just happen to successive commit-pushs for the same file. It's happening to every commit-pushs. A new commit-push I create start from the second newest commit instead of the newest one and an auto-merging will be created if there is no conflicts within my commit and the newest one.</p>

<p>Anyone can tell me what is happening and why it is happening? </p>
","2","7949773","0","0"
"48003231","4000073","2017-12-28 07:14:49","-2","123","<svn><git-merge><git-commit><git-push><svncommit>","SVN and GIT commit history & code differences","<p>Where are the log messages , commit history and code differences are stored in SVN &amp; GIT. How are they different in terms of maintaining commit history and code differences?</p>
","1","4000073","",""
"66691421","6626554","2021-03-18 12:49:13","0","37","<git><git-commit>","Get the commit ID of the last tag in git history","<p>I am on a commit which is not tagged. But there are tags in the commit history. So, following command gives me the latest release tag from the history</p>
<pre><code>git describe --abbrev=0 --tags
</code></pre>
<p>Above outputs the tag like <code>1.15.21</code> which is good.<br />
How can I get the commit ID that this tag was created on?</p>
","0","6626554","",""
"30426867","371699","2015-05-24 18:27:12","3","183","<git><git-merge><git-commit><git-merge-conflict>","How to merge a git branch that results in only a single commit (like using --squash), but allowing future merges without conflicts?","<p>I have a branch with many commits in it since creating it and would like to make a single merge commit to move it back to master, usin a single commit. So the only solution I know if is to use <code>git merge --squash branchname</code>. This works well, but if someone adds more commits to <code>branchname</code> and I again merge it into master, I get conflicts from the initial new commits on <code>branchname</code>. How do I prevent merge conflicts, while still only keeping a single commit in <code>master</code> for each merge? I have looked into using <code>git merge --no-ff</code> but that still moves all the commits from <code>branchname</code> into <code>master</code>.</p>
","0","371699","0","0"
"30446281","1009091","2015-05-25 21:31:44","3","4800","<linux><git><git-commit><git-add>","git remove a file that no longer exists on the system","<p>I have never encountered this problem before and have no idea how this is possible. I had a really large directory that I downloaded by mistake into my git repo. I inadvertently did a <code>git add .</code> so the large directory got added to the working tree and when I tried to commit, it didn't allow me to, as the file was too big.
Then I didn't do a <code>git rm</code> and directly removed the file from the filesystem. The next time I tried to commit, it didn't allow me to and is still complaining that the directory (which is now no longer present on the filesystem) is too big. </p>

<p>Doesn't removing a file from the filesystem also remove it from the git working tree?</p>

<p>If there is a way to undo my last 2 commits without losing changes,and then re-push it to remote, that would be great.</p>
","0","1009091","",""
"30452646","1165734","2015-05-26 07:51:37","1","38","<git><github><git-push><git-commit><git-reset>","Revert commits back after the head was changed and pushed","<p>I've committed some bad code a few days ago and today I changed and pushed an older head to master.</p>

<p><strong>Before changing head:</strong></p>

<p>commit 4</p>

<p>commit 3 <strong>- bad code starts here</strong></p>

<p>commit 2 <strong>- i set the head here and pushed</strong></p>

<p>commit 1</p>

<p><strong>After changing head:</strong></p>

<p>commit 2 <strong>- current head</strong></p>

<p>commit 1</p>

<p>The problem is that now I want those 'bad commits' back.</p>

<p><strong>It is possible to get them back?</strong></p>
","0","1165734","",""
"24951107","3521479","2014-07-25 08:16:36","1","828","<git><branch><git-commit><git-log>","Git log only master branch","<h2>Is there any way to display in git log only commits, which have been ever pointed by master branch?</h2>

<p><em>For example:</em></p>

<pre><code>*   c7e0107 - (22 hours ago) Merge branch 'branch_b' - MASTER
|\
| *   3b90496 - (22 hours ago) Merge branch 'branch_a' into branch_b -
| |\
| * | 033fef1 - (22 hours ago) _____________ -
| * | 29449c6 - (22 hours ago) _____________ - 
* | |   cbd8a15 - (22 hours ago) Merge branch 'branch_a' - MASTER
|\ \ \
| | |/
| |/|
| * | e5e4aa4 - (22 hours ago) _____________ - 
| * | 7215282 - (22 hours ago) _____________ - 
| * | e9aadd9 - (22 hours ago) _____________ - 
| * | 4824cef - (22 hours ago) _____________ - 
* | | 4a13ff3 - (22 hours ago) _____________ - MASTER
| |/
|/|
* | 77b9965 - (22 hours ago) _____________ - MASTER
* | 47fef00 - (22 hours ago) _____________ - MASTER
|/
* 2cd1c2e - (22 hours ago) _____________ - MASTER
* 768ebc8 - (22 hours ago) _____________ - MASTER
</code></pre>

<p>And I would like to display only commits described as 'MASTER'. I notice that '--first-parent' option or 'git cherry -v master' doesn't work. I can't also do it from graph because often master branch isn't on the leftmost side.</p>
","3","3521479","",""
"24951901","1798201","2014-07-25 09:00:54","1","328","<git><repository><git-push><git-commit>","git how to move files in the repository one step back","<p>I am totally new to git and I can't figure out how to solve the problem. When I clone project from remote repository there's a duplicate "".git"" folder in it and it looks something like: <code>repo/.git/trueprojectfiles(including real .git containing indexes)</code> my problem is that the git looks for index files in the fake .git folder and fails. As a result I can't do any changes to repository. How can I make repository to look like this: <code>repo/trueprojectfiles</code> and push the changes to remote?</p>
","5","1798201","0","0"
"30487298","4035943","2015-05-27 15:48:22","1","176","<git><git-push><git-commit><git-squash>","Squash commit message in master branch","<p>In Git after last push to remote repo I worked on master branch. I have 6 commits to push now. I want to squash these 6 into 1 commit message then do push.</p>

<p>Any suggestion? </p>
","0","4035943","0","0"
"43763237","7776359","2017-05-03 14:41:46","0","18","<git><github><push><git-commit>","Pulling a Git repository brings different files","<p>We are working in a project which code is hosted in Github. At some point the main branch <strong><em>master</em></strong> had to be rolled back to a certain commit. We did that by locally rolling back to the commit, then forcing a push to the remote.</p>

<p>That seemed to work well, and checking directly in Github shows that the files were all rolledback, and the folders expected to dissapear did, which is correct.</p>

<p>Then I deleted my local <strong><em>master</em></strong> in order to fetch the new one. I did so by running:</p>

<pre><code>git checkout someotherbranch
git branch -D master
git fetch --all
git checkout master
</code></pre>

<p>Some files actually seem correct, that is rolled back to the specified commit, however some folders with the files inside remain there. Also some other file, an HTML file, didn't correctly rolled back.</p>

<p>Is there any step I am missing?</p>
","3","7776359","",""
"48063495","6674013","2018-01-02 15:22:05","0","67","<git><github><command-line><git-commit><git-add>","How to Add Modified Changes to File Without Adding the Entire File in Git?","<p>I used <code>git checkout</code> to pull a file from a certain branch on Git, and made the small modified changes to it. However, I don't know how to add the changes without adding the whole file.. meaning that I am using <code>git add</code> to add the file I just modified.. However when I used <code>git commit</code>, and then <code>git show &lt;commit-id&gt;</code> to see the changes.. every time they rewrite the whole file as insertions, instead of showing insertions, deletions.</p>

<p>Basically how do I add my modification to a file without having to insert the entire file? (I am trying to push a commit to a existing pull request on GitHub and I don't think it's wise to rewrite, and push a entire new file instead of just the small changes)</p>

<p>Please advise</p>
","8","6674013","",""
"66706502","13770864","2021-03-19 10:33:46","0","67","<git><branch><commit><git-commit>","How to reverse to the previous branch in SWIFT?","<p>I merged my newest xcode commit with older ones i.e. I pressed &quot;Checkout&quot; but now it looks like I am unable to recover the newest build as my main build is the older one I merged.</p>
<p>Is there any way to go back to the newest build I just merged with the older one?</p>
<p><a href=""https://i.stack.imgur.com/cVdHc.jpg"" rel=""nofollow noreferrer"">attaching an image of my commits</a></p>
","4","13770864","",""
"48075169","1156518","2018-01-03 10:05:18","31","15949","<commit><git-commit><conventional-commits>","Semantic commit type when remove something","<p>What semantic commit type is better to use, when I remove a feature: <code>feat</code>, <code>refactor</code> or something else?</p>
","0","1156518","0","0"
"25177634","2482582","2014-08-07 08:27:18","1","40","<git><git-commit>","git: Test my project with the added files before committing them","<p>Let's say my project is compiling successfully, and now I want to commit it in two steps. I added half of the files in order to commit them, but how to make sure that the project of the previous commit + the files I added to be committed are compiling successfully ?</p>

<p>What I am looking for is a git command which will ""create"" a project with the HEAD commit + the added files so that I can test the maybe-future commit.</p>
","0","2482582","0","0"
"48082803","647991","2018-01-03 18:03:58","0","5343","<git><git-commit><git-stage>","Edit the changes to be committed","<p>I have some changes to be committed in one file, already added (but not committed). The file has other changes in the current directory, which are not to be committed. <em>But</em> I need to edit some of the changes that are about to be committed, before I actually commit. Clear? I thought so!</p>

<pre><code>» git status
On branch dev
Your branch is ahead of 'origin/dev' by 2 commits.
  (use ""git push"" to publish your local commits)
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   myfile  &lt;-- I need to edit this

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   myfile  &lt;-- I do not care about this (for this specific commit)
</code></pre>

<p>So, before actually committing, I want to change the staged changes. <code>git commit -i</code>  lets me manually edit a patch. Can I somehow use this feature directly on the staged changes?</p>

<p>Another way to solve this would be to stash the non-staged changes, edit the file in the working directory and adding those changes. But I have the impression that when I unstash I will get conflicts.</p>
","3","647991","",""
"30531079","1350476","2015-05-29 13:36:56","0","45","<git><git-commit><git-checkout><git-reset>","Undo all files within a folder in git","<p>I searched and found many link which talks about un-doing your uncommited changes with respect to specific file:</p>

<ol>
<li>git reset </li>
<li>git reset --hard </li>
<li>git checkout -- file</li>
<li>git checkout branchname^ filename</li>
</ol>

<p><strong>but I want to undo changes for all the files I have modifies under a specific folder.</strong> </p>

<p>assume I have a folder like this <code>clients/libs/slickgrid</code> &amp; <code>slickgrid</code> internally contains multiple folder which contains multiple files. </p>

<p>I want to undo all modified files under slickgrid folder. What options I have over here?</p>
","0","1350476","",""
"30540608","3470632","2015-05-29 23:36:05","14","10106","<git><git-branch><git-commit>","How to replay a commit onto a branch that already contains the commit?","<p>Lets say our commit history looks like</p>

<pre>
    1--2--3--4
             ^
            HEAD
</pre>

<p>Where 4 is the most recent commit.</p>

<p>Is there a way to replay the changes from commit 2 (the differences between 2 and 1) onto commit 4?</p>

<p>You are probably wondering why anyone would want to do that. Lets say that this is your production branch that is always supposed to be in a working state. Lets say that earlier, when the commit history looked like</p>

<pre>
    1--2
       ^
      HEAD
</pre>

<p>You had a realization and thought that commit 2 might break everything, and so you quickly pushed out a revert commit, where commit 3 reverts commit 2. Then someone makes commit 4 that contains good content you want to keep. At this point you realize that commit 2 was actually ok, and so you want to replay it on top of 4.</p>
","1","3470632","0","0"
"62726064","13712112","2020-07-04 06:29:31","5","33909","<git><github><visual-studio-code><git-commit>","git push and commit is not working in Vscode","<p>I signed up in vs code with git , did all setup , my repository  is loading and showing all the modifications done but the commit and push is not working , as i press commit no error shows up.
It syncs properly with git . I even tried to remove all and re do all.</p>
","0","13712112","",""
"48129188","4523359","2018-01-06 16:06:21","2","956","<git><git-commit>","GIT: How to remove a folder and its contents from Initial commit?","<p>How to remove a folder and its contents from Initial commit?</p>

<p>I have an initial commit having several directories. Then a lot commits based on it.</p>

<p>Example:</p>

<pre><code>Commit A, having the following directories &amp; files:
A/aaa.txt
B/bbb.txt
C/ccc.txt

A - B - C - D - E - F
</code></pre>

<p>I would like to delete directory B &amp; C from initial commit A.
Then 
    - create B1 branch with B/bbb.txt.
    - create C1 branch with C/ccc.txt.</p>

<p>So finally the tree would look like this:</p>

<pre><code>A(modified) - B1 - C1 - B - C - D - E - F
</code></pre>

<p>How to get this result?</p>

<p>Thanks! </p>

<p>EDIT1: I would like to remove the directory only from the Initial commit.
Thus I think it is different from the other question, and not duplicate.</p>
","3","4523359","0","0"
"25208635","3923136","2014-08-08 17:07:44","3","89","<git><merge><branch><move><git-commit>","Old git-commits move to new branch","<p><strong>I have the following problem:</strong><br>
- I have Master branch and a Dev branch and I recently added another one called TA-17.<br>
- I submitted all my commits to this branch merged it with Dev, and closed TA-17 branch.<br>
- Then I commited twice something to Dev branch<br>
- Now I created a new branch (from within JIRA) called TA-38 and made the first commit to it.  </p>

<p><strong>Result:</strong><br>
- All old commits from TA-17 now appear as they have been made in the new TA-38 branch (and in DEV)<br>
- No new branch is visible in the graphical display on the left next to my commits  </p>

<p><strong>Expected result:</strong><br>
- All old commits should still show as being submitted as TA-17 even though the branch has since be closed.<br>
- A new branch should be visible in the graphical display on the left of my commits<br>
- The 2 commits I submitted to DEv branch only, should not be marked as being TA-38 (63782a8 &amp; 2a93cb3)   </p>

<p><strong>After this i played around a bit more:</strong><br>
- Deleted the TA-38 branch and the one commit it contained (and see all old commits now show only as being part of DEV again)<br>
- Merged master into DEV (1 commit behind)<br>
- Created the TA-38 branch again with 'git branch'<br>
- Committed a new commit to TA-38 branch  </p>

<p>and again all old commits move to the new branch (now show as part of DEV &amp; TA-38)  </p>

<p><strong>What did I do wrong, and how can I fix it ?</strong><br>
<a href=""https://bitbucket.org/kamaradski/t-a/commits/all"" rel=""nofollow"">https://bitbucket.org/kamaradski/t-a/commits/all</a>  </p>

<p>This is probably a user error, but I cannot find any information on this topic.<br>
I might be missing something, maybe i need to rebase, or run some sort of reset...?  </p>
","0","3923136","",""
"62741401","13849019","2020-07-05 13:35:25","4","53","<r><git><github><rstudio><git-commit>","While committing the file to GitHub.It is not taking the user.name configured to Git. And instead using the username of GitHub. Why is it so?","<p>I have used <strong>&quot;themisslady&quot;</strong> as my username for GitHub.
In Git, I have configured the following user.name to Git, using this command----
<strong>git config global user.name &quot;Miss lady&quot;</strong>. The email id configured with Git is same as that of GitHub.</p>
<p>I am using RStudio and while committing the file from within RStudio to GitHub, I am getting this notification-------themisslady committed the file xyz. While I thought it should have said -----Miss lady committed the file xyz.</p>
<blockquote>
<p>git version---2.27.0.windows.1</p>
</blockquote>
<blockquote>
<p>Rstudio version-----</p>
<p>R version 3.5.3 (2019-03-11)
Platform: x86_64-w64-mingw32/x64 (64-bit)</p>
<p>Running under: Windows &gt;= 8 x64 (build 9200)</p>
</blockquote>
<p>Please answer why is it happening like this.</p>
","3","13849019","",""
"48170699","7452139","2018-01-09 14:47:19","2","112","<git><git-commit><git-log>","Git - number of lines changed when bad history","<p>I have to calculate numbers of code added/removed per commit, in a git repo, but I have said repo a bit borked. At one point, one of the devs duplicated same commit, ammended one of them, pulled without rebase and merged them afterwards.</p>

<p>The history is (part of it):</p>

<p><code>
 D
 | \
 C  |
 |  B
 | /
 A
</code>
Both B and C removed the same files (resulting in 48k lines removed per commit) and then created an empty D commit. C added some files that B didn't.</p>

<p>I'm running <code>git log --shortstat --reverse --pretty=oneline &gt; log.txt</code> command to get the log and then read it line by line and add/substract values returned.</p>

<p>The bit from the log (simplified for brevity):
<code>
SHA-A message
4 files changed, 134 insertions(+), 3 deletions(-)
SHA-B message
6 files changed, 48337 deletions(-)
SHA-C message
13 files changed, 9 insertions(+), 48342 deletions(-)
SHA-D Merge branch 'feature/B' of origin into feature/B
</code>
I also tried using <a href=""https://github.com/ITikhonov/git-loc"" rel=""nofollow noreferrer"">git-loc</a></p>

<p>the output is:</p>

<p><code>2018-01-09 15:31:00       10   +10    -0 c3694d2 DemoBytom@gmail.com    A
2018-01-09 15:33:22        0    +0   -10 dc17b64 DemoBytom@gmail.com    B
2018-01-09 15:33:48       -8    +2   -10 9cad481 DemoBytom@gmail.com    C
2018-01-09 15:34:50       -8    +0    -0 f22017c DemoBytom@gmail.com    Merge branch 'origin/feature/B' into feature/B
2018-01-09 15:34:56       -8    +0    -0 9e495a1 DemoBytom@gmail.com    Merge branch 'feature/B'</code></p>

<p>Now - the question is - can I somehow get a proper number of code, in the commit, even if some deletions/insertions are duplicated and then merged?</p>

<p>I need to present statistics of how our repositories changed, and how much code was written in different periods of time, I cannot show them with negative values, nor can I, realistically, go through each commit in each repo to find such occurencies. Are there any tools that could present proper number of lines, at each commit step?</p>

<p><a href=""https://github.com/DemoBytom/borkedGit"" rel=""nofollow noreferrer"">Example repository</a></p>
","2","7452139","",""
"48171629","3386310","2018-01-09 15:34:25","6","1457","<github><timestamp><push><git-commit>","How to know when a commit was pushed to a remote repository on GitHub?","<p>I am working on a project where I need to know when exactly a commit was pushed to a remote repository on Github. Using the git APIs and commands I can only find the commit's '<code>authored_date</code>' and '<code>committed_date</code>', which represent the time of the commit at the local repository.</p>

<p>I tried the approaches presented in this question: <a href=""https://stackoverflow.com/questions/6795070/is-there-a-way-in-git-to-obtain-a-push-date-for-a-given-commit"">Is there a way in git to obtain a push date for a given commit?</a>. They only work when a commit was pushed from the same local machine, while I need them for commits in a cloned projects.</p>

<p>Thank you.</p>
","2","3386310","",""
"62764390","7697615","2020-07-06 20:56:11","0","62","<github><commit><github-api><git-commit>","Filter commits by a unique user","<p>I am using GitHub API v3. I want to filter the commits in a repository to ones which are committed by a specific author. I used following API to do this. While it does not work always.</p>
<pre><code>https://api.github.com/repos/:owner/:repo/commits?author=:author&amp;page=1&amp;per_page=100
</code></pre>
<p>for instance, for the following one.</p>
<pre><code>https://api.github.com/repos/mtreinish/linux/commits?author=mtreinish&amp;page=1&amp;per_page=100
</code></pre>
<p>In that case, it returns following results.</p>
<pre><code>{
  &quot;message&quot;: &quot;Server Error&quot;,
  &quot;documentation_url&quot;: &quot;https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository&quot;
}
</code></pre>
<p>Could you please help me to resolve the problem.</p>
","3","7697615","",""
"44035926","3067748","2017-05-17 22:48:04","1","715","<gitlab><git-commit><git-add>","Upload files to Gitlab, but show as subproject","<p>I tried to upload a folder <code>the_one_simulator</code> to Gitlab, but the folder is uploaded as a subproject, as shown below. </p>

<p><a href=""https://i.stack.imgur.com/t4TNl.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/t4TNl.png"" alt=""enter image description here""></a></p>

<p><code>the_one_simulator</code> was originally a repository in Bitbucket. I just copied it into <code>nc_ptn</code>, and ran the following command under <code>nc_ptn/</code>. </p>

<pre><code>git add .
git commit -m ""Add the ONE simulator""
git push -u origin master
</code></pre>

<p>How do I upload all files under <code>the_one_simulator</code> to Gitlab?</p>

<p>I deleted <code>the_one_simulator/.git/</code>, and tried <code>git add .</code>, but encountered the following issue,</p>

<pre><code>$ git add .
Assertion failed: (item-&gt;nowildcard_len &lt;= item-&gt;len &amp;&amp; item-&gt;prefix &lt;= item-&gt;len), function prefix_pathspec, file pathspec.c, line 317.
Abort trap: 6
</code></pre>
","0","3067748","0","0"
"14075919","359862","2012-12-28 21:17:43","116","77035","<git><intellij-idea><git-commit>","Using IntelliJ to amend git commit message","<p>Can one amend a git commit message using <code>IntelliJ</code>, or should one resort to command line?</p>

<p>How can this be done please?</p>
","0","359862","0","0"
"66734211","15445776","2021-03-21 15:32:23","0","68","<git><git-commit><githooks><python-re>","Can I replace message in my commit message(git)?","<p>I used commit-msg hook in git to check if my commit are right and want to automatically replace the BugID with the Bug Address. But it seems like it can only add one more row at the bottom of the commit message instead of replacing the original lines. Is there any way I can make it work?
my commit template is</p>
<pre><code>Branch:
BugId:
Description:
</code></pre>
<p>Here's my code:</p>
<pre><code>with open(sys.argv[1],r+) as fp:
    lines=fp.readlines()
    for line in lines:
        if line[0]==&quot;#&quot;:
            continue
        line=line.strip()
        for l in l.split('/n'):
            if not l.split(&quot;:&quot;)[-1]:
                print(l,&quot;is empty&quot;)
                sys.exit(1)
            if l.startswith(&quot;Bug&quot;):
                fp.write(l.replace(l.split(&quot;:&quot;)[-1],&quot;http:bugs.xxxxxxxxx&quot;)
sys.exit(0)
</code></pre>
","3","15445776","",""
"48232343","9210472","2018-01-12 18:49:36","0","8467","<git><git-branch><git-commit><git-clean><git-untracked>","How to revert git clean","<p>I have a git flow question.</p>

<p>I've worked in my code on a local 'developer' branch in git. Then after work was finished I did an add of all changed files and after that I committed it on my local branch 'developer'. Then I wanted to checkout to my local 'master' branch to pull the new version from remote 'master' branch to after that merge the new remote version with mine from the 'developer'.</p>

<p>But the checkout to the local 'master' from the local 'developer' was aborted because of some untracked files. Unfortunately I used <code>git clean -f -x -d</code> to clean my repository and this deleted all the files even the committed ones. I thought this will only delete the untracked ones. However I'm able to see my commit on git extensions tool but by using <code>git status</code> it shows that a lot of files were deleted.</p>

<p>I know that a clean is not revertable, but as I did a commit before cleaning up may I somehow ""ignore"" the clean I did by reverting to my last commit I did on my local developer?</p>

<p>Hopefully there is a possibility.</p>

<p>Many many thanks in advance.</p>

<p>EDIT: I did the things provided and it worked. I am at my old commit which has the changes made. But unfortunately the git clean deleted some folders which are required for the project. Now some build paths are missing which are required. This folders are empty ones but still needed for project flow. How can I readd this empty folders deleted by the clean I made? A pull from origin/master didn't work. There the folders are available.</p>

<p>Regards,
alfi92. </p>
","2","9210472","",""
"25501072","2494535","2014-08-26 08:17:05","6","874","<api><gitlab><git-commit><gitlab-api>","Get MR related data from Gitlab API","<p>How to:</p>

<ol>
<li>Get all commits in a <strong>particular</strong> Merge Request.</li>
<li>Get all users who committed in a <strong>particular</strong> Merge Request.</li>
<li>No. of lines added/deleted/updated by a <strong>particular</strong> <em>user</em> in a Merge Request.</li>
</ol>

<p>Can't find how to use Gitlab API(<a href=""http://doc.gitlab.com/ce/api/"">http://doc.gitlab.com/ce/api/</a>) for getting all the above mentioned. Is there a way Gitlab API can help to get these directly or by introducing some sort of hack.</p>
","0","2494535","0","0"
"48240029","8890104","2018-01-13 12:50:54","0","45","<visual-studio><github><git-commit><git-revert>","Syncing project with the last commit from Github","<p>Long story short:I made a few mistakes in the current developing session and I deleted some files which shouldn't be deleted(That's what I call fail refactoring).In the last commit on GitHub I can find those files.So my question is:is there any way that I could discard the changes I made today and go back in time to the last commit? If yes,which steps should I follow?</p>

<p>PS:I use the GitHub extension in Visual Studio</p>
","0","8890104","",""
"24990488","2750910","2014-07-28 07:35:05","-1","786","<git><git-branch><git-commit><git-show>","Search specific git commit by commit message and exlude branches","<p>I am currently working on a program to filter slow db queries that are stored in a database on the command line. </p>

<p>I would like to search all the commits in all the branches except the one specified and return  all the commits that match. </p>

<p>My filter conditions are stored in a database (which is provided for me). </p>

<p>Example: </p>

<p>I have the following entry in the database:</p>

<pre><code>ID key       Query
1  ABCDEF    select * from example
2  0ABCDE    select * from another_example
3  1ABCDE    select * from you_get_the_picture
</code></pre>

<p>I am now interested in the queries that haven't been fixed in the code yet. So I need to search through the branches with the <strong>key</strong> as a search filter. </p>

<p>If the key is found in a commit, skip and look up the next. If no match is found, print it to stdout. All the code works fine but I'm having trouble finding the correct git command. </p>

<p>I have the following: </p>

<pre><code>git grep 'ABCDEF' $(git rev-list ^origin/master) | xargs git show -s --format=%N%s
</code></pre>

<p>Which should return all commits containing ""ABCDEF"" in the commit message in all the branches except origin/master. </p>

<p>However, the git command doesn't return anything which is not possible since I know that these commits are there. </p>

<p>Is my git command not correct? Thanks in advance for any pointers. </p>
","2","2750910","",""
"33772030","2031033","2015-11-18 04:44:57","1","988","<json><git><github><github-api><git-commit>","how do I get all my recent commit messages from github?","<p>I would like to display all of my recent commit messages from github on a website. Is this possible?</p>
","6","2031033","",""
"25006486","3831251","2014-07-29 00:30:13","1","5222","<git><github><editor><git-commit>","I can't make edits to my files on GitHub web-based editor","<p>The ""Edit"" button has disappeared on the web-based editor for GitHub.com</p>

<p>I used to be able to edit my files on GitHub directly online and commit my changes, but the edit button is now gone. Does it have something to do with the recent merging of the branches?</p>

<p>How can I get this edit button back? I can't post a picture because I don't have enough reputation yet, but it is the ""EDIT"" button that is usually to the left of the ""RAW"" ""BLAME"" ""HISTORY"" buttons.</p>
","0","3831251","",""
"18435800","816180","2013-08-26 02:30:09","0","1219","<git><git-commit>","Resolve Git commit conflict when pull tells me to stash changes","<p>I created a file, file.txt, and then added one line with my commit to the master branch with the default text </p>

<pre><code>""-----Text--------""
</code></pre>

<p>Another developer on the repository, MrA, cloned the source and edited his work like this:</p>

<pre><code>""-----Text--------""
Line added by MrA;
</code></pre>

<p>MrA commits to the remote repository in the server.</p>

<p>At the same time MrB also modified the same file like this</p>

<pre><code>""-----Text--------""
Line added by MrB;
</code></pre>

<p>When MrA commits there's no problem since there's no other changes before his. </p>

<p>But when MrB wants to commit it has an message error saying there is a conflict. When MrB tries to pull he gets an error message that you move file.txt or stash it to merge the content.</p>

<p>What should I do to resolve this conflict?</p>
","0","816180","",""
"69441724","4215893","2021-10-04 19:57:32","9","10458","<macos><git-commit><atlassian-sourcetree><githooks><husky>","How can I fix these errors using Husky with SourceTree on MacOs with nvm? ""Can't find node in PATH"" and ""Current directory is not a git directory!""","<p>I'm seeing errors when I use husky hooks in a node project and attempt to commit to git via an app, SourceTree. The hooks are specified in <strong>package.json</strong>. I'm using nvm to manage node versions.</p>
<p>The error <code>Can't find node in PATH</code> <code>husky &gt; pre-commit hook failed</code>
is reported when SourceTree is used for a git commit.</p>
<p>Once this error is bypassed, husky reports another error when commit is attempted via SourceTree, using SourceTree's embedded git: &quot;Current directory is not a git directory!&quot;.</p>
<p>How can I resolve the errors?</p>
","0","4215893","",""
"18472036","791406","2013-08-27 17:36:49","0","91","<eclipse><git><github><egit><git-commit>","Why does git stop commit when some other file was changed?","<p>I've got a project on git, assume it has the following files:</p>

<pre><code>HelloWorld.java
README.md
pom.xml
</code></pre>

<p>I edit/commit <code>README.md</code> using Github's editor; no problem. Then, in eclipse using eGit, I edit <code>HelloWorld.java</code>, but when I attempt to commit and push that file, I get an error: <code>non-fast-forward</code>. Unless I do <code>Pull</code> first I can't commit the java file. Why is this the case? Using SVN I never had such a problem. Why does Git not allow me to commit a file when some other, unrelated file in the project is changed? I read up on <a href=""https://stackoverflow.com/questions/5667476/git-non-fast-forward-rejected"">this</a> but I still don't understand the rationale behind the issue.</p>

<p>BTW, I'm making all changes on <code>master</code> for now.</p>
","0","791406","",""
"44049603","7333443","2017-05-18 13:48:50","0","128","<git><github><git-commit><git-push>","How to prevent git push - only verified emails can be pushed","<p>In GITHUB. How can I prevent unverified emails from pushing changes into the repository? sometimes code can be pushed even if user.email is not set. how to prevent this?</p>
","7","7333443","",""
"44049797","3527914","2017-05-18 13:57:02","0","87","<git><version-control><git-commit><git-push><git-remote>","Hot fix between two remote git repositories","<p>I have two git remote repositories, one is for test and the other is for production.</p>

<pre>
    git remote -v
    production      https://ejemplo@bitbucket.org/deploy/pr1.git (fetch)
    production      https://ejemplo@bitbucket.org/deploy/pr1.git (push)
    test    https://ejemplo@bitbucket.org/deploy/pr1_test.git (fetch)
    test    https://ejemplo@bitbucket.org/deploy/pr1_test.git (push)
</pre>

<p>When someone make a change, they work locally and push to the testing remote:</p>

<pre>    git push test master</pre>

<p>Someone makes the pull, test the change and if tis OK, push it to production.
<br><br></p>

<pre>    git push production master</pre>

<p>The problem is when i have various changes to test before push to production, but i need to apply an inmediate hotfix. 
I cant push the hotfix to production without push al the others changes that are before it (not tested yet).</p>

<p><br>
<br>
example: 
<br>
<br></p>

<pre>
    test repository : 
    test commit 6 - <b>hotfix</b> (i fix something) 
    test commit 5
    test commit 4
    test commit 3 - to this point is equal to production.
    test commit 2
    test commit 1
</pre> 

<pre>
    Production repository: 
    production commit 3
    production commit 2
    production commit 1
</pre>

<p>I want to push the hotfix commit (commit 6) without push to production commit 4 and 5. Is possible to do this?</p>

<p>Thanks.</p>
","1","3527914","0","0"
"62780379","9127397","2020-07-07 17:03:55","0","108","<git><github><git-commit><git-push><git-config>","Github - contribution not showing even mail and username are set","<p>I've read lot of similar questions but nothing helps.
I set user name and email correctly, even made my repo public and still contributions are not shown on Github page...
When I check my repo directly I can see new changes but even this it is still showing that changes were made couple hours ago.</p>
<p>To verify:
my repo:</p>
<pre><code>https://github.com/geborskimateusz/mini-microservices
</code></pre>
<p>git configs:</p>
<pre><code>mateuszgeborski@macbook-pro mini-microservices % git config --global user.name
geborskimateusz
mateuszgeborski@macbook-pro mini-microservices % git config --global user.email
mateuszgeborski@gmail.com
</code></pre>
<p>remote url</p>
<pre><code>mateuszgeborski@macbook-pro mini-microservices % git remote -v
origin  git@github.com:geborskimateusz/mini-microservices.git (fetch)
origin  git@github.com:geborskimateusz/mini-microservices.git (push)
</code></pre>
<p>why is that?</p>
<p>I am doing it always the same:</p>
<pre><code>git add .
git commit -m &quot;message&quot;
git push origin master
</code></pre>
<p>still contribution graph is not updated.</p>
","6","9127397","",""
"18475605","1024786","2013-08-27 21:14:46","1","127","<git><git-rebase><git-commit><merge-conflict-resolution><squash>","Squash commits without conflicts AKA a forced squash","<p>I've made a bunch of commits and I'm supposed to have only one. The most recent commit is the one I want to push but I need to squash it all down to one commit. When I try <code>rebase -i</code> I have to deal with tons of merge conflicts. </p>

<p>Is there anyway to just squash the commits into one message while keeping the code in the most recent commit?</p>

<p>Basically if there are conflicts I just want the most recent commit to win every time. How do I accomplish this?</p>
","2","1024786","",""
"33835825","908939","2015-11-20 20:48:29","3","290","<git><git-branch><git-merge><git-commit><pull-request>","How do I rename a root project folder without hindering my team?","<p>The root folder of our repository has a space in it.<br>
I'd like to make a pull-request that replaces this space with an underscore.</p>

<p>As you know, git does not store directories; only filenames.  Therefore, this change will affect every source file in our codebase.  </p>

<p>How can I make this change while giving my coworkers the least amount of problems?  </p>

<p>All of our developers branch off of a single branch named <code>dev</code>, and my change will also need to occur on a sub-branch of <code>dev</code>.</p>

<hr>

<p>Here are my desired goals, and current restrictions.  </p>

<p><strong>goals:</strong>  </p>

<ul>
<li><p><em>minimal hindrance on other developers</em>.   (We have hundreds of active 
branches, some of which are pull-requests).  </p></li>
<li><p><em>preserve history.</em>   (Ideally, I'd like this change to showup as a
rename, or a move on the individual file's history).</p></li>
<li><p><em>minimal merge conflicts</em> (if possible)</p></li>
<li><p><em>avoid unintentional side effects</em> (there may be details I'm not aware of.  I should note that we have developers on both windows and linux- although this is not a case sensitive file change.)</p></li>
</ul>

<p><strong>restrictions:</strong>  </p>

<ul>
<li>I don't have access to directly change the <code>dev</code> or <code>master</code> branch.  </li>
<li>cannot perform any force pushes (so I won't be able to rewrite history).  </li>
</ul>
","1","908939","",""
"62792665","13387448","2020-07-08 10:24:56","1","100","<git><commit><git-commit><git-log>","How to use git log -L /regex/ with linebreak?","<p>Git documentstion <a href=""https://git-scm.com/docs/git-log"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-log</a> says that there is a command</p>
<pre><code>git log -L &lt;start&gt;,&lt;end&gt;:&lt;file&gt;
</code></pre>
<p>&quot;start&quot; and &quot;end&quot; can be number, /regex/, +offset or -offset.</p>
<p>I am looking for commits that modify a piece of code matching the regular expression. For this I put the regular expression in &quot;start&quot; and offset=&quot;+1&quot; in &quot;end'.</p>
<p>But I was faced with a problem: I have a regular expression that consists of several lines. Is it possible to insert a line separator in /regex/ used in &quot;git log -L&quot;?</p>
<p>Or, is there some other way to look at the history of commits that modify a piece of code that matches a regular expression consisting of several lines?</p>
","0","13387448","",""
"18514659","263900","2013-08-29 15:08:50","227","106186","<git><git-commit><git-fsck><git-dangling>","What is a dangling commit and a blob in a Git repository and where do they come from?","<p>I'm looking for the basic information on dangling commits and blobs.</p>
<p>My repository seems fine. But I ran <code>git fsck</code> for the first time to see what it did and I have a long list of 'dangling blobs' and a single 'dangling commit'.</p>
<p>What are these things?  Where did they come from?  Do they indicate anything unusual (good or bad) about the state of my repository?</p>
","0","263900","0","0"
"18516600","2433664","2013-08-29 16:43:38","15","5071","<git-commit><github-for-windows>","GitHub for Windows: How to commit only a part of the file?","<p>I am new in GitHub for Windows. I learn how to commit a single change.
But i don't understand how can i commit only a part of file.
On GitHub for Mac you can just select the line.</p>

<p>How can i do it on GitHub for Windows?</p>
","6","2433664","0","0"
"18548455","2327283","2013-08-31 13:03:15","4","6586","<git><git-commit><atlassian-sourcetree>","How to recover LOST WORK resulting from the use of git?","<p>I'm using SourceTree and what happened is that I clicked on ""Commit"", then added all changed files, but before committing I wanted to remove one of the files in order to commit it later.</p>

<p>I right-clicked on my file and was offered the following choices: </p>

<ul>
<li>Remove</li>
<li>Discard</li>
<li>Stop Tracking</li>
<li>Unstage from index </li>
</ul>

<p><img src=""https://i.stack.imgur.com/WesrC.png"" alt=""enter image description here""></p>

<p>I was really confused by those choices, I clicked ""Discard"" and now all the work done in this file was lost!!!</p>

<p><strong>PANIC MODE! How can I recover my changes in this file?</strong></p>

<p>Thank you!</p>
","10","2327283","0","0"
"62819339","13749157","2020-07-09 16:22:36","0","338","<git><batch-file><command-line><git-commit>","Automate git commit of multiple files","<p>I have a collection of files that I want to automatically add and commit to git using a batch script.
Adding is not a big problem as I can add them all indiviually. But I don't want to commit them individually because this cluters the git repository with commits.</p>
<p>One way would be:</p>
<pre><code>git commit -a -m ...
</code></pre>
<p>which would commit everything. But this is also not very practical as I would commit other files that I don't necessarily want to commit.</p>
<p>The files that I want to commit are found by:</p>
<pre><code>dir &lt;some_path&gt; /b /s /A-D /o:gn
</code></pre>
<p><strong>Is there a way to put this list of files into the git commit command?</strong></p>
<p>Full script:</p>
<pre><code>&gt;  FOR /F &quot;delims=&quot; %%a in ('dir &lt;some_path&gt; /b /s /A-D /o:gn') do CALL git add %%a -f

&gt; git commit (Some list of files) -m &lt;Some message&gt;
</code></pre>
<p>The obvious way would be to just replace <code>(Some list of files)</code> with <code>('dir &lt;some_path&gt; /b /s /A-D /o:gn')</code>but this produces an error: <code>fatal: /b: '/b' is outside repository</code></p>
<p>How can I achieve what I want?</p>
<p>Thanks,</p>
<p>Tom</p>
","7","13749157","",""
"44092804","1220179","2017-05-21 03:15:20","0","100","<git><git-commit>","Recovering from accidental git commit -a after patch add (git add -p)","<p>Earlier today I was in the process of splitting a large git commit into several smaller commits and so as usual I created a new branch, did a <code>git reset HEAD^</code>, and proceeded with <code>git add -p</code> to interactively select pieces of this large commit to split into the first of these smaller commits. I spent 20-30 minutes selecting the lines I wanted and then decided to commit the first patch. Out of habit, I reflexively typed <code>git commit -a</code> instead of just <code>git commit</code> and hit enter, and of course I lost all of my patch selections and I've ended up with exactly what I had before: one big commit.</p>

<p>Is there any way to revert to the previous version of my staged changes? What I <em>think</em> I want is to revert to the immediately prior version of my .git/index file, however from what I can tell staged changes are not versioned. So I think I'm screwed and I just have to start over.</p>

<p>I've been using Git daily for several years, and this has happened a few times in the past as well. Each time I realize what I've done, I facepalm and start over. I suspect this could be worked around with a pre-commit hook that makes a copy of .git/index (perhaps to .git/index.bak) to get one level of manual ""undo"", but I'm not sure that would be sufficient as I don't have a really deep understanding of Git internals. The best place I found for internals information is <a href=""https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain"" rel=""nofollow noreferrer"">Chapter 10</a> of the Git book, although I've considered looking into the Git source code to get a better understanding of how the staging area works.</p>

<p>Thanks in advance for any ideas.</p>
","0","1220179","0","0"
"62831916","11928727","2020-07-10 10:02:29","0","76","<git><github><git-commit><git-remote>","How do I remove a file from local git repository and local file system but not from remote repository?","<p>I have been trying to delete a file from my local file system and local git repository.</p>
<p>I am using <code>git rm --cached &lt;file name&gt;</code></p>
<p>But whenever I am working with another file and push the changes git also deletes the locally removed file from my remote repository. I want the file to stay on my GitHub.</p>
<p>I would really appreciate some help.</p>
","4","11928727","",""
"7425541","4704515","2011-09-15 03:29:39","13","3402","<git><version-control><git-commit>","Git commit style: All changed files at once or one at a time?","<p>I am saving my work at night with a single commit for many files. I wonder if it would be better to commit for each file but this seems like a lot more work.</p>

<p>I have no problem with the way things are now but I plan to put my code on GitHub and I want it to be easy to understand.</p>

<p>I'm wondering what the rest of you who use git are doing. Also if you could kind of spell it out for me. I'm new to Git and I've been using TortoiseGit and gitk in Windows.</p>
","0","4704515","0","0"
"25563455","3989297","2014-08-29 07:22:17","92","72926","<git><git-commit>","How do I get last commit date from git repository?","<p>I need the last commit date in git. This means the latest update date in my program.</p>

<p>I used the command : $ <code>git log -1</code> but this command will give me the date from the local repository.  Rather I need date from remote repository. </p>

<p>I tried some commands as follow.</p>

<pre><code>git log -n 1 origin/Sprint-6.
git rev-parse --verify HEAD
</code></pre>
","1","3989297","0","0"
"25570947","263061","2014-08-29 14:59:13","18","6679","<git><git-rebase><git-commit>","How to use git interactive rebase for signing off a series of commits","<p>I would like to <strong>sign off all commits on a branch</strong> that I have finished and want to send to an upstream project (e.g. via a pull request on GitHub).</p>

<p>A recommended way I've found is to use</p>

<pre><code>git rebase -i [base-commit]
# Set all commits to ""edit""
git commit --amend --signoff  # do this for all commits
</code></pre>

<p>How can I do this automatically, in one non-interactive command?</p>
","1","263061","0","0"
"63074070","13122558","2020-07-24 12:59:23","-1","143","<git><git-branch><git-commit>","How to add an old .git repository to a project as an old branch","<p>I have searched but I haven't found the solution. Maybe I wasn't persistent enough in my research. If I've missed something, I'd be grateful if you send some links.</p>
<p>I have worked with some guy on the same project. He has a project folder with git repository on his machine.</p>
<p>I have copied the last version of his working directory but without his .git on my computer one week ago.</p>
<p>I've installed my own git and I've made already several commits (only one master brunch, easy as it is, just to compare and control the changes/versions in Sublime Text). He doesn't work here anymore and he has not committed the changes, but I can do this from his working machine.</p>
<p>The problem is: now I need to add his git to my but as another branch (old-branch).</p>
<p><strong>Therefore two questions:</strong></p>
<ol>
<li>How can I make a commit on his computer with an old date (one week ago).</li>
<li>How can I add this commit/commits/all data in his .git repository to my .git repository but as another branch, an old one.</li>
</ol>
<p><em><strong>A precision</strong></em>: these two folders on his computer and mine are absolutely the same, I just want to add all his changes to my git (not only the last commit I make, but old commits he made before also), but not to mix them with my changes I've made. I suppose to add this as an old-branch etc. But maybe you know a better solution.</p>
<p>Thank you in advance for your help!</p>
","4","13122558","",""
"25578351","1612593","2014-08-30 02:04:00","1","85","<github><xcode5><git-merge><git-commit>","How to discard latest github push made with Xcode","<p>I have been using Xcode with GitHub. I committed some bad data and I want to revert the merger. How might I do that? Or is there no way of doing it through Xcode? I am using Xcode5.</p>
","0","1612593","",""
"7452015","742126","2011-09-17 02:16:26","3","913","<git><git-merge><git-commit>","Confusion between merge and commit in Git","<p>I'm a complete newbie to Git, not really sure what's going on. My buddy and I are working on a project together. </p>

<p>I fetched all the files from a remote server <code>git fetch</code>, so I now have a whole bunch of files. </p>

<ul>
<li><p>I edit some of them, he edits some of them, etc.</p></li>
<li><p>I keep doing fetch everyday, and he begins to tell me that he has modified some of the files and updated them, but these changes do not show up on my end. </p></li>
<li><p>I open up Git GUI in Windows, on the left side there are two panels. </p>

<p>One says <code>Unstaged Changes</code> - I'm taking this to mean these are
  things I changed which will not be updated to a local repository
  unless I <code>add</code> them. </p>

<p>The other one says <code>Staged Changes (Will Commit)</code>. Inside this
  window, when I click on some of the files, I do see the updates my
  friends have made which are NOT showing up in the files I'm editing,
  and I think I also see changes I've made.</p></li>
<li><p>I add all the files with <code>git add .</code> in my directory</p></li>
<li><p>I press the <code>commit</code> button in Git GUI, now there are no more files in any of the two side panels, no <code>Unstaged Changes</code> and no <code>Staged Changes (Will Commit)</code>. </p></li>
<li><p>I check all the files and it seems like the changes from both my end and my friend's end have been merged into one file.</p></li>
</ul>

<p>I'm still not 100% sure what happened. </p>

<ul>
<li><p>Question 1: Did I do this right? </p></li>
<li><p>Question 2: What exactly does <code>merge</code> do? </p></li>
</ul>

<p>Because I keep merging with <code>git merge origin/master</code> and merging doesn't seem to do a damn thing. I thought <code>commit</code> just writes a record down of your current version into some hash codes, but seems like <code>commit</code> is actually doing what I thought <code>merge</code> does - it's merging changes. </p>

<p>Sorry for the long-winded question, just very confused. </p>
","2","742126","",""
"44371338","1071482","2017-06-05 14:33:07","1","707","<xcode><git><git-commit>","The working copy '<Project Name>' failed to commit files - Couldn't communicate with helper application - Solution not working","<p>I am referring to a previous question with answers:
<a href=""https://stackoverflow.com/questions/32649277/the-working-copy-project-name-failed-to-commit-files-couldnt-communicate-w"">The working copy &#39;&lt;Project Name&gt;&#39; failed to commit files - Couldnt communicate with helper application</a></p>

<p>Yet, the answer does not work for me. I am new to Git. I got the initial version of the app from GitHub through Xcode 8. Then I made multiple copies of the project folder using Finder (My bad. Very bad way of doing it!) Now I want to commit one of these new projects to a new branch. But I keep getting the mentioned error. I did the xcrun inside the my current project folder and added email and name. -l lists fine with additions. Still getting the same error. git config --global -l does not work saying there is no such file or directory. when I run the xcrun in global mode it run without issues and then when I do -l I do not get a error but only the new parameters I set in the Git config file.</p>

<p>Please help me to commit and push changes.
Thanks in advance!</p>

<p>P.S. I have committed once before successfully. I think it is before I made the duplicates of the project file with finder.</p>
","0","1071482","",""
"25600636","2038360","2014-09-01 07:16:46","2","4822","<git><git-commit><git-add>","GIT fatal: unable to write new_index file","<p>I interrupted a <code>git add -A</code> command using <code>Ctrl+C</code>
and then I run</p>

<pre><code>git reset --mixed
</code></pre>

<p>Now I executed again <code>git add -A</code> 
and then <code>git commit -m ""message""</code>
but I get</p>

<p><code>fatal: unable to write new_index file</code></p>

<p>The output of </p>

<pre><code>git status:

# On branch master
nothing to commit (working directory clean)
</code></pre>

<p>Can you help me in committing my changes?</p>

<p>ps I have enough space in my disk</p>
","8","2038360","0","0"
"44393570","2539521","2017-06-06 15:03:48","3","1481","<git><git-commit><git-diff-tree>","How to list all files added to the first commit of a GIT repository?","<p><strong>Current status</strong>:
I am using <code>git diff-tree -r HASH</code> to list all added, modified and deleted files in a specific commit. This worked until today.</p>

<p><strong>The problem</strong>:
I want to list all added files in my first commit, however passing the first HASH as a parameter doesn't work. Why?</p>

<p><strong>Main question</strong>:
How can I get the list of all files added in my first commit?</p>
","1","2539521","0","0"
"44400231","6262352","2017-06-06 21:38:03","4","3294","<git><branch><diff><git-commit><git-diff>","Git - Diff between branches in old commits","<p>I have this:</p>

<pre><code>branch: commit 1, commit 2, 3,4
master: commit 1, commit 2, 3,4,5,6,7
</code></pre>

<p>How can you make a diff between branch after <code>commit 2</code> (in that point of history) and master in <code>commit 3</code>?</p>
","1","6262352","",""
"25620073","2598876","2014-09-02 09:26:33","0","768","<git><directory><git-commit><mv>","Change folder name with Git and then commit changes?","<p>I Need to rename my <code>CSS</code> folder on <code>css</code> folder, but if I rename it manually git would not see any changes.</p>

<p>I have tried to do this:</p>

<pre><code>git mv CSS css
</code></pre>

<p>but I get the following error:</p>

<pre><code>fatal: renaming 'CSS' failed: Permission denied
</code></pre>

<p>So what is the right way to change folder name using <code>git</code>?</p>
","3","2598876","",""
"63363406","13989884","2020-08-11 17:28:42","1","288","<git><git-commit><githooks>","Git prepare-commit-msg","<p>My Code:</p>
<pre class=""lang-sh prettyprint-override""><code>COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

git diff --cached --name-status &gt; ./.git/test.txt
git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*&gt;\).*$/Signed-off-by: \1/p'&gt;&gt; .git/test.txt

SOB=$(cat .git/test.txt)
 git interpret-trailers --in-place --trailer &quot;$SOB&quot; &quot;$COMMIT_MSG_FILE&quot;
</code></pre>
<p>I try to get the output of <code>git diff --cached --name-status</code> at the end of the git commit message and that works but the weird part is that if I use <code>git commit</code> and then close the file (COMMIT_EDITMSG) the commit will be committed but if I make a comment out <code>git diff --cached --name-status &gt; ./.git/test.txt</code> then the commit can be aborted through just not editing the file and that is what I try to fix but it seems to I can't any suggestions?</p>
<p>example output is:</p>
<pre><code>M   README.md
Signed-off-by: NAME \&lt;E-Mail\&gt;
</code></pre>
","0","13989884","",""
"44665339","3800888","2017-06-21 01:13:01","1","44","<git><commit><git-commit><git-amend><commit-message>","I have added a folder with say 10 files and committed the changes.","<p>Now I have removed 5 of those files and I want to amend these changes to the last commit.I havent pushed the commit..Am using gerrit. However when I do git status it shows me Changes not staged for commit->the 5 files which are deleted and untracked files ->which are irrelevant. I want to commit only the deletion of the 5 files and I want to ammend this to the last commit. How do i do this. When I do a git commit --amend and change the message.. The file that opens up shows me the list of untracked files as well.(as a comment ofcourse).I am scared these irrelevant untracked files will get added too. What do I do in this case? Kindly suggest. Thanks!</p>
","0","3800888","",""
"44673065","7069916","2017-06-21 10:07:58","0","2505","<git><github><gitlab><git-commit><git-config>","Modify git config file globally","<p>We would like to change the git config file globally, such that new file get downloaded from git repo on every git clone. Is there a way to do so? Any user who does git clone of the project should get this customized git config file in ./git/config file instead of standard one?</p>
","1","7069916","",""
"63383847","3469976","2020-08-12 19:54:00","1","118","<git><git-commit><git-history>","Join commit history of a subtree","<p>There is a git repository where part of it was copy-pasted from another repository and commited all in a single commit at some point.</p>
<p>Since then many changes were made.</p>
<p>I want to add past commit history to that subtree, across multiple branches. Is there a way to do that without much hassle?</p>
","0","3469976","",""
"63396031","428745","2020-08-13 13:15:55","0","192","<git><gitlab><git-commit>","How can I merge the local dev code with remote","<p>My colleague create new branches for the project: R1, R2</p>
<p>Running on my machine I have the branches: Dev1 and Master
I did a git pull but the remote branch didn't appears to me.</p>
<p>After trying something I got</p>
<p>C:\projects<br />
if I run the command 'git branch' it shows:</p>
<p>Dev1</p>
<p>master</p>
<p>origin/R1</p>
<p>what does &quot;origin/r1&quot; mean? it seems really is not in machine, just in the Gitlab</p>
<p>How to merge code from Dev1 to R1?</p>
","0","428745","",""
"63404369","722393","2020-08-13 23:08:08","4","1913","<git><git-merge><git-commit><git-revert><team-explorer>","Why do I suddenly have a merge commit in my pushes?","<p>Well, I seem to have gone and mucked something up.</p>
<p>Until just recently, I used to be able to do a merge commit and then push to origin without that separate commit showing up. Now that it does, the merge commit is all I can see at my pipeline:</p>
<p><a href=""https://i.stack.imgur.com/6wdOT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6wdOT.png"" alt=""Pipeline commits after"" /></a></p>
<p>Before this started, only the manual commit was pushed to origin (or at least showed as such):</p>
<p><a href=""https://i.stack.imgur.com/ahdVV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ahdVV.png"" alt=""Pipeline commits before"" /></a></p>
<p>Here's Team Explorer (VS 2019 v16.6.5), after the behavior changed:</p>
<p><a href=""https://i.stack.imgur.com/0pC6O.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0pC6O.png"" alt=""Team Explorer"" /></a></p>
<p>...and here's my local branch history:</p>
<p><a href=""https://i.stack.imgur.com/KTuIB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KTuIB.png"" alt=""Branch history"" /></a></p>
<p>See the change?</p>
<p>This all started right after I reverted commit <code>a13adadf</code>, fixed it and republished it. Now I've got some sort of weird branching effect going on, and I don't know how to get things back to where they were before. (I tried researching the problem, but the signal-to-noise ratio is very low when searching on anything related to <code>merge commit</code>.)</p>
<p>How can I get my repo to 'ignore' (i.e. stop displaying) the merge commits?</p>
<p>(Note: I'm the only dev working on this repo.)</p>
","0","722393","0","0"
"63417604","12846008","2020-08-14 17:39:11","-1","43","<git><bitbucket><git-commit><recover>","Recover code from older commits of a particular branch","<p>I have a branch A. In that branch I have done several commits for eg.
Commit 5
Commit 4
Commit 3
Commit 2
Commit 1
Where commit 1 is the oldest one. All the commits were pushed successfully and i can even see them in bit bucket. The changes i pushed on commit 3 and commit 4 I can't see those changes in my commit 5. How do i recover that data?</p>
","3","12846008","",""
"25948049","349169","2014-09-20 11:01:30","15","4053","<git><commit><rebase><git-commit><git-amend>","'git commit --amend' in detached HEAD state","<p>I understand that the correct way of amending an old Git commit is to use <code>rebase --interactive</code>, but just to get clear on the concepts, I would like to understand what happens when I do</p>
<ul>
<li><code>git checkout &lt;commit&gt;</code></li>
<li>change something in a file</li>
<li>add the changed file to the index</li>
<li>and then <code>git commit . --amend</code></li>
</ul>
<p>When I do this, instead of amending the commit, it branches a new commit off of the PARENT of that same commit.</p>
<p>Is this just Git's way of telling me that I cannot amend a commit that already has children commits?</p>
","0","349169","0","0"
"26419992","840710","2014-10-17 07:26:22","1","1057","<git><git-commit><git-amend>","git: How to refresh a commit that isn't on top","<p>In my working branch, I have three dependent patches. All of them not merged.</p>

<pre><code>&lt;commit id -1&gt;
&lt;Commit id -2&gt;
&lt;Commit id -3&gt;
</code></pre>

<p><strong>How can i add new changes to <code>&lt;Commit id -2&gt;</code>?</strong></p>

<p>Currently here is how I am doing it.</p>

<pre><code>git stash
git reset --hard HEAD~1
git stash apply
git add .
git commit --amend
git cherry-pick &lt;commit id -1&gt;
</code></pre>

<p>This is working without any problem. But is there a better way where I can commit the staged files to whichever commit I want?</p>
","2","840710","",""
"8294174","613109","2011-11-28 10:01:40","7","2174","<git><garbage-collection><git-gui><git-commit>","Git: how to repack all loose commits","<p>After using <code>git gc</code> and <code>git repack</code> (with various options) I still have 4825 <strong>loose commits</strong> in the folder <code>.git/objects</code>. I would like to <strong>have all of them in the pack file</strong> with the rest or in another pack file.</p>

<p>I'm doing lots commit rewriting (amend + rebase) hence it's perfectly normal to have many unreachable commits. My .gitconfig contains these parameters to keep reflogs and unreachable commits for a long time.</p>

<pre><code>[gc]
    reflogExpire = 300 days
    reflogExpireUnreachable = 200 days
    pruneExpire = 90 days
</code></pre>

<p>You may wonder if it make sense but I already needed and have recovered a few commits made several months ago. It happens we develop for many months on a new set of higher priority branches and afterwards continue on the older lower priority branches. </p>

<p>The main reason for this question is that <code>git gui</code> keeps on complaining to compress my database despites I have done this many times.
If we are not able to pack those loose commits then this ""complaining"" might be a bug in <code>git gui</code>.</p>
","2","613109","0","0"
"45064007","567620","2017-07-12 17:19:43","4","400","<git><github><git-commit><git-log>","What does the git documentation mean by 'unwrapped subject and body' for %B pretty print specifier","<p>If you search for %b and %B in <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">the documentation</a>, there is no explanation of the difference between them apart from the cryptic ""(unwrapped subject and body)"".</p>

<p>Here is an example commit from a repo (using git version 2.9.3) and the differing result printed from using %b vs. %B. The commit command was <code>git commit -m 'Automated version update from Jenkins.'</code></p>

<pre><code>$ git log -1 origin/master
commit 30ac57e...
Author: Jenkins &lt;email@email.com&gt;
Date:   Wed Jul 12 16:28:41 2017 +0000

    Automated version update from Jenkins.
$ git log -1 --format=%B origin/master
Automated version update from Jenkins.

$ git log -1 --format=%b origin/master

$ 
</code></pre>

<p>I do not understand why %b fails to produce the commit message body, nor why %B (if it contains ""subject and body"" in some sense) only provides the message body. </p>

<p>What is the underlying difference between %b and %B for pretty printing from logs? </p>

<p>If you want to reliably print just the most recent commit message (message only), how should you do so? I thought it should be <code>git log -1 --format=%b origin/master</code> but this example seems to suggest otherwise. Will %B work reliably, or does the phrase ""(unwrapped subject and body)"" mean it may somehow include the subject in some situations?</p>
","0","567620","0","0"
"45069790","6611184","2017-07-13 00:59:46","1","1343","<javascript><html><git><github><git-commit>","Github Commit Hash in Javascript or React.js","<p>I am trying to create a Javascript component that replaces the static HTML element <strong>Demo v0.1</strong> into the shortened GitHub Commit Hash, e.g. 6da724d  </p>

<pre><code>&lt;div className =""demo-version""&gt;
  Demo v0.1
&lt;/div&gt;
</code></pre>

<p>How to write the javascript code with <code>git rev-parse HEAD</code> to make it work? </p>
","0","6611184","",""
"35268523","4615851","2016-02-08 11:26:25","0","206","<git><git-commit>","Modify github history","<p>I apologize in advance for asking this question as it has been asked a million times already.</p>

<p>I need to modify the git history of my project,
the commit history currently looks like this:</p>

<pre><code>[E] &lt;- [D] &lt;- [C] &lt;- [B] &lt;- [A]
</code></pre>

<p>Where:
A: Added some code,
B: Added some code &amp; added some data,
C: Restructured project,
D: Removed all data,
E: Added some code</p>

<p>The problem was that at commit C our project group was notified that data had to be stored locally and not publicly on git. I am not very experienced with git so the first thing I did was to remove the data. But that did not do much since the data could still be accessed in history. How do I fix the problem so that the history looks like this:</p>

<pre><code>[E] &lt;- [C] &lt;- [B] &lt;- [A]
</code></pre>

<p>Where:
A: Added some code,
B: Added some code,
C: Restructured project (Without any references to data)
E: Added some code</p>
","1","4615851","",""
"35274750","1564036","2016-02-08 16:43:08","4","199","<git><git-commit><git-reflog><reflog>","Viewing expired reflog logs","<p>Is there any way to view expired reflogs? I've been keeping a few local commit I made months ago on a local branch and I've kept it up to date with our remote branch by rebasing frequently. Somehow I've lost all of my local commits for this branch and have no way to recover it since git reflog is not showing logs past a certain date.</p>
","0","1564036","",""
"35276461","3719101","2016-02-08 18:16:35","0","60","<git><merge><branch><git-commit>","Artificially make one commit point to another one after manual merge?","<p>I was in such a git state:</p>

<p>after <code>git checkout outer</code>:</p>

<pre><code>* 2df9c6b (HEAD -&gt; outer) Ready for merging
* 161c98f Working on new stuff..
* faec47b Welcome to branch `outer`
* d2166d0 last common commit
...
</code></pre>

<p>after <code>git checkout master</code>:</p>

<pre><code>* 82c6303 (HEAD -&gt; master) Go on doing stuff
* d2166d0 last common commit
* ...
</code></pre>

<p>After having run <code>git merge outer</code> with no conflicts, I came out with something
like:</p>

<pre><code>* 6ebd696 (HEAD -&gt; master) Merge branch 'outer' into master
|\
| * 2df9c6b (outer) Ready for merging
* | 82c6303 Go on doing stuff
| * 161c98f Working on new stuff..
| * faec47b Welcome to branch `outer`
|/
* d2166d0 last common commit
...
</code></pre>

<p>However. The automatic merge turned out not to be what I actually wanted to
have. So I ran <code>git reset 82c6303 --hard</code> to start over with:</p>

<pre><code>git merge outer --no-commit
... fixing stuff, merging on my own ..
git add *
git commit -m ""Merged branch 'outer' into master""
</code></pre>

<p>What I have now is:</p>

<pre><code>* 3d1250b (HEAD -&gt; master) Merge branch 'outer' into master
* 82c6303 Go on doing stuff
* d2166d0 last common commit
* ...
</code></pre>

<p>Which is: commit <code>3d1250b</code> is like I wanted it to be, but it does not point to
<code>2df9c6b</code> anymore. How can I make it point to <code>2df9c6b</code> in order to make it
clear what happened? Would it even mean anything? </p>
","4","3719101","",""
"35278681","3990451","2016-02-08 20:28:19","1","139","<git><git-commit><git-tag>","Are git tags faster to access than git commits?","<p>I am uncertain if the title of the question is most appropriate.</p>

<p>I have data in text files. This data changes/grows every day. I keep the directory holding this data under source control, git.
At the end of every day, I issue a command:</p>

<pre><code>git commit -m ""EOD YYYYMMDD""
</code></pre>

<p>Often, I need to see what the data looked like at some day in the past.</p>

<ol>
<li>Is it different to use tags as opposed to commits?</li>
<li>Are tags faster to access than commits, meaning, is it faster to checkout a given file as it was at the EOD of some day in past with the help of tags as opposed to commits?</li>
<li>Is 1 more space efficient than another? (the size of my directory is 3Gigs of text)</li>
</ol>
","1","3990451","0","0"
"51376049","1903880","2018-07-17 07:54:22","0","291","<git><git-commit><git-amend>","Git: how to modify the content (not commit message) for the HEAD^^ commit","<p>Suppose I worked on:</p>

<ul>
<li>feature 1:  file1 + file3   </li>
<li>feature 2:  file2</li>
</ul>

<p>and I have the following commits</p>

<ul>
<li>Commit 2:   feature 2 completed. </li>
<li>Commit 1:   Feature 1 completed.</li>
</ul>

<p>The wrong thing I made is I forget to add the file3 to commit 1.  How can add the changes of file3 to commit 1? </p>

<p>One way of this is:</p>

<pre><code>git reset --soft Commit 1
git add file3
git commit --amend 
git add file2
git commit -m ""feature 2 completed""
</code></pre>

<p>I don't want this way is because in fact I may not only have commit 2 but also have commit 3,4,5,6... </p>

<p>is there other easy way to do this?</p>

<p>Thanks</p>
","4","1903880","",""
"51378953","567166","2018-07-17 10:20:41","5","538","<git><azure-devops><git-commit><pull-request>","Why VSTS uses non-standard git commit messages?","<p>There are lot of guides about how a git commit message should be formatted (<a href=""https://chris.beams.io/posts/git-commit/"" rel=""noreferrer"">like this</a>). Near all of them states that the message should be in imperative mood and not in past tense. There is a very good argumanet about that: </p>

<blockquote>
  <p>""Git itself uses the imperative whenever it creates a commit on your
  behalf. For example, the default message created when using <code>git merge</code>
  reads: <em>Merge branch 'myfeature'</em> ""</p>
</blockquote>

<p>Then the default commit message for a pull request in VSTS reads:  </p>

<blockquote>
  <p>""Merge<strong>d</strong> PR: XYZ""</p>
</blockquote>

<p>Why?...</p>
","3","567166","0","0"
"51388004","2879085","2018-07-17 18:21:27","4","2604","<git><git-commit>","Remove time and time zone of all git commits, but keep date","<p>I would like to remove the time and especially time zone information of all commits that have been created in a repository. Is that possible? And if not would it be possible to simply set the the time to <code>00:00</code> and time zone to <code>+0000</code>?<br>
(I want to keep the date btw. It's just the time and timezone that I don't want.)</p>

<p>I have only found questions talking about <a href=""https://stackoverflow.com/questions/4493936/could-i-change-my-name-and-surname-in-all-previous-commits"">changing the author of all commits</a>, but nothing about just altering a property in all commits keeping the remaining information.</p>

<p>And yes I know there are other ways people could find out where I live etc, but this would be good enough for me.</p>
","0","2879085","0","0"
"69764534","9766958","2021-10-29 06:28:17","1","81","<git><github><gitlab><commit><git-commit>","Can I change the commit history in two ways using Git?","<p>I'm asking this question because I'm studying the <strong>Pro Git</strong> book and there is a chapter, <strong>Rewriting History</strong>, that explains how to change the last commit <em>$ git commit --amend</em>, change multiple commit messages <em>$ git rebase -i HEAD~3</em>, delete a particular file or folder in all the commits with <em>$ git filter-branch --tree-filter</em>.</p>
<p><strong>Here my question</strong>: the book doesn't mention the possibility of doing this work by multiple checkouts along ALL the commit's history. So I move my HEAD, commit by commit, and I change this particular commit with <em>$ git commit --amend</em> one by one.</p>
<p>I know it's really (REALLY!) expensive in terms of time spent, but is it really possibile (i.e. it works)?<br />
And if yes, in which cases this could be useful?</p>
","2","9766958","0","0"
"69766935","17278913","2021-10-29 09:55:01","0","221","<loops><shell><github><git-commit>","Iterate through diff and commit each file one by one with unique Commit message","<p>I have a script running in GitHub Actions that runs a retrieve from another source and loads those changes into a Git branch what I then want to do is iterate through the list of changed files and add them to a commit and add a specific commit message such as &quot;Auto Commit - {xxxx.xml} file was changed&quot; with xxxx.xml being the file name that was picked up in the git diff. At the moment my script just commits --all but I'd like to change this to loop through each change and add my own commit message per change. Is this possible?</p>
<pre><code>echo &quot;*************************************************************&quot;
echo &quot;GIT diff:&quot;
echo &quot;&quot;
git diff
echo &quot;&quot;
echo &quot;*************************************************************&quot;

git add --all
git commit -m &quot;Auto-commit - updated Salesforce metadata&quot;

git push
</code></pre>
<p>P.S please bare in mind I'm a complete noob</p>
","0","17278913","",""
"51435370","10108940","2018-07-20 05:02:24","10","25153","<git><visual-studio-code><git-commit>","""Git: Failed to execute git"" in Visual Studio Code","<p>I'm following a tutorial to create a remote Git repository, clone it locally, add a README.md file and then save and commit locally then push remotely.</p>
<p>I have followed word for word a few times but when I get to &quot;commit staged changes&quot; every time it says:</p>
<blockquote>
<p>Git: Failed to execute git</p>
</blockquote>
<p>This is all using Visual Studio Code.</p>
<p>I'm not sure where to go from here and have no idea how to fix this.</p>
<p>This is just after I've pressed &quot;commit&quot;:</p>
<p><a href=""https://i.stack.imgur.com/cOJ8Q.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/cOJ8Q.png"" alt=""Just after I've pressed commit"" /></a></p>
","11","10108940","0","0"
"69778769","2604247","2021-10-30 10:33:15","0","689","<git><azure-devops><git-commit><pull-request>","What happens to commits between the pull the request and approval","<p>Suppose my <code>feature</code> branch is from the <code>develop</code> branch. I make some commits into <code>feature</code> and submit pull request to my boss to merge into <code>develop</code>.</p>
<p>But if I continue to work on, commit and push to <code>feature</code> before he reviews the request, then will will all those commits be accepted if he accepts the original pull request? In other words, is a pull request meant to merge the latest version of the branch or the specific commit?</p>
<p>Or is it something that depends on specific repositories (gitlab, github etc.)? My company uses <a href=""https://dev.azure.com/"" rel=""nofollow noreferrer"">azure devops</a> if that is important here.</p>
<p>In this context, I would also want to know how is a pull request different from <code>git merge</code>?</p>
","1","2604247","",""
"51495092","8329929","2018-07-24 09:25:59","40","76580","<git><git-branch><git-commit><git-push><git-repo>","Git, error: remote unpack failed: unable to create temporary object directory - By creating new Branch","<p>I'm trying to create a new branch in my repo.</p>
<p>I did this:</p>
<pre class=""lang-sh prettyprint-override""><code>git branch events
</code></pre>
<pre class=""lang-sh prettyprint-override""><code>git Checkout events
</code></pre>
<p>That worked. So I changed some files and did:</p>
<pre class=""lang-sh prettyprint-override""><code>git Status
git add --all
git commit -m &quot;Commit&quot;
</code></pre>
<p>That worked well but I tried to push it and that didn't work:</p>
<pre class=""lang-sh prettyprint-override""><code>git push -u origin events
</code></pre>
<p>This is the error:</p>
<pre><code>Enumerating objects: 9, done.                                                                                                                       
Counting objects: 100% (9/9), done.                                                                                                                 
Delta compression using up to 4 threads.                                                                                                            
Compressing objects: 100% (5/5), done.                                                                                                              
Writing objects: 100% (5/5), 716 bytes | 716.00 KiB/s, done.                                                                                        
Total 5 (delta 4), reused 0 (delta 0)                                                                                                               
error: remote unpack failed: unable to create temporary object directory                                                                            
To http://git.int.censoredlink/scm/freeb/freebrep.git                                                                                       
 ! [remote rejected] events -&gt; events (unpacker error)                                                                                              
error: failed to push some refs to 'http://stsu@git.int.censoredlink/scm/freeb/freebrep.git'
</code></pre>
<p>I don't know why it does not work.</p>
<p>I have Admin rights on the Repo. I censored the link to the repo because its an internal Repo with private link.</p>
","8","8329929","0","0"
"70195373","9976397","2021-12-02 07:11:51","2","138","<git><git-commit><git-interactive-rebase>","Do I need to git rebase on every branch to fix a pathological commit message?","<p>I was committing a large file to git, and it appears my editor messed up somehow when editing the commit message file. The result is the entire diff of ~100k lines became my &quot;commit message&quot;. This is now slowing down the entire git server every time I load a page in the repository.</p>
<p>I know that I can simply run the interactive rebase on my master branch to edit the commit message.</p>
<p>Unfortunately, by the time I realized that this, the offending commit had already been merged into the master branch, and from there into several other branches as well. So does that mean I have to track down the commit in every single branch and repeat the rebase on it?</p>
<p>I recall that in git, commits are immutable objects while branches are simply labels on commits. So it's not that &quot;multiple branches have a commit&quot;, but a single commit can be a member of several branches. Does this mean that if I edit the commit on master branch only, the other branches will also be fixed? Or is that not the case because the interactive rebase simply creates a new commit with my edited message, as opposed to literally editing the original commit object?</p>
","0","9976397","",""
"52253415","2377343","2018-09-10 08:00:15","0","282","<git><commit><git-commit>","Set default message in GIT commit field","<p>I've set in <code>C:\Users\myUser\.gitconfig</code></p>

<pre><code>[commit]
    template = ~/message.txt     //btw: i've also tried: ~user/message.txt 
</code></pre>

<p>and saved some text in <code>message.txt</code> in that same folder. </p>

<p>however, when I try to commit one of my repos, commit field is still empty:
<a href=""https://i.stack.imgur.com/cdM2a.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cdM2a.png"" alt=""enter image description here""></a></p>

<p>do i miss any step?</p>
","6","2377343","",""
"52255924","10340750","2018-09-10 10:35:42","1","327","<git><gerrit><git-commit>","Git keep latest commit but delete the one before","<p>I'm trying to push the newest Git-Commit to gerrit.
But somehow I get an error message saying that I can't push, because two commits have the same Change-ID.</p>

<p>In the image below you can see the current situation. </p>

<ol>
<li>The third commit (from the top) is already pushed to gerrit.</li>
<li>The third and the second commit somehow have the same Change-ID.</li>
<li>I want to push the first commit to gerrit.</li>
</ol>

<p><a href=""https://i.stack.imgur.com/maeiZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/maeiZ.png"" alt=""enter image description here""></a>
.</p>

<p>So my idea to fix this problem would be to delete the second commit.
Is this possible?</p>
","3","10340750","",""
"52270992","1223975","2018-09-11 07:40:18","0","337","<git><git-merge><githooks><git-commit><git-rebase>","Git pre-commit hook that prevents a commit if there are upstream changes","<p>Say I am working on <code>feature/foo</code>...isn't there a way to prevent a git commit if there are changes to <code>remotes/origin/feature/foo</code>?</p>

<p>Is there any advantage in incorporating the changes before making a new commit?</p>

<p>The only thing I can think of is to force us to use git stash, merge the changes (hopefully with fewer conflicts than otherwise) and then use <code>git stash apply</code>?</p>
","3","1223975","",""
"52276414","3745022","2018-09-11 12:51:40","0","396","<c#><git><tfs><git-commit><tfs-sdk>","Is there a way to create git push/commit with linked workitems through TFS client libraries/API in a single operation?","<p>I want to create a push using TFS git <a href=""https://www.nuget.org/packages/Microsoft.TeamFoundationServer.Client/15.112.1"" rel=""nofollow noreferrer"">client libraries</a> that contains the specified workitems.</p>

<p>The code is basically:</p>

<pre><code>public static async Task&lt;GitPush&gt; CreatePush(
    this GitHttpClient git,
    GitRepository repo,
    GitRefUpdate branchUpdateRef,
    GitChange change,
    String comment,  
    IEnumerable&lt;Int32&gt; workitems = null)
{
    workitems = (workitems ?? Enumerable.Empty&lt;Int32&gt;()).ToList();
    var commit = new GitCommitRef
    {
        Comment = comment,
        Changes = new[]
        {
            change
        },
        WorkItems = workitems
            .Select(wi =&gt; new ResourceRef
            {
                Id = wi.ToString() 
                // Perhaps one should also set an URL of some kind
            })
            .ToList()
    };
    var push = new GitPush
    {
        Commits = new[]
        {
            commit
        },
        RefUpdates = new[]
        {
            branchUpdateRef
        },
        Repository = repo
    };
    return await git.CreatePushAsync(
        push, 
        project: repo.ProjectReference.Id,
        repositoryId: repo.Id);
}
</code></pre>

<p>The push is created successfully, though there are no workitem links on the created commit.</p>

<p><strong><em>I have tried</em></strong></p>

<ol>
<li>Setting the URL to the one from <a href=""https://learn.microsoft.com/en-us/rest/api/vsts/wit/work%20items/get%20work%20item?view=vsts-rest-4.1#workitem"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/rest/api/vsts/wit/work%20items/get%20work%20item?view=vsts-rest-4.1#workitem</a> .</li>
<li>Settings it to the slightly different workitem URL that is actually returned in <code>GitCommitRef.WorkItems</code> <code>ResourceRef</code> for commits that have related workitems.</li>
</ol>

<p>But to no avail.</p>

<p><strong><em>I actually can achieve the desired final result by</em></strong></p>

<ol>
<li>Either appending <code>$""#{workitemId}""</code> to the commit comment string</li>
<li>Or by adding commit link to the workitem in question</li>
</ol>

<p>Still, both of those solutions have minor drawbacks(1 - changing commit message, 2 - possible race condition with CI and etc.) that I'd prefer to avoid.</p>

<p>Basically, is there a way to way to create <code>GitPush</code> with associated workitems  in a single operation, or do I have to use the aforementioned workarounds?</p>
","0","3745022","",""
"70237825","17597152","2021-12-05 19:30:18","0","52","<github><github-pages><git-commit>","why wont my latest commit on github pass checks for github pages?","<p><a href=""https://i.stack.imgur.com/sIimv.png"" rel=""nofollow noreferrer"">my github commits</a></p>
<p>If you look at the image, an old commit is currently in use for the github pages, why and what do I have to do to make the latest commit pass checks?
I have been told to try vigilant mode but I don't think thats what the issue is about as all the commits are verified.</p>
","0","17597152","",""
"70242096","9377942","2021-12-06 07:31:13","0","368","<git><git-merge><git-commit><fast-forward>","How to merge with merge commit","<p>When I try to merge with command:</p>
<pre><code>git merge --no-ff -m &lt;message&gt; &lt;source-branch&gt;
</code></pre>
<p>I get message: Already up to date.
but it's not!</p>
<p>When I'm trying to merge like:</p>
<pre><code>git merge origin &lt;branch-name&gt; 
</code></pre>
<p>branch is merged fast-forward.</p>
<p>But I need merge commit. Please help me how to fix it.</p>
","3","9377942","",""
"70254077","12493910","2021-12-07 01:55:53","-1","153","<git><reset><git-commit><git-reset>","git -- remove latest commit ... without messing up the working directory","<p>The typical question is how to remove the latest commit.  This is easy:
git reset --hard HEAD~1</p>
<p>But ... I don't want the working directory to be overwritten with the new head contents.</p>
<p>If you reset the head, the working directory is restored to the contents of the repo as of that head commit.   I want to keep my changed files.</p>
<p>E.g. I have changed three files, but want to commit only two.  I accidentally commit all three.   If I reset the head, not only is the bad commit removed, but all of the changed files are reverted.  I want to remove the latest commit, then commit just the two I intended to commit.  This means that I need to keep the changed files in the working directory.</p>
<p>I think I've explained the issue well enough.  Or at least I hope so.</p>
","1","12493910","",""
"7374069","762896","2011-09-10 19:28:59","130","71757","<git><undo><git-commit><git-reset><git-add>","Undo git reset --hard with uncommitted files in the staging area","<p>I am trying to recover my work. I stupidly did <code>git reset --hard</code>, but before that I've done only <code>get add .</code> and didn't do <code>git commit</code>. Please help! Here is my log:</p>

<pre><code>MacBookPro:api user$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)

#   modified:   .gitignore
...


MacBookPro:api user$ git reset --hard
HEAD is now at ff546fa added new strucuture for api
</code></pre>

<p>Is it possible to undo <code>git reset --hard</code> in this situation?</p>
","6","762896","0","0"
"30704128","1897845","2015-06-08 08:13:09","24","8951","<git><git-commit>","get commits since a particular date in git based on commit date","<p>To get commits after a particular date. I can do this:</p>

<pre><code>git log &lt;ref&gt; --since=&lt;date&gt; --pretty=format:%ci
</code></pre>

<p>This seems to list commits based on author date. How do I get commits after a particular date <em>based on commit time</em> ? I can parse the output of above cmd to get what I desire, however I was wondering if there is a better way to do this.</p>
","5","1897845","0","0"
"63027521","10323532","2020-07-22 05:29:38","3","1108","<git><git-commit><git-config>","Disable Git Global Username and Email","<p>I want to disable the option for my git users that they can set a global username and email. I want it to be <strong>empty</strong> at all.</p>
<p>Now I have the problem, that when some of them set the <code>global user.name</code> and <code>global user.email</code>, all the commited codes goes by the same name in every project.</p>
<p>How can I solve this problem?</p>
","2","10323532","0","0"
"25524683","1798201","2014-08-27 10:25:26","0","70","<git><content-management-system><git-commit><git-checkout>","git checkout only those files which were commited during the concrete commit","<p>I have a branch detached from head in my repo where I add folder under the same name with different files in it. Every time when I want to commit something I manually delete the folder in my repository and add the new one with the same name but the different content in it, which I later commit and push. The problem is that when I checkout one of my past commits I see that folder and it contains content from the selected commit and the past commits, but I want to see content ONLY from that concrete commit. So, I want to ask is it possible to do so and how should I achieve that? Maybe I should delete the files from my repo using some kind of git command? (But if its true I want to make sure that the files from the last commits wont be lost).</p>
","0","1798201","",""
"63031596","1420625","2020-07-22 09:56:52","0","73","<git><vim><git-commit><neovim><commit-message>","Could git open vim editor at line N whenever we are creating commit?","<p>I working in a project where each commit in a branch MUST start with</p>
<blockquote>
<p>Story PRJCT-NAME-42 Task description</p>
</blockquote>
<p>And must contain a message like this</p>
<blockquote>
<p>Story PRJCT-NAME-42 Task description</p>
<p>foo bar description</p>
</blockquote>
<p>I've created a custom message and stored in <code>~./gitmessage</code>. The content of the file is</p>
<blockquote>
<p>Story PRJCT-NAME-42 Task description</p>
</blockquote>
<p>It is possible t run <code>git commit</code> and have focus in line number three?</p>
","0","1420625","",""
"30727987","1165028","2015-06-09 09:21:13","0","98","<git><git-commit><git-revert>","GIT: remove commit halfway down in log but keep all overs","<p>Hi I have a commit in my git repo which I want to remove, but I want to keep all other commit thereafter. </p>

<pre><code>df5bf4b != 'Test' to =='Test'
c1f6f9f fixed occupations getJob to check if is empty
4e818fa added utility links partial to client template. Remove old utility links
f954acf Changes 'Site Map' link
276cd1f resolve conflict
db65577 Changes link
57f776e Changes corporate header 'Insights' link and underlines 'E-Briefings'
9f96c8f Changes link in the cookie banner for corporate sites
5b3d187 Moves 'Client' validation messages to JS alert box
</code></pre>

<p>I want to remove commit 9f96c8f but keep every commit below and above, is there a way I can do this??</p>

<p>Thanks in advance.</p>
","0","1165028","",""
"44325382","1523648","2017-06-02 09:26:55","3","2185","<git><refactoring><git-commit>","How to split a Git commit that contains a refactoring?","<p>I have created a commit in my local Git repository that includes a functional change and a refactoring. In retrospect, it would have been better if I had created a separate commit for the refactoring: The refactoring was a rename, and hence caused diffs in many files. Between all these rename diffs, it is hard to see the functional changes. This e.g. makes a code review harder than it needs to be.</p>

<p>So, is there an easy way to fix this? I.e. is it possible to split the commit into a refactoring commit and a commit with the functional changes?</p>

<p>I tried to split the commit through a manual triage of the diffs - as proposed in the answers to <a href=""https://stackoverflow.com/q/6217156/1523648"">Break a previous commit into multiple commits</a> - but this was really tedious. Isn't there an easier way?</p>
","0","1523648","0","0"
"44326124","1460422","2017-06-02 10:00:18","0","32","<git><git-commit>","Figure out which git commit a directory is from?","<p>I have a git repository (let's call it <code>MyRepo</code>), a local working clone of the git repository, and a copy of a subdirectory of the main git repository from some other machine (let's call it <code>SomeSubDirectory</code>).</p>

<p>My git repository has a bit of history (~500 commits or so), and also a few branches.</p>

<p>Unfortunately, when originally copying <code>SomeSubDirectory</code> to another location, I forgot to note down which git commit hash it was from! How can I figure out which git commit hash this copy of <code>SomeSubDirectory</code> is from?</p>
","3","1460422","",""
"25540255","2940571","2014-08-28 03:28:25","1","53","<git><git-commit><git-log>","git lost my edit history without merge and conflict","<p>I have a commit at Wed Aug 27 19:43:46 2014 +0800, </p>

<pre><code>commit bbdbbb7214de8611a787c92daf93dbc2719600d0
Author: malloc (malloc@slowcast.com)
Date:   Wed Aug 27 19:51:17 2014 +0800


commit a5f8bcbf7fdfa995325a338a02ad8eef611ac9f8
Author: malloc (malloc@slowcast.com)
Date:   Wed Aug 27 19:43:46 2014 +0800
</code></pre>

<p>the edit of the commit shows that 3 files had been modified. </p>

<pre><code>git d --name-only a5f8bcb^..a5f8bcb

res/layout/layout_login.xml
base/BaseAct.java
ui/login/Login.java
(END)
</code></pre>

<p>then other people commit their modifies. </p>

<pre><code>commit 833dee16869ceb834cb1b8d8ac38bf3d0f147e66
Author: simon (simon@slowcast.com)
Date:   Wed Aug 27 20:13:42 2014 +0800


commit b391737ac94d5d779c1cb00b05a7c3bccee98915
Author: muham (muham@slowcast.com)
Date:   Wed Aug 27 20:00:35 2014 +0800
</code></pre>

<p>at version b391737 the Login.java is the new version, but at version 833dee1 the content of Login.java is old version.  (and also other filess been modified)</p>

<p>check the commit 833dee1, only one file is commited</p>

<pre><code>git d --name-only 833dee1^..833dee1

res/values/strings.xml
(END)
</code></pre>

<p>and then check the log of Login.java</p>

<pre><code>git log ui/login/Login.java

commit c5a5ae9a48c2f1d44b6cd3654c20834ed49b3991
Author: simon (simon@slowcast.com)
Date:   Thu Aug 21 15:54:39 2014 +0800


commit 7e65405d19a946349ee4ac07176a37098f52867b
Author: shubin (nick@slowcast.com)
Date:   Fri Aug 15 15:22:01 2014 +0800
</code></pre>

<p>the lastest commit is at Thu Aug 21 15:54:39 2014 +0800, there is no log of my edit.  </p>

<p>How could this happen? The commit 833dee1 didn't have file I edited and history of Login.java also lost my edit .<br>
Is there some command that I can find the whole history of Login.java?</p>

<h1>edit</h1>

<p>=========================================<br>
we use only one branch master, and the log is not only at local, git clone from remote get the same log history.
Add some output:</p>

<pre><code>$ git log --oneline --graph --color=auto --decorate --all ui/login/Login.java
</code></pre>

<ul>
<li>b77af0c (HEAD, origin/master, origin/HEAD, master) recover login</li>
<li>9f88669 temp fix</li>
<li>c5a5ae9 add some comment</li>
<li>7e65405 config edit
...
...</li>
</ul>

<p>c5a5ae9 is at Aug 21 15:54:39 2014, many days ago, 9f88669 and b77af0c is commits after we find the problem, git losts the log at a5f8bcb.</p>

<pre><code>git log --oneline --graph --color=auto --decorate 833dee16...bbdbbb72
</code></pre>

<ul>
<li>833dee1 change var</li>
<li>bbdbbb7 modify default avatar style</li>
<li>a5f8bcb login page style</li>
<li>8b4aff8 add some string</li>
<li>ab1e53c add some string</li>
<li>9ab6bea edit rec user page style</li>
</ul>
","5","2940571","",""
"30758362","2630261","2015-06-10 13:51:28","1","537","<c#><git><git-commit><pull><libgit2sharp>","LibGit2Sharp get repository changes after pull","<p>How can i get the following information after a git-pull with libgit2sharp:</p>

<ol>
<li>Which files has been moved</li>
<li>Which files has been created</li>
<li>Which files has been deleted</li>
</ol>

<p>The git-pull request it self works perfectly:</p>

<pre><code>var result = repo.Network.Pull(new LibGit2Sharp.Signature(""admin"", ""mail@......net"", new DateTimeOffset(DateTime.Now)), options);
</code></pre>

<p>I already looked at the result of the <code>Pull</code>-Method, but this seems not to contain the needed information.</p>

<p>Thank you very much!</p>
","0","2630261","",""
"66755783","","2021-03-23 00:51:34","0","30","<git><commit><git-commit>","Keep removing latest historical commit git","<p>How do we remove (n) latest historical commit(s) git</p>
<p>after going to new branch:</p>
<pre><code>$ git checkout -b simple-string 5e020716
</code></pre>
<p>then it needs to keep on eliminating latest commits after checking it out, ensure that it's worthless till get the worthy one to keep</p>
<p>How to do such git in sense that really just that nothing else, as it's only for keeping historically a record on certain commits</p>
","0","","",""
"30801637","4943862","2015-06-12 11:11:53","8","4918","<git><git-commit>","How to update the directory in git","<p>I have a bitbucket repository, with the following structure :</p>

<pre><code> Directory-A-&gt;
   directory a
   directory b
   file a
   file b
   file c
</code></pre>

<p>Now I want to move file ""b"" and file ""c"" to ""directory a""</p>

<p>When I do it on local machine and commit this by git add.
I get file b and file c in directory a but they still exists outside it.</p>
","11","4943862","0","0"
"30809205","2893053","2015-06-12 17:43:30","14","35066","<git><git-commit>","Couldn't set refs/heads/master when commit","<p>I was able to commit fine yesterday. But today (I didn't change anything), when I commit:</p>

<pre><code>$ git add config.h
$ git commit -m ""Update config.h to reset the values""
error: Couldn't set refs/heads/master
fatal: cannot update HEAD ref
</code></pre>

<p>I know that this error may happen also during pull or push. But I haven't found a solution to fix it when committing.</p>

<p>My .git/config file looks like this:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
    hideDotFiles = dotGitOnly
[remote ""origin""]
    url = git@SOME_URL
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
</code></pre>
","0","2893053","0","0"
"7704480","963743","2011-10-09 15:17:51","261","329386","<git><github><version-control><git-commit><git-status>","Why does 'git commit' not save my changes?","<p>I did a <code>git commit -m ""message""</code> like this:</p>

<pre><code>&gt; git commit -m ""save arezzo files""
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   arezzo.txt
#       modified:   arezzo.jsp
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>But afterwards, when I do <code>git status</code> it shows the same modified files:</p>

<pre><code>&gt; git status
# On branch master
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   arezzo.txt
#       modified:   arezzo.jsp
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>What am I doing wrong?</p>
","2","963743","0","0"
"63306028","2433695","2020-08-07 16:43:46","0","264","<git><version-control><git-commit><gitea><gitahead>","Is it possible to do multi-line commits with GitAhead","<p>I currently used <strong>GitAhead</strong> as my primary GUI for interfacing git source control. My question is if it is possible to support multi-line commits messages with <strong>GitAhead</strong>?</p>
<p>My first thought is there might be a way to amend the default config file to change the commit button's git command or add a sequence of commands, such as <code>git commit -f [file]</code> or <code>git commit -m &quot;Short Message&quot;</code> and then after that run <code>git commit --amend</code>.</p>
<p>If this isn't possible, then is the only option to modify source code since it is open source? I believe the most likely case is I am just missing a configuration setting that is possible.</p>
","5","2433695","",""
"48383401","8951708","2018-01-22 14:05:54","0","90","<json><heroku><git-commit><git-push>","Rejected push, failed to compile Node.js app","<p>I have an <code>Angular 2</code> project which I intend to deploy to Heroko, so I configured the <code>package.json</code> file, and created a <code>server.js</code> file in the project's root, and when I'm trying to push the project, it gives me a <code>parse error</code> and says that it expected another key-value pair at line 13, column 3. I've verified the respective line 13, column 3 in the file, but I don't find anything strange there. Maybe I do not see something =/. Below I'll leave the 'package.json', and a screen with the error message.</p>
<blockquote>
<p>package.json</p>
</blockquote>
<pre><code>{
  &quot;name&quot;: &quot;game2048&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;scripts&quot;: {
    &quot;ng&quot;: &quot;ng&quot;,
    &quot;start&quot;: &quot;node server.js&quot;,
    &quot;build&quot;: &quot;ng build --prod&quot;,
    &quot;test&quot;: &quot;ng test&quot;,
    &quot;lint&quot;: &quot;ng lint&quot;,
    &quot;e2e&quot;: &quot;ng e2e&quot;,
    &quot;postinstall&quot;: &quot;ng build --aot -prod&quot;,
  },
  &quot;private&quot;: true,
  &quot;dependencies&quot;: {
    &quot;@angular/animations&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/cli&quot;: &quot;^1.6.1&quot;,
    &quot;@angular/common&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/compiler&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/core&quot;: &quot;^5.1.1&quot;,
    &quot;@angular/forms&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/http&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/platform-browser&quot;: &quot;^5.1.1&quot;,
    &quot;@angular/platform-browser-dynamic&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/router&quot;: &quot;^5.0.0&quot;,
    &quot;core-js&quot;: &quot;^2.4.1&quot;,
    &quot;express&quot;: &quot;^4.16.2&quot;,
    &quot;rxjs&quot;: &quot;^5.5.2&quot;,
    &quot;zone.js&quot;: &quot;^0.8.14&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@angular/compiler-cli&quot;: &quot;^5.0.0&quot;,
    &quot;@angular/language-service&quot;: &quot;^5.0.0&quot;,
    &quot;@types/jasmine&quot;: &quot;~2.5.53&quot;,
    &quot;@types/jasminewd2&quot;: &quot;~2.0.2&quot;,
    &quot;@types/node&quot;: &quot;~6.0.60&quot;,
    &quot;codelyzer&quot;: &quot;^4.0.1&quot;,
    &quot;jasmine-core&quot;: &quot;~2.6.2&quot;,
    &quot;jasmine-spec-reporter&quot;: &quot;~4.1.0&quot;,
    &quot;karma&quot;: &quot;~1.7.0&quot;,
    &quot;karma-chrome-launcher&quot;: &quot;~2.1.1&quot;,
    &quot;karma-cli&quot;: &quot;~1.0.1&quot;,
    &quot;karma-coverage-istanbul-reporter&quot;: &quot;^1.2.1&quot;,
    &quot;karma-jasmine&quot;: &quot;~1.1.0&quot;,
    &quot;karma-jasmine-html-reporter&quot;: &quot;^0.2.2&quot;,
    &quot;protractor&quot;: &quot;~5.1.2&quot;,
    &quot;ts-node&quot;: &quot;~3.2.0&quot;,
    &quot;tslint&quot;: &quot;~5.7.0&quot;,
    &quot;typescript&quot;: &quot;~2.4.2&quot;
  },
  &quot;engines&quot;: {
        &quot;node&quot;: &quot;8.9.4&quot;,
        &quot;npm&quot;: &quot;5.6.0&quot;,
  }
}
</code></pre>
<blockquote>
<p>The error message</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/iDFx5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iDFx5.png"" alt=""enter image description here"" /></a></p>
","0","8951708","",""
"30833712","2712050","2015-06-14 19:40:19","7","4168","<git><git-commit><git-checkout>","How to git commit in a new branch after I've already made the changes?","<p>I understand that a command to start a new branch is</p>

<pre><code>git checkout -b &lt;mybranch&gt;
</code></pre>

<p>However, that assumes I had the foresight to have created the new branch before making the new changes that I want to commit. </p>

<p>Usually however that's not the case. Usually, I start coding, then may or may not do <code>git add .</code> <em>then</em> want to commit in a new branch. How do I do that?</p>
","0","2712050","",""
"66765470","184917","2021-03-23 14:45:02","0","1669","<git><git-commit>","git commit --fixup hash does nothing","<p>I have a commit I want to fixup. what am I doing wrong?</p>
<pre><code>git commit --fixup bdf55a7c12996e3af853c27ca4ff6c670e826c5e
On branch foo
nothing to commit, working tree clean
git --version
git version 2.31.0

</code></pre>
","8","184917","0","0"
"25843813","402081","2014-09-15 08:33:14","4","3032","<git><git-commit><git-add>","Why cannot add a large file to a Git repository","<p>Why Git does not support committing very big files? I'm trying to add a 4Gb file and I get the following error:</p>

<pre><code>C:\Users\danipen\gitrepos\vmstore&gt;git add mybigfile.rar
fatal: Out of memory? mmap failed: No such file or directory
</code></pre>

<p><strong>UPDATE</strong>: Seems that git has a <a href=""https://stackoverflow.com/questions/6775242/how-can-i-recover-from-fatal-out-of-memory-mmap-failed-cannot-allocate-memor/6812201#6812201"">problem</a> handling <a href=""https://stackoverflow.com/questions/20652850/git-fetch-cannot-allocate-memory"">big</a> files.</p>

<ul>
<li>Do you know any workaround for this issue?</li>
<li>Maybe should I split the large file in chunks?</li>
</ul>
","3","402081","0","0"
"48410904","556282","2018-01-23 21:12:42","0","475","<git><git-commit><git-checkout>","Git - How to push new files to master without cloning","<p>I am in a strange predicament. The repository that I want to clone is too large so I've been using sparse-checkout to get specific files and folders that I need. Here are the instructions I followed to do this: <a href=""https://stackoverflow.com/questions/4114887/is-it-possible-to-do-a-sparse-checkout-without-checking-out-the-whole-repository"">Is it possible to do a sparse checkout without checking out the whole repository first?</a>. </p>

<p>An example: I was able to checkout Folder 1 and Folder 2 from the repository.</p>

<pre><code>Repository   
--&gt; Folder1
--&gt; Folder2
</code></pre>

<p>I now need to save a new folder with files into the repository. What is the best way to do this? </p>

<p>It would have to be structured like this:</p>

<pre><code>    Repository   
    --&gt; Folder1
    --&gt; Folder2
    --&gt; NewFolder
</code></pre>
","4","556282","",""
"44625270","1983342","2017-06-19 08:07:04","64","12127","<intellij-idea><git-commit><jetbrains-ide>","IntelliJ IDEA - Asterisk after author's name in git log","<p>In our git log we sometimes see an asterisk after the user name in the <em>Author</em> column. The same user is listed without the asterisk in other commits.</p>

<p>What does the asterisk stand for?</p>

<p>I'm using IntelliJ IDEA 15.0.6.</p>
","4","1983342","0","0"
"48978751","8594249","2018-02-25 21:41:32","1","184","<git><terminal><git-commit>","Mac Terminal ""trapped"" by git and won't let me use bash commands","<p>So, I was experimenting with Git for the first time and I decided to add a commit message. I used this code: </p>

<pre><code>git commit
</code></pre>

<p>....which led me to a commenting screen of some sort. I put in my comment, hit enter, and absolutely nothing happened. The terminal isn't accepting any commands, and it doesn't even look like it's the same interface anymore. How do I exit this? </p>
","3","8594249","",""
"48979395","2808572","2018-02-25 23:00:49","1","351","<github><git-commit>","Open GitHub issues with a commit","<p>Title pretty much sums it up.</p>

<p>I can close issues with <code>Fixes #123</code> but is it possible to open them with a keyword?</p>
","2","2808572","",""
"67343248","1635450","2021-05-01 05:46:45","1","71","<git><github><gitlab><git-commit><githooks>","How to ensure that commit contains specific user info in a shared git repository instead of group email id?","<p>We have a development server which team members login with a common unix user and work on the same repository. Each team member may clone to different repository and configure the local git user identity with his/her identity and remove the global git user identity. However, regardless of how they do their work, what's the best way to enforce that every commit has the specific user identity instead of the common unix user's identity? I am thinking of using the pre-receive server hook to check for a valid <code>user.name</code> and <code>user.email</code>. How do I achieve that? I use on-premise GitLab. Any advice and insight is appreciated.</p>
","5","1635450","0","0"
"26294590","3905583","2014-10-10 08:02:20","17","2619","<git><github><github-api><git-commit>","Differences between github API commit statuses ""failure"" and ""error""?","<p>What is the difference between github API commit statuses ""failure"" and ""error""?</p>
","0","3905583","0","0"
"44922818","4270148","2017-07-05 09:53:49","0","47","<git><github><git-branch><git-rebase><git-commit>","Git change branch historically","<p>When I look at my repository network on <a href=""https://github.com/user/repo/network"" rel=""nofollow noreferrer"">https://github.com/user/repo/network</a>, the graph of my repo looks like this:</p>

<p><strong>Shown:</strong></p>

<pre><code>       ------------ A2 (branch a)
      |
A0 -- A1 -- B0 (branch b)
      |
       ------------------ C0 -- C1 (branch c)
</code></pre>

<p>Though the graph structure is correct, it looks like branch a originated from branch b. This effect is extra strong because [A0-A1-B0] all have the same color whereas [A2] is colored differently and so is [C0-C1].</p>

<p><strong>Expected:</strong></p>

<pre><code>       ----- B0 (branch b)
      |
A0 -- A1 ---------- A2 (branch a)
      |
       ------------------ C0 -- C1 (branch c)
</code></pre>

<p>I am wondering if this is just a displaying ""issue"" or wether or not this is somehow actually encoded into the git history.</p>

<p>I did some rebasing (private repo) to make the graph look nicer when I accidentally committed to the wrong branch.</p>

<p>Is there a way to assign A0 and A1 to branch a historically to make the graph look like expected? Or should I just not worry about this issue?</p>
","2","4270148","",""
"48993856","1827442","2018-02-26 17:23:35","2","144","<git><git-merge><git-commit><git-subtree><lerna>","Merge subtree changes if different commit histories","<p>I'm trying to use <a href=""https://github.com/splitsh/lite"" rel=""nofollow noreferrer"">splitsh-lite</a> to expose packages from a monorepo as manyrepos.</p>

<p>But how can I merge a pull request made to a manyrepo back into the monorepo?</p>

<p><code>splitsh-lite</code> is a git subtree replacement and creates all new commit ids while otherwise essentially keeping the same commit history. The idea is that the manyrepo stays readonly, PRs get merged into the monorepo, and from there are distributed back to the manyrepos again. Now, a simple subtree merge of a PR returns</p>

<pre><code>fatal: refusing to merge unrelated histories
</code></pre>

<p>Is there a git trick to achieve this, given that we know there's a ""last matching commit"" before the PR commit(s)?</p>
","0","1827442","",""
"49007130","4486387","2018-02-27 11:03:27","12","16932","<git><git-commit>","git error cannot handle Commit as a builtin","<p>I tried this command </p>

<blockquote>
  <p>$ git Commit -m  ""With ViewPager""</p>
</blockquote>

<p>and getting this error </p>

<blockquote>
  <p>fatal: cannot handle Commit as a builtin</p>
</blockquote>
","0","4486387","0","0"
"63572447","14161436","2020-08-25 05:16:32","4","2032","<git><git-commit><pre-commit-hook><pre-commit.com>","pre-commit works fine, but git commit fails","<p>so in my project, there are serveral pre-commit hooks to make sure our codes meet team standard, but whenever i try to commit changes, there is always an error saying executable was not found. usually, i first assumed there must be some problem with PATH environment variable value, but it's the only acutal git commit command that causes the issue.</p>
<pre><code>yunu@LAPTOP-8FK6RMJ8:/mnt/d/Projects/xyz/idl$ pre-commit
Fix End of Files.........................................................Passed
Trim Trailing Whitespace.................................................Passed
yamllint.............................................(no files to check)Skipped
ensure buf...............................................................Passed
buf check lint...........................................................Passed
buf check breaking.......................................................Passed
yunu@LAPTOP-8FK6RMJ8:/mnt/d/Projects/xyz/idl$ git commit
Fix End of Files.........................................................Passed
Trim Trailing Whitespace.................................................Passed
yamllint.............................................(no files to check)Skipped
ensure buf...............................................................Failed
- hook id: ensure-buf
- exit code: 1

Executable `task` not found

buf check lint...........................................................Failed
- hook id: buf-lint
- exit code: 1

Executable `buf` not found

buf check breaking.......................................................Failed
- hook id: buf-breaking
- exit code: 1

Executable `buf` not found
</code></pre>
<p>and i can run the commands which were said to be not found right after this.<br> i can see that bash identifies these commands just fine.</p>
<pre><code>yunu@LAPTOP-8FK6RMJ8:/mnt/d/Projects/xyz/idl$ buf
Usage:
  buf [command]

Available Commands:
  check           Run lint or breaking change checks.
  experimental    Experimental commands. Unstable and will likely change.
  help            Help about any command
  image           Work with Images and FileDescriptorSets.
  ls-files        List all Protobuf files for the input location.
  protoc          High-performance protoc replacement.

Flags:
  -h, --help                help for buf
      --log-format string   The log format [text,color,json]. (default &quot;color&quot;)
      --log-level string    The log level [debug,info,warn,error]. (default &quot;info&quot;)
      --timeout duration    The duration until timing out. (default 2m0s)
  -v, --version             version for buf

Use &quot;buf [command] --help&quot; for more information about a command.
yunu@LAPTOP-8FK6RMJ8:/mnt/d/Projects/xyz/idl$
</code></pre>
<p>so what would be the issue? does git command use different kind of PATH of its own?</p>
<p>i'm running this on ubuntu wsl on windows 10.</p>
","3","14161436","0","0"
"26318375","","2014-10-11 19:22:20","54","65204","<git-commit><git-config><git>","fatal: No existing author found with 'XXX'","<p>I used git for the first time and I set my user name and user mail. The commands I used are below:</p>

<pre><code>git config --global user.email ""bob@example.com""
git config user.email ""bob@example.com""
git config --global user.name ""bob""
git config user.name ""bob""
</code></pre>

<p>When I run <code>git commit --author ""bob""</code> , I got an error <code>fatal: No existing author found with 'bob'</code>. How can I set user name and email?</p>
","5","","0","0"
"44958792","8164046","2017-07-06 21:03:30","1","295","<python><git><subprocess><git-commit><git-add>","Changes not staging during Python subprocess call of empty commit","<p>At the end of a Python program I have:</p>

<pre><code>subprocess.call([""git"", ""add"", "".""], shell=True)
subprocess.call([""git"", ""commit"", ""-m"", ""'{}'"".format(""commit message""), ""--allow-empty""], shell=True)
</code></pre>

<p>This commit has no changes from the previous commit besides the commit message, hence the <code>--allow-empty</code>.</p>

<p>When I run <code>git status</code> in my repository, I get that all of the files are not staged for commit (and I cannot re-base because of this).</p>

<p>However, if I comment those two lines out, run the program again, and manually run in shell once the program is finished:</p>

<pre><code>git add .
git commit -m ""commit message""
</code></pre>

<p>The files are all added and committed and I am able to re-base successfully.</p>

<p>Even when adding another two subprocess <code>git add</code> and <code>git commit</code> commands, with or without <code>--allow-empty</code> to the end of the program, the only way to actually add and commit the files is manually through a shell.</p>

<p>Am I missing something here? Shouldn't the subprocess hypothetically be doing the exact same thing as the shell commands?</p>
","3","8164046","",""
"49038908","7449489","2018-02-28 21:29:58","3","545","<git><git-commit><git-log>","'git log' does not match up with 'git log tag..'","<p>I've always assumed that 'git log' is the source of all truth, showing things truly chronologically. But I've run into a contradiction with the git log range option. I believed that the 'tag..' option would give me everything between a tag and HEAD on the specific branch I'm on. </p>

<p>For example, I use <code>git log --oneline --decorate</code> and get</p>

<pre><code>df43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
34cc390 (tag: myTag) commit k
060e7ee commit i
7b6607a commit f
08a3fea commit d
467aea3 commit b
aa4c5dd commit a
</code></pre>

<p>And I would expect that when I do <code>git log myTag.. --oneline --decorate</code> I would get</p>

<pre><code>af43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
</code></pre>

<p>However, when I run <code>git log myTag.. --oneline --decorate</code> I am getting this instead:</p>

<pre><code>df43779 (HEAD -&gt; myBranch) commit o
5aeb672 commit n
060e7ee commit i
08a3fea commit d
</code></pre>

<p>Assuming <code>git log</code> is telling the truth, what are some reasons why my range command might be giving me commits that are out of my specified commit range?</p>

<p>I know some more information might be useful to answer this question specifically, such as commit times and information on branch complexity. But I guess what I really want to know is more theoretical: does the git log display things in a true chronological fashion or is it not as simple as it seems? And is the 'tag..' option doing something other than my simple explanation of what it did? What are some reasons why the examples didn't match up as I thought? </p>

<p>In other words, what log is the ""true log"" and why?</p>
","2","7449489","",""
"49047417","1181261","2018-03-01 10:17:51","0","33","<git><git-commit><git-push>","I edited an older git commit and now I want to push it and make it HEAD","<p>I cloned the repository, did a checkout of one of the earlier commits and then did some changes. Now I want to make this as HEAD (commit/push and make it HEAD) - the newer commits will become obsolete. </p>

<p>How can I do this?</p>

<p>This is not a duplicate of <a href=""https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head"">How to move HEAD back to a previous location? (Detached head)</a>, because I first want to commit the changes and then mark that new commit as HEAD.</p>
","4","1181261","",""
"49049047","9212547","2018-03-01 11:45:48","0","34","<git><rebase><git-rebase><git-commit>","Delete top second commit using git rebase -i","<p>I was to delete top second commit using git rebase -i
once it worked fine
The other time it was showing merge conflicts.
I dont know why it was showing merge conflicts while it worked fine earlier.
I have reduced my problem to a simpler one and pasted my commandline log here.
It is self explanatory
I have deleted useless information and only sufficent information is there. </p>

<pre><code>user-pc:~$ git log 
* 2baec37 (HEAD -&gt; good, master, bad) test file
* 76816a5 changed .gitignore
user-pc:~$ cat test.cpp 
#include&lt;bits/stdc++.h&gt;
using namespace std;

int main(){
    int t;
    cin&gt;&gt;t;
    while(t--){
        cout &lt;&lt; t*t &lt;&lt;endl;
    }
}
user-pc:~$ vim test.cpp 
user-pc:~$ git add .
user-pc:~$ git diff --cached
 #include&lt;bits/stdc++.h&gt;
 using namespace std;

+int sqr(int t){
+    return t*t;
+}
+
 int main(){
     int t;
     cin&gt;&gt;t;
     while(t--){
-        cout &lt;&lt; t*t &lt;&lt;endl;
+        cout &lt;&lt; sqr(t) &lt;&lt;endl;
     }
 }
user-pc:~$ git commit -m ""added sqr function""
user-pc:~$ vim test.cpp 
user-pc:~$ git add .
user-pc:~$ git diff --cached
 int main(){
     int t;
-    cin&gt;&gt;t;
+    cin&gt;&gt;t;//input
     while(t--){
         cout &lt;&lt; sqr(t) &lt;&lt;endl;
     }
user-pc:~$ git commit -m ""added comment""
user-pc:~$ git log 
* 6885e9f (HEAD -&gt; good) added comment
* cb119d2 added sqr function
* 2baec37 (master, bad) test file
user-pc:~$ git rebase -i master
Successfully rebased and updated refs/heads/good.
user-pc:~$ git log 
* 3ca597b (HEAD -&gt; good) added comment
* 2baec37 (master, bad) test file
user-pc:~$ cat test.cpp 
#include&lt;bits/stdc++.h&gt;
using namespace std;

int main(){
    int t;
    cin&gt;&gt;t;//input
    while(t--){
        cout &lt;&lt; t*t &lt;&lt;endl;
    }
}
user-pc:~$ It worked :)
user-pc:~$ 
user-pc:~$ 
user-pc:~$ 
user-pc:~$ git checkout bad
user-pc:~$ git log 
* 3ca597b (good) added comment
* 2baec37 (HEAD -&gt; bad, master) test file
user-pc:~$ cat test.cpp 
#include&lt;bits/stdc++.h&gt;
using namespace std;

int main(){
    int t;
    cin&gt;&gt;t;
    while(t--){
        cout &lt;&lt; t*t &lt;&lt;endl;
    }
}
user-pc:~$ vim test.cpp 
user-pc:~$ git add .
user-pc:~$ git diff --cached
 #include&lt;bits/stdc++.h&gt;
 using namespace std;

+int sqr(int t){
+    return t*t;
+}
+
 int main(){
     int t;
     cin&gt;&gt;t;
     while(t--){
-        cout &lt;&lt; t*t &lt;&lt;endl;
+        cout &lt;&lt; sqr(t) &lt;&lt;endl;
     }
 }
user-pc:~$ git commit -m ""sqr func added""
user-pc:~$ vim test.cpp 
user-pc:~$ git add .
user-pc:~$ git diff --cached
     return t*t;
 }

-int main(){
+int main(){//main fun
     int t;
     cin&gt;&gt;t;
     while(t--){
user-pc:~$ git commit -m ""comment added""
user-pc:~$ git log 
* 5595440 (HEAD -&gt; bad) comment added
* 77caf57 sqr func added
| * 3ca597b (good) added comment
|/  
* 2baec37 (master) test file
user-pc:~$ git rebase -i master
error: could not apply 5595440... comment added

When you have resolved this problem, run ""git rebase --continue"".
If you prefer to skip this patch, run ""git rebase --skip"" instead.
To check out the original branch and stop rebasing, run ""git rebase --abort"".
Could not apply 55954408ccb50252bcb22d01f4506fe6696642a6... comment added
user-pc:~$ cat test.cpp 
#include&lt;bits/stdc++.h&gt;
using namespace std;

&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
int main(){
=======
int sqr(int t){
    return t*t;
}

int main(){//main fun
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 5595440... comment added
    int t;
    cin&gt;&gt;t;
    while(t--){
        cout &lt;&lt; t*t &lt;&lt;endl;
    }
}
user-pc:~$ Why is it not deleting content of commit ""sqr func added"" 
user-pc:~$ I wanted it to be like this :
user-pc:~$ cat test.cpp 
#include&lt;bits/stdc++.h&gt;
using namespace std;

int main(){//main fun
    int t;
    cin&gt;&gt;t;
    while(t--){
        cout &lt;&lt; t*t &lt;&lt;endl;
    }
}
user-pc:~$ tell me why it worked for good branch but not for bad branch
</code></pre>
","8","9212547","",""
"26339608","1836143","2014-10-13 12:05:00","0","713","<git><range><git-commit><cherry-pick>","How to cherry-pick a range of commits but stop for amending?","<ul>
<li>To pick a single commit: <code>git cherry-pick A</code></li>
<li>To pick a single commit, but stop for ammending: <code>git cherry-pick A -n</code></li>
<li>To pick a range of commits: <code>git cherry-pick A..B</code></li>
</ul>

<p>However, what do I do if I want to pick a range of commits, but amend each commit? This doesn't work:</p>

<pre><code>git cherry-pick A..B -n
</code></pre>

<p>because it stops with all modified files from all commits staged together, so that if I amend and then commit, all changes will be merged into a single commit.</p>
","2","1836143","",""
"44971711","886906","2017-07-07 13:14:25","1","33","<git><version-control><commit><branching-and-merging><git-commit>","GIT: remove from 2nd to 5th commits in the remote branch","<p>I'd like to fully remove several commits in the remote branch.</p>

<p>Reason: The branch with the only important (and the most recent) commit supposed to be <strong>forked from</strong> and <strong>merged into</strong> another branch.</p>

<p>Once I change the branch to a proper branch (via browser) I see several more commits that are not in that proper branch yet. I don't need them.</p>

<pre><code>git reset --hard HEAD~5
</code></pre>

<p>and by manually applying and commiting my recent changes didn't get the result. There are even more commits now. </p>

<p>So, what was a proper and clear algorythm?</p>

<p>Thank you.</p>
","1","886906","",""
"44975696","8103069","2017-07-07 16:28:32","3","141","<git><vim><git-commit><vim-syntax-highlighting>","Restrict or change color of specific line in Vim","<p>I use Vim for git commits. I have created a <code>.gitcommittemplate</code>:</p>

<pre><code>############################### &lt;BASLIK&gt; ###############################
#
# ...
#
# |--En fazla 50 Karakter olabilir(Max 50 Char)--|
my real title

my real body
</code></pre>

<p>I want to restrict line 6 for 50 characters. Or even better, after 50 characters convert it to red and restrict writing after 72 characters.</p>

<p>How can I do that?</p>
","0","8103069","0","0"
"49076876","1952194","2018-03-02 20:29:15","5","9402","<git><git-commit>","git - how to remove a file that is too big from my current commit","<p>When I do the following:</p>

<pre><code>git add *
git commit -m ""msg""
git push origin develop
</code></pre>

<p>I get the following errors:</p>

<pre><code>Counting objects: 25, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (24/24), done.
Writing objects: 100% (25/25), 46.43 MiB | 2.49 MiB/s, done.
Total 25 (delta 13), reused 0 (delta 0)
remote: Resolving deltas: 100% (13/13), completed with 11 local objects.
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: ffe0c9f32d9cde4cedfc1f4713eb82b9
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File tags is 282.99 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://mygithubrepo
 ! [remote rejected] develop -&gt; develop (pre-receive hook declined)
error: failed to push some refs to 'https://mygithubrepo'
</code></pre>

<p>I have then deleted the file 'tags' from my hard disk but every time I try to push, I get the same error. The file has never been pushed to my repository, so I just need to remove it from this current commit. I have tried numerous things, but I end up with this same error every time. Any help?</p>

<p>When I do </p>

<pre><code>git ls-files
</code></pre>

<p>The file 'tags' does not even show in the list. But still it is trying  to push it?</p>
","0","1952194","0","0"
"49082639","8588359","2018-03-03 09:22:38","0","488","<git><git-branch><git-commit>","Local uncommited changes in master. Need to switch to another branch","<p>I am WebDev intern and I have done some work in the master branch. 
And I have done a week's work without realising that I am in the master branch. 
I need to switch branches so that I can commit my local changes from a branch that is not the master branch. 
What I need to do:</p>

<ul>
<li>Take all the local changes from my master branch to some other branch.</li>
<li>Commit changes from that branch.</li>
<li>Give you a correct answer verification. :P</li>
</ul>

<p>I went through some answers but I don't think that they are catering to my exact situation.
Thanks in advance. :)</p>
","1","8588359","",""
"67453984","5245143","2021-05-09 03:13:03","0","41","<git><github><git-commit><pull>","Github PR wrongly Considering a File Add & Delete as File Move","<p>I have the following setup in my GitHub</p>
<p><strong>GitHub Main Repository:</strong> QAScript1.sql with oldData</p>
<p><strong>GitHub Dev Repository :</strong> I have <strong>updated</strong> QAScript1.sql with newData, <strong>Added</strong> new file ProdScript1.sql with sameContents as QAScript1.sql and committed both these files  - <strong>Commit1</strong></p>
<p>Deleted the QAScript1.sql - <strong>Commit2</strong></p>
<p><strong>Raised a PR</strong> to merge from GitHub Dev Repository to Github Main Repository</p>
<p>Now when i see the PR -&gt;Files Changed section,I see that QAScript1.sql -&gt; ProdScript1.sql ,I undertand this as QAScript1.sql file has been moved to ProdScript1.sql</p>
<p>My Question is</p>
<p>i)They both are 2 different files - QAScript1.sql, ProdScript1.sql .Why Github is considering as file moved instead of considering it as new File Added and old file Deleted.</p>
<p>ii)How does Git recognizes a fileMove in the above case?</p>
","0","5245143","",""
"49095896","416122","2018-03-04 13:25:22","4","2200","<github><atom-editor><git-commit><git>","$ git commit --amend not altering/saving commit message","<p>I recently <code>$ git add .</code> some changes I made to one of my repositories followed by <code>$ git commit -m'INcorrect commit message'</code>.</p>

<p>I decided to change the incorrect commit message to <em>'Correct commit message'</em> using: </p>

<p><code>$ git commit --amend</code></p>

<p>The instructions I followed to do this can be found here: <a href=""https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages"" rel=""nofollow noreferrer"">https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages</a></p>

<p>I use Atom, so Atom opens with '<strong>IN</strong>correct commit message' displayed, which I change to 'Correct commit message' and save my changes.</p>

<p>After I saved the altered commit message, I did a <code>$ git log -1</code> expecting to see 'Correct commit message'; however, I still see '<strong>IN</strong>correct commit message.'</p>

<p>What exactly am I doing wrong?</p>

<p><strong>Note</strong> </p>

<p>Just prior to this, I changed my git editor from Sublime to Atom following these instructions: <a href=""https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits"">How do I make Git use the editor of my choice for commits?</a></p>

<p>I basically used:</p>

<p><code>$ git config --global core.editor ""atom""</code></p>

<p>and</p>

<p><code>$ export GIT_EDITOR=atom</code></p>

<p>I realize now that I didn't have to do both, but I also realize this probably didn't hurt either.</p>
","3","416122","0","0"
"67476160","15872719","2021-05-10 18:55:22","0","160","<git><git-commit><git-checkout>","Git checkout to previous commit ID didn't revert the changes. Any possible explanation?","<p><img src=""https://i.stack.imgur.com/55tKj.jpg"" alt=""This image is the result of git log --oneline --name-status"" /></p>
<p>I am having an issue with git.
I made a simple python file in a git initialized folder.
Then I added it and committed it.
Then I edited it, added another csv file to the folder, and committed it again.</p>
<p>The problem is, when I check out to the previous commit ID,
the changes I made were not found to be reverted back.
The csv file still exists, and the changes in python file also persists.</p>
<p>But when I tried to commit it again, using the same statement as I did
earlier, the changes reverted.</p>
<p>So guys, please explain what just happened here.</p>
<p>I am a beginner to programming world.
So, I would like to know how stuff work, not just the solutions.
Hope its ok.</p>
","14","15872719","0","0"
"67477072","13969419","2021-05-10 20:10:07","1","69","<git><git-commit><git-revert>","getting rid of file commited and pushed two commits behind HEAD","<p>I have a situation where two commits past I have reverted changes from another commit, on that revert commit I also committed package.json and package-lock.json, and now I need to get rid of those before I will rebase to master and have my PR approved. How can I achieve that without overnighting currently committed files, I mean without reverting to the commit where I have committed those unwanted files?</p>
<p>Many thanks</p>
","0","13969419","",""
"49123470","8567148","2018-03-06 04:37:21","2","10628","<visual-studio><github><git-commit>","how to change the visual code studio commit authors","<p>I am not sure why, but my Visual Studio Code is showing the wrong commit author name. I am trying to change the author of the commit. How can I do that? I have already multiple things, but no luck.</p>

<p><img src=""https://i.stack.imgur.com/AA4tV.png"" alt=""""></p>

<p>This is what I tried:</p>

<p>Since I have three commits, I tried <code>git rebase -i HEAD~3</code>,
but I am getting this error:</p>

<blockquote>
  <p>Cannot rebase: You have unstaged changes. Please commit or stash them.</p>
</blockquote>

<p>I am able to get to this now, how can i change the author name now?
<a href=""https://i.stack.imgur.com/paOgw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/paOgw.png"" alt=""enter image description here""></a></p>
","0","8567148","0","0"
"67514512","15913204","2021-05-13 05:54:44","0","119","<arrays><json><git><jenkins-pipeline><git-commit>","Truncate github comments, output to github commit comment first 20 errors only","<p>Github has a maximum character limit for comments (seems to be about 65000 characters).</p>
<p>This is way too long to be useful, but we are generating some output that is longer than this.</p>
<p>Desired functionality:</p>
<ul>
<li>output to github commit comment first 20 errors only</li>
<li>If more than 20 errors add a message (in bold) saying &quot;more error messages exist, please refer to splunk report&quot;</li>
<li>same for warnings</li>
</ul>
<p><strong>code is here</strong></p>
<pre><code>  git_comment=git_comment+'\n### ERRORS ('+errors.size()+')\n'
  errors.each{ git_comment=git_comment+'\n'+it }
  git_comment=git_comment+'\n### WARNINGS ('+warnings.size()+')\n'
  warnings.each{ git_comment=git_comment+'\n'+it }
  git_comment=git_comment.replaceAll(&quot;'&quot;,&quot;&quot;)
</code></pre>
<p>Actually, I am getting 200+ error messages to GitHub commit. I want to output only 20 error messages. Also, If more than 20 errors add a message (in bold) saying &quot;more error messages exist, please refer to splunk report&quot;</p>
<p>To make it output only 20 errors, I want ro know the syntax for errors.size() and warnings.size() in git_comment section of the code.</p>
","3","15913204","0","0"
"67516462","9939844","2021-05-13 08:51:49","0","498","<git><git-commit><git-stage>","Can I recover staged changes after checkout?","<p>Recently, I staged many changes in over 100 files. Then, unfortunately, I did a checkout of a previous commit. After the checkout all my changes are gone and not visible anymore (I'm using Fork to work with git). Are my changes really lost or can I recover the changes anyhow?</p>
<p>Please help!</p>
","11","9939844","0","0"
"68398844","609074","2021-07-15 18:08:21","0","43","<git><git-branch><git-commit>","How to get locally committed changes to be reapplied as a merge commit from a branch?","<p>I am working on a local git repository that doesn't have a configured remote one just yet. I accidentally started all my work on the local <code>master</code> branch.</p>
<p>There are 22 commits so far and except the first two commits, I'd like all commits &gt;=3rd onward to be &quot;moved&quot; to a new branch and then merged back into master so that the log shows a &quot;merge commit&quot; instead.</p>
<p>I tried this but didn't seem to work:</p>
<p>On master:</p>
<pre><code>$ git branch new_branch    
$ git reset HEAD~20 
$ git add . &amp;&amp; git stash
$ git merge --squash new_branch
$ git commit
   
</code></pre>
<p>This does get me a squashed merge commit and I now see only 3 commits on my master. However, if I do <code>git log --merges</code> it doesn't output anything.</p>
<p>How can I create a &quot;real merge commit&quot; for the code in <code>new_branch</code> that is detectable by <code>git log --merges</code> and would list all commits if I were to run: <code>git rev-list &lt;merge-commit-id&gt;^..&lt;merge-commit-id&gt;</code>?</p>
","0","609074","",""
"68400766","4682839","2021-07-15 21:07:53","0","260","<git><git-branch><git-commit><git-history>","How to move starting point of branch to an older commit","<p>I'd like to rebase my branch onto an older commit to exclude code added by the newer commits.</p>
<p>What I have:</p>
<pre><code>A---B---C---D---E master
                 \
                  F---G---H---I---J experiment
</code></pre>
<p>What I want:</p>
<pre><code>A---B---C---D---E master
     \
      F---G---H---I---J experiment
</code></pre>
<p>Say I wanted to make my <code>experiment</code> branch on commit <code>B</code>, but didn't realize I made it on <code>E</code>. By the time I realize, I already made a bunch of commits and they include code changes I don't want (<code>C</code>, <code>D</code>, <code>E</code>).</p>
<p>How do I move the starting point of <code>experiment</code> to the older commit <code>B</code>?</p>
<p>I've read <a href=""https://stackoverflow.com/questions/38427050/how-to-change-the-starting-point-of-a-branch"">this post</a> but haven't seen anything usable regarding moving the branch to an older commit.</p>
","3","4682839","",""
"68412687","11307113","2021-07-16 16:54:05","-1","105","<git><git-commit><sha1><sha>","If git commit IDs are SHA-1 outputs, and SHA-1 produces 160 bits output, why are git commit IDs 320 bits?","<pre><code>commit 371a5e1b79515b13237a7cf88538eebfca028d9f (HEAD -&gt; master-fix, origin/master-fix)
Author: Krishna Birla &lt;contributor email&gt;
Date:   Tue Jul 13 18:31:13 2021 +0530

    &lt;commit message&gt;
</code></pre>
<p>The commit ID is 40 bytes (320 bits). But git uses SHA-1, and SHA-1 produces 160 bits. How?</p>
","1","11307113","",""
"14628936","2007465","2013-01-31 15:10:28","0","891","<git><commit><git-push><git-commit>","How to use git ? git-commit ? git-push?","<p>I am working on a website, and I need to use Git for practical reasons.
However, I think I have not totally understood how it works.</p>

<p>I want to do something quite simple, and I am working on localhost. I make several changes, and sometimes I use Git for put the new or modify files on the server.</p>

<p>Edit²:
after reading some docs, I have reinit all my git repositories. I really understand nothing to git.
So, I connect to my server, and I commit the files. After I reinit my local repository. I add my remote and I did <code>git pull carpe master</code> (carpe is my alias for the remote server).
If I do git checkout master on local, I see all the paths from the tracked files from the server. But git did not download the files to the working tree...
I really do not understand. What should I do for getting the file in my local working tree ?</p>
","0","2007465","",""
"14632828","1122270","2013-01-31 18:41:13","2","157","<git><git-commit><gitweb>","Why git sometimes shows that a file was changed when it was not?","<p>DragonFly BSD uses git as its SCM, with one single repository and branch for both the kernel and the whole userland.</p>

<p>On 2011-11-26, someone did a commit that somehow touched every single file in the repository, even though most files were not changed at all.</p>

<p>That's the offending commit from 2011-11-26: <br/>
<a href=""http://gitweb.dragonflybsd.org/dragonfly.git/commitdiff/86d7f5d305c6adaa56ff4582ece9859d73106103"" rel=""nofollow"">http://gitweb.dragonflybsd.org/dragonfly.git/commitdiff/86d7f5d305c6adaa56ff4582ece9859d73106103</a> <br/>
 <a href=""https://github.com/DragonFlyBSD/DragonFlyBSD/commit/86d7f5d305c6adaa56ff4582ece9859d73106103"" rel=""nofollow"">https://github.com/DragonFlyBSD/DragonFlyBSD/commit/86d7f5d305c6adaa56ff4582ece9859d73106103</a></p>

<p>Since then, with some tools, if you look at file history for any file anywhere in the repo, you can see that it was changed on 2011-11-26 with that commit, but it's only shown in some tools, and not shown in others.</p>

<p>For example, the bogus 2011-11-26 commit <strong>is not shown</strong> with the following tools:</p>

<ul>
<li><p><code>git log sys/sys/sensors.h</code></p></li>
<li><p><a href=""https://github.com/DragonFlyBSD/DragonFlyBSD/commits/master/sys/sys/sensors.h"" rel=""nofollow"">https://github.com/DragonFlyBSD/DragonFlyBSD/commits/master/sys/sys/sensors.h</a></p></li>
</ul>

<p>However, the bogus commit <strong>is erroneously shown</strong> with the following:</p>

<ul>
<li><p><code>git whatchanged --pretty=%at sys/sys/sensors.h</code></p>

<pre><code>1322296064

:000000 100644 0000000... 554cfc2... A  sys/sys/sensors.h
1191329821

:000000 100644 0000000... 554cfc2... A  sys/sys/sensors.h
</code></pre>

<p>The 1322296064 time is the bogus one, and notice how the file was <code>A</code>dded without ever being deleted, and that the <code>dst</code> sha1 is the same.  Another, more representative example, which shows that <code>src</code> sha1 is always <code>0000000...</code> in such bogus commits, even though it makes little sense when you consider that the file was never deleted and still has the same <code>dst</code> sha1:</p>

<pre><code>% git whatchanged --pretty=%at sys/sys/sysctl.h | head -9
1322296064

:000000 100644 0000000... 6659977... A  sys/sys/sysctl.h
1296826445

:100644 100644 94b8d96... 6659977... M  sys/sys/sysctl.h
1292413105

:100644 100644 8c9deaa... 94b8d96... M  sys/sys/sysctl.h
</code></pre></li>
<li><p><a href=""http://gitweb.dragonflybsd.org/dragonfly.git/history/HEAD:/sys/sys/sensors.h"" rel=""nofollow"">http://gitweb.dragonflybsd.org/dragonfly.git/history/HEAD:/sys/sys/sensors.h</a></p></li>
</ul>

<p>My <strong>questions</strong> are as follows:</p>

<ul>
<li><p>How was it possible for the files to be added without first being deleted in the first place?  Was / is it a bug in git to allow something like that?</p></li>
<li><p>Why do some tools compact such bogus commits out (and hide them from the user), but some don't?</p></li>
<li><p>Is there a way to make <code>git-whatchanged</code> and <code>gitweb</code> ignore such bogus commits on files that weren't actually modified, just as <code>git-log</code> and <code>github</code> do?</p></li>
</ul>
","0","1122270","0","0"
"49897509","6732358","2018-04-18 10:33:59","1","476","<git><github><commit><release><git-commit>","How can I add more recent commits into an older Github release?","<p>I’ve created and published a release on Github, but then I commited a change that I would like to have included in the release. On the release page, it says </p>

<blockquote>
  <p>1 commit to master since this release</p>
</blockquote>

<p>Is there any way to either republish the release with the new commit included, or change the commit date so that it appears in the release?</p>
","1","6732358","",""
"68441829","2761641","2021-07-19 14:01:59","1","38","<git><macos><bitbucket><git-commit><git-pull>","When can it happen that you take a pull and you see automatically some changes in the git status?","<p><em>emphasized text</em>
<BR/><strong>MAC OS</strong><BR/><BR/></p>
<p><a href=""https://i.stack.imgur.com/wUMeS.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wUMeS.png"" alt=""enter image description here"" /></a></p>
<p>After taking pull in develop branch, seeing two files removed automatically. any one know when can this happen?</p>
<p>I took a pull in develop branch, and instead of seeing a clean deck, i.e. no changes, I am seeing two files removed.</p>
<p>N.B. These two files were not removed by me, neither they were removed before taking pull.
Before taking pull, there were no uncommitted changes in the repo.</p>
<p>When can it happen that you take a pull and you see automatically some changes in the git status?</p>
","11","2761641","",""
"14652805","2387506","2013-02-01 18:31:26","3","2394","<git><netbeans><version-control><git-push><git-commit>","NetBeans does not allow to push into remote GIT branch (no branch)","<p>I'm new to GIT VCS so I'm kind of lost.</p>

<p>I'm using NetBeans 7.2.1 and working on PHP project with remote GIT repository.</p>

<p>I cloned GIT repository, during that process i checked all remote branches.</p>

<p>Everything went fine. Then i switched to the remote Branch 'BUG0025' did necessary code changes.</p>

<p><strong>Now It's time to Commit and Push.</strong></p>

<ol>
<li><p>Commit.<br>
I'm doing <code>Git->Commit</code>
It says that there are no files to commit in ""Changes between HEAD and Index"" section.
All files i worked with are located in ""Changes between HEAD and Working Tree"" section.
Okay.
Pressing commit. Seems like everything went fine.</p></li>
<li><p>Push.<br>
I'm going to <code>GIT->Remote->Push</code></p></li>
</ol>

<p>And Boom! Here we go: <img src=""https://content.screencast.com/users/rinchik/folders/Jing/media/009f8502-87a2-45e1-a43e-82c2485b8bd4/2013-02-01_1309.png"" alt=""screenshot""></p>

<p>As you can see it doesn't show the branch i worked with, istead i see weird '(no branch)' branch.</p>

<p>It feels like even though i switched to the right branch, the local copy was not created and my commit went nowhere creating '(no branch)' branch.</p>

<p>If somebody could help me with this, it would be awesome!
Thank you!</p>
","2","2387506","",""
"32119827","2561452","2015-08-20 13:37:53","1","75","<git><github><git-commit>","Git for Windows client only showing my commits now","<p>I work with a team of programmers on a group project hosted on GitHub.  Up until yesterday everything was fine.  Some of us use the Git Desktop for Windows client while others use the GitHub Shell.  I usually use the shell, but today a team member reported that only my commits show up in his history list for commits; no other team member's commits are visible.</p>

<p>However:</p>

<ul>
<li>An older version of Git Desktop for Windows does show all the commits from every team member properly</li>
<li>The browser/web interface for GitHub shows everything properly.</li>
<li>All repos and branches appear to be there and intact</li>
</ul>

<p>It's just this newer version of GitHub that is showing only my commits.  Has anybody else seen this issue and knows how to fix it?</p>

<p>The new version of Git Desktop for Windows that seems to have this problem (at least for us) is : The Last Free Monad 3.0.3.1</p>
","1","2561452","",""
"68822119","12185186","2021-08-17 18:05:46","0","62","<github><git-commit>","TortoiseSVN Commit is forbidden by github","<p>Commit a code to Github using TortoiseSVN is forbidden. Following is the message that I could get:
<a href=""https://i.stack.imgur.com/xPMiB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xPMiB.png"" alt=""Tortoise SVN error when committing to Gtihub"" /></a></p>
<p>It has been working well a couple of weeks ago. I do now know why it has a problem.</p>
","8","12185186","",""
"50273279","1442452","2018-05-10 12:43:52","0","1589","<git><git-commit>","git - Remove multiple commits in between","<p>git log scenario:</p>

<p>Commit 1</p>

<p>Commit 2</p>

<p>Commit 3</p>

<p>Commit 4</p>

<p>Commit 5</p>

<p>Commit 6</p>

<p>I need to remove commits 2-4 from between making the final git log as</p>

<p>Commit 1</p>

<p>Commit 5</p>

<p>Commit 6</p>

<p>What is the best way to do it?</p>
","2","1442452","",""
"68838173","15600654","2021-08-18 19:16:41","0","519","<git><pycharm><gitlab><git-commit>","How to exclude non-project files from git commit in PyCharm?","<p>I have a project setup, where I have one git repo with two folders in it. Each folder is a separate project in PyCharm. Both projects are connected to that repo.
When I update the code of one project, the other project notices that and adds the files from the other project to <strong>its own</strong> commit options:</p>
<p><a href=""https://i.stack.imgur.com/72tCx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/72tCx.png"" alt=""enter image description here"" /></a></p>
<p>The yellow/orange highlighted files are non-project files, and I only want the project to automatically add files to commit that are included in the project. I can of course just choose the files I want to commit, but sometimes I miss a file, which is problematic, and it would be nice if I didn't have to select files each time.</p>
<p>So, is there a way to exclude non-project files from commit options by default?</p>
","0","15600654","",""
"15302781","541208","2013-03-08 20:32:06","5","372","<git><vim><git-commit>","Using vim as a git commit message writer, is it possible to autocomplete modified function names?","<p>I find myself often repeating the names of the functions I've edited, in the commit message, and it'd be nice to have autocompletion for the functions I've just changed when writing the commit messasges. </p>

<p>Is it possible to get vim to somehow search through the current commited files and grab the function names, or better yet, only the modified ones?</p>

<p>I'm using gVim7.3 and C#, if that's at all relevant.</p>
","0","541208","0","0"
"15324900","492293","2013-03-10 16:58:50","80","68251","<git><git-commit><commit-message>","Standard to follow when writing git commit messages","<p>I find myself managing very many files (over 60 but below 70) and my commit messages so far follow this pattern:
when I have added something like on <code>layout.css</code>, my commit message is <em>""added something on layout.css file""</em>, and when I remove something, my commit message is <em>""removed something from layout.css file""</em>.</p>

<p>Some files down the line, I look at my commits feed and <em>added...</em> and  <em>removed...</em> messages dominate. Sometimes I don't remember what I removed or what I added in <code>layout.css</code> since I make so many changes at a go and so I struggle to come up with an appropriate commit message.</p>

<p>Is there a standard I should follow to help me come up with my commit messages?</p>
","3","492293","0","0"
"54625473","7344314","2019-02-11 07:08:41","1","787","<git><commit><rebase><git-commit><git-rebase>","Undo git rebase skip on local","<p>I did a <code>git rebase HEAD~3</code> to edit some commit messages, however when I entered the interactive mode, it showed more than my last 3 commit messages. It showed a bunch of other commits. Every time I went on each of these other commits, it warned of a <code>MERGE_CONFLICT</code> and I just did <code>git rebase --skip</code> since these weren't my commits and they were old commits as well. I kept doing <code>git rebase --skip</code> until the rebase completed. I then did <code>git status</code> and it said my branch has diverged from my last commit. I pulled from my last commit, now I have a bunch of conflicts. How do I UNDO everything BEFORE I started this REBASE. I just want to restore my branch to the last commit I pushed. After the rebase was complete, I did not force push yet so everything is still local. I want to undo all this.</p>
","0","7344314","",""
"72569590","9243572","2022-06-10 05:49:05","0","308","<git><git-commit>","Default Merge Commit message templates for all projects in group","<p>Is there a way to make a default merge commit message in all projects including the newly created ones in a group instead of manually changing it per project?</p>
<p>I want my default merge commit message to include my previous commit description/body.</p>
<pre><code>Merge branch '%{source_branch}' into '%{target_branch}'

%{title} - %{description}

%{issues}

See merge request %{reference}
</code></pre>
<p><a href=""https://docs.gitlab.com/ee/user/project/merge_requests/commit_templates.html"" rel=""nofollow noreferrer"">Gitlab Commit message template</a>
This link only tells me to do it by project.</p>
","1","9243572","0","0"
"54646196","5321614","2019-02-12 08:58:24","-1","46","<git><github><git-branch><git-commit>","git returning to a commit and again get all together","<p>I have commits like</p>

<pre><code>12345
12346
12347
</code></pre>

<p>I want to get back tgo <code>12345</code> and work on this I will add new commits <code>23456</code>, <code>23457</code>, <code>23458</code> etc</p>

<p>then I may need to get <code>12345, 12346, 12347 and 23456, 23457, 23458</code> all together</p>

<p>Is this possible, what should be my steps to achieve this?</p>
","3","5321614","",""
"54647396","4116960","2019-02-12 10:02:20","1","5692","<git><github><repository><git-commit>","Git push keeps writing commit with wrong username","<p>I've created a new project on a shared machine and the commits in my repositories are under the wrong username on Git. I've changed the credentials in the credentials manager in windows, I've followed <a href=""https://help.github.com/articles/changing-author-info/"" rel=""nofollow noreferrer"">this guide</a> but the author has not changed, even if when I push it asks me username and password for pushing, and I insert mine. Still, on the repository the author of the commit is not me. I've also tried <a href=""https://stackoverflow.com/questions/41349644/commit-with-wrong-username-to-github"">this solution</a> but still doesn't work.</p>

<p><strong>What else can I try?</strong></p>

<h3>UPDATE</h3>

<p>Steps:<br>
- <code>git commit -m ""message""</code><br>
- <code>git push origin master</code>   </p>

<p>Then it asks for email and password. I insert mine, it pushes correctly and then I go to the repository and see this:</p>

<p><a href=""https://i.stack.imgur.com/xN0QY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xN0QY.png"" alt=""enter image description here""></a>   </p>

<p>After git log I see this:</p>

<p><a href=""https://i.stack.imgur.com/EfPhM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/EfPhM.png"" alt=""enter image description here""></a></p>

<p>It's all mixed up. </p>

<p>In the repository the name is not correct.</p>
","4","4116960","",""
"72575423","4966168","2022-06-10 13:50:04","1","2001","<git><git-commit><gnupg>","gpg skipped KEY No secret key error message when trying to sign a git commit on Windows 10","<p>I followed instructions here: <a href=""https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key"" rel=""nofollow noreferrer"">https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key</a></p>
<p>I did not include a comment. Only my name and email which match my github account.</p>
<p>Then, I set my git config to the following:</p>
<pre><code>[user]
    name = First Last
    email = first.last@awesomecompany.com
    signingkey = ABCDMYKEY12345
[commit]
    gpgsign = true
[gpg]
    program = C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe
</code></pre>
<p><code>gpg --version</code> returns</p>
<pre><code>$ gpg --version
gpg (GnuPG) 2.2.29-unknown
libgcrypt 1.9.3-unknown
</code></pre>
<p>I've run <code>GIT_TRACE=1</code> and returned</p>
<pre><code>$ GIT_TRACE=1 git commit --allow-empty -m &quot;signing&quot;
09:30:10.094197 exec-cmd.c:237          trace: resolved executable dir: C:/Program Files/Git/mingw64/bin
09:30:10.102197 git.c:455               trace: built-in: git commit --allow-empty -m signing
09:30:10.126235 run-command.c:666       trace: run_command: 'C:\Program Files (x86)\GnuPG\bin\gpg.exe' -bsau ABCDMYKEY12345
gpg: skipped &quot;ABCDMYKEY12345&quot;: No secret key
gpg: signing failed: No secret key
error: gpg failed to sign the data
fatal: failed to write commit object
</code></pre>
<p>I've triple-checked for typos. This does not seem like a duplicate of
<a href=""https://stackoverflow.com/questions/37780976/gpg-skipped-xxbdxx4e-secret-key-not-available-gpg-signing-failed-secret-k/42008822#42008822"">gpg: skipped &quot;XXBDXX4E&quot;: secret key not available. gpg: signing failed: secret key not available</a></p>
<p>because my gpg program is correctly set</p>
<p>I've seen this question <a href=""https://stackoverflow.com/questions/55111685/git-doesnt-see-gpg-key-as-secret-even-though-it-is-how-do-i-fix-it/55126589#55126589"">Git doesn&#39;t see gpg key as secret, even though it is, how do I fix it?</a></p>
<p>But I don't understand the gpg2 thing. My gpg version is 2. Why do I need another gpg2 program. Besides, where do I get gpg2 from? Is it supposed to come with Git?</p>
","5","4966168","",""
"54663083","","2019-02-13 05:23:54","1","705","<git><github><git-commit>","Git locally not synced with remote after a ""git reset --hard #commit""","<p>I am new to <code>git</code>. I don't actually use it for any project but just as a storage for all my dotfiles.</p>

<p>I did a <code>git commit</code> and just after that, I realised that was just unnecessary because it was an incomplete change. So, instead of doing another edit, <code>commit</code> and <code>push</code>, I reset the last good commit using <code>git reset --hard #commit_shaN</code> and pushed it to remote with help from here : <a href=""https://stackoverflow.com/questions/1377845/git-reset-hard-and-a-remote-repository"">Git reset --hard and a remote repository</a>. Remote is fine now but locally when I make new changes and try to do new commits, it says :</p>

<pre><code>    On branch master
    Your branch is up to date with 'origin/master'.

    Untracked files:
         blah
         blah
         blah
         blah
         blah
         blah
    nothing added to commit but untracked files present
</code></pre>

<p>I searched the web for help and got this : <a href=""https://stackoverflow.com/questions/33513174/gitnothing-added-to-commit-but-untracked-files-present"">Git:nothing added to commit but untracked files present</a>. As this page says, I added those untracked files to <code>.gitignore</code> with no result. It still gives the same output. Thanks in advance for your help.</p>
","3","","",""
"54684434","7628875","2019-02-14 06:30:55","0","34","<git><repository><commit><git-commit><jgit>","How to list all commits in a repository with its parent info along with lines added and deleted using command line or JGit?","<p>How to list all commits in a repository with its parent info along with lines added and deleted using command line or JGit?</p>
","2","7628875","",""
"72604695","7000617","2022-06-13 14:39:13","1","654","<git><gitlab><git-commit><signature><gnupg>","Git GPG Signing Bad Signature","<p>I am trying to enable gpg commit signing on my mac. I have successfully signed one commit and then tried to do it again and ever since I can't get it to work properly again.
Every time it says Bad Signature even though the KEY ID is the same.</p>
<p>I can normally sign regular text files etc. without problems - git is the only one making such weird exceptions.</p>
<p>Any help is appreciated - Thanks!</p>
<pre class=""lang-bash prettyprint-override""><code>commit 2cce84252649442b2b1700986f969fd70d8d7dbc (HEAD -&gt; move-to-docker)
gpg: Signatur vom Di 14 Jun 07:30:19 2022 CEST
gpg:                mittels EDDSA-Schlüssel C84C8DAA9C25D70F553262EE4584796C0B3C2855
gpg: FALSCHE Signatur von &quot;Nick Wassermann (Root SSH User) &lt;nick.wassermann@mail.at&gt;&quot; [unbekannt]
Author: Nick Wassermann &lt;nick.wassermann@mail.at&gt;
Date:   Tue Jun 14 07:30:19 2022 +0200

    tte

commit 3ad84f737e7d1f42907cb55b11482c7d5558adaf
gpg: Signatur vom Mo 13 Jun 09:23:06 2022 CEST
gpg:                mittels EDDSA-Schlüssel C84C8DAA9C25D70F553262EE4584796C0B3C2855
gpg: Korrekte Signatur von &quot;Nick Wassermann (Root SSH User) &lt;nick.wassermann@mail.at&gt;&quot; [unbekannt]
gpg: WARNUNG: Dieser Schlüssel trägt keine vertrauenswürdige Signatur!
gpg:          Es gibt keinen Hinweis, daß die Signatur wirklich dem vorgeblichen Besitzer gehört.
Haupt-Fingerabdruck  = 90C6 F702 31A1 7582 98B3  C94C 1779 A12E 703B D538
Unter-Fingerabdruck  = C84C 8DAA 9C25 D70F 5532  62EE 4584 796C 0B3C 2855
Author: Nick Wassermann &lt;nick.wassermann@mail.at&gt;
Date:   Mon Jun 13 09:23:06 2022 +0200

    added comment
</code></pre>
","3","7000617","0","0"
"54766962","6559962","2019-02-19 12:59:37","0","4724","<git><git-commit>","git Commit failed","<p>I am getting following error during <code>git</code> <code>commit</code></p>

<blockquote>
  <p>Commit failed with error          0 files committed, 3 files failed to
  commit:           Unable to create
  'C:/xampp/htdocs/project/.git/index.lock': File exists</p>
  
  <p>Another git process seems to be running in this repository, e.g.
      an editor opened by 'git commit'. Please make sure all processes
      are terminated then try again. If it still fails, a git process
      may have crashed in this repository earlier:
      remove the file manually to continue.</p>
</blockquote>

<p>I closed all open terminal and tried again and again, but could not get success.</p>

<p>Thanks for suggesion.</p>
","3","6559962","",""
"54792137","5280507","2019-02-20 17:27:37","0","269","<git><gitlab><git-commit><git-push><git-revert>","Changes in local file lost due to it synching with out of date remote git repository","<p>I tried to push a commit to my gitlab repo through the following commands (I'll describe output as I go):<br>
<code>git checkout origin</code>  no branch called origin<br>
<code>git checkout -b origin</code><br>
<code>git status</code><br>
<code>git add README.md</code><br>
<code>git add src/example.ipynb</code><br>
<code>git add src/.ipynb_checkpoints/</code><br>
<code>git commit -m notebook update</code><br>
<code>git push origin master</code>  this is where I realized I was probably on detached head and switched to master<br>
<code>git checkout master</code><br>
<code>git status</code> still not showing changes<br>
<code>git log -1</code><br>
<code>git checkout master</code><br>
<code>git reset --hard 44263cc6fd2bd60be54da344a6d344eb3c42a03a</code><br>
<code>git push origin master</code></p>

<p>When I noticed my local notebook file reverted back to an old version I tried to revert that last published commit by doing<br>
<code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative --all</code><br>
<code>git revert 407302e</code></p>

<p>Then I got the following error from running git revert: </p>

<p><code>error: your local changes would be overwritten by revert.</code><br>
<code>hint: commit your changes or stash them to proceed.</code><br>
<code>fatal: revert failed</code></p>

<p>So as you can see a series of bad decisions got me here, how do I recover the changes in my file? Thanks</p>
","2","5280507","",""
"54795582","5350521","2019-02-20 21:35:07","2","120","<git><github><bitbucket><git-commit>","How to handle temporary saves on GIT?","<p>I have been playing around with GIT and I am getting the hang of it. I do have a small question relating to temporary saves. Say I create a feature branch off of the main branch and do some implementation on the feature branch. So at the end of the day I want to just save the implementation on the feature branch, do I just commit and push it to the remote feature repository or do I create another branch for the temporary save?</p>

<p>Could someone please shed some light on it.</p>

<p>Thank you. </p>
","3","5350521","",""
"54834477","6492006","2019-02-22 20:10:56","4","2751","<git><git-commit><revert>","git - How to undo changes to a locally committed file","<p>I did following, all while on my local <code>BranchA</code>:</p>

<ol>
<li>Modify <code>FileA</code> (by mistake)</li>
<li><code>git add FileA</code> </li>
<li><code>git commit -m ""Modified FileA""</code></li>
</ol>

<p>So, <code>FileA</code> is in my local commit (never pushed to remote) on my local branch <code>BranchA</code> (also never pushed to remote).</p>

<p>How do I revert changes to FileA?</p>

<p><strong>UPDATE AND HOW I SOLVED IT</strong></p>

<p>I undoed changes to FileA from SourceTree instead from git as I realized it is simpler for me. </p>

<p>To do so, in SourceTree, r-c on commited file FileA > ""Log Select ..."" > select the previous commit (the one before yours) > r-c on it and choose ""Reset to this commit"". That did the job but thank you all</p>
","1","6492006","",""
"72644080","9852082","2022-06-16 10:04:26","0","139","<file><azure-devops><rename><filenames><git-commit>","How could I find out the old file name in Azure DevOps?","<p>I moved a file one folder up. Now in Azure DevOps in commit content I see <code>[rename]</code> written next to the file, but I do not see how the file name was changed (i.e. I do not see the old file name). Is there any way I could find this out?</p>
","0","9852082","",""
"54869873","6225765","2019-02-25 15:45:40","2","635","<git><perl><githooks><git-commit>","Perl -- commit-msg hook doesn't stop the commit when exiting 1","<p><strong>Context :</strong> </p>

<p>I am using some git-hooks to apply automatically some formatting options on Perl scripts. On a pre-commit hook I clean and reformat my scripts using perltidy. I want to check what the user put on the commit message and if it's empty or it's equivalent to ""abort"", we want to prevent the commit and undo the formatting modifications.</p>

<p><strong>Problem :</strong></p>

<p>I removed the .sample extension of the git hook and made it executable using <code>chmod u+x .git/hooks/commit-msg</code> but when my script <code>exit 1</code> the commit isn't stop like it should.</p>

<blockquote>
  <p><strong>commit-msg</strong></p>
  
  <p>This hook is invoked by git-commit[1] and git-merge[1], and can be bypassed with the --no-verify option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.</p>
</blockquote>

<p>source : <a href=""https://git-scm.com/docs/githooks#_commit_msg"" rel=""nofollow noreferrer"">https://git-scm.com/docs/githooks#_commit_msg</a></p>

<pre><code>#!/usr/bin/perl -w

use strict;
use warnings;

# Get the path to the files in which we have the commit message
my $commit_file = $ARGV[0];

# Read the file and extract the commit message (lines which don't start with #) 
my @commit_msg;
open(my $fh, ""&lt;"", ""$commit_file"");
while (my $line = &lt;$fh&gt;) {
    if (substr($line, 0, 1) ne ""#"") {
        push(@commit_msg, $line);
    }
}

# Check the message isn't empty or we don't have a ""abort"" line
my $boolean = 0;
foreach my $line (@commit_msg) {
    if ($line ne ""abort"" &amp;&amp; $line ne """") {
        $boolean = 1;
    }
}

if ($boolean == 0) {
    print ""We should commit the modifications\n"";
    exit 0; # Don't prevent commit
}
else {
    print ""We shouldn't commit the modifications\n"";
    exit 1; # Prevent commit
}
</code></pre>

<p>The script is executable and works ! If I enter ""abort"" when I commit some stuff, it prints ""We shouldn't commit the modifications"" but commit them discarding the exit 1...</p>

<p>I hope someone will be able to help ! I am new with git-hook and can't find a solution. Perhaps I miss something on Stackoverflow but I didn't find a post answering this issue.</p>

<p>Best,</p>

<p>Antoine</p>

<p><strong>Edit :</strong>
 I don't commit using : <code>--no-verify</code></p>
","15","6225765","",""
"72652728","12915108","2022-06-16 23:01:48","1","73","<git><github><repository><git-commit>","Remove old commit preserving changes","<p>I started editing a project downloaded from a <a href=""https://glitch.com/"" rel=""nofollow noreferrer"">glitch</a> repository I played around for a little bit. A lot of automatic commits were done before I downloaded the project and continued editing it locally. The issue is that the automatic commits probably contain sensitive information (like my phone number or a url with an access token) I don't want showing up on the repository, plus it makes the project look a bit messy.</p>
<p>I want to keep <code>749bcc4</code> and later and delete <code>cd1ee76</code> and earlier commits from the repo without affecting the newer ones.</p>
<p>My <code>git log</code> now looks like this:</p>
<pre><code>&lt;17 more recent commits made by me&gt;
4dea670 (Supress logs during tests, 2022-06-04)
8915b33 (Webhook subsciption tests, 2022-06-04)
f189b0b (Functioning test template with chai-http added, 2022-06-04)
749bcc4 (Replies automatically to every message received, 2022-06-04) &lt;-- I pickup the project and get serious about it
cd1ee76 (🌴⛩ Checkpoint ./app.js:44684210/652, 2022-05-12) &lt;-- Automatic checkpoint (I am technically not the author of these)
b8531dc (👮🍖 Checkpoint ./README.md:44684210/2364 ./app.js:44684210/12304, 2022-05-11)
a92f72a (🕹☃️ Checkpoint ./package.json:44684210/231 ./app.js:44684210/95 ./README.md:44684210/164, 2022-05-11)
11bb69b (🏟🏉 Checkpoint ./app.js:44684210/242, 2022-05-11)
8482190 (❣️🎓 Checkpoint ./README.md:44684210/16, 2022-05-11)
7123b4c (⛹🏥 Checkpoint ./package.json:44684210/3241, 2022-05-11)
&lt;And like 50 more checkpoint commits&gt;
</code></pre>
<p>Is there any way to remove them and then forcing a push to the remote repo? I am working alone with that remote (that might change soon) so the push shouldn't be problematic for anyone.</p>
","0","12915108","0","0"
"54920799","7316675","2019-02-28 07:51:19","0","63","<git-commit><macos-mojave><github-desktop>","Uses previously logged in user's name on GitHub DeskTop OS X","<p>I was logged in with my first User say A.</p>

<p>I signed out from that account and logged in with my User B. Now all my commits are being done with name A only.</p>

<p>All my preferences are set for User B. Even .gitignore file is set with User B. So what changes I need to do to get this working.</p>
","0","7316675","",""
"54942480","3317808","2019-03-01 10:17:28","0","448","<git><jenkins><jenkins-pipeline><git-commit><sdlc>","How git tag can add more meaning to artifact name?","<p>Currently we give artifact name as <code>releasenumber-sprintnumber-jenkinsbuildnumber-SNAPSHOT.jar</code></p>

<p>But we are planning to map every commit tag to the version of artifact generated from build.</p>

<p>So, artifact name will be <code>releasenumber-gittag-SNAPSHOT.jar</code></p>

<hr>

<p>So, To make it more helpful at build-QA-release phase of pipelines,</p>

<p>what should git tag look like, when developer tags the commit? </p>

<p>These artifact names will be part of <code>build.gradle</code> or <code>pom.xml</code> in java build as dependencies.</p>
","0","3317808","",""
"47952372","5367712","2017-12-23 12:08:51","1","919","<git><github><git-commit>","Commits not showing up on github Contributions,although they are being shown in the repo.Any Idea why?","<p>I am new to github and I have been playing around with git to learn its functionalities. The problem is when I do git push after git commit ,the commits do show up when I go to my github profile and click on my repo but they fail to show on my contributions graph.<a href=""https://i.stack.imgur.com/Q80in.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Q80in.png"" alt=""enter image description here""></a></p>

<p>Above is the image of the three commits I made. However they don't how up on the contributions graph.My username as shown above is harsh244 and my repo too is shown.It has been forked from someone else.</p>
","2","5367712","",""
"8649507","537031","2011-12-27 21:31:53","27","16360","<git><svn><git-commit>","Does SVN have an equivalent to git's commit (without the push)?","<p>Basically I want to stage my changes without pushing them and without switching branches. This allows me to do some work, <code>commit</code> it when I am at a good stopping point, and then continue work in the same branch.  If I mess up, I can <code>revert</code>, if I add new changes, I can just <code>commit</code> again.</p>

<p>I realize I can create a feature branch in SVN to track these changes, but again, I'd like to do so while staying in the same branch/trunk.  Even the equivalent of <code>git stash</code> would suffice, although it seems SVN doesn't have that feature.</p>
","1","537031","0","0"
"63869103","8584331","2020-09-13 09:19:47","1","173","<git><github><git-merge><git-commit>","git: how to get/merge old commit from same branch(ie master)?","<p>I am using git using and want to get code from previous commits to the head. I have figured out a way to do this but that seems more like a hack, I am wondering if there is a better way of doing it.</p>
<p>The method I used is as follows: I involve going to that commit, branching, making changes to desired files, committing it, checking out to master, and mering it the new branch created.</p>
<ol>
<li>checkout to </li>
<li>creating a branch</li>
<li>making inconsequential changes to the files</li>
<li>committing them</li>
<li>checking out master</li>
<li>merging the new branch with master</li>
</ol>
","3","8584331","0","0"
"45376514","6204900","2017-07-28 14:51:15","0","3789","<git><version-control><notepad++><commit><git-commit>","How to separate title from body in a git commit message using Notepad++?","<p>I am using <code>git</code> on windows and when I use the <code>commit</code> command in the command prompt, my Notepad++ opens up and asks me to put in a commit message as follows:</p>

<pre><code># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
</code></pre>

<p>This is great, but I want to be able to separate the message title from its body. When I write my commit message above the #'s, it is sent as if I used the <code>commit -m</code> command, that is, it contains only a title.</p>

<p>Can someone suggest the proper way to be able to separate the title from the body in a commit message using Notepad++?</p>

<p><strong>Edit</strong>: this question is different from other questions about separating body from title in commit messages, because the other questions ask how to do it from the command line, whereas I ask how to do it with Notepad++
.</p>
","1","6204900","0","0"
"63876240","10614354","2020-09-13 22:43:42","1","206","<github><git-commit><git>","How to remove commits from history for the files that no longer exist in the repo","<p>So my Github repo contains many projects over the years, and now there are only a couple remaining. Is it possible to clean my commit history so that instead of thousands of commits about files/projects that no longer exist in this repo, down to maybe a hundred commits that pertain to the files in the couple of projects remaining.
Thanks.</p>
","2","10614354","0","0"
"63890145","1029146","2020-09-14 18:42:56","0","82","<git><git-commit><git-history>","Is there a syntax for referring to the commit which followed a commit in branch history?","<p>If I have a specific hash, call it <code>A</code>, I can get to the parent by <code>A^</code>. But is there a way to get to the commit that followed <code>A</code> in the branch history? Something like <code>A+1</code>, such that <code>A</code> is <code>(A+1)^</code>? I want to check out the commit after the one I have the hash for, and then the one after that, and so on, to inspect them. But they're really buried. Any easy way to check them out given a reference hash other than searching git log output?</p>
","5","1029146","",""
"63894037","8802979","2020-09-15 02:04:52","0","77","<repository><git-commit><git>","How to save all versions of a project build with git in different repositories","<p>I'm a beginner in git, I have learned the basics of git and started working on my web project with git.
Now after a month working on it, I have created more than 10 versions and with each version, I have had a git commit.</p>
<p><strong>And now wanted to save all my versions in different repositories -like every folder containing my project progress till the subsequent commit.</strong></p>
<p>I've googled it but not got any relevant/working solution.
So if anyone has the answer on how to do or is there any script with which I could get all my versions in different repository.. <strong>pls help!</strong></p>
","2","8802979","0","0"
"8699372","72583","2012-01-02 09:46:01","8","3209","<git><code-formatting><legacy><git-commit>","What is a good way to manage cleanup commits in git for a legacy project?","<p>I have a large codebase, where almost every single file isn't aligned properly, has bad spacing between variables or methods, or just generally ugly code.</p>

<p>I'd like to make it better as I work with it, but fixing things like indentation makes the commit history pretty ugly. </p>

<p>I'm not talking about small indentation issues where a line is one space off, I'm talking about something like</p>

<pre><code> class Xyz
def foo
end

   def bar
  @something
end
   end
</code></pre>

<p>What's a good way to clean up code like this, while keeping my history relevant? Should I just auto-align everything at once and do one huge commit?</p>
","0","72583","0","0"
"63905223","4352738","2020-09-15 15:34:01","-1","71","<git><github><git-commit>","For already git tracked file, can we commit changes without adding them in GIT","<p>I have file which tracked by GIT in my local repository. Now, if I make changes in that file, standard process is as follows.</p>
<p>e.g. for file demo.txt,</p>
<pre><code>git add demo.txt
git commit -m &quot;changes done&quot; demo.txt
</code></pre>
<p>HOWEVER,
I am able to directly commit those changes without staging them.
e.g. for GIt tracked file demo.txt</p>
<pre><code>git commit -m &quot;changes done&quot; demo.txt 
</code></pre>
<p>this will commit changes.</p>
<p>Do we have any explanation for this</p>
","0","4352738","0","0"
"45416049","7870791","2017-07-31 12:32:31","21","19068","<bash><git><githooks><git-commit>","How to make a git pre-commit hook that checks the commit message?","<p>I have a git commit hook script, that checks the commit message, and if the message does not contain the word ""updated"", the script should reject the commit. </p>

<pre><code>#!/bin/bash
read -p ""Enter a commit message: "" message

if [[ ${message} != *""updated""* ]];then
  echo ""Your commit message must contain the word 'updated'""
  else
  git commit -m ""$message""
  fi
</code></pre>

<p>How to make this hook automatically execute if I try to push some files in my local repo using the command</p>

<pre><code>git commit -m ""updated:something""
</code></pre>

<p>My idea is to make it not like ""run this script to do commit"", but rather when you open the console and try to make a commit and entering the commit message, the script will check your commit message automatically and pass it or reject it. </p>
","2","7870791","0","0"
"8719951","460274","2012-01-03 23:09:17","3","1735","<git><heroku><git-rebase><git-commit>","How do I rebase git history after several pushes, then push the updated history?","<p>Often I work with heroku, and near the end of a project I have several small commits to fix some unexpected bugs. This results in 10 small diff commits that I wish to rebase into one. Problem is, the history has already been pushed. How do I reconcile these things?</p>
","4","460274","0","0"
"63913881","12110453","2020-09-16 05:49:33","0","195","<git><github><visual-studio-code><git-commit>","How to use Github with VSC","<p>I am a mac user new to github and visual studio code, so I apologize if I missed something obvious.</p>
<p>My problem is that after reading the official docs, I cannot figure out how to actual get github to work with Visual Studio Code.</p>
<p>First of all, I have repositories set up on github, but when I try to access them, this happens:
<a href=""https://i.stack.imgur.com/cJkRg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/cJkRg.png"" alt=""enter image description here"" /></a></p>
<p>I'm not sure what I'm doing wrong. Could it be perhaps caused by the fact that my repositories on Github are private?</p>
<p>So I ended up manually inserting the link and cloning the repository.</p>
<p>In my new repository, I created a new file called testfile, and wrote a message in it. I would like to commit this to github.
When I click on the git button this happens:</p>
<p><a href=""https://i.stack.imgur.com/dz1xX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dz1xX.png"" alt=""enter image description here"" /></a></p>
<p>I am confused specifically by what exactly Untracked means. Again, I apologize if this sounds obvious to you. I am new to github.
After looking at the docs, I realized that I have to go to this location:</p>
<p><a href=""https://i.stack.imgur.com/oz722.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oz722.png"" alt=""enter image description here"" /></a></p>
<p>I still cannot find how to commit my local repository. I tried searching for the keyword &quot;commit&quot; on the <a href=""https://code.visualstudio.com/docs/editor/github"" rel=""nofollow noreferrer"">official docs</a>, but didn't find any ways to do so. I also tried watching various youtube videos on the topic, but all the videos involve clicking on a check mark</p>
<p><a href=""https://i.stack.imgur.com/N5mWD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/N5mWD.png"" alt=""enter image description here"" /></a></p>
<p>that I cannot find in my version of VSC.</p>
<p>Additionally, I tried pulling changes I made to my repository elsewhere, but after clicking on the &quot;+&quot; button next to pull requests, I am stuck doing this:</p>
<p><a href=""https://i.stack.imgur.com/ymxb2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ymxb2.png"" alt=""enter image description here"" /></a></p>
<p>Any help or links to resources would be appreciated, thank you!</p>
","6","12110453","0","0"
"63924032","10581944","2020-09-16 16:09:55","4","6381","<git><github><gitlab><git-commit><git-revert>","How to undo a commit after a failed push?","<p>I was going to test something in dev branch (just a version number 0.1 --&gt; 0.2), so I committed the change but I don't have the permission to push it to dev directly,then I created a feature branch and I found the number is already 0.2, then I changed it to 0.3 and pushed this branch, then created a merge request to merge it into dev.</p>
<p>I'm new to git, just wondering how can I prevent this kind of messy in the future? How can I revert my commit after the push being rejected?</p>
","3","10581944","",""
"9094488","877866","2012-02-01 10:45:53","1","723","<git><git-commit>","git commit error message","<p>When I write a command line:</p>

<pre><code>git commit -m ™Initial commit™
</code></pre>

<p>I got an error:</p>

<pre><code>error: pathspec '""commit\342\204\242""' did not match any file(s) known to git.
</code></pre>

<p>How can i fix it?</p>
","0","877866","",""
"64205426","13039283","2020-10-05 08:54:37","0","48","<git><git-commit>","How find all commits which modified custom file or date interval? GIT","<p>I have deleted my local branch without pushing about 3 months ago, I do not know how to find it, but I know that there should be a commit which modifies x.cs file. How can I find all commits which touch that file or date interval?</p>
","2","13039283","",""
"64212128","140053","2020-10-05 15:57:38","1","251","<git><git-branch><git-commit>","List commits of a specific merge-commit - children only","<p>How can I list the commits of a specific merge-commit 845884.</p>
<p>Here, for instance, I only want commits 1, 2, 3 and <strong>only them</strong></p>
<pre><code>*   845884... Merged branch xxxx
|\
| * 68daa7... commit 3
* | a58ec2... commit from master
| |
| * 87da50... commit 2
| |
| * 5e62f9... commit 1
* | 766e1b... commit from master
|/
* 4b8f227
</code></pre>
","9","140053","",""
"45722474","3885376","2017-08-16 20:30:15","1","1112","<bitbucket><git-commit><bitbucket-cloud>","Commit new file in Bitbucket Cloud generates ""We had trouble committing your changes""","<p>I created a new file in Bitbucket Cloud (using the web interface - bitbucket.org).</p>

<p>I followed the next steps:</p>

<ul>
<li>copied &amp; pasted a value as file name</li>
<li>added a file content</li>
<li>clicked on Commit</li>
<li>changed the default commit message</li>
<li>Commit</li>
</ul>

<p>and I got the following message:</p>

<blockquote>
  <p>We had trouble committing your changes. </p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/NwPIN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NwPIN.png"" alt=""Commit changes - trouble""></a></p>

<p>How can I solve this?</p>
","2","3885376","0","0"
"45723305","5162426","2017-08-16 21:29:20","2","891","<git><git-commit><git-push>","How to sync only my latest commit with git?","<p>My local repository is ahead of remote by 2 commits - commit A and commit B. </p>

<p>Commit A was made first, and contains a very large file by accident, which is too large to stage and is causing a failure on <code>push</code>.  </p>

<p>So, I deleted the file, untracked it, and then made commit B. However, I cannot <code>push</code> commit B, because then both commit A and B are attempting to <code>push</code>, which leads to commit A causing the same failure before B can be pushed.</p>

<p>Is there any way to tell git to ignore the first of these two commits? Or to ""delete"" commit A?</p>
","1","5162426","",""
"45725154","1944451","2017-08-17 01:09:24","0","976","<git><github><gitignore><git-commit><git-add>","git add . or -A is adding .gitignore file in commit list, how to get ridoff this?","<p>If I change a bunch of files and then run command <code>git add .</code> it includes all the files along with <code>.gitignore</code> in my commit list.</p>

<p>If I use <code>git rm --chached .gitignore</code> then it is showing as <code>deleted: .gitignore</code> and <code>git add .</code> is adding the deleted <code>.gitignore</code> file</p>

<p>How can I IGNORE <code>.gitignore</code> itself so that <code>git add .</code> command adds only my changes in actual files or directories. </p>
","1","1944451","",""
"45726814","4077294","2017-08-17 04:52:02","10","2372","<git><github><version-control><diff><git-commit>","How do I copy part of a commit diff in GitHub without the pluses and the minuses?","<p>It's very often that I need to copy-and-paste part of a GitHub commit. Whenever I do this, however, I find myself manually going down each line and hitting <code>Delete</code> to strip all of the +/- signs. </p>

<p>Is there a more convenient way to copy part of a GitHub commit to the clipboard?<br>
Suggestions involving Chrome extensions/your personal projects are welcome.</p>
","1","4077294","0","0"
"45740533","4891717","2017-08-17 16:29:38","1","20","<git><logging><project><git-commit>","Is possible to copy only the log of commits to another project with git? What about discarding old changes to decrease the size of the .git folder?","<p>I had many binary files in my git project. Due to this and the changes I have made, I had a huge <code>.git</code> folder. So I would like to create another project without these binary files and keep the logs and dates of all the commits.</p>

<p>I won't need to come back to a previous version of the project. So I don't care if I lose all the changes I've made because I will keep the old project if I need to check anything.</p>

<p>Is possible to achieve this? If not is there a way to decrease the size of the <code>.git</code> folder discarding old changes?</p>
","2","4891717","",""
"27187878","1528712","2014-11-28 11:40:34","0","85","<git><github><git-commit>","How to go back to the status of a commit of a repository in git?","<p>For instance, I got a link:</p>

<pre><code>https://github.com/git/git/tree/e83c5163316f89bfbde7d9ab23ca2e25604af290
</code></pre>

<p>that Github page lists all the files of the repo in the specific commit, but it has no branch or tag, how can I use something like <code>git checkout ...</code> to switch to the status so I can view all the files in my code editor?</p>
","0","1528712","",""
"27188195","2936491","2014-11-28 11:59:29","1","1560","<github><git-commit><git-config><git>","Change git configuration username and email permanently","<p>I have changed the username and email in git config via </p>

<p><a href=""https://help.github.com/articles/setting-your-email-in-git/"" rel=""nofollow"">https://help.github.com/articles/setting-your-email-in-git/</a></p>

<p>When I check the config file with git config --global user.name or email it is showing the correct email and username.</p>

<p>The commits in my project are linked to my github account while in the home page of github it is shown as previous_user pushed to master.</p>

<p>Why are commits linked to me while the pushes are linked to previous user.</p>

<p>I will be really very thankful if someone helps.</p>
","3","2936491","",""
"45762553","2924482","2017-08-18 18:02:14","5","4123","<github><gitlab><git-commit><git>","GIT: Creating new branch with reverted changes","<p>Accidentally I merge branch on my master branch but I had to revert the changes. I want to create a new branch and pick all the changes I had to revert.</p>

<p>Any of you knows how can I create the branch with all my previews commits?</p>

<p>I'll really appreciate your help</p>
","2","2924482","0","0"
"27189973","2936491","2014-11-28 13:42:07","0","390","<github><git-commit><git-config><git>","Commits on github are linked to right user while pushes are linked to wrong user","<p><code>Commits</code>(for new or old branch) done after changing the username and email are linked to me while <code>Pushes</code>(for both old and new branch) are for old user. </p>

<p>Moreover if I setup a new project or anything new as generating ssh keys I get the message in terminal as previous user. How do I remove that previous user from my system so that everything done related to <code>github</code> from my system should be related to my account.</p>

<p>I changed the <code>config file</code> through this link , it is also showing the correct username and email
through <code>git config --global user.name</code> or <code>git config --global user.email</code>.</p>

<p><a href=""https://help.github.com/articles/setting-your-email-in-git/"" rel=""nofollow"">https://help.github.com/articles/setting-your-email-in-git/</a></p>
","0","2936491","0","0"
"46065581","4343984","2017-09-06 01:43:23","-2","3143","<git><git-commit><git-push><git-pull><git-add>","What happens when user does ""git push"" before ""git add"" and ""git commit""?","<p>I was working on a project made some changes in my code (in Itellij IDE) and by mistake I did below two steps in my terminal and I saw some changes went into the main respository (not my changes or anything I had worked previously).
Does anyone know why it did it ?</p>

<p>Note:
Changes that were pushed were not my code.</p>

<ol>
<li>git pull ( all-upto-date, I received) from my terminal</li>
<li><p>git push (rather than ""git add"" and ""git commit"") from my terminal</p>

<ul>
<li>Adding additional information (<strong>edited</strong>)
Yes, I had some changes in my local repository before I did a git push. But when I did the mistake of ""git push"" none of my local committed changes were pushed but rather someone else code was pushed which I had pulled.</li>
</ul></li>
</ol>

<p>I could not understand why git did that and thought of asking a question here to understand.</p>

<p>The question was asked to know possible cause without influencing my view on the answer.</p>
","3","4343984","",""
"46071838","69742","2017-09-06 09:40:54","1","76","<git><github><git-merge><git-commit>","Commit is in git tree, but does not appeared to be applied to code","<p>So I'm trying to figure out a weird issue where a commit was made, merged into our master branch, but then in the following commit the code tied to that commit appears to just disappear. The commit hash is <code>4516ce019</code> and on <a href=""https://github.com/qtumproject/qtum/commits/master?after=5a84ee02e6e948d4222fe3953d97568ee8d692d8+349"" rel=""nofollow noreferrer"">github</a> the commit is still on the tree, as well as on my local git branch. Excerpt from git log on the master branch:</p>

<pre><code>commit 02659934ce32a4e700e1a7116685933e40a58b7f
Author: Jordan Earls &lt;earlz@earlz.net&gt;
Date:   Thu Jun 29 18:50:22 2017 -0400

    Add RPC commands gethexaddress and fromhexaddress

    These RPC commands can be used to convert to and from base58 addressses
    to hex addresses as used in smart contracts

commit 2c15f54789ab4f4e6d3b735aa6849111b5c9299d
Merge: 14c08352c 4516ce019
Author: qtum-neil &lt;neil@qtum.org&gt;
Date:   Wed Jun 28 22:52:20 2017 +0000

    Merge pull request #213 from qtumproject/earlz/add-block-author

    Change block author to be 2nd vout/2nd tx for PoS
</code></pre>

<p>If you look at <a href=""https://github.com/qtumproject/qtum/blame/2c15f54789ab4f4e6d3b735aa6849111b5c9299d/src/validation.cpp#L2093"" rel=""nofollow noreferrer"">git blame</a> on the commit itself, things seem correct, the code is there. However, the commit that follows it on the master branch has a completely different <a href=""https://github.com/qtumproject/qtum/blame/ed22562236c7c7517b717f0c131ad30f712eaa4d/src/validation.cpp#L2093"" rel=""nofollow noreferrer"">git blame</a> as if the commit never existed. (saying that code was modified 5 months ago, rather than 2 months ago). </p>

<p>What exactly happened here? I have a feeling it's a merge conflict gone bad, but even that would show up in the recent merges and/or git blame. I'm not able to reproduce this, and we have never force-pushed to this branch after this commit (we did before when we were setting things up). </p>

<p>Does anyone have any guidance on how this is possible, and how to pinpoint exactly where things went wrong? This issue introduced a minor security vulnerability in our codebase and so it's important to understand why this happened; the fix of course is to just trivially do a cherry-pick to pull this commit back in. </p>

<p>EDIT: Using <code>git fsck --unreachable --no-reflog</code> reveals no orphaned commits, so my only hunch of a merge leaving the commit behind appears to not be the case</p>
","1","69742","",""
"46084890","240564","2017-09-06 21:53:10","5","4463","<git><git-merge><rebase><git-commit>","update branch without commits","<p>Some time ago I created branch from development branch and actually I did nothing with it, just one commit editing comment.</p>

<p>Now I want to start to work with this branch, but I want to update it with commits from development.</p>

<p>Actually I can just drop it and create branch again, but I'm interested what happened if I do merge or rebase with development.</p>

<p>Because this branch practically without commits, I suppose that there is no difference between merge and rebase. Am I right?</p>

<p>And what happened if I do in other direction first: merge development branch with this branch first?</p>
","1","240564","",""
"46089990","4462399","2017-09-07 07:09:17","1","465","<bitbucket><branching-and-merging><git-commit>","How push approved commits from one branch to another branch in bitbucket","<p>I have two branches in bitbucket and I want to push only some commits (which are approved by me) from one branch to another branch which is a master branch.
Can someone explain to me how I can do it in the bitbucket environment?</p>

<p>Thanks in advance.</p>
","0","4462399","0","0"
"46092105","4411491","2017-09-07 08:59:12","2","163","<git><git-commit><fifo>","How to push/pull Git commits through a pair of fifos?","<p>I would like to know how to use a pair of fifos as a means for exchanging commits between Git repository clones.</p>

<p>git-remote-fd documents how to use this from a client's perspective, but does not give any example how to set up the associated server part.</p>

<p>So far, I have tried the following:</p>

<pre><code># Prepare repos.
git init a
(cd a &amp;&amp; echo one &gt; file1 &amp;&amp; git add file1 &amp;&amp; git commit -m first)
git clone a b
(cd a &amp;&amp; echo two &gt; file2 &amp;&amp; git add file2 &amp;&amp; git commit -m second)
mkfifo ab &amp;&amp; mkfifo ba
# Now I want to push from a to b via the fifos
(cd a &amp;&amp; git push fd::8,9 master) 8&lt; ba 9&gt; ab &amp;
(cd b &amp;&amp; git pull fd::9,8 master) 8&gt; ba 9&lt; ab
</code></pre>

<p>No luck, though. The fifos obviously block. The commands hang and never complete.</p>

<p>I guess ""git push"" is not the right command for the server part, and ""git send-pack"" or ""git upload-pack"" would be more appropriate. But I have a hard time understanding how to actually use both commands.</p>

<p>Any ideas?</p>
","8","4411491","0","0"
"27535789","316408","2014-12-17 22:10:29","4","2042","<git-commit><git><git-stage>","GIT stage and commit only files with a certain file ending","<p>I have tons of modified files, and a good 2/3s of the files are images that I don't care much about, but I still want to commit them.
For the rest I need to really look hard at the changes. To minimize the files I need to look at I want to only stage .png and .jpg and .gif files and commit them (cutting down the background noise in order to look at the beef).</p>

<p>Having said that...</p>

<p><em>How would you stage and commit only files with these file endings without adding each file separately?</em></p>

<p>Edit:</p>

<p><strong>Files are modified</strong></p>

<p><strong>Directory structure is not flat</strong></p>

<p>I am overwriting a WP Theme that I have highly customized and there is a security update I need to apply</p>
","0","316408","",""
"46111570","5967828","2017-09-08 08:04:17","4","1486","<git><version><git-commit><semantic-versioning>","How to increment a version depending on the commit history since last tag?","<p>Incrementing a version by SemVer might be a matter of taste but surely it has its boundaries which I couldn't find by research. I thought about a way to increment my version depending on the git commit history since the last tag. Please verify my statement or provide me with alternatives.</p>

<h2>Given</h2>

<ul>
<li><strong>last-tag</strong>: v0.0.1</li>
<li><strong>master</strong>: master branch of the git history</li>
<li><strong>release</strong>: release branch of the git history</li>
<li><strong>B</strong>: Breaking-Change/Major</li>
<li><strong>M</strong>: Minor Change</li>
<li><strong>F</strong>: Fix/Patch</li>
</ul>

<h2>Example #1</h2>

<pre><code>     v0.0.1         (v0.1.0)  (v0.1.1)   v0.1.1
master  o--o--------------------------------o-----&gt;
release     \______________________________/
              |      |  |         |
              F      M  M         F
              1      1  2         2
</code></pre>

<p>The commit history holds two fixes (F) and two minor changes (M). Everything before the <strong>second</strong> minor change (M2) is considered to be grouped as a minor change because there isn't any higher change, like a breaking change (B), before it.</p>

<blockquote>
  <p>Here is where I add +1 to the minor version: <strong>v.0.1.0</strong></p>
</blockquote>

<p>However <strong>after</strong> the <em>last highest</em> change (M2) there is a fix change (F2). This one is considered as a patch change depending on the last minor change (v0.1.0). </p>

<blockquote>
  <p>Therefore this fix change will increment the patch version by 1: <strong>v0.1.1</strong></p>
</blockquote>

<pre><code>     v0.0.1   (v1.0.0)  (v1.1.0)  (v1.1.1)        v1.1.1
master  o--o------------------------------------------o-----&gt;
release     \________________________________________/
              |   |  |      |         |
              F   B  M      M         F
              1   1  1      2         2
</code></pre>

<p>Another example where a breaking change (B1) is dominating as the highest version. However all following version still depend on that breaking change and are allowed to increment because of their semantic value for the version.</p>

<blockquote>
  <p>First the major change will increment to <strong>v1.0.0</strong> and grouping both minor changes (M1 &amp; M2) to one minor change increment will result in <strong>v1.1.0</strong>. In the end there is still a fix/patch change left depending on either the minor changes (M1 &amp; M2) or the major/breaking change (B1). This will increment the patch version by 1 to finally: <strong>v1.1.1</strong></p>
</blockquote>

<h2>Example #2</h2>

<pre><code>     v0.0.1         (v0.1.0)             v0.1.0
master  o--o--------------------------------o-----&gt;
release     \______________________________/
              |      |  |         |
              F      M  M         F
              1      1  2         2
</code></pre>

<p>In this case only the highest change will be considered as the one who does affect the version number regardless of the chronological order of the changes.</p>

<blockquote>
  <p>The highest change is a minor change (M1 | M2) so the version will be incremented by 1: <strong>v0.1.0</strong>
  It does not matter if the fix (F2) afterwards semantically depends on the last minor change (M2) even tho it might have patched/fixed a feature added by the last minor change (M2)</p>
</blockquote>

<pre><code>     v0.0.1   (v1.0.0)                  v1.0.0
master  o--o-------------------------------o-----&gt;
release     \_____________________________/
              |   |   |  |         |
              F   B   M  M         F
              1   1   1  2         2
</code></pre>

<p>Another example where a breaking change (B1) would dominate all other versions since it's the highest/most relevant change.</p>

<h2>Question</h2>

<p>Is there a best practice on how to increment versions depending on the change types? Are both ways valid or is one of them the convention of <strong>SemVer</strong>?</p>
","0","5967828","0","0"
"46125925","","2017-09-08 23:57:08","1","101","<git><github><commit><git-commit>","Withdrawal of last GitHub committings","<p>I sent on my GitHub two obligations commits. <a href=""https://zapodaj.net/2ba0d2207c251.png.html"" rel=""nofollow noreferrer"">https://zapodaj.net/2ba0d2207c251.png.html</a> However, I made a small mistake and I would like to restore the draft <strong>0.0.2.4</strong> project version. I want to withdraw the last two commits from GitHub. I am fighting with this about 3 hours and I have no idea how to do it.</p>
","1","","0","0"
"64650021","11712367","2020-11-02 17:05:17","7","4722","<git><git-commit><gnupg><git-sign>","Git commit error: cannot spawn gpg.exe: No such file or directory","<p>This is what I am getting as output when I am trying to commit any file. I tried installing git again and watched some tutorials on youtube to get it started again but it didn't work. Still getting the same error:</p>
<pre>
error: cannot spawn C:\Program Files (x86)\GnuPG\bin\gpg.exe: No such file or directory
error: gpg failed to sign the data
fatal: failed to write commit object
</pre>
","0","11712367","0","0"
"27758724","90562","2015-01-03 19:29:58","1","51","<git><email><git-commit>","How to generate Git commit e-mails using built-in mechanisms?","<p>The <code>post-receive</code> hook is a well-known mechanism for generating notification e-mails summarising Git commits. However, as far as I know, this hook is only called when commits are <code>git push</code>-ed into a remote repository.</p>

<p>How do I get Git to send notification e-mails in response to commits made to a local repository, without any pushing to a remote? </p>

<p>I know there is a <code>post-commit</code> hook, but my impression is that it's used for something else--perhaps validation? Moreover, the stock script is bare, without any obvious linkage to an e-mail script. I doubt one can just copy the standard <code>post-receive</code> script in its place, as the arguments passed to the <code>post-commit</code> hook seem to be different than the ones passed to <code>post-receive</code>. </p>

<p>I'm sure one can come up with some custom script to do this, based solely on the commit ID (presumably available in the internal hook arguments). I'm interested in a simple solution that relies on more or less stock/packaged Git scripts; a small and relatively universal shim. Does such a thing exist?</p>
","0","90562","0","0"
"46345823","252627","2017-09-21 13:52:46","2","225","<git><git-commit>","How to monitor changes to a specific subdirectory of a repository?","<p>I am interested in a git repository of some software/library (not owned or controlled by me, hosted on Github), also having the full repository checked out on my computer with git.</p>

<p>But I actually only care about changes in a <strong>specific subdirectory</strong> of the repository. </p>

<p>How can I monitor only the changes in that one subdirectory, when commits touch files in there?</p>
","5","252627","0","0"
"46348522","6243124","2017-09-21 16:04:34","2","1566","<git><git-branch><git-merge><git-commit><git-checkout>","Did git checkout just delete my repository?","<blockquote>
  <p><strong>General Question:</strong> How can one use Git locally alone (i.e. by oneself) in such a way that merging changes from a new branch into master, or moving from branch to branch using checkout, doesn't delete everything in the new branch and the master branch?</p>
  
  <p>Or if one wants to avoid git deleting everything and leaving no backups, is it essentially necessary to be working with a remote repository (e.g. GitHub), not just a local one?</p>
</blockquote>

<p><strong>Specific Case:</strong><br>
I had two branches for my local git repository, <code>master</code> and <code>equality</code>, located in the folder <code>.../ps/ps3</code>. I was in the branch <code>equality</code> and I wanted to merge my changes into <code>master</code>.</p>

<p>So first I did <code>git merge</code> and this returned the error:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>So then I figured that I needed to be in <code>master</code> rather than <code>equality</code> to merge my changes from <code>equality</code> into master. So what I did next was: <code>git checkout master</code>. This produced the following error:</p>

<p><code>error: Your local changes to the following files would be overwritten by checkout:
    ps3/ps3.aux
    ps3/ps3.log
    ps3/ps3.pdf
    ps3/ps3.synctex.gz
    ps3/ps3.tex
Please commit your changes or stash them before you switch branches.
Aborting</code></p>

<p>I interpreted that error as follows: nothing happened, I am still in the <code>equality</code> branch, I should make another commit of <code>equality</code> branch if I want my changes in <code>equality</code> to be saved when I use them to rewrite the <code>master</code> branch, rather than git rewriting from an earlier version of <code>equality</code>.</p>

<p>My terminal prompt indicated that I was still in the directory <code>.../ps/ps3</code> and in the branch <code>equality</code>, so I didn't think that anything was wrong. When I did <code>git commit -am ""Finished correct proof""</code> I didn't get an error message.</p>

<p><code>5 files changed, 155 insertions(+), 29 deletions(-)
 rewrite ps3/ps3.pdf (72%)</code></p>

<blockquote>
  <p>Now it was either this command, or the one immediately following it, which deleted <em>everything</em>, not just <code>equality</code> and every commit in that branch, but also <code>master</code> and every commit in the branch, and even the entire folder <code>.../ps/ps3</code> of the repository. </p>
</blockquote>

<p>I did <code>git merge</code> (I was still in the branch <code>equality</code>) and I got the error message:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>This confused me, because why would I need a remote of anything to do anything? And what did it have to do with my current situation? I guessed it was just an arcane way of complaining that merging the changes from <code>equality</code> into <code>master</code> needed to be done from <code>master</code>. </p>

<p>So next I did <code>git checkout master</code> and got no error, just <code>Switched to branch 'master'</code>. In spite of not getting any errors, I still think this may have been the step that deleted everything, since after doing this my terminal no longer showed that I was in either <code>equality</code> or <code>master</code>, so it seemingly must have at the very least deleted the entire repository, i.e. all of the files in it and the containing folder. </p>

<p>My terminal still said I was in a directory named <code>ps3</code> even though it didn't also list a git branch like it should have. So next I did <code>git merge</code> and then <code>git merge equality</code> but both returned the error:</p>

<p><code>fatal: Unable to read current working directory: No such file or directory</code></p>

<p>Then I did <code>ls</code>, there was no output, then I did <code>cd ..</code> and <code>ls -a</code> and the directory <code>ps3</code> was not listed as being a subdirectory of <code>ps</code>. I.e. the containing folder for the repository, as well everything and every branch in it had been deleted somehow. I didn't even know it was possible to do this with Git -- I thought that the worst possible thing that could happen if I screwed up was that the earlier version in the <code>master</code> branch would overwrite the newer version in the <code>equality</code> branch, and that I could then just do <code>git revert</code> multiple times to get back the <code>equality</code> branch. And I thought <code>git checkout</code> just moved between branches, rather than deleting everything.</p>

<p><a href=""https://try.github.io/levels/1/challenges/22"" rel=""nofollow noreferrer"">This page</a> makes it seem like <code>git checkout master</code> does what I expected it to do, namely switch to the <code>master</code> branch, rather than deleting everything. Also <a href=""https://stackoverflow.com/questions/30875205/restore-a-deleted-folder-in-a-git-repo"">this page</a> makes it seem like <code>git checkout</code> should help restore files, so why did it delete all of mine? </p>
","0","6243124","",""
"65011096","12495736","2020-11-25 18:58:20","-1","1828","<git><git-branch><git-commit>","Not a valid branch name","<p>I want to create a branch in git with name [WAP]Testing.
I tried</p>
<pre><code>git checkout -b [WAP]Testing
</code></pre>
<p>I'm getting below error</p>
<pre><code>fatal: '[WAP]Test' is not a valid branch name
</code></pre>
<p>Then I tried</p>
<pre><code>git checkout -b '[WAP]Testing' 
</code></pre>
<p><a href=""https://stackoverflow.com/questions/56612400/not-a-valid-git-branch-name"">as in mentioned here</a>.</p>
<p>But getting same error.</p>
","2","12495736","",""
"46355924","3757721","2017-09-22 02:28:57","0","365","<git><gruntjs><githooks><git-commit>","Error trying to git commit","<p>When I type:  <code>git commit .</code> I get this error: </p>

<pre><code>'grunt' is not recognized as an internal or external command, operable program or batch file.
</code></pre>

<p>I have no idea where the 'grunt' reference is coming from, but this is the error I am getting when trying to commit.  Any ides on how to fix or where I can start looking for issues?</p>
","3","3757721","",""
"27787576","1680627","2015-01-05 20:44:04","1","644","<git><git-branch><git-push><git-commit>","How to commit changes to a branch when head is ""* (detached from <tag>)""","<p>I want to commit and push changes to remote but I am detached from tag. How do I take just the name of the tag and form git commands that reattach the head where it was detached from, and commit and push to remote?</p>
","0","1680627","",""
"27790138","3684602","2015-01-06 00:13:57","0","97","<git><remote-server><git-push><git-commit>","gitlab impossible to remove distant files","<p>I've just started using <strong>gitlab</strong> and I have a branch synchronized with my local folder.</p>

<p>I made some manual adjustments and now I have an extra distant folder which I can't delete.
When I use git push, it tells me I'm up to date.
When I use git fetch, up to date.</p>

<p>If I use git add <code>-u</code>, <code>git add -A</code>, <code>git gc --prune=now</code>, <code>git rm -r path/.</code>, or other obscur formulas nothing happens, I get an extra folder online.</p>

<p>How can I re-compare the two folders from scratch and run an update in one direction or another?</p>
","0","3684602","",""
"46396600","7844145","2017-09-25 01:58:15","0","33","<git><branch><push><git-commit><git-fork>","Git branches/forks/ commit/push","<p>So this is a very basic question but I have scoured the internet and I am still lost. I am only one day into learning git (for a job) and would really appreciate some help on furthering my understanding.</p>

<p>So far, I know that forking a repo is like creating your own copy to make changes to. </p>

<p>Branches are to be able to work on the repo individually and work on subprojects kind-of ? (the concept is not as clear to me quite yet).</p>

<p>Committing is like screenshotting your changes and pushing is like a final submit of all your changes.</p>

<p>Now I was designated with a small task involving one .html file. I am to alter and push this file back to the master. </p>

<p>This is where I'm lost, I've forked the repo on gitlab and created a branch within my fork on gitlab as well. I can add files and can commit from the terminal without error, but I don't see my commits on gitlab. And when I try to push I get the error that I'm ""not allowed to push code to protected branches of this project"". I am added as a developer.</p>

<p>All I have done was clone the original master provided to me, edit the .html, and added the file using </p>

<blockquote>
  <p>git add filename.html</p>
</blockquote>

<p>was i supposed to clone from my fork or branch in order to be able to push? I am extremely confused and would appreciate any helpful advice. Thank you.</p>

<blockquote>
  <p>git status
  On branch myorigin
  Nothing to commit, working tree clean</p>
</blockquote>
","5","7844145","",""
"27837950","3916927","2015-01-08 10:31:17","0","53","<git><github><git-branch><git-commit>","'origin/master' have diverged , not able to commit the code . Don't want to retrieve the last commit file","<p>I am getting the Message when trying to commit the code :</p>

<pre><code>error: failed to push some refs to 'https://xyz@bitbucket.org/xyz-iphone.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>I don't want to go back the the last commit . The file which i am using is taken from previous commit . </p>

<p>How can i commit in same repository with / without changing the branch ?</p>
","8","3916927","",""
"46407922","1931605","2017-09-25 14:39:33","1","493","<git><git-commit><git-history-graph>","How to rewrite the master branch history to other Repository master branch","<p>Is there any way or any tool or commands to re write the history of <code>master</code>  or some <code>A</code> branch <strong><em>from some commit number</em></strong> to newly created <code>master</code> branch of <strong>NEW REPOSITORY</strong> with <code>master</code> branch with 0 commits or no history.</p>

<p>In such a way that :</p>

<ol>
<li>All the previous commits before commit number ""45678"" should be re written as single commit in the new repository master branch</li>
<li>Rewriting the history should begin from commit ""45678""</li>
</ol>

<p>Thanks</p>
","0","1931605","",""
"27844439","4433597","2015-01-08 16:04:36","6","5223","<git><github><git-submodules><git-commit>","Can't push a commit of Git repo with a submodule","<p>I've recently added submodule ""C"" to my repo ""B"", then checked out a particular commit in submodule C (a previous release of that tool I want to include in B), then committed B and attempted to push. I get this error:</p>

<pre><code>$ git push --recurse-submodules=on-demand
</code></pre>

<p>...</p>

<pre><code>Everything up-to-date
The following submodule paths contain changes that can
not be found on any remote:
  _submodules/C

Please try

        git push --recurse-submodules=on-demand

or cd to the path and use

        git push

to push them to a remote.

fatal: Aborting.
fatal: The remote end hung up unexpectedly
gitpub error:  process git-shell failed with status 128
</code></pre>

<p>I should mention that the commit in C that I have checked out is parentless/detached (not sure why the developer opted to have it this way). This appears to cause an issue when I want to push my commit in B.  It might also be relevant to mention that B is a submodule of a superproject A as well.</p>

<p>Thanks for any insight you may be able to provide.</p>
","0","4433597","",""
"10128473","1324984","2012-04-12 17:13:42","14","18361","<git><git-commit>","How can I skip commits in git?","<p>I have some commits that I don't want in my project, but there's a commit based on them which I do want in it.
This is my GitHub ""Network"" graph of the repository (ASCII, as I still cannot post images):</p>

<pre><code>[]--[]--[_]
|        |
|        -------&gt;|
----------&gt;[·]--[·]--[*]
</code></pre>

<p>(-> means a merge)</p>

<p>I want to delete the changes made in the two [·] commits, and base the [*] one on the [_] one above.
I've tryed merging and rebasing, but they apply the changes of the unwanted commits.
Is it possible?</p>

<p>Sorry if I'm not clear, English isn't my mother language.
Thanks in advance.</p>
","0","1324984","0","0"
"46416327","8673292","2017-09-26 01:07:45","2","685","<linux><git><git-commit><git-push>","is there any difference between doing multiple commits and a single push v/s each commit along with push","<p>Is there a difference in git repo if we do the following 2 cases:</p>

<ul>
<li>case 1: do 10 commits and a single push at the end</li>
<li>case 2: do one commit and a push, repeat the steps 10 times for each commit</li>
</ul>
","0","8673292","",""
"28149220","3426003","2015-01-26 11:28:30","0","4778","<postgresql><logging><git-commit><revert>","How to save latest changes in data? PostgreSQL","<p>I have to write Java application working with Postgres, where I will be storing Text files. I need to have functionality to do gitlike commit/revert, so I created first goals to achieve:</p>

<ul>
<li>commit from program will write document with info about latest change owner, date and create something like log or log file in database - HERE IS MY QUESTION :)</li>
<li>revert will have parameter (commit ID) and using log/diff file it will revert all changes</li>
</ul>

<p>So, my question is</p>

<ol>
<li>how can I create meaningful, not so poor performance system like this? I was thinking about creating PL/pgSQL function as trigger on UPDATE/DELETE in my table. Log would be created in function and stored in auxiliary table. It is good solution or sooo simple and performance poor?</li>
<li>Can you advice me any good solution for creating difference log? I mean something easy to look at by human (like in GIT) and easy to use by revert functionality.</li>
</ol>

<p>My thoughts of last few minutes:</p>

<pre><code>CREATE TABLE logs(
    operationID int NOT NULL UNIQUE,
    operationType text NOT NULL,
    applyData timestamp NOT NULL,
    comment text,
    userID int NOT NULL,
    logText NOT NULL,
    --etc.
);

CREATE TRIGGER logChanges
    AFTER UPDATE OR DELETE ON myAwesomeTable
    (for affectedRow) ROW EXECUTE EXECUTE PROCEDURE loggingProcedure();
</code></pre>
","6","3426003","",""
"28152210","383691","2015-01-26 14:37:13","12","60095","<git><version-control><git-merge><git-commit>","your branch is behind by 2 commits","<p>I have a branch of my master branch called 218. </p>

<p>I am the only one using this branch. </p>

<p>I commit my changes 3 weeks ago looking to do a pull request, but it was rejected as I needed to make changes. </p>

<p>Now I have made those changes and I wanted to commit the latest changes to my branch. </p>

<p>I tried to commit and it told me I needed to merge and pull. So I did, and it messed up all my files and got rid of my changes I made in the last 3 weeks. </p>

<p>I undid this by: <code>git reset --hard HEAD~1</code></p>

<p>And now as it stands in my repo on my computer all the files are how they should be. But when I do git status, my changes dont show and it says:</p>

<pre><code>Your branch is behind 'origin/feature/218' by 2 commits, and can be fast forwarded. nothing to commit, working directory clean. 
</code></pre>

<p>I want to make the branch what I have currently in my repo on my local computer as it stands and not pull anything down but overwrite everything with what I have locally. </p>

<p>How do I do this?</p>
","2","383691","0","0"
"46710112","494143","2017-10-12 12:52:01","0","252","<git><git-merge><git-commit>","How to not lose work in git merge commits","<p>We are using Git in our team for managing our codebase.</p>

<p>Occasionally, I've noticed we have cases where particular code changes are lost. I've tracked the issue down and it seems to be caused by merge commits:</p>

<ol>
<li><p>A developer pulls in changes from origin to his local repo.</p></li>
<li><p>A merge commit is made. Since this is not committed automatically (by default), the developer makes a change to the merge commit (e.g: discarding a particular code file change).</p></li>
<li><p>The developer pushes to origin.</p></li>
</ol>

<p>What is the proper way to protect ourselves from this scenario ?</p>

<p>Also, how can I restore the lost changes in the easiest way? I usually just manually  apply the changes again.</p>
","3","494143","",""
"28160199","2069064","2015-01-26 22:49:59","1","74","<git><git-commit>","git commit specific staged deleted file","<p>I removed a file from my git repo (<code>git rm a</code>) and made a change to another file (<code>b</code>). I also have a bunch of other changes lying around, but I want to specifically commit those two in one commit and deal with the rest later. My status is basically:</p>

<pre><code># Changes to be commited:
#    deleted:   a
#    renamed:   f1 --&gt; f2
#    renamed:   g1 --&gt; g2
#    ... other irrelevant stuff ...
#
# Changed but not updated:
#    modified:  b
#    modified:  h
#    modified:  .. other files ..
#
</code></pre>

<p>I want to do:</p>

<pre><code>git commit a b -m ""...""
</code></pre>

<p>That does work (""error: pathspec 'a' did not match any file(s) known to git""). I know I can do <code>git commit -a</code> to commit the delete itself, but I don't want to commit everything, I want this one commit to be <em>just</em> the changes to <code>b</code> and the removal of <code>a</code>. How do I do that?</p>
","1","2069064","",""
"28176813","2725435","2015-01-27 17:50:45","27","38863","<git><terminal><git-commit><git-amend>","How to confirm changes after `git commit --amend` in Terminal?","<p>When I write <code>git commit --amend</code> I get some kind of editor, where I can change the name of this commit. How to confirm and save my changes using keyboard?</p>
","5","2725435","0","0"
"28180247","974907","2015-01-27 21:22:18","4","1201","<git><git-commit><gitk><git-history-graph>","How do I see a commit's path through git history, or ""how it got in the current branch""?","<p>I'm looking in the commit history using <code>gitk</code> and <code>git log</code> and I'm trying to see how a specific commit arrived in a certain branch. I can see the commits in the history, so I know they are there.</p>

<p>What I want to understand is how they got merged (they were supposed to remain on their own branch). This is a very large project and there are hundreds of commits between the commit in question and the current state of the branch, so I cannot clearly decipher through the limited DAG in <code>gitk</code>, and the commit gets masked in other branches and merges and commit messages.</p>

<p>To do this, I have been trying:</p>

<pre><code>gitk {sha1hashIDstring}..branch_name
gitk {sha1hashIDstring}..branch_name --ancestry-path
git log {sha1hashIDstring}..branch_name --reverse
git log {sha1hashIDstring}..branch_name --merges --reverse
git log {sha1hashIDstring}..branch_name --ancestry-path --reverse
git log {sha1hashIDstring}..branch_name --ancestry-path --merges --reverse
</code></pre>

<p>And I'm not understanding the results. I ONLY want to see items that include the specific commit in question, such that I see clearly how it got into the branch in question. How do I do so?</p>

<h3>Example</h3>

<p>What I'm looking for, in <code>gitk</code> preferrably but <code>git log</code> would suffice:</p>

<pre><code>Message       Author         Date         #commit that merged branch z into current branch
Message       Author         Date         #commit that merged branch y into branch z
Message       Author         Date         #commit that merged branch x into branch y
Message       Author         Date         #commit that merged {sha1hashIDstring} commit/branch a into branch x
Message       Orig_Author    Date         #{sha1hashIDstring} original commit, on branch a
</code></pre>

<h3>More Information</h3>

<p>I'm not seeing any answers yet, so I'll start a bounty if none come in, but perhaps I'm not explaining the question right (I'm open to suggestions to improve and clarify). </p>

<p>The driver for this is that I can see the commit itself, and I'm being told it should not be on a certain branch. Here's what I'm seeing:</p>

<pre><code>Message       Orig_Author    Date         #{sha1hashIDstring} commit
Message       Orig_Author    Date         #Merged into branch test_dec14 (includes original commit)
...
Message       Author         Date         # unrelated commits
Message       Author         Date         # more unrelated commits
# Stuff happened here ??? everything I do gives me hundreds of things here 
# Not all of them related to the {sha1hashIDstring} commit
# No idea how to see only the ones that are
...
Message       Author         Date         # final commit on test_jan15 branch
</code></pre>

<p>I'm being told commits in <code>test_dec14</code> should not have made it to <code>test_jan15</code> unless they were released, and as such the {sha1hashIDstring} commit SHOULD NOT BE in <code>test_jan15</code>, yet it is. I want to know why, how it got there, and who put it there.</p>
","9","974907","0","0"
"28189880","2197256","2015-01-28 10:28:24","68","94409","<git><git-commit>","Why am I getting ""Commit failed with error: pathspec ... did not match any file(s)""?","<p>I am having some issues with Git.</p>

<p>I have a repository where I can commit any file to without problem. However, there is a single file 'Funder.php' which, when I try committing, tells me there is an error  as:</p>

<pre><code>Commit failed with error:
pathspec 'application/libraries/Funder.php' did not match any file(s) known to git.
</code></pre>

<p>I am quite new to this, so was wondering if anybody could please help?</p>
","2","2197256","0","0"
"70265487","16383441","2021-12-07 18:48:48","0","63","<git><github><git-commit><git-log><git-rev-list>","Get latest commit which contains a particular string","<p>I want to get the latest commit which contains a string.
For e.g.</p>
<pre><code>String = TAG_2021_09_0051
</code></pre>
<p>I have tried <code>git log --grep &quot;TAG_2021_09_0051&quot;</code> which gives me below ouput as string is present in two commits. But I want the latest commit from which I want to fetch the commit ID.</p>
<pre><code>commit 12345678
Author: none
Date:   Fri Oct 15 21:39:56 2016 +0000

    @: 1234 - TAG_2021_09_0051

commit 45678965
Author: none
Date:   Fri Oct 14 21:39:56 2016 +0000

    @: 1234 - TAG_2021_09_0051
</code></pre>
<p>Is there any way to get the latest git commit which contains a particular string even if string is present in multiple commits?</p>
<p>The actual output should be below commit</p>
<pre><code>commit 12345678
    Author: none
    Date:   Fri Oct 15 21:39:56 2016 +0000
    
        @: 1234 - TAG_2021_09_0051
</code></pre>
","0","16383441","",""
"52305193","7389250","2018-09-13 00:49:03","1","301","<git><branch><rebase><git-commit><squash>","How to move work on to a new branch and remove all commit history?","<p>I have royally messed up a branch.</p>

<p>I've been key slamming and have merged/ pulled/ squashed  and i don't know what else.</p>

<p>All the work on my feature branch should be in 1 commit</p>

<p>I want to keep where my work is at but I don't want the 10 commit histories.</p>

<p>I can't squash commits anymore as there are conflicts and it's just gotten to be such a mess.</p>

<p>Squashing is no longer and option because git rebase-i HEAD~2 i've done a merge at some point and can't do that - because in the middle of a rebase my changes couldn't be applied because I some how got behind remote by squashing - I must have done it wrong.</p>

<p>So what I would like to do is checkout a new branch and delete all of my commit history prior to the last one.</p>

<p>What is the best way to do this? 
Also can you please explain the solution like I'm 5 please?</p>
","0","7389250","",""
"52313244","3512538","2018-09-13 11:58:28","1","586","<git><git-commit><git-add>","Trying to git add -p <file_name> but git does nothing","<p>I'm trying to use <a href=""https://stackoverflow.com/q/1085162/3512538"">this</a> in order to apply a big change I've worked on. I did the following:</p>

<pre><code> 1. git pull (before I started working)
 2. changed some code
 3. git diff &gt; ~/my_diff
 4. git stash
 5. git pull
 6. git stash pop 
</code></pre>

<p>This failed due to conflicts, so I tried:</p>

<pre><code> 7. cp ~/my_diff ./
 8. git add -p ~/my_diff
</code></pre>

<p>But I get nothing... The file contains a lot of changes, but for some reason it suggests no hunks to patch. What is the problem?</p>

<hr>

<p>This is the exact response from <strong>git</strong>:</p>

<pre><code>Your branch is up-to-date with '...'.

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        my_diff

nothing added to commit but untracked files present (use ""git add"" to track)
.../trunk $ git add -p my_diff
    No changes.
</code></pre>

<hr>

<p>Here is the <code>head -30 ~/my_diff</code>:</p>

<pre><code>diff --git a/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h b/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
index 28907bd..f108931 100644
--- a/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
+++ b/trunk/files_transfer_mgmt/inc/files_transfer_mgmt.h
@@ -13,6 +13,7 @@
 #include ""iss_api.h""
 #include ""rf_termserver.h""
 #include ""rf_versions_util.h""
+#include ""common_apis.h""

 #ifdef __cplusplus
        extern ""C"" {
@@ -23,23 +24,40 @@

 #define DEVICE_SFP             ""/dev/sfp""

-#define        SECONDS_TO_USECONDS(seconds)    (seconds * 1000000)
+#define SECONDS_TO_USECONDS(seconds)   (seconds * 1000000)
+
+#define DEFAULT_FTPS_ERR_LOG ""FTPS_error_log_tmp.txt""

 #ifdef __cplusplus
         }
 #endif /* __cplusplus */

 void SECURE_StartFileDownloadFromHere(void * data);
+void SECURE_ZT_entry_point(void * data);
 void SECURE_StartGenericFileTransferFromHere(void * data);
 void SECURE_getDownloadStatus(int argc, char *argv[],FILE *fin, FILE *fout,pedro_callback_func_args_t *pedro);
</code></pre>

<p>so you can see it is a well formed diff file</p>
","0","3512538","",""
"70278675","782145","2021-12-08 16:44:10","-1","622","<git><git-commit>","How to get the count of number of commits of a specific branch?","<p>I am trying to figure out if there is a way to get the count of the number of commits done on a specific branch.</p>
<p>I have tried using <code>rev-list</code>, but the count I am getting is different.</p>
<pre><code>PS C:\Dev\code\TestProj&gt; git checkout master
Already on 'master'                            
Your branch is up to date with 'origin/master'.
PS C:\Dev\code\TestProj&gt; git checkout -B &quot;TESTBRANCH&quot;
Switched to a new branch 'TESTBRANCH'
PS C:\Dev\code\TestProj&gt; git commit -a -m &quot;TESTBRANCH-TEST COMMIT&quot;
[TESTBRANCH 3a98967] TESTBRANCH-TEST COMMIT
 1 file changed, 1 insertion(+)            
PS C:\Dev\code\TestProj&gt; git rev-list --count --first-parent TESTBRANCH
9
PS C:\Dev\code\TestProj&gt; 
</code></pre>
<p>In the above code, I have made only one commit on the new branch which I created and I can see the count returned is 9. I think Git is taking into consideration some other revisions as well.</p>
<p>Is there a way to get the commit count as just 1?</p>
","5","782145","",""
"52330976","10069948","2018-09-14 11:23:53","1","165","<github><git-commit>","GitHub Commit Gate-Keeper","<p>Do we have any way to Gate-Keep our organisation's GitHub Commits? I want to ensure none of our developer's GitHub commits to public repository is exposing any specific strings/Keys. </p>

<p>So a Gatekeeper scripts which parses through the Commits made by our developers and forbids a commit in case it exposes a particular string. I am aware Private repository is the obvious solution but we should have restriction on public repository 
 too.</p>
","0","10069948","0","0"
"52389455","1675230","2018-09-18 14:58:48","3","3741","<git><commit><git-commit>","Why can't I set notepad++ as my git commit editor in Windows 10?","<p>I know this question has been asked and answered more than once. But I tried at least ten different ways of doing it suggested by the answers and none of them work for me. I always get <code>nano</code> as the editor when I do </p>

<pre><code>git commit
</code></pre>

<p>(This would not be such a big problem if I could cut and paste into <code>nano</code>, but it can't be done)</p>

<p>Just as an example, here are the lines in my <code>.gitconfig</code> file, but please bear in mind I tried many variations of this:</p>

<pre><code>[core]
    editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
</code></pre>
","1","1675230","",""
"70362399","16367458","2021-12-15 10:52:23","-1","536","<git><version-control><commit><git-commit><conventional-commits>","Some references including examples for good ""Git commit messages""","<p>I need some references which include guidelines on having good git commit messages, its conventions and especially a few examples.</p>
","0","16367458","",""
"52402176","9358141","2018-09-19 09:09:04","0","356","<git><commit><git-commit><git-extensions><git-amend>","Understanding git commit with amend option","<p>let's say i have a file 'A'
i have modified the file and pushed it to the repository by the following commands</p>

<pre><code>git add A
git commit -m ""changed A""
git push 
</code></pre>

<p>later after i have realised that i need  changes in file 'B' so i have modified it and ran following commands</p>

<pre><code>    git add B
    git commit --amend -m ""changed AandB""
    git push
</code></pre>

<p>but i get error..</p>

<pre><code>error: failed to push some refs to 'https://xxx@github.com/xx/xx'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
</code></pre>

<p>what should i do to overcome that error</p>
","4","9358141","",""
"70388798","14828354","2021-12-17 05:30:49","-1","567","<git><git-commit>","git add . command taking too much time more than 30 minutes","<p><code>git add .</code> taking too much time <a href=""https://i.stack.imgur.com/oTYFg.png"" rel=""nofollow noreferrer"">image of vs code terminal</a></p>
<p>I tried :</p>
<pre><code>git init

git commit -m &quot;first commit&quot;

git add .
</code></pre>
<p>now its working but its taking too much time more than 30 minutes..</p>
","0","14828354","",""
"70411686","16367458","2021-12-19 13:07:40","0","1439","<git><commit><git-commit><commit-message>","How add new empty-lines in the message of one-line command ""git commit -m""","<p>If I want to not use any text editor and put all the commit message including subject and body lines into the useful one-line command:</p>
<p><code>$ git commit -m 'message including subject and body lines'</code></p>
<p>, I need to insert first body-line two lines after subject and the next lines just at the next new line.</p>
<p>For example:</p>
<p>feat: Derezz the master control program</p>
<ul>
<li>MCP turned out to be evil and had become intent on world domination.</li>
<li>This commit throws Tron's disc into MCP.</li>
</ul>
<p>So I tried to use &quot;\n&quot; but didn't solve the problem!</p>
","0","16367458","",""
"70428398","1079483","2021-12-20 21:44:54","0","38","<git><version-control><git-branch><git-commit>","Getting the state of a commit, and reapplying it in another","<p>Setup:</p>
<pre><code>----- master branch 
                   \
                    \
                     sprint branch
                                  \
                                   my branch --&gt; commit a --&gt; commit b 
</code></pre>
<p>How can a commit c be created with the changes before a was pushed (both a and b are already pushed)?</p>
<p>(a and b are trial and error commits)</p>
","0","1079483","",""
"35620239","5217804","2016-02-25 06:46:19","1","3246","<git><version-control><git-commit>","git reset --soft <commit-id>","<p>I have to go back to 10 commits back in my local git repo.</p>

<p>So, in between I have 9 commits, are they revert if I go back to 10th commit. These 9 commits in between are done by others. Will they get affect by this?</p>
","1","5217804","",""
"35622840","4633063","2016-02-25 09:12:35","2","636","<git><github><commit><git-commit><tortoisegit>","How do I commit live code using GIT?","<p>Our repo folder/tree contains the following folder/files inside:</p>

<ul>
<li>db/ -> this is where we store our db.sql</li>
<li>src/ -> this is where we store our Drupal Site Files</li>
<li>settings_.cmd -> file that contains DB username and passwords etc</li>
<li>setup.cmd -> file that deploys the DB to localhost.</li>
</ul>

<p><a href=""https://i.stack.imgur.com/GoRWz.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GoRWz.jpg"" alt=""enter image description here""></a></p>

<p>Ok so when I deploy the drupal site to our cPanel account I do this:</p>

<p>cd /home/accountname/public_html/</p>

<ul>
<li>git init </li>
<li>git remote add -f name URL </li>
<li>git config core.sparsecheckout true </li>
<li>echo db/ >> .git/info/sparse-checkout </li>
<li>echo src/ >>.git/info/sparse-checkout</li>
<li>git pull name head</li>
</ul>

<hr>

<p>Once I have run those commands I end up having the following in /home/accountname/public_html/</p>

<ul>
<li>.git</li>
<li>db/</li>
<li>src/</li>
</ul>

<p>I then:</p>

<ul>
<li>cd src/</li>
<li>mv * ../</li>
<li>rm -r src/</li>
</ul>

<p>and run mysql -h 127.0.0.1 -D DBname -uDBuser -p'DBpass' &lt; db/db.sql 
To deploy my DB</p>

<hr>

<p>Done now my site runs 100% after I make some changes to the site while its live I would like to commit those changes to the repo this is what I do:</p>

<ul>
<li>cd public_html/</li>
<li>git add --all</li>
<li>git commit -m ""sometext""</li>
<li>git push</li>
</ul>

<hr>

<p>When I pull the repo locally it causes the repo to ""break"" and my repo tree now only shows the contents that was inside the src/ So it deleted the tree that use to look like this:</p>

<ul>
<li>db/</li>
<li>src/ </li>
<li>settings_.cmd </li>
<li>setup.cmd </li>
</ul>

<p>and now looks like this:</p>

<p><a href=""https://i.stack.imgur.com/Wgz0h.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Wgz0h.jpg"" alt=""enter image description here""></a></p>

<p>All I want it to do is:</p>

<p>when I commit the live code to the repo, I only want it to update the folders src/ and db/. So that when I pull my repo locally it will update the src/ and db/ folders and nothing else.</p>
","2","4633063","0","0"
"52507279","7191079","2018-09-25 22:06:04","7","3962","<bash><git><datetime><cygwin><git-commit>","Git Commit is using a wrong timezone","<p>Normally I use two PCs, say: <code>PC1</code> and <code>PC2</code>.</p>

<p>On both of them I'm using <code>CygWin</code> on <code>Windows 10</code>.</p>

<p>They had the same configuration.</p>

<p>On <code>PC1</code> I was trying to do some adjustments on how to display the date and time when doing:</p>

<pre><code>$ git log
</code></pre>

<p>I was trying multiple <code>bash</code> and <code>git</code> commands.</p>

<p>In the past and also currently on <code>PC2</code> when I do:</p>

<pre><code>$ date
</code></pre>

<p>I get the following:</p>

<pre><code>Tue Sep 25 16:17:34 CDT 2018
</code></pre>

<p>but on <code>PC1</code> (the wrong one), with the same command, I get:</p>

<pre><code>Tue, Sep 25, 2018 16:17:34
</code></pre>

<p>where you can see that the <code>TimeZone</code> indicator is not showing up.</p>

<p>Also, now on <code>PC1</code>, when I do a commit and then list the history with: <code>$ git log</code>, dates are like:</p>

<pre><code>Date:   Tue Sep 25 22:58:42 2018 +0100
</code></pre>

<p>where it should be:</p>

<pre><code>Date:   Tue Sep 25 16:58:42 2018 -0500
</code></pre>

<p>because my current timezone is: <code>CDT</code> (<code>America/Chicago</code>) (<code>-05:00</code>)</p>

<p>Any idea on how to solve this?</p>

<p>Thanks!</p>

<p><strong>[EDIT 1]</strong></p>

<p>Responding to suggestion from <code>@Johan</code> below where he said:</p>

<p><strong>--- begin of comment ---</strong></p>

<p>You need to set the <code>git log --date</code> to <code>local</code>.</p>

<pre><code>git config --global log.date local
</code></pre>

<p><strong>--- end of comment ---</strong></p>

<p>I just tried that and now the date that shows up on my last commit doesn't have the <code>TimeZone</code> indicator. Using the same time reference as before it would be:</p>

<pre><code>Date:   Tue Sep 25 22:58:42 2018
</code></pre>

<p>I need to get the <code>TimeZone</code> indicator on the commit list.</p>

<p><strong>[EDIT 2]</strong></p>

<p>Responding to suggestion from <code>@Johan</code> below where he said:</p>

<p><strong>--- begin of comment ---</strong></p>

<p>You need to set the <code>git log --date</code> to <code>default</code>.</p>

<pre><code>git config --global log.date default
</code></pre>

<p><strong>--- end of comment ---</strong></p>

<p>I just tried that and now and I get again:</p>

<pre><code>Date:   Tue Sep 25 22:58:42 2018 +0100
</code></pre>

<p>even trying new commits.</p>
","0","7191079","0","0"
"70470051","16091749","2021-12-24 06:11:47","4","2063","<git><github><git-commit>","Correct commit type for installing a dev dependency","<p>I'm trying to get started using semantic commit messages according to the Angular convention <a href=""https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines"" rel=""nofollow noreferrer"">https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines</a>
<a href=""https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#"" rel=""nofollow noreferrer"">https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#</a></p>
<p>But still can't find the right commit type when installing a new dependency in my project. In the end, it should end up like <code>&lt;commit type&gt;: install storybook</code>. What type should I use?</p>
","0","16091749","0","0"
"52517521","7662042","2018-09-26 12:13:13","0","87","<git><version-control><git-submodules><git-commit><git-tag>","Get master commit from submodule commit","<p>I have master repository with 2 submodules in it. When I do <code>git submodule status</code> in master it gives me the recent commit in submodules. But how will I get the corresponding commit of master.</p>

<p>I can only see that when I do <code>git log</code></p>

<p>Example:</p>

<pre><code>commit d111aeec...........28a7
Author: &lt;author_name&gt;
Date:   Mon Sep 24 17:01:01 2018 +0200

    Updated submodules: submodule1 -&gt; ( 45d60a5 ) 

    Submodule 'submodule1 ' commits:
    *  45d60a5  - Some commit (author_name)
</code></pre>

<p>I need <strong>d111aeec...........28a7</strong>. I have <strong>45d60a5</strong>.</p>

<p><strong>Edit:</strong> The reason behind asking this is in my project I have a tagging mechanism which tags the submodule commits. I need the same tag to the corresponding commit in super repository. If anyone can help me with this?</p>
","2","7662042","",""
"35628793","3607573","2016-02-25 13:34:14","1","2248","<git><git-branch><git-commit><git-stash>","using git stash to move the changes to a different branch","<p>In git if we are accidentally working on a different branches and we do not wish to commit the untested code, I have seen people using stash to save the uncommitted changes, switch to the correct branch and then apply the stash.</p>

<p>As far as I understand, if we have made some changes which is not committed, we can simply move to the correct branch and commit the code. Why do we even need to stash it since changes that are uncommitted will be visible in all the branches.</p>

<p>I remember seeing in some documentation that git will not allow you to switch between branches if you have any uncommitted changes. Is there something I am missing?</p>
","0","3607573","",""
"70500496","13957132","2021-12-27 21:17:02","-1","305","<git><git-commit><git-pull><git-add><git-untracked>","Cant pull nor commit from git for untracked file","<p>I was trying to pull from a repo and it gives me that message but if I run git status it says that my working tree has diverged and if I try to add and commit it gives me that error, (btw those files in the .gradle folder are in the .gitignore file so I don't get why there are being displayed when I try to use git)<a href=""https://i.stack.imgur.com/NsbWF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NsbWF.png"" alt=""enter image description here"" /></a></p>
","2","13957132","",""
"52539601","7757505","2018-09-27 14:43:02","1","676","<git><git-commit>","10 commits ahead of master","<p>I need to merge request from my develop branch to master in a remote repo, but my merge request is rejected because I have 10 commit ahead master.
My local master branch is up date and my local develop branch is up date too. The problem of these 10 commits ahead appears only in remote remote branch.</p>

<p>I try</p>

<ul>
<li><p>git fetch</p></li>
<li><p><a href=""https://stackoverflow.com/questions/34118404/what-i-can-do-to-resolve-1-commit-behind-master"">What I can do to resolve &quot;1 commit behind master&quot;?</a></p></li>
</ul>

<p>How can I clean or delete or solve these 10 commit ahead in my remote develop branch?</p>

<p>PD: My repo is on gitlab. Thanks for your helps. Regards</p>
","7","7757505","",""
"52541321","7118110","2018-09-27 16:22:44","4","1601","<git><android-studio><git-commit>","Extended commit description message in android studio","<p>Is there a way to add the <strong>extended commit description message</strong> in the android studio (like the GitHub website provide) using the IDE not via command line, I researched on this and I didn't found anything. Any help would be appreciated. </p>
","0","7118110","0","0"
"35636643","2054434","2016-02-25 19:34:15","0","48","<git><git-branch><git-push><git-commit>","Git Commits, Pushes and Files overwrite","<ul>
<li><p>I'm working with two branches | BranchOne and BrancheTwo  </p></li>
<li><p>My friend is working on BranchThree.    </p></li>
</ul>

<p>My friend has made a lot of commits, I can see the commits on remote repository but the files have not been replaced.  </p>

<p>To show the commits on the repository (github/gitbucket/....), I need to <code>PUSH</code> my <code>commits</code>, right ?  </p>

<p>But how the files did not get replaced? Only pushes from <code>master</code>  will replace the files ?</p>

<p>So after I'm sure the work on Branch2 and Branch3 are done, I just <code>merge</code> them to master? and <code>push</code> it ?</p>
","5","2054434","",""
"52562716","2355540","2018-09-28 21:12:30","0","1352","<git><git-branch><git-commit><git-clone><git-add>","fatal: pathspec 'editme.html' did not match any files","<p>I have cloned a git public repo on Mac OSX. I made some changes to editme.html file and want to add and commit after that. But command line shows like this:</p>

<pre><code>dips-MacBook-Pro:test-repo kirandip$ git add editme.html
fatal: pathspec 'editme.html' did not match any files
</code></pre>

<p>I created a new file locally like xxx.html and tried to add it.
Showed the same message again.</p>

<pre><code>dips-MacBook-Pro:test-repo kirandip$ git add xxx.html
fatal: pathspec 'xxx.html' did not match any files
</code></pre>

<p>Not able to figure out the problem, BTW the repo was cloned as https format.</p>

<p>Would Appreciate your time!</p>
","1","2355540","0","0"
"70552779","3727722","2022-01-02 00:10:05","0","404","<git><version-control><git-commit><semantic-versioning>","Semantic versioning: Am I allowed to move git tags to a different commit?","<p>Let's say I tagged commit <code>A</code> of my library with tag v1.0.0.</p>
<p>Now, I make a minor fix in the API documentation, let's say, fixing a typo. I commit this change, so new commit <code>B</code> now comes right after <code>A</code>.</p>
<p>Am I allowed to move the v1.0.0 tag to commit <code>B</code>, since I didn't make any breaking changes, and the code of my library is exactly the same as in commit <code>A</code>?</p>
<p>Or, do I need to include even such small changes in a follow-up <em>patch</em>, e.g. v1.0.1 instead?</p>
","0","3727722","",""
"70562201","17819845","2022-01-03 06:10:04","0","5847","<git><version-control><git-commit><undo>","How do I undo the local commits in Git?","<p>I accidentally committed the wrong files <strong>to Git</strong>, but didn't push the commit to the server yet.</p>
<p><strong>How can I undo those commits from the local repository?</strong></p>
<p>The only way seems to be to copy the edits in some kind of GUI text editor, then wipe the whole local clone, then re-clone the repository, then re-applying the edits. However,</p>
<ul>
<li>This can cause data loss.</li>
<li>It's very hard to do this when only an accidental git commit was run.</li>
<li>Is there a better way?</li>
</ul>
","1","17819845","",""
"70570322","4465440","2022-01-03 19:07:28","1","465","<git><gitlab><git-commit><git-revert><git-amend>","git: change a commit and delete the old one","<p>I would like to modify the current git commit and remove its previous form. In other words the &quot;old&quot; current commit has to disapper and it is replaced by the &quot;new&quot; one with the same commit message.</p>
<p>At the moment I am doing:</p>
<pre><code>git add .
git commit --amend --no-edit
git push --force
</code></pre>
<p>From the web interface (gitlab) or using <code>git log</code>, I can see only the &quot;new&quot; current commit; but if I search for the &quot;old&quot; current commit hash (web interface or in <code>.git</code>) I am still able to see the &quot;old&quot; commit content.</p>
<p>Is there a way to completely remove the old &quot;current&quot; commit?</p>
<p>Thanks</p>
<h1>Update</h1>
<p>Following some advice I have tried:</p>
<pre><code>git add .
git commit --amend --no-edit
git stash clear
git fsck --unreachable --no-reflogs
git reflog expire --expire-unreachable=now --all
git gc --prune=now
git repack
git push --force
</code></pre>
<p>while locally I can see that the commits are not present anymore (<code>git branch -a --contains &lt;commit_id&gt;</code>), the size of the repository on gitlab continue to increase, even if I triggered housekeeping.</p>
","0","4465440","",""
"70575496","17455441","2022-01-04 07:47:03","0","783","<bash><gitlab-ci><git-commit>","use bash case statement in gitlab ci/cd","<p>so i have a pipeline that checks 2 repos every 24 hours and pushes changes to a 3rd repo. the pipeline looks like this:</p>
<pre><code>- git  fetch $CHEATSHEETS
- git  fetch $BASH_ONELINER
- git add -A
- git commit -m &quot;Update has been successful&quot; || echo &quot;error&quot;
- git push $TOKEN_AND_REPO HEAD:master
</code></pre>
<p>my problem with that is i'm never going to see any error in the pipeline if there's an error like a merge conflict, for example. so i was thinking to use a case for comitting, something like this:</p>
<pre><code>TEST=2; case &quot;${TEST}&quot; in &quot;1&quot;) echo &quot;one&quot;;; &quot;2&quot;) echo &quot;The commit has failed&quot;;; *) echo &quot;Error&quot;;; esac
</code></pre>
<p>my question is would something like this work in gitlab ci/cd pipeline and if so - how should it be implemented?</p>
<p>thanks in advance.</p>
","6","17455441","",""
"70602877","6724277","2022-01-06 05:28:34","1","259","<commit><git-commit><commit-message>","why not to use passive voice in commit?","<p>I am not a native English speaker. I have a question about the commit message.
I would like to use passive voice in some situations.</p>
<p>I think it is reasonable enough to use passive voice in some commit. But I find some projects do not allow to commit messages with passive voice. Why is it?</p>
<p>I google it, and I only find the rules themselves. But no one explains the reason for the rule.</p>
<p>Thanks for any hints.</p>
","1","6724277","",""
"52652975","3118899","2018-10-04 18:08:46","5","2336","<github><keychain><git-commit><publishing>","Unable to Publish from Github Desktop Application to github.com","<p>While trying to publish from Github desktop app to github.com am getting the following error.</p>

<blockquote>
  <p>GitHub Desktop was unable to store the account token in the keychain.
  Please check you have unlocked access to the 'login' keychain.</p>
</blockquote>

<ul>
<li>relogin didnt help.</li>
<li>Updating Github desktop didn't help.</li>
<li>Deleted all the entries regarding github in Keychain tool</li>
</ul>
","0","3118899","0","0"
"52681165","4474522","2018-10-06 16:39:19","6","1934","<git><git-commit><git-cherry-pick><git-workflow><git-worktree>","git compare two branches which contains some common commit with different hash","<p><strong>Context :</strong> 
We are a team of programmer who work on a project with severals branches 
: </p>

<pre><code>Master, Release, Develop
</code></pre>

<p>Sometimes we need to fix a bug on release, and we need to report this fix on develop, to report our bug fix we use : <code>git cherry-pick commit-SHA</code></p>

<p>With this command the bugfix is well reported on develop but the commit has a different hash</p>

<p><strong>What we need :</strong> </p>

<p>Sometimes we need to know the list of commits that has not been reported, to do so, we use the command who compare the two branches and give us the list of commit which exist in release but not in develop :   <code>git log develop..origin/release</code></p>

<p><strong>The ISSUE :</strong> </p>

<p>This command compare the hash of commits, but as i said before, when we report our commits, their hash changes, thus, we get some commits as if they were not been reported while they are</p>

<p>I'm lookin for a way to report our bugfix without changing the hash of commits, or a way to list the difference of commits between two branches, not by the hash but based on the message or another thing</p>

<p>Thanks</p>
","4","4474522","0","0"
"70669436","11180390","2022-01-11 15:35:20","0","14","<git><github><version-control><commit><git-commit>","How to squash 2 pairs of non-consecutive commits?","<p>What I have is:
<code>A -&gt; B -&gt; C -&gt; D</code></p>
<p>My aim is to get 2 commits like <code>A+C</code> and <code>B+D</code>. What I am thinking is:</p>
<pre><code>git rebase -i HEAD~3
</code></pre>
<p>Making the commits</p>
<pre><code>pick A
squash C
pick B
pick D
</code></pre>
<p>Now, I will move the head back</p>
<pre><code>git reset --soft HEAD~2 
</code></pre>
<p>If I understand correctly this should move the head to B.
So I can do:</p>
<pre><code>git rebase -i HEAD~2

pick B
s D
</code></pre>
<p>And finally I move back the head with:</p>
<pre><code>git rebase -i HEAD~1
</code></pre>
<p>And I am done. Is this a possible/reasonable solution?</p>
<p>I have found ways to squash 2 commits here - <a href=""https://stackoverflow.com/questions/3921708/how-do-i-squash-two-non-consecutive-commits"">How do I squash two non-consecutive commits?</a>.</p>
","4","11180390","",""
"52723711","5761385","2018-10-09 14:41:13","3","3696","<commit><git-commit><bitbucket-server><email-notifications>","Email notifications on every commit to every branch on BitBucket server","<p>How can we send email notifications to everyone whenever anyone pushes any code to any of the branches on Bitbucket server? </p>

<p>Every associated person who has access to the branch should get an email notification whenever any commit happens from anyone to that branch.</p>

<p>Can we do this in Bitbucket Server? Where can I find the settings for this?</p>

<p>We are using Bitbucket Server and not Bitbucket Cloud.</p>

<p>Thanks,
Yogini</p>
","0","5761385","",""
"70703292","17928012","2022-01-13 21:26:12","1","92","<reactjs><path><office-addins><git-commit><prettier>","office-addin-lint prettier MODULE_NOT_FOUND - problem with window path","<pre><code>    [91m[91m×[91m office-addin-lint prettier --files &quot;**/*.{ts,tsx}&quot;:[39m
node:internal/modules/cjs/loader:936
  throw err;
  ^

Error: Cannot find module 'C:\Users\sebastien'
    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:933:15)
    at Function.Module._load (node:internal/modules/cjs/loader:778:27)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)
    at node:internal/main/run_main_module:17:47 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
</code></pre>
<p>i've got this error when i want to commit something.
my path 'C:\Users\sebastien niel....'</p>
<p>something goes wrong with the path, because it stops at the level of &quot;sebastien&quot; and not &quot;sebastien niel&quot;</p>
<ul>
<li>OEM : windows 10,</li>
<li>&quot;office-addin-prettier-config&quot;: &quot;^1.1.3&quot;,</li>
<li>&quot;prettier&quot;: &quot;office-addin-lint prettier --files src/**/*.{ts,tsx}&quot;,</li>
</ul>
","0","17928012","",""
"35713628","189270","2016-03-01 02:30:41","0","1373","<git><makefile><git-commit>","How to introduce a make dependency on git commit?","<p>I've made a little script that generates a header that has git commit information for my repository that I can include in my source to see what version of the code I am using.  Example:</p>

<pre><code>#if !defined physicsplay_build_version_h_is_included
#define physicsplay_build_version_h_is_included

#define PHYSICSPLAY_COMMIT_INFO ""Revision https://github.com/peeterjoot/physicsplay commit d771eeced6552643b3f08c8f87286494189a72a8 Feb/29/2016""

#endif
</code></pre>

<p>I'd like to write a make rule to regenerate this file if I've done a new commit.  I tried using .git/index as a dependency in my makefile for this header, but this gets updated after 'git status' and probably other things.</p>

<p>What's the best way to introduce a make dependency of this sort?</p>
","0","189270","",""
"71591561","","2022-03-23 17:29:13","0","89","<git><github><git-commit>","Main Parent directory showing commit-message of sub-directories(changing its with commit message with latest commit every time)","<p>My question is simple : Why is the <code>parent directory</code> changing it's commit message with the latest commit message I did on  any <code>sub-directory</code> or any <code>file</code> inside that parent directory?</p>
<p>Is it possible for the parent folder to have the exact same commit message that I made once, forever?</p>
<p>What happening is - If I commit any file, then every ancestor (parent folder) also changes its commit message with that latest commit I just made.</p>
<p>This is <code>parent</code> folder. (see its commit message)
<a href=""https://i.stack.imgur.com/NLTpn.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NLTpn.jpg"" alt=""enter image description here"" /></a></p>
<p>This is the folder inside that parent folder (inside client)
<a href=""https://i.stack.imgur.com/GKsQn.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GKsQn.jpg"" alt=""enter image description here"" /></a></p>
<p>This is the folder inside <code>src</code> folder
<a href=""https://i.stack.imgur.com/ESRi7.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ESRi7.jpg"" alt=""enter image description here"" /></a></p>
<p>And this is the file inside <code>hooks</code> which I committed and added the message to.
<a href=""https://i.stack.imgur.com/6HY04.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6HY04.jpg"" alt=""enter image description here"" /></a></p>
<p>So the Path goes like this: <code>client</code> &gt; <code>src</code> &gt; <code>hooks</code> &gt; <code>request.js</code> and I commit <code>request.js</code>. I see that every ancestor folder of it, changed its commit message to this commit message. I don't want that. I want that commit message to be applied only on <code>request.js</code>, not any other folder or file.</p>
<p>How can I stop this behavior?
Or am I doing something wrong (commiting in wrong way)?</p>
","0","","",""
"53590727","966103","2018-12-03 09:24:23","2","416","<git><vim><syntax-highlighting><git-commit><color-scheme>","How to show different colors in files list when I filling git commit message in vim","<p>when I'm filling commit messsage, I can see the files list, but they are same color (new/modify/del)</p>

<p>I'm asking <strong>file list</strong> highlighting, no <strong>message</strong> highlighting, not duplicate question of <a href=""https://stackoverflow.com/questions/39826956"">Configure git commit editor colors</a></p>

<p>I can only get the tag name is <code>gitcommitSelectedFile</code>, how to distinguish them ?</p>

<p>the first picture is in my vim, the second one is in vs code</p>

<p><img src=""https://i.stack.imgur.com/PVuhw.png"" alt="""">
<img src=""https://i.stack.imgur.com/po80V.png"" alt=""""></p>
","1","966103","",""
"36674326","5718713","2016-04-17 08:32:14","-2","47","<git><git-push><git-commit>","how to develop the same project in github using the different accounts","<p>I want to develop a project with mates . The project is in my repository.  If it is possible for my mates to commit their code to my repository directly using their own accounts without my permission and code review? How to realize this? I need some details. Thanks a lot.</p>
","1","5718713","",""
"36674897","218349","2016-04-17 09:38:17","-1","757","<git><github><git-commit>","`Git` - update giving the error [.git/index.lock': File exists.]","<p>I have my repository in the <code>git</code>. in the local copy ( my system ) I have made some changes on one of the files.</p>

<p>and I tried to update that file to <code>git</code> repository. for that I am running the following command :</p>

<p><code>git commit -a ""text file updated""</code></p>

<p>But i am getting a error as like this:</p>

<pre><code>$ git commit -a
fatal: Unable to create 'D:/Projects/gitProjects/color-palette/.git/index.lock': File exists.

If no other git process is currently running, this probably means a
git process crashed in this repository earlier. Make sure no other git process is running and remove the file manually to continue.
</code></pre>

<p>what is the problem here? and how to solve this?
what I do is the correct way to update the file from local to git right?</p>
","5","218349","",""
"71612328","13127130","2022-03-25 04:55:40","-3","4358","<git><commit><git-commit><pre-commit-hook>","Git commit issue after updating Mac OS","<p>I am getting the below commit error in my Mac OS after updating to the latest version. Tried restarting VS Code and also tried to use terminal and same error. Until <code>git add .</code> step it works fine. Only the commit command is not working fine. What could be the issue?</p>
<p><a href=""https://i.stack.imgur.com/6xi4E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6xi4E.png"" alt=""enter image description here"" /></a></p>
<pre><code> git commit -m &quot;Commit message&quot;
.git/hooks/pre-commit: line 15: python: command not found
.git/hooks/pre-commit: line 16: python: command not found
</code></pre>
","3","13127130","",""
"36695134","","2016-04-18 13:17:33","1","1219","<git><git-branch><git-commit><git-remote>","Git: remove all local and remote commits but keep the changes","<p>I created a new branch <code>new_feature</code> and started working on it. I did 4 commits so far and pushed all of them to remote. But for some official reason I need to remove all the commits from both local and remote but I need to keep the changes locally and then commit everything again in one single commit. So the steps I need to do are</p>

<ol>
<li>Remove commits from local branch <code>new_feature</code></li>
<li>Remove commits from remote branch <code>new_feature</code></li>
<li>Need to keep all the changes so that during removing the commits I do not lose any changes I have made so far. </li>
<li>Create a new commit with all the changes I have made so far in the <code>new_feature</code> branch</li>
<li>Push the last commit to remote <code>new_feature</code> branch. At the end <code>new_feature</code> branch should have only one commit with all the changes I have made till now in this branch.</li>
</ol>
","0","","",""
"71624548","17863108","2022-03-26 00:57:55","0","181","<commit><git-commit><readme>","How do I commit to my README file on Gitpod?","<p>Please pardon my possibly quite simple question. But how do I commit my changes to my README file on Gitpod? When I do git add . and then git commit -m &quot;text&quot; it just says &quot;nothing to commit, working tree clean&quot;?</p>
","2","17863108","",""
"71626836","9692966","2022-03-26 09:29:10","0","1086","<github><branch><rebase><git-commit><pull-request>","How to delete/clear old commit history from pull request?","<p>After a pull request and merge from my remote origin branch to upstream, I deleted the branch from my remote, but I rename the local branch and keep working on it (which I think is the reason why I messed up). When I commit this local branch to remote origin and did a pull request to the upstream, my commits of the first pull request also appeared.</p>
<ol>
<li><p>Are there ways to remove the old commit history from this pull request?</p>
</li>
<li><p>Or I have to close this pull request and rebase the local branch to the upstream before doing another pull request?</p>
</li>
</ol>
","0","9692966","0","0"
"36713214","4295332","2016-04-19 08:47:16","3","7102","<git><version-control><bitbucket><git-commit><tortoisegit>","Bitbucket need to change last commit author name","<p>I accidentally made some commit on repository with different author name.</p>

<p>Can we change last commit author name on Bitbucket commit history?</p>

<p>Note: I am using git (TortoiseGit) and Bitbucket.</p>
","2","4295332","0","0"
"71643538","12828566","2022-03-28 07:03:34","1","2647","<git><github><git-branch><git-commit><git-fork>","Commits on main branch being added to other branches","<p>Let's say there are 4 files A, B, C, and D, of which the files A, B, C are committed on the main branch.</p>
<p>I now create a new branch (let's call it sub-branch), do <code>git checkout sub-branch</code> and make changes, and commit file D only.</p>
<p>But, when I push the changes committed on the file D onto the remote repository(Github) by running <code>git push -u origin sub-branch</code>, even the commits of files A, B, C are added to this branch.</p>
<p>I'd want only the changes committed on file D to be reflected in the newly created sub-branch, how do I accomplish this?</p>
","6","12828566","0","0"
"71653181","5321460","2022-03-28 20:06:45","-1","376","<git><git-branch><git-commit><git-log>","Remove someone else's commits off my branch","<p>I needed to use the file structure that someone had created locally and not yet published so I branched off of their branch using the command <code>git checkout -b new_branch_name old_branch_name</code>. Now their changes are published. When I raise a PR to publish my work I would like the PR to be clean and only contain my work</p>
<p>Would the solution be to commit all my changes, switch to master, pull all latest changes, merge master into my branch, and then the other person's commits will not show up anymore?</p>
","6","5321460","",""
"71672007","18628046","2022-03-30 05:36:00","0","339","<git><git-commit>","Why I need small Git commit every time?","<p>I am a newbie and please forgive me if this is a valid question.</p>
<p>I am learning git and reading best practices from here <a href=""https://acompiler.com/git-best-practices"" rel=""nofollow noreferrer"">https://acompiler.com/git-best-practices</a></p>
<p>My question is why does atomic commit?</p>
<p>If I am working on a story and it takes 10 days to finish how can I commit before it complete? I am bit confused. Thanks for your help in advance.</p>
","2","18628046","",""
"53667339","2269535","2018-12-07 10:09:20","3","1356","<git><gitignore><git-commit>","GIT ignore local changes to a committed file by default","<p>I've a committed file ""build.properties"", <strong>this file has to be on our project repository</strong> as it contains important build information.</p>

<p>Sometime some developer performing some local testing, change the content of this file, and then <strong>they commit the changes by mistake</strong> (by simply staging all the changes they made, build.properties included).</p>

<p>Now I would like, somehow, to ignore all the local changes made to this file in order to avoid this situation that keep braking the build, so for example when the developer will run a *git add ** or a <em>git commit -a</em>, that file won't be included in the staged file.</p>

<p>I did already some research, but till now I cannot find any solution compatible with what i'm looking for, considering that the operation needs to be applied remotely, for example I can use the <em>.git/info/exclude</em> folder, but then every time a new developer will clone the repository, he will have to set the <em>.git/info/exclude</em> again, and I would like to avoid this. </p>

<p>Moreover, .gitignore works just with un-tracked file, if I add a tracked file to .gitignore, it won't be ignore at all. I found some persons suggesting to use .gitignore in combination with git rm --cached then re-add the files, but once the file were re-added to the tree, the changes were keeping being tracked, also reading from offical GIT doc, .gitignore does not look to be suitable for my needs.</p>

<p>Any solution in mind? Thanks!</p>

<p><strong>UPDATE</strong></p>

<p>I'm a big fan of SVN, and more I know GIT, more I appreciate SubVersion.</p>

<p>So I guess, the answer to my question is GIT does not provide any way to achieve something like this...</p>

<p>Agree that would not be the best of the practices and that there are other ways to achieve what i'm asking without managing it with the famous source control tool GIT, but my intention is still something quite common that we can face in many different contexts.</p>

<p>I mean GIT provide ways to get around most of the standard practices and principles, for example I can't change a remote history for principle, but GIT gave me the --force to achieve this, so I wonder why it does not provide an easy way to get around my issue too.</p>
","0","2269535","0","0"
"71723842","3873510","2022-04-03 07:26:17","1","603","<github><git-commit><repo>","How to change the default first commit message when using a GitHub template?","<p>When I create a new GitHub repository from my <a href=""https://github.com/paulrberg/solidity-template"" rel=""nofollow noreferrer"">GitHub template</a>, the first git commit message is automatically set to this:</p>
<blockquote>
<p>Initial commit</p>
</blockquote>
<p>How can I override this? I couldn't find a way to change the initial commit message in the settings.</p>
","1","3873510","",""
"71730437","13159549","2022-04-03 22:51:12","-2","1218","<git><gitlab><git-commit>","What git commit message that fixes bad code?","<p>I commited and pushed my code and then realized that the code was not written well. What should I write as a commit message that fix/ clean up that code?</p>
<p>just &quot;fix bad code&quot;?</p>
","3","13159549","",""
"36823611","100652","2016-04-24 13:16:04","1","1569","<edit><azure-devops><git-commit>","How do you set the commit message when editing a text file in a Visual Studio Teams Services git repository? (Visual Studio Online)","<p>When browsing a repository under the ""Code"" tab of a project in Visual Studio Team Services. If I browse to a text file in the git repository and select it I see the contents of the file and I have the option to edit the file.</p>

<p>If I edit the file and then save it a git commit message is automatically generated, which is of the form <code>""Updated PreBuild.ps""</code> - if I edited the file <code>Prebuild.ps</code></p>

<p>I like my git commit messages to be written in the future tense:</p>

<p>If this commit is accepted it will <strong><em>update PreBuild.ps to add some console logging</em></strong></p>

<p>How do I either type my own commit message or edit the commit message after it has been created in Visual Studio Team Services?</p>
","3","100652","0","0"
"71780632","18519711","2022-04-07 10:39:45","0","91","<git><github><repository><git-commit><gitversion>","Establish which version/tag a commit contributes to","<p>In a commit based research for Software Engineering, the first task I've been asked to do is to link every commit to a version. So, per say, every commit that happened between version 1.1 to 1.2 would be seen as 1.1.</p>
<p>Now, to do so, I got all tags from the repo (they are multiple, but let's focus on <a href=""https://github.com/apache/commons-cli"" rel=""nofollow noreferrer"">Apache-Cli</a>) with the date they've been created, and proceded to assign each commit just by confronting the dates.</p>
<p>Using <a href=""https://github.com/ishepard/pydriller"" rel=""nofollow noreferrer"">Pydriller</a> tho, the numbers don't match. So, for example, for the tag <code>refs/tags/cli-1.2-RC6</code>, my method retrieves just 3 tags, being:</p>
<pre><code>aa2434d301c49d100f50af544333886a6767ce9d
e07fd870ca76f478ffd17755e57cfc7bb5ff747e
f0fba7bff7de067e12a78169d1371f3773f3f5a7
</code></pre>
<p>as the date for the tag is <code>Mar 11 02:28:29 2009 +0000</code>.
Whenever I use Pydriller, passing to it the first and last commit of the version (being aa... and f0...), it will analyze 124 commits and only f0... between the above 3 will be in the list.</p>
<p>For what I've undestood, Pydriller follows a &quot;tree structure&quot; or something like that and altough I know i could use it with a list of commit (so I'd be fine with that) I guess my starting tag retrieving/assigning methodology is wrong.</p>
<p>Can you give me any advice on how to perform this task?</p>
","7","18519711","",""
"36880788","518973","2016-04-27 05:08:47","0","1690","<git><commit><restore><git-commit>","Restore not committed files in GIT","<p>I have pushed one of my branch before committing the changes and then checked out to another branch. then I have done git reset to make this branch similar to origin. Also the remote branch has been deleted. Now when I switch back to the first branch, I am not seeing the files which was there. These files has been added , but not committed. How can I restore the files ?</p>
","5","518973","",""
"36882766","1983854","2016-04-27 07:09:28","1","381","<git><git-commit><cherry-pick>","How to cherry pick uncommited changes in some files into a new branch?","<p>Say I have branch  and branch . In  I have been doing several changes in file1, file2. But, also, I ended up doing refactoring on things that were apparently fixed, say in fileA, fileB.</p>

<p>Now I would like to create a different branch that isolates these changes in <code>&lt;my_feature&gt;</code> to have say <code>&lt;my_updates&gt;</code> with commits to just fileA, fileB.</p>

<p>Currently I have changes not staged for commit in file1, file2, fileA and fileB.</p>

<p>I have been reading about <a href=""https://stackoverflow.com/q/16068186""><code>git cherry-pick</code> and <code>git apply</code></a> but it involves things that are already commited.</p>

<p>Now that none of these changes are commited, I don't know if I should be commiting this and cherry picking or if there is a better way to handle.</p>

<p>To make sure the picture is clear, let's make some visual out of it:</p>

<p>I wanted to do:</p>

<pre><code>master ------------------
    \--- my_feature ----/
          file1
          file2
</code></pre>

<p>But now I have</p>

<pre><code>master ------------------
         my_feature ----/
          file1
          file2
          fileA
          fileB
</code></pre>

<p>and I want to merge this (changes in fileA, fileB) before going ahead with <code>&lt;my_feature&gt;</code>:</p>

<pre><code>master ------------------
    \--- my_updates ----/
          fileA
          fileB
</code></pre>

<p>So that <code>&lt;my_feature&gt;</code> will just contain the changes in file1, file2.</p>
","2","1983854","0","0"
"36892229","846232","2016-04-27 14:06:02","0","475","<version-control><formatting><phpstorm><git-commit>","What does Reformat code do when pushing to Git in PhpStorm and where to set it?","<p>I've found that there is a <strong>option to Reformat</strong> code <strong>before commiting</strong> it to Git repository. My idea when I saw this was that I can use <strong>two different formatting</strong> for <strong>myself</strong> and fxp. <strong>team/company</strong>. Is this what is this option suppose to do? If so <strong>where can I specify</strong> the <strong>code formatting</strong> for commiting? And what is the <strong>difference</strong> between <strong>Reformating and Rearranging</strong> code?</p>

<p><a href=""https://i.stack.imgur.com/WTu9U.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/WTu9U.png"" alt=""PhpStorm git push options""></a></p>

<p>I've tried my luck in PhpStorm documentation but I've found only where to set code formatting for the local Reformat option.</p>

<p>Thanks in advance</p>
","0","846232","0","0"
"71823023","15942845","2022-04-11 05:24:24","5","157","<github><git-commit><github-webhook>","How to trigger a WebHook when a Public Github repo that I do not own gets a new commit?","<p>Is it possible to trigger a webhook whenever a public Github repo gets a new commit. I tried seeing on Zapier and other automation tools, but all of them require me to be an owner of that repo.</p>
","0","15942845","",""
"71828515","18698344","2022-04-11 13:14:02","0","118","<git><github><git-commit><github-cli>","How do I check if an old commit of a deleted branch that has been merged exists in develop?","<p>Basically, I'm trying to write a script that ensures that a certain commit has been merged.</p>
<p>When i try to execute the command <code>git branch --contains 0871b8479e6332ee3bd7a1ea9ea5b53795c3b3c5</code> in my terminal, I face the following error:</p>
<p><strong>no such commit 0871b8479e6332ee3bd7a1ea9ea5b53795c3b3c5</strong></p>
<p>This commit is the hash of one of the commits of a branch that has now been merged (and the branch was subsequently deleted). I need a way to confirm that this commit has been merged into the develop branch from shell script/github cli.</p>
<p>PS: I've tried using other branch based approached like <code>  git branch -a --merged</code>, but I'm still not able to confirm that either my branch or my commit have been merged.</p>
","4","18698344","",""
"71830941","16641539","2022-04-11 16:04:00","-1","578","<git><svn><gitlab><repository><git-commit>","Migration SVN to Gitlab","<p>How can we migrate a project SVN to Gitlab ?
if we commit to SVN , will  be automatically change in gitlab  referenciel ?</p>
","0","16641539","0","0"
"36910364","1260333","2016-04-28 09:21:19","7","7429","<github><bitbucket><github-api><git-commit><bitbucket-api>","Is it possible to edit file and commit github/bitbucket from browser","<p>I want to use editor in browser and save in github without server. Just like text editor in github/bitbucket could new file and save it</p>

<p>I want to know are there any REST api of this 2 services to easily commit file like that</p>

<p>Or a git library in js that could work without the need to pull all files in to our machine</p>

<p>edit:</p>

<p>After 2018 both service already expose their API. This question is outdated</p>
","1","1260333","0","0"
"36941533","6125984","2016-04-29 14:55:53","88","46835","<macos><github><git-commit><github-for-mac>","Git Hub Desktop on Mac, error: cannot run gpg: No such file or directory","<p>Trying to commit my changes by using GitHub Desktop and getting this:</p>
<p><a href=""https://i.stack.imgur.com/yYem2.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/yYem2.png"" alt=""enter image description here"" /></a></p>
<blockquote>
<p>error: cannot run gpg: No such file or directory</p>
<p>error: could not run gpg.</p>
<p>fatal: failed to write commit object
(128)</p>
</blockquote>
<p>Firstly that not worked for terminal too and i create gpg-key and plugged in to my GitHub Account
Now it's  working well in Terminal but Desktop version still not working.</p>
<blockquote>
<p>In Oficial doccumentation for GitHub Desktop i found some notation:</p>
<p>Note: GitHub Desktop does not support GPG signing.</p>
</blockquote>
","6","6125984","0","0"
"71870063","16049405","2022-04-14 10:21:53","3","3180","<bash><git><bitbucket><git-commit>","How to enforce conventional commit messages in git (Bitbucket)","<p>I'm looking for a way to prevent commits which have no correct format for the commit message. <br>
I intend to use the following convention:<br>
<a href=""https://www.conventionalcommits.org/en/v1.0.0/"" rel=""nofollow noreferrer"">https://www.conventionalcommits.org/en/v1.0.0/</a></p>
<p>I found out there is a folder with bash scripts which may be the key to that solution: <code>.git/hooks/</code></p>
<p>However, I'm not sure how to write the script to enforce the format on the commit messages.</p>
<p>Will edit accordingly, thank you in advance.</p>
","0","16049405","",""
"36955478","2823719","2016-04-30 13:24:35","1","143","<git-bash><git-commit>","""Lost commit"" bug in Git for Windows?","<p>I have installed Git version 2.8.1.windows.1 and I run it under a MINGW64 bash shell.<br>
I have a remote, bare repository that I push my commits to periodically (actually, almost after every commit). I generally terminate the session by entering a <kbd>Ctrl</kbd>-<kbd>D</kbd>.  </p>

<p>On two occasions, after doing the first commit of the day, when I followed it up with a ""<code>git status</code>"" command prior to pushing, it showed that I was one commit behind the remote repository (and one commit ahead).<br>
It seems that the last commit I performed the prior day before shutting down was no longer on my local repository although my disk files reflected the most recent updates.  </p>

<p>I was now forced to first do a merge with a ""<code>git pull</code>"" on the remote repository, which clobbered my local files (conflicts) before I could push again.</p>

<p>What should I do to avoid this situation?</p>
","0","2823719","0","0"
"71893351","14664937","2022-04-16 11:07:45","0","226","<java><git><eclipse><github><git-commit>","Eclipse commits not showing up on Git Contributions","<br>
<br>
I am currently going trying to learn java, and my IDE is Eclipse. I connected my Github account and am easily able to push/pull etc. Everything is working great, except for the fact that my commits are not coming up on my Contributions.<br>
<br>
I think I have found the issue, but I am not sure what the solution is. If someone can help that would be great, I'm sure it's an easy fix.<br>
<br>
Under the ""Git Staging"" tab on Eclipse, there is a section for 'Author', and 'Committer'.
<p><a href=""https://i.stack.imgur.com/kT757.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kT757.png"" alt=""Eclipse view"" /></a>
<a href=""https://i.stack.imgur.com/qLgrk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qLgrk.png"" alt=""Github commits description"" /></a></p>
<p>As I was writing this message I was able to solve this issue.</p>
","0","14664937","",""
"71911023","16159917","2022-04-18 11:11:24","0","295","<git><git-commit><git-config>","How can I change all commits of another user, ""X"" to another user, ""Y""","<p>I am looking out for a way to change the commit histories on a project whereby the commit by user &quot;X&quot; is changed to commits made by user &quot;Y&quot;.</p>
<p>Is that in any way possible?</p>
<p>The possible or similar solution I saw was this, <code>git commit --amend --author=&quot;Author Name &lt;email@address.com&gt;&quot;</code>.</p>
<p>But it does seem to change the commits made by user &quot;X&quot; to user &quot;Y&quot;.</p>
","2","16159917","",""
"37008836","2146138","2016-05-03 15:54:56","3","295","<git><build-process><git-rebase><git-commit><git-config>","How do I delete the first and only commit if it's the only commit in the branch?","<p>I goofed the author info. up on the first commit. </p>

<p>However, it seems like most of the rebase or tree modification operations rely on some other commit already existing.</p>

<p>Even when I run Git's interactive rebase command, all I see in my little list of commits is a single line, ""noop"". :/ (Solved this by running my rebase against the Git tree's <code>root</code> with <code>git rebase -i --root</code>, but removing the line for the first commit I made did not actually remove it from the tree.)</p>

<p>Rebasing on top of <code>root</code>, or the first commit, does not work.</p>

<pre><code>[vagrant@localhost vagrant]$ git rebase -i HEAD~1
fatal: Needed a single revision
invalid upstream HEAD~1
[vagrant@localhost vagrant]$ git rebase -i HEAD
Unknown command: rnoop
Please fix this using 'git rebase --edit-todo'.
[vagrant@localhost vagrant]$ git rebase --edit-todo
[vagrant@localhost vagrant]$ git rebase --abort
</code></pre>

<p>The following looked like a relevant possible alternative answer, but I think something more, or at least more specific, is worth an answer for this special case:</p>

<p><a href=""https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git"">Delete commits from a branch in Git</a></p>

<p>This other answer (<a href=""https://stackoverflow.com/questions/927358/how-do-you-undo-the-last-commit"">How do you undo the last commit?</a>) resulted in the following: </p>

<pre><code>[vagrant@localhost vagrant]$ git reset --soft HEAD~
fatal: ambiguous argument 'HEAD~': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git &lt;command&gt; [&lt;revision&gt;...] -- [&lt;file&gt;...]'
[vagrant@localhost vagrant]$ git reset --soft HEAD
</code></pre>

<p>Here, for those still reading this, is the vim buffer with <code>noop</code> I mentioned earlier: </p>

<pre><code>noop

# Rebase 3d1c632..3d1c632 onto 3d1c632 (1 command(s))
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like ""squash"", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
</code></pre>

<p>For those wondering why I don't just edit the files and re-add them to the commit, or something, I had incorrect author information, which I corrected only after I had run ""git commit"", and I changed the author information while I had the commit message open for editing.</p>

<p>Maybe I could try deleting the entire <code>.git</code> folder, or something, but I'd prefer a more elegant way. </p>

<p>Plus, if I don't delete the entire <code>.git</code> folder, I keep my hooks and stuff, and I have a feeling that answers to this sort of question will speak to fundamental design principles in Git that I may not yet understand.</p>
","1","2146138","0","0"
"37014120","6287799","2016-05-03 20:50:20","0","672","<git><git-commit><manifest.mf><gradle-release-plugin>","gradle-release-plugin - use git commitid in manifest.mf","<p>I would like to use the git commitId in the manifest.mf file.
In the current gradle-release-plugin version tagging will be done after build task. So git commitId can not be used in manifest.mf file.
Are there any plans to support something like that?
Any ideas for using git commitId in manifest.mf file?</p>
","0","6287799","",""
"71962070","18898387","2022-04-22 00:05:50","2","450","<git><github><git-commit>","Why github username and commit name is not the same?","<p>I have uploaded my project on github and on the website I have different username and commit name:</p>
<p><a href=""https://i.stack.imgur.com/yFsif.png"" rel=""nofollow noreferrer"">Image</a></p>
<p>For this post I have changed it to &quot;NAME 1&quot; and &quot;NAME 2&quot; .</p>
<p>Why aren't they same? I think I have changed it in the past ( because NAME 2 is familiar for me: it is my last name )and now I don't know where have I changed it.
I want to change it to NAME 1 (to my github username).</p>
<p>I tried to change Git user.email and user.name but these have no affect to NAME 2.</p>
","0","18898387","",""
"37048448","5690355","2016-05-05 10:41:11","0","39","<git><git-branch><branching-and-merging><git-commit>","Is there a proper way to remove git commits selectively?","<p>Let's say I have a <code>MASTER</code> and <code>DEV</code> branches, one with the stable/released version (master) of the code, the other unstable (dev) with unfinished work in progress.</p>

<p>I started coding a test suite branching from DEV, which now should be included (or ""released"") into master.</p>

<p>The problem is that for a while the branch has been kept updated with DEV, and now there are merged commits from other branches that should not be merged to MASTER.</p>

<p>The commits are properly marked and we know for sure specifically which they are.</p>

<p>The new code to be included in release is part of a test suite, so it doesn't change the source code, therefore it should not be any major problem in rolling back all the unwanted changes/commits from the source code.</p>

<p>The question(s) would be:</p>

<p>Is there a pre-defined methodology to do this? And where is this methodology outlined, if any?</p>

<p>I can research a bit on git to find ""my way"" to do this safely, but it sounds like a classic case of something which is likely to happen in any standard development process, and in my experience usually there is already a predefined methodology outlined by former (and heroic) developers in their quest for a solid development methodology.</p>

<p>If no methodology is available, or known, any advice would be appreciated.</p>
","2","5690355","",""
"53748355","4480164","2018-12-12 17:28:52","-4","797","<ios><swift><xcode><git><git-commit>","How to access GIT commit in iOS app using Swift 4?","<p><a href=""https://i.stack.imgur.com/n8e1g.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/n8e1g.png"" alt=""enter image description here""></a></p>

<p>I am using Swift 4 I want to grab the first 6 letters of <code>git commit</code> and display in my <strong>iOS</strong> app. </p>

<p>The command to get that is </p>

<pre><code>git rev-parse --short HEAD
</code></pre>

<p><strong>How do I get that working in swift  ?</strong> </p>

<p>I'm opening to any suggestions.</p>
","0","4480164","0","0"
"37060718","504717","2016-05-05 21:38:28","2","52","<git><git-commit><revert>","Delete all commits that I have pushed","<p>I was on <code>branch1</code> and it has couple of commits that i did for <code>branch1</code>. After completing my task (and pushing those commits to remote). I switched to <code>branch2</code> from <code>branch1</code> with the following command</p>

<p><code>git checkout -b branch2</code></p>

<p>I intended to create it from <code>master</code> but I mistakenly created it from <code>branch1</code></p>

<p>I made few changes in <code>branch2</code> and then commit/push to the remote by command <code>git push origin branch2</code>. Now when i look at remote repo, I see all of my <code>branch1</code> commits in the history of <code>branch2</code>. </p>

<p>Keep in mind that this was my first ever commit to <code>branch2</code> so i really don't care about all the earlier commits. </p>

<p><strong>P.S</strong></p>

<p>Some more background how branches are related. </p>

<p>I had some code which was in <code>master</code> branch (which we have decided to scrap). Now, I created a new branch <code>branch1</code></p>

<pre><code>&gt; git status
&gt; on branch master
&gt; git checkout -b branch1
</code></pre>

<p>which has basic scaffolding of the project. This branch (once approved) will be merged (in this case over-write) the <code>master</code> branch. The <code>branch2</code> has db layer added on top. Theoretically it would be added on top of <code>branch1</code> but when i did so i saw that <code>branch2</code> has all the commits that I had in <code>branch1</code> that made me think that when we will merger <code>branch1</code> onto <code>master</code>, followed by <code>branch2</code> wouldn't it cause <strong>double commits</strong> history ? Thats the reason I wanted to delete the previous commits (which were borrowed from <code>branch1</code> to <code>branch2</code>). </p>
","5","504717","0","0"
"54571742","1624844","2019-02-07 10:57:10","1","406","<docker><git-commit><yarnpkg><git-push><yarn-lock.json>","update yarn .lock and push to remote to affect docker instance","<p>In the project, I have cloned from my organization's GitLab, there is a module in the <code>package.json</code> as:</p>

<p><code>""react-native-device-info"": ""https://github.com/KarlosQ/react-native-device-info#master"",</code></p>

<p>and respectively in the <code>yarn.lock</code> we have </p>

<pre><code>""react-native-device-info@https://github.com/KarlosQ/react-native-device-info#master"":
  version ""0.21.5""
  resolved ""https://github.com/KarlosQ/react-native-device-info#beebff8dc284decfba917f2c6d30d0e535cc4002""
</code></pre>

<p>For any reason that commit <code>beebff8dc...</code> does not exist at the master branch of the module.</p>

<p>Because of that, all builds in the GitLab pipeline fails. </p>

<blockquote>
  <p>error Couldn't find match for ""beebff8dc..."" in ....</p>
</blockquote>

<p>How can I change it locally and push to the remote branch that affects the pipeline and build passes?</p>

<p>Clearing the Yarn cache locally did not help. deleting that module from yarn.lock causes other issues that my organization account is not recognized anymore and <code>yarn install</code> fails! </p>
","2","1624844","",""
"54584915","141719","2019-02-08 01:32:14","1","119","<git><git-commit><build-system><git-amend>","Is `git commit --amend` touching more files than is necessary?","<p>I often experience the following:</p>

<ol>
<li>Modify files A, B, and C.</li>
<li>Commit the modifications with <code>git commit</code>.</li>
<li>Build the project, so the build is up to date.</li>
<li>Make a follow-up / fix-up modification to file A only.</li>
<li>Run <code>git commit -a --amend</code> (or <code>git commit --amend path/to/A</code>)</li>
<li>Rebuild the project incrementally.</li>
</ol>

<p>Now, since I've only modified file A since the last time I've built, I would expect that only file A gets rebuilt, but what I invariably see is that all of A, B, and C (i.e., all the files touched by the entire commit) are rebuilt.</p>

<p>It seems to me that <code>git commit --amend</code> it <code>touch</code>ing / bumping the last modified timestamps of each of A, B, and C, even though I'm only adding a modification of A to the commit.</p>

<p><strong>Is this necessary? Can it be avoided, so only A is touched and only A gets rebuilt?</strong></p>

<p>If it matters, my project is in C++ and my build system is cmake+ninja, but I think that's largely besides the point as it's fairly standard for build systems to rely on last modified timestamps to determine what to rebuild.</p>
","0","141719","",""
"72561190","19231119","2022-06-09 13:29:04","0","641","<gitlab><git-commit>","""commit or discard the untracked or modified content in submodules""","<p>Since this morning I have a problem for committing my work :</p>
<p>I tried several commands to clean up my local repo but I still have the same problem, I have searched well in other topics where the problems encountered were similar to mine but the solutions differ without me being able to adapt anything ...</p>
<p>I await your answers</p>
<p><a href=""https://i.stack.imgur.com/K0UpW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/K0UpW.png"" alt=""enter image description here"" /></a></p>
<p>PS : Sorry for my lack of courtesy but obviously Stack Overflow does not want me to greet you ...</p>
","6","19231119","",""
"46759868","4278198","2017-10-15 20:51:30","1","156","<git><github><continuous-integration><git-commit>","Remove commit status from repo","<p>I'm playing with few CI tools and they update commit status in github. Is it possible to delete these statuses? I've got a lot of commits with pending status and these commits will not be successful because CI is disabled.</p>
","0","4278198","0","0"
"65454954","12302826","2020-12-26 09:14:30","2","5779","<git><github><jupyter-notebook><ipython><git-commit>","How do I edit an ipynb file on github?","<p>I have a repository on GitHub where I uploaded a Jupyter Notebook file. I created another branch and want to edit the ipynb file.</p>
<p>Clicking the edit button produces an HTML file which is really confusing. I want to edit the ipynb file and run it before pushing the commit. How do I do this, please?</p>
","2","12302826","0","0"
"28564049","296427","2015-02-17 14:46:11","0","124","<git><git-merge><git-commit>","Commit only part of resolved files?","<p>When I'm trying to merge two branches and I get lots of conflicts. What I want to achieve to split merge process into several steps. </p>

<p>Is there a possibility to resolve some files in git and commit them on my branch?</p>
","0","296427","",""
"65773009","8825683","2021-01-18 10:45:41","1","873","<git><git-commit><git-reset>","Is there a way for git to dump committed changes to the working tree?","<p>I committed some changes which contained a change that I didn't want to commit, so I wanted to remove that commit but keep the staged and unstaged changes that were committed so that I could delete the unwanted change before committing. I used <code>git reset --hard &lt;hash&gt;</code> but it reverted to the commit at HEAD - 1 which not only removed the commit but also removed all staged and unstaged changes before the commit.</p>
<p>Is there any way to reset to a commit but to dump all committed changes (back) to the working tree instead of deleting every change recorded in that commit? In other words, how can I return all committed changes to the working tree?</p>
","6","8825683","",""
"11075878","393329","2012-06-18 00:38:42","1","298","<git><aptana><aptana3><git-commit><git-amend>","Git commit amend in aptana studio 3?","<p>I just noticed when I tried to amend a commit that there is no git commit amend function in Aptana Studio 3.  Is that correct or am I missing something?</p>

<p>If it is indeed not there, does anyone in the community know whether it's ever going to be added or how to request it?</p>
","0","393329","",""
"65790256","14816120","2021-01-19 11:04:13","-1","2190","<git><github><visual-studio-code><git-commit>","How to revert commit in github and restore files in VS code","<p>So I was a beginner to github and how commits and all works. Long story short I thought I deleted every file in my project but now there are &quot;changes&quot; in the source control. I'm not too sure what to do and how to get my original project back. <a href=""https://i.stack.imgur.com/0R9wc.png"" rel=""nofollow noreferrer"">This is what I see</a></p>
<p>I really need help and I'm really desperate. I thought to discard changes but the message that says all files will be permanently deleted is very very daunting.</p>
","0","14816120","",""
"65802076","9270181","2021-01-20 01:59:46","0","1663","<git><git-commit><author><git-amend>","fatal: --author 'First Last example@example.com' is not 'Name <email>' and matches no existing author","<p>I ran into this error when trying to amend a commit to change the author.</p>
<pre><code>git commit --amend --author=&quot;First Last example@example.com&quot;
</code></pre>
<pre><code>fatal: --author 'First Last example@example.com' is not 'Name &lt;email&gt;' and matches no existing author
</code></pre>
<p>It is similar to an issue described in <a href=""https://stackoverflow.com/questions/26318375/fatal-no-existing-author-found-with-xxx"">this post</a>, but the error message is different, making that solution difficult to find.</p>
<p>How can I resolve this?</p>
","0","9270181","",""
"28607606","2526070","2015-02-19 13:26:13","2","65","<git><bash><commit><git-commit><git-log>","List commits and files changed under commit","<p>I was wondering if there is a way to view the commit information <strong>and</strong> the files changed in the commit when using grep.</p>

<p>To retrieve the commits when searching for a string in the commit messages I use:</p>

<p><code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --grep=&lt;SEARCHING_STRING&gt;</code></p>

<p>Then I get the commit id and use the following command to get all files changed under a commit:</p>

<p><code>git log --oneline --name-only | grep -Eo ""\w/.*\.\w+"" | sort -u --grep=&lt;COMMIT_ID&gt;</code></p>

<p>I'm trying to create a bash script to combine these two commands in only one and retrieve the commits and all files under a commit without success.</p>
","2","2526070","",""
"65812580","4128536","2021-01-20 15:30:11","1","77","<git><scripting><git-merge><git-commit><git-flow>","Retrieve list of features from develop(s) concerned by a build on release branch","<p>We are interested of making a script that simplify our building process.</p>
<p>For that, we need to list the Git features that were merged onto one or more develop branches, since our last build.</p>
<p>I made this quick example, sorry for lack of design.</p>
<p><a href=""https://i.stack.imgur.com/I0hD8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/I0hD8.png"" alt="""" /></a></p>
<p>Let's imagine we are <strong>currently onto the build2 merge commit</strong>.</p>
<p>We want to know (from script) which features were delivered and are then <strong>concerned by this build</strong>.</p>
<p>Those features are D7 and D6, as they were merged on their respectives develop branches.</p>
<p>The difficulty there is probably to ignore the previous commits (D4, D3 and such) that was already present in our previous build and the fact that there is two develop branches which merge successively.</p>
<p>I know we can get get merges commits that exists on one branch and not another.</p>
<p>Using something like:</p>
<pre><code>git log --oneline --merges --abbrev-commit origin/develop/$BRANCH...origin/release/$BRANCH
</code></pre>
<p>But this gets more complicated when using multiple develop or projects branches.
And will probably returns false positives.</p>
<p>(there may be conflicts resolution commits that will change behavior)</p>
<p>Is there a better idea to do something like that ?</p>
","5","4128536","",""
"11116572","767383","2012-06-20 09:29:06","11","8405","<git><commit><rebase><git-rebase><git-commit>","Git Commit during Git Rebase - what really happens?","<p>I'm looking for a good description of what happens if one commits during rebase and how this could be 'reverted' in an easy way.</p>
<p>Let's consider a scenario, where a large commit is rebased. During rebase a conflict appears and user begins merging changes.
Now, imagine a scenario where you were almost done, but you didn't call <em>git rebase --continue</em> - for whatever reason (be it long weekend or such). The next week you just resumed working, stil during rebase. Finally, you call <em>git commit --amend</em> to append the changes to the last commit and... they end up in the commit you were rebasing into.</p>
<p>Naturally, you can always checkout the commit you started rebasing from and &quot;hack your way through&quot; - say, for example, by trying to copy all the files from your amend, but that may drop the changes that were introduced in the meantime.</p>
<p>Is there a clean, good way to fix this? This is one particular state I should be careful about and I never want to end up in it, but it still happens occasionally - and I end up spending one whole day trying to get things straight.</p>
<p>I would really appreciate all help and suggestions. Thank you!</p>
","5","767383","0","0"
"28624833","4377240","2015-02-20 08:47:55","1","297","<android><git><android-studio><git-commit>","commit a class after having changed its name","<p>I am using Android Studio.</p>

<p>I can't commit my class after having changed its name.</p>

<p>I have a file <code>home.java</code>, I want to rename it into <code>Home.java</code></p>

<p>I right click on the file name and <code>Refractor&gt;Rename</code></p>

<p>Then I try to commit this file by doing a <code>right click &gt; Git &gt; Add</code> </p>

<p>And finally right <code>click &gt; Git &gt; commit file</code></p>

<p>But I have an error :</p>

<pre><code>Error:error: pathspec 'app/src/main/java/com/myschool/myname/appname/Home.java' did not match any file(s) known to git.
 during executing git commit --only -F /private/var/folders/7n/9f1v9ctx4jz9yd6m55jvgj_80000gn/T/git-commit-msg-2479641134196922895.txt --author=myname -- app/src/main/java/com/myschool/myname/appname/Home.java
</code></pre>
","0","4377240","",""
"28631204","603270","2015-02-20 14:22:52","6","13770","<git><git-commit><git-amend>","Git commit --amend merged two commits","<p>I have a remote 'dev' branch and was working on it locally.</p>

<p>I made a first commit on 'dev' with a commit message ""my_feature"", putting my local branch ahead of the remote by 1 commit.</p>

<p>I then developed some new stuff and made a <code>git add -u</code>, getting ready to commit.
I then realized I wanted to rework the previous commit message as ""my_feature (1/2)"" to make my current commit message as ""my_feature (2/2)"", putting my local branch ahead of the remote by 2 commits.</p>

<p>So I made a <code>git commit --amend</code> (thinking it would only edit the previous commit's message), edited the ""my_feature"" commit message as ""my_feature (1/2)"" and... <strong>ended up with a single commit</strong> labelled ""my_feature (1/2)"" <strong>having all my changes</strong> (first commit + staging files diffs) -- my index is now clean.</p>

<p>So if I got it right, my command actually did a commit, also committed the staging files, which produced a single (merged?) commit?</p>

<p><strong>I was not expecting Git to do such a thing.</strong> I just wanted to edit my old commit message, not to merge the old one with my current staging files.
(Now that I think about it a <code>rebase</code> could have been better.)</p>

<p>While I can understand why <code>git commit --amend</code> could commit (even if I only wanted to edit a commit message), <strong>I have problems to understand how Git merged my two commits into one with a <code>commit</code> command.</strong></p>

<p>Anyone could clarify this to me?</p>

<pre><code>$ git --version
git version 1.7.10.4
</code></pre>
","4","603270","0","0"
"47172106","","2017-11-08 05:22:02","1","1240","<android><android-studio><github><git-commit>","How to push android project to github with this error is given below?","<p>I have a trouble when I push my project to GitHub:</p>
<p>When I finish commit, the following error will appear:</p>
<p><a href=""https://i.stack.imgur.com/iZAMW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iZAMW.png"" alt=""https://ppt.cc/fCVeHx"" /></a></p>
<p>How can I solve it?</p>
","0","","0","0"
"65855111","10088643","2021-01-23 02:24:33","34","19372","<git><commit><git-commit><conventional-commits>","What would be a good commit message for updating package versions using Conventional Commits?","<p>Following <a href=""https://www.conventionalcommits.org/en/v1.0.0-beta.2/"" rel=""noreferrer"">Conventional Commits</a> what would be the best <code>&lt;type&gt;</code> for commits regarding package version changes (upgrades/updates)?</p>
<p>E.g.: <code>feat: Bump React version to &quot;16.13.1&quot;</code></p>
<p>E.g.: <code>feat: Upgrade all dependencies</code></p>
","0","10088643","0","0"
"66157700","15114249","2021-02-11 15:28:51","0","206","<git><version-control><git-commit>","Checked out on master, brought changes to it and now cannot checkout back to branch","<pre><code>git status
On branch master
Your branch is behind 'origin/master' by 10 commits, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)

 

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   Resources/Common/Ui-de.json
        modified:   Resources/Common/Ui-en.json
        modified:   Resources/Common/Ui-es.json
        modified:   Resources/Common/Ui-fr.json
        modified:   Resources/Common/Ui-nl.json

 

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>I was on my feature branch making changes, and saw these file changes which were modified by someone else. I committed them then checked out on master.</p>
<p>The issue is, on the master branch, these exact 5 changes still appear as uncommited changes, and now I cannot checkout to my other branches nor pull from origin as it's demanding me to commit changes first. However, I don't want to commit changes directly on master. And again, these changes aren't made by me.</p>
<p>I have tried stashing and reverting changes but both don't work, the files just stay there.</p>
<p>What exactly is happening here? I am thinking of just committing them on master without pushing so I can pull and checkout to other branches, and just never push those commits on master, but that doesn't seem like the best solution.</p>
","3","15114249","",""
"47487500","4475172","2017-11-25 15:20:41","6","3372","<git><version-control><git-commit><gitkraken>","How to git checkout such a particular commit using GitKraken?","<p>I am using GitKraken, a gui client of git vcs.
GitKraken is also a single place for all my Git repositories.
But i didn't find any option where i can go such a particular commit that i have already used in my git bash using 
""git checkout "" command.</p>
","1","4475172","0","0"
"28990596","896405","2015-03-11 15:22:30","24","41187","<git><push><commit><git-commit><atlassian-sourcetree>","SourceTree - remove waiting pushes","<p>How do I remove commits, waiting to be pushed to remote?</p>

<p><img src=""https://i.stack.imgur.com/86KO4.png"" alt=""2 pushes waiting""></p>

<p>My situation is, that those queued commits (changes) been already pushed (more bellow) and now the server refuses to accept those as they are behind the HEAD.</p>

<p>I tried resetting to another commit, but when I go back to HEAD, pushes reappear again.</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/23865335/sourcetree-undo-unpushed-commits"">SourceTree - undo unpushed commits</a></li>
<li><a href=""https://answers.atlassian.com/questions/153791/how-should-i-remove-push-commit-from-sourcetree"" rel=""noreferrer"">https://answers.atlassian.com/questions/153791/how-should-i-remove-push-commit-from-sourcetree</a></li>
</ul>

<p>Clicking Repository > Refresh Remote Status won't help, it actually added the 2nd waiting push :) </p>

<p>PS: I apologize for my terminology, I'm quite new to git.</p>

<p>.</p>

<p><strong>Update 1</strong></p>

<p>Problems started when I were commiting feature2 to master branch. I don't have rights to commit there so it got stuck. Then I commited again to my personal branch, which was OK. Then I got one waiting commit, never to be pushed, even if I select the right (personal) branch when I click Push.</p>

<p><img src=""https://i.stack.imgur.com/Kxh3i.png"" alt=""enter image description here""></p>
","2","896405","0","0"
"47505122","6044814","2017-11-27 06:30:31","0","1276","<git><branch><git-commit><git-checkout><nothing>","git status say nothing to commit, but can't switch branch","<p>I'm working on windows, Thanks for git professionals for any help on this.</p>

<pre><code>PS G:\Solid\WebPortals&gt; git status

On branch pos-event-waiver
nothing to commit, working tree clean
PS G:\Solid\WebPortals&gt; git checkout pos-exchange-bill
error: Your local changes to the following files would be overwritten by checkout:
        Site/WebPortals/assets/typescript/pos/cart/waiver.component.ts
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>

<p><a href=""https://i.stack.imgur.com/HCosC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HCosC.png"" alt=""enter image description here""></a></p>
","3","6044814","",""
"28991445","4659277","2015-03-11 15:56:37","0","1987","<git><git-commit><git-pull><recover>","Is it possible to recover git files not pushed?","<p>I ran into a terrible situation where I updated my local copy 2 and I forgot that I had built upon my local copy one, therefore when I tried to pulled the local copy 1 it returned some error and to get rid of that I guess I stashed the valuable changes on that copy. I'm not sure if I had commited (definitely no pushed) my local copy 1. 
After pulling to this copy and of course stashing the previous change I realized that I lost a lot of things.
Is there away I can recover the nonpushed data?</p>
","0","4659277","",""
"11790671","1352755","2012-08-03 06:49:19","3","3168","<git><github><git-commit><git-add>","How to commit and/or add unchanged file?","<p>I have a case where file I modify does not appear as modified file.</p>

<p>Can i still commit that file? </p>

<p>Can I add file that is listed as unchanged file to changed file? Thanks!</p>

<p>Updates:
When I'm trying to add the file, terminal gives such error:</p>

<pre><code>The following paths are ignored by one of your .gitignore files:
folderpath/filename.java
Use -f if you really want to add them.
fatal: no files added
</code></pre>

<p>but when I open my <strong>.gitignore</strong> file:</p>

<pre><code>bin
gen
#built application files
*.apk
*.ap_

# files for the dex VM
*.dex

# Java class files
*.class

# generated GUI files
*R.java

# Mac OS file
.DS_Store
</code></pre>

<p>and <strong>info/exclude</strong></p>

<pre><code># git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
</code></pre>

<p>I am very sure my folder path and its file name is not included in .gitignore and exclude file</p>
","6","1352755","0","0"
"54956520","","2019-03-02 08:11:55","0","102","<git><symlink><git-commit><git-add><hardlink>","Using .config/directory as a git repo","<p>The whole configuration for a soft is located in <code>.config/soft</code>. 
Lately, I had an idea to practice basic git usage by initializing a git repo to which I would send commits with config changes.</p>

<p>My question is that I am not sure if I should initialize <code>.config/soft</code> as a git repo. I thought about initializing it somewhere like Projects/soft and linking directory or specific files from <code>.config/soft</code> to it.</p>

<p>What's the best solution here?</p>
","1","","",""
"47511287","2791425","2017-11-27 12:43:19","0","931","<git><merge><githooks><git-commit>","Detect merged branches from Git merge commit","<p>I want to know merged branches from merge commit.</p>

<p>So, I decide to automatically write a merge message which contains merging branches when the merge happens by using a commit hook.</p>

<p>However, this has a problem. I couldn't know which branches are merged when I just see a commit object.</p>

<p>Is there a good way to know which branches are merged while just seeing a commit object?</p>
","2","2791425","",""
"54985589","7095660","2019-03-04 14:45:00","2","71","<git><rebase><git-commit>","How to amend history commit message without overwriting PRs and changing the authors?","<p>I've googled the method to ""amend history commit"" by typing</p>

<pre><code>git rebase -i c27f02e
</code></pre>

<p>, and then change the <code>pick</code> to <code>squash</code> or <code>reword</code>.</p>

<p>These operations can successfully</p>

<ul>
<li>amend the history commit messages and</li>
<li>combine multiple history commits</li>
</ul>

<hr>

<p>In the certain repo, since there are commit histories that I merged from other contributors' PRs, like:</p>

<pre><code>Merge pull request #80 from XXX/patch-1
</code></pre>

<p>Amending the commit histories will cause the following issues:</p>

<ol>
<li>overwriting the above commit message and</li>
<li>the authors of the PRs I've merged will become both <code>ORIGNAL_AUTHOR &amp; ME</code> from just <code>ORIGINAL_AUTHOR</code></li>
</ol>

<p>I don't want the above situations to happen.</p>

<p>I wonder if there's any way to amend the commit histories <strong>without changing the above</strong>.</p>

<p>I found something in <a href=""https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing"" rel=""nofollow noreferrer"">this article</a>.</p>

<blockquote>
  <p>But, there are two trade-offs for this pristine commit history: safety and traceability. If you don’t follow the Golden Rule of Rebasing, re-writing project history can be potentially catastrophic for your collaboration workflow. And, less importantly, <strong>rebasing loses the context provided by a merge commit—you can’t see when upstream changes were incorporated into the feature</strong>.</p>
</blockquote>

<p>Thank you!</p>
","0","7095660","",""
"54987430","10913544","2019-03-04 16:25:35","1","496","<git><commit><git-commit>","git commit message in one line?","<p>Is there a way to show the whole commit message in one line?</p>

<p>Here is my commit message:</p>

<pre><code>git log -1

here this is a change
it is a empty change
</code></pre>

<p>Output:</p>

<pre><code>here this is a change it is a empty change
</code></pre>
","1","10913544","0","0"
"72697244","18950617","2022-06-21 08:04:03","0","69","<git><git-merge><git-commit><git-squash>","How Can I git squash commit after PR completed?","<p>In our projects, We use policy squash merge for merging and release our project when merge release branch to master branch. one of my co-worker use no fast-forward merge and put all develop's history commits in master's history commit.
I search the internet and I got the below solution:</p>
<pre><code>git checkout master
git reset --hard &lt;master commit before latest merge&gt;
git push -f origin master
</code></pre>
<p>I don't like doing it because I delete the release branch. How Can I squash commit after the merge?</p>
","0","18950617","",""
"72700116","19382226","2022-06-21 11:40:06","0","163","<git><git-merge><git-commit>","How to sync git repos when two people are working on them and changing the commit history simultaneously?","<p>I am currently working on reordering, squashing and changing some stuff in a git branch which has a lot of pending commits (currently around 300) that needs to be merged.
I am facing difficulties working on it simultaneously.</p>
<p>Consider that the branch currently has commits <code>A-B-C-D-E-F-G-...</code> and so on, where A is the oldest commit that is not merged to the target branch. Now I make some changes, to say commit D (squash some bug to it, reorder it, etc.). Now my branch would look like <code>A-B-C-D1-E1-F1-G1-H1-I1-...</code> and so on (the commit hash changes for D and any commits newer than D).</p>
<p>Suppose at the same time another person does some other change to say, commit H. Now on his local branch, it would seem like <code>A-B-C-D-E-F-G-H2-I2-J2-K2-...</code> and so on.
Now, either of us pushed our changes to the remote branch (suppose I do it). Now on remote branch, the commits are <code>A-B-C-D1-E1-F1-G1-H1-I1-...</code> and so on, while on person B's local branch, it is <code>A-B-C-D-E-F-G-H2-I2-J2-K2-...</code> and so on.</p>
<p>My main issue is, how can person B rebase his local branch in a manner that would allow him to pull the changes pushed to the remote branch, while keeping his changes which he made in the local branch (something like <code>A-B-C-D1-E1-F1-H3-I3-J3-...</code> and so on. I am okay with some merge conflicts arising, but don't want to lose changes made by either person A or person B). Can someone suggest a good approach to tackle this problem?</p>
","4","19382226","",""
"72702051","11360647","2022-06-21 13:52:50","-1","680","<git><macos><git-commit><atlassian-sourcetree><git-gui>","Sourcetree commit description","<p>How can I write a description to my commit message through the client? I’ve been searching around for this but not find anything.</p>
<p>My goal is to have something like:</p>
<pre><code>This I my commit message.
And this is the description that explains the message a bit more in case I need it
</code></pre>
<p>I know you can achieve this via terminal for example.</p>
<p>Thanks!</p>
","1","11360647","",""
"13102683","714232","2012-10-27 17:57:18","2","643","<git><git-commit><git-add>","Difference between ( git add -A followed by git commit ) and git commit -a?","<p><code>git add --all</code> or <code>git add -A</code> followed by <code>git commit -m ""commit message""</code> seem to produce a different result from <code>git commit -am ""commit message""</code> when I thought they would produce the same final result.</p>

<p>Am I doing something wrong with <code>git commit -am ""commit message""</code>?</p>

<p>Also is <code>git commit -a -m ""commit message""</code> the same as <code>git commit -am ""commit message""</code>?</p>
","0","714232","0","0"
"55051203","606961","2019-03-07 19:11:40","1","767","<git><git-commit><git-add>","How do I commit only ""git add -p file"" changes without other changes to same file and without staged renamings?","<p>The problem is that I cannot apparently make a partial commit of four lines' worth of changes in a file, out of about all 200 or so changed lines in that file. It might be due to the command I mistakenly did and then supposedly corrected. I am an experienced git user and I have done this sort of task before, but I always did it without making a mistake previously. </p>

<p>Here is what I did.</p>

<p>I have a file with 3 or 4 changes to it, including one that I think might be desirable even if the other changes are too experimental.</p>

<p>I also have some renamed files, so the renames are staged.</p>

<p>I did the usual <code>git add -p file</code> step and verified that <code>git diff --cached file</code> showed exactly the change I wanted to check in.</p>

<p>I accidentally did <code>git commit -m ""Message""</code> (omitting the file name I should have included) and it committed the (staged) renames, which was not desired, as well as <code>file</code>.</p>

<p>Then I backed that commit out with <code>git reset HEAD~1 --soft</code>. This canceled the commit, but left <code>file</code> in a staged state, with ALL the changes, not just the <code>add -p</code> changes, as shown by <code>git diff --cached file</code>.</p>

<p>Because I didn't want all the changes staged for commit yet, I reset the file with <code>git reset HEAD file</code>. At this point <code>git status</code> and <code>git diff</code> seem to show that I am back to the state I was in before the <code>git add -p file</code> command. </p>

<p>The problem is that, at this point, if I do the following with only the desired change accepted during the add,</p>

<pre><code>git add -p file
git commit file -m ""Message""
</code></pre>

<p>The status shows all the changes to <code>file</code> getting committed. The line counts show way too many lines after the commit is completed.</p>

<p>I how do I only commit what I chose during <code>git add -p file</code> now that it seems like I am blocked from doing so?</p>

<p>Commentary: Ordinarily I don't have staged renames, so ordinarily I don't have to try to specify the file I want to commit. I think that the meaning of <code>git commit file</code> is not the meaning I need for my purpose. From reading the man page, I think what it's trying to say is that it doesn't matter what is staged for <code>file</code> when you do <code>git commit file</code>, it will commit that file's complete set of changes. Also <code>git commit -p file</code> will do the right thing for <code>file</code> after letting me pick the change interactively, but it will also commit the unrelated renamings that are staged. </p>
","4","606961","",""
"13131342","1071136","2012-10-29 23:53:52","2","252","<git><version-control><commit><git-commit><git-revert>","Coalescing adjacent commit and its revert","<p>I have a peculiar commit log which looks like that,</p>

<pre><code>A --&gt; B --&gt; C --&gt; D
</code></pre>

<p>where each letter is a commit. It appears that C is a revert of B, so basically the history would be the same as</p>

<pre><code>A --&gt; D
</code></pre>

<p>Is there a way to ""sum"" the B and C commits ? The changes haven't been pushed yet.</p>
","1","1071136","",""
"55070140","826815","2019-03-08 19:55:10","0","39","<git><git-branch><git-commit><gitkraken>","Can specific commits be pushed to a branch graphically, by GitKraken or any other alternative?","<p>As said <a href=""https://stackoverflow.com/questions/3230074/how-can-i-push-a-specific-commit-to-a-remote-and-not-previous-commits"">here</a> and specifically answered <a href=""https://stackoverflow.com/a/4512933/826815"">here</a>, one can push specific commits (and everything before them) to a branch by writing on a terminal</p>

<pre><code>git push &lt;remotename&gt; &lt;commit SHA&gt;:&lt;remotebranchname&gt;
// example -&gt; git push origin 712acff81033eddc90bb2b45e1e4cd031fefc50f:master
</code></pre>

<p>The question is, can this be done <strong>graphically</strong> in <strong>GitKraken</strong>? If not, is there <strong>any program</strong> that can do this through a graphical interface?</p>

<p><em>*The reasoning of wanting to push specific commits is to sort-of deploy on a controlled manner different updates of a website, which is synced to a github repository (netlify)</em></p>
","2","826815","",""
"55082655","7209900","2019-03-09 22:38:32","0","2362","<github><git-branch><git-commit><git-fork>","Git commits not showing on repo that I forked","<p>So, my friend made a repository, made me a collaborator, I branched out, forked and then cloned into my IDE.<br>
Everything went fine with that, did some small changes and then wanted to test commit and push.<br>
Commits and push went to my friends repo, everything is fine there, but they are not showing on my fork. <br>
I'm doing it this way (hope it's not the wrong way) to practice these kind of things and I would like to have that project on my profile after I'm done.<br>
Thanks.</p>
","1","7209900","",""
"72729282","19334240","2022-06-23 11:20:24","2","438","<git><github><git-commit><git-push><git-reset>","i lost my readme file because i did 'git push --force' in local but I don't know how to get it back. The readme file was created in remote","<p>I lost my readme file because I did</p>
<pre><code>git push -f origin main
</code></pre>
<p>in local. But I don't know how to get it back.</p>
<p>I found this solution</p>
<pre><code>git reset before-commit
git push -f origin main
</code></pre>
<p>The readme file was created in remote. So before commit doesn't have readmefile<br />
so i can't use this solution.<br />
I want my file back</p>
<p>I don't know if I explained it well because I don't speak English, but thank you in advance.</p>
","1","19334240","",""
"13158938","1070732","2012-10-31 13:20:13","5","695","<repository><git-commit><git>","trouble in using ""git commit -a"" command","<p>I am trying to commit all my changes by using following command </p>

<pre><code>git commit -a
</code></pre>

<p>Note : I want to commit without any ""commit message""</p>

<p>but when I execute above command it shows me the screen shown below, and I don't know how to get out of this screen to complete my commit.</p>

<p><img src=""https://i.stack.imgur.com/A0Ndb.png"" alt=""enter image description here""></p>
","1","1070732","0","0"
"55088213","8249255","2019-03-10 13:33:08","1","787","<github><command-line><commit><github-pages><git-commit>","Change commit name - Github","<p>I need to know how I can change this commit name:</p>

<p><img src=""https://i.stack.imgur.com/EnMSZ.png"" alt=""enter image description here""></p>
","3","8249255","0","0"
"72731608","2526586","2022-06-23 14:09:03","0","256","<git><eclipse><git-commit><egit>","Splitting changes into 2 commits for git","<p>I have a master branch on git. Using EGit on Eclipse, I have downloaded on my local repo and I have made some changes on many files.</p>
<p>I have already made a huge chunk of changes on many tracked files locally, originally planned for one fat commit. These files have not been added to staged yet. The management wants me to split the changes into 2 independent commits, one after another. What are the steps for me to do that? How do I split the local changes into two versions(or two repos?) locally so that I can commit one after another?</p>
<p>I also have some changes in the same file that needs to split into two commits. How can I do that? I heard there is something called git stash but would that help me to work on one commit after another?</p>
<p>I am new to git, so please explain things in simple English and preferably in break-down steps. Thank you very much. Appreciated!</p>
","13","2526586","",""
"13165505","169252","2012-10-31 18:40:54","0","556","<php><git><version-control><git-commit>","git config files for php app","<p>So here's what happened:</p>

<ul>
<li>I have a local repo for dev</li>
<li>pushed to origin master</li>
<li>from my test env I always do <code>git pull</code> to update</li>
</ul>

<p>Now of course I have different config files in the test env.
I locally changed my config file on test env.
In a hurried moment (...) I committed my local changes after a merge was conflicting.
Now the app runs fine, but git tells me </p>

<blockquote>
  <p>Your branch is ahead of 'origin/master' by 13 commits.</p>
</blockquote>

<p>I understand, as I committed my local change - which I do NOT wish to push to master.
What would be the correct way to fix this? I want to:</p>

<ul>
<li>Have my local copy of the config file</li>
<li>do not want to mess up with the basically correct config on the test env</li>
<li>get rid of the 'your branch is ahead' message</li>
<li>keep my master and my test env clean</li>
</ul>

<p>Thanks!</p>
","4","169252","",""
"55092922","1299270","2019-03-10 22:10:44","1","167","<git><branch><diff><git-commit>","Create git commit from diff in another branch without switching","<p>I am wondering if it is possible to commit changes represented as a diff in a separate local branch without switching to this branch.</p>

<p>To put things in a perspective let's assume that I am working on the <code>master</code> branch and have a diff represented as a file <code>raw.diff</code>. Now I would like to apply this diff to the new local branch (or a tag) <code>needs_change</code> and commit changes without switching from the <code>master</code>.</p>

<p>I know that in a regular flow I would do something like this:</p>

<pre><code>git checkout -b needs_change             # create and switch to local branch
git apply raw.diff                       # apply diff in needs_change
git commit -am ""New commit with changes"" # commit changes
git checkout master                      # switch back to master branch
</code></pre>

<p>However in this sequence of steps I have to switch to the <code>needs_change</code> branch and I am wondering if I can avoid this somehow.</p>

<p>Thanks in advance!</p>
","0","1299270","",""
"47784319","2604472","2017-12-13 01:46:22","2","1235","<git><bash><github><git-commit>","Git commit message messed up when stored in a variable","<p>I have a Git commit, which has a summary, and then some description. So when I see the commit message via <code>git log --format=%B -n 1 &lt;commit&gt;</code>, it looks like this:</p>

<p><code>Commit Summary Line
* Commit Description Line 1
* Commit Description Line 2
* Commit Description Line 3</code></p>

<p>When I try to store this in a Bash variable, however, thus:</p>

<p><code>message=$(git log --format=%B -n 1 &lt;commit&gt;)</code></p>

<p>and then I try to <code>echo $message</code>, I get the folder names from my current directory mixed with each of the lines from the commit message. What's more, I am not even seeing all lines from the commit message, just some of them. So, <code>$message</code> looks something like this:</p>

<p><code>Commit Summary Line folder1 folder2 folder3 Commit Description Line 1 folder1 folder2 folder3 Commit Description Line 3</code></p>

<p>Is there any explanation for this behavior? I just want <code>$message</code> to have all lines from the full commit message. I don't even care if they are in new lines or all in one line, I just want all lines stored in a string variable. How do I achieve this?</p>
","1","2604472","0","0"
"55097265","1668622","2019-03-11 07:46:43","1","208","<git><git-submodules><git-commit><git-remote>","Git: how do I make sure I don't commit/push hashes to submodules which haven't been pushed to remote yet?","<p>I'm sure you know the situation but I don't know the correct wording:</p>

<p>I have a repository with a couple of submodules which I work on in the context of the main repository - i.e. I often have to change the content of the submodules rather than working on them somewhere else separately.</p>

<p>When I've added/committed changes to those submodules, quite often I commit/push the submodules new commit ID but forget to <em>push</em> the submodule itself.</p>

<p>Locally this is no problem and hard to identify but of course the build breaks because even the checkout goes wrong.</p>

<p>I know with git this situation is not easy to handle in a general way because of how remotes work but there <em>must</em> be approaches to avoid this situation.</p>

<p>What is yours? Is there a git intrinsic method?</p>
","5","1668622","0","0"
"55097370","4046770","2019-03-11 07:54:54","4","2555","<git><git-commit>","Wrap lengthy hyperlink in git commit","<p>When some hyperlink (or web page link) is included in the git commit message, I am able to click on the link and it is opening in the new browser tab.</p>

<p>I want to include a hyperlink in a git commit message. Hyperlink length is greater than 80 characters. I am able to wrap normal text to next line with <code>set textwidth=80</code></p>

<p>I want to wrap that link to the next line in the message such that when I click on the link (or copy link option), the respective page should open in the browser.</p>
","7","4046770","0","0"
"72744458","11111289","2022-06-24 12:58:01","0","15362","<bash><git><git-commit><pre-commit><pre-commit.com>","""Pre-commit"" command is not found by bash but is installed on macOS","<h2>Problem Description</h2>
<p>I'm having trouble making commits, when I try to make a commit with the command, for example:</p>
<pre><code>$ git commit -m &quot;add readme&quot;
pre-commit not found. Install pre-commit with the command pip3 install --user pre-commit or follow the steps on official documentation: https://pre-commit.com /#install
</code></pre>
<p>Following the steps described in the pre-commit installation documentation I installed by the command:</p>
<pre><code>$ pip install pre-commit
</code></pre>
<p>However when I trigger the command the following error occurs:</p>
<pre><code>$ pre-commit --version
bash: pre-commit: command not found
</code></pre>
<p>My attempt fails, so I've tried some other solutions for this but they didn't work.</p>
<h3>Export bash:</h3>
<p>I already tried <a href=""https://stackoverflow.com/a/26020688/11111289"">this solution</a> described that would be to export my <code>~./bashrc</code> with the command: <code>source ~/.profile</code> but the following error happens:</p>
<pre><code>bash:/Users/pvieira/.profile: No such file or directory
</code></pre>
<h3>Install using homebrew:</h3>
<p>This results in the same error that occurs when manually installing by <code>pip</code> above.</p>
","2","11111289","0","0"
"55145040","11197864","2019-03-13 15:02:15","0","1258","<git><git-commit><git-add>","Why add and commit in git?","<p>I'm new with <a href=""/questions/tagged/git"" class=""post-tag"" title=""show questions tagged &#39;git&#39;"" rel=""tag"">git</a> and I ask me why I have to use '<code>git add</code>' and '<code>git commit</code>' to commit a file into my repository.</p>

<hr>

<p>With all IDEs I tried it is just one click to commit a file. This means the IDE combines 'add' and 'commit', right?!</p>

<p>And so I can't find any reason why it made sense to program both commands.  </p>
","3","11197864","",""
"55188394","7262914","2019-03-15 18:02:05","1","113","<git><visual-studio><git-commit>","Visual Studio default changes message","<p>It there any way for Visual Studio 2017 Team Explorer to show a default message in the <strong>Changes</strong> text-box?</p>

<p>I already tried the both methods, <code>prepare-commit-msg</code> and <code>commit.template</code>, described <a href=""https://stackoverflow.com/questions/3966714/how-can-i-change-the-default-comments-in-the-git-commit-message"">here</a>, but it doesn't seem to work.</p>
","2","7262914","",""
"29346787","2470680","2015-03-30 12:53:52","0","98","<git><branch><git-branch><git-merge><git-commit>","How to merge two branches with Git based on file differences instead of commits?","<p>I have a question regarding the merging process which can be quite difficult when using Git.</p>

<p>I'm familiar with most commands and got a good-running local repository on a different machine (on which I commit changes for our live-server at this moment). I also know the complete workflow within Git (Local Repos/Index/Workspace etc).</p>

<p>The problem is on my own development machine (standard Win8 machine).</p>

<p>I had a lot of trouble merging two branches and whatnot and finally solved all conflict with ""git mergetool"" command only to find out that not all files are merged.</p>

<p><strong>Situation</strong>
I have my own branch on which I'm developing software, lets call it ""myBranch"". Then we have the ""release"" branch which is our final stage before we push to the live-server. I need to have all the code of ""release"" in ""myBranch"". They have a common ancestor at some point. </p>

<p>The thing right now is (after weeks of struggling getting everything to work, hence my frustration) there are pieces of code in ""release"" that aren't in ""myBranch"". Running ""git merge"" gives me the message ""Already up-to-date"". </p>

<p><strong>Question</strong> 
Thus my question is: How can I let Git compare two branches based on actual file differences instead of commit differences so I can merge code I haven't got in my own branch yet, code that exists on the ""release"" branch but is not seen as a difference.</p>

<p>If my question is not complete enough please ask for additions and I'll try to make it as complete as possible.</p>

<p>Thanks in advance!</p>
","5","2470680","",""
"55236406","11208147","2019-03-19 08:26:17","1","765","<nuget><teamcity><command-prompt><git-commit><nuspec>","Adding git commit-id to the .nuspec-file","<p>Trying to add git commit id to the .nuspec - for now just from the command prompt and then from teamcity.</p>

<p>Is there a way to do that?</p>

<p>Is this the right direction ""nuget pack -Properties Configuration=Release;commitId=SomethingSomething"" or am I totally lost?</p>

<p><a href=""https://i.stack.imgur.com/7X2pf.png"" rel=""nofollow noreferrer"">See picture for more info</a></p>
","2","11208147","",""
"66639810","10819994","2021-03-15 14:24:47","0","26","<git><commit><git-commit><git-push>","Remove git commits and navigate to master","<p>I am trying to delete commits that haven't been pushed yet. The only one in this list I want to commit is the one with the message MT, then I want to navigate to master if I'm not there already. I've tried <code>git reset HEAD~</code> and <code>git reset --hard</code> which didn't work.</p>
<p><a href=""https://i.stack.imgur.com/21esg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/21esg.png"" alt=""enter image description here"" /></a></p>
","0","10819994","",""
"72784266","18460115","2022-06-28 09:49:30","2","444","<git><android-studio><version-control><git-commit><ignore>","How to disable Git-commit with specific packages and files inside AndroidStudio?","<h2>The Problem</h2>
<p>I had a lot of files autogenerated by Android studio after I build the project, so when I try to <code>commit</code> the project, the commit section is full of files I didn't want to <code>commit</code> or <code>push</code> to the repo.</p>
<p><a href=""https://i.stack.imgur.com/u1sz5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/u1sz5.png"" alt=""enter image description here"" /></a></p>
<p><strong>How I can tell <code>Git</code> to don't care about these files and didn't commit or push them?</strong></p>
<h2>What I try</h2>
<p>I try to add the packages dir in the <code>.gitignor</code> file, but it seems nothing happens.</p>
<p><a href=""https://i.stack.imgur.com/fedu6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fedu6.png"" alt=""enter image description here"" /></a></p>
","1","18460115","0","0"
"30156715","4782840","2015-05-10 21:12:03","2","55","<git><github><command-line><git-commit>","How to clone previous repo version to local machine?","<p>I accidentally deleted all internal files from online GitHub repo - directory is now empty but still in existence - PLUS the repo has been removed from  local machine as well </p>

<p>Normally a GitHub clone would be used to get repo back on machine, git revert etc for online version, but this will not work for obvious reasons</p>

<p>How does one revert back to previous version of the project (one commit behind current) in this situation? </p>

<p>please help!  </p>
","0","4782840","",""
"30175018","2712050","2015-05-11 18:28:33","11","7744","<git><git-commit>","Why am I committing a bunch of desktop.ini files despite .gitignore?","<p>I don't understand what happened. I did </p>

<pre><code>git add .
git commit
</code></pre>

<p>and suddenly I see a list of a bunch of desktop.ini files committed.</p>

<p>(I don't understand why previous commits did not get any of them, and what might have suddenly changed, but that's an aside)</p>

<p>So, I undid the commit</p>

<pre><code>git reset --soft HEAD~1
</code></pre>

<p>Added a line to .gitignore:</p>

<pre><code>./**/desktop.ini
</code></pre>

<p>And did another </p>

<pre><code>git add .
git commit -m ""test""
</code></pre>

<p>Still adding a bunch of desktop.ini. What am I doing wrong?</p>
","1","2712050","0","0"
"55282403","10997124","2019-03-21 14:12:59","2","851","<git><github><git-commit><git-push>","All Commits From Every Branch Displayed During Pull Request on Github","<p>Every time I push up code from my working branch that was either created by branching off another branch or branching off master, and I create a pull request and then all commits I have ever made show up on the pull request. These commits go 2 months back and are from multiple branches Anyone know why?</p>
","0","10997124","0","0"
"72795961","19440457","2022-06-29 04:57:23","1","57","<ruby><git-commit><pre-commit-hook>","Error in committing rubyonrails code in Github","<p>I tried committing my Ruby on Rails code from Github desktop, and I got the below<br />
error, please help me how to resolve this error and commit my code?</p>
<pre class=""lang-none prettyprint-override""><code>.git/hooks/commit-msg:167:in `validate': undefined method `keys' for nil:NilClass (NoMethodError)
    from .git/hooks/commit-msg:211:in `&lt;main&gt;'
</code></pre>
","1","19440457","0","0"
"66650374","13742862","2021-03-16 07:00:28","0","354","<git><git-commit><git-rebase>","git fixup: get hash of original commit","<p>How does <code>git rebase -i --autosquash</code> know the original commit associated with a fixup? It seems the only &quot;metadata&quot; that <code>git commit --fixup</code> creates is the log message (&quot;fixup!&quot; + original message). The original commit hash is not stored anywhere in the fixup commit (at least, not that I can tell from <code>git show --raw</code>).</p>
<p>So given the fixup commit, how can I find the original commit being fixed?</p>
<p>I'm asking because <code>git rebase</code> <em>still</em> wants you to type a commit hash, even if it should be implied from fixup that I want <code>&lt;original-hash&gt;^</code>; maybe an alias is in order.</p>
","0","13742862","",""
"55307354","773202","2019-03-22 20:28:57","1","394","<git><git-commit><unstage>","Remove unstaged, uncommitted files in git when checking out a different branch","<p>I deleted both the local and remote branches for a particular branch</p>

<pre><code>git branch -d branchName
git branch --delete --remotes origin/branchName
</code></pre>

<p>When I checkout out a different branch, I am still seeing the untracked/uncommitted files when I run <code>git status</code>.  </p>

<p>Those files don't have any changes that I want to keep or stage or commit. I don't want to see them sitting in the area when I run <code>git status</code> on the different branch</p>

<pre><code>Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   ../../../../path/to/folder/file.html
    modified:   ../../../../path/to/folder/file.js
</code></pre>

<p>I want to see this when I run <code>git status</code> on any branch I checkout</p>

<pre><code>On branch proj/branch/#
Your branch is up to date with 'origin/proj/branch/#'.

nothing to commit, working tree clean
</code></pre>

<p>Is there a way to do this, if so, how is that done?</p>
","0","773202","",""
"13992650","963230","2012-12-21 15:19:30","12","10941","<git><version-control><intellij-idea><git-commit>","Why does my Intellij Git plugin not commit files once I click commit?","<p>Using IntelliJ 11.1.5, I was having trouble with committing my active changelist to my local Git repository.  When I would try to commit, I would observe that though the dialog would come up, clicking commit did nothing, and I would need to play with various configurations of unnecessary subchangelists, committing one file at a time, or unchecking the ""optimize imports"" and ""code analysis"" in order to get it to work.</p>

<p>Please note, that this was a somewhat random occurrence, and at other times this wouldn't be an issue.  In fact, when I switched to Git GUI or Git Bash the commits worked without incident. </p>

<p>So how do I fix things to be able to use the Git plugin?  </p>
","1","963230","",""
"55354764","5766339","2019-03-26 10:23:12","1","353","<git><metadata><git-commit>","Git commit metadata change history","<p>In Git it's possible to change a commit metadata (like the username and email for the author of the commit).</p>

<p>My question is: Is it possible to find out if metadata of some commit was changed? If yes, how?</p>

<p>Thanks </p>
","1","5766339","",""
"48724343","889075","2018-02-10 18:47:48","0","58","<git><merge><git-merge><git-commit>","Do commits of a merged branch become part of master branch after merge?","<p>Let say I have a <code>A-&gt;B-&gt;C</code> (<code>master</code>) branch and <code>A-&gt;B-&gt;D-&gt;E-&gt;F</code> (<code>develop</code>) branch.</p>

<p>After I merge <code>develop</code> into <code>master</code> a new merge commit is created, say <code>G</code>, so master now looks like <code>A-&gt;B-&gt;C-&gt;G</code> (master). <code>G</code> being a merge commit has two parents, <code>C</code> (master) and <code>F</code> (develop).</p>

<p>Are all interim commits on develop, i.e. <code>D-&gt;E-&gt;F</code>, now part of <code>master</code> after the merge operation?</p>

<p>I think they are since <code>D</code> or <code>E</code> or <code>F</code> can be reached from the merged commit <code>G</code> which surely is part of <code>master</code>, however I'm not sure. Could somebody confirm or clarify this?</p>
","0","889075","",""
"48726342","574371","2018-02-10 22:41:32","1","2311","<git><visual-studio-code><git-commit><git-add>","How to git stage an one by one the folder with files in Visual Studio Code?","<p>I have a folder with other subfolders. Then in each subfolder many files (over 1000). I want to stage, commit each subfolder at a time (not all subfolders folders at once). </p>

<p>Do I have in VSCode a way to do this easly form interface? Because I do not want to add 1000 files one by one to click the + sign.</p>
","2","574371","",""
"55384543","3865284","2019-03-27 18:51:19","2","1553","<gitlab><git-commit>","Unable to get all changed files details using GITLAB API","<p>I have 29 changed files in one commit id and when I try to get all the details using below GitLab API then I am not getting all the files.<br>
I am getting only 18 file details.</p>

<p>I tried with <code>per_page=100&amp;page=1</code> parameter but still not getting all changes.</p>

<pre><code>GET /projects/:id/repository/commits/:sha/diff
</code></pre>
","0","3865284","0","0"
"67060829","3760108","2021-04-12 15:05:19","2","639","<github><yaml><imagemagick><github-actions><git-commit>","GitHub Action using ImageMagick: Create a PNG and commit it to the repo","<p><strong>Background</strong><br />
I'm maintaining a forked <a href=""https://github.com/KasparJohannesSchneider/TwentySecondsCurriculumVitae-LaTex"" rel=""nofollow noreferrer"">repository</a> that contains a LaTeX project. The <code>README.md</code> contains a <code>.png</code> preview of the <code>.pdf</code> compiled from the example <code>.tex</code> file included in the repo. I often forget to update the <code>.png</code> version using the following ImageMagick command:</p>

<pre><code>magick convert -density 1200 -background white -alpha off Twenty-Seconds-Icons_cv.pdf -quality 90 Twenty-Seconds-Icons_cv.png
</code></pre>
<p>Thus I would like to automate this process using GitHub Actions.</p>
<p><strong>Workflow</strong><br />
I think the <code>main.yml</code> file should look something like this, however, I don't fully understand what I am doing.</p>
<pre class=""lang-yaml prettyprint-override""><code>name: PDF to PNG
on:
  push:
    branches:
      - kaspar
  pull_request:
    branches:
      - kaspar

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install ImageMagick
        run: sudo apt install imagemagick # Seems to work and already be included with ubuntu-latest...
      - name: Convert PDF to PNG
        run: # How?
      - name: Commit the updated PNG 
        run: # How?
</code></pre>
<p><strong>Output:</strong></p>

<pre><code>Run sudo apt install imagemagick
  sudo apt install imagemagick
  shell: /usr/bin/bash -e {0}

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
imagemagick is already the newest version (8:6.9.10.23+dfsg-2.1ubuntu11.2).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
</code></pre>
<p><strong>Questions</strong></p>
<ol>
<li>It seems like I can just run bash shell commands with <code>run: </code>; is this true?</li>
<li>How/where can I access the <code>.pdf</code> file in the repo from inside the GitHub Actions Ubuntu machine?</li>
<li>Where should I save the <code>.png</code> file, is there a <code>~</code> directory?</li>
<li>How can I commit the <code>.png</code> file generated by ImageMagick to the repo?</li>
<li>Would <code>git commit &lt;file&gt; -m &quot;updated png version of the CV&quot;</code> work?</li>
</ol>
","1","3760108","0","0"
"48742856","4544391","2018-02-12 09:13:01","-2","206","<git><git-commit><git-revert>","Git revert, how to undo my push merge to master?","<p>I modified one file and did the following:</p>

<pre><code>cd puppet-configuration-prod/
git status
git pull origin master
git add Puppetfile_puppet-prod
git commit -m 'modificaton Omar'
git pull origin master
git push origin master
</code></pre>

<p>But this pushed a lot of changes that I didn't want to. Please help to undo the following.</p>

<p>EDIT : Apparently since i haven't update my local repo in a while , i have pulled all the lastest commit and commited them again with my merge... what i should have used is --rebase while pulling.</p>
","2","4544391","",""
"55423223","3453898","2019-03-29 18:04:20","3","226","<git><git-commit><macos-mojave><git-ls-files>","git fails to stage files, show all files as duplicate but the char casing is not an issue","<p>In my case, I did simple one liner change to one of my file and wanted to commit my changes but noticed that commit -am &quot;&quot; did not add/commited the file.</p>
<p>After issuing git <code>ls-files --stage</code>, I see probably all files in my project showing as duplicates.  Here is example of one of the files</p>
<pre><code>100644 6314bd3f89d1b794c6d8c0fb9bb4aa492e2d510a 0   SquirrelFoH/Squirrel.FoH.ViewModels/UserLoginViewModel.cs
100644 6314bd3f89d1b794c6d8c0fb9bb4aa492e2d510a 0   SquirrelFoH/Squirrel.FoH.ViewModels/UserLoginViewModel.cs
</code></pre>
<p>Interestingly, some of the files showing ad duplicates are not modified by me at all, some are but nevertheless, they show as duplicate and as you can see below, the casing is not the issue like in other SO posts on here.</p>
<p><strong>UPDATE</strong></p>
<p>While this does not resolve my issue described above, it helped me to use <code>git reset --hard HEAD~1</code> which resets HEAD pointer to 2nd last commit which is the commit that worked.  I use <code>--hard</code> above to discard last commit since it caused the issue above for me.
If you need to keep these changes, using <code>--soft</code> instead will reset HEAD to your commit before last commit and add changes in last commit to staging area.</p>
<pre><code>git reset --hard HEAD~1
git reset --hard HEAD~2
git reset --hard HEAD~3
...
</code></pre>
<p>Above commands reset HEAD pointer 1, 2, 3, ... commits before last commit and discard any changes after. Use <code>--soft</code> instead of <code>--hard</code> if you dont want to discard these changes in which case these changes will be staged for you.</p>
<p>This is the situation I had.  Below, last commit is commit A which is the one with the duplicates that started showing up after last pull of remote changes into my local branch.  Commits B, C, ... are commits before commit A:</p>
<pre><code>commit A
commit B - git reseat --hard HEAD~1
commit C 
</code></pre>
<p>, now my last commit is commit B which does not have the duplicates.  I can now try to merge again and see if I will have the same issue as I had with commit A.  As I mentioned this does not solve the issue but at least allows me to try to recreate it or continue my work and deal with the merge later.</p>
","3","3453898","0","0"
"55423900","10738638","2019-03-29 18:52:58","1","3814","<git><git-commit><git-stash>","git workflow: should I commit before I pull?","<p>I read the following post:
<a href=""https://stackoverflow.com/questions/9588111/how-do-you-git-fetch-then-merge-error-your-local-changes-to-the-following-fil"">How do you git fetch then merge? &quot;Error: Your local changes to the following files would be overwritten by merge&quot;</a></p>

<p>I work with my friend on the same branch with git. When he did changes to our project and he pulls the project, he gets the error, that his local changes will be overwritten.</p>

<p>Is this a possible workflow in order to push his new changes:</p>

<pre><code>git commit 
git pull (or fetch and merge)
git push
</code></pre>

<p>Or is <code>git stash</code> better than <code>git commit</code></p>
","1","10738638","",""
"72853391","13000505","2022-07-04 07:54:17","0","42","<git><azure-devops><git-commit>","Deny existing code edits before deployment?","<p>Edits in existing IaC code should not be allowed. Only new code added to the file is allowed. Edits should either be denied when attempting to edit or at commit. Is this possible? Using Azure DevOps currently.</p>
","2","13000505","",""
"72857783","9442802","2022-07-04 13:47:29","0","1294","<git><unity-game-engine><github><git-commit><conflict>","Unity Github conflicting dwlt file","<p>We develop some game with my friend and sharing code and scenes with GitHub. Everything was fine but after one commit (where I add some new working script and deleted some trash from project) he has a conflict with this dwlt file (as in screenshot 1), but I have everything okay (as in screenshot 2). Project with changes working fine but we have strange conflict here. Can anybody help plz?</p>
<p><a href=""https://i.stack.imgur.com/BRL9E.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/BRL9E.jpg"" alt=""Screenshot from friend's Github Desktop"" /></a>
<a href=""https://i.stack.imgur.com/49gY3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/49gY3.png"" alt=""Screenshot from my Github Desktop with trouble commit"" /></a></p>
","2","9442802","0","0"
"55486872","9826652","2019-04-03 04:01:32","3","1767","<github><git-commit><git-history-graph><git-history>","How to delete an specific old commit without deleting the changes in the code (i.e change the git story basically)","<p>I have a repository, it's only mine, so there's no problem on breaking anything. Also there's only one branch, I think that makes things easier.
Let's say I have this 7 commits:</p>

<p>A -> B -> C -> D -> E -> F -> G</p>

<p>And I want to delete commits C and D</p>

<p>A -> B -> E -> F -> G</p>

<p>Being A the first commit ever made, and G the last commit.</p>

<p>How can I do that? Without touching my code, just the git history.</p>

<p>The only thing I know I can do is reset the Head, but that won't work since I don't want to remove E, F and G.</p>
","0","9826652","0","0"
"72863866","2628868","2022-07-05 04:01:45","0","193","<linux><git><terminal><git-commit>","why the commit hang after close the commit message edit window","<p>I am using <a href=""https://github.com/commitizen/cz-cli"" rel=""nofollow noreferrer"">cz-cli</a> to format the commit message right now. First step, using <code>cz</code> command in terminal then the terminal will popup a window in Visual Studio and type the commit message into it, after close the commit message edit window in Visual Studio, the terminal message was hang up. why did this happen? I have to using <code>ctrl + C</code> to forbidden to exit the commit process. I am not sure this is the right way to handle this situation.</p>
<p><a href=""https://i.stack.imgur.com/4qYw4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/4qYw4.png"" alt=""enter image description here"" /></a></p>
<p>PS: this command was to running in GitHub Codespaces.</p>
","0","2628868","0","0"
"55497656","4067690","2019-04-03 14:31:06","4","2922","<git><version-control><git-commit><conventions><commit-message>","Is it a bad practice to write multiline commit messages on git?","<p>My commit messages on git usually look like the following:</p>

<pre><code>* Fix bug abc
* Refactor xyz
* Document 123
* ...
</code></pre>

<p>I'm wondering whether this is a bad practice and I should prefer one-line commit messages or at least provide a header line.</p>

<p>On the other hand, this would be less comfortable to write ...</p>

<p>What are your recommendations?</p>
","5","4067690","",""
"55503773","2241384","2019-04-03 20:29:36","3","2413","<git><version-control><git-commit><gitkraken>","Gitkraken repo, failing to checkout branch, then suddenly deleting dozens of files","<p>As will soon become clear, I'm not a master of Git or even Gitkraken. As such, I just have a hotfix, a master and a feature branch. I make changes in hotfix, commit, push, and merge into master (which I then also push). So far I've endeavored not to get more complicated than this.</p>

<p>Even my one feature branch is a bit cowardly, in that that I still keep my feature work separate (in separate files/directories) from my working files, and consistently merge master into the feature branch so I don't lose all the site's hotfixes – all so that my crucial site files are kept whole and untouched regardless of branch. I consider this an intermediate practice as I continue to maintain the site while getting my head around Git. Since now I'm having this bizarre issue, I can see why I hadn't taken that leap yet. Apparently I'm indeed <em>not</em> ready to power-use Git or Gitkraken.</p>

<p>This morning, I did some work on hotfix, and merged it into master. No issue. Then I tried to switch to the feature branch (which I hadn't been in for weeks as it has been all about hot fixes lately), and all hell broke loose. Gitkraken throws the error: ""Checkout failed. Could not remove [swf file - one that was there long before my last commit] Operation not permitted."" What? Web searches with these key phrases turned up literally nothing... making me the first person to have this happen, I guess.</p>

<p>Then!... immediately, still in hotfix and having done nothing further, suddenly there are 27 file changes staged and ready to commit! All of them deleted files, and <em>none</em> of which did I actually throw away. Some of them I didn't even touch since my last commit, others were new files I had made. </p>

<p>I was able to simply undo-button my way back and restore those deleted files, but this did inexplicable things to the Gitkraken timeline (see <a href=""https://postimg.cc/ppw9zFNn"" rel=""nofollow noreferrer"">https://postimg.cc/ppw9zFNn</a>) that I have no way of understanding... somehow it involves changes having been made to the feature branch (aka JQMUpdates5 in the screen cap) that I was unable to switch to...?</p>

<p>At least I got those deleted files back. However, I'm unable to move forward or to restore my repo to a workable state. Even after restoring to this morning's state via Time Machine, and attempting to retry the process, I get the same result.</p>

<p>The only thing I can think of is that the file GK ""could not remove"" is locked in the Finder. This shouldn't be an issue since this file is the same as many others like it in the repo – all of which are also locked n the Finder.</p>

<p>Other than that, it occurs to me I did not push master before trying to switch to feature – like I usually do. But as far as my meager understanding goes, it shouldn't be necessary to update the remote master branch before switching to a different local branch...</p>

<p>I need help. Is this a bug? Is my repo corrupted? The upshot seems to be that although I personally didn't delete any files, GK seems to randomly be doing it for me when I try (unsuccessfully) to switch to the JQMUpdates5 (feature) branch.</p>

<p>I'm trying to understand why my hotfix branch was in a fully up-to-date state until trying to switch to the feature branch, when suddenly GK trashes dozens of files and stages these deletions in one fell swoop. Undoing isn't helpful – just complicates the issue – and now I'm so spun around I have no clue how to get my repo back. It would be an absolute  disaster for me to lose JQMUpdates5 branch, as it contains a huge amount of dev work.</p>

<p>I'm not sure how helpful my description of the problem is (because this is confusing as anything I've encountered), but I'd sure appreciate some guidance if anyone has any insight.</p>
","0","2241384","",""
"72895101","7979746","2022-07-07 09:07:16","0","79","<git-commit><jenkins-declarative-pipeline>","How to get the latest git commit time of another repository from a Jenkins declarative pipeline","<p>I have a declarative pipeline. In this pipeline I want to add a verify step to check the last code commit time which lies in another repository. Based on the commit time, I do have to proceed with the next steps.
I am facing issues in fetching the commit time. I am very new to git commands, so unable to resolve the issue.</p>
<p>Points - My Jenkins file is in one repository, and I need the commit details of another repository. I need specifically the commit time (Epoc)</p>
<p>My code looks like this -</p>
<pre><code>@Library('xx-libs') _
pipeline {
agent any
options {
    timeout(time: 2, unit: 'HOURS')
}
parameters {
    xxxxx     
}
environment {
    xxxxxx
}
stages {
    stage('Checkout source code') {
        steps {
            script {
                checkout ([$class: 'GitSCM',
                    branches: [[name: '*/'+branch]],
                    extensions: [
                        [$class: 'CloneOption', noTags: true, timeout: 20],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: '/tmp/core/'],
                        [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'code/System/Infra/Version/version.cpp']]],
                        [$class: 'CleanBeforeCheckout']
                    ],
                    userRemoteConfigs: [[
                        credentialsId: 'azure-bearer-auto-updated',
                        url: 'https://xx.xx.com/xxx/xxx/_git/core'
                    ]]
                ])
                git_time = sh script: &quot;git show -s --format=%ct&quot;, returnStdout: true
                echo &quot;$git_time&quot;
            }
        }
    }
} // stages
</code></pre>
<p>}</p>
","0","7979746","",""
"55582892","1999165","2019-04-08 22:58:02","2","1215","<git><code-formatting><git-commit><pre-commit-hook>","Unexpected behavior with ""git commit ."" when pre-commit hook modifies staged files","<p>In my experience <code>git commit -a</code> has had equivalent behavior to <code>git commit .</code> However, recently I have created a pre-commit hook that automatically formats my source code and now <code>git commit .</code> has some unexpected side-effects: the file that is committed ends up as modified in the working directory and in the index after the commit command finishes. This doesn't happen with <code>git commit -a</code>. I'm trying to understand what is going on behind the scenes when running <code>git commit .</code> that is causing this to happen and see if there is a way to handle it properly within my pre-commit hook script.</p>

<p>pre-commit hook:</p>

<pre><code>git_toplevel=$(git rev-parse --show-toplevel)

git --no-pager diff -z --cached --name-only --diff-filter=ACMRT | $git_toplevel/meta/reformat.bash -s files
git --no-pager diff -z --name-only --diff-filter=ACMRT | xargs -0 --no-run-if-empty git add
</code></pre>

<p>Currently using git version 1.8.3.1 but am seeing the same behavior in more recent versions.</p>

<p>Here are the sequence of commands for a simple space added at the beginning of a line:</p>

<pre><code>[]$ git status
# On branch eroller/format-clean-filter
# Your branch is ahead of 'origin/eroller/format-clean-filter' by 1 commit.
#   (use ""git push"" to publish your local commits)
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   src/host/cnv/denovo/denovo_cnv.cpp
#
no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>-</p>

<pre><code>[]$ git diff
diff --git a/src/host/cnv/denovo/denovo_cnv.cpp b/src/host/cnv/denovo/denovo_cnv.cpp
index 7cfb8dc..14058e3 100644
--- a/src/host/cnv/denovo/denovo_cnv.cpp
+++ b/src/host/cnv/denovo/denovo_cnv.cpp
@@ -28,7 +28,7 @@ using namespace std;
 namespace cnv {
 namespace denovo {

-SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
+ SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
 {
   function&lt;SegmentsBySample::value_type(const string&amp;)&gt; loadCalls = [&amp;](string callFile) {
     return LoadCalls(callFile, reference);
</code></pre>

<p>-</p>

<pre><code>[]$ git commit -m 'test' .
</code></pre>

<p>-</p>

<pre><code>[]$ git status
# On branch eroller/format-clean-filter
# Your branch is ahead of 'origin/eroller/format-clean-filter' by 2 commits.
#   (use ""git push"" to publish your local commits)
#
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
#       modified:   src/host/cnv/denovo/denovo_cnv.cpp
#
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   src/host/cnv/denovo/denovo_cnv.cpp
#
</code></pre>

<p>-</p>

<pre><code>[]$ git diff
diff --git a/src/host/cnv/denovo/denovo_cnv.cpp b/src/host/cnv/denovo/denovo_cnv.cpp
index 14058e3..7cfb8dc 100644
--- a/src/host/cnv/denovo/denovo_cnv.cpp
+++ b/src/host/cnv/denovo/denovo_cnv.cpp
@@ -28,7 +28,7 @@ using namespace std;
 namespace cnv {
 namespace denovo {

- SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
+SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
 {
   function&lt;SegmentsBySample::value_type(const string&amp;)&gt; loadCalls = [&amp;](string callFile) {
     return LoadCalls(callFile, reference);
</code></pre>

<p>-</p>

<pre><code>[]$ git diff --cached
diff --git a/src/host/cnv/denovo/denovo_cnv.cpp b/src/host/cnv/denovo/denovo_cnv.cpp
index 7cfb8dc..14058e3 100644
--- a/src/host/cnv/denovo/denovo_cnv.cpp
+++ b/src/host/cnv/denovo/denovo_cnv.cpp
@@ -28,7 +28,7 @@ using namespace std;
 namespace cnv {
 namespace denovo {

-SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
+ SegmentsBySample LoadCallsForSamples(const vector&lt;string&gt;&amp; callFiles, const ReferenceDictionary&amp; reference)
 {
   function&lt;SegmentsBySample::value_type(const string&amp;)&gt; loadCalls = [&amp;](string callFile) {
     return LoadCalls(callFile, reference);
</code></pre>

<p>UPDATE: Using the very thorough answer from @torek (thanks!), I decided to give an error in the pre-commit hook if the user tries to use <code>git commit .</code> or <code>git commit [--only] -- &lt;files&gt;</code>. Here is the check in my pre-commit script:</p>

<pre><code>if [[ $GIT_INDEX_FILE != *""/index"" ]] &amp;&amp; [[ $GIT_INDEX_FILE != *""/index.lock"" ]] ; then
  echo ""Error: pre-commit reformatting using unsupported index file ($GIT_INDEX_FILE)."" &gt;&amp;2
  echo ""       Are you using 'git commit [--only] -- &lt;files&gt;' to bypass staging?"" &gt;&amp;2
  echo ""       Use git commit -a or stage your files before committing using git add -- &lt;files&gt;"" &gt;&amp;2
  echo ""       Use '--no-verify' to bypass reformatting (not recommended)"" &gt;&amp;2
  exit 1
fi
</code></pre>
","0","1999165","",""
"55595535","3915489","2019-04-09 14:45:46","1","148","<git><github><git-commit>","How can i calculate subfolder's life time git commit size?How much subfolder is occupying in overall git repository size?","<p>My git repo looks like this 
foo (root) 
/src
/test
There are two folders under foo, src, and test i can calculate overall repo size by using git gc command 
but i want to know how much /test's contribution in overall repo size</p>
","0","3915489","",""
"72909421","19239723","2022-07-08 09:32:23","1","183","<visual-studio><git-commit><visual-studio-2022>","Change the default ""Add project files."" message in Visual Studio when creating a GIT repository","<p>I am trying to edit the default commit message that Visual Studio uses when <strong>first creating a repository</strong> from inside the GIT menu.</p>
<p>By default it matches the language of the computer.
For example in English it's &quot;Add project files.&quot; In Italian it's &quot;Aggiungere i file di progetto.&quot;
<a href=""https://i.stack.imgur.com/8hNd3.png"" rel=""nofollow noreferrer"">Screenshot of a test repository</a></p>
<p><strong>Is there a way to change this message once and for all?</strong></p>
<p><s>The worst thing is, by default VS pushes the commit to GitHub when creating a repository, so you can't use git amend locally.<br />
I have searched the whole web for this issue, and all solutions seem to involve git rebase commands.</s><br />
<em>Found the &quot;create only local&quot; option, now I can use git amend.</em><br />
It works, but I'd like to avoid doing that everytime because it's time consuming.</p>
<p>Thanks in advance</p>
","4","19239723","",""
"55630514","11345596","2019-04-11 10:39:55","1","275","<linux><git><ssh><gitlab><git-commit>","GitLab requesting password after SSH-KEY registered","<p>I have a problem. I generated a ssh key with <code>""ssh-keygen -t rsa -C ""GitLab"" -b 4096""</code>, after that I loaded the <code>~/.ssh/id_rsa.pub</code> content into Profile Settings -> SSH Keys. </p>

<p>After that I tried to go into a directory and type <code>""git clone git@gitlab.cs.pub.ro:/l2-pa-project-BITpick.git""</code> (where  is my user) and it prompts me to input a password and I don't know what password is that (it's not PC password and not either the account password). </p>

<p>I searched on the internet and I saw that I can test that running <code>""ssh -vT git@gitlab.cs.pub.ro""</code> and it prompts me the following:</p>

<p>I tried to reinstall git, delete .ssh folder, delete the folder that I wanted to clone into. I also tried to regen another key, I followed the GitLab tutorial for key generation. Nothing from that worked.</p>

<pre><code>mihai@barebone:~$ ls ~/.ssh
id_rsa  id_rsa.pub  known_hosts
</code></pre>

<p><a href=""https://i.stack.imgur.com/3osw2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3osw2.png"" alt=""https://i.imgur.com/P5nGzCM.png""></a></p>

<p>I expected to easily push the files.</p>
","3","11345596","0","0"
"55632882","7480471","2019-04-11 12:47:34","1","484","<visual-studio><visual-studio-2017><gitignore><git-commit><git-repo>","Error while i try to commit changes in Git via Visual studio 2017","<p>I`m trying to commit to my DevOps using Git source. for some reason I cannot proceed with the commit phase.</p>

<p>The error:</p>

<pre><code>Git failed with a fatal error.
error: open(""FinalWorkFinder/FinalWorkFinder/App_Data/aspnet-FinalWorkFinder-20190303122718.mdf""): Permission denied
fatal: Unable to process path FinalWorkFinder/FinalWorkFinder/App_Data/aspnet-FinalWorkFinder-20190303122718.mdf
</code></pre>

<p>If I go to repository settings, I can see that there is already a <code>.gitignore</code> file, but it does not ignore <code>.mdf</code>. </p>

<p>What should I do?</p>
","0","7480471","0","0"
"55648634","1461967","2019-04-12 09:33:11","2","240","<git><github><git-commit><git-push>","Lost git commit after rebase & force push - post git object removal","<p>I ran the below command to fix the <a href=""https://stackoverflow.com/questions/12571557/fixing-a-corrupt-loose-object-as-a-commit-in-git"">this</a> issue:</p>

<pre><code>find .git/objects/bd/4e31f16fc91fdc25b4b8e50c16c6f12422d467 -size 0 -exec rm -f {} \;
</code></pre>

<p>After that when I <strong>force pushed</strong> my code after rebasing &amp; squashing older commit, everything is lost and pull request got closed automatically erasing all commits. There is no way I can get back my code from whatever I know. <strong>The commits have vanished.</strong></p>

<p><strong>Is there any way to get back my committed code?</strong></p>
","3","1461967","0","0"
"55724333","11249670","2019-04-17 09:30:05","0","2572","<ruby-on-rails><git-commit><pre-commit-hook><rubocop><ruby-overcommit>","Rails: ""overcommit --run"" is passing but pre-commit hooks fail","<p>I am experiencing an issue with pre-commit hooks in <code>overcommit</code>, which is configured to run <code>rubocop</code> and <code>rails_best_practices</code>.</p>

<p>In short, all three commands listed below passed but <code>overcommit</code> wouldn't let me commit to git. Any advice on why/how to circumvent this issue would be appreciated.</p>

<pre class=""lang-rb prettyprint-override""><code># These passed
rubocop -a
rails_best_practices .
overcommit --run
</code></pre>

<pre class=""lang-rb prettyprint-override""><code># Git commit failed
$ overcommit --run
Running pre-commit hooks
Analyze with RailsBestPractices..................[RailsBestPractices] OK
Analyze with RuboCop........................................[RuboCop] OK

✓ All pre-commit hooks passed


$ git commit -m 'Ensure lower case with Attr API'
Running pre-commit hooks
Analyze with RailsBestPractices..................[RailsBestPractices] FAILED
Errors on modified lines:
/Users/USER_NAME/projects/APP_NAME/app/models/lower_case_string.rb:2 - remove unused methods (LowerCaseString#cast)

Analyze with RuboCop........................................[RuboCop] FAILED
Errors on modified lines:
/Users/USER_NAME/projects/APP_NAME/app/models/lower_case_string.rb:3:3: C: Layout/IndentationWidth: Use 2 (not 0) spaces for indentation.

✗ One or more pre-commit hooks failed
</code></pre>

<p>Now, I read <a href=""https://stackoverflow.com/questions/46365031/overcommit-railsschemauptodate-passes-when-run-but-fails-when-commit"">here</a> that <code>overcommit --run</code> doesn't trigger the hooks in the same ways that it does when you actually try to commit (whole project vs only changes to be committed). However, I'm not sure how this would affect my case, especially since <code>rubocop</code> and <code>rails_best_practices</code> both passed individually as well. By the way, the errors raised here are both false alarms. <code>rails_best_practices</code> shouldn't be checking for unused methods in the first place, since that check has been turned off in <code>config/rails_best_practices.yml</code>.</p>
","0","11249670","0","0"
"55730292","10288563","2019-04-17 14:43:12","3","3054","<git><branch><git-merge><git-commit>","How git maintains commits from deleted branch?","<p><a href=""https://i.stack.imgur.com/83JeN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/83JeN.png"" alt=""enter image description here""></a></p>

<p>This is <code>git merge</code> scenario. When I merge, <code>New merge commit</code> is created, so if I go back from <code>New merge commit</code>, I can see the scheduled history of all <code>Master</code> and <code>Feature</code> branch commits till <code>Common base</code>. This is the scenario I don't understand: If I delete <code>Feature</code> branch, I think Feature branch commits will be deleted, But the reality is that when I am standing on <code>New merge commit</code>, after deleting <code>Feature</code> branch, I can still see <code>Feature</code> branch commits when I type <code>git log</code>. How is that possible? Am i mistaking something?</p>
","2","10288563","",""
"72989019","16778741","2022-07-15 04:22:53","1","134","<git><github><hash><git-commit><sha>","How are the hash values in git not exhausted?","<p>The total possible no of unique git commit hash values are - <strong>16^40</strong>, 16 possible hexadecimal digits and 40 total digits in the SHA value.</p>
<p>This approximates to ~<strong>10^48</strong> (more than that, but just an approximation).</p>
<p>My question is - as the values are unique for commits, how are they not exhausted by now?</p>
<p><em><strong>Or</strong></em></p>
<p>Are these values unique only inside a repository i.e. locally unique which will prevent them from being exhausted ever?</p>
<p>As you can see, I am not sure whether they are locally unique or globally.</p>
<p><strong>Edit -</strong></p>
<p>The question has been answered but I would recommend this question <a href=""https://stackoverflow.com/q/56012233/1256452"">Git hash duplicates</a>
as it is somewhat similar to my question.
Thanks to @torek for mentioning this question.</p>
","8","16778741","0","0"
"73000577","15593489","2022-07-15 23:55:34","0","371","<git><git-commit><git-pull><git-fetch>","Git push asks to fetch and merge but there is nothing to fethc or merge","<p>I have been trying to get familiar with Git, new to programming.   However, every time I seem to want to push git &quot;<code>git push origin main</code>&quot;, I get an error saying my local and remote branches have diverged.</p>
<p>I don't understand how this is possible is this is a brand new empty repository, when I try and do <code>git fetch</code> (as you can see on imagine) it works fine however there is nothing to merge or pull (the error message is <code>merge:origin - not something we can merge</code>&quot;).<br />
How do I go about fixing this?</p>
<p><a href=""https://i.stack.imgur.com/Ibt4x.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ibt4x.png"" alt=""commands"" /></a></p>
<p>Oh also since this is just a test I tried git push -f as  well to no avail I get :</p>
<pre><code>fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main

To have this happen automatically for branches without a tracking
upstream, see 'push.autoSetupRemote' in 'git help config'.
</code></pre>
<p>I also tried <code>git rebase</code>, <code>fetch</code> and <code>merge</code>.<br />
Although as I said this shouldn't be the problem, the git repo is brand new and there are no change to merge</p>
<p>Update</p>
<p>So, pro, was able to fix the problem, con, not sure how, if I happen to figure it out in more detail or have more of an understanding I'll edit this question and add a more detailed explanation just in case anyone else happens to run into this issue.<br />
However, all of these answer were a great starting point so I suggest you give that a try too if no update is made.</p>
","4","15593489","0","0"
"55848549","3424163","2019-04-25 11:44:05","1","1253","<git><githooks><git-commit><git-push>","Is it possible to trigger another commit and push by git hook?","<p>I work with software which uses git repository to generate  (or update) some file on a disk after a successful commit. I'd like to automatically add this generated (updated) file to the git repository. It can be contained in the same or the next commit and needs to be also pushed to the remote.</p>

<p>I was trying to use git hooks:
* pre-commit can't be used because before committing the file which I want to add is not updated 
* pre-push: updated file can be added and committed to the git, but I'm unable to have it pushed automatically (only first of the two commits is pushed). I'm using a script like:</p>

<p>pre-push:
'cp../updatedfile . ; git add updatedfile; git commit - m ""msg""'</p>

<p>The ideal solution would be to use something which is triggered after the successfull push of the first commit and then create a second commit (containing updated file) and push them. Do you know how to resolve it? </p>
","0","3424163","0","0"
"73012357","9883126","2022-07-17 13:52:42","13","14632","<windows><git><vi><git-commit>","""Please enter a commit message for your changes""","<p><a href=""https://i.stack.imgur.com/CN35j.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/CN35j.png"" alt=""enter image description here"" /></a></p>
<p>This window drives me crazy</p>
<pre><code># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
</code></pre>
<p>It pops up when I forget to put -m&quot;[message]&quot; after &quot;git commit&quot;, and now when I'm experiment with &quot;git revert&quot;  I've seen instructions on how to abort this, but what if I actually want to submit a commit message?  How do I do that?  Pressing enter doesn't work, so what does?</p>
","3","9883126","",""
"55919949","11432272","2019-04-30 11:29:39","1","253","<java><git><bitbucket><git-commit><netbeans-11>","Add Commiters/Authors to NetBeans 11.0 Bitbucket Commits","<p>I am developing some software in college and me and my partner are spliting the work and he sends me the code in raw and I commit it, but I want to commit his code in my NetBeans 11.0 on his name but i can only commit on mine and i want to be able to do it. Is it possible?</p>

<p>I already added 2 [user] camps to .git/config file in the repository but only i appear on the commit section on NetBeans CSV camp.</p>

<p>Here is a quick image of what I am referring to:</p>

<p><img src=""https://i.stack.imgur.com/pq3wu.png"" alt=""Please click here to see the screenshot""></p>
","2","11432272","0","0"
"73059817","18904951","2022-07-21 01:50:35","0","233","<git><heroku><push><git-commit>","Git Updates were rejected because the tip of your current branch (main) is behind BUT branch is up to date?","<p><em>&quot;The tip of your current branch is behind its remote counterpart&quot;</em> means that there have been changes on the remote branch that you don’t have locally. And Git tells you to import new changes from REMOTE and merge it with your code and then push it to remote.</p>
<p>However, I have tried <em>everything</em> and get the message that everything is <strong>up to date</strong></p>
<p>Though I am not able to do push to Heroku with an update anymore as I keep getting the message:</p>
<p>Git Updates were rejected because the tip of your current branch is behind</p>
<p>I tried git push --force origin main</p>
<p>Tried pulling and merging</p>
<p>Even did a hard reset but absolutely nothing works and I need to deploy the API changes to Heroku but to no avail. Can anyone help me get unstuck please?</p>
","2","18904951","0","0"
"73065622","18542740","2022-07-21 11:47:11","-3","94","<git><gitlab><gitignore><git-commit>","Previouse git commits are missing","<p><a href=""https://i.stack.imgur.com/u5muQ.png"" rel=""nofollow noreferrer"">enter image description here</a>
My previous 90+ commits  are not showing in my branch neither in other :(.</p>
<p>I've only clue that the commit are gone after solving the git error <strong>failed to resolve HEAd as valid ref</strong>, or may be it is because of pushing the codes forcefully.</p>
<p><strong>STEP-1</strong></p>
<p>Added <code>.gitignore</code> File in dir with some additional rules to ignore irrelevant dirs/files.</p>
<p><strong>STEP-2</strong></p>
<pre><code>git add .
git commit -m &quot;msg&quot;
git push origin dev_branch -f
</code></pre>
<p>This are the most recent command for I've executed in my terminal.
Thanks in advance</p>
","7","18542740","",""
"73072662","8599478","2022-07-21 21:10:35","-3","53","<git><file><git-commit>","Change all versions of a file without commiting","<p>I have a bunch of C header files that use a generic <code>#ifndef XXXXXX</code> naming structure. I'd like to modify all of those header file to <code>#ifndef YYYYYYY</code>, and save the changes in the git repo without having to commit. Is it possible to change a file (or multiple files) and ripple those changes in all previous commits? Or is it possible to change a bunch of files and save the changes in the repo without commiting at all?</p>
","4","8599478","",""
"73072946","14953032","2022-07-21 21:43:04","0","171","<git><git-commit><git-gc>","git recreate refs/heads/master after gc","<p>after I run <code>git gc --prune=now</code> the file <code>.git/refs/heads/master</code> is deleted</p>
<p>how to recreate it? a remote application needs to read its text content (commit hash)</p>
<p><code>.git/HEAD</code> content : <code>ref: refs/heads/master</code></p>
","3","14953032","",""
"55952916","8275139","2019-05-02 12:51:55","1","61","<git><git-commit><gitkraken>","Remove commit created by changing name to another commit","<p>I was working with GitKraken when I tried to change the name of a commit I just created. I thought it would just change the name but it created another commit instead. I don't know what I did then, but I have the following situation:</p>

<p><a href=""https://i.stack.imgur.com/8Nffg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8Nffg.png"" alt=""enter image description here""></a></p>

<p>I would like to remove those two commits on the right: 'Detector - Tf-idf similarity' and 'WIP on master: Auto...' so that I only have one column with the other 4 commits stacked. Head is on the last commit I want to appear on the graph, 'Added tf-idf similarity'.</p>

<p>Is it possible to completely remove those commits from the project?</p>

<p><strong>EDIT:</strong></p>

<p>If I use the 'reverse commit' option of GitKraken would that solve the problem or would it just make it worse?</p>
","2","8275139","",""
"73081074","16470723","2022-07-22 13:21:54","0","98","<git><github><git-commit><git-push><git-pull>","GitHub - error: failed to push some refs to dev repo after I amend a pushed commit","<p>I'm new to git and I think I made a mistake and I want to know if I can still fix it. I have 3 branches which are main (remote repo), development (remote repo), branchA (in local repo). I'm working on branchA and I add two commits in it and pushed it to remote repo using the code: <code>git push origin branchA</code></p>
<p>But I noticed I committed those two commits using a wrong github account. I changed the author of the last recent commit using this code:<code>git commit --amend --author=&quot;username &lt;email@email.com&gt;&quot;</code></p>
<p>Then I did <code>git rebase -i commithash</code> to be able to edit the author on my commit before my recent commit. After I've set to 'edit', I ran this command again: <code>git commit --amend --author=&quot;username &lt;email@email.com&gt;&quot;</code></p>
<p>After that, I changed something on my code and committed it again in branchA. Then I pushed it in my remote repo using <code>git push origin branchA</code> and now im getting this error now:</p>
<pre><code>To github.com:somename/githubrepo.git
! [rejected]        branchA -&gt; branchA (non-fast-forward)        
error: failed to push some refs to 'github.com:somename/githubrepo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
<p>I understand that the hash of the commit changes if you amend something in it. But I don't understand why the error message states that my local branchA is behind remote branchA when as per my understanding my local branchA is ahead of my remote branchA. Can I fix this? Not sure if its safe to do git push force. Please help. Thank you!</p>
","0","16470723","",""
"73082302","3914847","2022-07-22 14:53:52","1","1006","<git-commit><husky><commitlint>","How use commitlint only for subject-case setentence case and body-full-stop never","<p>I am trying to use commitlint without using <code>extends: ['@commitlint/config-conventional'],</code>:</p>
<pre><code>module.exports = {
  rules: {
    'subject-case': [2, 'always', 'sentence-case'],
    'type-empty': [2, 'always'],
    'body-full-stop': [2, 'never', '.'],
  },
}
</code></pre>
<p>But with this config I still be able to do: <code>$ git commit -m 'hello.'</code> but I expect, that &quot;.&quot; in the end is forbidden, also I expect small letter is start of message is forbidden also.</p>
<p>What am I doing wrong?</p>
","0","3914847","",""
"55967993","9871463","2019-05-03 10:30:17","2","1794","<git><git-commit><git-config>","How to remove git commit default template message?","<p>If I want to create a custom <em>git commit template</em>, I can add path to template as:</p>

<pre><code>[commit]
    template = ~/.gitmessage
</code></pre>

<p>But it keeps appending at the bottom of my commit template default template:</p>

<pre><code># Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
# modified:   lib/test.rb
#
</code></pre>

<p>Reading on <a href=""https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration"" rel=""nofollow noreferrer"">configuration</a> they also have appended default template. I know it's commented out, but anyway to remove it so it only displays my custom template?</p>
","0","9871463","0","0"
"55968900","","2019-05-03 11:27:13","2","295","<git><git-commit>","Git amend - dont see changes of amend commited changes on sub branch","<p>I did the following:</p>

<pre><code>git checkout -b v1
&lt;made some changes in the working directory, created commit c1 and push&gt;
git checkout -b v2
&lt;made some changes in the working directory, created commit c2 and push&gt;
git checkout -b v3
&lt;made some changes in the working directory, created commit c3 and push&gt;
git checkout -b v4
&lt;made some changes in the working directory, created commit c4 and push&gt;
</code></pre>

<p>So now I have the following git tree structure:</p>

<pre><code>M --- v1 --- v2 --- v3 --- v4
.
.
</code></pre>

<p>I made some more changes on v1 and did the following:</p>

<pre><code>git checkout v1
&lt;made some changes on working directory&gt;
git add .
git commit --amend
git push origin v1 --force
</code></pre>

<p>Now when I check out on v4 I do not see the changes to commit c1 I pushed on v1...
Where are the changes and how do I fix this mess?</p>
","6","","0","0"
"73094841","19609210","2022-07-23 23:25:39","1","608","<git><github><commit><git-commit><gnupg>","git commit: cannot read lockfile","<p>I tried installing gpg and bumped into some error while trying to commit to GitHub.</p>
<p>After battling with the error I was getting I had to uninstall Kleopatra from my system, but I noticed windows command prompt couldn't find the gpg path anymore.</p>
<p>However, <code>git bash</code> was still seeing it and I keep getting same commit error and I don't know what to do since I have tried some solutions I found here.</p>
<p>Here is my error when I try to use GitHub desktop same goes with git bash</p>
<pre><code>error: cannot spawn C:\Program: No such file or directory
error: gpg failed to sign the data
fatal: failed to write commit object
</code></pre>
<p><a href=""https://i.stack.imgur.com/CPLVY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CPLVY.png"" alt=""error"" /></a></p>
","2","19609210","0","0"
"73099596","19559205","2022-07-24 15:14:01","0","226","<intellij-idea><git-commit>","Is there a way to reset the position of the commit button back in the sidebar in Intellij Idea community?","<p>I was saving a file when i accidentally moved the commit button and now it is outside the sidebar.
Is there a way to put it back in or reset the position of all the buttons?<a href=""https://i.stack.imgur.com/x8K13.jpg"" rel=""nofollow noreferrer"">Screenshot</a></p>
","1","19559205","",""
"55977195","1381241","2019-05-03 21:14:16","3","1283","<git><git-commit><git-add>","Git add files which do not match a pattern","<p>In Git, while adding files to a commit, we can add all files matching a pattern like so:</p>

<p><code>git add **Component**</code></p>

<p>I find this feature pretty useful to quickly add lots of files with similar names. </p>

<p>For example, If all my files are named based on components, then I can add all changes I did to a component quickly.</p>

<p>Similarly, is there a way in git to add all files to commit <em>excluding</em> files matching a pattern?</p>

<p>Something like:</p>

<p><code>git add *.java --exclude **Component1**</code></p>

<p>So that I can all my java file changes except the changes that I made to the files of component1?</p>
","2","1381241","",""
"73123704","14812476","2022-07-26 12:52:34","-1","534","<git><visual-studio><github><git-commit><unstage>","I can't discard changes on visual studio git","<p>I was playing with git and github, so was learning how to contribute to opensource projects, so i forked and cloned a repository. Afterwards, i deleted the entire file, only to discover that my commits were still staged. I have tried deleting them to no avail. It bugs me because it keeps showing i have over 10k staged commits and i can't unstage or delete them. I even uninstalled vs code but it's still there. the following screenshot shows the error message i get when i try unstaging and discarding them.
<a href=""https://i.stack.imgur.com/TFDVt.png"" rel=""nofollow noreferrer"">error Message</a></p>
<p>here is the other screenshot of before i clicked on it, showing me i have over 10k changes unstaged.<a href=""https://i.stack.imgur.com/Xzzrn.png"" rel=""nofollow noreferrer"">10k files</a></p>
","2","14812476","",""
"56030532","307428","2019-05-07 21:11:50","3","1332","<git><github><git-commit>","How to visually see diff between two git commits on github","<p>I understand I can run a git command locally to see them in the terminal, but I want to see them visually on github. Is this possibly?</p>

<p>I want to be able to see the diff between two commits, NOT two branches.</p>
","2","307428","",""
"56057882","11260651","2019-05-09 10:57:53","0","364","<git><git-commit>","Does a new commit include changes from old commit?","<p>Lets say  I have a local repository named 'ABC"" having a text file.
I add 2 lines to the text file, and commit it. Lets call it ""Commit A"". 
Then I add 2 more lines to it and commit it. Lets call it ""Commit B"".</p>

<p>Will Commit B have the original text in text file and all the 4 new lines added, or just the 2 lines added in Commit B?</p>

<p>If I branch from Commit B, will the new branch have the original text and the 4 lines added, or just the 2 lines added in Commit B?</p>
","2","11260651","",""
"73195919","19611057","2022-08-01 15:15:21","1","99","<git><github><git-commit><cicd><spinnaker>","Trigger spinnaker pipeline on specific commit message","<p>I want my spinnaker pipeline to trigger only when the &quot;git commit message&quot; contains the text &quot;bump&quot;.</p>
<p>Please help.</p>
","0","19611057","",""
"73200641","2671470","2022-08-01 23:58:25","2","736","<git><git-commit><githooks><pre-commit-hook>","How to get arguments from githook?","<p>From the <a href=""https://git-scm.com/docs/githooks"" rel=""nofollow noreferrer"">githook's doc</a> says:</p>
<blockquote>
<p>Hooks can get their arguments via the environment, command-line arguments, and stdin. See the documentation for each hook below for details.</p>
</blockquote>
<p>But what are the mentioned arguments?</p>
<p>If I do commit with this command:</p>
<pre><code>git commit -m &quot;my commit&quot; --trailer &quot;Helped-by: Nganu &lt;committer@example.com&gt;&quot;
</code></pre>
<p>How to get <code>trailer</code> value in pre-commit or prepare-commit-msg hook?</p>
<p>I don't see any documentation about getting arguments in <code>pre-commit</code> or <code>prepare-commit-msg</code> hooks. And I tried using <code>$0</code> like bash argument, but it failed.</p>
","1","2671470","",""
"73219218","16911181","2022-08-03 09:18:09","0","43","<git><amazon-web-services><git-commit><aws-codecommit>","How to add a file into AWS repo using git-remote-codecommit using dbms_cloud? what is the git-remote-codecommit url?","<p>I have used AWS code commit &quot;PutFile&quot; API with url as : <a href=""https://codecommit.us-east-2.amazonaws.com"" rel=""nofollow noreferrer"">https://codecommit.us-east-2.amazonaws.com</a> to add a file into AWS repo. <a href=""https://docs.aws.amazon.com/codecommit/latest/APIReference/API_PutFile.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/codecommit/latest/APIReference/API_PutFile.html</a></p>
<p>This PutFile as per above link is not working if my file contents are larger. So PutFile API explantion : suggested to use GIT client where I am trying to know about git-remote-codecommit. So Can anyone please provide me what is the url of git-remote-codecommit and how do I perform operations using that. Also what are the credentials I need to use and how to create them?</p>
","0","16911181","",""
"73233477","14087256","2022-08-04 09:29:10","0","34","<git><git-commit><githooks><pre-commit-hook>","Git re-do the last add and commit","<p>Currently I am implementing some git hooks that clears my notebook cells when committing. Unfortunately, after committing the script fails (because the files are cleaned and interpreted as new files, which makes sense). Thus, I need to re-do the add &amp; commit command for the exact same files.</p>
<p>Is there any way to automate this? Or at least how can I re-do the same add and commit of the same files again.</p>
","5","14087256","",""
"73241215","14413459","2022-08-04 19:15:51","6","1878","<git><commit><git-commit><conventions><conventional-commits>","What should be the right ""commit type"" from conventional commit?","<p>I created a commit with the purpose to unhide a feature, the code change is to only uncomment some lines of code and show the feature, so now the feature will be displayed to the user.</p>
<p>Should this commit type be <code>feat</code> or <code>chore</code>?</p>
<p>I think it should be <code>chore</code> because it doesn‘t add the feature to the code, only allows it to be displayed, but from user POV it is a new feature, what is your opinion?</p>
","1","14413459","",""
"56138275","3078043","2019-05-14 20:38:37","1","263","<git><git-merge><git-commit><git-cherry-pick>","merging branch into master after a previous commit merged master then reverted it","<p>to provide some more context around what I'm trying to fix. a few developers were working in the same branch. at some point, one tried to merge master into the child branch, something went wrong (couldn't build project, etc. not 100% sure) but then immediately reverted the master merge commit. the child branch is now ""complete"" and ready for a pull request and now it won't merge cleanly into master. several of the <code>git</code> errors state something similar to the following?</p>

<p><code>CONFLICT (modify/delete): someFileName.cs deleted in HEAD and modified in master</code></p>

<p>we've tried the following</p>

<pre><code>(1)
- checked out/pulled latest master
- created a new branch
- cherry picked all relevant commits going forward

(2)
- performed a git reset to earliest commit
- cherry picked all relevant commits going forward
</code></pre>

<p>all result in the same type of error mentioned above when attempting to merge back into master.</p>

<p>what is the best way to fix this branch to get it to merge cleanly back into master?</p>
","1","3078043","0","0"
"73271255","17558504","2022-08-07 21:42:58","0","43","<git><git-commit><git-rebase>","What to enter for commit when trying to perform a git rebase?","<p>A week ago, I accidentally changed my email settings to public on GitHub. I then made about 20 commits that I discovered weren't showing up on my contribution chart. I have changed my email back to private and set my global git config to the private email again, so my new commits are working fine. However, I've been unable to figure out the git rebase command that I need to retroactively change the name/email on the old commits.</p>
<p>Below is the code that I'm pretty sure I need to run to fix my old commits, but I keep getting &quot;zsh: no such file or directory.&quot;</p>
<p>What exactly do I need to put inside  for this to work? And do I have to be in the correct repository folder in my terminal?</p>
<pre><code>git rebase -r &lt;some commit before all of your bad commits&gt; \
--exec 'git commit --amend --no-edit --reset-author'
</code></pre>
","0","17558504","",""
"56156877","11506277","2019-05-15 20:07:16","0","4155","<git><github><git-commit>","Git says ""1 file changed, 0 insertions(+), 0 deletions(-)""","<p>I just created an HTML file that has 9 lines on my repository and I used ""git commit -m"" command but git said, ""1 file changed, 0 insertions(+), 0 deletions(-)"".</p>

<p>I expected the output of ""1 file changed, 9 insertions(+), 0 deletions(-)"" because I created a file that has 9 lines.</p>
","3","11506277","",""
"73284580","13745989","2022-08-08 22:15:52","0","28","<git><github><diff><git-commit>","How can I diff two online files with full context?","<p>I know there have been answers for seeing the diff in the full file, but I wish to diff two online files.</p>
<p>I have a large list of commit hashes from public repositories. I wish to automate collecting the unified diff with the rest of the unchanged file. However, GitHub's diff viewer only shows the area around the changed lines. How can I see the diff, online, in context of the whole file?</p>
","3","13745989","",""
"56171828","9340545","2019-05-16 15:18:36","1","1662","<git><merge><gitlab><git-commit><git-pull>","Getting error ""fatal: could not open '.git/MERGE_HEAD' "" when committing","<p>getting error trying to do ""git commit -m '...' ""</p>

<pre><code>fatal: could not open '.git/MERGE_HEAD' for reading: No such file or directory
</code></pre>

<p>I am working on a branch and am trying to pull from master but i need to commit first</p>
","2","9340545","",""
"57335668","10730157","2019-08-03 05:22:42","1","24","<git><git-commit><author>","Add/update author for git-together","<p>How can I add or update the list of authors for my git-togther commit?
In my virtual machine (Red-Hat) I am trying to add myself as an author for git so I can add myself or other co-workers for my commits.</p>
","1","10730157","",""
"74662750","20079675","2022-12-02 23:55:37","0","649","<git><branch><git-commit><git-push><git-amend>","Local branch and remote branch have diverged after amending commit","<p>I have a <code>feature</code> branch called <code>featureA</code> and I am the only developer who is and will be touching this branch until it gets merged to <code>master</code> branch.</p>
<p>My git command history is:</p>
<ol>
<li>committed changes <strong>locally</strong></li>
<li>made more changes then <strong>pushed</strong> to remote by <strong>amending</strong> commit</li>
<li>made one more change (on a single line) then <strong>pushed</strong> to remote by <strong>amending</strong> commit</li>
</ol>
<p>BUT it seems <strong>NOT</strong> pushed to the remote repository.</p>
<h2><code>git status</code> outputs:</h2>
<p>Your branch and <code>origin/featureA</code> have diverged, and have 1 and 1 different commits each, respectively. (use <code>git pull</code> to merge the remote branch into yours)</p>
<h2><code>git diff</code> shows that:</h2>
<ul>
<li>local branch: the last single line change is applied</li>
<li>remote origin branch: the last single line change is not applied</li>
</ul>
<p>My <code>featureA</code> branch will be merged to the <code>master</code> branch so I don't want to ruin history.</p>
<p>I went through several threads (suggesting <code>git pul --rebase</code>, <code>git reset --hard</code>, etc) but still do not have clear idea what is the best solution.</p>
<p>I don't mind which state I will be on with the solution.
If needed, I don't mind to go back to the previous push/commit and push the new change as a new commit again because it is just a single line code change.</p>
<p>I appreciate your help.</p>
","2","20079675","",""
"74673421","19710671","2022-12-04 06:49:22","0","672","<git><github><visual-studio-code><terminal><git-commit>","My terminal in VS Code is not working and shows History restored *** or/and just blank, how to make my terminal work again?","<p>The problem occured while trying to commit my code in GitHub as I forgot to pass the message -m, The code/page got committed but after that my Code terminal never worked again.</p>
<p>I tried to solve the terminal by different commands in cmd and powershell as well tried to change the vs code settings, also uninstalled and re-installed the app.I was expecting trminal to be reset to default or at least diplay something, still no any changes.</p>
","2","19710671","",""
"74697166","9569720","2022-12-06 04:04:37","0","358","<git><push><apple-m1><git-commit>","The Git process exit code 138 (interrupted by signal 10: SIGBUS)","<p>Every time, when I commit or push, this comment shows up.</p>
<p>I'm using company network for project folder(with co-workers), and we push project on gitlab.
Someone(including me) use m1(mac), others use windows(Not sure is this related o
r not ^^:)</p>
<p>My os: Mac m1(Sliicon)</p>
<p>Those 3 are what I tried to solve.</p>
<ol>
<li>sudo sysctl -w kern.maxfilesperproc=524288 </li>
<li>sudo sysctl -p </li>
<li>git config --global core.autocrlf true input</li>
</ol>
<p>Please help me T.T</p>
<p>I appreciate who can tell me how to solve this problem.</p>
","9","9569720","",""
"57397816","396681","2019-08-07 15:28:25","1","41","<git><git-branch><git-merge><git-commit><pull-request>","Check if all pull requests have been cherry-picked in git","<p>I have pull requests that were merged into some branch by specific Authors within a date range.</p>

<p>How would I check if all those pull requests have been cherry picked into another branch?</p>

<p>We are only concerned about merged pull requests by specific authors and dates, and we need to make sure that we have cherry-pick all of them..</p>

<p>What's the recommendation in this case?</p>

<p>The core of this question is as its title, Lets say we have <code>staging</code> branch that has 27 pull requests made by <code>userA</code> within a range of date and other pull requests that we are not concerned about, then how can I make sure that all those 27 requests have been cherry-picked into branch <code>mobile</code> and that there isn't any missed pull request from them?</p>

<p>Its different than <a href=""https://stackoverflow.com/questions/27313309/list-git-commits-to-master-branch-between-two-dates"">this</a> question as I am not listing commits at some branch, but I am checking if <em>all</em> pull requests within specific criteria have been cherry-picked from some branch into other branch of interest.</p>
","2","396681","",""
"74722894","8549454","2022-12-07 21:15:36","6","4151","<git><git-commit><ssh-keys>","error: unsupported value for gpg.format: ssh","<p>Trying to setup git commit signing on my Debian box. I already have this setup on my windows box and it works fine. Not so much on my Debian box. There I get the following error when I try to commit:</p>
<pre><code>siggib@htzn:/var/www/phpdemo$ git commit -m &quot;tweak&quot;
error: unsupported value for gpg.format: ssh
fatal: bad config variable 'gpg.format' in file '/home/siggib/.gitconfig' at line 6
</code></pre>
<p>Here what my config looks like</p>
<pre><code>siggib@htzn:/var/www/phpdemo$ git config --list
user.name=siggib@htzn
user.email=siggib007@users.noreply.github.com
user.signingkey=ssh-ed25519 AAAAC3NzaC.....
gpg.format=ssh
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/siggib007/phptest.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
siggib@htzn:/var/www/phpdemo$ 
</code></pre>
<p>I tried to google this and found nothing useful, also tried searching here with same results. Anyone have any good pointers for me?</p>
","0","8549454","",""
"57435781","2492089","2019-08-09 18:59:37","0","860","<git><git-commit>","why git commit --author ""name"" still fails to commit error ""empty ident name""","<p>I have a shared folder/repo that can be accessed by several people.  So I purposely didn't setup the user.email &amp; user.name.  However, even I specified the author through <code>--author</code>, I was still unable to commit.</p>

<p>How can enforce committer always specify the <code>--author</code> when they commit?</p>

<pre><code>git commit --author ""John Doe &lt;jd@jd.com&gt;""

*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: empty ident name (for &lt;(null)&gt;) not allowed
</code></pre>
","3","2492089","0","0"
"74806218","16207928","2022-12-15 02:26:25","0","57","<git><github><git-commit>","Missing all commits in Github repository but Only showing up my contribution activity","<p>I had just commits and push my project in Eclipse on my Mac which is new environment where I just moved my project from Window version. But I lost all commits over 250 in my Github repository but there are still commits' history on my contribution activity.
Unfortunately, I don't know what happened and I couldn't remember what I did.
There were few ways I tried to find my latest commit Id before pushing new commits.</p>
<p>First, <code>git log</code> There are two histories that I'd just commits and push.</p>
<pre><code>PS C:\Users\SECHAN\apms_salonSystem&gt; git log
commit 7044db9b601bd414b6e163e2c3154708362a1b00 (HEAD -&gt; master, origin/master, 
origin/HEAD)
Author: sol namgung &lt;nandaras0103@gmail.com&gt;
Date:   Sat Dec 10 23:15:32 2022 +0900

change ImagePath on mac

commit 313f55ab3d9bd3ce662d392c3ff0f95704cff774
Author: sol namgung &lt;nandaras0103@gmail.com&gt;
Date:   Sat Dec 10 21:03:43 2022 +0900

first commit on mac and added products pictures changed of directories
</code></pre>
<p>Second, I had <code>git fsck --lost-found</code> to find dangling commits.</p>
<pre><code> PS C:\Users\SECHAN\apms_salonSystem&gt; git fsck --lost-found
 Checking object directories: 100% (256/256), done.
 Checking objects: 100% (1175/1175), done
</code></pre>
<p>but I got nothing of commits' history.</p>
<p>Can anyone share informations or any solutions for that. I'd very appreciate it.
Thanks again.</p>
","1","16207928","",""
"74823720","9184849","2022-12-16 11:20:20","1","45","<git><git-commit><branching-and-merging>","Commit on parent branch and rebase local branch automatically","<p>I have a situation like this:</p>
<ol>
<li>I have a main branch <code>master</code>, a feature branch <code>feat</code> and a fixup branch <code>fixes</code>.</li>
<li>The <code>fixes</code> branch hardcodes some assumptions that make it possible to do local development. (Things like not requiring https or licenses or hardware keys. Stuff that I don't want to accidentally push to prod)</li>
<li>I want to stay on <code>fixes</code> branch locally but I want to make commits on the <code>feat</code> branch.</li>
<li>I want the <code>fixes</code> branch to always be on top of <code>feat</code>.</li>
</ol>
<p>Assume that this is my current situation:</p>
<pre><code>A---B---C &lt;---master
         \
          D---E---F &lt;---feat
                   \
                    G---H &lt;---fixes, HEAD
</code></pre>
<p>I do some work and make a commit. This is what I want the result to be:</p>
<pre><code>A---B---C &lt;---master
         \
          D---E---F---I &lt;---feat
                       \
                        G---H &lt;---fixes, HEAD
</code></pre>
<p>My idea says that it can be done by first making commit <code>I</code> on <code>fixes</code> then cherry-picking it on <code>feat</code> then resetting <code>fixes</code> to <code>H</code> then rebasing <code>fixes</code> on top of <code>feat</code>.</p>
<p>This seems like a lot of work to do manually. Is there a way to automate this?</p>
","2","9184849","",""
"74827402","14912225","2022-12-16 16:44:07","1","227","<git><version-control><git-commit><undo>","Ways to undo the commits of 2 months ago in Git after push the commits?","<p>I saw the solutions on undo the <strong>last / last x commits</strong> in Git.<br>
What I want to know is how to undo the commits that are pushed <strong>2 months ago</strong>. I want to undo just the commits in the middle of the commits, but want to keep the other commits.</p>
<p>for example:</p>
<pre><code>commit 1  ----  2 mins ago
commit 2  ----  1 day ago
....
commit 105  ---  2 months ago
commit 106  ---  2 months ago
commit 107  ---  3 months ago
....
</code></pre>
<p>In the example, I want to reverse <strong>commits 105 and 106</strong>, but keep the other commits as they are.</p>
","7","14912225","",""
"74839866","13907596","2022-12-18 07:55:49","1","36","<git><git-commit>","accidentally used git commit --amend --no-edit after adding changes to files. what happened?","<p>still learning how to use git.</p>
<p>i added changes to the files from the last commit. Then i ran the <code>git commit --amend --no-edit</code> command, which was
a mistake.</p>
<p>After trying to push changes, it said I had a merge conflict.</p>
<p>I resolved the merge conflict (my repository is still very small, so it wasn't very confusing). I just don't understand what happened to the repo.</p>
<p>Can someone explain what happened?</p>
","2","13907596","",""
"74866854","6591667","2022-12-20 17:37:36","0","112","<git><gitlab><tags><git-submodules><git-commit>","How can I get the latest tag from a commit ID?","<p>I need to get the Tags from a commit ID in a GitLab repository.
Searching past solutions I'm trying to follow this one:
<a href=""https://stackoverflow.com/questions/1474115/how-to-find-the-tag-associated-with-a-given-git-commit"">How to find the tag associated with a given git commit?</a>.</p>
<p>I cloned the repository into my local PC and typed the following in the command prompt, inserting the appropriate commit ID:</p>
<pre><code>&gt;&gt;git describe --exact-match &lt;commit-id&gt;
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;git describe --tags &lt;commit-id&gt;
</code></pre>
<p>But I get the following error with both:</p>
<pre><code>&gt;&gt;fatal: &lt;commit-id&gt; is neither a commit nor blob
</code></pre>
<p>I'm a beginner, not sure what exactly I'm doing wrong. Any help would be appreciated.</p>
","10","6591667","",""
"74922109","811293","2022-12-26 16:18:47","0","38","<git><intellij-idea><git-commit><revert><file-recovery>","Revert some file/directory deletions from other Revert, Recover file and directory from Commit","<p>I made a revert that deleted some files and <strong>directories</strong>... According to the The screenshot:</p>
<p>The <code>Red</code> box shows the commit with my revert.
The <code>Blue</code> arrow shows the position inside of my project
The Green arrows shows the files that I would like to recover...</p>
<p>I see this <a href=""https://stackoverflow.com/questions/11865630/recover-files-from-earlier-git-merge-that-reverted-commits"">question</a>, but that is recovering all, and this <a href=""https://stackoverflow.com/questions/215718/how-do-i-reset-or-revert-a-file-to-a-specific-revision"">How do I reset or revert a file to a specific revision?</a> shows only file.
This <a href=""https://stackoverflow.com/q/36201607/811293"">Git revert just some files in commit</a> is about single file.</p>
<p><strong>How I Could do the recovery with <code>directory</code>?</strong></p>
<p><a href=""https://i.stack.imgur.com/ukEwU.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ukEwU.jpg"" alt=""enter image description here"" /></a></p>
<p><strong>Is it possible do this operation directly from <code>IntelliJ</code>?</strong></p>
<p><a href=""https://i.stack.imgur.com/i34Yt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i34Yt.png"" alt=""enter image description here"" /></a></p>
<p><strong>Is it possible do this operation interactively (in order to select what recover)?</strong></p>
","2","811293","",""
"74931970","20109581","2022-12-27 16:46:44","0","107","<r><github><rstudio><commit><git-commit>","Problem committing a project from RStudio to Github","<p>I'm trying to push my files to my GitHub, but I'm getting the following error:</p>
<pre><code>error: cannot run rpostback-askpass: No such file or directory 
fatal: could not read Username for 'https://github.com': Device not configured
</code></pre>
<p><strong>Details:</strong></p>
<ul>
<li><p>I'm using MAC</p>
</li>
<li><p>My git version: git version 2.32.1 (Apple Git-133)</p>
</li>
<li><p>I'm linking my project to GitHub with HTTP protocole</p>
</li>
</ul>
<p>I ran <code>git config --global user.name</code> and user.mail in the terminal in Rstudio</p>
<p>I tried to use the solution of running <code>git push -u origin main</code> and when I type in my credentials, it gives me the error: &quot;authentication failed&quot;. I never changed my password to GitHub, I checked it today to enter the website, it works.</p>
<p>I tried using ssh protocol instead but it seems to be giving me even more errors even though I created my ssh key and added it successfully to my GitHub. Specifically when I click on create new project and add the ssh link Rstudio says:</p>
<pre><code>Cloning into 'data-science-hw'...
ssh_askpass: exec(rpostback-askpass): No such file or directory Host key verification failed. 
fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.
</code></pre>
<p>I went through all the possible suggestions I could find on the internet but none of them worked. I also tried linking a token generated by git, but it work either.</p>
<p>I would be very happy if anybody has any idea what else I could try..</p>
","7","20109581","",""
"74960243","5791355","2022-12-30 09:58:31","0","290","<python><python-3.x><git><git-commit>","Getting the latest git commit id from URL on internal git using Python","<p>With the following function I am extracting the latest git commit id in a short form and write it into a text file.</p>
<pre class=""lang-py prettyprint-override""><code>from os.path import exists
from subprocess import Popen, PIPE

def get_git_commit_id(txt_file: str) -&gt; str:
    &quot;&quot;&quot;
    Gets the latest git commit id and places in the txt file if not exists
    Parameters:
    ==========
    :param txt_file: name of the txt file
    Returns:
    ==========
    :return: the latest git commit id
    &quot;&quot;&quot;
    if not exists(txt_file):
        print(f&quot;'{txt_file}' did not exist before&quot;)  # for logging
    try:
        process = Popen(&quot;git rev-parse --short HEAD&quot;, stdout=PIPE)
        output = process.communicate()[0]
    except Exception as error:
        output = bytes(&quot;latest&quot;, &quot;utf-8&quot;)
        print(&quot;It could not read the .git&quot;, error)  # for logging
    with open(txt_file, &quot;w&quot;, encoding=&quot;utf8&quot;) as file:
        file.write(output.decode(&quot;utf-8&quot;))
    file = open(txt_file, &quot;r&quot;, encoding=&quot;utf8&quot;)
    git_commit_id = file.readline().strip()
    return git_commit_id

get_git_commit_id(&quot;git_commit_id.txt&quot;)
</code></pre>
<p>However this code only works when I have my <code>.git</code> dir inside my project.</p>
<p>How can extract the latest git commit id in a short form from the URL where my project placed on the internal git?</p>
<hr />
<p><strong>References:</strong></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/15798862/what-does-git-rev-parse-do"">What does git rev-parse do?</a></li>
</ul>
","4","5791355","",""
"74964557","18111225","2022-12-30 18:07:46","0","93","<git><github><git-commit><git-log>","Git log & Github commit history doesn't sync","<p>So I'm new to Git and I'm now facing this problem that when I <code>git log</code> on <em>GIT Bash</em>, it doesn't seem to be synchronized with my github's repo commit history:</p>
<p><a href=""https://i.stack.imgur.com/QV4Xt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QV4Xt.png"" alt=""git log not synchronized with github repo commit history"" /></a></p>
<p>As I remembered, I ever done <code>git reset --hard &lt;commit-hash&gt;</code> before but I don't remember to what id. Can you tell me what can I do so it's being syncronized again?</p>
<p>Any helpful answer would be very appreciated!</p>
","3","18111225","",""
"75092580","14344708","2023-01-12 06:54:09","-1","60","<git><git-merge><git-commit><git-push><git-pull>","My local branch is not able to synch with master","<p>I am working on local branch name is local1 .I wrongly deleted one file which exists in master from my local branch and then pushed update to my local branch.
While raising PR it is showing file is deleted . To resolve this issue i tried with git fetch /merge and git pull origin master but nothing is working.
Now i am not able to synch my local branch to master .It is not updating.</p>
","0","14344708","",""
"75100038","20993948","2023-01-12 17:17:13","0","22","<github><git-commit><github-for-windows>","Git for Windows Commits","<p>I've been tasked to make a presentation about a topic, but every slide should be added into a repository as a commit using Git for Windows. My question is if I just add the file each time manually to the repository, will it look different then if i did it by Git for Windows? Thank you</p>
<p>Tried adding the file manually but im a noob so i dont know if theres a difference</p>
","2","20993948","",""
"75130005","18742904","2023-01-16 03:28:46","1","104","<git><github><git-commit><git-config>","How does GitHub decide which account made a commit. Does it have to do with personal access tokens?","<p>I am relatively new to git.
I have been using the same computer and own two different GitHub accounts. Let's call it old one and new one. I used old one long time ago and now when I tried to commit changes to the repository of my new account, it shows the commit changes are made by my old one.</p>
<p>I tried to change that by using this command:</p>
<pre><code>git config --global user.email youremail@email.com
</code></pre>
<p>Now after visual studio code asked me for my personal access token, whenever I commit, it shows that my new account is making those changes. Also, I can swap between these two accounts by simply using the command above.
My questions are:</p>
<ol>
<li>How come GitHub knows that it is in fact me committing changes using two different accounts not some random guys, is it because of the personal access token that cached on my computer?</li>
<li>If the personal access tokens are cached on my computer, where can I locate it and possibly delete or modify them?</li>
</ol>
","2","18742904","",""
"75141958","12754852","2023-01-17 04:20:39","0","31","<git><github><git-branch><git-commit><github-desktop>","Retrieve lost commits due to force change of branch (master --> main)","<p>Due to some errors in the main branch, I created a master branch and committed it once. When I tried to merge both the master and main, it showed no commits in common, so I had to forcefully switch the master branch to the main branch. After doing that, I lost the previous 63 commits in the main branch, and now I just have 1 commit.</p>
<p><a href=""https://i.stack.imgur.com/zcSlf.png"" rel=""nofollow noreferrer"">Initial 63 commits image</a>.</p>
<p><a href=""https://i.stack.imgur.com/CXln2.png"" rel=""nofollow noreferrer"">One Commit Image</a></p>
<p>Please help me to retrieve those commits back.
Thanks in the advance.</p>
","0","12754852","",""
"75147009","21027640","2023-01-17 13:17:06","0","27","<git><jenkins><jenkins-plugins><git-commit><changelog>","How to setup ""git changelog"" by using commits ID","<p>I am using Jenkins setup in system and want to get the commit logs between the two commits ID, Which variable should i use to specify as i have tried by mentioning the full commit ID in section but still not getting the commits between those two commits. Instead of getting between those two commits I am getting the changelog for the full repository. Please specify the answer.</p>
<p>I am using Post build Actions Git Changelog and tried with the two commits ID but getting the changelog for full repository but need to check logs between the two commits.</p>
","1","21027640","",""
"75153289","21031653","2023-01-17 23:33:54","2","290","<git><github><github-actions><git-commit>","How to set current date as git commit message with time zone?","<p><code>git commit -m &quot;$(date)&quot;</code>   -&gt;  is displaying in UTC, but how to get preferred time zone?</p>
<p>I wanted to get preferred timezone in <code>git commit</code>.</p>
","1","21031653","",""
"75163732","16284346","2023-01-18 18:26:48","0","28","<unity-game-engine><github><git-commit><git-lfs>","Possibly Squashing Git History To Save Space","<p>I'm not entirely sure how git handles the commit history, but essentially my situation is that I have developed a game using Unity and I have large assets and binary files (images and sound files etc) that are stored remotely using GitLfs to avoid filling up disk space locally and remotely.</p>
<p>I recently got rid of my GitLfs subscription since I finished my project, but I still want to host my code on GitHub so others can see. What is the best way to do this because I don't think I can just push the entire project to GitHub since its fairly large (and its probably not best practice either).</p>
<p>Maybe I could squash the git history to reduce the size of project since I think the way git history works (don't quote me on this) is that it stores the state of every file in every commit. And since large binary files go unchanged, its rather redundant and a waste of space. Any advice would be appreciated.</p>
","1","16284346","",""
"75168199","9731658","2023-01-19 05:48:18","2","50","<git><command-line-interface><git-commit><git-cherry-pick>","How to list the commits of a branch which is now merged into main?","<p>I am looking to list all the commits that were merged to the main branch from feature branches:-</p>
<pre><code>    |
    v
    main branch
    |
    a  
    | \ 
    b  y
    |  |
    c  x
    | / -&gt; feature branch
    d
    |
</code></pre>
<p>Is it possible to list the commit x and y,
given the feature branch name and master main branch name?</p>
","0","9731658","",""
"75172593","14646784","2023-01-19 12:57:09","1","247","<git><jenkins><jenkins-pipeline><git-commit><commit-message>","Skip jenkins stage if tag appears in the commit message","<p>I'm trying to skip some stages in a Jenkins pipeline if something like #no_build or #no_unittest is in the commit message.</p>
<p>I wan't to skip the Unittest stage if #no_unittest is present in the commit message.</p>
<p>I saw that there is a solution using a script but is it possible to do it in a declarative way?</p>
<pre><code>pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'npm build'
            }
        }
        stage('Unittest') {
            when{
                branch 'master'
            }
            steps {
                sh 'python unittest.py'
            }
        }
    }
}
</code></pre>
<p>P.S. The tags should be case sensitive, also &quot;-&quot; and &quot;_&quot; should be treated the same.</p>
<p>I tried putting changelog: #no_build but that didn't produce what was expected.
I'm not sure how to resolve the &quot;-&quot; and &quot;_&quot; being equal.</p>
","0","14646784","",""
"75202925","13881506","2023-01-22 18:35:33","0","308","<git><branch><git-commit>","Meaning of `HEAD -> main` vs `origin/HEAD`?","<p>When I do <code>git log --oneline</code> on a local branch that is ahead of <code>origin</code> by a few commits, I get something like:</p>
<pre><code>ff0dc35 (HEAD -&gt; main) Style headers
08183f1 Fix &lt;Title&gt;s
071d82e (origin/main, origin/HEAD) Style list items
9b24f09 Add style.css
b9fd2fa Add index.html and 3 other pages
69748ca Initial commit
</code></pre>
<p>From this <a href=""https://stackoverflow.com/a/8196578/13881506"">answer</a>, I understand that</p>
<ul>
<li><code>HEAD</code> refers to the commit that my repo is currently pointing at</li>
<li><code>main</code> is the branch</li>
<li><code>origin</code> refers to the remote repo</li>
</ul>
<p>What I don't understand is the difference between the <code>-&gt;</code> notation (e.g. <code>HEAD -&gt; main</code>) vs the <code>/</code> notation (e.g. <code>origin/main</code> and <code>origin/HEAD</code>). What does each thing mean?</p>
<ul>
<li><code>HEAD -&gt; main</code></li>
<li><code>origin/main</code></li>
<li><code>origin/HEAD</code></li>
</ul>
","3","13881506","",""
"75212032","11471113","2023-01-23 16:02:45","1","248","<git><github><git-commit><gpg-signature>","Unverified GPG signature committed by GitHub, why?","<p>I was working on a C++ project in CLion. I came across a Git Log message:</p>
<p><img src=""https://i.stack.imgur.com/bW22Z.png"" alt=""Commit Log"" /></p>
<p>When I make changes on a repository directly from GitHub, <strong>why does it say <code>Unverified GPG signature</code> in the Git Log despite having a <kbd>Verified</kbd> mark on GitHub?</strong></p>
<p><img src=""https://i.stack.imgur.com/nx7Zt.png"" alt=""GitHub Verified Mark"" /></p>
<p><strong>Edit 1:</strong> I have verified and ultimately trusted <strong>public</strong> and <strong>private</strong> GPG keys on my machine as well as on GitHub:</p>
<pre><code>rohan@Genesis:~$ gpg --list-keys
/home/rohan/.gnupg/pubring.kbx
------------------------------
pub   rsa3072 2021-07-10 [SC]
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
uid           [ultimate] Rohan Bari (Rohan Bari's GPG key created on Tesla's birthday.) &lt;rohanbari4@gmail.com&gt;
sub   rsa3072 2021-07-10 [E]
</code></pre>
","8","11471113","",""
"75222892","13590692","2023-01-24 14:24:09","0","161","<github><github-actions><git-commit>","Github Actions: Cache Error and end action without fail message","<p>I have a github action that transforms my Readme from one format to the other and which will then push the new Readme to the repository. For the pushing I have defined this job:</p>
<pre class=""lang-yaml prettyprint-override""><code>  push_readme:
    name: Push new Readme
    needs: generate_readme
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download readme result from job 1 generate_readme
        uses: actions/download-artifact@v3
        with:
          name: readme
      - name: Commit files
        run: |
          git config --local user.email &quot;action@github.com&quot;
          git config --local user.name &quot;GitHub Action&quot;
          git status
          git add READMEmd.md
          git commit -m &quot;Actions Generated Readme&quot;
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
</code></pre>
<p>The commit returns an error when there is nothing to commit - which happens whenever the readme was not updated in the recent push. This is expected and fine. However, I would like to handle this error properly s.t. the action simply ends when it occurs WITHOUT telling me it failed. Instead I'd like something in the sense of &quot;There is no new README to commit. Ending the action&quot;.</p>
<p>Could anyone point me to how to do that? I failed to find the solution yet.</p>
","3","13590692","",""
"75224094","19434208","2023-01-24 16:02:06","0","24","<bash><api><gitlab><jenkins-pipeline><git-commit>","Commit list from GIT is always processed completely per loop instead of individual elements","<p>I have a problem with my bash script. Namely, I am doing procedures against an API via CURL for each JSON file pushed to GIT. In principle the procedure works, however I have the problem that for processing in each loop the complete commit list is controlled against the API.</p>
<p>So if I push two JSON files to GIT, then each JSON file is executed twice against the API instead of each JSON file only once.</p>
<p>Example:</p>
<p>Git Push:
file1.json
file2.json
file3.json
file4.json
file5.json</p>
<p>Execution:
file1.json file1.json file1.json file1.json file1.json
file2.json file2.json file2.json file2.json file2.json
file3.json file3.json file3.json file3.json file3.json
file4.json file4.json file4.json file4.json file4.json
file5.json file5.json file5.json file5.json file5.json</p>
<p>Expectation would be each file only once.</p>
<p>I tried to solve the issue using arrays, but apparently it doesn't work as thought.</p>
<p>Here is the actual function from the code:</p>
<pre><code>#!/bin/bash

# Create an empty array to store processed files
processed_files=()

#Login
endpoint=xxx
username=xxx
password=xxx

# Get list of files in commit
files=`git diff --name-only HEAD HEAD~1`

# Test each file that is a json
for file in $files
do
    if [[ $file == *.json ]] 
    then
        # Check if the file has already been processed
        if [[ ! &quot; ${processed_files[@]} &quot; =~ &quot; ${file} &quot; ]] 
        then
            # Add the file to the array
            processed_files+=(&quot;$file&quot;)
            echo &quot;Jobexecution&quot;
            curl -k -s -H &quot;Authorization: xxx&quot; -X POST -F &quot;definitionsFile=@../$file&quot; -F &quot;$endpoint/deploy&quot;
            submit=$(curl -k -s -H &quot;Authorization: xxx&quot; -X POST -F &quot;jobDefinitionsFile=@../$file&quot; -F &quot;$endpoint/run&quot;)
            runid=$(echo ${submit##*runId\&quot; : \&quot;} | cut -d '&quot;' -f 1)
            # Check job status
            jobstatus=$(curl -k -s -H &quot;Authorization: xxx&quot; &quot;$endpoint/run/status/$runid&quot;)
            status=$(echo ${jobstatus##*status\&quot; : \&quot;} | cut -d '&quot;' -f 1)
            # Wait till jobs ended
            echo &quot;Wait till jobs ended&quot;
            until [[ $status == Ended* ]]; do
                sleep 10
                tmp=$(curl -k -s -H &quot;Authorization: xxx&quot; &quot;$endpoint/run/status/$runid&quot;)
                echo $tmp | grep 'Not OK' &gt;/dev/null &amp;&amp; exit 2
                tmp2=$(echo ${tmp##*$'\&quot;type\&quot; : \&quot;Folder\&quot;,\\n'})
                status=$(echo ${tmp2##*\&quot;status\&quot; : \&quot;} | cut -d '&quot;' -f 1)
            done
        else
            echo &quot;Job was already executed. Ill skip this one.&quot;
        fi
    fi
done

# Logout
curl -k -s -H &quot;Authorization: xxx&quot; -X POST &quot;$endpoint/session/logout&quot;

# Exit
if [[ $status == *Not* ]]; then
    echo 'Job failed!'
    exit 1
else
    echo 'Success!'
    exit 0
fi

</code></pre>
<p>As already mentioned, I tried to solve the issue using arrays, but apparently it doesn't work as thought.</p>
","0","19434208","",""
"75238266","20373524","2023-01-25 18:23:10","0","31","<git><visual-studio-code><git-commit><commit-message><gitlens>","How to fetch modified files path in git commit message template file for vs code","<p>I am trying to add an alias to my <code>.gitmessage.txt</code> template file that will automatically add all modified files in the current repo to the commit message.</p>
<p>I create this file in my project folder. and i am using <strong>GitLens extension</strong> for commit &amp; push</p>
<p>and i write <strong><code>${relativeFile}</code></strong> in my <code>.gitmessage.txt</code> file for fetch automatically add all modified files and make it default git commit message file with <strong><code>git config commit.template .gitmessage.txt</code></strong></p>
<p>when I commit message it commits the message <strong><code>${relativeFile}</code></strong> (as it is)</p>
<p>but I want modified files path in place of <code>{relativeFiles}</code></p>
<p>I don't know what I will do, please help me to figure it out.</p>
","0","20373524","",""
"75238389","18104539","2023-01-25 18:35:35","0","26","<git-commit><husky><git-husky><codefresh>","Codefresh git-commit with husky yarn pre-commit","<p>We are using the <code>git-commit</code> Codefresh step to push updates during a build. We use husky and have pre-commit hooks that rely on <code>yarn</code>. This fails within the step because the dependency is missing.</p>
<p>How should we handle these hooks?</p>
<p>Here is the current step configuration:</p>
<pre><code>  push_snapshots:
    stage: deploy
    title: Commit and push snapshot updates.
    type: git-commit
    working_directory: ${{clone}}
    arguments:
      repo: &quot;${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}&quot;
      git: github
      commit_message: Update snapshot post infra deploy
      add:
        - &quot;./tenants/*/snapshot/*&quot;
    when:
      steps:
        - name: deploy_infra
          on:
            - success
</code></pre>
<p>and our <code>.husky/pre-commit</code> looks like:</p>
<pre><code>yarn lint-staged
</code></pre>
<p>We've tried a couple of things:</p>
<ol>
<li>Looked for a way to pass the <code>--no-verify</code> flag, but it looks like the only flag supported in the step is <code>--allow-empty</code>, and there is no way to pass arbitrary flags</li>
<li>Tried to override the image with a custom image (that extends <code>git-commit:1.0</code> and then adds npm and yarn). That image was not actually read by the step, the step just used its usual image.</li>
</ol>
","0","18104539","",""
"75242210","21084273","2023-01-26 04:16:38","0","36","<git><git-commit>","fatal: paths 'commit ...' with -a does not make sense ,how can I solve this problem?","<p>I have been working on a flutter project in between I tried to initialise git on that project.
first I used <code>git init</code> and then <code>git add --all</code>.All the changes are visible on <code>git status</code>. Then I user git commit -m 'commit message' and got this error-<code>error: pathspec 'commit' did not match any file(s) known to git</code>
so i used-<code>git commit -a -m 'commit message'</code>.so i got this error</p>
<p>how can I commit all these changes?</p>
","1","21084273","",""
"75242472","19991311","2023-01-26 05:17:34","0","24","<git><git-commit>","latest pushed commit not showing on local as well as remote repositor","<p>This is what I did to push my local changes to the remote
<a href=""https://i.stack.imgur.com/uwuB5.png"" rel=""nofollow noreferrer"">commit</a>
<a href=""https://i.stack.imgur.com/4t8BS.png"" rel=""nofollow noreferrer"">force push</a></p>
<p>But after doing this all all my local changes were gone and when I checked my remote repository, my latest commit wasn't there too. How can get my latest commit back?</p>
<p>I tried to checkout to staging pulled latest changes and rebase it into my branch. Also I tried <code>git reset --soft HEAD~1</code> but still it retrieve my second last commit not the latest one.</p>
","2","19991311","",""
"75274228","13174465","2023-01-29 10:36:39","1","50","<git><git-commit><git-tag><git-describe>","How to get individual elements of $ git describe?","<p>We are working on a versioning system based on git tags.
While <code>git describe</code> is great, we would prefer commands that output the three elements of git describe seperately (latest tag, commits since tag, commitId) e.g. <code>TAG</code> <code>12</code> <code>gff9fd30</code>. We managed getting the commitId with <code>git rev-parse HEAD</code>, but don't know if there are any commands for only getting the latest tag and the commits since that tag.</p>
<p>Of course it would be possible to split the output at hyphens, but if there is a cleaner solution, we would prefer it.</p>
<p>Thanks for any hints!</p>
","2","13174465","",""
"75348999","7529776","2023-02-04 23:11:39","1","75","<git><rebase><git-commit><git-rewrite-history>","Is there a way to have a commit per day and per file automatically in git?","<p>I use <code>git-auto-commit-mode</code> (<a href=""https://github.com/ryuslash/git-auto-commit-mode"" rel=""nofollow noreferrer"">https://github.com/ryuslash/git-auto-commit-mode</a>) in Emacs to preserve my files automatically sync with my repo.</p>
<p>However, I got a massive list of commits per day (the package makes a commit in every save). At the end of the day I finish with something like this</p>
<pre><code>Sat Feb 4 12:57:14 2023 fileA.txt
Sat Feb 4 12:56:52 2023 fileA.txt
Sat Feb 4 12:55:57 2023 fileA.txt
--------- Different file --------
Sat Feb 4 12:54:47 2023 fileB.txt
Sat Feb 4 12:45:04 2023 fileB.txt
Sat Feb 4 12:45:04 2023 fileB.txt
Sat Feb 4 12:44:51 2023 fileB.txt
--------- Different day ---------
Fri Feb 3 14:44:27 2023 fileA.txt
Fri Feb 3 14:44:05 2023 fileA.txt
Fri Feb 3 14:41:35 2023 fileA.txt
--------- Different file --------
Fri Feb 3 14:40:54 2023 fileB.txt
Fri Feb 3 14:40:17 2023 fileB.txt
Fri Feb 3 14:39:14 2023 fileB.txt
</code></pre>
<p>I would like to have a cleaner history like this</p>
<pre><code>Sat Feb 4 12:57:14 2023 fileA.txt
Sat Feb 4 12:54:47 2023 fileB.txt
Fri Feb 3 14:44:27 2023 fileA.txt
Fri Feb 3 14:40:54 2023 fileB.txt
</code></pre>
<p>Where I preserve the last commit day per day and per file.</p>
<p>I can do this using <code>git rebase</code> manually, but I couldn't figure it out how to do it automatically for the whole history, taking account deletions and renames.</p>
<p>Thanks for any help.</p>
","1","7529776","",""
"75376051","21166173","2023-02-07 16:07:56","0","15","<gitlab><push><commit><git-commit><git-push>","How can I roll back the commit change after pushing my code to the branch?","<p>I have a problem
I would appreciate it if you could help me</p>
<p>I created a branch in gitlab on top of my main branch and saved 100 changes in a commit and pushed the code
How can I go back and save the changes in several different commits?</p>
<p>I used the following command <strong>git checkout -b newBranchName Comment ID</strong> And I expected to be able to see the changes by going to the relevant commit</p>
","0","21166173","",""
"75443167","19816277","2023-02-14 03:24:47","0","14","<github><synchronization><git-commit>","How to synchronize code using github without making a commiting","<p>I am working on the same project from two different computers (let's call them PC-1 and PC-2) using VSCode. The project is on github.
For example, usually when I work from PC-1, I make changes to the code, and when I accomplished some working state of the code, I execute <code>git commit</code> and <code>git push</code> to load working code to the github repo. Then when I need to switch to PC-2, I just executing <code>git pull</code> to load all the changes I made on PC-1.</p>
<p>But what should I do, when I working on something new on PC-1 and need to switch to PC-2, but code on PC-1 is not ready to commiting (feature I working on is still in progress, and code is kind of broken).</p>
<p>As far as I know, you should commit and push only &quot;working&quot; code, but not half-done things. If I`ll just do commit when I need to sync - I'll end up with a ton of &quot;trash commits&quot; that are shouldn't be there, and history of commits will be a huge mess.</p>
<p>So, what is best practice to synchronizing between two computers when there is just &quot;work in progress&quot; on the one of them, and you need to pull that &quot;work in progress&quot; to another one? Should I just use branches? I am not sure if it is good idea, because history of the branch commits would be same mess.</p>
<p>Usually I just trying to clean not-ready code quickly to make code look clean, but it is still &quot;trash commit&quot;</p>
","0","19816277","",""
"75452649","18432763","2023-02-14 19:50:28","0","170","<git><visual-studio><pull-request><git-commit><staging>","Git changes disappear when saving the file","<p>When I want to Stage my changes on my branch, I click the plus sign (Stage) in Visual Studio 2019's Git Changes panel on the right side of the changed file. Usually after that the files goes in the staged section and after writing a commit message I click commit and it's done.
<a href=""https://i.stack.imgur.com/sJKqx.jpg"" rel=""nofollow noreferrer"">Git Changes Panel in Visual Studio 2019</a>
But after click the plus sign the vs asks me if I want to save the changes of the file and if I click 'save' the file just disappears from the Changes section.
Without staging and committing and right after it's visible in the development branch. Without even making a Pull request.
<a href=""https://i.stack.imgur.com/CEUeN.jpg"" rel=""nofollow noreferrer"">MSV Asks If I Want To Save Instead of Staging</a>
What do I miss?</p>
<p>I don't really know what I can try. I have changed branches, I have deleted and created new branch.
It feels like I messed up some sort of settings. I have no idea honestly.</p>
","8","18432763","",""
"75457595","20979977","2023-02-15 09:14:38","1","17","<rest><github><branch><commit><git-commit>","How to get the commits of a branch which is NOT a default branch of a repo?","<p>How to get the commits of branch which are not default?
Currently the search commit api is giving only the commits present on default branch.</p>
<p>I have tried the below things. By adding branch name as a query param but not getting anything.
If I remove that query param I get only default branch (i.e. main) commits.</p>
<p>TRIED This: but not getting any output.</p>
<p><a href=""https://api.github.com/search/commits?q=repo:test-dai/issue-test+committer-date:1970-01-01..2023-02-14&amp;branch=demo"" rel=""nofollow noreferrer"">https://api.github.com/search/commits?q=repo:test-dai/issue-test+committer-date:1970-01-01..2023-02-14&amp;branch=demo</a></p>
<p><a href=""https://api.github.com/search/commits?q=repo:test-dai/issue-test+committer-date:1970-01-01..2023-02-14+branch=demo"" rel=""nofollow noreferrer"">https://api.github.com/search/commits?q=repo:test-dai/issue-test+committer-date:1970-01-01..2023-02-14+branch=demo</a></p>
<p>I want commits of a branch which is NOT a default branch.</p>
","0","20979977","",""
"75491889","21238477","2023-02-18 07:41:02","0","120","<git><git-commit><commit-message>","How to commit without message in Git?","<p>I know that GitHub highly recommends to use messages BUT I work on semi-public projects with my brother and we are working in the same room so obviously we don't need any comments to our commitments. Are there any other options to completely disable commitment messages at least for the specific repository/project/file?</p>
<p>I found this command to make a single commitment: <code>git commit -a --allow-empty-message -m &quot;&quot;</code> and it works pretty well but I'm already tired of typing it every time.</p>
","2","21238477","",""
"75499584","9381746","2023-02-19 10:50:09","1","39","<git><commit><git-commit><todo>","How to copy the message of the previous commit into the new commit to edit it","<p>I write my commits in the following way, namely I try to document what has been done and what remains to be done (todo list):</p>
<pre><code>Done: 
- task1 done
Todo: 
- task2
-- implement feature1
-- implement feature2
- task3
-- implement feature1
-- implement feature1
</code></pre>
<p>Is there a way to automatically copy the content of the previous commit into the new commit to edit (in my case, could be interesting for the todo list)</p>
<p>If someone have another system of &quot;todo list&quot; integrated with git, I am also happy to hear</p>
","2","9381746","",""
"75527634","21231235","2023-02-22 02:05:56","0","16","<github><pull-request><git-commit>","Verified commits in PR are showing up as unverified in target branch post merge","<p>Can someone help me with this ??</p>
<p>I am following the below steps to push my changes to the main branch:</p>
<ol>
<li><p>Create a temp branch out of latest main</p>
</li>
<li><p>Edit files and stage my changes</p>
</li>
<li><p>Commit to the branch in local using below command:</p>
<p><code>git commit -m &lt;message&gt; -S</code></p>
</li>
<li><p>I do get a prompt to enter passphrase, I enter it and I get the signed commit. Verified the signed commit both in github UI and command line too:</p>
<p><code>git log -1 --show-signature</code></p>
</li>
<li><p>Post this, I create a PR using this branch onto the main. Even the commit in PR shows the commit as verified but post the merge of PR, the commit in main branch shows up as unverified.</p>
</li>
</ol>
<p>What could be the reason behind ??</p>
<p>I did check that my GPG keys are configured appropriately in github and further the git configurations are also set fine in my local which is why i presume that i can see the verified tag for the commits in branch and also in PR.</p>
<p>Not sure why it is disappearing in target branch after merge.</p>
","2","21231235","",""
"75544610","20218893","2023-02-23 12:06:04","0","62","<git><github><visual-studio-code><git-commit><source-control-explorer>","How can I connect VS Code source control with a GitHub profile to directly push, commit, and sync changes and even push the repository?","<p>How can I connect VS Code source control with a GitHub profile to directly push, commit, and sync changes and even push the repository?</p>
<p>Committing and syncing with the git repo is easy if we open the proper repo directory to push.</p>
","1","20218893","",""
"67093908","13708712","2021-04-14 14:43:21","6","5760","<git><github><version-control><git-commit>","Does GitHub count the commits you made that are in a private repo of an organization","<p>I have been contributing to a private repo of an organization on GitHub. There is no member added in the organization and at the organization page, it shows this message</p>
<blockquote>
<p>This organization has no public members. You must be a member to see who’s a part of this organization.</p>
</blockquote>
<p>So, I am the part of this organization and I have made a few commits, verified by GPD signature verification but these commits are not being counted by my contribution heat map, even though I have checked the option to show contributions on the private repos. Does GitHub count the commits you made in a private repo of an org for your heatmap ?</p>
","1","13708712","",""
"67101066","4269118","2021-04-15 01:34:42","0","253","<git><bitbucket><git-merge><git-branch><git-commit>","Show a branch name with a commit message when merging in Bitbucket","<p>Is there any way to switch that on in a repo settings or somehow else? If no, is there any workaround?</p>
<p><a href=""https://i.stack.imgur.com/RGIFc.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RGIFc.png"" alt=""enter image description here"" /></a></p>
<p>Above, you can see a PR that has a lot of commits from different branches, merged into <code>stage</code> before, but we can't exact recognize from which ones. What I expect is showing a branch names in opposite to each commit message, but I don't know if it possible in Bitbucket. I'm talking about UI at Bitbucket website, if not obviously.</p>
","0","4269118","",""
"67101630","9318464","2021-04-15 02:55:24","0","915","<git><github><commit><git-commit><git-push>","Git local commit timestamp when pushed","<p>I have a simple question. I am working on a feature locally and have made numerous commits without pushing them yet. Once I push these commits, will they have the timestamp (seen in GitHub) when the commit was made locally or rather the timestamp when it was pushed?</p>
","2","9318464","",""
"31240794","780393","2015-07-06 08:15:38","-2","32","<git><git-commit><git-revert>","How to do Reverting in GIT?","<p>I am learning GIt.
I have 2 branches Prepod and Master. Working branch is prepod . 
I have commited the code on friday from prepod to master and i think there is some problem in the code.</p>

<p>so i have to put the code of Thursday of prepod to master.</p>

<p>Can anyone help.</p>

<p>Thanks.
Prat</p>
","0","780393","",""
"31241850","810555","2015-07-06 09:11:14","2","148","<git><git-commit>","Get Deleted files list from Git Commits","<p>I am working on a PAAS app. We provide GIT deployment feature where we pull the code from a Git repo in a temp directory and copy the data to working public directory of the server.</p>

<p>The problem with this approach is that it doesn't remove the files from working public directly which were removed in Git Repo. I see apps like DeployHQ somehow extract that list from Git Commits.</p>

<p>Do I have to parse the Git history for that or are there any opensource tools that extract the list of Deleted/modified files from Git commit history.</p>
","0","810555","",""
"31266307","1846656","2015-07-07 10:40:43","3","1246","<git><git-commit><git-checkout><git-revert>","Git discarded uncommitted changes after checkout","<p>As far I know <code>git checkout</code> doesn't allow us to checkout branch until we commit all the previous changes but my changes have been discarded.</p>

<p>I executed <code>git status</code> command and it showed me the list of modified files. 
Then I executed <code>git checkout .</code> (dot) command but it didn't prompt me to first commit my previous changes and discarded all my changes and checked out master branch on my local machine.</p>

<p>Can anyone please guide me that why <code>git checkout .</code> behaved in this way?
And how I can move back to my previous code on my local machine (with modified and uncommitted changes)? Why did it discard my changes?</p>
","0","1846656","0","0"
"67129186","10333028","2021-04-16 16:46:43","3","3112","<git><github><git-commit><pull-request>","What happens to commits on a branch after the branch has created, and merged vis a pull request?","<p>I am working on a team and one of my team mates created a pull request on a branch that wasn't finished. If the pull request is approved and merged will future commits auto pull into the main branch?</p>
","0","10333028","0","0"
"67133312","11407527","2021-04-16 23:32:28","10","4035","<git><visual-studio><github><git-commit>","How do you force push in Visual Studio?","<p><strong>Note:</strong> the title of this question has been changed based on the intent of updating the remote after performing <code>git reset --hard</code>. For context, the original title of this question was:</p>
<blockquote>
<p>How do I reset to a prior Git commit in Visual Studio and get the remote branch to reflect the changes?</p>
</blockquote>
<p>I know this has been asked before, but I still can't get things working.</p>
<p>There are two commits that I need to get rid of.  So the from the top of the tree I have:
BadCommit 1
BadCommit 2
GoodCommit</p>
<p>In VS 2019, I right-click on GoodCommit -&gt; Reset -&gt; Delete Changes</p>
<p>It resets to GoodCommit locally.  But if I try to push this to the repository, I get a message saying that the local branch is behind the remote branch.  If I pull and push, I just get right back where I started from with the 2 BadCommits on top.</p>
<p>How do I get the remote branch back to the GoodCommit?</p>
","0","11407527","0","0"
"67139346","814548","2021-04-17 14:37:44","2","527","<maven><versioning><git-commit><maven-release-plugin>","How to update version in non pom files using maven release plugin","<p>I've a maven project and I'm using the maven-release-plugin to prepare the release.</p>
<p>When I run the <code>mvn --batch-mode release:prepare</code> command, it creates two commits as follows</p>
<blockquote>
<p>(HEAD -&gt; develop) [maven-release-plugin] prepare for next development
iteration</p>
<p>(tag: myapp-1.0.0) [maven-release-plugin] prepare release
myapp-1.0.0</p>
</blockquote>
<p>This correctly updates all the pom files.</p>
<p>but I've some text files in my project where there is a version token. I'm looking for a way to replace these version tokens appropriately as per the commits.</p>
<p>For example, the <code>prepare release</code> commit should replace the token to <code>1.0.0</code> and <code>prepare for next development</code> should replace the token to <code>1.0.1-SNAPSHOT</code></p>
<p>I've checked the documentation but didn't find any way to do this. If somebody has any ideas on how to achieve this through maven-release-plugin or with the help of any other plugin, please suggest.</p>
<p><strong>EDIT:</strong></p>
<p>This issue is not solved even if I place the files inside resources directory. The thing I've observed is that the release plugin only selectively adds the <code>pom.xml</code> files in the commit, not other files even if they are modified gets added into to the commits pushed by release plugin.</p>
<p>Let me clarify I am not looking for replacing version in the source file and have it replaced in the generated artifact. We can argue about why there is version field in non source file, but there are genuine scenarios anyone can think of.</p>
<p>As a developer I want that the release commit made by the maven release should be accurate i.e. It should contain all the changes associated with that specific release version.</p>
","6","814548","",""
"67146959","11705021","2021-04-18 09:18:12","1","117","<windows><cmd><jenkins-pipeline><git-commit>","How to get commitHash from windows slave","<p>So far I used the below code for getting the <code>commitHash</code> in my <code>JenkinsFile.groovy</code> from linux slaves:</p>
<pre><code>def commitHash = sh(returnStdout: true, script: &quot;git rev-parse HEAD&quot;).trim()
</code></pre>
<p>Now I'm running on <code>windows</code> slave. How can I modify this command to run on <code>windows</code> as well through <code>CMD</code>?</p>
","0","11705021","0","0"
"31284744","1236694","2015-07-08 06:08:08","2","49","<git><caching><git-push><git-commit><git-remote>","how does Git internally handle git push where no outstanding commits","<p>How does Git internally handle a <code>git push</code> for the case where the local branch is up-to-date with the remote , i.e. no outstanding commits ?</p>

<p>Does Git actually retrieve the latest state from the remote origin to determine that ""Everything is up-to-date"" --or-- does Git rely on its local cache of the remote origin ?</p>
","0","1236694","0","0"
"14186681","316596","2013-01-06 21:00:14","81","20767","<git><intellij-idea><git-commit>","Git & Intellij, How do I commit only parts of a changed file","<p>I can't seem to commit only a fraction of the changes in a file, it seems to be all of the file or nothing, I'm using Git with Intellij, is it possible?</p>

<p>Thanks.</p>
","2","316596","0","0"
"67183535","2271895","2021-04-20 17:19:57","1","170","<git><github><git-commit><git-push><git-pull>","Question on merging with local modifications in Git","<p>The following is a very common error message encountered when we try to pull a git repository locally with some existing local changes in the local repository.</p>
<p><code>Please commit your changes or stash them before you merge. Aborting</code></p>
<p>I have a question about <a href=""https://stackoverflow.com/users/877235/stdcall"">stdcall's</a> <a href=""https://stackoverflow.com/a/15745424/"">answer</a> in <a href=""https://stackoverflow.com/questions/15745045/how-do-i-resolve-git-saying-commit-your-changes-or-stash-them-before-you-can-me"">this post</a>.</p>
<p>He has mentioned the following 3 options over there.</p>
<p><a href=""https://i.stack.imgur.com/yOsoF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yOsoF.png"" alt=""enter image description here"" /></a></p>
<p>Question:
If I just commit my local changes using the command <code>git commit -m &quot;Saving my local changes&quot;</code>         Is <code>git pull</code> not going to throw the same error that I have mentioned above? I mean I don't need to do a merge (using <code>git merge</code>) or anything while pushing to gitlab?</p>
<p>In a normal workflow when I don't see any error, I follow the steps below to commit and push my changes:</p>
<ol>
<li>git add .</li>
<li>git commit -m &quot;My message&quot;</li>
<li>git push</li>
</ol>
<p>Since I am getting above error, are the following steps correct:</p>
<ol>
<li>git commit -m &quot;Saving my local changes'</li>
<li>git pull // This will pull whatever is on the branch including my local changes</li>
<li>git push //This will push my local changes to git</li>
</ol>
<p>I have used <code>git stash</code> in the past and it has resulted in my local changes getting wiped out so I am scared of using it. I didn't do git stash pop though and probably that's the reason it behaved like that.</p>
","0","2271895","",""
"67203864","3220974","2021-04-21 21:43:46","0","61","<git><github><tags><branch><git-commit>","How can a specific git repo contain only one branch, and yet each of its 94 tags returns files which do not appear in the branch?","<p>I see in this publicly available GitHub repo, <a href=""https://github.com/ServiceNow/devtraining-needit-quebec"" rel=""nofollow noreferrer"">https://github.com/ServiceNow/devtraining-needit-quebec</a>, only one branch, main, which contains three small files and a folder with a small file:</p>
<ul>
<li>update [folder]
<ul>
<li>sys_ui_view_5bd975bd0fa03200cd674f8ce1050e7f.xml</li>
</ul>
</li>
<li>README.md</li>
<li>checksum.txt</li>
<li>sys_app_6ead8e780f603200cd674f8ce1050ed1.xml</li>
</ul>
<p>There is only one branch, main, but there are 94 tags.  Each tag has associated with it 2 &quot;assets&quot; which appear unique to the tag.  Every tag has a source code .zip and source code .tgz.  These archive files appear to me to each be unique with a unique set of files in them.  By unique I mean all files in all archives and the archives themselves are mutually exclusive of each other.</p>
<p>My understanding of git is that each commit has a unique identifier which represents a pointer to the changes between the sum of all previous chunks and the current.  Each &quot;file&quot; will always be part of a commit, and each commit must always be in at least one branch.  In other words no commit can exist outside of a branch otherwise it is not a commit.  Tags are only a unique bookmark to the state of a repo.  It could have also been the state of a branch at a point in time.</p>
<p>How then, can a tag represent a unique set of files that lives completely outside of any branch?  The only explanations I can imagine so far are 1. my understanding of git is wrong or incomplete.  2. GitHub has extended git in some way and my understanding of GitHub is also wrong or incomplete.</p>
","0","3220974","",""
"67215988","2908330","2021-04-22 15:08:26","1","701","<git><github-actions><git-commit>","Validate commit hash from the input (workflow_dispatch)","<p>I want to validate a commit hash that is coming from the input (<a href=""https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/"" rel=""nofollow noreferrer"">workflow_dispatch</a>):</p>
<pre><code>runs-on: ubuntu-latest
steps:
  - name: Checkout Project
    uses: actions/checkout@v2
    
  - name: Run only if input exist (Validate input hash)
    if: ${{ github.event.inputs.sha != '' }}
    run: git cat-file -e ${{ github.event.inputs.sha }}^{commit}
</code></pre>
<p>Problem is that it only works for the latest commit.</p>
<p>If I use any other commit, it says:</p>
<pre><code>fatal: Not a valid object name COMMIT_HASH^{commit}
Error: Process completed with exit code 128.
</code></pre>
<p>But it works locally. I also tried this way:</p>
<pre><code>git cat-file -e ${{ github.event.inputs.sha }}
git cat-file commit ${{ github.event.inputs.sha }}
</code></pre>
","0","2908330","",""
"67227544","4558047","2021-04-23 09:36:20","0","186","<git><github><git-commit>","How do I commit a file for only some users in a git repo?","<p>I am pretty sure people have faced this issue before, but I am not able to find any solution.</p>
<p>I have been working on an android library and plan to make it open source by putting it on GitHub. I would like to, however, only expose the maven upload creds to some specific authorised users - the core maintainers of the library.</p>
<p>How is this possible? If I store the username and password in a file and add it to gitignore, I won't be able to share it with anyone else via GitHub. However, if I do add the file to git, it will end up going to a public repo and being shared with everyone.</p>
<p>Is there some way to specify in git that a given file should only be accessed by people whose email ids fall in a specified list? Am I missing something very obvious?</p>
","2","4558047","",""
"67239805","14806099","2021-04-24 06:07:54","1","370","<git><git-commit>","How to move the master to the current head in git?","<p>Currently I have my head and master as follows-</p>
<pre><code>2441dc3 (HEAD) Made backend route for student attendance
2b27490 Made storage to localstorage from the classname
577bd81 (origin/master, master) Made attendace UI working though there are some errors
</code></pre>
<blockquote>
<p>How do I now make my current head the master?</p>
</blockquote>
","0","14806099","",""
"48902734","3003927","2018-02-21 09:48:14","0","32","<git><github><git-commit>","How to resolve missing git commit between rebasing?","<p>Okay, so I know this is not the correct way to use git, but I'm helping my workmates in this particular situation.</p>

<p>So let's say I have workmate A and B, and both are committing to the same branch. </p>

<p>One day, A commit to the branch, and sync. When B sync (merge) using Github desktop, B get conflicts.</p>

<p>B resolves the conflicts in local, but he did not make any commit. B continues working and making changes.</p>

<p>And then, A commit again to the same branch, and sync.</p>

<p>B then commit locally. And then B tried to do sync (merge) again using Github desktop.</p>

<p>The problem is, all of B's changes between the first sync and second sync is gone. It's like his commit does not even exist in the <code>git log</code>. I checked both in the <code>git log</code> and Github desktop commit history, both showed the same thing.</p>

<p>Now he wants to roll back the sync to his commit, but he can't do that because the commit does not exist. The event of the first sync is not even there.</p>

<p>Strangely, the Android Studio version control enlist that there is actually such commit made, with 200 file changes. But when he tried to revert to the commit using the Android Studio, only 1 file reverted, not 200.</p>

<p>How can we fix this situation? How can we revert to a (seemingly) non-existent commit? Does the commit actually exist but orphaned, and there's a way to recall it?</p>
","2","3003927","",""
"67262096","","2021-04-26 06:57:14","-1","74","<git><github><gitlab><git-bash><git-commit>","I have lose my previous commit github by gitbash","<p>I am was updating my project to github by using git bash, but this was not updating, and i have try to google my problem, and then by using some command my project updated to git hub repositery,
but my previous commit is not there.</p>
<blockquote>
<p>I didn't delete my project, but when my project was not updating, then
i had deleted &quot; git &quot; directory which was the hidden directory.</p>
</blockquote>
<p>My command what i have used.</p>
<pre><code>       182  git init
  183  git add .
  184  git commit -m &quot;initial relese 3*3&quot;
  185  git branch -M main
  186  git remote add origin https://github.com/sainivinit/TicTacToe.git
  187  git push -u origin main
  188  git push -u origin main -force
  189  git push -u origin main --force
  190  exit
  191  git init
  192  git add -A
  193  git commit -m &quot;working 10*10 or dynamic play board and shift hard to soft code&quot;
  194  git remote rm origin
  195  git remote add origin https://github.com/sainivinit/TicTacToe.git
  196  git push -u origin main
  197  git init
  198  git add -A
  199  git commit -m &quot;10*10 board solved some issue&quot;
  200  git remote rm origin
  201  git remote add origin https://github.com/sainivinit/TicTacToe.git
  202  git push -u origin main
  203  exit
  204  git init
  205  git add .
  206  git commit -m &quot;initial realese&quot;
  207  git branch -M main
  208  git remote add origin https://github.com/sainivinit/ShakshiTradres.git
  209  git push -u origin main
  210  git init
  211  git add -A
  212  git commit &quot;10*10 board now playboard and players datasource is different&quot;
  213  git commit -m &quot;10*10 board now playboard and players datasource is different&quot;
  214  git remote rm origin
  215  git remote add origin https:///github.com/sainivinit/TicTacToe.git
  216  git push -u origin main
  217  git init
  218  git add -A
  219  git commit -m &quot;10*10 board checkDiagonalsForWin&quot;
  220  git remote rm origin
  221  git remote add origin https://github.com/sainivinit/TicTacToe.git
  222  git push -u origin main
  223  git init
  224  git add -A
  225  git commit -m &quot;10*10 board now players will save in h2 and palyboard will save into mysql&quot;
  226  git remote rm origin
  227  git remote add origin https://github.com/sainivinit/TicTacToe
  228  git push -u origin main
  229  exit
  230  git init
  231  git add -A
  232  git commit -m &quot;remove lots of bugs and use recomended pettern&quot;
  233  git remote rm origin
  234  git remote add origin
  235  git remote add origin https://github.com/sainivinit/TicTacToe.git
  236  git push -u main
  237  git push -u main --force
  238  git remote add origin https://github.com/sainivinit/TicTacToe.git
  239  git push -u origin main
  240  git push -u origin main --force
  241  exit
  242  git init
  243  git add -A
  244  git commit -m &quot;impletemns integration testing and solved some issue&quot;
  245  git remote rm origin
  246  git remote add origin https://github.com/sainivinit/TicTacToe.git
  247  git push -u origin main
  248  git push -u origin main
  249  git init
  250  git add -A
  251  git commit -m &quot;complete game score&quot;
  252  git remote rm origin
  253  git remote add origin https://github.com/sainivinit/TicTacToe.git
  254  git push -u origin main
  255  git clone https://github.com/sainivinit/TicTacToe.git
  256  v
  257  git init
  258  git add -A
  259  git commit &quot;solved some issue&quot;
  260  git commit -m &quot;solved some issue&quot;
  261  git remote rm origin
  262  git remote add origin https://github.com/sainivinit/TicTacToe.git
  263  git push -u origin main
  264  exit
  265  git init
  266  git add -A
  267  git commit -m &quot;integration testing&quot;
  268  git remote rm origin
  269  git remote add origin https://github.com/sainivinit/TicTacToe.git
  270  git push -u main
  271  git remote add origin https://github.com/sainivinit/TicTacToe.git
  272  git push -u main
  273  git remote add https://github.com/sainivinit/TicTacToe.git
  274  git remote add origin https://github.com/sainivinit/TicTacToe.git
  275  git push -u main
  276  git push -u main --force
  277  git init
  278  git add -A
  279  git commit -m &quot;integration testing&quot;
  280  git remote rm origin
  281  git remote add https://github.com/sainivinit/TicTacToe.git
  282  git remote add origin https://github.com/sainivinit/TicTacToe.git
  283  git push -u origin main
  284  git push -u origin main
  285  git init
  286  git add -A
  287  git commit -m &quot;integration testing &amp; solve some issue&quot;
  288  git remote rm origin
  289  git remote add origin https://github.com/sainivinit/TicTacToe.git
  290  git push -u origin main
  291  git init
  292  git add -A
  293  git commit -m &quot;integration testing&quot;
  294  git remote rm origin
  295  git remote rm origin
  296  git remote add origin https://github.com/sainivinit/TicTacToe
  297  git push -u origin main
  298  git remote add origin https://github.com/sainivinit/TicTacToe.git
  299  git push -u origin main
  300  git push -u origin main --force
  301  git push -u origin master
  302  git show-ref
  303  git push origin HEAD:main
  304  git show-ref
  305  git push -u origin main
  306  git push origin HEAD:main
  307  git init
  308  git add .
  309  git commit -m &quot;integration testing&quot;
  310  git push -u origin master
  311  git push -u origin master --force
  312  git push -u origin master --force
  313  git init
  314  git add -A
  315  git commit -m &quot;test integration&quot;
  316  git push origin HEAD:main
  317  git push origin HEAD:main --force
  318  git commit -m &quot;test integration&quot;
  319  git reflog
  320  git reflog
  321  history
</code></pre>
<p><a href=""https://i.stack.imgur.com/eFM7s.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eFM7s.png"" alt=""image here"" /></a></p>
<p><strong>I have lose my 11 previous commits.</strong></p>
","7","","",""
"67264528","3343490","2021-04-26 09:58:16","0","346","<git><git-commit><git-log>","How to find pre-commit id covered by a new forced push commit id?","<p>I add my code change to repo, I can see the commit id by <code>git log -n1</code>.<br>
Then I combine a new change to pre-commit id using <code>git add -u; git commit --amend; git push -f</code>.<br>
Then I suddenly forget what's the diff with second change. But the pre-commit id disappers in <code>git log</code> history.<br>
How to find the missing commit?</p>
","1","3343490","",""
"48933534","7310251","2018-02-22 17:17:19","2","148","<github><git-commit>","GitHub is pushing my commit as author as well as non author. What should I do?","<p><a href=""https://i.stack.imgur.com/YXnMM.png"" rel=""nofollow noreferrer"">Check this image</a></p>

<p>Also, instead of using my username commit is being made by my name.</p>

<p>I checked my username for conflicts and there weren't any.</p>

<blockquote>
  <p>git status config --list</p>
</blockquote>
","5","7310251","",""
"49546993","3246274","2018-03-29 02:17:48","1","416","<eclipse><git><github><git-commit>","How to remove a file from a commit which is not the most recent using eclipse when their are multiple commits to be pushed","<p>I have a file which is >100MB which I have committed and pushed to my local repo but when I attempt to push several commits to the remote through eclipse (this is how I've always done it) I am given the following error:</p>

<p>Repository <a href=""https://github.com/tjd45/PartIIProject.git"" rel=""nofollow noreferrer"">https://github.com/tjd45/PartIIProject.git</a></p>

<p>pre-receive hook declined
error: GH001: Large files detected. You may want to try Git Large File Storage - <a href=""https://git-lfs.github.com"" rel=""nofollow noreferrer"">https://git-lfs.github.com</a>.
error: Trace: 340348513f636af28e13a860a95b4a7e
error: See <a href=""http://git.io/iEPt8g"" rel=""nofollow noreferrer"">http://git.io/iEPt8g</a> for more information.
error: File Part II Project/TenMoves.arff is 103.85 MB; this exceeds GitHub's file size limit of 100.00 MB</p>

<p>I would like to know if there is anyway of deleting this file (TenMoves.arff) from the commit despite the fact that it is the 4th most recent commit and not the most recent. And if not, if there is anyway of configuring git-lfs with eclipse in order to get around the problem.</p>

<p>I am not that comfortable using git so if I have fundamentally misunderstood anything I apologise and if you require any further information please ask.</p>
","0","3246274","",""
"49562862","1642231","2018-03-29 18:30:32","0","22","<git><git-commit>","Exclude / Skip / Ignore 2 directories from a commit for the current git commit command","<p>I have over 100+ files and directories to commit. But I don't want to commit 2 directories for the time being. How can I <strong>skip</strong> or exclude these directories for this commit? </p>

<p>No, it doesnt belong in a .gitignore as I'm just doing it for this instance.</p>
","0","1642231","",""
"49570252","1399824","2018-03-30 07:28:49","0","4764","<git><github><atlassian-sourcetree><git-commit>","Sourcetree - Pull from specific commit","<p>i might be asking silly question, but i can't find a clear answer for my question. My case is, i'm trying to pull from certain commit in sourcetree history. What should i do ?.</p>

<ol>
<li>Click the specific commit and use check out ?.</li>
<li>User revert commit to specific commit ?.</li>
</ol>

<p>Because we had problem with the current code, and i want to pull from the last stable code. I already push all my changes. So what i want is just to pull from the specific commit, and then use the code from there for production.</p>

<p>Thank you.</p>
","4","1399824","",""
"67942709","5029589","2021-06-11 19:39:31","0","915","<git><github><git-commit>","Get first commit of a branch created from master","<p>I have a branch lets say <code>dev</code>. I created my feature branch from <code>dev</code>. <code>dev</code> has commits starting from 2014.</p>
<p>So</p>
<pre><code>  dev 
    |
    ---FeatureBranch created on June 10 2021
</code></pre>
<p>I made my 10 commits on my feature branch lets say on June 10, June 11, June 12.</p>
<p>How can I get first commit on my feature branch?</p>
<p>I tried <code>git log --reverse</code> but would give me first commit as 2014 because my feature branch will consist all commits from <code>dev</code> branch too.</p>
<p>How can I get the first commit id on my feature branch after it was created from dev?</p>
","3","5029589","",""
"67971851","13071973","2021-06-14 14:12:22","2","647","<git><github><git-commit>","modify previous commit without changing timestamp","<p>To modify the previous commit I can run the commit on my staged changes</p>
<pre><code>git commit --amend --no-edit
git push -f
</code></pre>
<p>The commit has been modified but the timestamp of the commit changes...</p>
<p>Is there a way <strong>not</strong> to change the timestap?. Something like:</p>
<pre><code>git commit --amend --no-edit --no-time-change
</code></pre>
","2","13071973","",""
"67972997","3022264","2021-06-14 15:21:09","0","83","<git><git-commit><git-clone><core.autocrlf>","Git - output changes without modification","<p>I've just cloned my repository from my Bitbucket repository, however I am getting a lot files with changes in stage to commit.</p>
<p>However, there are changes, like in this example:</p>
<p><a href=""https://i.stack.imgur.com/wXq59.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wXq59.png"" alt=""enter image description here"" /></a></p>
<p>I have hidden the DB name and the table name for privacy but they are the same (no change) and the same for all files.</p>
<p>I thought it was something to do with line breaks (CRLF) and executed this:</p>
<pre><code> git config --global core.autocrlf true
</code></pre>
<p>And then:</p>
<pre><code>git reset
</code></pre>
<p>However, I still see output changes and the number of files has not been reduced.</p>
<p>What could be going on?</p>
","1","3022264","",""
"49605919","7552492","2018-04-02 05:45:36","0","45","<git><github><terminal><git-commit>","C: Recover lost commit in git","<p>I was trying to commit some changes to my secondary branch in my git repository. But when I committed, I lost all my changes. My repository is now like when I first cloned it (I cloned it from my prof's repository for an assignment) and lost all my work ! Is there a way to get back those changes? I can't use reflog because my last commit was a very long time ago.
See the pictures <a href=""https://i.stack.imgur.com/oqSa6.png"" rel=""nofollow noreferrer"">pic1</a><a href=""https://i.stack.imgur.com/JDua9.png"" rel=""nofollow noreferrer"">pic2</a></p>
","3","7552492","",""
"14367671","675100","2013-01-16 20:55:30","2","95","<git><version-control><git-submodules><git-commit><git-add>","How can I commit with cloned submodule in my repo?","<p>I have created a repo for my <code>.vim</code> directory so that I won't need to donfigure that every time I change a machine I am working on. </p>

<p>So I have something like that now:</p>

<pre><code>user@.vim$ tree -L 3 -a
.
|-- autoload
|   `-- pathogen.vim
|-- bundle
|   |-- jedi-vim
|   |   |-- after
|   |   |-- AUTHORS.txt
|   |   |-- autoload
|   |   |-- build
|   |   |-- CONTRIBUTING.md
|   |   |-- ftplugin
|   |   |-- .git
|   |   |-- .gitignore
|   |   |-- .gitmodules
|   |   |-- jedi
|   |   |-- LICENSE.txt
|   |   |-- plugin
|   |   `-- README.rst
|   |-- vim-colors-solarized
|   |   |-- autoload
|   |   |-- bitmaps
|   |   |-- colors
|   |   |-- doc
|   |   |-- .git
|   |   `-- README.mkd
|   |-- vim-surround
|   |   |-- doc
|   |   |-- .git
|   |   |-- .gitignore
|   |   |-- plugin
|   |   `-- README.markdown
|   `-- xmledit
|       |-- build.vim
|       |-- doc
|       |-- ftplugin
|       |-- Makefile
|       `-- README.mkd
`-- .git
    |-- //*** MY GIT REPO
</code></pre>

<p>And when I do <code>git add .</code> or any other <code>add</code> I cannot add <code>jedi</code> directory to my local repo. </p>

<p>This is the only <code>.gitmodules</code> file I have there:</p>

<pre><code>$ cat ./bundle/jedi-vim/.gitmodules
[submodule ""jedi""]
        path = jedi
        url = git://github.com/davidhalter/jedi.git
</code></pre>

<p>This is what I get on <code>git status</code></p>

<pre><code>#       modified:   bundle/jedi-vim (untracked content)
</code></pre>

<p>What should I do to get this done ?</p>
","0","675100","0","0"
"14369155","14540","2013-01-16 22:34:19","108","43254","<git><git-commit>","How to change past commit to include a missed file?","<p>I have committed a change and forgot to add a file to the change set. After other commits, I realized the file is now missing from a <code>HEAD^4</code> commit.</p>

<p>How do I rewrite a previous commit to include the missing file?</p>
","3","14540","0","0"
"68051949","13771318","2021-06-20 01:22:52","1","1404","<git><git-commit><git-fetch><github-desktop><git-untracked>","GitHub Desktop suddenly not fetching origin, can't push changes","<p>We've run into a problem with one of our contributors using GitHub desktop. When they try to push their most recent changes the following error appears</p>
<pre><code>On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced).meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/DoorCloseHardWood_S011FO._1.wav
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/DoorCloseHardWood_S011FO._1.wav.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/DoorOpenLatch_S08FO.878.wav
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/DoorOpenLatch_S08FO.878.wav.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Footstep_temp.mp3
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Footstep_temp.mp3.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Mosnter voice in apartment .wav
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Mosnter voice in apartment .wav.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Possible Track.mp3
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Possible Track.mp3.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Talking behind door .wav
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Talking behind door .wav.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Wood Door Knock.mp3
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/Wood Door Knock.mp3.meta
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/ambience 1 Nick .wav
    deleted:    Assets/Audio/Temporary Audio Files (Delete these and this folder when replaced)/ambience 1 Nick .wav.meta
    modified:   Assets/Scenes/mirror level first draft.unity

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    Assets/Audio/Placeholder Audio.meta
    Assets/Audio/Placeholder Audio/

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>We have tried using the add command, as well as add -A, and git commit -a with no success.</p>
<p>After &quot;successfully&quot; adding the files with any of the above commands, when we attempt to push via the command line we are told the files are already up to date.</p>
<p>Something else to note is that within GitHub desktop, the user now sees &quot;Origin never fetched&quot; under the fetch button, even though they had done a fetch and pull right before this issue began occurring.</p>
<p>Besides the command line commands we tried, we have also reinstalled GitHub desktop, logged off / back onto to GitHub desktop, and have removed and re-added the user as a contributor.</p>
<p>Before today this user was having no issues pushing/committing via GitHub desktop.</p>
","6","13771318","0","0"
"49679030","5305863","2018-04-05 18:22:31","2","1014","<git><visual-studio><azure-devops><git-commit><git-push>","accidently added huge file to my git commit now how to remove just that file from my commit","<p>in my visual studio project I have a repo from <strong>visual studio team services</strong> and I am using <strong>git</strong> for my version controlling, I made some changes to some files and then also I added a huge video file to my assets, I accidently forgot to add that file extension to my gitignore file and I made a commit locally and then I pushed it.</p>

<p>I had total 13 changes and on the 5th change being pushed ( the video file ) it is taking too long, and I don't want to push that video file in my vsts. I tried to do revert to that commit but it failed, I only want to keep those changes in my files and want to push them but I don't wanna push the video file, now I am stuck, what should I do to achieve this?</p>
","2","5305863","",""
"68062695","16277737","2021-06-21 05:26:10","0","640","<python><csv><github><automation><git-commit>","Retrieve all/recent commits history from all branches from a github code organization to CSV/Json","<p>I want to fetch all commits history from GitHub code organization consisting of 225+ code repos private as well as public.
I saw a lot of other solutions in google and stackoverflow, but couldn't concede a single one.
I am looking for an automated solution where we can fetch or retrieve all the commits history once and then scheduled it from a particular date
According to GitHub Api's I wasn't able to do it as it has no of API(s) hits restriction per day to the GitHub server.</p>
<p>primarily I am trying to fetch all commits information into a CSV file. Kindly share if any python code/script serves this purpose.</p>
","0","16277737","",""
"49683418","1472493","2018-04-06 00:18:14","0","326","<git><macos><github><vim><git-commit>","Vim fails to save the commit message","<p>I am facing issues while updating my fork.</p>

<p>I get this error when I do <code>git merge upstream/master</code></p>

<p>Vim editor opens - I enter my commit message but on saving and exiting it  fails to save the message.</p>

<blockquote>
  <p>Removing xyz/abc/is_dates.py
  vim-gitgutter: requires Vim 7.3.105
  Press ENTER or type command to continue
  error: There was a problem with the editor 'vi'.
  Not committing merge; use 'git commit' to complete the merge.</p>
</blockquote>
","6","1472493","",""
"68091056","8513812","2021-06-22 21:45:52","1","491","<git><git-commit><git-checkout><git-stash><git-revert>","How to save current changes in repo, go back to an old commit, go back to most recent commit, and restore changes?","<h3>Scenario</h3>
<p>Long story short, I need to go back to an old commit to run some code, but I eventually want to come back to the most recent commit. However, I've made some changes that I'm not ready to commit.</p>
<p>For this reason, I want to stash my current changes, then go back to the old commit, do what I need to do, then come back to the most recent commit, and restore the changes I originally made.</p>
<p>Note: This is all on one branch</p>
<h3>Question</h3>
<p>What's the best way to go about doing this?</p>
<h3>My ideas</h3>
<p>I was think of doing something like:</p>
<pre><code>git stash push
git checkout &lt;old_commit_hash&gt;
#Do some stuff
git checkout &lt;most_recent_commit&gt;
git stash pop
</code></pre>
<p>Another idea is to commit my current changes. Eventually when I return to this commit, I could create another commit to finalize my work, and then use <code>git rebase</code> to squash them into one new commit.</p>
","3","8513812","",""
"68124179","","2021-06-25 00:47:38","-1","143","<git><github><commit><git-commit><git-push>","How to delete commits from a folder?","<p>I have recently made commits that I want to delete, and return the folder to the state it was before the commits.</p>
<p>Here is an image of commit history in a folder:
<img src=""https://i.stack.imgur.com/PpHWp.png"" alt="""" /></p>
<p>How can I delete the commits made after <code>e1c0013</code>?</p>
","1","","",""
"68129809","16062580","2021-06-25 10:53:30","0","42","<git><github><atom-editor><git-commit><github-for-windows>","How to use the editor for git in Atom?","<p>I'm using git commit and I already have it configured to Atom so Atom opens a file every time I want to commit a file. The problem is I don't know how to save this file as a commit. If there is no answer to this, how do I get out of using Atom as the editor for my git commit?</p>
","3","16062580","",""
"68137819","12486331","2021-06-25 23:02:58","-1","1506","<git><github><visual-studio-code><git-commit>","add multiple files and commit different message to each one","<p>After the <code>git add .</code>, how can I give different commit messages to each file? If I submit multiple files with the same commit message, then how I change the commit message for each one? I tried <code>git--amend</code> but the default editor is confusing me.</p>
<p>From a repository with multiple files, how I can get a specific file? I tried:</p>
<pre><code>git remote add filename &lt;url from repository&gt;
git fetch filename
git merge filename/master 
</code></pre>
<p>But I got all the files from the repository.</p>
<p><a href=""https://i.stack.imgur.com/g3IUN.png"" rel=""nofollow noreferrer"">screenshot</a></p>
","1","12486331","",""
"68163593","596364","2021-06-28 12:46:12","0","2690","<git><branch><git-commit>","git branches are not visible","<p>This is the first time I am using git</p>
<p>I have created a repo and uploaded the code for the first time from my terminal. The code was uploaded and I am able to see it in my account on github.com</p>
<p>I tried creating two branches and uploaded the code with some changes from my terminal i.e. <code>two commits</code>, in terminal it didn't show any error, but in my repo, I am <code>not able to see my branches and there the commit seems to be only 1 master commit</code> alone</p>
<p>So I tried running my <code>git log</code> in terminal</p>
<pre><code>macbook-MBP Ojaak % git log
commit b5b17e3108139d7904c905d1d1aefe22a7395180 (HEAD -&gt; siva)
Author: sk-master &lt;siv@gmail.com&gt;
Date:   Mon Jun 28 18:00:43 2021 +0530

    siva test

commit eea6ed5fe18dedd60ab714e1d3828cc2487cba3a (Dani)
Author: sk-master &lt;siv@gmail.com&gt;
Date:   Mon Jun 28 17:23:28 2021 +0530

    dani updated by 26th June

commit 8e9f41d4245dfb1e2e9f4ed1d00ee12d1b081240 (origin/master, master)
Author: sk-master &lt;siv@gmail.com&gt;
Date:   Mon Jun 28 16:28:58 2021 +0530

    code worked by Sarah
</code></pre>
<p>Here it shows the branches name and their commit time etc but those are not available in github repo</p>
<p>What's wrong in the way I am doing in this</p>
<p>I was learing about git from the following youtube playlist
<a href=""https://www.youtube.com/watch?v=GZILYABgAoo&amp;list=PLhW3qG5bs-L8OlICbNX9u4MZ3rAt5c5GG&amp;index=5"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=GZILYABgAoo&amp;list=PLhW3qG5bs-L8OlICbNX9u4MZ3rAt5c5GG&amp;index=5</a></p>
<p>it is a 2016 video - it can be followed right now?</p>
","3","596364","",""
"68176407","13076533","2021-06-29 09:53:31","0","70","<git><github><git-commit>","Recover git commits remotely in commit history","<p>I have been working on a shared repository. The repository was entirely restructured by a team member. That made me losing my commits in a directory remotely(I have them locally). Now, looking into the commit history of that directory, it shows only the new commit 'restructuring'. I don't want to reset to previous state of my commit. I just want it to appear in commit history with the particular date before this new commit on the remote repository.</p>
","5","13076533","",""
"49709162","7082825","2018-04-07 15:54:50","0","19","<git><github><git-commit><git-config>","Retrieve the authority on past commits after configurating Git Bash","<p>I was committing a lot of changes to repo in GitHub. But when I looked to <strong>Contributors</strong> tab - I didn't see that they were registered.</p>

<p>I've taken a look on <em>my</em> commits - they had default GitHub photo and username, which isn't referencing to my profile (!).</p>

<p>After configuring bash again my further changes are logged, it's good, but..
But is there any change to make all of my previous commits be actually <strong>mine</strong>? If yes - how?</p>

<p>It would be awesome to show that I did my part of the work, without pointing on closed PR's with my changes, which <em>do</em> belong to me, but <strong>aren't</strong> registered like so.</p>
","0","7082825","",""
"68224447","10581944","2021-07-02 11:31:10","0","170","<git><github><git-commit>","How can I cancel the accidental commit to dev branch (hasn't pushed it yet)?","<p>I'm not supposed to commit to dev branch directly, but I accidentally committed something but hasn't pushed it yet, what should I do if I want to cancel it without affecting anything else?</p>
<p>I found a command online: <code>git reset --hard HEAD^</code> can I use it?</p>
","4","10581944","",""
"49748485","6787022","2018-04-10 08:07:09","0","1665","<ios><xcode><github><git-commit>","Can't push or commit to GitHub in Xcode 9","<ol>
<li><p>I created Git Hub account and clone using SSH</p>

<p><a href=""https://i.stack.imgur.com/OIQKd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OIQKd.png"" alt=""GitHub""></a></p></li>
<li><p>I went to Create Git Repositories. I chose both project folders POD and SFITNESS. Then xCode created the following:</p>

<p><a href=""https://i.stack.imgur.com/hRcgm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hRcgm.png"" alt=""The following""></a></p></li>
<li><p>Then I right click on SFITNESS and ADD EXISTING REMOTE which I log in to GitHub to provide the link, everything works fine.</p></li>
<li><p>When I went to commit, I choose the SFTNESS folder and commit and at the bottom it allows me to Push to remote which I choose the remote at step 3.</p></li>
<li><p>Then it will prompt me for the Username and Password and I can never get the authentication correct. The Username and password is it for Github? I can never get the authentication correct?</p>

<p><a href=""https://i.stack.imgur.com/fCckb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fCckb.png"" alt=""Pic 3""></a></p>

<p><a href=""https://i.stack.imgur.com/6m7zJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6m7zJ.png"" alt=""Pic 4""></a></p></li>
<li><p>Now, at the commit window I have lost my SFITNESS folder, how do I commit again? Is it push now?</p>

<p><a href=""https://i.stack.imgur.com/CDoF3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CDoF3.png"" alt=""Pic 5""></a></p></li>
</ol>
","3","6787022","",""
"68294297","16402867","2021-07-08 00:32:33","0","53","<git><phpmyadmin><git-commit>","The phpMyAdmin repo on GitHub is a Dev (uninstalled) version. Thus many files are NOT even there. How do we commit fixes to THOSE missing files?","<p>I have a lot of experience with PHP/MySQL but not much with Git. I figure this question should be an easy one for you but I can't figure it out and would really appreciate you answer(s).</p>
<p>Here is my question: I've downloaded and installed phpMyAdmin from Git using the &quot;composer update&quot; and &quot;yarn install --production&quot; commands. Then I fixed a bug that happens to be in the \themes\pmahomme\css\theme.css file. So far so good but when I tried &quot;commit&quot;-ing the change it turns out the file theme.css in NOT EVEN THERE on the original GitHub repo, due to - it's a Dev repo (it's NOT installed) and the \themes\pmahomme\css\ folder is actually empty (no files at all there).</p>
<p>-- How do you go about this situation? How do you commit?
I would really appreciate you throw in there a couple of commands as well if that is of importance.</p>
<p>Thank you all!</p>
<p>Angelo</p>
","2","16402867","",""
"49764860","","2018-04-11 00:58:11","2","89","<git><github><repository><git-commit><git-push>","Confused about commits on github","<p>I'm using github to work on a project with two other people and am getting very confused about the whole commit thing, and nothing I'm reading is helping me understand. I get that commit records changes that you've made to a local repository... but then why are my group members' commits showing up on the online repository? Can you commit to both the local repository on your computer as well as an online repository? If you can commit to an online repository, what is the difference between doing that and simply using git push to push your changes online?
Thank you kindly.</p>
","1","","0","0"
"68301163","15094401","2021-07-08 11:55:27","-2","381","<git><git-commit><git-push>","Can I change the last commit pushed to the remote repository?","<p>Let's say this is my class that was in my staged area while committing and pushing to the remote repository:</p>
<pre><code>public class Money {
    private int amount;
    private String currencyCode;

    public Money(int amount, String currencyCode) {
        this.amount = amount;
        this.currencyCode = currencyCode;
    }
}
</code></pre>
<p>After that, I realized I didn't add getters and setters that should be included in this last commit.</p>
<p>Is there a way to change the last commit (add getters &amp; setters) that has already been pushed to the remote repository ?</p>
<p>Or should I just add a new commit with some message indicating that this is a refinement of a previous commit ?</p>
","3","15094401","",""
"49772539","8996970","2018-04-11 10:20:26","0","1414","<git><git-commit><git-reset>","""amend"" previous commit and edit the message","<p>Let say that I want to change HEAD~2 by my current last commit ""HEAD"" without the change made by HEAD~. Moreover, I'd like to edit the message from HEAD~2 and not overwrite it (just few changes should be done on the message).
I found that way :
this is my current git log :
<a href=""https://i.stack.imgur.com/VcjYU.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VcjYU.png"" alt=""enter image description here""></a></p>

<p>Then I did this following command :</p>

<pre><code>git reset --mixed Head~3
git add new_file.cpp
git commit -m ""Erased previous new_file.cpp by current new_file""
git add other_file.cpp
git commit -m ""Added other_file.cpp""
</code></pre>

<p>So now I get this :</p>

<p><a href=""https://i.stack.imgur.com/ZIoW5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZIoW5.png"" alt=""enter image description here""></a></p>

<p>As you can see, I have rewrite all my commit to make it clean.
And as I am quite newbie on reset... it can be a bit dirty.</p>

<p>Could it be possible to get this cleaner just by ""editting"" the commits ?
For instance I'd like to edit the previous message from the first commit and keep the message of the second intact.</p>

<p>Moreover, the way I did the modification let me think the previous commit are still present and must pollute the repository : will they be erased or stay there foreever ?</p>

<p>P.S :  <a href=""https://github.com/Ystalio/Test-branch_model"" rel=""nofollow noreferrer"">the GitHub repository</a> (the reflog is quite horrible as I made some command mistake before finding the right command)</p>
","1","8996970","",""
"31600993","457776","2015-07-24 02:00:29","5","2035","<git><shell><cron><git-commit>","Unable to git commit from crontab job","<p>I'm trying to do a <code>git commit</code> using a bash script. 
I've setup a cron job to execute this script periodically. Everything works as expected if I execute the script directly. 
For some reason, when the script is invoked from the <code>crontab</code>, the <code>git commit</code> fails. Here's the script :</p>

<pre><code>#!/bin/bash
cd /mnt/ebs2/sitemap
echo ""Calling java application to generate sitemap""
java -jar SiteMap-1.0-jar-with-dependencies.jar -i sitemapconfig.xml -o /mnt/ebs2/sitemap/website_sitemaps -url ADSKContentURL
echo ""sitemap generation complete..""
cd website_sitemaps
chmod 750 *
echo ""Updated file permission, commiting to git...""
git commit -am 'automated weekly update'
git push -u
echo ""git commit done...""
cd ..
</code></pre>

<p>This is the output from the crontab :</p>

<pre><code>Calling java application to generate sitemap
sitemap generation complete..
Updated file permission, commiting to git...
/mnt/ebs2/sitemap/WeeklyUpdate.sh: line 10: git: command not found
/mnt/ebs2/sitemap/WeeklyUpdate.sh: line 11: git: command not found
git commit done...
</code></pre>

<p>As you can see, it fails to execute <code>git commit</code> and <code>git push</code>, which works when the script is run directly.</p>

<p>Here's the <code>crontab</code> entry.</p>

<pre><code>0 2 * * 2 /bin/bash /mnt/ebs2/sitemap/WeeklyUpdate.sh
</code></pre>

<p>I'm making sure that both crontab and the script is executed in bash.
I'm using CentOS 5.11.</p>

<p>Any pointers will be appreciated.</p>

<p>-Thanks,</p>

<p>Shamik</p>

<p>************ EDITED SOLUTION **************</p>

<p>Based on @CholNhial and @Marc, <code>crontab</code> needs the complete git path to execute the command. I've updated the script to use the full path.</p>

<pre><code>#!/bin/bash
cd /mnt/ebs2/aknsitemap
echo ""Calling java application to generate sitemap""
java -jar ADSKSiteMap-1.0-jar-with-dependencies.jar -i sitemapconfig_Elvis.xml -o /mnt/ebs2/aknsitemap/aknwebsite_sitemaps -url ADSKContentURL
echo ""sitemap generation complete..""
cd aknwebsite_sitemaps
chmod 750 *
echo ""Updated file permission, commiting to git...""
/usr/local/bin/git commit -am 'automated weekly update'
/usr/local/bin/git push -u
echo ""git commit done...""
cd ..
</code></pre>
","6","457776","",""
"49802226","6162022","2018-04-12 17:00:18","1","2143","<git><git-branch><git-commit><git-worktree>","git worktree add [from specific commit hash]","<p>so I have a commit hash from earlier in a project. How can I create a new worktree and have it's branch start from this specific commit?</p>
","0","6162022","0","0"
"50195762","414516","2018-05-06 02:35:30","-1","96","<git><github><git-commit><git-push><git-fork>","How to edit private methods in a git repository so that it is maintainable","<p>So, I just love a repository(REPO) I found on GitHub , however, the creator of that that repo is too sensitive to what he exposes as <code>public(open)</code>. So, other than the primary necessities he makes every thing else(classes, functions, variables... ) <code>private</code>. </p>

<p>However, I need to access and modify the forbidden fruit, the <code>private variables, classes, methods, ...</code> which are located in just 1 file in the repo. So, my question is how can I make changes to that file, so that my work is as maintainable as possible. </p>

<p>Maintainable meaning: when the REPO owner updates the repo, it should be as <em>easy</em> as possible for me to update the REPO in my and my teams setup</p>

<p>Well, specifically, I just need to change 1 class file in a <code>Swift</code> GitHub library which I have installed using <code>cocoapods</code></p>
","1","414516","",""
"14982819","1180115","2013-02-20 14:54:22","0","39","<github><git-rebase><git-commit>","Merge many commit into a single one under same branch","<p>Using git, I created a local branch to work in. Then I committed my work progressively. So, I get 3 commit in the same pull request I'd liked to merge them into a single one.</p>

<p>I founded that there is a way to do it if we follow these steps:</p>

<ul>
<li><code>git rebase -i HEAD~3</code></li>
</ul>

<p>=> All commit in the branch are listed as below</p>

<pre><code>pick mycommit1
pick mycommit2
pick mycommit3
</code></pre>

<ul>
<li>To meld them into the first one, I have to set the commands of mycommit2 and mycommit3 to <code>squash</code> instead of <code>pick</code></li>
</ul>

<p>But, in my case, there is lot of commits between my commits in the master branch, thus, I can not do this.</p>

<p>By consequent, I would ask if I can do the merge <strong>JUST</strong> in my pull request.</p>

<p>Your ideas are welcome.</p>

<p>Thanks</p>
","0","1180115","",""
"68750845","5203951","2021-08-12 02:19:04","1","592","<git><github><git-commit><gnupg>","Remove a GPG signature from a pushed/merged commit?","<p>I'm working on an private project which I don't want to expose my identity, but soon I found out my Git just signed the commit with my personal GPG Key which it can easily expose my identity.</p>
<p>The worse thing is that it has been pushed to the remote, and it's in a pull request that has been merged.</p>
<p>Is there any way that possible to just re-edit the commit to remove the signature from it?</p>
<p><a href=""https://i.stack.imgur.com/8oX8j.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8oX8j.png"" alt=""enter image description here"" /></a></p>
","0","5203951","",""
"32042258","1377857","2015-08-17 03:12:12","1","1072","<git><batch-file><git-commit>","Git commit hook to run in windows (auto JIRA prefix)","<p>I want to write a batch file as a commit hook to check if the users are adding the JIRA ID as a prefix to the commit message. </p>

<p>I have already created scripts but those are working only in the Linux environment only.</p>

<p>I was unable to find any sample for such.</p>
","1","1377857","0","0"
"32046680","1340942","2015-08-17 09:16:17","7","565","<git><git-commit>","Git, read latest commit message when committing","<p>When I am committing, this text jumps up:</p>

<pre><code>Please enter the commit message for your changes. Lines starting
 with '#' will be ignored, and an empty message aborts the commit.

 On branch master
 Your branch is ahead of 'origin/master' by 2 commits.

 Changes to be committed:

    new file:   modules/new_file.txt
</code></pre>

<p>What I want is to let this informative text also show me the message of my last commit, without me needing to go through <code>git log</code>, <code>git show</code> or anything similar. </p>

<p>E.g.</p>

<pre><code>(...)

 Changes to be committed:

    new file:   modules/new_file.txt

 Previous commit message:
    [FIX] Fixed the foo.bar module
</code></pre>

<p>This is exactly the same as <a href=""https://stackoverflow.com/questions/7293008/git-how-to-read-last-commit-comment"">this question</a>, but none of the answers was actually answering the question, so I guess OP just asked it a bit wrong? </p>
","1","1340942","",""
"68758116","12769096","2021-08-12 13:08:32","1","383","<git><github><gitlab><git-commit><git-push>","Is it possible to re-arrange a repository and keep commit history of files that being re-allocated?","<p>I have a big repo that is connected to a remote repository as well.</p>
<p>I want to re-arrange it but I don't want to apply those changes on the current one so I created a new local directory, a new empty remote repository.</p>
<p>I mirrored my current repo to the new empty remote repository.</p>
<p>Then, I connected the new empty directory to that repostiroy and <code>git pull</code> it.</p>
<p>Now I have a full copy of my repository on my local new repository.</p>
<p>I wanted to re-arrange it, and move some files in/outside their current direcotories.</p>
<p>The problem  is that when I do it, and then <code>commit &amp; push</code> to the remote repository, I see that all the commit history gets deleted after it moves to the other location.</p>
<p>When I edit files but keep them in their current location, and then <code>commit &amp; push</code>, the changes get uploaded and it keeps the commit history.</p>
<p>So the problem is only when I move the files to other directories inside that mirrored repository.</p>
<p>Is there any way to keep the commit history of the commit that were made before the mirror even if I move files?</p>
<p>Thanks.</p>
","7","12769096","",""
"32052334","2440765","2015-08-17 13:58:25","2","473","<git><git-commit><adobe-brackets>","git aborting commit immediately - Brackets editor","<p>I have set my core editor for git commit messages to Brackets.io but unfortunately it's always showing up this message </p>

<pre><code>Aborting commit; you did not edit the message.
</code></pre>

<p>I try doing <code>-w</code> &amp; <code>-W</code> to make it wait until I write my commit but with no luck!</p>

<p>Any help?</p>
","3","2440765","0","0"
"32063911","5236109","2015-08-18 05:05:16","2","102","<github><ssh><git-submodules><git-commit><cd>","How do I perform these commands without getting errors? (git submodule, cd, git commit)","<p>I am a new user to command line. I have downloaded the repo, I do <code>git init</code> every time but still I get this error : </p>

<blockquote>
  <p>fatal : Not a git repostitory.. .git</p>
</blockquote>

<p>EDIT : It also says my repo is empty but I am sure that I did clone and init it!!</p>

<p>These are the commands I am trying -</p>

<pre><code>git submodule add -f -b REL1_25 https://github.com/wikimedia/mediawiki-extensions-CharInsert CharInsert

cd ../ &amp;&amp; git add .gitmodules extensions/CharInsert

git commit -m 'Add CharInsert' &amp;&amp; git push
</code></pre>
","0","5236109","0","0"
"14564936","1275959","2013-01-28 15:09:26","1","379","<php><git><git-commit>","Git reset failing after find and replace","<p>No git's command is working anymore  created a branch, made some commits. Then I made a recursive find and replace as so :</p>

<pre><code>LANG=C find . -type f -name '*.*' -exec sed -i '' s/My\ sentence/My\ sentencevotre/ {} +
</code></pre>

<p>which worked properly, but now I can't commit, I can't reset hard, I have a serie of messages when reseting : 
error: packfile .git/objects/pack/pack-$SHA.pack does not match index
...</p>

<p>and when commiting : </p>

<p>warning: packfile .git/objects/pack/pack-$SHA.pack cannot be accessed
....
error: invalid object 100644 $SHA for 'Doxyfile'
error: Error building trees</p>

<p>How can I manage this ?</p>
","5","1275959","",""
"49850630","3614030","2018-04-16 06:12:44","1","712","<git><github><git-commit><github-desktop>","I ""reverted a commit"" and lost days of progress. How do I get my progress back?","<p>In Github Desktop I tried to commit and sync progress (like the fool I am, the last time I sent a commit was 4 days ago). I got an error message saying something like the push didn't succeed because one of the files exceeded 100MB (I am looking into adding this file to .gitignore). I checked my github account online to see if any of the files got pushed and none did. I checked on Github Desktop and couldn't see any of the files. I thought to myself this isn't good because if it's not detecting these changes anymore how am I supposed to attempt to commit them again? In a panic, I seen the following ""Revert this commit"" button thinking my changes would show up in Github Desktop again:</p>

<p><a href=""https://i.stack.imgur.com/hMri7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hMri7.png"" alt=""enter image description here""></a></p>

<p>I pressed Revert this Commit and nothing noticeable happened. I think I then pressed Revert this Commit again on something (bad habit..). After more panic, I thought I would just make a small change to one of my files to see if the change shows up in Github Desktop. It did. So I committed and synced this change. I checked my github account online and I could see it was pushed successfully. This is where I realize I really messed up. I go back to Android Studio and I now realize that days of progress (a bunch of missing files) are gone (because being the idiot I am I waited days to back up). At this point I think I just lost the progress I made. I am wondering if there is anyway I can get it back? Upon doing a bit of research I attempted the git reflog command and I notice some words like revert and reset. I am wondering if this is enough to work with to get my progress back?</p>

<p><a href=""https://i.stack.imgur.com/zHEcf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zHEcf.png"" alt=""enter image description here""></a></p>

<p>I am scared to attempt anything else without advice because as proven I like to wreck things =(</p>
","3","3614030","0","0"
"68389206","16107144","2021-07-15 06:54:09","0","938","<git><github><git-commit>","Add compulsory commit message format in GIT","<p>I want to do configuration in GIT that will enforce all commit messages to follow certain pattern.
How can I do that?</p>
<p>EDIT: I want it for Github.</p>
","2","16107144","",""
"14591184","656912","2013-01-29 20:00:50","2","148","<git><git-commit>","Does the my commit message editor have to launch a new instance if I want Git to use it?","<p>I'm using my own editor as my Git <code>core.editor</code> that I often have open and running already. When I use it to edit a commit message, for example after</p>

<pre><code>git commit # no message specified
</code></pre>

<p>the default message is opened into my editor correctly, as <code>COMMIT_MSG</code>, but the commit proceeds aborts before I've done anything in the editor. Similarly, an automatic merge opens <code>MERGE_MSG</code>, but the merge completes with the default message before I've had a chance to edit it.</p>

<p>Can I use an editor that is <em>already running</em> to edit commit messages in this way? Does the Git invocation of the message editor require a new instance in order to respond to my edits?</p>
","0","656912","0","0"
"38491145","","2016-07-20 21:27:20","0","77","<git><github><git-commit><pull-request><git-fork>","Commit from another contributor onto my Pull Request","<p>I couldn't find the solution anywhere on Google, so here's my question.</p>

<p>Onto my favorite GitHub project, I did a Pull Request from my fork's topic branch including new functionality that will be merged in future releases.</p>

<p>Is there a way for another contributor to commit onto my Pull Request?</p>
","0","","",""
"51976715","3244198","2018-08-23 00:06:33","1","54","<git><azure-devops><git-commit>","Git reset shows one item to be fetch from the server","<p>I am new with GIT and by mistake, I pushed a code to the server which was not part of the current branch.</p>

<p>My Commit history for <code>BranchX</code> was like this (commit message modified for eg.) :</p>

<pre><code>ca184982 - Changes I pushed mistakenly 
fa761347 - Some good changes 
2a839483 - Previous commits
</code></pre>

<p>After checking a few SO post and blogs on the internet, I execute below command:</p>

<blockquote>
  <p>git reset --hard fa761347</p>
</blockquote>

<p>After executing the above command, when I synced my branch it's showing that 1 commit has to pull from the server but actually, I want to delete that commit from the server also.</p>

<p>Can you point out what I did wrong? or is there any other command that I have to execute?</p>
","3","3244198","",""
"51983124","10264054","2018-08-23 09:58:39","0","2485","<jira><git-commit>","Jira and GitLab webhook! How to integrate?","<p>How can i integrate Jira and Gitlab and status will change on request!</p>

<pre><code>Git commit -&gt; ED-1511 #AutomationState Running

Jira ticket (ED-1511) - &gt;&gt; will change AutomationState on Running
</code></pre>

<p><a href=""https://i.stack.imgur.com/mxjlL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mxjlL.png"" alt=""enter image description here""></a></p>
","0","10264054","",""
"37865530","1795279","2016-06-16 17:14:52","1","83","<git><version-control><patch><git-commit>","Git commit, then rebase from master, then making small changes to the original commit","<p>Ok, this one is a little complicated and most probably is very specific. Let me try to explain.</p>

<p>Lets say I pull this git repo into my local drive. Then make a number of changes. As these changes are in many different files and are aimed for different goals, the commits are more then one. Lets say the commit from these changes are with hash value <code>ab001 to ab005</code> (five commits). And then I create the series of patches and send to the community for review.</p>

<p>Meanwhile, lets suppose I realize that the master repo has been changed quit a bit, so I need to rebase. I do that, solving all the conflicts. Now this would result in another commit, lets say <code>ab006</code>.</p>

<p>All is good.</p>

<p>But next day I get comments and advices on the previous patch (one with those 5 commits). So, I now have to make some changes according to those comments, and send a <code>v2</code> (version 2) of the older patch (i.e. 5 commits). So I have to uncommit those 5 commits, make changes and commit again and create another patch (with those 5 commits).</p>

<p>How will I go about doing this, I cannot uncommit, since there is a rebase commit in the <code>HEAD</code>. I am really confused about this.</p>
","7","1795279","0","0"
"38520340","3959480","2016-07-22 07:13:15","1","108","<git><git-commit><git-reset><git-revert>","Fixing a fixing of last git commit","<p>I made a mistake and so I needed to <a href=""https://stackoverflow.com/questions/927358/how-to-undo-last-commits"">undo the last commit</a>.</p>

<p>The usual steps are:</p>

<pre><code>git reset --soft HEAD~
// make changes...
git commit -c ORIG_HEAD
</code></pre>

<p>However I did this by accident:</p>

<pre><code>git reset --soft HEAD~
// make changes...
git commit -m ""Some new message""     // &lt;-- shouldn't have done this!!
</code></pre>

<p>Is it equivalent? If not, what are the implications, and how can I (should I?) ""undo the undo""? </p>
","2","3959480","",""
"72280791","19139584","2022-05-17 21:20:35","2","150","<git><git-commit><git-history><git-filter-repo><git-history-rewrite>","Remove a number of files from old commits on specific remote branch of git repo (without having to push to master branch)","<p>I work with a code base shared by a number of people and have a particular branch that is for my personal use only. I made a huge mistake and about 10 commits ago removed a particular file type from the git ignore and then pushed a number of files (which added up to a lot of memory) to the remote of my personal branch. Now our repo is taking up a lot of memory and I need to somehow remove these files from the past commits. I have already added the file type back to the git ignore and removed the files for future commits, now it is only the past commits which I need to remove the files.</p>
<p>I have done some research and know I have options such as git filter-branch and git filter-repo, while other solutions seem to only pertain to modifying one commit back. I prefer not to use git filter-branch as I have seen many warnings about it. I have tried git filter-repo but I think I am misunderstanding how to push my changes only to the branch I want to change (not having to merge them into or effect the master branch which I am not able to push to). If there is a simple solution which involves editing a single commit that would also work. Also note that is not one large file but many (10-20) files that I need to remove (existing in a few different paths).</p>
<p>I am hoping the solution will look something like this: Checkout the branch I want to change the history of &gt; run some sort of git command to remove the files from that branch or to change particular commits (would be easy if I could just edit the git ignore of those commits) &gt; push those changes to <em>the remote version of that specific branch</em></p>
<p>The result being that I have successfully removed files from old commits on the remote version of this one branch thus reducing the overall size of our repository.</p>
<p>This was a huge screw up on my part, any and all advice is appreciated!</p>
","7","19139584","",""
"69917499","17129167","2021-11-10 17:13:58","2","704","<git><version-control><push><git-commit>","How to ""Un-push"" a file in git?","<p>Hello I'm very new to Git. I'm working on my branch, and I accidentally committed and pushed a file that I modified (but do not want in my pull request). For example: I pushed <code>fileA.py</code>, <code>fileB.py</code>, <code>fileC.py</code>. However I only want <code>fileA.py</code> and  <code>fileB.py</code> in the pull request.</p>
<p>From</p>
<pre><code>- FileA.py
- FileB.py
- FileC.py
</code></pre>
<p>To</p>
<pre><code>- FileA.py
- FileB.py
</code></pre>
<p>Most of the answers I have found involve deleting <code>fileC.py</code>. I don't want to actually delete <code>fileC.py</code>, I still want it in the repo just the unmodified version as in master. Is there a git command to achieve this? Thank you for any help!</p>
","8","17129167","",""
"54079651","7247027","2019-01-07 18:14:38","1","458","<git><bitbucket><commit><git-commit>","is there a way to reviews commits to bitbucket repositories without using pull request?","<p>I am trying to have code reviews on each commit done since team members are directly connected to a bitbucket repository... 
I am trying to do this instead of having team members fork the main repository and create pull request while also avoiding the use of branches. </p>

<p>I know it is not a traditional way of doing things, but keeping it simple would be a huge benefit for this team as I have a a few new git users that do not know how to manage their own repository.</p>
","1","7247027","",""
"73351673","1484573","2022-08-14 12:34:47","2","1903","<git><git-commit><git-history>","Git - remove all history prior to a specific commit","<p>I use git for various projects (personal repositories only), and I want to do some <strong>housekeeping</strong>.</p>
<p>I have a downloaded git project tree that has a large history of commits. After downloading I made a few more myself. However, I do not need anything apart from the latest commit at the time I downloaded it, and the subsequent commits that I made. All the prior commits take up a lot of space, and I'd like to get rid of them.</p>
<p>What I <strong>should</strong> have done is delete the .git folder after download and create a new personal repository going forward - but I didn't.</p>
<p>So my question is this: can I clean up the repository so that everything prior to commit X is removed, as if it had never existed, but so that subsequent commits are maintained? If so, how? Also if possible, if there were multiple branches at that time, can I remove other branches also?</p>
<p>(Not sure if this is possible as I think one of git's claims is how hard it is to lose old data by mistake).</p>
","4","1484573","",""
"73356629","1914833","2022-08-15 03:22:54","0","36","<git><version-control><git-commit><git-pull>","Why would a local git repo be more ahead of remote after a pull than before?","<p>The local master is on Centos and being used from the command line.</p>
<p>The remote master is on GitHub. There's only ever one remote and I've checked it's the correct one.</p>
<p>If I do <code>git status</code> and see this:</p>
<pre><code>Your branch is ahead of 'origin/master' by 3 commits.
</code></pre>
<p>then do a <code>git fetch</code> and a <code>git pull</code> (and see some changes being downloaded and merged without any problems), why would I see this afterwards?</p>
<pre><code>git status
Your branch is ahead of 'origin/master' by 4 commits.
</code></pre>
<p>How is it possible that the local branch is ahead by <em>more</em> commits following a pull, after no activity in the local repo?</p>
<p>When I do <code>git log master ^origin/master</code> I see a list of commits. This command should show which commits are in local but aren't in remote. But if I pick a commit ID from the list, I can find it in Github.</p>
<p>I'd really be interested in an explanation for this.</p>
","6","1914833","",""
"73364763","961646","2022-08-15 17:59:12","2","47","<git><git-commit>","Why is Git exclude operator excluding all commits, even for commit with no descendants","<p>I have a simple repo with four commits</p>
<p><a href=""https://i.stack.imgur.com/o14Xa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/o14Xa.png"" alt=""enter image description here"" /></a></p>
<pre><code>git git:(master) git log --pretty=reference
9843ccb (Adding file2, 2022-08-15)
6819130 (Committing the text update, 2022-08-03)
e269435 (Moving file1 to file1a, 2022-08-03)
14181db (First new file in repo, 2022-08-03)
</code></pre>
<p>If I do <code>git log</code> on the most recent commit 9843ccb, the result lists all four commits, because it shows all commits reachable from the specified commit, which includes all the ancestors.</p>
<pre><code>git git:(master) git log 9843ccb --pretty=reference
9843ccb (Adding file2, 2022-08-15)
6819130 (Committing the text update, 2022-08-03)
e269435 (Moving file1 to file1a, 2022-08-03)
14181db (First new file in repo, 2022-08-03)
</code></pre>
<p>and if I do <code>git log</code> on the oldest commit, the result lists only one commit, because that commit has no ancestors. So far so good.</p>
<pre><code>git git:(master) git log 14181db --pretty=reference
14181db (First new file in repo, 2022-08-03)
</code></pre>
<p>My problem is in understanding the <strong>exclude</strong> operator '^'.
If I exclude the most recent commit, then I should see no results, because it excludes all commits reachable from this commit, which is all of them, as they are all ancestors. And that is what happens.</p>
<pre><code>git git:(master) git log ^9843ccb --pretty=reference
git git:(master)
</code></pre>
<p>But if I exclude the oldest commit, I would not expect its descendants to be also excluded. However, that is what is happening.</p>
<pre><code>git git:(master) git log ^14181db --pretty=reference
git git:(master)
</code></pre>
<p>Why is this? What have I misunderstood?</p>
","0","961646","",""
"52017036","119198","2018-08-25 11:49:41","2","56","<git><git-commit>","Different git commit origin master and my server","<p>In my local git, </p>

<pre><code>~/my/local/dir/my-repo-name$ rev-parse HEAD
2978a05ecaa0657220b669fc60f127349f87faf4
</code></pre>

<p>However in my live-server, I had to <code>git stash</code>, and it gave the following:</p>

<pre><code>myremote@mylive-website:~/mylive$ git stash
Saved working directory and index state WIP on master: 9728f63 Merge branch 'master' of bitbucket.org:myname/my-repo-name
HEAD is now at 9728f63 Merge branch 'master' of bitbucket.org:myname/my-repo-name
myremote@mylive-website:~/mylive$ git rev-parse HEAD
1cb3966b518e0e31940407d53b981bbb58a62092
myremote@mylive-website:~/mylive$ git merge master
Already up-to-date.
</code></pre>

<p>So my local and live-server have different commit number. How can I fix this?</p>
","2","119198","0","0"
"73373212","11305723","2022-08-16 11:25:21","0","209","<git><visual-studio-code><git-commit><git-stage>","VSCode deleting staged commits","<p>I have been working on a project for a week and a half now, went to commit my changes and this message popped up:</p>
<p>Warning message:<br />
<img src=""https://i.stack.imgur.com/7lIz6.png"" alt=""Warning message"" /></p>
<p>I selected &quot;Yes&quot;. After which VSCode seemed to have deleted all my files that were added to the branch I was working on. I have tried the &quot;Undo previous commit&quot; option, however that only undo's my commit before, not the current one. I have no way of getting these files back (As far as I can see from what I have googled). Has anyone had a similar issue? My files aren't on the server repository or in recycle bin, they have just vanished.</p>
<p>Any Suggestions would be greatly appreciated!</p>
","4","11305723","",""
"73377019","12637092","2022-08-16 16:06:13","0","656","<git><gitlab><gitlab-ci><commit><git-commit>","Gitlab commit author is different than pipeline author (triggerer)","<p>I think there was a previous git account on my computer, I tried to uninstall Git and re-install it and did the following commands to configure it :</p>
<p>git config --global user.name &quot;myusername&quot;
git config --global user.email myemail</p>
<p>But I always get a wrong user as pipeline triggerer :
<a href=""https://i.stack.imgur.com/huarV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/huarV.png"" alt=""enter image description here"" /></a></p>
<p>What can I do ?</p>
<p>Thanks</p>
<p>Update 1 : I get the correct user name as commit author, the problem is only on pipelines.</p>
","1","12637092","",""
"73377675","19777789","2022-08-16 17:02:34","-1","72","<git><pycharm><git-commit>","All files have disappeared after commit to git and hard reset","<p>Need your help please 🙏 I've tried to run my first commit and all the files in the folder have disappeared.</p>
<p>Is there any way to restore them?</p>
<p>Searched for the files from home dir and they are not on my Mac, no backup, tried to restore with pycharm from local history - files were restored but they are blank.</p>
<p>Those are the commands I used:</p>
<pre><code>git add .
git commit -m &quot;first commit&quot;
git push -uf origin master
git push -uf origin driver_account_be_automation
git reset --hard HEAD~1
git push -uf origin driver_account_be_automation
git reset --hard HEAD
git reset --hard 
git reset --hard 2dfe5d6e6a47696c11d40a963b1b886071c18a9f
git add .
git commit -m &quot;first commit&quot;
git push -uf origin driver_account_be_automation
</code></pre>
","0","19777789","",""
"75572706","4523359","2023-02-26 14:38:39","-1","300","<git><authentication><github><oauth><git-commit>","How to authenticate to Github from Git Extensions with access token?","<p>I try to push branch with Git Extensions to GitHub, but when pushing the change it displays a Github pop-up window to login.</p>
<p>When pushing repo changes from Git Extensions, it displays a Github pop-up window to login.</p>
<p>I created access token as @invzbl3 suggested, so it should work, but I still get a Github pop-up login screen.</p>
<p>I created access token on Github.com / Settings Developer settings / Personal access tokens / Tokens (classic).</p>
<p>I checked:</p>
<ul>
<li>repo checkboxes (Full control of private repositories)</li>
<li>workflow</li>
<li>read:org</li>
</ul>
<p>Is there any else permission needed to push into a Github repo?</p>
<p>I added the token I got into Git Extensions / Tools / Settings / Plugins / GitHub / OAuth Token (Global for all repositories).</p>
<p>Unfortunately this does not authenticate, still displays a Github pop-up window to login.</p>
","4","4523359","",""
"73386140","12805500","2022-08-17 09:36:57","0","795","<azure><azure-devops><git-commit><git-tag>","Azure Devops API: get latest action on the repository","<p>I'm using Azure Devops Rest API and I'm trying to figure out the best way of getting the latest action timestamp(date) on the specific repository.</p>
<p>Now I'm trying to fetch commits and tags and check the action data there. But I see that azure doesn't support fetching the latest only, so I have to paginate through all tags, for example.</p>
<p>I'm using these endpoints:</p>
<ul>
<li><a href=""https://learn.microsoft.com/en-us/rest/api/azure/devops/git/refs/list?view=azure-devops-rest-6.0&amp;tabs=HTTP"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/rest/api/azure/devops/git/refs/list?view=azure-devops-rest-6.0&amp;tabs=HTTP</a></li>
<li><a href=""https://learn.microsoft.com/en-us/rest/api/azure/devops/git/commits/get-commits?view=azure-devops-rest-6.0&amp;tabs=HTTP"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/rest/api/azure/devops/git/commits/get-commits?view=azure-devops-rest-6.0&amp;tabs=HTTP</a></li>
</ul>
<p>All this processing is pretty much heavy memory-wise, so I need something different.</p>
<p>Probably someone can suggest an idea of how it can be done.</p>
<p>Thanks</p>
","0","12805500","",""
"75593313","10353498","2023-02-28 14:22:55","-1","63","<git><github><passwords><git-commit><git-push>","GitHub push issue - displaying invalid password","<p>I am unable to push my commit to github, it's saying invalid username or password</p>
<p>Click on the interface below to see the code</p>
<p><a href=""https://i.stack.imgur.com/WtESe.png"" rel=""nofollow noreferrer"">The interface </a></p>
","1","10353498","",""
"73402771","17456440","2022-08-18 12:03:07","-1","113","<git><git-commit><git-rebase>","How can I add a new commit before a previous commit?","<p>I created a new branch, then I created one new commit on this new branch. Now, I want create a new commit that will be before the previous commit. And I don't want to change the previous commit.</p>
<p>How can I do it in a simple way?</p>
","3","17456440","0","0"
"75601194","2758414","2023-03-01 08:29:14","2","55","<git><git-commit>","Why I can't see deleted files in the git commit history?","<p>Half-way through a project development I deleted some files from my repo.</p>
<p>I checked both commit history both locally and on GitHub, and I can't see these files in any of the commits. I wonder how is this possible that I can't see them in ANY of the previous commits. I'm sure I had them in this project because these were <code>.png</code> files used in my <code>.md</code> files, so I still see their paths in my <code>.md</code> files. For example: <code>![](./images/postgresql/numeric_data_types.png)</code>.</p>
<p>I tried to search for these files and their paths with the followings commands:</p>
<p><code>git log --all --full-history -- './images/postgresql/numeric_data_types.png'</code></p>
<p><code>git log --all --full-history -- '**/numeric_data_types.png'</code></p>
<p><code>git log --diff-filter=D --summary</code></p>
<p><code>git rev-list -n 1 HEAD -- ./images/postgresql/</code></p>
<p>None of these commands return any trace of the files like they've never been in the repo.</p>
<p>I also inspected commit history manually through GitHub website. Also no trace.</p>
<p>Any suggestions?</p>
<p>EDIT:</p>
<p>My git config file:</p>
<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[remote &quot;origin&quot;]
    url = git@github.com:user/repo_name.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch &quot;main&quot;]
    remote = origin
    merge = refs/heads/main
</code></pre>
","10","2758414","",""
"37960909","6497583","2016-06-22 07:10:43","0","838","<git><github-api><git-commit>","Count number of commits in through GitHub API command","<p>I am pulling the commit information using GitHub Enterprise API. Sample API command is </p>

<pre><code>""curl -i -H 'Authorization: token XXXXX' https://git.xxxx.com/api/v3/repos/DataPortal/search-service/commits?page=1&amp;per_page=100 ""
</code></pre>

<p>Is there any way to get the total commit count in a command? Right now I am trying to iterate per page  but for repos with huge number of commits, git is resetting the connection.</p>
","2","6497583","",""
"75606884","8926754","2023-03-01 17:08:53","-1","59","<git><git-merge><git-branch><git-commit><git-pull>","Branch feature is ahead of origin by X commits after merge dev","<p>Let's say I'm on featureOne, someone else is on featureTwo and there is a dev branch. Both of us merge our work into dev. I now want to grab the dev branch and merge into featureOne so I can grab the changes from featureTwo as well and continue my work.</p>
<p>So I do</p>
<pre><code>git switch develop
git pull
git switch featureOne
git merge develop
</code></pre>
<p>Why does it say after &quot;Your branch is ahead of origin/featureOne by 13 commits&quot;
&quot;nothing to commit, working tree clean&quot;.</p>
<p>When I haven't done any further work? Nor has dev been updated. Shouldn't it just be fast forwarding?</p>
<p>I don't want the 13 commit history in the history of featureOne if it's related to featureTwo.</p>
","2","8926754","",""
"75614732","21272950","2023-03-02 11:20:21","0","12","<windows><git><github><git-commit>","Changes won't stage for commit no matter what I do","<pre><code>&quot;Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   src/pages/Payment/payment.js&quot;
</code></pre>
<p>I  think at some point the uppercase P might have screwed something up but not sure why. When I click the link of the modified file it says working tree in the tab</p>
<p>I've entered &quot;git add .&quot; &quot;git add -A&quot; and manually clicking stage changes in vscode it does it for a second and then reverts back to changes area.</p>
","0","21272950","",""
"75633674","21155145","2023-03-04 04:36:47","0","233","<git><github><ide><git-commit><git-push>","How to fix this: push rejected because it was not a simple fast- forward. use ""force: true"" to override (spck.io)","<p>I use an IDE on my phone called <a href=""https://spck.io/editor"" rel=""nofollow noreferrer"">Spck Editor</a> (it has an online version) and sometimes I get this error when I push code to Github:</p>
<blockquote>
<p>Push rejected because it was not a simple fast- forward. Use &quot;force:
true&quot; to override.</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/4h6JD.jpg"" rel=""nofollow noreferrer"">Screenshot of the Error</a></p>
<p>But I cannot find the access to git console to run:</p>
<pre><code>git push --force
</code></pre>
<p>Sorry if the question is too stupid and because my English is not good, please don't be angry :C</p>
<p>Help me, when I got this error I had to manually copy the code and paste it on Github, it was quite time consuming and tiring.
Thank you so much.</p>
","4","21155145","",""
"73426267","19381704","2022-08-20 11:22:44","0","129","<git-commit>","Git commit without files or folder","<p>Git is telling me to commit some 10000 changes but here's the catch, I deleted the folder in which the files to commit are located. Any thoughts on how I can stop git from telling me this.</p>
","1","19381704","0","0"
"75651016","21342190","2023-03-06 12:45:09","0","37","<git><github><git-commit><git-reset>","I have accidentally unstaged all the changes in my branch using git reset. How to revert it?","<p>I used git reset without any arguments and even after I committed all the changes after, the changes are still unstaged. How to revert it?</p>
<p>I have made many changes and committed and pushed them to the remote branch. But everytime I try to merge the branch to another branch, I can see the changes are still unstaged.</p>
<p>I was just trying to go back one commit</p>
","4","21342190","",""
"38000425","73137","2016-06-23 19:40:05","1","1531","<git><git-commit>","How do I push all directories inside a parent directory into GIT","<p>Below is the directory structure of my directory named ""Code"".</p>

<pre><code>Directory of C:\Name\Code
06/23/2016  12:15 PM    &lt;DIR&gt;          .
06/23/2016  12:15 PM    &lt;DIR&gt;          ..
06/23/2016  12:16 PM    &lt;DIR&gt;          Cpp
06/15/2016  06:49 PM    &lt;DIR&gt;          Java
06/22/2016  04:19 PM    &lt;DIR&gt;          Python
06/23/2016  12:17 PM    &lt;DIR&gt;          OtherStuffs
</code></pre>

<p>My Git account has Cpp and Java repository. I used to go individually to Cpp and Java directories and commit it to Git. So everything inside Cpp and Java gets committed to my Git repository Cpp and Java. Now I have added few more directories. I can sync those directories to Git by individually doing a ""git init"" on each of those directories. </p>

<p>Is there is an easier way to push all directories inside my parent directory ""Code"" into git without creating a repository named Code?</p>

<p>I do not want to create a parent directory ""Code"" in my Git repository. I just want to push all the sub directories to corresponding Sub directories in Git. Something like,</p>

<pre><code>cd Code
git init
git add --all
git commit -m ""Pushing everything inside Code""
git remote add origin https://...   // Where should I make this point to ? I do not have ""Code"" repository in my Git
git push origin master
</code></pre>
","2","73137","",""
"56300524","9947277","2019-05-24 23:37:05","0","250","<git><sublimetext><git-bash><git-commit>","Make Git commit open editor in fullscreen","<p>Pretty simple, I have a Git commit template that does not look proper when sublime opens in small window by default. I want sublime to open on commits in full screen (window, not sublime's full screen mode). Is there a flag or hook or something to do this?</p>
","1","9947277","",""
"72177477","3807609","2022-05-09 19:47:25","0","40","<git><git-commit><git-checkout>","Delete again a file via a previous commit that deleted that file in the first place","<p>Scenario:</p>
<ul>
<li>delete <em>file.txt</em> file, commitA and push</li>
<li>restore <em>file.txt</em> via <strong>git checkout commitA~1 file.txt</strong> , commitB and push</li>
</ul>
<p>I want to delete the file <em>again</em> by invoking <em>commitA</em> by running the following checkout command:</p>
<pre><code>git checkout commitA --file.txt
</code></pre>
<p>but I get</p>
<pre><code>error: pathspec 'file.txt' did not match any file(s) known to git
</code></pre>
<p>Is there a way to re-delete the file? I could just delete the file add it and commit but I am wondering if I can keep the history clean by reusing an <em>older commit</em>?!</p>
<p>Edit: I removed the Source from the file path to avoid confusions</p>
","1","3807609","",""
"38007812","6006474","2016-06-24 07:23:07","0","1619","<git><android-studio><github><git-commit><git-push>","Committing existing project to git and github","<p>I have a fairly large android studio project and I now want to commit the entire project to git and then to github but I'm stuck! I know how to add a file to the staging area and committing it or committing all modified files but <strong><em>how do I commit an entire project to git instead of committing files singly?</em></strong> </p>

<p>Thank you for your help in advance! :)</p>
","0","6006474","",""
"75675076","20319869","2023-03-08 15:34:08","0","248","<docker><gitlab-ci><git-commit><semantic-versioning><kaniko>","Kaniko Docker build with semantic versioning from GitLab ci","<p>I am building a Docker image using Kaniko executor, and pushing the built image to a private artifactory. I would like to use semantic versioning to be able to distinguish between later releases/versions, because I expect that multiple versions will follow soon. What is the best method to achieve this?</p>
<p>As for now, my gitlab-ci.yml looks somewhat like this:</p>
<pre><code>stages:
  - build

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [&quot;&quot;]
  script:
    - env
    - KANIKOCFG=&quot;\&quot;auths\&quot;:{\&quot;$ARTIFACTORY\&quot;:{\&quot;auth\&quot;:\&quot;$(printf &quot;%s:%s&quot; &quot;${ARTIFACTORY_USER}&quot; &quot;${ARTIFACTORY_PASS}&quot; | base64 | tr -d '\n')\&quot;}}&quot;
    - KANIKOCFG=&quot;{ ${KANIKOCFG} }&quot;
    - echo ${KANIKOCFG} &gt;&gt; /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile $CI_PROJECT_DIR/Dockerfile --context $CI_PROJECT_DIR/ --destination $ARTIFACTORY/$REPO/imagename:1.0.0
tags:
    - docker_runner
</code></pre>
<p>As seen above, the tagging is hardcoded in the config, it has to be changed manually all the time. As of now, it is:</p>
<pre><code>imagename:1.0.0
</code></pre>
<p>Expectation would be if any push would happen to the main branch and merge request is accepted, version would change to for example: 1.0.1 and 1.0.2 and so on...</p>
<p>Tried to check solutions for tagging, but I found so far only advise on using commit tags like this:</p>
<pre><code>stages:
  - build
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [&quot;&quot;]
  script:
    - /kaniko/executor
      --context &quot;${CI_PROJECT_DIR}&quot;
      --dockerfile &quot;${CI_PROJECT_DIR}/Dockerfile&quot;
      --destination &quot;${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}&quot;
  rules:
    - if: $CI_COMMIT_TAG
</code></pre>
<p>(Concern is that custom commit tags would probably make the versioning hard to follow, like &quot;v1.0.1&quot; and &quot;1.2&quot; and &quot;1.3-extended&quot;, etc..)</p>
<p>Is there any other solution to this? What would be the best practice?</p>
","0","20319869","",""
"75688174","21356188","2023-03-09 17:36:47","0","36","<git><timestamp><git-commit><git-log>","In what order does `git log` show commits with same timestamp?","<p>Look at this:</p>
<pre><code>$ git log --oneline --graph
*   c3f035c (HEAD -&gt; master) added files
|\  
| * df07f9e (alt) Add Z
| * 85d52b4 Add Y
| * cb54ba0 Add X
* | 0ee077f Add E
* | d968ccf Add D
* | b0777d7 Add C
|/  
* a0be85a Add B
* bb35288 Add A
</code></pre>
<p>^ That shows them in the order that they were committed.</p>
<p>But without --graph, the output is so confusing:</p>
<pre><code>$ git log --oneline
c3f035c (HEAD -&gt; master) added files
df07f9e (alt) Add Z
85d52b4 Add Y
cb54ba0 Add X
0ee077f Add E
a0be85a Add B
d968ccf Add D
bb35288 Add A
b0777d7 Add C
</code></pre>
<p>Why does it show C last? And A and B apart from each other?</p>
<p>the git log man page says that --graph implies --topo-order which makes it print all children before any parents, which is what i understand.</p>
<p>It also says that the default is reverse chronological order, so the commits are shown in the order that they happened, but C wasnt commited before A, how could that even be possible?</p>
<p>Could the problem be that A..E all have the same commit timestamp?
(CommitDate: Thu Mar 9 19:15:54 2023 +0200)</p>
","1","21356188","",""
"53979779","10849655","2018-12-30 17:19:53","0","56","<python><git><github><repository><git-commit>","how to commit virtual envinroment","<p>I have a Python code with virtual env and libraries  on my local but in GitHub repository there is no virtual env/libraries. </p>

<p>I removed virtual environment  from git-ignore but still the libraries are not getting committed to repository and when I clone it to another system I don't have it. </p>

<p>What is the best practice to commit env and libraries to repository or better to install it again on each computer. If it's acceptable to commit virtual env, can you please advise how to do it. </p>
","3","10849655","",""
"73456746","19312929","2022-08-23 10:03:39","0","13","<git><github><hook><git-commit>","What Pre-receive hook to use to ensure github commit comments contain JIRA ID","<p>I am using Github enterprise and want to verify that every git commit includes a Jira ID.</p>
<p>Below is the format that I would want to enforce : Commit Message. Ex XYZ-1234: Test Commit</p>
<p>I referred this <a href=""https://stackoverflow.com/questions/55006426/ensure-github-pr-squash-merge-commit-comments-contain-issue-id"">Ensure github PR squash merge commit comments contain issue ID</a> but not sure which Pre-receive hook to be used. I have below Pre-receive hooks,
<a href=""https://i.stack.imgur.com/zPphW.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zPphW.png"" alt=""enter image description here"" /></a></p>
","1","19312929","",""
"72185124","16906730","2022-05-10 10:59:16","0","537","<git><bitbucket><git-commit><bitbucket-api>","How to commit a file to Bitbucket using Rest API?","<p>I am trying to commit a file to Bitbucket using Rest API from postman, but it shows method not allowed.</p>
<p>Below is the URL which I am trying</p>
<p><strong>http://URL/projects/CONFIG_MNGMNT/repos/devicegroups/browse/C:/Shivanand/ReadMe.txt</strong></p>
<p>I am trying to commit ReadMe.txt file from path C:/Shivanand.</p>
<p>Below is the error -&gt;</p>
<p>** Method Not Allowed
The requested method PUT is not allowed for the URL **</p>
<p>I am using PUT method.</p>
","2","16906730","0","0"
"73466468","19164472","2022-08-24 01:17:31","0","69","<git><git-commit><git-cherry-pick>","git -- cross reference common commits across branches","<p>I have a git repo that has multiple unmerged branches, and need to get a handle on what is where.  SOME of them have had commits cherry-picked across, so if I do a list of commits using the top line of the log message, two of them would show the same text in different branches.</p>
<p>I have used git show-branch to show me all the commits and which branches they are in, and I can see some of them sharing the same text ... but I have to first pick a commit msg, then search (or grep) for that text to see if it appears in another branch.</p>
<p>Is there a way to automate this cross referencing of common commits across branches?  So that I can get a list of all branches that the commit &quot;this fixes the config problem&quot; is in?    Even better would be a list of cherry-picked commits and where their origin commit is, but I am not holding out hope for that.  Just a list that shows that commit X appears in branches A, B, and C would be a tremendous help.</p>
","1","19164472","",""
"73484381","4768946","2022-08-25 08:36:25","1","12","<git><git-commit><git-rebase><squash><git-squash>","Squashing commits not in series using git rebase","<p>I have multiple commits done on a branch for a C project and would like to squash them into just two commits.</p>
<p>Commit 1 - should have only the changes to the actual functionality source code</p>
<p>Commit 2 - should have the changes to the test code only</p>
<p>The problem is, the commits are not in squence for the functionaly code and test code , for example below, when git <code>rebase -i &lt;hash&gt;</code> is run :</p>
<pre><code>pick 626e9699 src : first src commit 
pick 07535353 src : second src comit
pick 9c768710 test: first test commit
pick 985f9f33 src : third src commit
pick fef22111 test: second test commit
pick 3e4e5991 src : fourth src commit
</code></pre>
<p>I have squashed commits when they are in the right order before without issues, but wondering how this would work. Thanks in advance</p>
","3","4768946","",""
"73496735","9703692","2022-08-26 06:08:55","0","53","<git><github><git-commit><git-push><git-fork>","Should fork be first synced with master or should you commit changes first?","<p>I am working on a repository and forked it 2 days ago. After forking and cloning it in my local, I made changes over these past 2 days. I have not yet committed any changes nor I have pushed my feature branch to my fork. Meanwhile in these 2 days, the original repo got ahead of my forked repo by some n commits.
So now should I commit my changes and push my feature branch to my fork first or should I first sync/update my fork with original repo?</p>
","2","9703692","",""
"56356680","5452773","2019-05-29 08:55:22","1","73","<git><patch><git-commit><git-show>","Can I apply a whole commit from a file created with git show?","<p>Is there a way to create a new commit in Git, using a file which provides both the changes and the commit message, like the output from git show does?</p>

<p>It would be nice when the other metadata fields, like Author, AuthorDate and so on would also be taken into account.</p>
","0","5452773","",""
"56357512","5635569","2019-05-29 09:39:45","0","760","<git><git-submodules><git-commit>","Why my Git submodule is automatically detached HEAD to a specific commit?","<p>I have a parent repository named 'A' that contain a submodule 'B'
When I clone 'A' i got 'B' detached HEAD to a specific commit.</p>

<p>My clone command is:</p>

<pre><code>git clone --recurse-submodules https://github.com/.../A.git
</code></pre>

<p>After that i am enter to 'A' folder:</p>

<pre><code>cd A
</code></pre>

<p>I am automatically on 'develop' branch - Great!</p>

<p>When I am enter to my submodule folder:</p>

<pre><code>cd B
</code></pre>

<p>I am automatically got (<code>HEAD detached at 6dce2e1</code>) - WHY ?!?!
I want to be automatically on develop also here.</p>

<p>I have read all previous question - nothing help!</p>

<p>What i have tried:</p>

<ol>
<li><p>delete submodule -> commit -> add again with write implicit develop branch name.</p></li>
<li><p>checkout B repo to develop and commit it in A repo</p></li>
</ol>

<p>I have already tried this post: <a href=""https://stackoverflow.com/questions/18770545/why-is-my-git-submodule-head-detached-from-master"">Why is my GIT Submodule HEAD detached from master?</a></p>

<p>Also, tries this:
<a href=""https://stackoverflow.com/questions/1777854/how-can-i-specify-a-branch-tag-when-adding-a-git-submodule"">How can I specify a branch/tag when adding a Git submodule?</a></p>

<p>It is just do not solve my issue! When i am cloning to new folder the issue is come back!</p>

<p>But it is simply not solved my issue.</p>

<p>How can i solve it? and why it is suddenly happened?</p>
","9","5635569","",""
"56357668","11257110","2019-05-29 09:47:34","1","41","<github><git-commit><git-fork>","How to get rid of having *already merged* commits being ahead of origin branch","<p>On my gihub forked repo, it is said that the master branch is 9 commits ahead of the parent repository's master branch.</p>

<p>When I click compare, it is shown that 0 files changed.</p>

<p>The reason why I have these commits:</p>

<ul>
<li>8 commits were made to solve an issue, opened PR to the upstream repo, PR was successfully merged to the parent repo. While merging I chose the option to squash my 8 commits into 1 commit.</li>
</ul>

<p>Then on my github forked repo page I had a message ""your branch is 8 commits ahead, 3 commits behind""</p>

<ul>
<li>I have synced my local forked repo with the upstream repo.</li>
</ul>

<pre><code>$ git remote add upstream https://github.com/[Original Owner Username]/[Original Repository].git
$ git fetch upstream
$ git checkout master
$ git merge upstream/master
$ git push
</code></pre>

<p>While merging there were no conflicts. And due to merging local/master with upstream/master 1 more commit was created.</p>

<p>I guessed that updating the local forked repo and pushing changes to the github repo would help to resolve the issue. But, apparently, no.</p>

<p>Why do I still have 8 commits ahead, if they were already merged into the parent repo? Is it because of squashing while merging PR?</p>

<p>How can I get rid of these meaningless commits being ahead?</p>
","0","11257110","",""
"38104741","6529297","2016-06-29 16:01:05","0","46","<git><git-commit>","Changes missing after Commit operation in GIT","<p>I am trying to commit the changes of files in /webapps folder of my project. I see that, except the first commit, the subsequent commit operations do not make any modification to the /webapps folder.
This problem is happening only when committing changes to /webapps folder.</p>

<p>Any help on this would be appreciated!</p>
","3","6529297","",""
"56369911","1223975","2019-05-29 23:47:30","0","722","<git><bitbucket><git-commit><git-hash>","Given long git commit how to safely get short commit","<p>If I query the bitbucket api for commits, I get the long version:</p>

<pre><code>bitbucket_curl(){
    curl -H 'Authorization:Basic YW1JyKg==' ""https://api.bitbucket.org$@""
}

commits=""$(bitbucket_curl '/2.0/repositories/interos/datavana/commits/alex/dockerize?pagelen=3')""

latest_commit=""$(echo ""$commits"" | jq -r '.values[0].hash')""
</code></pre>

<p>given a long commit: <code>c56cefbd0c81142558cf814cba7d7cd75d7cb6a7</code></p>

<p>is there a way to reliably get the short commit hash? Isn't it like the last 10 chars or something? Or perhaps there is a way to request the short hash from the Bitbucket API? On that subject I am looking for a reliable way to get the most recent commit for a branch.</p>
","2","1223975","",""
"73528969","12404777","2022-08-29 12:40:15","4","5145","<git><github><version-control><commit><git-commit>","How to change an old commit message?","<p>I need to change an old commit message. Considering that I've made a few other commits afterwards, is there a way to change it, via git or directly on GitHub, without interfering with the other commits?</p>
","2","12404777","",""
"72205056","3882995","2022-05-11 17:11:23","0","83","<github><git-submodules><git-commit><git-clone><git-remote>","How to configure submodule remote and push","<p>I have a third party repo as a submodule <code>sub</code> living in <code>parent/data/</code>.
In <code>parent/data/sub/</code>, <code>git status</code> gives me</p>
<pre><code># On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#   (use &quot;git push&quot; to publish your local commits)
#
nothing to commit, working directory clean
</code></pre>
<p>Apparently, I've made changes to the submodule and my local commit is recognised but has not pushed. Because the <code>remote</code> is <code>origin/master</code>, the third party repo, I get permission denied if I simply <code>git push</code>. However, pushing my customised and local changes to the original third party is not my goal anyway, as I only intend to customise the code so that I can use in my <code>parent</code> project.
Also, <code>git show HEAD</code> gives a hash <code>abc123</code> (made dummy for illustration purpose) and the correct changes that I've made.</p>
<p>Under <code>parent/</code>, <code>git submodule status</code> gives me</p>
<pre><code>abc123 data/sub (heads/master)
</code></pre>
<p>and <code>vim .gitmodules</code> gives me</p>
<pre><code>[submodule &quot;data/sub&quot;]
    path = data/sub
    url = https://github.com/owner-id/sub
</code></pre>
<p>everything seems fine to me. The obvious issue it seems is the non-pushed commit mentioned above. As a result, when I navigate to my repo online at <code>parent/data/sub@abc123</code> it shows 404. Meanwhile, when I try to <code>git clone https://github.com/my-id/parent.git --recurse-submodules</code> it shows</p>
<pre><code>fatal: reference is not a tree: abc123
Unable to checkout 'abc123' in submodule path 'data/sub'
</code></pre>
<p>Question: how to push my local commits in <code>sub</code> to my own repo so that when others <code>clone</code> my <code>parent</code> the <code>parent/data/sub</code> is my customised version?</p>
","0","3882995","",""
"56393821","5784031","2019-05-31 10:58:38","1","1260","<git><repository><putty><git-bash><git-commit>","Ignore Git commits when pull. Skip commits and continue from latest commit","<p>I pushed the code twice on my repo and pulled it on the server, It had some issues so I had to go back and hard reset to a previous commit. Can I only get changes from last commit ?</p>

<p>Command I used to go back to commit 'C'</p>

<p>git reset --hard C</p>

<p>Visual representation:</p>

<p>commits on repo:</p>

<p>A-B-C-D-E-F</p>

<p>git on server side:</p>

<p>A-B-C'</p>

<p>Locally I only want to push some changes that are in commit 'F'. Now i want to pull changes only from the commit 'F' and skip 'D,E'. On server it tells me I am three commits behind and when I pull it gets files from all the commits. I only want files updated in 'F' commit or any other latest commit.</p>

<p>(Sorry for bad english)</p>
","0","5784031","0","0"
"72217790","18980225","2022-05-12 14:52:20","0","38","<git><git-commit><git-diff><git-log>","In a given repo, output the differences between two commits","<p>When I want to see the output of the gif difference between given two commits SHAs (let's say 123ab45 and 678cd90), I use this
<code>git diff 123ab45 678cd90</code></p>
<p>But when the two commits that sit in a different repo, I am trying to figure out how to output them. Is there any specific command that will do the work with the repo name input?</p>
<p>Thanks</p>
","1","18980225","",""
"38213644","3885506","2016-07-05 22:10:15","0","98","<git><git-rebase><git-commit><git-revert>","Delete select commits and merge or rebase and add important commits","<p>So i was checking for other <a href=""https://stackoverflow.com/questions/20324638/reverting-specific-commits-from-git"">solutions</a> but it's not exactly suited for me I'm also dealing with a branch merge </p>

<pre><code>git log
commit 6d034e1b1f03241b2c660312660ce29acca23f60
Author: ME &lt;myfakemail@gmail.com&gt;
Date:   Thu Jun 30 13:09:08 2016 +0100

    text so people click the button

commit b9295485e17ccb6662b688b5c0f796656ef5f0de
Author: Me-again &lt;myfakemail@fakeville.com&gt;
Date:   Wed Jun 29 17:22:33 2016 +0100

    Adding the 4th celebration to index.php

commit 01ab5a9cfcefe34e72f06f52974da96ce1c2980a
Author: Me-again &lt;myfakemail@fakeville.com&gt;
Date:   Wed Jun 29 12:40:37 2016 +0100

    do the status check after all stops have been performed

commit 904bfdfbc4b536d052e61a303a17e6e108b7d9fe
Author: ME &lt;myfakemail@gmail.com&gt;
Date:   Thu Jun 23 15:16:39 2016 +0100

    changing music to StarSpangled

commit 5874707b022fb6039df84372a750c8fc57215af1
Author: ME &lt;myfakemail@gmail.com&gt;
Date:   Thu Jun 23 15:15:30 2016 +0100

    Quintessential american music

commit 175d5e53c43c7175b6478070d5660e7426aeade9
Author: Me-again &lt;myfakemail@fakeville.com&gt;
Date:   Wed Jun 22 13:11:48 2016 +0100

    Adding error logging and messaging for stop and start

commit 630c25055044a44be304353d3d18e385fed091a3
Merge: 7019947 35eb826
Author: Not Me &lt;notme@mail.com&gt;
Date:   Fri Jun 17 16:57:17 2016 +0100
    Quintessential american music

commit 175d5e53c43c7175b6478070d5660e7426aeade9
Author: Me-again &lt;myfakemail@fakeville.com&gt;
Date:   Wed Jun 22 13:11:48 2016 +0100

    Adding error logging and messaging for stop and start

commit 630c25055044a44be304353d3d18e385fed091a3
Merge: 7019947 35eb826
Author: Not Me &lt;notme@mail.com&gt;
Date:   Fri Jun 17 16:57:17 2016 +0100

    Merge branch 'master' of https://github.com/ME/MyProject

commit 7019947ceea28bd80d020e062a003433529c2a5a
Author: Not Me &lt;notme@mail.com&gt;
Date:   Fri Jun 17 16:57:00 2016 +0100

    4th of July draft

commit 35eb826c39f8b8e0fafd51a9cebae68dd434c7eb
Merge: f0a144f 6a6937d
Author: Me-again &lt;myfakemail@fakeville.com&gt;
Date:   Fri Jun 17 16:26:18 2016 +0100

    Merge branch 'master' of https://github.com/ME/MyProject

    Entering the new cast iron  options
</code></pre>

<p>So essentially we have this project and decided to add a bit of flavour/fun for our american brethren. The only thing though while we had it prepared for going up , there was some serious commits made to the project.</p>

<p>Now that the 4th is over I want to remove the themed stuff and go back to normal </p>

<p>I was thinking my options are </p>

<ul>
<li>revert all the 4th related commits</li>
<li>rebase and add the two serious commits back into the code</li>
</ul>

<p>So i ran </p>

<pre><code>git revert --no-commit 6d034e1b1f03241b2c660312660ce29acca23f60 b9295485e17ccb6662b688b5c0f796656ef5f0de    904bfdfbc4b536d052e61a303a17e6e108b7d9fe 5874707b022fb6039df84372a750c8fc57215af1 630c25055044a44be304353d3d18e385fed091a3 7019947ceea28bd80d020e062a003433529c2a5a
error: Commit 630c25055044a44be304353d3d18e385fed091a3 is a merge but no -m option was given.
</code></pre>

<p>And from what I can see it's left me in a half reverted status with only the edits from those commits removed in the staging area but the changes introduced in the merge still there</p>

<p>Am i better to just rebase to the commit 35eb826c39f8b8e0fafd51a9cebae68dd434c7eb 
and then add </p>

<ul>
<li><p>01ab5a9cfcefe34e72f06f52974da96ce1c2980a</p></li>
<li><p>175d5e53c43c7175b6478070d5660e7426aeade9</p></li>
</ul>

<p>Sorry for the rant but if you git gurus were in a similar situation what course of action would you take ? </p>
","4","3885506","",""
"73584385","5471259","2022-09-02 14:49:52","1","44","<azure-devops><git-branch><git-commit><pull-request>","Azure DevOps- Pull Request- Unable to merge code into master because the development branch has more than 100 commits","<p>I have created a &quot;development&quot; branch based on &quot;master&quot; to work on the development tasks. In the &quot;development&quot; branch, I committed the code multiple times to complete the few development tasks. Finally, my branch contains more than 100 commits.</p>
<p>After a few days, I created a pull request from &quot;development&quot; to &quot;master&quot; in Azure DevOps. Whenever I am trying to complete the active pull request, it gives the below error:</p>
<p>&quot;Unable to merge code into master because the development branch has more than 100 commits&quot;</p>
","1","5471259","",""
"54015824","2095022","2019-01-03 03:08:36","0","41","<javascript><node.js><import><githooks><git-commit>","How to test validity of es6 imports before commit","<p>I have a react/redux based large codebase comprising of the following hierarchy:</p>

<p>Routes >> Container >> Components</p>

<p>which means that Routes contain Containers and Containers contain Components.</p>

<p>I'm using a lot of es6 import across my code - to import stuff if each other and also to import svg's and npm packages like lodash.</p>

<p>If I refactor the path of the import:</p>

<pre><code>import x from '../../path1';
</code></pre>

<p>to</p>

<pre><code>import x from '../shorterPath2';
</code></pre>

<p>How can I run some tests across my codebase to ensure that for all files - the imports are correctly resolved - that all filepaths from which things are being imported will return an asset or something from a index.js present there:</p>

<p>Should I </p>

<ol>
<li>write my own nodeJS script/ shell script</li>
<li>try something from javascript testing framework - can this be done??</li>
<li>will git-hooks work here??</li>
</ol>

<p>Please give me a direction to think on and I can code the rest.</p>

<p>Thanks a lot!</p>
","0","2095022","",""
"72221527","18980225","2022-05-12 20:05:01","0","402","<github><git-commit><pull-request><github-cli>","How can I check if a commit exists in a pull request on GitHub?","<p>So I have a list of commits SHAs to check. In a given commit SHA let's say 123ab45, I want to see if the commit is linked to a PR in the branch.</p>
<p>Is there any command that I can put to check that?</p>
","4","18980225","",""
"38229852","608639","2016-07-06 17:13:24","7","9374","<git><git-commit>","Commit and push changes after going back to a particular revision in the repository?","<p>We need to go back in time to a particular commit. Some accidental changes were made to master. Attempts to revert it dug too deep, so master is in a bad state. We now want master to go back to 66ada4cc61d62afc.</p>

<p>According to <a href=""https://stackoverflow.com/q/6794110/608639"">git revert back to certain commit</a>:</p>

<pre><code>$ git reset --hard 66ada4cc61d62afc
HEAD is now at 66ada4c Updated documentation
</code></pre>

<p>Then, trying to commit it:</p>

<pre><code>$ git add *.h *.cpp
$ git commit -m ""Go back to Commit 66ada4cc61d62afc""
On branch master
Your branch is behind 'origin/master' by 16 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)

nothing to commit, working directory clean
</code></pre>

<p>And finally:</p>

<pre><code>$ git push
To https://github.com/weidai11/cryptopp.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/weidai11/cryptopp.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>Right now, everything is exactly where I want it to be. I have no idea why Git is having trouble, and what Git is talking about. It sure would be nice if Git did what it was told. But alas, Git makes every simple task difficult, and its going to inflict undue pain and suffering.</p>

<p>How do I commit and push the changes?</p>
","0","608639","",""
"73597221","14367796","2022-09-04 06:27:49","0","24","<git><git-bash><git-commit>","git commit -a isn't skipping the staging area","<p>Hello I'm a beginner and I'm learning to use Git with a Youtube toutorial. The instructor did <code>git commit -a</code> to directly commit files without using <code>git add</code> command.
But, when I used the command on my system, I get this for some reason -
<a href=""https://i.stack.imgur.com/iWiai.png"" rel=""nofollow noreferrer"">screenshot of git bash</a>.</p>
<p>Output -</p>
<pre><code>$ git commit -a
On branch master
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        file1.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>Can someone tell why is it happening.</p>
<p>Thanks.</p>
","4","14367796","",""
"73619421","1135954","2022-09-06 09:06:20","0","25","<git><git-commit><git-amend>","How to amend file in previous to last local commit?","<p>I'm aware of <a href=""https://stackoverflow.com/questions/40503417/how-can-i-add-a-file-to-the-last-commit-in-git"">various ways</a> to amend the latest local commit.</p>
<p>I'm looking into updating the file in previous to last local commit. Searching SO, I didn't find anything relevant.</p>
<p>Is this achievable? If yes how do I do it?</p>
","0","1135954","",""
"73624678","2864236","2022-09-06 15:43:19","0","95","<git><branch><program-entry-point><rebase><git-commit>","I have one commit on my branch, why does rebase onto main step through each new commit on main?","<p>I have one commit on my branch which has modified 6 files, but when I try git rebase --pull origin main, or just rebase my branch on top of main, I am forced to step through each new commit on main separately.
Why is rebase not just prompting to review changes needed on my single commit? How can I avoid reviewing each commit from master interactively?</p>
","6","2864236","",""
"73629589","15757416","2022-09-07 02:55:29","1","238","<git><git-commit><sha1><sha><git-tag>","Git SHA-1 hash building: commit vs. tag?","<p>I've successfully been able to figure out how to piece together a Git <code>commit</code> hash from the data.</p>
<p>I can construct an algorithm that makes a Call to SHA-1 using each &quot;piece&quot; of information (tree, author, committer, etc)
and surprisingly enough, my hash matches up with the git hash the commit gets. Based on my experimentation, there is some strangeness with newlines but the format for how these should be handled is something like:</p>
<pre><code>tree ***\n
parent ***\n
author *** *** ***\n
commiter *** *** ***\n
gpgsig ***\n
\n***\n
</code></pre>
<p>Where <code>***</code> represents the actual normal <em>input</em>.</p>
<hr />
<p>Now I am trying to do the same for <strong>annotated tags</strong>, but struggling to get the same SHA-1 output that git gives.</p>
<p>Some obvious differences stand out:</p>
<ul>
<li>the message now comes <em>before</em> the PGP sig</li>
<li>the PGP sig is not prefixed with &quot;gpgsig &quot;</li>
</ul>
<p>No matter how many combinations of weird newlines I try, I <em>cannot</em> get my algorithm to correctly build a SHA-1 hash based on this output.</p>
<p>The most <em>logical</em> format for how I see this is:</p>
<pre><code>object ***\n
type ***\n
tag ***\n
tagger *** *** ***\n
\n***\n
***\n
</code></pre>
<p>Questions:</p>
<ul>
<li>Is there anything else that's different about annotated tag generation? Is my format assumptions wrong?</li>
<li>Is the output of <code>git cat-file</code> equivalent to how I should be piecing this together? I am assuming so because the commit worked that way, but would be nice to confirm.</li>
<li>Git is open-source, right? Does anyone have a link for how they build the SHA-1 hash? Would be awesome to do this in a way that isn't guess and check.</li>
</ul>
<p>Thanks in advance for the help, really struggling with this!</p>
<p>ANSWER: there is a space in gpgsig ONLY on commits</p>
","8","15757416","",""
"73631383","7038581","2022-09-07 07:08:56","0","1456","<github><github-actions><workflow><git-commit>","Triggering a workflow run after an action commits","<p>In a repository we have :</p>
<ol>
<li><p>a workflow that runs <code>on: pull_request</code>
so it runs each time I open/ commit to the pull-request (which I opened)</p>
</li>
<li><p>we have an action (runs manually) that commits to the pull-request (updating some files in the branch)</p>
</li>
</ol>
<p>when the second action finishes to run, I can see its commit on the pull request
but it doesn't trigger the first workflow to run again
(in order to run the workflow after the action's commit, I need each time to insert a dummy commit or close and re-open the pull-request)
Is there another way to trigger the first workflow after a &quot;bot&quot; from the 2nd github action commits?</p>
","0","7038581","",""
"54035611","4777776","2019-01-04 08:47:29","1","323","<git><github><gitlab><git-commit><git-push>","hide or change value a line ( or lines ) at git commit but not locally","<p>i'm working on an application with a specific credential ( login , password , serverIP ) ...</p>

<p>for example : 
File /test.java :</p>

<pre><code>  String RegDomain = ""188.XXX.XXX.XXX"";
  String RegPassword = ""XXXXXXX"";
  String RegUser = ""XXXXX"";
</code></pre>

<p>my need is when i commit , and/or push my code i'd like to found that the test.java as following:</p>

<pre><code>  String RegDomain = ""YOurDomaine"";
  String RegPassword = ""YourPassword"";
  String RegUser = ""UserName""; 
</code></pre>

<p>without changing the value on local repository .</p>
","2","4777776","",""
"56487204","9849987","2019-06-07 02:18:22","1","619","<git><push><commit><git-commit><git-push>","How to remove sensitive information before ""git push""","<p>My python application has database keys/api keys on source code.
Something like:</p>

<pre><code>db_key    = XXXXXXXXXXXX
api_token = XXXXXXXXXXXX

...
</code></pre>

<p>I want to remove this keys automatically (Not the entire file) before commiting/pushing to git.
Also, I want to remove this from my previous commits (already pushed to github).
Is there any solutions?</p>
","4","9849987","",""
"72245016","10830115","2022-05-15 01:44:33","1","666","<git><github><git-commit><post-commit>","Is it possible to make someone a co-author on a past commit already pushed to GitHub?","<p>The title summarizes it perfectly. I have a couple commits on the main GitHub branch that I would like to add a co-author too. I tried using <code>git --amend</code> and adding the email and name to the commit in the proper syntax, but it didn't work and the text itself just showed up. I'm not sure if this is because I got the syntax wrong or if it simply doesn't work but I couldn't find any resources about this online. If have any information please let me know!</p>
","2","10830115","",""
"38363060","1334251","2016-07-13 22:58:47","11","79911","<git><github><git-merge><git-commit>","How to reverse a merge commit (Git)?","<p>So my colleague was editing some code on a repo, however she had not pulled some recent changes and so the software would not allow her to commit her changes.</p>

<p>We went into the shell and pulled the commits that she had omitted and she was able to push, the only problem is that it drew those changes into her diverged branch and attributed those commits to her.</p>

<p>It looks like this:</p>

<p>A-B-C-D-E (say D and E were by someone else)</p>

<p>My colleague had this:</p>

<p>A-B-C, and wanted to add some more on.</p>

<p>So she pulled D and E and pushed those changes and now it looks like this:</p>

<p>A-B-C-D-E-F, except that the changes D, E, and F are now from her account.</p>

<p>Is there away to keep her changes (F) but have the timeline revert to when D and E were attributed to someone else?</p>

<p>Thanks!</p>

<p>Graphic representation of problem:</p>

<p>A-B-C-D-E (most recent version of master)</p>

<p>A-B-C (colleague has this)</p>

<p>A-B-C-F (colleague makes edits) (branches hath diverged)</p>

<p>!ERROR! (colleague tries to commit and push)</p>

<p>A-B-C-D-E-F (colleague merges master into her branch)</p>

<p>A-B-C-D-E-F (colleague pushes)</p>

<p>GitHub UI now does not display changes D-E, they are lumped into a ""Merge branch 'master' ...""</p>
","2","1334251","",""
"38370998","389616","2016-07-14 09:52:05","1","157","<version-control><git-commit>","How to add untracked file in last git commit?","<p>I initiated git, then used following command to add all the files in commit.</p>

<pre><code>git add *
git commit -m ""Starting project modifications""
</code></pre>

<p>but still there is .htaccess file as untracked, I don't know why it was not added now I want to add it to my last commit. How can I add it without doing another commit.</p>
","0","389616","0","0"
"73709286","7397820","2022-09-13 21:22:19","0","392","<github><jenkins><sonarqube><git-commit><pull-request>","GitHub pull request show All checks failed after a very minor commit","<p>GitHub integrates jenkins and SonarQube:
My git commit showed the following issue as detected by sonarQube:</p>
<pre><code>Rename this field &quot;GSON&quot; to match the regular expression '^[a-z][a-zA-Z0-9]*$'. rule
</code></pre>
<p>To resolve this I made a very minor commit, I just updated a variable name from GSON to gson as required by sonarQube, but it says checks failed:</p>
<p><a href=""https://i.stack.imgur.com/pPxQi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pPxQi.png"" alt=""enter image description here"" /></a></p>
<p>The checks tabs says there are no checks to run, there is also no option to rerun checks.</p>
<p>How can I resolve this issue ? Can i use the rebuild option ?</p>
<p>Can this happen if one build was in progress and i committed another one?</p>
<p><a href=""https://i.stack.imgur.com/lDlv8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lDlv8.png"" alt=""enter image description here"" /></a></p>
","0","7397820","0","0"
"73713163","1117320","2022-09-14 07:38:38","0","117","<github><git-commit><git-rebase>","Why am I unable to checkout a commit in git","<p>I see error while trying to checkout a commit</p>
<pre><code>git checkout 430f6c81c0a39b58b557b53e9569d9b786731d82
fatal: reference is not a tree: 430f6c81c0a39b58b557b53e9569d9b786731d82
</code></pre>
<p>Is there any work around for this
I am able to see the commit in UI
<a href=""https://github.com/IBM/ibmcloud-volume-vpc/tree/430f6c81c0a39b58b557b53e9569d9b786731d82"" rel=""nofollow noreferrer"">https://github.com/IBM/ibmcloud-volume-vpc/tree/430f6c81c0a39b58b557b53e9569d9b786731d82</a></p>
","3","1117320","",""
"73735909","14357365","2022-09-15 18:33:15","0","30","<git><github><git-commit>","How to create a branch of the diff using git command line","<p>I forked a project (i.e., <code>MainProject:main</code> ) into <code>Jay:main</code>. I created a new branch <code>Jay:feature</code> from <code>Jay:main</code>. In <code>MainProject:main</code> I created a pull request using <code>Jay:feature</code>.</p>
<p>After many merges done to <code>MainProject:main</code>, my PR has a conflict that need to be addressed before it can be merged.</p>
<p>I pulled the lasted changes from <code>MainProject:main</code> into <code>Jay:main</code> so both branches are at sync. While on <code>Jay:feature</code>, I executed <code>git rebase main</code> to ensure all the changed from <code>Jay:main</code> make it to <code>Jay:feature</code> in order to resolve the conflict.</p>
<p>Then I did <code>git commit</code> followed by <code>git push</code>. Unfortunately, my PR now has way too many file which should not be part of the PR.</p>
<p><strong>How can I get only the diff files into the PR?</strong></p>
<p>I thought I would just create a new branch using the difference between <code>Jay:main</code> and <code>Jay:feature</code>. Here is what I did <code>git checkout feature</code> then <code>git reset --mixed</code> so I can stage the difference between the two branches.</p>
<p>Now, I am not sure how would I commit my staged files into a new branch? Or, is there a better way to make sure my PR only include the stages files?</p>
","3","14357365","",""
"54060558","2177312","2019-01-06 10:20:46","0","856","<python><bash><git><git-commit><git-revert>","Telling if Git commit is a revert commit","<p>I would like to build a script that pulls simple statistics from my repository. I would like to exclude merge commits and revert commits from those statistics.</p>

<p>There was a question asked 8 years ago about distinguishing between regular commit and merge commit:</p>

<p><a href=""https://stackoverflow.com/questions/3824050/telling-if-a-git-commit-is-a-merge-revert-commit"">Telling if a Git commit is a Merge/Revert commit</a></p>

<p>The answer is great when it comes to merge commit (i.e. the commit that has more than one parent) but there is no satisfactory answer for distinguishing if commit is a revert commit.</p>

<p>I'm looking at GitPython package and can't find anything on their documentation that would help.</p>

<p>Any help would be greatly appreciated.</p>

<p>Alternatively if there is something already out there (either script/library/product) that helps with git statistics (and excludes merge commits and revert commits) I would also accept such answer.</p>
","0","2177312","",""
"38449036","4344009","2016-07-19 03:18:54","0","987","<git><git-commit>","git commit and got error "" [1] 3910 segmentation fault (core dumped) ""","<p>I use git commit and got an error: 
[1]    3910 segmentation fault (core dumped) </p>

<p>This is my ~/.gitconfig file:</p>

<pre><code>[include]
    path = ~/some/where/gitconfig
</code></pre>

<p>And I put my configuration in ~/some/where/gitconfig.</p>

<p>Any ideas?</p>
","2","4344009","",""
"38448016","1609514","2016-07-19 00:56:38","0","1411","<github><repository><git-commit>","GitHub repository folder icon is black and not click-able","<p>I am new to GitHub and finding it incredibly hard to learn.  I am following the instructions <a href=""http://kbroman.org/github_tutorial/"" rel=""nofollow noreferrer"">here</a> to create new repositories from an existing directory containing the project and typing <code>git init</code> ... etc.  </p>

<p>However I created a repository in the wrong place and then deleted it by going into Settings at github.com.  Then, when I tried to re-push the files  the way I wanted it, one of the subfolders is now black (the one I had just deleted the repository for) and now not clickable - i.e. does not appear to be there.  See <code>statistics_project1</code> in screenshot below.</p>

<p>It's very hard to troubleshoot a problem like this.  There is no error message or explanatory text when you hover over the black sub-folder.</p>

<p>This post seems similar but I don't know.  The solution looks complicated.
<a href=""https://stackoverflow.com/questions/21381530/cannot-remove-submodule-from-git-repo"">Cannot remove submodule from Git repo</a></p>

<p>Could someone please tell me what a black 'unclickable' folder means in a github repository?<a href=""https://i.stack.imgur.com/sf7rP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sf7rP.png"" alt=""enter image description here""></a></p>
","2","1609514","",""
"38451525","3854175","2016-07-19 07:00:04","1","2019","<php><git><git-commit>","git error- did not match any file(s) known to git?","<p>I have added a pattern to ignore files recursively in exclude file inside .info in .git directory.</p>

<pre><code>patter : httpdocs/**/bak_*.*
</code></pre>

<p>If I commit from httpdocs it is working and from the changed directory it gives error.</p>

<pre><code>git commit -m ""formatting js"" httpdocs/* [working]

git commit -m ""formatting js"" httpdocs/dir1/dir2/* [giving below error]
</code></pre>

<p><strong>error:</strong> pathspec 'httpdocs/dir1/dir2/bak_admin.abc.php' did not match any file(s) known to git.</p>

<p>Basically I want to know why this is happening.</p>
","0","3854175","0","0"
"72302296","11261546","2022-05-19 09:46:42","1","70","<git><commit><git-merge><git-commit><git-rebase>","Git Workflow - Correct early errors","<p>Let's say I have a branch Master With the following commits:</p>
<p>M1-&gt;M2</p>
<p>Then from M2 a branch Feature is created and developed as:</p>
<p>M2-&gt;F1-&gt;F2-&gt;F3-&gt;F4</p>
<p>Then a merge request is created from Feature and a code review is done where an error is found in F1 (let's say a typo).</p>
<p>The options I don't like are:</p>
<ol>
<li><p>Creating a new commit fixing the typo =&gt; when merging both the mistake and the correction will be kept, instead of only keeping &quot;the good version&quot; of F1.</p>
</li>
<li><p><code>git commit --amend</code> and fix =&gt; this will again keep the error and the correction in history, just that it will be corrected in F4.</p>
</li>
<li><p>Doing an interactive <code>git rebase</code> =&gt; This will actually look good in the history, but it might be annoying as it's likely to happen that there will be Conflicts with all F2, F3 and F4 commits.</p>
</li>
</ol>
<p>So my question is:</p>
<p>Is there an appropriate way of fixing early errors in not-yet-merged branches?</p>
","3","11261546","",""
"54111753","7357833","2019-01-09 13:54:17","0","29","<git><version-control><git-commit>","In GIT can we combine commit pointers in this way?","<p>In the following diagram (taken from <a href=""http://schacon.github.io/git/git-rev-parse#_specifying_revisions"" rel=""nofollow noreferrer"">http://schacon.github.io/git/git-rev-parse#_specifying_revisions</a>), can E not also be referenced by this pointer:</p>

<p><strong>A~^2</strong></p>

<pre><code>G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A
A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
</code></pre>
","0","7357833","",""
"54117449","7949091","2019-01-09 20:00:23","-3","166","<git><github><git-branch><git-commit>","Pull a specific commit and add that to a branch to update a PR","<p>I send a PR from origin <code>Project/myBranch</code> to an upstream <code>Project/master</code> and what I want to do is pull a specific commit with its SHA and add that commit to the <code>myBranch</code> branch and update that PR. So how should I do it? I have been struggling to do this for over an hour but still no success.</p>
","1","7949091","",""
"72321041","12454060","2022-05-20 14:58:43","0","314","<intellij-idea><git-commit><staging>","Intellij stopped auto staging, files no longer highlighted green after changes","<p>Previously working with Intellij it was highlighting files green, that I have changed but not committed yet. Now when I change they are not being highlighted, when try to <code>git commit -m message</code> in terminal I get</p>
<p><em><strong>Changes not staged for commit:</strong></em></p>
<p><em><strong>modified:   file.java</strong></em></p>
<p><em><strong>no changes added to commit</strong></em></p>
<p>I have to use commit <code>ctrl + K</code> window, select all changes in the tree, press button to <code>commit</code> and then it works. After changes are committed I am still able to use <code>git push origin</code> in terminal to push.</p>
<p>When I change file I still see a vertical line in green appearing, marking all added code, etc. So change list is working, as I read it, but auto staging turned off?</p>
<p>What do I do to get back to using <code>git commit -m message</code> in terminal ?</p>
<p>Intellij IDEA 2022.1 community edition</p>
<p><strong>UPDATE:</strong>
I have now tried to add file, which then was highlighted greed, and after that all changes we committed through terminal. Then removed file, and committed again. So another question, committing through <code>git commit -m message</code> available only if files were added/removed, and not in case I have changed logic in existing files?</p>
<p><strong>UPDATE2:</strong>
As mentioned in update1 new files were always committed through <code>git commit -m message</code>. But it seems that changes in old files were not committed in this way. Committing new files and changes in code from existing files seem to be working through <code>git commit -am message</code>.</p>
<p><em><strong>Can someone confirm it?</strong></em></p>
","2","12454060","",""
"72321409","16880642","2022-05-20 15:27:48","2","455","<git><github><push><git-commit><large-file-upload>","How do I prevent git from timing out when pushing huge amounts of data?","<p>Is there a way to push huge amounts of data to github? I have a massive collection of files I am trying to backup, but when I try to push them, git will timeout or stop working in the middle of it.</p>
<p>Current solution: Commit and push small portions individually (At most 1 to 2 Gigabytes at a time)</p>
<p>Additional Information:</p>
<ul>
<li>It is a private repository being accessed using ssh.</li>
<li>I am using git gui and git bash</li>
<li>Attempting to backup 30 GB of data</li>
</ul>
<p>What I want to do: Commit all changes, and push all data overnight. (Approx: 6hrs)</p>
","3","16880642","0","0"
"54120316","805518","2019-01-10 00:13:28","0","57","<git><git-commit>","how to prevent git commit renaming a directory start with dot","<p>I am trying to git commit a directory starting with a dot as required by a partner. Whenever I do that, I am seeing github move the files underneath to its parent directory. </p>

<p>How can I prevent it from renaming?  </p>

<pre><code>ls directory 
app
  |_ .well-known
      |_ apple-developer-merchantid-domain-association.txt
</code></pre>

<blockquote>
  <p>git commit -m 'added association file'</p>
</blockquote>

<p>results in </p>

<pre><code>rename assets/{ =&gt; .well-known}/apple-developer-merchantid-domain-association.txt (100%)

ls directory 
app
  |_ apple-developer-merchantid-domain-association.txt
</code></pre>
","2","805518","",""
"54136873","5511061","2019-01-10 21:05:52","1","1121","<git><github><git-commit>","Github sends email notification with different username upon my commit","<h3>My actions</h3>
<p>I recently created a new branch, made some commits (a simple <code>git commit -m</code>), and created a pull request in a repo that was not created by me. Github correctly recognises my username/email from <code>~/.gitconfig</code>, but sends email notifications containing the wrong username.</p>
<pre><code># This is Git's per-user configuration file.
[user]
# Please adapt and uncomment the following lines:
name = ddelange
email = 14880945+ddelange@users.noreply.github.com
</code></pre>
<hr />
<h3>The results</h3>
<p>As can be seen below, the commits are linked to me (as expected). Running <code>git show 2f74892</code> also looks as expected.
<a href=""https://i.stack.imgur.com/IIOUi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IIOUi.png"" alt=""Commits are received correctly so it seems"" /></a></p>
<hr />
<h3>However</h3>
<p>Then, all people involved receive an <strong>un</strong>expected email from <code>notifications@github.com</code>, attributing my commit to the owner of the repo:
<a href=""https://i.stack.imgur.com/hmw86.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hmw86.png"" alt=""Email containing wrong username"" /></a></p>
<hr />
<p>These emails are sent every time I <code>git push</code>. Anyone ideas what's happening here?</p>
","1","5511061","0","0"
"72346246","14653849","2022-05-23 09:31:21","2","56","<git><git-commit><git-checkout>","How to make git always warn to stash or commit changes before checking out a different branch?","<p>When I have modified my current branch and check out to a different branch, <code>git</code> warns me that I have not stashed or commited fails <strong>only when there is a conflict between the two branches.</strong></p>
<p>How can I make git always warn me that files have not been commited before I checkout?</p>
","1","14653849","0","0"
"54140645","1951977","2019-01-11 05:07:41","1","609","<git><git-commit><git-rebase>","How to remove previous commits and keep the ones that are my changes?","<p>I have a single branch (called <code>my-working-branch</code>) that I worked on that have several commits of my changes. When I committed and push my changes to <code>master</code>, thus created a pull request for the reviewer to merge, inside the pull request I saw my commits which I want to keep and merge to <code>master</code> along with so many other previously committed changes before mine that I've never changed and was committed by a different author. I am using Bitbucket and so some commits are greyed out with an ""M"" assuming meaning that commit was merged in master already and some without an ""M"" and isn't greyed out assuming not merged like my commits from <code>my-working-branch</code>. </p>

<p>Now that you understand my situation, what I want to do is keep the first four recent commits that I have in the pull request and remove all of the other commits within <code>my-working-branch</code> (no one else worked on this branch and made changes to it except me) that seems to be added in a previous date that shows within my pull request I created. I've looked at other stackoverflow questions regarding using the <code>rebase</code> command but since from what I understand it's a destructive command and would rewrite history. I would be fine using it if this only affects my local branch and the pull request to reflect that but I wanted to be absolutely sure this is the right direction to go in as in squashing all those previous commits and keep only the first recent four commits that I have changed which should keep changes to just those four commits and the rest not shown in the pull request to then merge to master.</p>

<p>What would be the appropriate action in this situation?</p>

<p>For example: (<code>d74981d0dcd..041727236cb</code> first four commits to keep and the rest after that I want to remove from the pull request)</p>

<p><a href=""https://i.stack.imgur.com/OCcWL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/OCcWL.png"" alt=""enter image description here""></a></p>
","0","1951977","0","0"
"72346917","17318133","2022-05-23 10:21:13","3","1453","<git><android-studio><git-commit>","How to delete a commit and get back changes in Android Studio?","<p>I did a commit in Android Studio but I want to make more changes but I also don't want to do another commit.</p>
<p>I can see my commit here <a href=""https://i.stack.imgur.com/iBcuC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iBcuC.png"" alt=""enter image description here"" /></a></p>
<p>What I want to do, is to get back my changes here and delete this commit without pushing it to Github.</p>
<p><a href=""https://i.stack.imgur.com/ebdof.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ebdof.png"" alt=""enter image description here"" /></a></p>
<p>Can someone help me with this issue?</p>
","1","17318133","",""
"72365370","1989579","2022-05-24 15:13:53","0","165","<git><jenkins><tags><git-commit><changelog>","git: get commits in order for changelog","<p>I am working on git following gitflow (with feature branches and hotfix).
Each commit is as follows &quot; [ticket ID]: message &quot;</p>
<p>With jenkins I would like to generate a changelog between 2 tags, but I don't know how to do this correctly.</p>
<p>If I do a <code>git log TagFrom...TagTo</code> it seems to order the commits by creation date this causes problems. The list of commits does not match how the changes have been released. However, the bitbucket website does show them in the correct order.</p>
<p>I have also tried git-changelog-command-line plugins but it seems to have the same issue.</p>
<p>What would be the correct way to get the changes between two tags working with this branch model.</p>
<p>The <code>git log --oneline</code> command seems to order them correctly.</p>
","0","1989579","",""
"72365887","14838638","2022-05-24 15:50:23","0","28","<git><github><git-commit><git-reset><git-revert>","How do I remove directories from an initial commit: push to GitHub fails","<p>I want to put a legacy code of mine on GitHub. In a foolish move, I selected the whole project (in PyCharm) to add to the initial commit; I forgot that this includes data and plot directories that are huge and exceed any file and repo size limit (8+ GB). I had hoped I could just remove the unnecessary files and directories later on, but:</p>
<p>The initial push to GitHub fails, and I seem to not be able to use <code>git revert</code>, <code>git reset</code> and other methods I found here, since there is no previous commit to go back to.</p>
<p>I don't want to risk my code, so I turn to you: how to I either</p>
<ol>
<li>remove the offending directories and the files therein <em>from the commit</em> but <strong>not from my disk</strong>, or</li>
<li>ditch this (local) repository and make a new one to connect to GitHub, where I do not include these directories from the get-go?</li>
</ol>
<p>I looked through many, many answers here, and I just don't seem to find one. Is it that obvious? Thank you all for your help! :)</p>
","1","14838638","",""
"72394965","10343374","2022-05-26 16:20:11","0","467","<git><powershell><github><git-commit>","GIT diff command working in powerShell with different options","<p>I am new to GIT commands and having tough time with it :(.
My requirement is to use GIT command in PowerShell and do some logic.
How to combine GIT diff with commitID and folder path?</p>
<p><strong>This works-</strong></p>
<pre><code>&gt;$(git diff --name-status HEAD~1..HEAD ROOT/subFolder)
</code></pre>
<p>output: <code>M   ROOT/subFolder/file.txt</code>            -----This is what I want but using commit id</p>
<p><strong>These commands don't work</strong></p>
<pre><code>&gt;$(git diff --name-status 5d658f9e ROOT/subFolder)       **with commit id**

&gt;$(git diff --name-status 5d658f9e..HEAD -- ROOT/subFolder)  **with commit id &amp; HEAD**

&gt;$(git diff --name-status HEAD --diff-filter=ADMR -- ROOT/subFolder) **with commit id**
</code></pre>
<p>why the 1st command only works and others don't work?</p>
","3","10343374","",""
"54195473","1670956","2019-01-15 08:53:20","1","56","<git><rebase><git-commit><git-filter-branch><git-rewrite-history>","How can I insert a commit at a specific history position and rewrite history for all paths?","<p>I want to do what's specifically asked on <a href=""https://stackoverflow.com/questions/32315156/how-to-inject-a-commit-between-some-two-arbitrary-commits-in-the-past"">this question</a> but I want to get it effective for all paths on the git repository, just like you achieve when you perform rewritings with <code>git filter-branch --all</code>.</p>

<p>Is that possible with any rebase or filter-branch technique or any third party tool?</p>
","3","1670956","0","0"
"54242893","3317808","2019-01-17 19:21:48","0","374","<git><sha1><git-commit>","SHA1 hash for every commit","<p><code>git commit -m ""edit S1 and add S2""</code></p>

<p>would assign a new 40 character SHA1 hash for that latest commit in a commit graph.</p>

<hr>

<p>1) Is SHA1 hash generator creating hash for string <code>""edit S1 and add S2""</code>?</p>

<p>2) If yes, does git author recommend a standard practice on content of this string(<code>""edit S1 and add S2""</code>)? Because there could be a chance to generate same hash value for using same string, for different commits...</p>
","5","3317808","",""
"54247021","3145141","2019-01-18 02:33:37","0","376","<git><atlassian-sourcetree><git-commit>","A ""Soft Reset"" done through Sourcetree / Unity actually lost SOME local changes... why?","<p>I right clicked on the latest, selected reset branch to this commit, and choose the ""soft, keep all local changes"" option. </p>

<p>I've lost some things, but it kept other things.<br>
So what exactly does a soft reset to commit do?</p>
","3","3145141","0","0"
"72454240","19184069","2022-05-31 21:19:03","-1","243","<git><github><push><git-commit><git-push>","Git pushing old commits from deleted files","<p>I keep trying to push a brand new repository and a brand new branch. When I do so, it pushes files and commits from weeks ago. These files were deleted a while ago. There's absolutely nothing in my working tree, my source control is empty. I'm not understanding how I can get this behavior to stop because it keeps happening. I search for things online, and I don't see anyone else that has this problem. Any suggestions???</p>
","2","19184069","",""
"54281360","9055634","2019-01-20 21:54:34","25","5554","<git><git-commit><git-tag><git-squash>","What happens to tags of squashed commits?","<p>If I have commit <code>A</code> tagged with tag e.g. <code>tag-A</code>, and then the next commit <code>B</code> tagged with <code>tag-B</code>; if I squash these 2 commits what happens to the tags? Will both be assigned to the squashed commit?</p>
","0","9055634","0","0"
"54282873","9340545","2019-01-21 02:38:55","1","146","<git><github><git-commit><git-push><github-for-mac>","git push linked to the wrong/with two accounts","<p>I am using a Laptop that they handed down to me at my internship, when I go to push, it was pushing with a different account. Even though I signed in and got authenticated when I pushed. (I also removed keychain password from mac)
<a href=""https://i.stack.imgur.com/TKK0v.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/TKK0v.png"" alt=""enter image description here""></a></p>

<p>As you can see the 'first' is my account, the others even though I signed in and got authenticated are not my github account, but has the same username.</p>

<p>I tried this method of committing after looking around</p>

<pre><code>git commit --author='name &lt;email&gt;' -m '...'
</code></pre>

<p>but this ended up causing this:
<a href=""https://i.stack.imgur.com/hluz2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hluz2.png"" alt=""enter image description here""></a></p>

<p>I then tried this command:</p>

<pre><code>git config --global --unset-all user.name
</code></pre>

<p>And when I go to push it pushed with this, the person that owned the laptop originally...
<a href=""https://i.stack.imgur.com/c1DyK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/c1DyK.png"" alt=""enter image description here""></a></p>
","0","9340545","",""
"54317749","241142","2019-01-22 23:06:27","2","521","<git><git-commit>","Skip past (full) staging area and commit file or patch directly?","<p>Imagine this scenario: you're working on a feature that requires touching lots of files, and you've got a lot of things staged, and a lot of things not staged (like debugging code, temporary comments for yourself to remember to do/undo certain things and not forget to add bits that you didn't yet have time to add), and then you see a simple one-line change that you must make, but which belongs in its own commit.</p>

<p>Is there any way to simply commit that without pulling everything out of the staging area that you've meticulously added, without stashing (and risking losing your careful selections of what to stage and what not to stage) and <em>just commit that one line</em>?</p>

<p>I realize that fiddling with <a href=""https://stackoverflow.com/q/28947201/241142"">multiple staging areas</a> would probably make this possible, but I'm hoping there is a simpler solution than that.  Some switch that lets me skip the staging area would be more convenient than mucking about with <code>GIT_INDEX_FILE</code> to have 2 of them.  </p>

<p>My ideal solution would be something sort of like this:</p>

<pre><code>git commit --skip-stage --patch ./app/models/whatever.rb
</code></pre>

<p>If this is <em>impossible</em>, then I will simply stash and use <code>--index</code> when I pop it back, and hope I didn't accidentally do something between stashing and popping that breaks the ability to cleanly restore the index.</p>

<p>Because I know someone will wonder ""if you know about <code>--index</code> with <code>git stash pop</code>, why are you asking this question?  Because it is as much about pushing the envelope of what I can do with Git as it is about solving a practical problem.  Just because one solution to a problem exists doesn't mean it is the best solution or that one should stop looking for alternatives.  That applies to all of life, not just Git.</p>
","1","241142","",""
"54325800","4242791","2019-01-23 11:05:52","1","5541","<git><azure><azure-devops><azure-pipelines><git-commit>","How enable/disable secret scanning in Azure/VSO","<p>in VSO, I have tried push the code without taking latest, when did that, my code got pushed locally. After pulling the latest code when i tried to push again to Central repository I am getting the below error.
I had credentials in few files, after removing it also I'm getting the same error.
Any help would be much appreciated, Thanks in Advance...!!!</p>
<blockquote>
<p>If these are valid credentials, even for non-production resources, you must remove them from Git’s branch history by resetting your branch or squashing all commits.
See <a href=""https://aka.ms/1escredscan"" rel=""nofollow noreferrer"">https://aka.ms/1escredscan</a> for instructions. Please report any false positives to 1ESSecTools@microsoft.com.</p>
</blockquote>
<blockquote>
<p>NOTE: It is not enough to remove the secrets and push another change. You must reset your branch according to the instructions.</p>
</blockquote>
<blockquote>
<p>If this is a false positive, you can bypass credential scanning (for this push alone) by running these commands, assuming that you have no staged changes:</p>
</blockquote>
<pre class=""lang-sh prettyprint-override""><code>git commit -m &quot;**DISABLE_SECRET_SCANNING**&quot; --allow-empty`
git push
</code></pre>
<blockquote>
<p>Alternatively, see <a href=""https://aka.ms/1escredscan"" rel=""nofollow noreferrer"">https://aka.ms/1escredscan</a> for instructions on how to use the hash values emitted above in a suppressions file to suppress false positives.)
failed to push some refs to 'https://DevRepository'</p>
</blockquote>
<blockquote>
<p>Error encountered while pushing to the remote repository: rejected Dev -&gt; Dev (VS403654: <strong>The push was rejected because it might contain credentials or other secrets.</strong></p>
</blockquote>
","5","4242791","0","0"
"72479693","13434526","2022-06-02 16:52:11","1","258","<git><rebase><git-commit>","Git rebase --onto squashed branch","<p>I need some help on how to use <code>git rebase --onto</code> to rebase a working branch effectively. I tried to follow this doc <a href=""https://womanonrails.com/git-rebase-onto"" rel=""nofollow noreferrer"">https://womanonrails.com/git-rebase-onto</a></p>
<h2>Context</h2>
<p>I branched <code>branch-B</code> from <code>branch-A</code>. In the meantime <code>branch-A</code> was merged into <code>origin/main</code> and his commits were squashed to <code>I</code>.</p>
<pre><code>Old situation                             Current situation
A---B---C---F---G---I (origin/main)       A---B---C---F---G---I (branch)
         \         /                               \
          D---E---H (branch-A)                      D---E---H---J---K (branch-B)
                  \                                 
                   J---K (branch-B)                 
</code></pre>
<h2>Expected result</h2>
<p>I want to delete commits <code>D</code>,<code>E</code>,<code>H</code> and rebase on <code>I</code></p>
<pre><code>Expected result                                   
A---B---C---F---G---I (branch)
                     \
                      J'---K' (branch-B)               
</code></pre>
<p>I don't know which commit I need to use on the third argument...</p>
<pre class=""lang-bash prettyprint-override""><code>git rebase --onto origin/main HERE
</code></pre>
<p>Thanks !</p>
","0","13434526","",""
"72481704","10370570","2022-06-02 19:59:37","1","777","<git><git-branch><git-commit><git-pull>","Will git pull command overwrite non-commit changes","<p>Git <code>pull</code> command will <code>fetch</code> + <code>merge</code> remote branch to local branch . And if there are merge conflict between commits , you can resolves it locally  .</p>
<p>But what if I never <code>commit</code> anything I changed locally and <code>pull</code> a remote updated branch ?</p>
<p>Will git ignores my local non-commit changes and straight off overwrite my local branch ?</p>
<p>Does this mean I should always <code>commit</code> before pulling to update local branch ?</p>
","1","10370570","",""
"54352602","635523","2019-01-24 17:47:08","3","5320","<git><githooks><git-commit><pre-commit-hook>","Find out staged files in git `pre-commit` hook when using `git commit -a`","<p>I'm using a <code>git</code> <code>pre-commit</code> hook to automatically format all of my staged files. I'm determining the staged files via <code>git diff --name-only --cached</code> and then call a script on those files.
This all works well in the standard use case, however it doesn't work when I commit via</p>

<pre><code>git commit -a ..
</code></pre>

<p>because the files are not yet staged.</p>

<p>Is there some way to:</p>

<ol>
<li><p>Run the <code>-a</code> effect (add files to staging area) before the <code>pre-commit</code> hook?</p></li>
<li><p>Find out that the pre-commit runs in a <code>-a</code> commit?</p></li>
</ol>

<p>There must be a way to handle this.</p>
","0","635523","0","0"
"72489963","12489662","2022-06-03 12:58:40","-1","734","<git><github><gitlab><git-commit>","Forgot to commit the changes in git after adding them and directly pushed into the branch","<p>I mistakely pushed the changes in a branch instead of committing them. I noticed that it was pushed successfully( git doesnot give any error message if we forget to commit). Now I do not get those changes neither in local, nor in git. They are lost somewhere . How can I get my uncommitted changes back?</p>
<p>Everyone ask/reply for the problems regarding committed changes and not pushed changes, but I could not see questions/replies of uncommitted and pushed changes.</p>
<p><a href=""https://i.stack.imgur.com/RwwgO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RwwgO.png"" alt=""enter image description here"" /></a></p>
","7","12489662","",""
"54439364","8783685","2019-01-30 11:17:56","0","177","<gitlab><git-commit>","Issue with committing project in Gitlab","<p>I created a new xamarin forms project in Visual Studio(<strong>Not a new one, took a copy of my old project</strong>) and tried to commit the entire project to Gitlab. For that, I created a new project in <code>Gitlab</code> and enter the following commands.</p>

<pre><code>cd project folder
git init
git remote add origin My project remote
git add .
git commit -m ""Initial commit""
git push -u origin master
</code></pre>

<p><strong>But when I push the new project, it gets committed to my old project</strong>. I have given the new project remote but it gets pushed to the old one(<strong>New project is a copy of old one</strong>). </p>

<p><strong>Is there anyone faced this type of issue from Gitlab? Is there any file from gitlab to be saved to the old project? Why my new project commit redirect to the old one?</strong></p>
","1","8783685","",""
"54443941","10894052","2019-01-30 15:24:10","-1","265","<git><git-commit>","when git create tree?","<p>I've got three files with me: </p>

<pre><code>git add . 
</code></pre>

<p>And </p>

<pre><code>git commit -m ""bla blah blah""
</code></pre>

<p>Unfortunately, I don't see one, git tree.
When git create tree? 
There is a rule for this?</p>

<p>with:</p>

<pre><code>$ git cat-file -p master^{tree}
</code></pre>

<p>i only see: </p>

<p>blobs</p>

<pre><code>[Ubuntu-1604-xenial-64-minimal]mars~/git29012019[0]&gt; git cat-file -p master^{tree}
100644 blob 39f7cb850446bb67a198a4df484aa627b4907be4    hallo.txt
100644 blob 7fcd1b9ac1bf7d3544297b177de51bb1fe4891dc    heute.txt
100644 blob d2606d4f699dafaf905b1645dcd04e767623622b    meins.txt
</code></pre>

<p>when is a tree created? 
when git create tree?
Thanks</p>
","4","10894052","",""
"54454455","726739","2019-01-31 06:17:03","0","1050","<ios><github><git-commit>","Xcode commit: Couldn't communicate with helper application","<p>I have tried to commit the code in GitHub repository, but I am getting the error:</p>

<blockquote>
  <p>Couldn’t communicate with a helper application.</p>
</blockquote>

<p>How to commit the code via terminal?</p>

<p>I'm using Xcode 10.</p>
","1","726739","",""
"72518820","5371505","2022-06-06 13:59:42","3","558","<commit><git-commit><commitlint>","What should be the first commit message using commitlint?","<p>If I am using @commitlint/config-conventional, what should be my first commit message using commmitlint? Is it feat: first commit or a build: first commit or a chore: first commit?</p>
","0","5371505","0","0"
"54481118","2455424","2019-02-01 14:05:23","1","986","<git-commit><git-push><git>","Update git branch after deleting a file from local system","<p>I have deleted a file in my local system. Now I would like to update the <strong>locale branch + remote branch</strong>. So that the file is removed from the remote branch as well.</p>

<p>I did</p>

<pre><code>git add -u
</code></pre>

<p>It deletes the removed file from the local branch but the file still stays in remote branch.</p>

<p>How can I delete the file from remote branch too?</p>
","1","2455424","",""
"75695408","7283848","2023-03-10 11:10:54","0","41","<git><git-commit>","Nested Git repositories: `commit` in sub-repository without affecting parent","<p>Edit: Looks like it works I do not know why it did not.</p>
<p>I wrote an application that interact with git repositories.</p>
<p>In order to have correct integration tests I generate a git repository from dummy sources.</p>
<p>The issue is that during those test I use <code>commit</code> and this affects the base repository.</p>
<p>How can I <code>commit</code> in sub-repository without <code>commit</code>ing to parent one ?</p>
<p>This is a small reproduction of my issue:</p>
<pre class=""lang-bash prettyprint-override""><code>$ mkdir /tmp/test-git
$ git -C /tmp/test-git init
$ mkdir /tmp/test-git/sub-git
$ git -C /tmp/test-git/sub-git init
$ touch /tmp/test-git/sub-git/file.txt
$ git -C /tmp/test-git/sub-git add .
$ git -C /tmp/test-git/sub-git commit --message &quot;Initial commit&quot;
$ git -C /tmp/test-git/sub-git log --oneline
2501e5f (HEAD -&gt; main) test
$ git -C /tmp/test-git log --oneline
2501e5f (HEAD -&gt; main) test # Expected: fatal: your current branch 'main' does not have any commits yet
</code></pre>
<p>I did check <a href=""https://git-scm.com/docs/git-commit"" rel=""nofollow noreferrer""><code>commit</code> documentation</a> and cannot seem to be able to find a specific flag to add that would avoid the commit in the parent repository.</p>
","2","7283848","",""
"36604689","6199937","2016-04-13 16:43:08","1","207","<git><git-commit><git-rewrite-history>","Removing multiple git commits from history","<p>I am working on a project with some classmates and we are using git for version control. One of the group members had is username set to something other than the user name for the git account he was using, so after making several commits, he did not show up as a contributor. In trying to fix this, he accidentally made a copy of every commit that was made, with his own user name has the author. </p>

<p>Is there any way to go through and delete these duplicates from the history without actually changing the state of the repo?</p>

<p><strong>Edit:</strong>
For example, suppose the repo's commit history is this: </p>

<pre>
""Updated readme"" - joesmith0x539 <br />
""Added UI framework"" - johnnybravo22
</pre>

<p>After the other contributor tried changing his user name from johnnybravo22 to let's say johnnyb32, the history became: </p>

<pre>
""Updated readme"" - joesmith0x539 <br />
""Updated readme"" - johnnyb32 <br />
""Added UI framework"" - johnnybravo22 <br />
""Added UI framework"" - johnnyb32 
</pre>

<p>I now want to delete all of the unnecessary duplicates he made.</p>
","0","6199937","",""
"73747745","11541268","2022-09-16 16:19:33","0","132","<git><git-commit><git-filter-branch><git-cherry-pick><git-filter-repo>","How do I change the author and author email for multiple commits?","<p>This was a problem I wanted to solve. When I searched up this question, I saw answers using <code>git filter-branch</code> and <code>git filter-repo</code>.</p>
<p>I can say with 100% confidence that <code>git filter-branch</code> is too slow and I don't like that it can change the same commit in multiple branches. Not a useful method.</p>
<p>Next is <code>git filter-repo</code>. It seems like a good solution but I'm using Ubuntu 20.04 LTS which doesn't seem to be supported. I would need to spend a little time to update to 22.04 LTS. So only useful on supported distros and versions.</p>
<p>Now here is my answer:</p>
<pre><code>initialCommit=$(git log original-branch --format=format:&quot;%h&quot; | tail -1)
readarray -t commitsArray &lt; &lt;(git log original-branch --author=&quot;Original Author &lt;originalauthor@email.com&gt;&quot; --format=format:&quot;%h&quot;)
startCommitIndex=$((&quot;${#commitsArray[@]}&quot;-1))

git checkout -b new-branch &quot;$initialCommit&quot;
if [[ &quot;$initialCommit&quot; == &quot;${commitsArray[$startCommitIndex]}&quot; ]]; then
    git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;
    startCommitIndex=$(($startCommitIndex - 1))
fi
for (( commitIndex=$startCommitIndex; commitIndex &gt;= 0; commitIndex-- )); do
    git cherry-pick &quot;${commitsArray[$commitIndex]}&quot;
    git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;
done
</code></pre>
<p>We learned that <code>git commit --amend --author &quot;New Author &lt;newauthor@email.com&gt;&quot;</code> <a href=""https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-a-single-commit/43231587#43231587"">modifies the latest commit</a>, also known as the HEAD commit (<code>git log -1 --format=format:&quot;%h&quot;</code>).</p>
<p>Regarding <code>--format=format:&quot;%h&quot;</code>, we can retrieve a commit's hash in two ways:</p>
<ol>
<li><code>--format=format:&quot;%H&quot;</code>: A long hash. Retrieves the full hash of the commit (40 characters long).</li>
<li><code>--format=format:&quot;%h&quot;</code>: A shortened version of the hash that uses the first 7 to 9 characters (<a href=""https://stackoverflow.com/questions/43665836/in-git-what-is-the-difference-between-long-and-short-hashes#comment117653573_43666045"">length varies depending on history length</a>). Git is smart enough to figure out what commit is meant with this hash.</li>
</ol>
<p>The <code>git cherry-pick</code> command allows you to pick a commit's hash from any branch and drop the contents of that commit into another branch. This creates a new commit hash in the branch with those contents, which becomes a HEAD commit.</p>
<p><code>git checkout -b new-branch &quot;$initialCommit&quot;</code> creates a new branch with <code>$initialCommit</code> becoming the HEAD commit.</p>
<p>In this way, we are able to change the author and author email for multiple commits (that we found with <code>readarray -t commitsArray &lt; &lt;(git log original-branch --author=&quot;Original Author &lt;originalauthor@email.com&gt;&quot; --format=format:&quot;%h&quot;)</code>).</p>
<p>Afterwards, we could choose to remove our original branch (<code>git branch -D original-branch</code>) and rename our new branch (<code>git branch -m new-branch original-branch</code>). Then if satisfied later decide to push our changes to GitHub, GitLab, or wherever your git project is stored in remotely. Done!</p>
","7","11541268","",""
"73750593","8943516","2022-09-16 21:48:50","0","52","<github><git-merge><git-commit><pull-request>","Creating a pull request rule on GitHub that prevents me to accidentally push new code to main branch","<p>I am working on a repo where I am the owner and only author in it.</p>
<p>I want to have in my repo the same behavior as I would when working with a team that protects my branch from direct commits as they must go through a Pull Request. The reason for doing so is to protect from my own mistakes as I sometimes go back to main branch and accidentally push code to it. I want only code that passed through a Pull Request to be able to be merged to main branch.</p>
<p>In order to achieve such behavior I added the following rule to my main branch -</p>
<p><a href=""https://i.stack.imgur.com/F9vr0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/F9vr0.png"" alt=""enter image description here"" /></a></p>
<p>Which is almost what I need, expect that I am locked without the ability to approve my PR's as there is a message I get saying <code>authors of the PR can't approve their PR's</code> - a logical error nonetheless, but if I am working alone in the repo this is not what I am looking for.</p>
<p>How can I achieve what I am looking for?</p>
","0","8943516","",""
"56579101","","2019-06-13 11:07:04","0","83","<git><github><git-branch><git-commit>","Github commiting in the same commit that prevousely commited","<p>I want to keep same commit with another change like.</p>

<p>Few hours ago, i commuted a change and push to my origin like.</p>

<pre><code>git commit -m ""header removed""
</code></pre>

<p>and later i push it to remote origin like:</p>

<pre><code>git push origin mybranhname
</code></pre>

<p>After pushing i realized i need to change something again and i changing some code again.</p>

<p>Now i want to push the change in the same commit, is it possible?</p>

<p>I mean, i dont want to commit again with the new named commit. I want to commit with the <code>header removed</code></p>

<p>I dont want to open new commit. can i do it?</p>
","1","","",""
"73775554","13268464","2022-09-19 15:05:27","0","44","<github><visual-studio-code><timestamp><git-commit><gitlens>","Why are commit timestamps not showing on certain files in VScode and showing on others?","<p>Within the same directory where I have various study materials and files, I noticed that some of the files will accurately show when the last commit was made pertaining to that while and yet other files, even as I make a modification and a commit, they wont show a timestamp of that commit when I go on that line. Images below to show what I mean, one shows the timestamp correctly, the other is completely blank, same repo, same directory. I think this has to do with Gitlens. I also noticed Gitlens, even though I have the extension installed, when I switch to the files without timestamps, the Gitlens icons on the top right navbar dissappear. On files with the timestamps they appear. Why is Gitlens inactive in certain files and active in others?</p>
<p>Commit timestamp correctly shown here:
<a href=""https://i.stack.imgur.com/y4Yf9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/y4Yf9.png"" alt=""Timestamp Correctly shown"" /></a></p>
<p>Commit timestamp missing here:
<a href=""https://i.stack.imgur.com/CFxca.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/CFxca.png"" alt=""Missing commit timestamp"" /></a></p>
","1","13268464","",""
"56600553","6910294","2019-06-14 14:49:19","7","1081","<github><git-commit><git-squash>","Does GitHub retain commit history for squash merged PRs indefinitely?","<p>Our team is deciding on what merge strategy to use in our repo. We're looking at squash merges for the ability to have a clean commit history. However, we want to be able to review intermediate changes if we want more detail on a particular commit - in particular, the intermediate commits on the PR that were squashed.</p>

<p>Normally, squashing and deleting the branch will remove all references to those intermediate commits in the reflog and git garbage collection could clean those up. However, in looking at other repos, it seems like GitHub still retains those intermediate commits.</p>

<p>What we're looking for is confirmation that GitHub is retaining those commit IDs in the reflog and that we're guaranteed they'll stick around. Alternatively, information telling us that's not guaranteed is also good.</p>
","0","6910294","0","0"
"56605624","7595643","2019-06-14 21:59:48","2","72","<git><github><commit><git-commit>","Not to commit previous commits, I want just to add a commit that takes all the other changes made on the other branch I merged?","<p>I want to get the changes but not to publish all those commits that I did on the test branch ... What I want is that after merging, taking those changes and committing (once) on the master, not to publish all those commits.</p>

<p>Thanks</p>

<p>I haven't tried anything because I want to be sure about what to do. Then I will push again.</p>

<pre><code>git merge test
git status
</code></pre>

<p>Your branch is ahead of 'origin/master' by 6 commits</p>
","0","7595643","",""
"73808695","11434929","2022-09-22 02:24:36","0","23","<python><python-3.x><github><git-commit><gitpython>","accessing file content for specific commit sha","<p>I have two types of files (xml and java)
I tried to  access a specific file to a specific commit SHA , and after that, I want to print the content of this file from line X to line Z  For example, I have this ** java file path:**</p>
<p>&quot;\Users\mine\Desktop\studied\projects\2012-code\2012Robot\src\edu\wpi\first\wpilibj\templates\OI.java&quot;</p>
<p>and the <strong>SHA commit</strong> : 7680ba96304317a2c52ae3a96cb83019698a07a9</p>
<p>and I want to print only <strong>lines</strong> from 52 to 54 in that file</p>
<p>my code was :</p>
<pre><code>    repo = Repo(r'C:\Users\mine\Desktop\studied\projects\2012-code')

    commit =repo.commit('7680ba96304317a2c52ae3a96cb83019698a07a9')
    targetfile = commit.tree / 'OI.java'
    data = targetfile.data_stream.read()
</code></pre>
<p>it did not work and I have this error : KeyError: &quot;Blob or Tree named 'OI.java' not found&quot;
however, I am sure that file is on my local machine. also, I tried to put the file path and it did not work</p>
<p>Any thought?</p>
","1","11434929","",""
"73870420","19734255","2022-09-27 15:51:45","0","123","<git><git-merge><git-commit>","Git manually specify parent commits","<p>To merge two divergent branches (say I'm on <code>master</code> and want to merge <code>topic</code>), sometimes it's easier to manually merge files by inspecting <code>git diff</code> and applying the changes manually (or parts of them automatically using <code>git apply</code>). However, this just changes the working directory files, so my commit will just have current <code>master</code> as a parent commit, rather than appearing as a merge commit between <code>master</code> and <code>topic</code>. Is there a way to manually specify parent commits to <code>git commit</code>?</p>
","1","19734255","",""
"73881379","15221439","2022-09-28 12:24:17","-1","103","<git><github><git-commit>","Github Contributions do not show","<p>I push my commits by git bash (Windows11) everyday, but they are not show as contribution on my github.</p>
<p>I've read several artilces like <a href=""https://dev.to/duhbhavesh/why-my-commits-aren-t-showing-up-on-github-contributions-graph-3a2h"" rel=""nofollow noreferrer"">this</a>. I've checked my email address and it is already added in git.</p>
<p>I have no idea what is the problem, and I really hope my commits in the past days can show as conribution.</p>
<p>Hope anyone can help. Thank you very much!</p>
<p>My repository is <a href=""https://github.com/frankychhoa/codeeveryday"" rel=""nofollow noreferrer"">https://github.com/frankychhoa/codeeveryday</a></p>
","0","15221439","",""
"73900523","20123776","2022-09-29 19:08:00","-1","84","<git><github><git-commit>","Git - Github bring back changes from commit","<p>I have commited some changes from feature branch onto remote master branch and opened pull request. But i have forgot to fix phpcs violations (running code sniffer) for which i need the difference between when there were no changes in a file/commit and changes i made - I need to get back into the point where i was before commiting - to have all the rows changed saying &quot;modified&quot; and i need to do that for 3 commits of that feature branch. Would someone please help me how to achieve that, or how is it called?</p>
","12","20123776","",""
"73905088","9055634","2022-09-30 07:02:16","0","375","<gitlab><gitlab-ci><git-commit><merge-request>","MR squash is removing commit message details","<p>I was working in a branch and my commit had a very detailed message. The format was:</p>
<pre><code>Title

Details (multiple lines). 
</code></pre>
<p>I created an MR but when the MR was merged I can see the merge commit and my new commit with only the <code>Title</code>. The details are gone. If I do <code>git show $sha</code> on either the <code>$sha</code> of my local branch or do <code>git log</code> on the remote branch I can see the full message.<br />
But in master I can only see the title.<br />
How can this be happening? Is there some Gitlab configuration that could be causing this?</p>
<p><strong>Update after @Ôrel comment:</strong><br />
The squash commits was preselected.<br />
The branch had 2 commits with the same format i.e. Title/Detailed message.<br />
The merged (squashed) commit has the title of one commits (not the one that was top of the branch) and the details removed. How is the commit message selected in this kind of squash/merge?</p>
","7","9055634","",""
"73931212","3534593","2022-10-03 04:49:53","0","63","<git><git-merge><git-commit>","Couldn't save backup of <filename> : git commit error during merge","<p>I am trying to <strong>merge</strong> branch <strong>p-jira-fix</strong> changes into branch <strong>p-main</strong> changes. Branch <strong>p-jira-fix</strong> has renamed one file from <strong>UserBase to EntityBase</strong> and somehow when I am running the <strong>git commit</strong> command, I am facing the following error regarding that file :</p>
<p>Merge command I started with :</p>
<pre><code>git checkout p-main
git pull origin p-jira-fix
</code></pre>
<pre><code>cp: app/yyy/src/main/java/com/xxx/ces/domain/UserBase.java: No such file or directory
Couldn't save backup of app/yyy/src/main/java/com/xxx/ces/domain/UserBase.java
</code></pre>
<p>I could not find this exact error on sof or git related posts. Has anyone faced this OR resolved it?</p>
","3","3534593","",""
"73961567","20122390","2022-10-05 14:02:46","2","4407","<git><visual-studio-code><graph><git-branch><git-commit>","How to use git graph in vs code?","<p>I am doing a git course and the git graph extension has been recommended to me.
To my colleagues, the extension shows a graph with the different branches as follows:</p>
<p><a href=""https://i.stack.imgur.com/zHj0r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zHj0r.png"" alt=""git_grapg1"" /></a></p>
<p>But to me all the branches appear in the same line:</p>
<p><a href=""https://i.stack.imgur.com/1zwy3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1zwy3.png"" alt=""git_graph2"" /></a></p>
<p>I don't understand what I'm doing wrong or how to use the extension. Thank you very much.</p>
","4","20122390","",""
"56786848","4512005","2019-06-27 08:20:38","2","115","<git><git-commit>","Overwrite all local files that are not committed","<p>I made some changes to a project and commits them.</p>

<p>I did <code>git pull</code> to update my local branch before pushing. </p>

<p>The git bash shows:</p>

<pre><code>The following untracked working tree files would be overwritten by merge:
&lt;list of files&gt;
</code></pre>

<p>The command <code>git pull -f</code> had the same effect. I dont what to do <code>git reset --hard origin/&lt;branch_name&gt;</code> because, to my knowledge that will ""delete"" my commits.</p>

<p>How do I overwrite all local files <em>that are not committed</em> and <em>keep the commits</em> to then be able to push them?</p>
","2","4512005","0","0"
"56794059","6730526","2019-06-27 15:10:26","0","48","<git><git-commit><merge-conflict-resolution>","Badly merged commits","<p>I've had git behaviour that I quite didnt understand:</p>

<p>I have production branch B1.</p>

<pre><code>git checkout B1
git checkout -b B2
</code></pre>

<p>I work on a solution, merge it with B1 localy with</p>

<pre><code>git checkout B2
git rebase B1
git checkout B1
git merge B2
git branch -d B2
</code></pre>

<p>Then I do the same routine - create branch B3 from B1, work on B3, and merge with B1. Now multiple merge conflicts occured (literaly between every single commit of B2). So I rebased and merged them same as I did with B2.
Code pulled and pushed gratefully, git status showed no commits behind on B1 or B3.</p>

<p>Later, when my colleague pulled B1, he faced all those merge conflicts all over again. A total nightmare, that I though shouldn't happen.</p>

<p>Does anybody know how those merge conflicts could have been moved to remote without the commits that resolved them? I'd like to recall what (possibly terrible) mistake I've done not to repeat it again ^^</p>

<p>___edit
The story form console:</p>

<pre><code>git checkout -b B2
git add file1
git commit -m ""b2c1""
git rebase B1
git add file1
git commit -m ""b2c2""
git push
git rebase B1
git checkout B1
git pull
git checkout B2
git rebase B1
git add file1
git commit -m ""b2c3""
git rebase B1
git merge B1
git push B1
git checkout B1
git pull
git merge B2
git push
git branch --merged master
git branch -d B2
git checkout -b B3
git pull
git add file1
git commit -m ""b3c1""
git push
git rebase -i HEAD~5
git push -f
git add file1
git commit -m ""b3c2""
git add file2 file3 file4
git commit -m ""b3c3""
git stash
git pull
git push 
git checkout B3
git stash push
git stash save
git stash apply
git checkout B3
git rebase B1
git checkout -- .
git checkout B1
git merge B3
git push
</code></pre>

<p>something along those lines, I had to sqeeze many more line cause it otherwise would be a 200/400 line log.</p>
","4","6730526","",""
"56798837","1223975","2019-06-27 21:48:52","2","585","<git><git-commit><git-log><git-hash>","Determine branch name from git commit","<p>I assume that a git commit hash (5743a31610d38064af35573b91e3bbe39d808b9b) will always map to 0 or 1 git branches? Is there a reliable way to trace what the branch name was when the git commit was created? From what I know a git branch is a pointer to a commit, given a commit can we reliably point to a branch (if the branch still exists)?</p>

<p>Context: I am creating some devops deployment change-logs so we can keep track of what we changed - I am wondering if it's worthwhile to name the git branches that were released, or just put the git commit hash in there, and we can reverse lookup the branch name if we really want to?</p>
","1","1223975","",""
"74004625","12930962","2022-10-09 12:08:31","0","16","<git><github><github-api><git-commit>","commit for branch exists but somewhow is not being recognised as such","<p>If I for example would execute the request for commit ff1f9f81d4b70720b345377b26263376dd741235 with the request
<code>https://api.github.com/repos/vaadin/platform/commits/ff1f9f81d4b70720b345377b26263376dd741235</code> then everything would work perfectly.</p>
<p>However, this commit<a href=""https://github.com/vaadin/platform/commit/ff1f9f81d4b70720b345377b26263376dd741235"" rel=""nofollow noreferrer""> is not included on their website</a> and therefore I would get the warning:</p>
<blockquote>
<p>This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.</p>
</blockquote>
<p>Also if I search this commit with git show when I clone the repo, then I would get an error.</p>
<p>Can someone explain to me the reason?</p>
","3","12930962","",""
"74011908","19618943","2022-10-10 08:12:28","0","316","<git><docker><git-commit>","Git commit returns error docker/error response from deamon on windows","<p>I am running docker for my Laravel application (BE). I have made a simple update on readmeme.md file and tried to commit &amp; push this file to git.</p>
<p>When I try to commit it this is what I get.</p>
<p><code>&gt; git -c user.useConfigOnly=true commit --quiet --allow-empty-message --file - docker: Error response from daemon: the working directory 'C:/Program Files/Git/var/www/api' is invalid, it needs to be an absolute path. See 'docker run --help'.</code></p>
<p>Specs:</p>
<ul>
<li>Git: git version 2.38.0.windows.1</li>
<li>Docker version 20.10.17, build 100c701</li>
<li>My backend is Laravel</li>
</ul>
","7","19618943","",""
"74042476","17987026","2022-10-12 13:15:37","1","36","<git><git-branch><git-commit>","How to get all the branches with a certain head in git","<p>There is a commit with commit hash = c1</p>
<p><strong>How to list all the branches that have their head &quot;pointing&quot; (or equal) to c1 ?</strong></p>
<p>Aware of how to get the branches that contain a commit, but not able to figure out the above.</p>
","0","17987026","",""
"74049891","10389571","2022-10-13 02:31:05","0","268","<git><git-commit><conventional-commits>","Semantic commit type if only changed the error message","<p>What is the best practice of semantic commit type if I just improved the output message to make it clearly?</p>
<p><strong>Example:</strong></p>
<p>Original output message is: <code>console.log('You are wrong')</code></p>
<p>and I've changed into: <code>console.log('You are wrong because &quot;a&quot; is undefined.')</code></p>
<hr />
<p>I don't think <strong>feat</strong> or <strong>fix</strong> is proper to use, does <strong>refactor</strong> would be an answer?</p>
","2","10389571","",""
"74054205","4977082","2022-10-13 10:26:23","0","116","<azure><git-commit><fastlane><appcenter>","Generate release_note.md when distributing by fastlane on app center","<ul>
<li>I have one repo at azure, and now using fastlane at terminal to build and distribute app to AppCenter.</li>
<li>Can I excute fastlane command to generate <code>release_note.md</code>, the file will contains branch name, and last git commits.</li>
</ul>
<p>Thanks for your support!</p>
","4","4977082","",""
"74060906","2716948","2022-10-13 19:32:50","-1","118","<git><git-commit><git-log>","Is there a command to get the number of lines of code added, deleted, modified for a git commit?","<p>I'm using below command</p>
<p><code>git log --pretty=format:&quot;%h,%cn,%cs&quot;</code> which gives me the commit ID, committer name, and commit date. But what I need is the number of lines added/modified/deleted for every commit ID.</p>
<p>FYI: I'm not looking for difference between the commits.</p>
","0","2716948","",""
"74074491","652904","2022-10-14 20:20:53","0","40","<git><git-commit>","Why not `--file` on fixup commits?","<p>lets say I have a huge PR and I want to do some automatic rewrite of some of the commit messages.</p>
<p>Pretty sure there is a way to automate git-rebase to run commands for every commit (for example to sign/re-sign) but I like the <code>git commit --fixup amend:hash</code> model as I would be able to review and drop if i don't like the result (without deep reflog dive)</p>
<p>when I try <code>-F</code>/<code>--file</code> with <code>--fixup</code> I get this error:</p>
<pre><code>$ git commit --fixup amend:21d53a765cf8925ffcdae9199dde4e96760be974 -F /tmp/z
fatal: options '-F' and '--fixup' cannot be used together
</code></pre>
<p>Now I get it - the first line needs to be <code>amend! &lt;exact-original-first-line&gt;</code>
and sure I can write a script and set <code>GIT_EDITOR</code> to that script (and what I intend to try) but -is there no cleaner way?</p>
","4","652904","",""
"74088146","16187390","2022-10-16 15:01:01","-1","89","<git><github><branch><commit><git-commit>","nothing to commit, working directory clean, however with changes commited","<pre><code>$ git status
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean
</code></pre>
<p>This is what I get, when I try to track the changes on README.md file.</p>
","4","16187390","",""
"74094871","11813885","2022-10-17 09:04:01","3","389","<git><git-commit><conventional-commits>","What would be a good commit type when adding more details to log statements (using Conventional Commits)","<p>I added more detail to a log statement eg</p>
<p>from <code>logger.error('An error occurred')</code> to <code>logger.error('An error occurred for ${client.id})</code></p>
<p>what would be a good commit type to use under <a href=""https://www.conventionalcommits.org/en/v1.0.0/"" rel=""nofollow noreferrer"">Conventional Commits</a>?</p>
","0","11813885","",""
"74134415","15420483","2022-10-20 04:22:52","1","70","<terminal><git-commit><git-repo><git-untracked>","Git Repository - Error Code 128 when merging two pdfs","<p>After I committed two PDFs using &quot;Git add - a&quot;, it led to my next problem, Error 128.</p>
<p>I am very new to this Get Repository thing. I am not sure how to fix it with the Go Daddy Terminal. Any help is sincerely appreciated.</p>
<p><a href=""https://i.stack.imgur.com/vy5hK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/vy5hK.png"" alt=""error 128 screenshot"" /></a></p>
","0","15420483","",""
"74133020","19751436","2022-10-19 23:44:40","0","48","<git><security><github><permissions><git-commit>","Switching between Git users on the same machine (works), but why do both have access to the other's repository?","<p>I have two GitHub users accounts (private and work). Call them <strong>Allison</strong> and <strong>Bob</strong>.</p>
<p>I have a Bash script. Call it: <strong>allison_git</strong> that does:</p>
<pre><code>ssh-add -D
eval $(ssh-agent -s)
git config --global credential.helper wincred
git config --global credential.useHttpPath true
git config --global user.name Allison
git config --global user.email allison@gmail.com
ssh-add ~/.ssh/allison_git_rsa
ssh -T git@github.com
</code></pre>
<p>If all goes well for Allison, I get:</p>
<blockquote>
<p>Hi Allison! You've successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>So I can switch between the users with the script that I have. Great.</p>
<p>However... say that user Bob is for my work and Allison is for my private and I'm working on my work repository, but forgot to switch to Bob. <strong>My commit would apply as user Allison and not Bob.</strong></p>
<p>I'm not sure why (I guess because they're on the same computer?!) How can I restrict user Allison to use Bobs repository and reverse? Is my approach to all this with the Bash <strong>allison_git / bob_git</strong> causing all this?</p>
<p>Note: I added Bob's public key (<em>bob_git_rsa</em>) on his GitHub account <code>(settings--&gt;SSH and PGP Keys)</code>, and the same for Allison (allison_git_rsa). The keys are different.</p>
","2","19751436","",""
"74153159","4671300","2022-10-21 11:47:37","1","137","<git><vim><git-commit><git-diff>","How to get normal diff colors in Vim on verbose git commits?","<p>When running the normal <code>git diff</code> I get the intuitive colors that I'm used to:</p>
<p><a href=""https://i.stack.imgur.com/kiMjF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kiMjF.png"" alt=""git diff output with red/green/white font color."" /></a></p>
<p>Red for deleted, green for added, white for unchanged.</p>
<p>But when I run <code>git commit -v</code>, the included diff that opens in the editor has weird colors that I'm not used to, and so parsing the meaning of the diff is more difficult:</p>
<p><a href=""https://i.stack.imgur.com/u3tRg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/u3tRg.png"" alt=""git commit -v output with unhelpful colors."" /></a></p>
<p>White/gray for deleted, cyan for added, white for unchanged? What is that?</p>
<p>What can I do so that the diff inside the editor on verbose commits has the same colors as when running <code>git diff</code> directly?</p>
<p>I am using MacOS and vim as editor (<code>git config --global core.editor /usr/bin/vim</code>)</p>
","0","4671300","",""
"74160782","10561037","2022-10-22 02:59:51","0","30","<git><bitbucket><git-commit><git-push><git-pull>","Lost Changes after rolling back the last push on git","<p>I rolled back my last push from git using the following commands:</p>
<pre><code>git reset --hard HEAD@{1}
git push -f
git reset --hard HEAD@{1}
</code></pre>
<p>The push was successfully deleted but I lost all the changes from file and the rest of the files from visual studio.
How can I get those changes back?</p>
","5","10561037","",""
"56942881","1472831","2019-07-08 21:40:00","0","113","<git><github><git-commit><git-push><git-rm>","GitHub mistakenly deleted file - multiple branches committed at different times. How to handle?","<p>The scenario below details where there was a deleted file on a remote git repo mistakenly.  If you scroll through the commits below, the problem really came up in <code>COMMIT 4</code> and actually in terms of whether it was unexpected/expected, I wonder if there is a common way to remedy this. It's best to avoid having unwanted files in a branch altogether obviously, but when run into a situation like in <code>COMMIT 4</code>, but my question is what should be done? </p>

<pre><code>COMMIT 1 (18 days ago): created on local repo file &lt;code1.java&gt; on branch [code1]
                        and pushed to remote branch [code1] for initial commit 
                        of the file

COMMIT 2 (14 days ago): changed a variable in the file &lt;code1.java&gt; on branch [code1] 
                        and pushed to remote branch and created PR 

COMMIT 3: (7 days ago): created on local repo the file &lt;code2.java&gt; on branch [code2]
                        and pushed to remote branch [code2] for initial commit 

COMMIT 4: (6 days ago): **noticed that on [code2] branch I somehow had checked in 
                        &lt;code1.java&gt; with commit 3** so I deleted the file &lt;code1.java&gt; 
                        from branch [code2] and pushed to remote branch [code2] 
                        and did a PR for [code2]

COMMIT 5: (5 days ago): changed formatting on file &lt;code2.java&gt; on branch [code2] 

COMMIT 6: (4 days ago): PR reviewer accepted changes to &lt;code1.java&gt;
                        and merged branch [code1] to master 

COMMIT 7: (3 days ago): PR reviewer accepted changes to &lt;code2.java&gt;
                        and merged branch [code2] to master 
</code></pre>

<p><strong>code1.java is gone now :( :( :(</strong>   </p>
","7","1472831","",""
"56963361","6751456","2019-07-10 04:20:32","1","1305","<git><git-branch><git-commit><git-clone>","checkout to first commit on the branch and clone the repository","<p>I am trying to clone the most recent state (commit), and the initial state of the branch, and compare repositories.</p>

<p>I have cloned the most recent commit.</p>

<p>How can I clone the initial commit of the branch?</p>

<pre><code>56557bc   Project Created New Repo    2019‑04‑09
</code></pre>

<p>I have this string here which, I guess, is the commit hash : </p>

<pre><code>https://bitbucket.org/xya/react-native/commits/56557bc9621b7d6e510c51be337fbc5800b65838
</code></pre>

<p>Should I <code>git checkout 56557bc9621b7d6e510c51be337fbc5800b65838</code> and then clone the initial repository?</p>

<p>Does this hamper my recent commits?</p>
","2","6751456","0","0"
"74216830","19842690","2022-10-27 04:30:36","0","105","<git><github><commit><git-commit>","Will i loose the committed data if i change my PC","<p>I have some issue with my laptop. It will get replaced but i have data which is committed on all the branches and not pushed to remote. Will I loose all the branches data?</p>
","1","19842690","",""
"74233001","15901353","2022-10-28 09:05:55","0","35","<git><gitlab><git-commit>","Get commit of existant branch created from another one","<p>I'm creating a new branch through gitlab.</p>
<p><a href=""https://i.stack.imgur.com/i0XVB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i0XVB.png"" alt=""enter image description here"" /></a></p>
<p>How can i get the commit(hash code) information of branch pack that was used to create branch test through git commands/ gitlab API ?</p>
","5","15901353","",""
"74235408","786955","2022-10-28 12:26:54","0","23","<git><visual-studio><git-commit><revert><git-revert>","Reverting a few of the commits to the repository, while saving the commits that are being reverted in a separate branch to be applied later","<p>We are migrating our code to a higher version of the underlying framework (.NET 6). This has resulted in a few commits to the repository. It was recently decided that we are not yet ready for the upgrade. We have now been asked to possibly move all the commits to a separate branch and revert those from the main one for now. The commits moved to the separate branch would later be applied to the main when we are ready for the .NET 6 upgrade. What would be the best way to achieve this using Visual Studio (or any other tool)?</p>
<p>The commit tree looks like this:
<a href=""https://i.stack.imgur.com/RX2xi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/RX2xi.png"" alt=""enter image description here"" /></a></p>
<p>I need to move all the commits in pink (B, D, E, F, G, H, I and J) to a separate branch, and keep just the other ones (A and C).</p>
","0","786955","",""
"74255974","6025788","2022-10-30 19:08:28","0","38","<git><version-control><git-commit><git-add>","How to include untracked files in a command like `git commit --dry-run -a`","<p>I'd like to review that Git is going to properly detect files as moved, rather than deleted/added new - but there doesn't seem to be any way to preview the operation - it seems like my only option is <code>git add . --dry-run</code>, which then I can't see the resulting status of. Is there any other option?</p>
<p>I expected <code>git commit --dry-run .</code> would work, but it still excludes the untracked files.</p>
","1","6025788","",""
"74300535","20031500","2022-11-03 09:13:15","0","72","<git><github><diff><git-commit>","How to compare 2 commits inclusive using GitHub URL?","<p>I have 2 consecutive commits, e.g., <a href=""https://github.com/fmtlib/fmt/commit/fc07217d85e6dcec52878807d6bbd89a9d9156a5"" rel=""nofollow noreferrer"">fc07217</a> and <a href=""https://github.com/fmtlib/fmt/commit/cb7373b46960e4bb1dee5758d6782a6fea19713b"" rel=""nofollow noreferrer"">cb7373b</a>. I can view the changes made by the commit <code>fc07217</code> via <a href=""https://github.com/fmtlib/fmt/compare/cb7373b...fc07217"" rel=""nofollow noreferrer"">https://github.com/fmtlib/fmt/compare/cb7373b...fc07217</a>. How can I obtain the changes brought in by <strong>both</strong> of these commits? I.e., the result of <a href=""https://github.com/fmtlib/fmt/compare/795ed8a...fc07217"" rel=""nofollow noreferrer"">https://github.com/fmtlib/fmt/compare/795ed8a...fc07217</a>, but without the explicit mention of the <code>cb7373b</code>'s parent commit <code>795ed8a</code>.</p>
<p>It might be useful to check the commits between some commit and the repository initial commit <code>ec27d5d8</code> inclusive, because you can't specify the parent of the initial commit.</p>
<p><a href=""https://docs.github.com/en/pull-requests/committing-changes-to-your-project/viewing-and-comparing-commits/comparing-commits#comparing-commits"" rel=""nofollow noreferrer"">Relevant doc</a> doesn't mention this possibility.</p>
","9","20031500","",""
"74307021","12930962","2022-11-03 17:08:54","1","29","<git><github><git-commit>","How to get modified lines for renamed file in a commit with git","<p>I cannot find a git command where I would get the diff for a renamed file in a commit correctly. So lets say we have a look at the repo <a href=""https://github.com/pypa/pipenv"" rel=""nofollow noreferrer"">pypa/pipenv</a> and the commit <code>d0423ac8a0bdf3454f165eb9871f7b9327f390cb</code>. If we run the following command on our cloned repo:
<code>git diff --stat d0423ac8a0bdf3454f165eb9871f7b9327f390cb~1 d0423ac8a0bdf3454f165eb9871f7b9327f390cb</code> one could see that the file <code>linux.py</code> got renamed to <code>_proc.py</code></p>
<p>Unfortunately when I would run <code>git show d0423ac8a0bdf3454f165eb9871f7b9327f390cb -- pipenv/vendor/shellingham/posix/_proc.py </code> the renamed file is treated like a new file and one does not see the true changes.</p>
","0","12930962","",""
"74314117","9055634","2022-11-04 08:28:09","-1","195","<git><version-control><git-commit>","Doing git commit --amend by mistake and easy fix","<p>I did a commit in my local branch.<br />
Then I realised that I committed a file by mistake.<br />
So I did:</p>
<pre><code>git reset --soft HEAD~1
git restore --staged filename.txt
</code></pre>
<p>Then by mistake I did <code>git commit --amend</code><br />
I realised that my changes would be merged to the previous commit so when the editor was opened I removed the messages but because I pressed save instead of quit my changes were merged to the previous commit.</p>
<p>Is there a way to fix the mistake or I need to do it manually? In case it helps the previous commit is a merge commit and <code>git show</code> does not show any code for that</p>
","1","9055634","",""
"57096295","5592767","2019-07-18 13:59:05","2","427","<git><git-commit>","Semantic commit type when replace images or texts?","<p>What semantic commit type is better to use, when I replace an image or text: feat, refactor or something else?</p>
","1","5592767","",""
"74349575","10864356","2022-11-07 16:10:18","-2","170","<git><git-commit><git-reset><git-untracked><git-track>","Git: how to reset untracked files?","<p>I made a commit, then changed some files in my project, then did <code>git reset --hard HEAD</code>. It said <code>untracked files</code> for all the files I had added. How do I resolve this so that those files are tracked and get reset along with the rest of the project?</p>
","4","10864356","",""
"57116791","11809309","2019-07-19 17:01:05","0","64","<java><git><intellij-idea><bitbucket><git-commit>","IntelliJ - Java files appear with extentions","<p>I have a problem with IntelliJ. I'm working on the Maven project and I use Bitbucket Git repository. Java files appear with their extensions. Also, when I make a change and try to commit, changes do not appear on the commit page.  I do not understand if it is about git repo or another thing. How can I solve that problem?</p>

<p><a href=""https://i.stack.imgur.com/DNPlC.png"" rel=""nofollow noreferrer"">image</a></p>

<p>Thanks. </p>
","6","11809309","",""
"57117617","616460","2019-07-19 18:02:45","0","1049","<git><language-agnostic><git-commit><git-push>","Remove a file from a previous unpushed commit","<p>I accidentally made a local commit containing an enormous (~2GB) file that I forgot to add to .gitignore. This commit also contains important changes to other files. I then made a few more unrelated local commits.</p>

<p>When I went to push, the push ultimately failed because of the file size and related issues, it was only then that I realized that I accidentally added that file.</p>

<p>Is there some way to go back and remove that file from that past commit (it's 4 commits ago and the whole series of commits remains unpushed), as if it never existed? I still want to keep the rest of the changes from the problematic commit.</p>
","0","616460","",""
"74380790","2195440","2022-11-09 20:08:32","0","20","<git><github><commit><git-commit><git-push>","Making commit in the past on GitHub?","<p>I have made commit in the past with the following git command:</p>
<pre><code>git commit --amend --date=&quot;$(date -v-60d)&quot;
</code></pre>
<p>The timestamp is coming up as expected in the git history. I have pushed my changes to GitHub.</p>
<p>But GitHub UI is not showing the timestamp correctly, and GitHub UI is showing commit is submitted just now.</p>
<p>What needs to be done to show commit change with expected date time in the past with GitHub?</p>
<ul>
<li>The top voted answer <code>git commit --date=&quot;10 day ago&quot; -m &quot;Your commit message&quot;</code> in the post  <a href=""https://stackoverflow.com/questions/3895453/how-do-i-make-a-git-commit-in-the-past"">How do I make a Git commit in the past?</a> does not work.</li>
</ul>
","1","2195440","",""
"74389498","368657","2022-11-10 13:06:32","0","27","<git><commit><git-commit>","In which cases does git automatically update the author (no flags)","<p>I wonder in which cases does git change the author of commits if no flags/commans to change the author are provided?</p>
<h3>Context</h3>
<p>I created some commits, created a merge request/pull request.
Some other person is responsible for managing all the rebasing and some merge conflicts, etc.</p>
<p>When we later were looking for some commits we saw that the author was changed to that second person. But i don't think they changed it deliberately.</p>
","3","368657","",""
"57153171","3703783","2019-07-22 20:17:47","1","2880","<git><git-merge><git-commit>","what does git reset HEAD filename do?","<p>I'm on branch-B and I'm trying to merge branch-A into branch-B, but I want to merge all changes except for just one file.  After some search, I found this solution: </p>

<pre><code>git merge --no-commit &lt;merge-branch&gt;
git reset HEAD myfile.txt
git checkout -- myfile.txt
git commit -m ""merged &lt;merge-branch&gt;""
</code></pre>

<p>I got really confused as to the second line: <code>git reset HEAD myfile.txt</code>;  What does this line do? How does it help to the goal of merging all except one file? </p>
","2","3703783","0","0"