Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"19649772","1321129","2013-10-29 04:39:38","54","34020","<git><github><git-branch><pull-request>","What is github 'compare & pull request'","<p>I am working on a <code>MeteorIntegration</code> (feature) branch that is published. I did a <code>git push</code> assuming the push was going to the checked-out branch <code>MeteorIntegration</code>: </p>

<p>And now I see the following on both <code>master</code> and <code>MeteorIntegration</code> branches. </p>

<p><img src=""https://i.stack.imgur.com/8jEby.png"" alt=""github snap""></p>

<p>I read github documentation: <a href=""https://help.github.com/articles/closing-a-pull-request"" rel=""noreferrer"">Closing a pull request</a> and <a href=""https://help.github.com/articles/tidying-up-pull-requests"" rel=""noreferrer"">Tidying up Pull Requests</a> but that didn't help, possibly because I am not dealing with a pull request here?</p>

<p><strong>How do I get rid of this <code>compare &amp; pull request</code>?</strong> </p>
","0","1321129","0","0"
"38574661","6027000","2016-07-25 18:08:19","0","36","<github><git-branch><git-push><git-pull><git-fork>","github forked repository: How to pull the changes from forkedrepo/branch to orignalrepo/<Create-new-branch>","<p>UserA Original Repository Creator:  No branches. Master only. <br>
UserB Forks the repository and makes some changes and creates a new branch and puts the changes into github.com/<strong>userB</strong>/repo-name/newbranch-name</p>

<p>How can userA ,</p>

<ol>
<li>pull the changes from github.com/<strong>userB</strong>/repo-name/newbranch-name
and   </li>
<li>put into a new branch with the same name as of userB ....that
    is, github.com/<strong>userA</strong>/repo-name/newbranch-name</li>
</ol>

<p><strong>Some info on current scenario</strong> <br>
UserB(forked user) is not available to push those changes - the question is not ""how can I get  to do something"" but ""how can I do something myself"" without requesting userB to push the changes to UserA (Original repo creator)
<br> In addition, UserA  doesnt want to merge this to MASTER. 
<br> UserA prefers to put these changes in a new branch. <strong><em>i.e.</em></strong> <strong>github.com/UserA/repo-name/{create-new-branch}</strong></p>
","0","6027000","",""
"38664421","5209224","2016-07-29 17:30:29","40","37258","<git><diff><git-branch><git-diff><working-directory>","How do I call git diff on the same file between 2 different local branches?","<p>Is there a way to check the difference between the working directory in my current branch against the working directory of another branch in a specific file? For example, if I'm working in branch A on file 1, I want to compare the difference with file 1 on branch B.</p>
","1","5209224","0","0"
"246275","25453","2008-10-29 09:58:30","63","20237","<git><git-branch>","Modified files in a git branch are spilling over into another branch","<p>I am working on a git repository with a master branch and another the topic branch. I have switched to topic branch and modified a file. Now, if I switched to the master branch, that same file is shown as modified.</p>
<p>For example:</p>
<p>git status in git-build branch:</p>
<pre><code># On branch git-build
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   cvsup_current
#
</code></pre>
<p>Switch to master branch</p>
<pre><code>[root@redbull builder_scripts (git-build)]# git co master
M       builder_scripts/cvsup_current
Switched to branch &quot;master&quot;
</code></pre>
<p>git status in master branch</p>
<pre><code>[root@redbull builder_scripts (master)]# git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   cvsup_current
#
</code></pre>
<p>Why is that the file is shown as modified in the master branch even though it was modified in git-build branch?</p>
<p>My understanding was that the branches are independent of each other and when I change from one branch to another the changes do not &quot;spill over&quot; from one branch to another. So I am obviously missing something here.</p>
<p>Has anyone got a clue stick?</p>
","1","25453","0","0"
"65336952","14842360","2020-12-17 08:20:25","1","344","<git><git-branch><git-checkout>","git checkout master returns error when switching from mybranch","<p>I was pushing code to <code>master</code> branch and switching to <code>mybranch</code> to fix bugs. Everything worked fine when using <code>$git checkout master</code> and <code>$git checkout mybranch</code>!</p>
<p>The problem is that I once typed <code>git checkout origin</code> instead of <code>git checkout master</code> when I wanted to switch from <code>mybranch</code> into <code>master</code>. Now, every time I want to return to <code>master</code> branch I get this error:</p>
<pre><code>error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>My question is: how can I get back to <code>master</code> branch using <code>$git checkout master</code> command?</p>
","1","14842360","0","0"
"76136334","21771064","2023-04-29 12:54:52","0","30","<git><github><git-branch><git-history>","Change git history and branch","<p>I have 2 branches which is created at the same time from master branch. Both has been merged to master after changes. Branch history look like below:</p>
<p><a href=""https://i.stack.imgur.com/ujNf8.png"" rel=""nofollow noreferrer"">My git structure</a></p>
<p>I want to change the structure so that Branch2 should be created from master that Branch 1 already merged. I want to change the structure to this:</p>
<p><a href=""https://i.stack.imgur.com/qKHZd.png"" rel=""nofollow noreferrer"">I want</a></p>
<p>Is it possible to change the git history from image 1 to image 2?</p>
","1","21771064","",""
"76214055","12138765","2023-05-09 23:53:50","0","10","<git><deployment><git-branch><fabric>","Fabric 2.7.1 how do I deploy a specific git branch","<p>I've hit a bit of a wall with fabric. I'm trying to deploy a specific branch to my server. I can deploy the main branch the normal way using the Terminal command</p>
<pre><code>fab dev www release
</code></pre>
<p>where dev is the server and www is the app. But it only releases the master branch. I need to deploy 'branch1' for example. How do I accomplish this?</p>
<p>Thanks in Advance!!!!</p>
","0","12138765","",""
"76258954","4451521","2023-05-16 02:13:37","-1","50","<git><git-branch><branching-and-merging>","git fetching and merging when origin and local and very different","<p>I am working with a team project.
There is this branch &quot;current_feature&quot; made by other developer.</p>
<p>So I did <code>git fetch origin current_feature</code> and then <code>git checkout current_feature</code>.</p>
<p>With that I got both the remote and local &quot;current_feature&quot; in the same commit.</p>
<p>Now this branch is separated from the main branch. They had a common commit in the past, but then diverged.</p>
<p>The problem started the next day. I don't know how but the developer made some changes and now <code>current_feature</code> is rebased over main.</p>
<p>So the situation is something like</p>
<p><a href=""https://i.stack.imgur.com/eBuig.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eBuig.png"" alt=""enter image description here"" /></a></p>
<p>My question is what should I do to have the local and remote current_feature in the same commit? I am afraid git merge would not do because it is not a fast forward merge. and I am bit hesitant of rebase since the local <code>current_feature</code> is over another branch called <code>other_branch</code>.
How can I have both local and remote current_feature in the same commit?</p>
","0","4451521","",""
"76364045","7798467","2023-05-30 10:49:24","-1","20","<git><git-branch><git-status>","Why does git clone not copy remote branch and give error message when git status? problem with upstream?","<p>I just created my own github page which is finalexam96.github.io</p>
<p>On Visual Studio Code, I did <code>git clone https://github.com/finalexam96/finalexam96.github.io.git </code></p>
<p>I created an index.html file committed everything and it worked. But when I try to check it out with  <code>git status</code>, it says</p>
<blockquote>
<p>On branch main
Your branch is based on 'origin/main', but the upstream is gone.
(use &quot;git branch --unset-upstream&quot; to fixup)</p>
</blockquote>
<blockquote>
<p>nothing to commit, working tree clean</p>
</blockquote>
<p>I tried to see if I have proper branches and typed <code>git branch</code> which is for local branch and it shows</p>
<blockquote>
<p>*main</p>
</blockquote>
<p>Then I tried <code>git branch -r</code>, but it showed nothing. so I believe the remote branch doesn't exist.</p>
<p>At this point, I didn't know what to do, so I used <code>git remote add origin https://github.com/finalexam96/finalexam96.github.io.git</code> but  it returns</p>
<blockquote>
<p>error: remote origin already exists</p>
</blockquote>
<p>So my remote branch exists but it won't show up when I try to see a list of remote branch.</p>
<p>I want to see <code>#of commits ahead</code> when I use <code>git status</code></p>
<p>What should I do to make this work?</p>
","1","7798467","",""
"76426089","16249564","2023-06-07 18:21:14","-1","10","<git><svn><git-branch><git-svn><git-push>","I have converted a Subversion(svn) repo to git repo. I want to push a branch from it to a already created branch in git","<ol>
<li>svn has branchA-&gt;converted to git branchA(along with history).</li>
<li>created a git repo in bitbucket-&gt; created a branch B from master.</li>
<li>Now, I want to push all changes of branchA to branchB.
(Note: If I directly push branchA to git repo, it's showing as detached head. no relation between master and the pushed branch)</li>
</ol>
<p>(Note: If I try to merge branchB to master, it's saying cann't merge unrelated branches. No common ancestor)</p>
","1","16249564","",""
"76575924","22146621","2023-06-28 18:46:28","-2","28","<git><github><git-branch><git-log><git-switch>","Does git not highlight the branch name on which we are after we switch to a branch using its case insensitive name","<p>Suppose I am on a branch named <strong>main</strong> in git and we can confirm it by <code>git branch</code> and <code>git log</code> commands.
<a href=""https://i.stack.imgur.com/uE8yj.png"" rel=""nofollow noreferrer"">Screen shot of git bash</a>.</p>
<p>But as branch names are case-insensitive in git. So, when we switch to any branch using <code>git switch</code> using its case-insensitive name, e.g., Horror in case of horror, git doesn't highlight the current branch in case of <code>git branch</code> and <code>HEAD</code> doesn't point to any branch in the case of <code>git log</code> command.<br />
<a href=""https://i.stack.imgur.com/2TeXa.png"" rel=""nofollow noreferrer"">Screen shot of git bash</a></p>
<p>I was expecting that after switch to a branch by using its case-insensitive name, git should highlight that branch as current branch.</p>
","1","22146621","",""
"76578944","8961192","2023-06-29 07:37:17","0","18","<git><github><git-branch><git-checkout><sparse-checkout>","git sparse checkout and get all branch","<p>My Requirement was to checkout a specific directory from a repo and also checkout each branch which has that directory and copy each branch directory to a target path.</p>
<p>For Example football is a repo and src/ronaldo is the directory which I am trying to checkout and football repo has Branch A,B,C,D. But src/ronaldo is only in branch A and B.
Now I wanna checkout the directory from Branch A and B and copy it to target folder Messi.</p>
<p>I tried to do a sparse checkout a specific directory in a repo and I am able to do it using the below commands.</p>
<pre><code>git clone --filter=blob:none --no-checkout --depth 1 --sparse &lt;project-url&gt;
cd &lt;project&gt;
Specify the folders you want to clone
 
git sparse-checkout add &lt;folder1&gt; &lt;folder2&gt;
git checkout
</code></pre>
<p>But I am not able to find the rest of the branch which has the directory. What other git commands need to be added here.</p>
","0","8961192","",""
"21498932","157971","2014-02-01 13:59:18","5","674","<git><git-branch><git-remote><remote-repository>","Deleting remote branches in git: understanding it for once and for all","<p>The reason why I'm posting here today is because the behavior I see on the command line differs from what I actually read online. So it confuses me.</p>
<p>The two commands under question here are:</p>
<pre><code>git branch -r -d origin/topic1
</code></pre>
<p>and</p>
<pre><code>git push origin :topic1
</code></pre>
<p>My understanding so far (I may be completely wrong though, my brain is fried):</p>
<ul>
<li>The first should remove both the tracking reference <em>and</em> the remote branch</li>
<li>The second should remove the remote branch but NOT the tracking reference (if a local branch exists), although the reason why you wouldn't remove the tracking reference seems pointless and confusing to me as a sort-of-beginner.</li>
</ul>
<p>Here is a recent scenario I have run into. I just cloned a repository with two remote branches:</p>
<pre><code>origin/master
origin/develop
</code></pre>
<p>The only local branch I have is:</p>
<pre><code>master
</code></pre>
<p>I want to delete the remote branch <code>origin/develop</code>, so watch this:</p>
<pre><code>Robert@COMP /c/Code/project (master)
$ git branch -rd origin/develop
Deleted remote branch origin/develop (was 9ff16e8).

Robert@COMP /c/Code/project (master)
$ git fetch
From github.com:username/project
 * [new branch]      develop    -&gt; origin/develop
</code></pre>
<p>As you can see, I tried to delete the remote branch, and immediately fetch the latest changes from origin, but for some reason it recreated the branch. I have no idea why it would do this, I'm very confused. I don't have a local corresponding branch for <code>origin/develop</code>, so I don't know why it is doing this.</p>
<p>I'd like to know why this happened, but also (to address the more general title of this question, and to perhaps help everyone else scavenging stack overflow for answers to these confusing ambiguities), I'd like more general answers to some questions:</p>
<ul>
<li>There are two ways to delete a remote branch. What is a really good, simple way to remember which one to use under which circumstance?</li>
<li>Assuming it matters at all, how does the existence of a corresponding local branch (for a remote branch) affect the decision of how a remote branch is deleted?</li>
<li>How does the existence of a tracking reference/relationship between a local and remote branch affect how you choose to delete a branch, and which of the methods of deleting a branch also cleans up tracking references?</li>
</ul>
","1","157971","0","0"
"21608108","544764","2014-02-06 16:11:15","1","57","<git><git-branch>","git beta release before live on other subdomain","<p>This is how it is now set up:
we have <strong>one bare repository</strong>, we made it like <code>git init --bare</code>
then we have many other repositories like:</p>

<p><em>johnson.sample dot com</em>,
<em>marry.sample dot com</em>,
<em>john.sample dot com</em> </p>

<p>and if we are done with development we push to bare.</p>

<p>After this we go to live server like sample dot com and we pull from bare and all codes are live and ready for use live at sample dot com.</p>

<p>Now the problem is we want <strong><em>beta.sample dot com</em></strong>. So the testing people can see it before we push live.</p>

<p>I taught lets make two bare repositories, where we push from all john.sample dot com, marry.sample dot com etc. to bare.test and from beta.sample dot com we push to other live.bare and then from live sample dot com we pull from live.bare</p>

<p>but the question is: Is this good solution or there are many beter ways to solve this?</p>
","0","544764","",""
"21609781","355722","2014-02-06 17:24:31","224","233246","<git><git-branch><github-pages>","Why call git branch --unset-upstream to fixup?","<p>I'm more of a novice when it comes to advanced operations in git. I maintain my <a href=""http://jatinganhotra.com"" rel=""noreferrer"">blog</a> using the blogging framework <a href=""http://octopress.org/"" rel=""noreferrer"">Octopress</a>. Though Octopress is not under any development since 2011, it serves my purpose well and so I haven't thought of changing anything so far.</p>

<p>FYI, my blog is hosted on Github Pages.  </p>

<p>Today, while working on a new post, <code>git status</code> showed the following message:</p>

<pre><code>On branch source
Your branch is based on 'origin/master', but the upstream is gone.
  (use ""git branch --unset-upstream"" to fixup)
</code></pre>

<p>The same message repeated for all the subsequent commands such as <code>git add .</code>, <code>git commit -m 'message'</code> and <code>git push origin source</code>.  </p>

<ul>
<li>What does the message mean?  </li>
<li>Is something broken?  </li>
<li>If yes, what?  </li>
<li>Do I need to fix it? </li>
</ul>

<p>If possible, please point me to a pdf/web article where I can read up on this and understand it for future.</p>

<p>More details:</p>

<pre><code>bash-3.2$ git branch -a
* source
  remotes/octopress/2.1
  remotes/octopress/HEAD -&gt; octopress/master
  remotes/octopress/gh-pages
  remotes/octopress/linklog
  remotes/octopress/master
  remotes/octopress/refactor_with_tests
  remotes/octopress/rubygemcli
  remotes/octopress/site
  remotes/origin/source
</code></pre>

<p>Please let me know if more information is needed. Thanks.</p>
","0","355722","0","0"
"59415996","8886611","2019-12-19 19:43:12","1","534","<git><azure-devops><git-branch><git-checkout>","Missing branch from 'git branch -a' but shows up with 'git ls-remote origin'","<p>I created a branch through the Azure DevOps portal, and I want to checkout the branch. However, when I run </p>

<p><code>git checkout remotes/origin/dev/&lt;branch name&gt;</code></p>

<p>It returns ""error: pathspec 'remotes/origin/dev/branchname' did not match any file(s) known to git""</p>

<p>So I run</p>

<p><code>git branch -a</code></p>

<p>And the branch is not in the output.</p>

<p>So then I run</p>

<p><code>git ls-remote origin</code></p>

<p>and the branch is there and has the same refs/heads/ prefix as the branches that show up with 'git branch -a'! Is there a different way I can fetch the branches that show up from 'git ls-remote origin'?</p>
","2","8886611","0","0"
"21848711","1520502","2014-02-18 09:04:38","0","207","<git><git-branch><git-log>","git: git log between remote branch and HEAD being in detached HEAD state","<p>git checkout -t origin/5.0</p>

<pre><code>* df957e8 (HEAD, origin/5.0, 5.0) commit A
* 93f3185 commit B
* abd1176 commit C
</code></pre>

<p>I checked out a change from gerrit using below command  </p>

<blockquote>
  <p>git fetch gerrit refs/changes/36/236/1 &amp;&amp; git checkout FETCH_HEAD</p>
</blockquote>

<p>Now its  going to detached HEAD state with incoming commits on top of master branch instead of 5.0</p>

<pre><code>    * bdd7f9c (HEAD) part 3 of 236
    * fa8f60f part 2 of 236
    * bddd168 part 1 of 236
    * ffc7982 (origin/master, origin/HEAD) commit master
    * 415668e 
    * 991d48d 
</code></pre>

<p>I want it to be  like</p>

<pre><code>* bdd7f9c (HEAD) part 3 of 236
* fa8f60f part 2 of 236
* bddd168 part 1 of 236
* df957e8 (HEAD, origin/5.0, 5.0) commit A
* 93f3185 commit B
* abd1176 commit C
</code></pre>

<p>I tried changing HEAD pointing to refs/heads/5.0 using symbolic-ref but immediately after checking out FETCH_HEAD it is showing on top of master branch instead of 5.0.</p>

<p>My aim is to get list of commits came from gerrit change checkout using command </p>

<blockquote>
  <p>""git log --format=""%H"" origin/5.0..HEAD""</p>
</blockquote>

<p>but its not working in this case as it is checking out on top of master instead of 5.0</p>

<p>Please let me know if I am missing anything</p>
","0","1520502","",""
"59697853","","2020-01-11 19:20:53","1","74","<git><git-branch><git-merge>","What are the git commands to join and replace an x ​branch to the master branch?","<p>What git command is used to replace, and what git command do you use to join an x ​​branch to the master branch?</p>
","2","","",""
"59702227","6666715","2020-01-12 08:38:49","1","352","<git><git-branch><git-merge>","merging two git branch but exclude specific lines in a merged file","<p>i have two branches for my project one is for my Local Project and the other is for Depolying to heroku is there is way to use git merge so that i'll be able to merge my local branch into Heroku branch but certain lines of a few merged files do not changes . for example i have a line connecting a socket to my localhost i dont want this line to change relevent line that connect socket to my heroku address or the same applys to port and minor changes like that . </p>

<p>thanks.</p>
","0","6666715","",""
"41076489","1958669","2016-12-10 14:11:52","4","4120","<git><github><git-branch><git-merge><branching-and-merging>","How to merge the branch with no changes into master branch in git?","<p>Having a basic doubt in git branching and merge .
Can a branch be merged without any changes into master . If so , What happens to the delta changes that exists between master and branch . Will that be overridden with master branch changes . Refer the below scenario :</p>
<p>I have two branches master and BugBranch.</p>
<p>STEP 1:</p>
<pre><code>C--B--A   (master)
      |
      X   (branch)
</code></pre>
<p>Took a branch from master say BugBranch .
Now I have a file TestMerge.java.</p>
<pre><code>public static void main(String[] args){
...
...
callSomeMethod();
  switch(decision)
  {
    case A:
        do_something
        break;
    case B:
        do_something
        break;
  }
}
</code></pre>
<p>So at STEP 1 , both master and BugBranch looks same.</p>
<p>STEP 2:
The file(TestMerge) is changed in master as below . ( just removed the switch )</p>
<pre><code>public static void main(String[] args){
...
...
callSomeMethod();
}

C--B--A--1  (master)
      |
      X     (branch)
</code></pre>
<p>STEP 3:
The problem is when I try to merge the branch with the master . Expecting a merge conflict in file , since there exists a delta for sure and want to preserve the changes in BugBranch . But the strange thing is that , its getting overridden with the master changes .</p>
<p>Tried out the below commands</p>
<blockquote>
<p>git checkout master</p>
<p>git merge BugBranch</p>
</blockquote>
<p>This is really confusing !</p>
","5","1958669","0","0"
"22082307","1517919","2014-02-27 22:47:05","330","262502","<git><git-branch>","git switch branch without discarding local changes","<p>Alright, lets say one day we make happen to make a bunch of modifications and when we go to commit them we notice we were working on the wrong branch.</p>

<p>How can we force git to switch branches <strong>without discarding local changes</strong>.</p>

<p>I'm probably going to go about this in a naive way while I wait a reply, but I would like to know if theres a correct procedure as I'd be lying if I said this hasn't happened to me before...</p>

<ul>
<li>Backup changed repo</li>
<li><code>git reset --hard</code></li>
<li><code>git checkout right-branch</code></li>
<li>Restore changes</li>
<li><code>git commit -m ""changes""</code></li>
</ul>
","1","1517919","0","0"
"22204376","2036867","2014-03-05 17:05:47","0","225","<git><git-branch><gitignore><git-checkout>","GIT - Fail to checkout to other branch when nothing to commit - when file is in gitignore","<p>Trying to checkout to another branch </p>

<p>I have a .gitignore file with </p>

<pre><code>.someFile
</code></pre>

<p>trying to checkout to another branch fails even when i dont have any changes </p>

<pre><code>dev@cool:~/proj/source$ git status
# On branch master
nothing to commit, working directory clean
dev@cool:~/proj/source$ git checkout someBranchName 
error: Your local changes to the following files would be overwritten by checkout:
    .someFile
Please, commit your changes or stash them before you can switch branches.
Aborting
dev@cool:~/proj/source$ 
</code></pre>

<p>removing the file from .gitignore and add it again didnt help</p>

<p>running command :</p>

<pre><code>      git update-index --assume-unchanged .someFile
</code></pre>

<p>or</p>

<pre><code> git rm --cached .someFile
</code></pre>

<p>didnt help</p>

<p>any idea ?</p>
","1","2036867","",""
"59919142","12082582","2020-01-26 14:13:39","0","25","<git><github><git-branch>","get different branch file on github","<p>I have to repository on my GitHub.
master and beta.</p>

<p>I created beta because I want to experiment some changes without changing the stable version that is currently on the master.
I already push the changes on the beta branches but I don't want to finalize it so all the pushes since then is on the beta branch.</p>

<p>Now, I want to pull my master version and completely override my files.
Since I have the copy of the latest files on my beta branch, I want to change my source files to master branch.</p>

<p>Is it possible to do this?
If I want to go back to beta branch, what will i do too?</p>
","3","12082582","",""
"22226006","1105325","2014-03-06 13:29:55","0","47","<git><git-branch>","git - branching from local repo","<p>I am trying to set up a local repository (LOCAL_REPO) from some git branch (MASTER) which is to be used by a group of people.</p>

<p>MASTER------>LOCAL_REPO</p>

<p>To do this i did the following : </p>

<ol>
<li>git clone /path to master</li>
<li>git checkout -b LOCAL_REPO MASTER</li>
</ol>

<p>This creates a branch LOCAL_REPO for me at my local shared directory (SHARED_PATH)</p>

<p>Now this LOCAL_REPO is used amon a set of people and any changes that they commit will be to LOCAL_REPO which can be synced with MASTER.
So i tried creating local branch(MY_LOCAL) for myself at some path.</p>

<ol>
<li>git clone SHARED_PATH</li>
<li>got checkout -b MY_LOCAL LOCAL_REPO</li>
</ol>

<p>I am facing following issues :</p>

<ol>
<li>when i create MY_LOCAL MASTER is checked out by default. Should it not be LOCAL_REPO </li>
<li>while trying the second option i get the following error :</li>
</ol>

<blockquote>
  <p>Blockquote
  fatal: git checkout: updating paths is incompatible with switching branches</p>
</blockquote>

<p>After that i tried ""git remote show origin"" , this shows me LOCAL_REPO as remote and tracked.
What is the mistake i am doing here ?</p>
","0","1105325","",""
"60039734","2674904","2020-02-03 12:58:09","1","332","<arrays><bash><git><git-branch>","git for-each-ref not showing default branch","<p>I'm using this command in a bash script to build an array of current local branches:</p>

<pre><code>for branch in $(git for-each-ref --no-merged dev --format='%(refname:short)' refs/heads/); do
    branches+=(""$branch"")
done
</code></pre>

<p>it returns all my local branches EXCEPT the default branch of the repo. What am I missing?</p>

<p>I have tried various other ""patterns"" according to the documentation (<a href=""https://git-scm.com/docs/git-for-each-ref"" rel=""nofollow noreferrer"">https://git-scm.com/docs/git-for-each-ref</a>)
including <code>refs/heads/*</code> but none return the default branch. I confirmed it doesn't matter what branch I am checked out on, I can't get it to show up in any situation.</p>

<p>Any help is appreciated!</p>
","1","2674904","",""
"41332179","934646","2016-12-26 13:43:29","2","2657","<git><directory><git-branch><git-push><remote-branch>","how to push all files in a folder to all git branches","<p>I have a lot git branches.</p>

<p>There's a directory/folder in which I keep apk files.</p>

<p>But whenever I add a apk/file and push it
<code>(1. git add, 2. git commit -m """", 3. git push)</code>, 
It gets pushed to the local branch in which i'm working.</p>

<p>Instead of this I want to push that file to all branches, so how can I do that?</p>

<p>Also already in that folder there are lot of apk files which are present only for that particular branch. </p>

<p>So how can I make them available for all branch(i.e. push all those apk files to all branches)?</p>
","1","934646","0","0"
"22363543","1027004","2014-03-12 20:52:18","1","136","<git><git-branch>","Understanding git branch all","<p>What does the the arrow (->) mean here:</p>

<pre><code>* development
  master
  production
  remotes/origin/HEAD -&gt; origin/production
  remotes/origin/development
  remotes/origin/master
  remotes/origin/production
</code></pre>

<p>I'm just trying to get a real handle on git, so I'm diggin' deep and finding out that the further I go, the less I know about git, haha.</p>
","1","1027004","",""
"41350191","281545","2016-12-27 18:18:25","0","762","<git><branch><git-branch>","Delete all remote tracking branches for a remote git repository","<p>I somehow added a fork as a remote to my local repository and later on I issued <code>git pull</code> - to my dismay git pulled all fork branches as local tracking branches. How can I undo this with one command ? All branches show in gitk as <code>remote/wr/branchname</code></p>

<p>Do I then have to remove the entry from <code>.git/config</code> ?</p>

<pre><code>[remote ""wr""]
    url = https://github.com/AUTHOR/wrye-bash.git
    fetch = +refs/heads/*:refs/remotes/wr/*
</code></pre>
","1","281545","",""
"4040717","96531","2010-10-28 07:32:05","115","124817","<git><version-control><branch><git-branch><git-remote>","git remote prune – didn't show as many pruned branches as I expected","<p>From the man page:</p>

<blockquote>
<pre><code>Deletes all stale tracking branches under &lt;name&gt;.
These stale branches have already been removed from the remote repository
referenced by &lt;name&gt;, but are still locally available in ""remotes/&lt;name&gt;"".
</code></pre>
</blockquote>

<p>So I removed a bunch of branches using</p>

<pre><code>git push origin :staleStuff
</code></pre>

<p>and then ran</p>

<pre><code>git remote prune origin
</code></pre>

<p>However, only one single local branch was pruned. Some of these branches were created by me, some by co-workers. Does this indicate that I wasn't tracking those branches correctly in the first place?</p>
","1","96531","0","0"
"41610447","2358029","2017-01-12 10:14:53","2","54","<git><github><version-control><merge><git-branch>","Is it possible in git to view who merged a branch if it was without a new commit?","<p>User A committed (1) in the ""master"" branch.</p>

<p>User B committed (2) and (3) based on (1) in the ""feature"" branch.</p>

<p>User A merged (3) into the master branch.</p>

<p>So now it looks like this:</p>

<ul>
<li>hash3 - (origin/master, origin/feature) commit 3 (User B)</li>
<li>hash2 - commit 2 (User B)</li>
<li>hash1 - commit 1 (User A)</li>
</ul>

<p>Now it appears like User B has committed into the master branch. But he didn't. It looks like this only because User A has merged. But there is no record of this merge. Only the commit is shown.</p>

<p>Is there any record that views this commit as two different actions (commit then merge) done by two different users instead of just showing them as one thing?</p>
","4","2358029","",""
"22765938","3299693","2014-03-31 15:38:21","1","153","<git><git-branch><git-merge>","Git rebase and git merge","<p>I understand that if I have a branch ready to merge with remote master, I need to do:</p>

<ol>
<li><p>git checkout 'my branch'</p></li>
<li><p>git rebase master (rebase because I want simple history + my changes are minuscule enough to do that). But it will be rebase with my local master, not with origin master, correct?</p></li>
<li><p>git checkout master</p></li>
<li><p>git merge 'my branch' - this will do fast-forward merge and completes the process.</p></li>
</ol>

<p>But how to do the same merge with remote master? I don't see any explicit explanation in the Internet. I cannot just checkout on origin master on the 3d step.
What am I missing?</p>
","0","3299693","",""
"19636745","1360693","2013-10-28 13:59:24","4","2580","<git><version-control><merge><git-branch><git-flow>","Merge changed files from feature to a hotfix git flow","<p>I have 3 branches</p>

<p>develop, master and a feature branch which is made with git flow feature start. </p>

<p>Now I want to make the commits which are made from the feature to be merged into a separate hotfix so I can merge it into the master without merging the developer branch into the master how can I do that?</p>

<p>To clerify</p>

<p>develop has 100+ commits which are made for a separate release, </p>

<p>I made branch out of the dev, and want to make it into a separate hotfix.</p>

<p>The problem is a hotix is a master originating branch, so if I do git merge feature git will merge ALL of the developer commits with the few commits I amde on the feature. </p>

<p>The question is. how to cherry pick the feature?</p>

<p>EDIT:</p>

<p>@Pigueiras </p>

<p>I am more like in this situation, I draw a diagram.
<img src=""https://i.stack.imgur.com/dzylJ.png"" alt=""enter image description here""></p>

<p>I need to ONLY transfer the red noted commits from the feature to the hotfix. </p>
","1","1360693","0","0"
"57810812","10864356","2019-09-05 17:57:03","-1","237","<git><git-branch><git-clone>","What difference does adding ""--single-branch"" make in git?","<p>I've cloned a single branch of a repo before using <code>git clone -b &lt;branch-name&gt; &lt;repo-name&gt;</code>, but recently saw <code>git clone --single-branch -b &lt;branch-name&gt; &lt;repo-name&gt;</code> being used.</p>

<p>What's the difference?</p>
","1","10864356","",""
"66831208","7584167","2021-03-27 12:13:14","0","437","<git><github><git-branch><git-bash><git-lfs>","Unable to push the code to new branch on github","<p>At first I created a new branch to push the code and then it gave me error that src.zip large file so I deleted that large file by going through the folders and I again pushed the same code and it is still showing that large file error which I have already deleted. also I created a new branch to push but it is showing the same error of the large file on this branch too. NewBie here please help.</p>
<pre><code>Uploading LFS objects: 100% (304/304), 307 MB | 1.1 MB/s, done
Enumerating objects: 1210, done.
Counting objects: 100% (1210/1210), done.
Delta compression using up to 4 threads.
Compressing objects: 100% (774/774), done.
Writing objects: 100% (788/788), 218.86 MiB | 6.96 MiB/s, done.
Total 788 (delta 257), reused 0 (delta 0)
remote: Resolving deltas: 100% (257/257), completed with 81 local objects.
remote: warning: File src/doctorPhone/RaxaFlutter/.dart_tool/flutter_build/2df7223b49177d7318e9bb97b2996866/app.dill is 54.92 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB
remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: f7149ed9934cffbf584a9a95455829192e42d3caf9ecb80f50de60b697395238
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File src.zip is 169.55 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/usename/repoName.git
 ! [remote rejected]     hipconsent -&gt; hipconsent (pre-receive hook declined)
error: failed to push some refs to 'https://github.com/usename/repoName.git'
</code></pre>
","1","7584167","",""
"66835040","15495723","2021-03-27 18:56:47","0","275","<django><git><git-branch><python-venv>","Venv stops working as supposed after opening a branch in git","<p>I had a project set up within VS-Code together with a venv (setup via &quot;python -m venv venv&quot;) in it. Everything was working fine: Git worked and my venv did also do its job, e.g. opening python via the terminal while the venv was active would open the right python interpreter within the venv and thus find the correct libraries.</p>
<p>I decided to open a new branch via the git command : &quot;git checkout -b eel_replacement&quot; and wanted to install Django afterwards via &quot;pip install django&quot;(while my venv was active). Installation succeded and I wanted to verify that by opening the python interpreter and trying &quot;import django&quot;(I also tried &quot;import Django&quot;), which did not work, resulting in the error:</p>
<p><em>Traceback (most recent call last):
File &quot;&quot;, line 1, in 
ModuleNotFoundError: No module named 'django'</em></p>
<p>If I type in pip list, then this is the output:
<a href=""https://i.stack.imgur.com/DHjmh.png"" rel=""nofollow noreferrer"">pip list output</a></p>
<p>There are 2 things that really got me confused right here: It does show <strong>all</strong> packages, not only the ones I installed within my venv. This normally indicates that my venv <strong>is not</strong> active!
Nonetheless you can see it still shows the &quot;(venv)&quot; line before my command prompt, which normally indicates that venv <strong>is</strong> activated.</p>
<p>Furthermore the &quot;pip list&quot; output shown above also lists Django being installed succesfully. So i assumed that the venv was running but the django package was unintendedly installed on my main machine, which resulted in me being unable to import it from within my venv. So i tried <a href=""https://stackoverflow.com/questions/1871549/determine-if-python-is-running-inside-virtualenv"">this</a> way to see whether the venv was active or not. Weirdly enough this returns a True(as shown <a href=""https://i.stack.imgur.com/xvgmB.png"" rel=""nofollow noreferrer"">here</a>), meaning that my venv is not active at all, which left me entirely clueless.</p>
<p>I've got another Project in which I use git and github together with a venv which still works perfectly fine. <a href=""https://i.stack.imgur.com/HmjBh.png"" rel=""nofollow noreferrer"">This</a> is the output of the <code>sys.prefix==sys.base_prefix</code> code within that other project, which returns a False as expected. Checking out back and forth between master and eel_replacement branch did not solve the issue. Neither did restarting/reopening the project.</p>
<p>I am uncertain whether that is some kind of very weird bug, given the inconsistency of hints concerning venv being active or not OR its just me overseeing something obvious. I would defenitly appreciate some help. Also this is my first question on stackoverflow, so be gentle with me^^</p>
","2","15495723","",""
"31817210","685125","2015-08-04 19:03:10","36","19807","<git><git-branch><git-flow>","git - confusion over terminology, ""theirs"" vs ""mine""","<p>I'm completely confused about what mine vs theirs means. In this specific case, I've got a feature branch where I just squashed about 80 commits via <code>rebase -i</code> and am merging this back into <code>develop</code>. I got a few conflicts, and I just want to use whatever code is on my feature branch. I tried ""mine"" but that actually seemed to do the opposite.</p>

<p>Could someone shed some light on this terminology?</p>
","0","685125","0","0"
"49301546","838355","2018-03-15 14:03:36","1","3378","<git><github><git-branch>","How to restore git history","<p>One of our developers copied a file from one branch to another and rewrote the file's history. What is the best way to restore it.</p>

<pre><code>   original__________________________________________________(commits d)____(commits e)___(no commit history for a, b, c in master)
    |                                            |
    |                                         (copied)
    |                                            |
    |                                            |
    |__(commits a)__(commits b)___(commits c)_____
</code></pre>
","5","838355","",""
"66855712","816260","2021-03-29 14:06:42","0","58","<git><github><bitbucket><git-merge><git-branch>","How to re-arrange git release branch(es) after many branches have been merged?","<p>I've got a git situation that has come up that I'm not sure how to handle. I've got two release branches that have changed due to UAT/QA not being able to properly test the changes in time for the Production release schedule. Basically, they rejected some of my development work and accepted some others from a more high priority project. Luckily, I've placed my code in various feature branches. I now know not to merge any of my feature branches until they accept the work. A partial list of these branches is shown below.</p>
<p>The first time they rejected features, I removed the release/2104 (2021 April) branch and then recreated it. This worked fairly easily, as I only had one or two feature branches to merge. I think I had to make a special patch branch to make sure some of my changes got added to the release. I'm not sure if this was the best approach. I'm fairly certain that it has screwed up the merge history for this branch.</p>
<ul>
<li>release/2103
<ul>
<li>feature/jjwalte-DA-44948</li>
</ul>
</li>
<li>release/2104
<ul>
<li>feature/jjwalte-DA-45102</li>
<li>feature/jjwalte-DA-45102-2 (special path branch)</li>
</ul>
</li>
<li>release/2105
<ul>
<li>feature/jjwalte-DA-44971</li>
<li>feature/jjwalte-DA-45008</li>
<li>and several others...</li>
</ul>
</li>
</ul>
<p>Looking forward to the release/2105, I'm all mixed up. I'm not sure if I can rely on the merge history anymore. I was thinking that the best approach might be to rename the current release/2105 branch to release/2105-old (local and remote) and then create a new release/2105 branch from release/2104. We don't have a big team (2 or 3 people max), so it should be simple to get everyone to rename it locally.</p>
<p>Note, I've got about 9 branches that are supposed to go out with release/2105 branch release. Some of my branches were branched off of release/2104 and others were branched off of release/2105. I think this is one of my biggest problems. What do you think is the best approach for this mess?</p>
<p>My current plan for release/2105:</p>
<p>So, first will be rename:</p>
<pre><code>git branch -m release/2105 release/2105-old
git checkout release/2105-old
</code></pre>
<p>Then delete the remote:</p>
<pre><code>git push origin :release/2105
</code></pre>
<p>Then set tracking:</p>
<pre><code>git push --set-upstream origin release/2105-old
</code></pre>
<p>Then I'll create a new 2105 branch off of the 2104 branch.</p>
<pre><code>git checkout release/2104

git checkout -b release/2105
git push --set-upstream origin release/2105
</code></pre>
<p>Then... I'm going to try to use SourceTree (app) to &quot;Cherry Pick&quot; various commits (50+) for the new release/2105 branch.</p>
<p>Hopefully, if all goes well... I'll have a release/2105 branch
with just the tickets/commits I need for the release.</p>
","8","816260","",""
"66880410","13127319","2021-03-31 01:24:20","0","615","<git><git-branch><git-rebase>","git rebase doesn't contain every files","<p>by mistake I used &quot;git rm my_file&quot; in my branch.</p>
<p>After some commits, merges and... now I'm trying to get the file back from master branch,
I'm using &quot;git rebase master&quot; and it says current branch is up to date but the file doesn't exist.</p>
<p>Is there anyway to get the file from master to my branch? I think simply creating a new branch will fix the problem.</p>
","0","13127319","",""
"68245245","16306927","2021-07-04 13:35:10","4","2320","<git><github><command><git-branch>","How to push new project code to specific branch in existing github repository?","<p>I added the origin of remote repository in my code.<br />
My existing repository have three branches: <code>master</code>, <code>test</code>, <code>user</code>.</p>
<p>But after adding and confirming the remote <code>origin</code> by command '<code>git remote -v</code>', the '<code>git branch --list</code>' command is displaying only one branch that is <code>master</code>.</p>
<p>I don't know if it is exactly pointing to that origin where I want to push the code.<br />
I want to push the new code to <code>test</code> branch.</p>
<p>git branch -avv</p>
<pre><code> master                     first commit
 origin                     first commit
* test                       first commit
 remotes/origin/master      Update register.tsx
 remotes/origin/test        Update next.config.js
 remotes/origin/aman        june 25
</code></pre>
<p>I want to push it to remote test branch and delete local branches origin, test and master.</p>
<pre><code> git switch -c test
 fatal: only one reference expected
</code></pre>
<p>And when I tried to switch to <code>remote/origin/test</code> branch from vscode it says branch 'test' already exists.</p>
","0","16306927","0","0"
"32177041","2605112","2015-08-24 07:53:11","0","35","<git><github><version-control><git-branch>","why does `git branch -a` not show branches from `git branch -r`?","<p>When I do <code>git branch -r</code>  I see the following:</p>

<pre><code>  origin/HEAD -&gt; origin/master
  origin/master
  origin/&lt;other-branch&gt;
</code></pre>

<p>But when I do <code>git branch -a</code> I see the following:</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/&lt;other-branch&gt;
</code></pre>

<p>Why is it that I don't see the branches listed from <code>git branch -r</code> as well?  Is the <code>remotes/</code>  removed from the path name when you do <code>git branch -r</code> because they are all remote?  mm.  </p>
","0","2605112","",""
"14717120","450598","2013-02-05 21:19:23","60","57887","<git><merge><git-branch><git-merge>","List all modified files in git merge commit - even the fast forwarded","<p>I'm thinking if there is a way that when I merge a branch into another branch that ALL changed files are listed in my commit message and not just the ones which were modified in both branches.
This would give me a better overview of what was changed in the branch just by seeing the merge commit.
Is there a way to do this?</p>
","1","450598","0","0"
"14719143","305270","2013-02-05 23:51:43","3","2472","<git><git-branch><git-merge>","How to reuse a branch in git?","<ul>
<li>I have a branch featureA that got started but not ended. </li>
<li>Then featureB was requested and done on the master. </li>
<li>Then the featureB merged into master. </li>
<li>Now I merged the featureA into master because it needed the featureB. </li>
<li>Now I want to create a new branch called featureA as it's the same feature but I can't.</li>
</ul>

<p>What is the best thing to do, or to manage this kind of things in the future?
I don't want to lose my branches... I want to keep the history of every step.
thanks a lot!</p>

<pre><code>featB            /--\
master --------------X--X--------
featA       \----------/   \-- I want to continue here the featB and not 
                               creating featB2, without losing the history.
</code></pre>
","0","305270","0","0"
"14721066","2045377","2013-02-06 03:39:46","0","292","<xcode><git><branch><git-branch>","Using Xcode, why is my git branch called [32master[m?","<p>When I create a new project in Xcode 4.6 and turn on git - my default branch is strangely named ""[32master[m"". This is the name that appears in the Organizer->Repositories->Branches area.</p>

<p>When I use iTerm and go into the project directory, typing:</p>

<pre><code>git branch
</code></pre>

<p>shows</p>

<pre><code>* master
</code></pre>

<p>I know I'm close because when I type:</p>

<pre><code>git branch | od -c
</code></pre>

<p>I get</p>

<pre><code>0000000    *     033   [   3   2   m   m   a   s   t   e   r 033   [   m
0000020   \n                                                            
0000021
</code></pre>

<p>Any ideas on how I can get a ""normal"" named master branch?</p>

<p>The consequence of this is that I can't push, branch or manipulate the repo in any way.</p>

<p>Thanks.</p>
","1","2045377","0","0"
"32506365","99834","2015-09-10 15:47:10","0","59","<git><git-branch><git-fork>","How to consolidate git forks into git branches?","<p>I do have to find a way to transform lots of git forks of repositories into git branches inside the same root repository.</p>

<p>In my case people never used real branches, they just forked the repository and did the work on their fork, pushing an pulling from the source repository from time to time but always working on master branch.</p>

<p>I want to consolidate these forks into real branches, how can I do this?</p>
","5","99834","",""
"32506656","5248960","2015-09-10 16:00:45","0","15","<client><localhost><git-branch><git-bash><git-clone>","How can I see the names of ""local"" git branches of a repo from the repo server","<p>How can I see the names of ""local"" git branches of a cloned repo from the repo server?  I have 8-10 developers and I want to insure they are using branch naming standards on their local machines.. Is that possible?</p>
","0","5248960","0","0"
"15462217","","2013-03-17 15:01:06","0","1224","<git><git-branch><git-cherry-pick>","git cherry-pick SHA1 ID","<p>I am still new to git and I came across this cherry-pick command. Lets say I 
cherry-pick a commit (lets call it CA) from <em>devel</em> branch to the <em>master</em> 
branch and they now both have different sha1 id if what I interpret is correct. </p>

<p>So my question is, if later I want to check the ""differences"" between <em>devel</em> 
branch and <em>master</em> branch using  <code>git cherry</code>to find out which commits are 
eventually pushed to <em>master</em> and which does not, but since the commits (CA) I 
cherry-picked just now will have a different SHA1 id so when I execute <code>git 
cherry master devel</code> what does it tell me? Does it tell me CA is pushed to the 
<em>master</em>? Or does it tell me CA is NOT pushed to the <em>master</em> since they don't 
share the same SHA1 ID?</p>
","2","","",""
"32518299","3999893","2015-09-11 07:51:07","5","3364","<git><branch><git-branch><remote-branch>","How to show connections between local and remote branches in git?","<p>I'd like to add a copy of a remote branch (<code>origin/featureX</code>) to my local repository.</p>

<p>Therefore I generated a local branch <code>featureX</code> and set it to track the given remote branch:</p>

<pre><code>git branch featureX
git branch -u origin/featureX featureX
# Branch featureX set up to track remote branch featureX from origin.
</code></pre>

<p>Now is there a way to show this connection? I tried e.g. <code>git branch -av</code>, but no connection between <code>featureX</code> and <code>remotes/origin/featureX</code> are shown.</p>
","0","3999893","0","0"
"15496198","125997","2013-03-19 09:54:22","1","44","<git><git-branch>","git equivalent for --all for all non-remote branches?","<p>The <code>--all</code> parameter is used in various git commands to refer to all branches. Is there an equivalent for all non-remote branches?</p>

<p>(Specifically, this came up using git-filter-branch, I'd like to work on all local branches.)</p>
","1","125997","",""
"38718775","3313232","2016-08-02 11:08:36","4","3783","<git><git-branch><git-merge>","find last merged git branch in master","<p>I have main branch in git: <code>master</code></p>

<p>and a number of feature branches: <code>feature/adding-some-func</code> and etc.</p>

<p>After the merging <code>feature</code> branch to <code>master</code> I have commit with message like:</p>

<p><code>Merge pull request #33 in test-proj from feature/adding-some-func to master</code></p>

<p>How can i get the name of just merged branch(feature/adding-some-func) after the cloning repository? So, as result I need to get feature/adding-some-func but in the logs i see only SHA, Commit Authors</p>
","3","3313232","0","0"
"12125803","1625076","2012-08-25 21:29:25","0","5187","<git-branch><repository>","repo manifest and branches in git repository","<p>I copied the android repositories to local pc with repo init and repo sync, the branch is ics_rb7.
In manifest.xml file, revision is ics_rb7.2, that's supposed to mean the branch in each project, right? However, the branch ics_rb7.2 doesn't exist on all projects in the repository. How do we know which branch in the projects is the default cloned one? Thanks,</p>
","0","1625076","0","0"
"57713710","997112","2019-08-29 15:46:56","1","653","<git><git-branch>","Creating new git branch. What is the point of git remote add?","<p>I am following a guide called <a href=""https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches"" rel=""nofollow noreferrer"">Create a new branch with git and manage branches</a> to create a new branch.</p>

<p>So far I have:</p>

<pre><code>git checkout -b [new_branch_name]
git push -u origin dev
</code></pre>

<p>but the next command seems pointless. Why is it needed?</p>

<pre><code>git remote add [name_of_your_remote] [new_branch_name]
</code></pre>

<p>I have just created a new branch. I have made Git aware of it so I can pull code in to my new branch. Why do I now need to create a remote branch and give it a name? Surely the name should be the same as my local branch?</p>

<p>Can someone please explain the purpose of this command?</p>

<p><strong>EDIT: The reason I am asking this is because I want to know the bare minimums to create a new branch, edit code on it, pull latest and commit/push my changes</strong> </p>
","5","997112","",""
"12144844","660981","2012-08-27 15:21:51","1","70","<git><git-branch>","confused about git branches and master interaction","<p>I am working locally.
I checked out a branch ""b1"" and did some work on it.
I want to keep the branch ""b1"" the way it is but go back to the master and for it to be like it was before I checked out ""b1"".  But when I check out master with ""git checkout master"" all the changes I made in the branch are already in the master without any commits or merges.  What am I doing wrong?</p>
","0","660981","",""
"66272140","4532861","2021-02-19 05:18:09","0","360","<git><branch><git-branch><branching-and-merging><branching-strategy>","Managing feature dependencies in git","<p>I have multiple features that are developed in an organization. Let's say these features are developed within a team and cross team.
Lets say feature/CT1 and feature/CT2 are cross team branches. These has dependency on feature/WT1, feature/WT1.1 and feature/WT1.2.
Again, feature/WT1 has dependency on feature/WT1.1 and feature/WT1.2.
All of these branches are active and are worked parallelly. Also these branches can go to production at different point of time.
Considering this dependency, what are the options to maintain this dependency holistically? and what would be best GIT branching strategy to be follow?</p>
","0","4532861","",""
"12165190","289715","2012-08-28 18:20:09","2","2117","<git><git-branch><git-commit><git-show><git-reflog>","what happened to a commit that doesn't show up in any branches but available in ""git show""","<p>I have a commit id available in the bare repo.<br>
<code>git show commit id</code>, shows the commit with the changes.</p>

<p>But the same commit doesn't show up when using the below commands</p>

<pre><code>git branch --contains &lt;commit id&gt;
</code></pre>

<p>or</p>

<pre><code>git reflog show --all | grep &lt;commit id&gt;
</code></pre>

<p>What could have happened to the commit id?</p>
","0","289715","0","0"
"12172453","325418","2012-08-29 07:01:09","2","79","<git><git-branch>","Why ""git checkout master"" didn't revert file content back to previously?","<p>Say, if the file <code>foo</code> is committed already, having the content of</p>

<pre><code>just a simple line
</code></pre>

<p>now a <code>git checkout -b issue57</code> is done to create a branch and switch to it (say, that issue57 branch is to last 2 days for development), and a line <code>footer added</code> is added to the file for now, and then a <code>git commit -a -m ""add a footer to the file""</code>.</p>

<p>So now the file <code>foo</code> has the content</p>

<pre><code>just a simple line
footer added
</code></pre>

<p>When a ""hot fix"" or ""quick fix"" is needed, I thought the command <code>git checkout master</code> should be used, and now the content of the file <code>foo</code> should be back to that just one single line.  But when I do <code>more foo</code>, the file has both lines, why is that?</p>
","0","325418","0","0"
"38928397","","2016-08-13 01:39:26","4","503","<git><git-branch><branching-and-merging><git-workflow>","git branch -d fails even though branch's changes have been applied to master","<p>Background:</p>

<ul>
<li>I want to contribute a bug fix to a project that uses Git for version control;</li>
<li>I don't have write access to the project's public repository;</li>
<li>the project maintainer requires patches to be submitted via email.</li>
</ul>

<p>Workflow:</p>

<ul>
<li>I clone the project's public repository;</li>
<li>I create a local branch in which I develop my bug fix;</li>
<li>I email the patch to the maintainer;</li>
<li>the maintainer applies the patch and pushes to the project's public repository;</li>
<li>I pull the changes to my local <code>master</code> branch from <code>origin/master</code>;</li>
<li>I confirm that my patch was applied by the maintainer.</li>
</ul>

<p>Problem:</p>

<ul>
<li><code>git branch -d</code> won't now delete my bug fix branch, giving <code>error: The branch ... is not fully merged.</code></li>
</ul>

<p>However, the patch that the maintainer applied contained <em>all</em> the changes that I had made in my bug fix branch, so intuitively it seems wrong that Git should claim that the branch ""is not fully merged.""</p>

<p>The Git book seems to agree with me. It mentions only one reason why <code>git branch -d</code> would fail - because the branch ""<a href=""https://git-scm.com/book/en/v2/Git-Branching-Branch-Management"" rel=""nofollow"">contains work that isn’t merged in yet</a>"" - which doesn't apply in my case.</p>

<p>I am unsure whether I have encountered a bug in Git, or whether Git just doesn't support my use-case.</p>

<p>Yes, I could just go ahead and delete the branch using <code>git branch -D</code>, but I would rather not get into the habit of doing that except in cases where I want to delete a branch whose changes to the files in the working tree <em>really</em> have not been merged into any other branch.</p>

<p>I would much rather:</p>

<ul>
<li>understand why Git is claiming that the bug fix branch ""is not fully merged"" even though the branch's changes have indeed been applied to <code>master</code>, and</li>
<li>find a more elegant response than resorting to <code>git branch -D</code>.</li>
</ul>

<h2>Example</h2>

<pre><code>$ git clone https://git.example.com/repo.git
# Output omitted for brevity. Clone proceeded fine.
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
$ git checkout -b fix_bug_42
Switched to a new branch 'fix_bug_42'
$ vim foo.txt # Fix bug 42.
$ git add foo.txt
$ git commit -m ""Fix bug 42""
[fix_bug_42 244540f] Fix bug 42
 1 file changed, 1 insertion(+)
$ git format-patch HEAD^
0001-Fix-bug-42.patch
</code></pre>

<p>I then email <code>0001-Fix-bug-42.patch</code> to the maintainer.</p>

<p>The maintainer applies this using <code>git am &lt; 0001-Fix-bug-42.patch</code>, maybe makes some other commits too, and pushes to origin/master.</p>

<p>I then do:</p>

<pre><code>$ git remote update
Fetching origin
remote: Counting objects: 54, done.               # Numbers illustrative only
remote: Compressing objects: 100% (42/42), done.
remote: Total 42 (delta 29), reused 0 (delta 0)
Unpacking objects: 100% (42/42), done.
From https://git.example.com/repo
   7787ce5..1c1a981  master     -&gt; origin/master
$ git status
On branch fix_bug_42
nothing to commit, working directory clean
$ git co master
Switched to branch 'master'
Your branch is behind 'origin/master' by 3 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)
$ git pull
Updating 7787ce5..1c1a981
Fast-forward
 bar.txt          |   3 +--
 contributors.txt |   1 +
 foo.txt          |   1 +
 3 files changed, 3 insertions(+), 2 deletions(-) # Numbers illustrative only
</code></pre>

<p>So far, so good! Let's see if my patch was applied in one of those three commits:</p>

<pre><code>$ git log @...@^^^ # Show the last two commits
commit 1c1a981f0b9cbaa593c949cea07e3265e2f8c9fa
Author: A Maintainer &lt;maintainer@example.com&gt;
Date:   Thu Aug 11 20:58:32 2016 +0000

    Add sampablokuper to list of contributors

commit 44a35eae3dc69002b6d3484cd17ad653ee7de3c3
Author: Sam Pablo Kuper &lt;sampablokuper@example.edu&gt;
Date:   Thu Aug 11 19:00:00 2016 +0000

    Fix bug 42

commit 25c3562fecd3f42f76c7552fabec440dd4473c6e
Author: A Maintainer &lt;maintainer@example.com&gt;
Date:   Thu Aug 11 14:44:53 2016 +0000

    Edit bar.txt
</code></pre>

<p>Looks like it was applied in the penultimate commit. Let's confirm that!</p>

<pre><code>$ diff -s &lt;(git diff @^^ @^) &lt;(git diff fix_bug_42^ fix_bug_42)
Files /dev/fd/63 and /dev/fd/62 are identical
$
</code></pre>

<p>All the changes I made in my <code>fix_bug_42</code> branch have definitely been applied and committed by the maintainer. Yay!</p>

<p>That means Git should know it is now safe for me to delete my bug fix branch, right? Wrong!</p>

<pre><code>$ git branch -d fix_bug_42
error: The branch 'fix_bug_42' is not fully merged.
If you are sure you want to delete it, run 'git branch -D fix_bug_42'.
</code></pre>

<p>Argh!</p>

<h2>Hypotheses</h2>

<p>Now, I think I know why this is happening. I <em>think</em> it is because the commit in <code>master</code> in which my patch was applied (44a35eae3dc69002b6d3484cd17ad653ee7de3c3) has a different hash to the commit in <code>fix_bug_42</code> from which that patch was made (244540f...). I.e. Git thinks that because commit 244540f doesn't exist in <code>master</code>, that means <code>fix_bug_42</code> ""is not fully merged"".</p>

<h2>Questions</h2>

<ul>
<li><p>Is my hypothesis correct?</p></li>
<li><p>Regardless, what can I do about this problem, short of using <code>git branch -D</code>? (E.g. is there a better workflow I could have used, that would have avoided this problem?)</p></li>
<li><p>Does this unexpected (to me, at least) behaviour from Git represent either a bug in Git, or at least a legitimate feature request for improved handling of this use case?</p></li>
</ul>
","0","","0","0"
"12201083","1185254","2012-08-30 16:06:30","18","23422","<git><git-branch><git-push><git-remote>","""src refspec does not match"" and ""failed to push some refs"" errors on git push","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/959477/error-when-git-push-to-github"">Error when &ldquo;git push&rdquo; to github</a>  </p>
</blockquote>



<p>I tried to push my new branch (let's just call it <code>new_branch</code>) to remote rep. There is no such branch there yet, but <code>git push origin new_branch:new_branch</code> should create it. When I try to do it, this is what I get:</p>

<pre><code>error: src refspec new_branch does not match any.
error: failed to push some refs to 'ssh://git@***'
</code></pre>

<p>I dug through million of questions like this on SO, but none of them specified these two errors at once and they referred only to <code>master</code> branch (I don't know if it makes any difference).</p>

<p>What I already tried include <code>commit</code>, <code>reset</code> and <code>push</code> in many configurations. And they didn't work so far. I suppose there may be some issue with <code>HEAD</code>, because I messed with it some time ago. But it's a guess and I don't even know how to check it properly, since GIT is still a <em>teeny-tiny</em> mystery for me.</p>

<p>So - how can I get rid of these errors and push my local branch to remote repository?</p>
","1","1185254","0","0"
"29837053","1542339","2015-04-24 01:16:15","1","1008","<git><git-branch><git-submodules>","Why does `git rebase --continue` fail with gitmodules error?","<p>I created a branch named lab based on master. Months later, I tried to rebase the lab branch based on master. First there is one .gitignore conflict; after solving it, I ran <code>git rebase --continue</code>, but it failed again and this time there is no help info telling me how to continue with this rebase. How to rebase lab branch based on master?</p>

<pre><code>git rebase --continue
Applying: start edit
Applying: a
fatal: mode change for .gitmodules, which is not in current HEAD
Repository lacks necessary blobs to fall back on 3-way merge.
Cannot fall back to three-way merge.
Patch failed at 0002 a
The copy of the patch that failed is found in:
   f:/testxxx/.git/rebase-apply/patch

When you have resolved this problem, run ""git rebase --continue"".
If you prefer to skip this patch, run ""git rebase --skip"" instead.
To check out the original branch and stop rebasing, run ""git rebase --abort"".
</code></pre>
","0","1542339","",""
"12205820","805082","2012-08-30 21:29:52","1","82","<git><git-branch><git-remote>","Created a git remote which points to an external git repo. Permission denied when I do a pull","<p>I have a project where I want to push ""official"" code to one server, while ""test"" code on another. I have two git repositories living in two completely different servers (for reasons that are not in my control). Let's call the servers Server_ONE and Server_TWO. Since the code for these two projects are the same, I want to manage this project from a single place on my local machine.</p>

<p>And so I did this:</p>

<pre><code>#These work fine
git clone ssh://user@SERVER_TWO:my_project.git
git remote add Server1_branch user@SERVER_ONE:my_project.git

#This fails
git fetch Server1_branch master
user@SERVER_ONE's password: #I have no idea what password to enter. 
Permission denied (publickey,gssapi-with-mic,password).
</code></pre>

<p>I know that Server_ONE is denying permissions. But I have no idea where to add permissions?</p>

<p>I am NOT using Github. These are both private repositories. </p>
","4","805082","",""
"29842151","2254561","2015-04-24 08:17:04","1","66","<git><git-branch>","When using ""git pull"" operation, It will result in a new log which display ""Merge remote branch into local branch""","<p>When using ""git pull"" operation, It will result in a new log which display ""Merge  remote branch into local branch"". The log just look like as follow:</p>

<pre><code>SHA-1: 3c4e93220199713ac4ad4695b93ea1d4f7f821fc
* Merge branch 'feature/hub' of http://tfs.bg.com:8080/tfs/DefaultCollection/_git/gitProject into feature/hub
</code></pre>

<p>Can anyone tell me why? Any help will be appreciated!</p>
","1","2254561","",""
"29844437","357618","2015-04-24 09:56:53","1","4766","<git><git-branch>","Prevent developers from creating new git remote branches","<p>In a centralized workflow, is there any way (with local or server configuration) to prevent developers from creating new remote branches in git?</p>

<p>We are happy creating local branches but sometimes this local <code>spikes</code> or <code>test-feature</code> branches are going to remote by mistake.</p>

<p>Any way to avoid this without going to a more restricted workflow?</p>
","2","357618","",""
"68892833","6897369","2021-08-23 12:35:52","0","775","<git><git-branch>","Store several different .git branches in the same directory?","<p>There was no local .git repository on Windows in a &quot;..Downloads/Training&quot; folder, using per-installed git bash, I first typed</p>
<pre><code>git init
</code></pre>
<p><code>touch .gitignore</code> in acccordance with the youtube tutorial (see link listed below) copied .gitignore file contents from previously created by visual studio repository, also added .gitignore by
<code>git add .gitignore</code> , also added the only subfolder M01 in &quot;..Downloads/Training&quot; by typing
<code>git add .</code>, commited the changes by
<code>git commit -am &quot;First commit</code>, added the remote by typing
<code>git remote add origin https:name_of_remote.com/my_repository_folder</code>, created a branch
<code>git branch M01</code>, switched to the branch by
<code>git switch M01</code>, also pushed the repo by typing
<code>git push origin HEAD:M01</code>.
And the repository has been pushed successfully into that remote but now there is a problem:
I need to store the contents of each folder inside &quot;..Downloads/Training&quot; in a separate branch on the remote.</p>
<p>So if I create a new local folder M02 and a branch by typing <code>git branch M02</code>, switching to it by <code>git switch M02</code>, It shows me all of the contents that I have previously added into the M01 branch in the M02 branch, but If I remove the files from M02 by typing <code>git rm . -r</code> (it deletes local files), it also deletes the files from both M01 branch and M02 branch.</p>
<p>Is there a way to store only M01 local folder in a M01 branch and the M02 local folder in a M02 branch?</p>
<p>Additional source tutorial links:
(<a href=""https://www.youtube.com/watch?v=g4BJXfmAevA"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=g4BJXfmAevA</a>)</p>
","1","6897369","",""
"33137837","414058","2015-10-15 00:22:37","-2","736","<git><version-control><git-branch><branching-and-merging>","How to fix git when there are two origin branches with same name?","<p>First I tried to undo a pull (don't ask me why), by moving my <code>origin/develop</code> branch to a specific commit:</p>

<pre><code>git reset --hard &lt;older-commit&gt;
# trying to undo the pull (please don't ask why)
git branch -f origin/develop HEAD
</code></pre>

<p>Looks like git created a new local branch called <code>origin/develop</code>:</p>

<pre><code>git log -n 3 --decorate remotes/origin/develop

commit 43187d461a5e2b3a4a3443ac7d91d2414f6ccdd7 (origin/develop)
Author: me &lt;me@me.com&gt;
Date:   Tue Oct 13 17:10:29 2015 -0700

    Commit 3

commit 33187d461a5e2b3a4a3443ac7d91d2414f6ccdd6
Author: me &lt;me@me.com&gt;
Date:   Tue Oct 13 17:01:29 2015 -0700

    Commit 2

commit 23187d461a5e2b3a4a3443ac7d91d2414f6ccdd5 (HEAD, develop, origin/develop)
Author: me &lt;me@me.com&gt;
Date:   Tue Oct 13 17:00:29 2015 -0700

    Commit 1
</code></pre>

<p>Two questions:</p>

<ol>
<li>Can you explain why that happened?</li>
<li>How can I fix this without messing things further?</li>
</ol>
","1","414058","",""
"68901029","16445388","2021-08-24 02:20:21","1","440","<git><branch><zsh><git-branch><conventions>","Can i use ""[ ]"" on git branch?","<p>I like to use branch like <code>[#3]feature: filter</code>
<code>[#issue num]type: title</code></p>
<p>But terminer shows me &quot;zsh: no matches found: [#3]feature:filter&quot;</p>
<p>Can't i use &quot;[ ]&quot; on branch names?</p>
","2","16445388","",""
"50559877","2132269","2018-05-28 05:50:27","1","1233","<git><git-branch><git-rebase>","Dirty branch on git","<p>I've got a main branch in my project, which got dirty by some bad commits pushed into it (by merging a side branch into it).
Now, in order to restore that main branch fast so others won't get infected, i didn't want to start investigating which commit i can leave and which one is the bad ones. I had a good main branch localy on my pc, which was in the latest version before that bad merge, so what we did is delete the bad remote branch and pushed the local good one to the server.</p>

<p>Except of bad-good practice issues, is there any other problems with the way we solved it?</p>
","0","2132269","",""
"33193121","4162708","2015-10-18 00:35:09","1","278","<git><git-branch><git-pull><git-fetch>","git branch -r shows different remote shared repo in different local working directory","<p>I created a shared repo and then clone it into two folders (A and B). All in the same PC.</p>

<p>Now there are two branches, <code>master</code> and <code>v0</code>. Folder A and B are now in branch <code>v0</code>. On A I deleted the <code>v0</code> branch on remote repo.</p>

<pre><code>$ git push origin --delete v0
To file:///home/nanger/github/shared1.git
 - [deleted]         v0
</code></pre>

<p>and then I tried to pull the remote repo on both A and B (in branch <code>v0</code>):</p>

<p>Now, I see that</p>

<p>on A:</p>

<pre><code>$ git pull
Already up-to-date.

$ git branch -r
origin/master

$ git branch
* master
v0
</code></pre>

<p>on B:</p>

<pre><code>$ git pull
Already up-to-date

$ git branch -r
origin/HEAD -&gt; origin/master
origin/master
origin/v0

$ git branch
* master
v0
</code></pre>

<p>Why do A and B have different views of the remote repo?</p>
","2","4162708","",""
"33197684","1136218","2015-10-18 11:58:41","0","682","<git><version-control><git-branch><git-fetch>","Deleted branches after 'git fetch -p'","<p>I try to delete several branches from my project:</p>

<pre><code>leo:Project leo$ git push origin --delete effects
To https://github.com/gituser/Project.git
 - [deleted]         effects
leo:Project leo$ git push origin --delete viewport
To https://github.com/gituser/Project.git
 - [deleted]         viewport
</code></pre>

<p>But after <code>fetch --prune</code> that says </p>

<blockquote>
  <p>After fetching, remove any remote-tracking references that no longer
  exist on the remote.</p>
</blockquote>

<p>I still have deleted branches on local machine:</p>

<pre><code>leo:Project leo$ git fetch -p
leo:Project leo$ git branch -a
  develop
  effects
* master
  viewport
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
</code></pre>

<p>Any suggestions? </p>
","5","1136218","",""
"33889159","288190","2015-11-24 08:52:50","1","2401","<git><git-branch><git-merge-conflict>","git pull origin branch wants a merge on clean current master branch","<p>I'm on a my master branch which is a perfect clean (but git presents it that it is ahead of origin/master by 14 commits). When I try to pull a different branch from origin (Eagle) git wants me to merge a few files.</p>

<p>This is not what I expect: When pulling a branch it should import the remote branch and leave the current HEAD untouched and not bother me with merge conflicts. In my perception The 2 branches live apart but peacefully from eachother, without any conflicts. But this perception holds no longer.</p>

<p>What causes these conflicts and how to restore 2 different branches without merging?</p>

<p>Below a transcript of the git session on commandline.</p>

<pre><code>HEAD is now at 34e47ab ISS-652 misspelled MockBean in test/ApplicationContext
build@jenkins/p-project/workspace&gt; git status
# On branch master
# Your branch is ahead of 'origin/master' by 14 commits.
#
nothing to commit (working directory clean)
build@jenkins/p-project/workspace&gt; git log -5
.. Same as origin
build@jenkins/p-project/workspace&gt; git push origin master
Everything up-to-date
build@jenkins/p-project/workspace&gt; git status
# On branch master
# Your branch is ahead of 'origin/master' by 14 commits.
#
nothing to commit (working directory clean)
build@jenkins/p-project/workspace&gt; git pull origin Eagle
From ssh://git@stash.europe.intranet:7999/hig/p-project-container
 * branch            Eagle     -&gt; FETCH_HEAD
Auto-merged pom.xml
CONFLICT (content): Merge conflict in pom.xml
Auto-merged p-project-client/pom.xml
CONFLICT (content): Merge conflict in p-project-client/pom.xml
Auto-merged p-project-container-conf/pom.xml
CONFLICT (content): Merge conflict in p-project-container-conf/pom.xml
Auto-merged p-project-container-conf/src/main/resources/dpl/P-Project_Container.xml
CONFLICT (content): Merge conflict in p-project-container-conf/src/main/resources/dpl/P-Project_Container.xml
Auto-merged p-project-container-conf/src/main/resources/was/P-Project_Container-app-env.cfg
Auto-merged p-project-container-ear/pom.xml
CONFLICT (content): Merge conflict in p-project-container-ear/pom.xml
Auto-merged p-project-container-filters/pom.xml
CONFLICT (content): Merge conflict in p-project-container-filters/pom.xml
Auto-merged p-project-container-ldap/pom.xml
CONFLICT (content): Merge conflict in p-project-container-ldap/pom.xml
Auto-merged p-project-container-tomcattest/pom.xml
CONFLICT (content): Merge conflict in p-project-container-tomcattest/pom.xml
Auto-merged p-project-container-web/pom.xml
CONFLICT (content): Merge conflict in p-project-container-web/pom.xml
Automatic merge failed; fix conflicts and then commit the result.
build@jenkins/p-project/workspace&gt;
</code></pre>
","2","288190","",""
"69072229","16841470","2021-09-06 09:27:09","1","94","<git><jenkins><groovy><git-branch>","How can I run a loader script from a git release branch in Jenkins using groovy?","<p>The master branch has a folder that contains a loader (groovy) script which is run using a Jenkins pipeline.</p>
<pre><code>                sh &quot;&quot;&quot;
                set +x
                export JAVA_OPTS='--illegal-access=deny'
                source /var/lib/jenkins/.sdkman/bin/sdkman-init.sh
                sdk install groovy || true
                sdk use java 11.0.7.hs-adpt || true
                cd jenkins/loader
                groovy &lt;script_name&gt; 
</code></pre>
<p>Part of the script is reproduced above. The last two lines is for navigating to the script folder in the master branch and executing the groovy script. The script loads some files from the master branch into the target environment. However, the requirement is to load the files from a release branch instead of master branch. How can this be achieved? Thanks</p>
","1","16841470","0","0"
"17352336","1272259","2013-06-27 20:12:42","2","884","<git><git-branch>","How can I stop git from moving my changes between branches?","<p>I am new to git, and coming from clearcase, I do not understand why the following happens:</p>

<p>Say I create a git private dev branch and do some changes to my files therein. </p>

<p>Now, I need to do some other unrelated work and checkout the master branch.</p>

<p>Git automatically brings my changes over from my private branch to my local master. </p>

<p>I find this very counter intuitive. The reason I had the private dev branch was because I didnt want my changes to go to other places till I was ready. Why is git moving them around without my saying so. </p>

<p>Yes, there is git stash, but once you have a couple of devs going in parallel or you need to switch often, its a chore to keep track of stashes. I would rather that the changes are not taken around with branch checkouts. And horrors befriend you if you forget to stash at a frenzied moment.</p>

<p>Am I missing some config that would avoid this? </p>

<p>Thanks a much!</p>
","1","1272259","0","0"
"17415600","1880077","2013-07-02 00:23:01","0","224","<git><git-branch>","Why does 'git branch -r --contains' give this?","<p>I'm using <code>git branch -r --contains &lt;SHA1 Hash&gt;</code> to deduce what commits went on which branch. For changes to master it gives:</p>

<pre><code>git branch -r --contains efdf37fd440f79a6f728412b612d3624790eb62f
  origin/HEAD -&gt; origin/master
  origin/master
</code></pre>

<p>Why is <code>origin/HEAD -&gt; origin/master</code> there &amp; can I get rid of it?  For commits on a branch it only shows <code>origin/&lt;branch name&gt;</code> - which is what I want.</p>
","0","1880077","",""
"17425624","816213","2013-07-02 12:27:12","2","233","<git><git-branch><author>","How to determine the author of a branch in git","<p>There are multiple guys working on a git repository and all of them have write access to it.
Someone by mistake has created random branches on the repo. How can we know who is the owner of these branches ?</p>

<p>Is there a way to identify the following things:</p>

<ol>
<li>Who created a particular branch ?</li>
<li>When was the branch created ?</li>
</ol>
","0","816213","",""
"17429091","964335","2013-07-02 15:04:27","20","23467","<git><branch><git-branch><rebase><git-rebase>","git move locally committed changes to the new branch and push","<p>I am on <code>master</code>. When I do git status I am told</p>

<pre><code>$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 13 commits.
#   (use ""git push"" to publish your local commits)
#
nothing to commit, working directory clean
</code></pre>

<p>So all 13 only exist on my local machine. The problem is that these 13 commits are now supposed to go on a new branch that I should create and push onto the server. I have tried looking at rebase but I am told</p>

<pre><code>$ git rebase origina/master
fatal: Needed a single revision
invalid upstream origina/master
</code></pre>

<p>How would I go about pushing these changes into a new branch without messing up the master?</p>

<p>Just to clarify. This is not a duplicate of<br>
<a href=""https://stackoverflow.com/questions/5066041/git-moving-committed-but-not-pushed-changes-to-a-new-branch"">moving committed (but not pushed) changes to a new branch</a> this one simply does not work for me no matter what I do.
<br>or<br>
<a href=""https://stackoverflow.com/questions/3228457/git-howto-move-changes-since-last-commit-to-a-new-branch"">Git: Howto move changes since last commit to a new branch</a> again is of no help.</p>
","9","964335","0","0"
"69091601","168738","2021-09-07 16:19:46","6","1263","<git><git-branch>","git branch displays my branch names in a VIM window, instead of in my current iterm2 window","<p>Not sure why this is happening.</p>
<p>I use iterm2, and have .zshrc bash</p>
<p>When I run <code>git branch</code></p>
<p>It displays my branches &quot;in a new window&quot; is there a way to fix this?</p>
<p><a href=""https://i.stack.imgur.com/Zqi18.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Zqi18.png"" alt=""enter image description here"" /></a></p>
<p>My config:</p>
<pre><code>alias projects=&quot;cd ~/Projects&quot;


# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=~/.node/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=&quot;/Users/lgaban/.oh-my-zsh&quot;

# Set name of the theme to load --- if set to &quot;random&quot;, it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME=&quot;robbyrussell&quot;

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot; )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE=&quot;true&quot;

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE=&quot;true&quot;

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE=&quot;true&quot;

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT=&quot;true&quot;

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=&quot;true&quot;

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS=&quot;true&quot;

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE=&quot;true&quot;

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION=&quot;true&quot;

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS=&quot;true&quot;

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS=&quot;mm/dd/yyyy&quot;

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH=&quot;/usr/local/man:$MANPATH&quot;

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS=&quot;-arch x86_64&quot;

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig=&quot;mate ~/.zshrc&quot;
# alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;
</code></pre>
","4","168738","0","0"
"34005686","3362364","2015-11-30 18:44:36","0","123","<git><github><git-branch><git-checkout>","Mistakenly created a new branch and git won't pull","<p>We have 2 branches. One is <strong>live</strong> and the other is <strong>admin</strong>. We just moved to a paid github account and I was working on <strong>live</strong>.</p>

<p>After git push, when i type ""git branch"", only <strong>live</strong> shows up. I don't know why. Mistakenly, i typed ""git branch admin"" instead of ""git checkout admin"" and I think this created a clone of the <strong>live</strong>. </p>

<p>I can't access the <strong>admin</strong> branch anymore! What should I do?</p>
","2","3362364","",""
"17528225","1578946","2013-07-08 13:43:22","17","23246","<git><git-merge><git-branch><branching-and-merging>","git pushing to a branch post merge","<p>If I push to a branch after merging it with <code>master</code>, how will git handle it (Update the latest commits pushed in branch to <code>master</code> automatically OR do nothing OR do something else) ?</p>
","0","1578946","0","0"
"69105182","1079483","2021-09-08 14:43:45","-1","68","<git><git-branch>","Updating .git with newly created remote branch","<p>Context:</p>
<ul>
<li>working on branch A</li>
<li>branch B has been created remotely and being updated</li>
<li><code>git branch -a</code> does not show branch B</li>
</ul>
<p>How can branch B be checked out?</p>
","0","1079483","",""
"34089089","631619","2015-12-04 13:05:17","12","2734","<git><git-branch><git-merge><git-checkout><git-squash>","How to squash my git branch commits into the same branch without rebasing?","<p>I have a local branch, we're using git-flow with Pull Requests and I'm looking to squash a few commits after receiving PR feedback.</p>

<p>How can I squash all my commits (from PR's for example) into the same branch?</p>

<p>I imagine it would be something like:</p>

<pre><code>git checkout master                    # For master
git pull                               # Get all branches up-to-date
git checkout feature1                  # Checkout the branch
git checkout -b feature1_squash        # Make a copy of the branch
git branch -D feature1                 # Delete original branch
git checkout master                    # (?) Branch off latest master for safety
git checkout -b feature1               # Make new (empty) original branch
git merge --squash feature1_squash     # Merge with squash into it
git push -f feature1                   # Push, force will be required
</code></pre>

<p>but I'm not sure.<br>
With that many steps it also seems like a good case for using a function to tie it all together and just pass the branch name as a parameter.  Of course automating it would mean making sure to handle errors, exceptions, edge cases, etc.</p>

<p>I don't want to use interactive rebase because it's a little tricky to get right for newbies that I train.  I also don't want to have to know the number of commits, I just want to do all the ones that exist on this branch.</p>
","2","631619","0","0"
"17558679","1023812","2013-07-09 21:34:42","5","2540","<git><git-branch><branching-and-merging>","Delete git master branch on a private server (not GitHub)","<p>I have a project hosted on my own personal git server (it is not on GitHub). The <code>master</code> branch is a stale old cookie, and I don't need it anymore.</p>

<p>A couple of months ago I created a <code>0.8/develop</code> branch off of <code>master</code> and since then we've gone through <code>0.8/master</code>, <code>0.9/develop</code>, <code>0.9/master</code> and we're currently on <code>1.0/develop</code>. I'd like to get rid of the <code>master</code> branch, mainly because it doesn't match the naming convention that we've established. It's just a matter of housekeeping.</p>

<p>I found several related questions on SO, as well as a blog post, but they all seem to be specific to use of GitHub, and not my own private server:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/12208751/i-cant-delete-a-remote-master-branch-on-git"">I can&#39;t delete a remote master branch on git</a></li>
<li><a href=""http://matthew-brett.github.io/pydagogue/gh_delete_master.html"" rel=""nofollow noreferrer"">http://matthew-brett.github.io/pydagogue/gh_delete_master.html</a></li>
</ul>

<p>These both specifically say something to the effect of:</p>

<blockquote>
  <p>You need to go to the main GitHub page for your forked repository, and
  click on the 'Settings' button.</p>
</blockquote>

<p>Of course, this is not an option as I'm not using GitHub. I'm guessing that I can edit the contents of the config file in my bare repo to achieve the same results. Is that correct? The config file currently looks like this:</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = true
        bare = true
        logallrefupdates = true
        ignorecase = true
        precomposeunicode = false
        sharedRepository = group
[remote ""origin""]
        url = file:///Library/WebServer/Documents/loupe
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch ""master""]
        remote = origin
        merge = refs/heads/master
</code></pre>

<p>I have two questions:</p>

<ol>
<li>Should I set my default repo to my current working branch (<code>1.0/develop</code>), or the oldest branch that's left (<code>0.8/develop</code>)?</li>
<li>What modifications do I need to make to the config file to set the default repo?</li>
</ol>
","7","1023812","0","0"
"17569756","1335290","2013-07-10 11:42:15","1","501","<git><branch><git-branch><git-stash>","How does one divide changes among multiple branches in git?","<p>What is the ""best"" (read: ""easiest"", ""preferred"", ""proper"") way to divide up a set of changes among multiple branches in git? For example, assume I have made a set of (uncommitted) changes while working on branch X, but some of the changes really need to be committed to branch Y, others to branch Z, and still others to branch W; normally what I would do instinctively (like recommended <a href=""https://stackoverflow.com/questions/2944469/how-to-commit-my-current-changes-to-a-different-branch-in-git"">here</a>) is to stash the changes, checkout Y, apply the changes, commit only what's relevant to Y, and repeat for the other branches. The problem I run into with this is that applying the stashed changes often results in merge conflicts that have to be handled, and if I do a stash pop instead of apply (which happens often enough to be a real risk for me!), I end up intermingling changes intended for Z in the Y branch and they have to be disentangled manually.</p>

<p>Is there a better way? How better could I handle this situation?</p>

<p>Note that my question is related to questions like <a href=""https://stackoverflow.com/questions/2944469/how-to-commit-my-current-changes-to-a-different-branch-in-git"">this one</a>, but is different in that I seek the best way to divide a current set of changes among multiple branches. Also note that I cannot switch to Y, Z, or W prior to developing the set of changes; I have to start on X and develop the set of changes on X.</p>
","6","1335290","",""
"50766201","2372748","2018-06-08 18:04:21","0","869","<git><git-branch><git-submodules>","""no branch"" on git submodule","<p>I'm working on a git project relying on a git submodule pointing to an outdated commit which is not usable for the main project. After successfully updating the master branch of this submodule to the commit I would like to use, grabbed from an external repository, I go back to the parent of the submodule, the main project, and issue <code>git submodule update</code> as I understood this is the correct way to make the parent know about the update. However, if I now move back to the submodule folder I see I'm on (no branch) which is still the branch of the old unusable commit. In the submodule I do see the updated master branch to version I would like to use. This leads me to think that I did not manage to correctly update the submodule to my preferred commit. Or should I not update the submodule from the main project? </p>

<p>Thank you!</p>
","0","2372748","",""
"34213120","117714","2015-12-10 22:45:46","15","2286","<git><git-branch><git-rebase>","find branch name during git rebase","<h2>What?</h2>

<p>Is there a way to find the name of the branch-being-rebased during an interactive rebase, that is better than parsing <code>.git/rebase-merge/head-name</code>?</p>

<h2>Details</h2>

<p>Normally I use <code>git rev-parse --abbrev-ref HEAD</code> to get the branch name.  But during a rebase the branch is in a detached head state and rev-parse returns <code>HEAD</code>.  </p>

<p>So now I'm parsing the <code>.git/rebase-merge/head-name</code> file if it exists to pull out the branch name.  Is there a method (porcelain or otherwise) to get this data?</p>

<h2>Usage:</h2>

<pre><code>git checkout ""the_branch_name_I_want""
git rebase -i ""some_other_branch_sha_etc""
# mark commit for edit ...
git magic-command # I'd like to get back ""the_branch_name_I_want""
git rebase --continue
</code></pre>

<h2>Why?</h2>

<p>Why do I want to do this?  </p>

<p>I store metadata about the branch and fetch it in my <code>commit-msg</code> hook to append to my commit message.  I want this to work when <code>reword</code>ing or <code>edit</code>ing my commit messages during interactive rebase.</p>

<h2>Code:</h2>

<pre><code>branch=$(git rev-parse --abbrev-ref HEAD 2&gt;/dev/null)
if [ ""$?"" -ne 0 ]; then
    echo ""not in a git repo!""
    exit 2
fi
if [ ""$branch"" = ""HEAD"" ]; then
    # check if we are in a rebase
    head_name_file=""$(git rev-parse --git-dir)/rebase-merge/head-name""
    if [ -f ""${head_name_file}"" ]; then
        branch=$(cut -f3- -d/ $head_name_file)
    else
        # ignore DETACHED HEAD state.
        exit 1
    fi
fi
## do something with branch
</code></pre>
","7","117714","0","0"
"34259843","414058","2015-12-14 04:35:25","7","1466","<git><version-control><merge><git-branch><branching-and-merging>","git checkout: detailed meaning of ""theirs"" and ""ours""","<p>The <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-checkout.html"">git checkout documentation</a> says:</p>

<blockquote>
  <p><strong>--ours</strong>
  <strong>--theirs</strong>
  When checking out paths from the index, check out stage #2 (<em>ours</em>) or #3 (<em>theirs</em>) for unmerged paths.</p>
</blockquote>

<p>What's the meaning of ""stage #2"" and ""stage #3"" during merge, rebase and cherry-pick? Is there a way to query theses ""stages"" before running the command to make sure it will retrieve the correct version?</p>
","0","414058","0","0"
"34263922","764737","2015-12-14 09:51:00","3","923","<git><git-branch>","Is there a way to shorten branch names in git commands?","<p>When I work on a bigger project, I use long branch names, eg. <code>dev/username/PROJECT-JIRANUM_some_description</code>.
It would be cool to be able to do sth like this:</p>

<pre><code>git branch -D STH(xxxx)
</code></pre>

<p>Where STH() is some syntax that would use some glob-like matching of branch names (so that xxxx could be a JIRA number contained in branch name). If there is ambiguity, git would inform and abort the command.</p>

<p>It sth like this is possible at the moment? I could not find any information on this.</p>
","5","764737","",""
"50800968","6069097","2018-06-11 15:13:15","2","1335","<git><git-branch>","Git - already on branch in commandline, but branch not available in git plug-in for Atom","<p>I have a remote branch of my Gitlab project that is active in the terminal. When I run <code>git checkout branch</code> it comes back <code>already on branch</code>.</p>

<p>However, in the Git tab in Atom, the branch tab only lists three of my current seven branches. In command line, running <code>git branch -r</code> returns ten branches, which includes deleted and/or merged branches.</p>

<p>Running <code>git fetch</code> returns </p>

<pre><code>From gitlab.com:zeesy/project
 * [new branch]      branch        -&gt; origin/branch
</code></pre>

<p>What is happening here? I'd like to be able to edit my files in Atom, and then push to Git.</p>

<p>Running <code>git branch -a</code> returns</p>

<pre><code>* branch
  baby-steps-demo
  lit-html-demo
  master
  webapp
  working-demo
  archaeological-record
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/branch
  remotes/origin/archaeological-record
  remotes/origin/baby-steps-demo
  remotes/origin/js
  remotes/origin/lit-html-demo
  remotes/origin/master
  remotes/origin/split-pages
  remotes/origin/webapp
  remotes/origin/working-demo
</code></pre>

<p>note that <code>baby-steps-demo</code> no longer exists in the GitLab project.</p>

<p>Running <code>git pull &amp;&amp; git checkout branch</code> results in</p>

<pre><code>There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; branch
</code></pre>

<p>Which suggests there is no remote branch. However, the branch is completely accessible from Gitlab.</p>
","6","6069097","",""
"50810299","210029","2018-06-12 06:13:24","-1","37","<git><branch><git-branch>","Is it possible to default the `--force` parameter in `git branch --delete`?","<p>The <code>git branch --delete</code> (<code>git branch -d</code>) will show a warning, if it won't be reachable after deletion. The option <code>--force</code> (<code>-D</code>) will force the deletion.</p>

<p>Is it possible to configure git so that <code>git branch -d</code> behaves as <code>git branch -D</code>?</p>
","2","210029","",""
"19523910","280602","2013-10-22 16:55:54","0","67","<iphone><ios><git><branch><git-branch>","iOS multiple projects and git branches","<p>Im not an expert at git, but I have a iOS project that has code that I would like to reuse.  I will be switching out images and a little data to make each application different. I know you can do this with the targets approach but I wanted to keep everything seperate and out of the original xcode project.  So my question is, do I create a branch for each new project, and if so what is the correct terminology or command to grab bug updates from the original code base into my new branch from the main branch?  The new branch will never commit back to the master branch also.</p>
","0","280602","",""
"38624567","714112","2016-07-27 23:03:16","3","1344","<git><bash><git-branch>","git branch output without indent whitespace? (besides regex manipulation)","<p>Is there a <code>git branch</code> option that will print all branches without the two spaces in front of the branch name? I thought <code>--porcelain</code> would be supported but apparently not for branch listing.</p>

<p>What I'm trying to do: I want to script deletion of merged branches without using low level regex manipulation like one would with <code>awk</code>, or in my case perl (so that my script is elegant and readable):</p>

<pre><code>git branch | perl -pe 's{^\s*}{}g' | xargs -n 1 git branch -d
</code></pre>

<p>(Off topic, but for those who tend to hoard and hate deleting, this is a nice quick way to purge what you really don't need and keep a clean repo)</p>
","6","714112","0","0"
"38637167","1833945","2016-07-28 13:00:53","0","48","<git><version-control><git-branch><git-log>","How exactly mean this graph obtained by git log?","<p>I am absolutly new in <strong>GIT</strong> and I have the following doubt.</p>

<p>Into a project on which I am working on I do:</p>

<pre><code>Andrea@Andrea-PC MINGW64 ~/Documents/WS_vari/version-control/asteroids (master)
$ git branch
* master
</code></pre>

<p>So it should bean that I have only the <strong>master</strong> branch in this project. Is it my interpretation correct?</p>

<p>Then I want to see the graph related to the commitment of this project performing:</p>

<pre><code>git log --graph --oneline --decorate=full --all
</code></pre>

<p>and this is my output:</p>

<pre><code>Andrea@Andrea-PC MINGW64 ~/Documents/WS_vari/version-control/asteroids (master)
$ git log --graph --oneline --decorate=full --all
* cba1887 (HEAD -&gt; refs/heads/master) fixing: fixed the bug related of the weapo
n delay
* 3884eab (refs/remotes/origin/master, refs/remotes/origin/HEAD) Add color
* 3e42136 now using requestAnimationFrame
* 4035769 frame interval was set wrong after game was paused
* 25ede83 a couple missing ends with the ipad version
* df03538 I can't spell 'screen' apparently :)
| * 354dfdd (refs/remotes/origin/coins) Make ships able to spawn on coins
| * 0c6daf1 Make it possible to collect coins
| * a3c0ae4 Create helper functions
| * 656b02e First pass at adding coins
|/
* b0678b1 Revert controls
* f19cb1b Fix typo in space
* 75928a9 Use space for movement and enter for shooting
* ac83b72 mostly finished ipad version
* 7ca4826 trying to get div touch controls to work

....................................................................
....................................................................
....................................................................
</code></pre>

<p>So I think that it means:</p>

<p>1) The last commit have id <strong>cba1887</strong> and this commit is into the <strong>master</strong> branch.</p>

<p>My problem is on this section of the graph:</p>

<pre><code>* df03538 I can't spell 'screen' apparently :)
| * 354dfdd (refs/remotes/origin/coins) Make ships able to spawn on coins
| * 0c6daf1 Make it possible to collect coins
| * a3c0ae4 Create helper functions
| * 656b02e First pass at adding coins
|/
</code></pre>

<p>So it seems to me that it is creating a new branch having id <strong>df03538</strong> (the branch can have an ID or am I missing something?) and label <strong>I can't spell 'screen' apparently :)</strong>.</p>

<p>This branch contains 4 commits with ids <strong>354dfdd, 0c6daf1, a3c0ae4, 656b02e</strong>.</p>

<p>Is it my interpretation correct or am I missing something?</p>

<p>If my interpretation is correct and this is a new branch why I can't see it into the list of branches obtined by the previous <strong>git branch</strong> statment that show only the <strong>master</strong> branch?</p>
","3","1833945","",""
"17820298","71543","2013-07-23 20:22:21","0","44","<git><git-branch>","git branch -r is not displaying the same remotes as a colleagues computer","<p>I am thinking I have a git workflow problem here. I was cleaning up some remote branches and realized when helping out a colleague that both of our git references are ""out-of-sync"" some how.</p>

<p>For instance, if I open up git bash and type in the command ""git branch -r"" I get a list back like this:</p>

<ul>
<li>origin/branch1</li>
<li>origin/branch2</li>
<li>origin/branch4</li>
</ul>

<p>now when I have my colleague do the same thing in their git bash prompt we get a list like back like this:</p>

<ul>
<li>origin/branch1</li>
<li>origin/branch3</li>
<li>origin/branch7</li>
</ul>

<p>Notice that my colleague and I also have a case where we are seeing the same remote branch ""branch1"". This is what I would expect from running the bash command. What confuses me is the question ""How come we have older and non existent branches still being returned.""</p>

<p>How can I sync up both of our machines so that if we both run the ""git branch -r"" command, that we are returning the same information with regards to our remote repo.</p>

<p>Thanks all!</p>
","0","71543","",""
"17836058","1003575","2013-07-24 13:53:07","3","49","<git><git-branch>","Why isn't the branch name shown in the git history?","<p>I have a code that I downloaded with git. In the code I create a new branch for my modifications with the following command:</p>

<pre><code>git checkout -b branch_5
</code></pre>

<p>After finishing the edit of the files, I made a local commit</p>

<pre><code>git commit -a
</code></pre>

<p>And then I created the patch. But I m not able to see the name of the new branch in the history neither in the generated patch file.</p>

<p>Any explaination ? Am I missing something in the creation of the new branch?</p>

<p>Where I can find the information concerning the new branch?</p>
","0","1003575","0","0"
"38960327","2241986","2016-08-15 17:56:37","0","944","<git><merge><git-branch><git-merge><branching-and-merging>","Develop two branches in parallel in git","<p>I'm working on a test suite for our application. My work goes into branch B. Meanwhile someone else is working on branch A.</p>

<p>I want to periodically merge B into A with --squash, and after fixing the conflicts, update B to look like A.</p>

<p><strong><em>Most importantly, I need git to understand that after I do the above, there should be a new merge base.</em></strong></p>

<p>I don't want to create a new branch ""B_2"" after, because I want my history of B to be in one place. (And A does not need to be polluted with work-in-progress commits from B, hence the squash).</p>

<p>I also don't want to rebase all the work in B on top of A, because it's possible that the changes in the original commits of B won't make any sense when replayed on top of a modified code base from A.</p>

<p>My initial attempt was:</p>

<pre><code>git checkout A
git merge B --squash
*fix conflicts, commit*
git checkout B
git merge -s recursive -X theirs A --squash
</code></pre>

<p>This lets me have two near identical branch heads, except that the merge-base of the two branches is the original commit from which branch B was split off. Further merges then become a nightmare.</p>

<p>Is there some preferably not too convoluted way of doing what I want?</p>
","6","2241986","",""
"57875192","","2019-09-10 16:49:25","0","831","<git><branch><git-branch><git-flow>","Forgot to do git flow feature start; what now?","<p>My local repository is on branch <code>develop</code>.</p>

<p>We're using Git Flow and I'm supposed to work on a new feature on a separate branch. Normally, I'd do <code>git flow feature start ""whatever""</code> before commiting my changes; this time, however, I forgot. Fortunatelly I didn't push this mess yet.</p>

<p>Now I can obviously rescue the situation by (a) copy-pasting my current work to another directory (b) undoing my last unpushed commits from <code>develop</code>; (c) issuing <code>git flow feature start ""whatever""</code>; (d) copy-pasting my work from this other directory onto my local git repo; (e) re-commiting.</p>

<p>I'm curious, however, if this can be avoided? That is: if I can create this branch I did not create on time and move my commits and current work to this branch without copy-pasting files? What git commands would I have to issue to achieve this?</p>
","0","","",""
"35048586","655560","2016-01-27 21:40:22","4","2785","<git><branch><git-branch><git-flow>","How can I switch git branches when there is an untracked file error?","<p>Using SourceTree when I try to switch back to master from a feature branch I created I get an error:</p>

<pre><code>Updating the following directories would lose untracked files in it
</code></pre>

<p>I want to switch back to master to make another feature branch but am unable to do so. </p>
","0","655560","",""
"57984507","7693832","2019-09-18 03:07:14","1","54","<git><git-branch>","git checkout -b dev remote_repo/dev do not get all commits from remote","<p>This is my remote <code>dev</code> branch log:</p>

<pre><code>[root@www admin_site]# git log -n4
commit 5852c812ddeb9b8611f1142de3d5048b99974011
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Tue Sep 17 16:39:46 2019 +0800

    '2019-09-17-wxc-02'

commit 99daaedb179979e71d9c8a302865980c9717073f
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Tue Sep 17 16:26:30 2019 +0800

    '2019-09-17-wxc-01'

commit a2b22ff9245f1ee82109d0ac3b003fd403d8d3b1
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Wed Sep 11 05:30:03 2019 +0800

    '2019-09-11-wxc-02'

commit 67584611401876ac4f51f306c9dbea2b9fd84ca9
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Wed Sep 11 05:18:14 2019 +0800

    '2019-09-11-wxc-01'
</code></pre>

<p>and in my local repo I create the branch base on the remote <code>dev</code> branch:</p>

<pre><code>$ git checkout -b dev remote_repo/dev
</code></pre>

<p>But when I log it I only get two commits, there lost two commits:</p>

<pre><code>$ git log -n4
commit a2b22ff9245f1ee82109d0ac3b003fd403d8d3b1 (HEAD -&gt; dev, remote_repo/dev)
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Wed Sep 11 05:30:03 2019 +0800

    '2019-09-11-wxc-02'

commit 67584611401876ac4f51f306c9dbea2b9fd84ca9
Author: peter &lt;429186dd7@gmail.com&gt;
Date:   Wed Sep 11 05:18:14 2019 +0800

    '2019-09-11-wxc-01'
</code></pre>
","0","7693832","",""
"19612439","172617","2013-10-26 22:09:09","31","21040","<git><git-branch>","Forgot to branch in git, need to move changes from master","<p>I eagerly ducked into code mode and modified some files, but neglected to branch from master first.  The mods aren't so extensive that I can't redo them, but what's a good way of taking my (so far, uncommitted) changes in master and migrating them to a new branch, leaving master untouched in the end?</p>
","2","172617","0","0"
"20659772","1708393","2013-12-18 13:40:22","-1","65","<git><git-branch>","Deleting Branches in git","<p>What is the difference between <code>git branch -d branch_to_delete</code> and <code>git branch -D brach_to_delete</code>? </p>

<p>I have performed this two commands on different occasions. one I performed when a branch was not fully merged.</p>
","0","1708393","",""
"22196724","2002029","2014-03-05 11:41:51","3","287","<linux><git><linux-kernel><git-svn><git-branch>","Sending email by using git-send-email","<p>I am supposed to be using git-send-email command to send out patches to the community. I am not sure how to use it properly. I have to send around 5 patches to the linux-wireless mail forum. Do I need to commit the code via git first  and then send out a mail using git-send-email? I am also supposed to send a cover letter along with this. Not sure of what the cover-letter means and how to do it. Can someone help me out?</p>
","2","2002029","0","0"
"42262156","6082991","2017-02-15 23:36:50","-2","33","<git><version-control><git-branch><branching-and-merging>","Difficutly sorting changes between git branches, changing branches","<p>I have 3 branches in a project that should've been all discretely separate from the beginning, but alas, I'm still learning git and they got muddled together about halfway through my work.</p>

<p>Currently I can switch between <code>master</code> and my <code>dev-1</code> branches. In doing so, I get a display of </p>

<p><code>M       this/is/a/file.path
M       this/is/also/a/file.path
M       this/is/a/file.path</code></p>

<p>and I cannot switch two my <code>dev-2</code> branch without committing or stashing changes, which I don't think I want to do yet.</p>

<p>I would first like to know what the output above actually means. I've found examples that say those files have been modified, which is true, but why do I not have to stash or commit them before switching between <code>master</code> and <code>dev-1</code>?</p>

<p>Furthermore, I'd like my <code>master</code> branch to be completely clean and only have changes on my <code>dev-1</code> and <code>dev-2</code> branches, but I am not sure the best ways to accomplish this, as my <code>master</code> and <code>dev-1</code> branches seem to share information.</p>
","2","6082991","",""
"19378880","1408611","2013-10-15 10:26:53","4","724","<git><merge><git-branch><git-merge>","How to connect unconnected git histories?","<p>we have a quite strange git history in our project. First, there was another project which might have the following history:</p>

<p>repo1:</p>

<pre><code>a---b---c
</code></pre>

<p>then there was our project which had</p>

<p>repo2:</p>

<pre><code>u---v---w
</code></pre>

<p>as we needed repo1 in the code of repo2, a ""smart"" programmer used read-tree to read the last commit (c) of repo1 into w, so now we had</p>

<pre><code>u---v---w---w'
</code></pre>

<p>where w' had the commit c in it without having its history. Then there were some changes to both repositorires resulting in the following histories:</p>

<pre><code>a---b---c---d---e

u---v---w---w'---x---y
</code></pre>

<p>now we want to clean up the mess and incorporate the changes of repo1 into our repository. However, when simply merging the two repositories, we gain an extreme number of conflicts, as the branches do not share history (actually they do, but git doesn't know), so git cannot perform a three way merge.</p>

<p>So how can we do the three way merge? Is there a way to ""add"" the missing history edge, i.e. create something like this:</p>

<pre><code>a---b---c---d---e
          \
u---v---w--w'---x---y
</code></pre>
","0","1408611","0","0"
"35579012","5251129","2016-02-23 13:36:01","0","97","<ruby-on-rails><git><migration><git-branch>","Is it possible that a rails migration file would be common for 2 different git branches?","<p>I created a new branch for new changes</p>

<pre><code>git checkout -b my-new-branch
</code></pre>

<p>Then I made a new migration and it created a new migration file. I decided to cancel this migration so I did:</p>

<pre><code>git checkout master
git status
</code></pre>

<p>and I have noticed that I have this new migration file in the master branch.<br/>
<strong>Why did it happen?</strong></p>
","3","5251129","",""
"19380840","1444019","2013-10-15 12:08:36","28","12208","<git><version-control><git-branch>","What happens in the child branch if I delete a parent branch in git","<p>I am planning to rename a branch in my git repository. I found out that the easy way to do that is to make a new branch from that branch and give it the desired name. </p>

<p>After that I want to delete the old branch (the parent). But I'm afraid that I will lose data in my new branch if I do that. </p>

<p>What happens with the commits originally made to the parent branch if I delete that branch?</p>
","0","1444019","0","0"
"35580776","4469988","2016-02-23 14:56:51","-1","105","<git><github><git-branch>","Unable to find the newly created git remote branch from command prompt","<p>Configured git repository locally able to work without any issue. Then I created new branch from git web interface for new task. Now the problem is unable to checkout the newly created branch.</p>

<p><code>git checkout new-branch-name</code> giving following message.</p>

<blockquote>
  <p>error: pathspec 'dev-SE-1844' did not match any file(s) known to git.</p>
</blockquote>

<p>Also tried with the command <code>git branch -r</code> but unable to find the created branch in the list.</p>
","2","4469988","0","0"
"51152644","4811421","2018-07-03 10:46:39","1","1505","<git><version-control><branch><git-branch><vcs-checkout>","how to check nesting structure of local git repository","<p>I am working on a big product as a developer, I have many local branches, I wanted to visualize the git branch nesting workflow, i.e. say</p>

<pre><code>master---------
     \
      \
      branch a--------
              \
               \
                branch child----
</code></pre>

<p>How can I get something like this
I searched a lot but I found workarounds, which won't be useful in my case, like checking the complete log, etc, is there another way towards this issue.</p>

<p>Also previously another developer who left the company was working on the same pc and repo, so there are more than 50 branches so it's very essential for me to understand the workflow he was having in local</p>
","4","4811421","",""
"39898345","294813","2016-10-06 14:12:19","2","512","<git><git-branch><git-checkout>","git branch -f and git checkout in one step","<p>Sometimes I need to move a branch to my current commit. There is two ways I can do it:</p>

<pre><code>git checkout foo
git reset --hard HEAD@{1}
</code></pre>

<p>I don't like this because this way I have to change the working directory twice. A better option is this:</p>

<pre><code>git branch -f foo
git checkout foo
</code></pre>

<p>This is better, but I would like to do it in one step, just like when I switch to a new branch <code>git checkout -b</code>. Unfortunately, <code>git checkout -f -b foo</code> doesn't work.</p>
","0","294813","",""
"51177180","7924924","2018-07-04 15:39:59","1","330","<bash><git><shell><git-branch>","create a git branch with the current system date","<p>i will be running a automated deployment on every day.</p>

<p>so i need to create a child branch from develop, is there any way to create a branch from develop with the current system time. just like below</p>

<blockquote>
  <p>git checkout -b 'date +""%d-%m-%y""-dev-release-""%I""'</p>
</blockquote>
","0","7924924","",""
"6019113","87973","2011-05-16 14:47:24","7","3466","<git><git-remote><git-branch>","How to follow a file in git","<p>I have deleted a file a couple of times in git, but it keeps turning up again as other branches are merged; I guess something like this:</p>

<pre><code>                      o--  a topic  --o
                     /                 \
o-- [create file] --o-- [delete file] --o-- [file exists again]
</code></pre>

<p>It's especially hard for me to grasp what's going on since we work with git using ""internal releases"", i.e. I create release branches that I push, which our release manager pulls and merges down to master and I pull his master.</p>

<p>How can I find out where I (or someone else) deleted a file and what merge(s) that re-introduced the file? Thanks!</p>
","1","87973","0","0"
"51222240","6381081","2018-07-07 10:25:36","1","7282","<git><git-branch>","How to know working directory refers to which branch in git?","<p>According to some researches I figured it out that git keeps two version of the code in two places:</p>

<ul>
<li><code>.git/refs/heads</code> (local repository) </li>
<li><code>.git/refs/remotes/</code> (working directory)</li>
</ul>

<p>First of all, is my understanding ok?</p>

<p>Then I need to know both <code>head</code> and <code>working directory</code> are referring to which branch. There are two commands:</p>

<ol>
<li><p><code>cat .git/head</code></p></li>
<li><p><code>git branch</code></p></li>
</ol>

<p>Can you please tell me those two commands refers to which one? (either the branch that is in the <code>head</code> or the branch that is in the <code>working directory</code>) ?</p>

<p>And when you run <code>git status</code>, will your changes be compared with the version which is in the <code>head</code> or <code>working directory</code>?</p>
","1","6381081","0","0"
"35628793","3607573","2016-02-25 13:34:14","1","2250","<git><git-branch><git-commit><git-stash>","using git stash to move the changes to a different branch","<p>In git if we are accidentally working on a different branches and we do not wish to commit the untested code, I have seen people using stash to save the uncommitted changes, switch to the correct branch and then apply the stash.</p>

<p>As far as I understand, if we have made some changes which is not committed, we can simply move to the correct branch and commit the code. Why do we even need to stash it since changes that are uncommitted will be visible in all the branches.</p>

<p>I remember seeing in some documentation that git will not allow you to switch between branches if you have any uncommitted changes. Is there something I am missing?</p>
","0","3607573","",""
"52691824","702948","2018-10-07 18:57:13","1","1062","<git><version-control><bitbucket><git-branch>","git track branch by default","<p>By default, I would like git to always track a branch on <code>origin</code> with the same name, unless I specifically set the upstream branch to something else, for both <code>push</code> and <code>pull</code>.  But that is not the behavior I am seeing.</p>

<p>When I run the following:</p>

<pre><code>$ git branch -b foo
$ git push
Everything up-to-date
</code></pre>

<p>But my new branch <code>foo</code> does not exist is Bitbucket unless I add the the remote and branch to the command with <code>git push origin foo</code>.  And even then, it will start tracking for <code>push</code>, but not <code>pull</code>.</p>

<pre><code>user@host [~/git/repository] &lt;foo&gt; $ echo 'test' &gt;&gt; test.txt
user@host [~/git/repository] &lt;foo&gt; $ git add test.txt
user@host [~/git/repository] &lt;foo&gt; $ git commit -m 'test'
[foo 376b03b] test
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
user@host [~/git/repository] &lt;foo&gt; $ git push
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 277 bytes | 277.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote:
remote: Create pull request for foo:
remote:   https://bitbucket.host.com/projects/PROJ/repos/repository/compare/commits?sourceBranch=refs/heads/foo
remote:
To ssh://bitbucket.host.com:7999/proj/repository.git
   34c6308..376b03b  foo -&gt; foo
user@host [~/git/repository] &lt;foo&gt; $ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; foo

user@host [~/git/repository] &lt;foo&gt; $
</code></pre>

<p>I know I can set it to track for both <code>push</code> and <code>pull</code> with <code>git push -u origin foo</code>, but I'm wondering if it's possible to set some config value so that, by default, <code>push</code> will always push to the branch on <code>origin</code> with the same name, and <code>pull</code> will always pull from the branch on <code>origin</code> with the same name, so that I can just do this:</p>

<pre><code>$ git checkout -b foo
$ #make changes
$ git commit -am 'changes'
$ git push
$ #someone else makes changes
$ git pull
</code></pre>

<p>And it will work.</p>
","3","702948","",""
"51475525","2899096","2018-07-23 09:27:38","12","3948","<linux><git><scripting><git-branch>","Check if a git branch is ahead of another using a script","<p>I have <code>branch1</code> and <code>branch2</code> and I want some sort of:</p>

<p><code>git branch1 isahead branch2</code></p>

<p>That will show if <code>branch1</code> has commits that <code>branch2</code> doesn't have (and possibly specify those commits too). I can't check diff cause <code>branch2</code> <strong>is</strong> ahead of <code>branch1</code> (has commits that branch1 doesn't have).</p>

<p>Is there a way? I looked through <code>git diff</code> and couldn't find anything</p>
","1","2899096","0","0"
"56715818","72958","2019-06-22 13:19:33","0","224","<django><git><nginx><virtualenv><git-branch>","How to visit a git branch of Django project on Nginx/uWSGI server?","<p>I have successfully built several web sites hosted on an <strong>Nginx</strong> server using <strong>Django</strong>, <strong>uWSG</strong>I and <strong>virtualenv</strong>.</p>

<p>I had never used version control but now <strong>I am starting to use Git</strong>.</p>

<p>I understand how to create, commit and push branches.</p>

<p>My question is: <strong>how to make different Git branches visible at the web address of the site I'm working on?</strong></p>

<p>Do I change the <strong>Nginx config file</strong> to point somewhere different?</p>

<p>I just updated the dev branch of my project, and of course the site does not reflect the changes.</p>

<p><strong>How can I tell the server to serve the dev branch or the master branch of the project?</strong></p>

<p>I would prefer to avoid a complicated system with different subdomains for different branches — I really just want the simplest thing that will work.</p>

<p><strong>[update]</strong> I have found lots of pages that explain complex ways to set up staging servers etc., but I really just want to understand what is going on... there's a giant conceptual hole in my understanding about how the server interacts with a local Git project.</p>

<p>Right now, the Nginx config and the uWSGI config point to a folder like:</p>

<pre><code>/var/www/sitefiles
</code></pre>

<p>That is the Django folder (inside it is sitefiles/settings.py etc.).</p>

<p>It is in that folder that I did git init, some commits, branching &amp; pushes.</p>

<p>Does using Git mean that the Nginx and uWSGI config's should point elsewhere?</p>
","4","72958","",""
"56735978","9752275","2019-06-24 11:52:59","3","3270","<git><git-branch>","git for-each-ref with <pattern> returns nothing","<p><strong>git branch --list '<em>hotfix</em>'</strong> returns a list of branches that contain the word 'hotfix' inside the branch name, whereas
<strong>git for-each-ref --format='%(authorname)' '<em>hotfix</em>'</strong> return nothing, not even <em>/n</em> symbol</p>
","0","9752275","0","0"
"73507348","18411863","2022-08-26 23:34:24","1","124","<git><git-branch><pretty-print>","git branch pretty format '%C(always/auto)'","<p>I'm trying to create an alias for a particular view of my git branches, with the usual verbose data plus some extra. (Datetime; I'm also sorting by date.) This is possible with a custom format string, but it loses the default coloring from <code>git branch -v</code>; the active branch doesn't get highlighted in green and other coloring like upstreams doesn't show up either. It looks to me from <a href=""https://git-scm.com/docs/pretty-formats"" rel=""nofollow noreferrer"">git docs</a> like this should be fixed by adding <code>%C(always) </code> as a prefix to the format string, but this doesn't seem to work:</p>
<pre><code>git branch --format=:%C(always) %(committerdate:short) %(refname:short) %(contents:lines=1)&quot;
</code></pre>
<p>just displays</p>
<pre><code>%C(always) 2022-08-23 foo/bar testing Token
%C(always) 2022-08-26 seethefnords fix validation
</code></pre>
<p>with no color. What is wrong here?</p>
<p>(Also, just incidentally, is it possible to get the smart alignment back in a custom format string?)</p>
","0","18411863","0","0"
"73555417","16556697","2022-08-31 11:47:18","1","993","<git><git-branch><git-checkout>","fatal: unable to read tree error on git checkout","<p>Unfortunately my hard drive got damaged, and now I'm trying to restore my project files, which are in a repository on another branch.</p>
<p>When <code>git checkout currency-convertor</code> outputs this:</p>
<blockquote>
<p>fatal: unable to read tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39</p>
</blockquote>
<p>How can I restore the files of this branch? After going through different sites, I only realized that somehow I can restore them, through backups, etc., and I sort of found how to do it, maybe I did something wrong, but the methods I found did not help me. What surprised me was that of all the branches, only the branch was affected <code>currency-convertor</code>, although at the time of the disk failure, another branch was installed. Is it possible to recover at least some files?</p>
<p>Maybe it's important, the output of the command git fsck --full:</p>
<pre><code>Checking object directories: 100% (256/256), done.
Checking objects: 100% (173/173), done.
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 5e76c750eeaeb2b07542d07dc3a925999e8aaa2f
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 63a23f89e10d31c3a9ed9ca582e83a8a05204b96
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39
broken link from    tree 5f9cd50454c698571ef96c2f037773890bde4a23
              to    blob 217069b72a199c7be5b4fd8ae45e0b93a1f36b85
broken link from    tree 8f79d8e655ff8fd4e6b4516f6fefb4bc8ba02c3c
              to    blob e50ee4159db60c92f144c4b33f45bd1a57ebd6ff
broken link from    tree d1281c46e3f1d36eea7d8e5be3b4cdd2a120a2fd
              to    blob fcaca083555ace75f54451698da96f98688a4709
broken link from    tree d1281c46e3f1d36eea7d8e5be3b4cdd2a120a2fd
              to    blob 7d1296959b427b97cf52812566b74fd38da0e0ae
broken link from    tree f8b71bc6088fb8f8422a40a5b212b3cabd8ddb66
              to    blob e8567005d36f967f7d852313b82767c04ab155a8
broken link from    tree f8b71bc6088fb8f8422a40a5b212b3cabd8ddb66
              to    blob f20377b3d16a0e580834e0438954cf9bba291fdf
broken link from    tree f70049a236deb0e215d5483fe9df3a0cbba88ceb
              to    blob e7280e8dac5c31d348f093a33172b2282149b064
broken link from    tree f70049a236deb0e215d5483fe9df3a0cbba88ceb
              to    blob 04f62a6068ea0cf89229a0c7579df0f2c0aa7ed1
broken link from    tree b5d32fbe8e6c2832ddd37625370e221837a176c8
              to    blob 55aa349b8516fb9a5b4d71a1c34ca8c1b1715e34
broken link from    tree b5d32fbe8e6c2832ddd37625370e221837a176c8
              to    blob 536346328a8d35ab7b62cf4b43db3bb307064f24
broken link from    tree a1b26b4af971808beec0e8c2fb4797d7ef6cca42
              to    blob 1f48f7a7a8c10175c8b0d0814f091ce4247cfd24
broken link from    tree a1b26b4af971808beec0e8c2fb4797d7ef6cca42
              to    blob df85d005e45adba5d9802b42d38ae07c00cf931a
broken link from    tree 3bdebb7bf8c1edbe618d7cc4eec1af2a35e89c31
              to    blob a82bcd60f583bdd9165b048bfc91df1b6a60eb22
broken link from    tree 3bdebb7bf8c1edbe618d7cc4eec1af2a35e89c31
              to    blob c55ee0ed8d8bcc7ad581fdfeca14e1daa5a86f8a
missing blob 04f62a6068ea0cf89229a0c7579df0f2c0aa7ed1
missing blob 1f48f7a7a8c10175c8b0d0814f091ce4247cfd24
missing blob 217069b72a199c7be5b4fd8ae45e0b93a1f36b85
dangling commit 317044625dfc11b9757ca4807e228c09eb5eb6e8
missing tree 41d648e8fd1281a8cdb1fcadb10daac5f7be2d39
missing blob 55aa349b8516fb9a5b4d71a1c34ca8c1b1715e34
missing blob 5e76c750eeaeb2b07542d07dc3a925999e8aaa2f
missing blob 63a23f89e10d31c3a9ed9ca582e83a8a05204b96
dangling commit 6bb4969cfc01bd1741b86c6f45c310fe766879ad
missing blob 7d1296959b427b97cf52812566b74fd38da0e0ae
missing blob c55ee0ed8d8bcc7ad581fdfeca14e1daa5a86f8a
missing blob e50ee4159db60c92f144c4b33f45bd1a57ebd6ff
missing blob e7280e8dac5c31d348f093a33172b2282149b064
missing blob e8567005d36f967f7d852313b82767c04ab155a8
missing blob fcaca083555ace75f54451698da96f98688a4709
missing blob 536346328a8d35ab7b62cf4b43db3bb307064f24
dangling commit 6313128d5b4b49f0b2900ebbe21dc17eea708c25
missing blob a82bcd60f583bdd9165b048bfc91df1b6a60eb22
missing blob df85d005e45adba5d9802b42d38ae07c00cf931a
missing blob f20377b3d16a0e580834e0438954cf9bba291fdf
</code></pre>
","0","16556697","0","0"
"73649798","8024296","2022-09-08 13:24:03","1","142","<linux><bash><git><branch><git-branch>","Bash git ls-remote know which is the main branch","<p>I use the following command to know all the remote branches of a project:</p>
<p><code>git ls-remote https://github.com/nanashili/AuroraEditor --h --sort origin &quot;refs/heads/*&quot; | sed &quot;s,.*${TAB}refs/heads/,,&quot;</code></p>
<p>But I would like to know which is the main branch of the project, which can be different from main and master.</p>
<p>Can you give me a hand?</p>
","10","8024296","",""
"4639050","568730","2011-01-09 12:13:55","1","291","<git><git-branch>","How to share directories between git branches?","<p>How can I share one or more folders from one or more branches of a git repository?</p>
","0","568730","",""
"64202547","5617485","2020-10-05 04:37:39","2","1303","<github><graphql><git-branch><github-graphql>","How to compare two branches in github with GraphQL?","<p>Can we compare two branches with the Github GraphQL?</p>
<p>From their v3 rest API, you can do:</p>
<p><code>/repos/:owner/:repo/compare/:base...:head</code></p>
<p>(docs: <a href=""https://developer.github.com/v3/repos/commits/#compare-two-commits"" rel=""nofollow noreferrer"">https://developer.github.com/v3/repos/commits/#compare-two-commits</a>)</p>
<p>and this works with SHA's, branches, tags, etc.</p>
<p>However, I'm unable to find it's equivalent GraphQL query in the docs.</p>
<p>This is my attempt so far :</p>
<p>I'm able to get the list of commits for each branch seperately, however, the entire history is loaded and I would only like the difference between canary branch and nightly branch.</p>
<pre><code>query{
  repository(owner:&quot;samridh&quot;,name:&quot;release-generator&quot;){
    name
    branch0: ref(qualifiedName: &quot;canary&quot;){
      target{
        ... on Commit {
         history(first:100){
           ...CommitFragment
         }
       }
      }
    }
    branch1: ref(qualifiedName: &quot;nightly&quot;){
      target{
        ... on Commit {
         history(first:100){
           ...CommitFragment
         }
       }
      }
    }
  }
}
             
fragment CommitFragment on CommitHistoryConnection {
  totalCount
  nodes {
    oid
    message
    committedDate
    author {
      name
      email
    }
  }
  pageInfo {
    hasNextPage
    endCursor
  }
}
</code></pre>
<p>This would have been done as :</p>
<p><code>/repos/samridh/release-generator/compare/nightly...canary</code></p>
<p>in the v3 REST API</p>
","0","5617485","0","0"
"70175724","10864356","2021-11-30 20:32:51","2","3162","<git><bitbucket><branch><git-branch>","Git: Why does git say ""your branch is up to date with origin/main"" when there are updates I haven't pulled yet?","<p>I'm on a local branch, and switched back to <code>main</code>. It said <code>Your branch is up to date with origin/main</code>, but when I do <code>git pull</code> it does pull a bunch of new updates. Does this not mean that my branch was <em>not</em> up to date with <code>origin/main</code>?</p>
","2","10864356","",""
"73675573","8024296","2022-09-10 22:27:47","2","344","<bash><git><branch><git-branch>","Bash git ls-remote get last commit of a repository by specifying the branch","<pre><code>git ls-remote --heads https://github.com/nanashili/AuroraEditor

9d84315555abdc1502ea2faf8c67401f4a27c226    refs/heads/179-toolbar-branch-selector-shows-when-no-git-repo
474bb8ab6629021769260145184983eb76b8c9d1    refs/heads/branch-delete-menu
afefeb5bbe89e8618e3f2ca6ff93718383f83145    refs/heads/development-main
474bb8ab6629021769260145184983eb76b8c9d1    refs/heads/file-creation
d24623b97fc863238b88179f03a24dca72aa44e9    refs/heads/git-init-fix
61fa98ba6a7b6f2fa518d3406016c304cbc83a9b    refs/heads/rename-branches
</code></pre>
<p>I have the following command which gives me the latest commit code of all branches of a specific repository.</p>
<p>I need to know the commit code of a specific repository.</p>
<p>That is, filter by the second column which would be the branch, just return its commit code.</p>
<p>For example, I want the commit code of the development-main branch, it should return &quot;afefeb5bbe89e8618e3f2ca6ff93718383f83145&quot;.</p>
<p>Can you give me a hand?</p>
","5","8024296","",""
"73684580","18038014","2022-09-12 04:43:58","2","39","<git><git-branch>","git branch list have ""--delete"", ""-d"", ""-delete"" after run git branch delete command","<p>I'm new to git, and first I cloned a remote repository doing like this:</p>
<pre><code>git clone https://git_romote_url/repository_name.git
</code></pre>
<p>and then I created a branch locally by:</p>
<pre><code> git checkout -b branch_name
</code></pre>
<p>then I wanted to delete the branch branch_name, so I tried the following command:</p>
<pre><code> git branch –delete branch_name
 git branch –d branch_name
 git branch –-delete branch_name
</code></pre>
<p>I knew the first command is wrong (missing a horizontal line), so I tried the following two.</p>
<p>But after this, when I shown branches by:</p>
<pre><code>git branch
</code></pre>
<p>The branches list showed:</p>
<pre><code>* master
  –-delete
  –d
  –delete
</code></pre>
<p>And when I want to delete either one of &quot;--delete&quot;, &quot;-d&quot; or &quot;-delete&quot; by:</p>
<pre><code>git branch --delete --delete
git branch --delete -d
git branch --delete -delete
</code></pre>
<p>I got:</p>
<pre><code>fatal: branch name required
</code></pre>
<p>I have searched the internet, but found nothing like my problems.</p>
<p>So, could someone please help explain why this happens and how should I handle this problem (I want to delete the three branches except master if it is ok and necessory to do this) .</p>
<p>Any help or hint is very appricated, and thanks in advance.</p>
","0","18038014","",""
"74314308","633961","2022-11-04 08:46:15","0","121","<git><git-branch><branching-strategy>","git: Why is it so difficult to get the parent branch name?","<p>It is difficult to find the parent-branch in git ...</p>
<p>My current solution:</p>
<pre><code>git show-branch -a 2&gt;/dev/null \
| grep '\*' \
| grep -v `git rev-parse --abbrev-ref HEAD` \
| head -n1 \
| perl -ple 's/\[[A-Za-z]+-\d+\][^\]]+$//; s/^.*\[([^~^\]]+).*$/$1/'
</code></pre>
<p>Source: <a href=""https://stackoverflow.com/a/74314172/633961"">https://stackoverflow.com/a/74314172/633961</a></p>
<p><strong>Why</strong> is it difficult to find the parent-branch in git?</p>
<p>This question is not about &quot;how to solve this?&quot;. It is about &quot;why is it not straight forward?&quot;</p>
","4","633961","",""
"73709766","12844766","2022-09-13 22:36:55","-1","245","<git><git-branch>","Will deleting one git branch affect other?","<p>I wanted to create a new branch ('branch1') from main branch, and i got this as a result:</p>
<p><a href=""https://i.stack.imgur.com/u2L3j.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/u2L3j.jpg"" alt=""git branches"" /></a></p>
<p>both of the branches now have same code (033d3ba0) which is not what i wanted.
I wanted to create branch1 that has the parent main.
I would like to delete branch1 now, but i want to be sure that deleting branch1 will not affect main.</p>
<p>So my question is: will deleting branch 1 affect main branch?</p>
","2","12844766","",""
"56930483","1187067","2019-07-08 07:48:54","1","183","<git><git-branch>","Delete all git branches already pushed","<p><strong>My need</strong></p>

<p>Hi, I'm looking for a command to <strong>delete</strong> all local branches <strong>already pushed</strong> to origin.</p>

<p>I especially want to keep all branches with commits not pushed yet to their respective remote branches.</p>

<p><strong>Reason</strong></p>

<p><code>git prune</code> does a part of the job by clearing branches while the remote is deleted, but as I have many feature branches I would need to keep only the branches which have not been fully pushed to remote, to avoid having a long list of local branches in my repo, restricting them to those actually in works.</p>

<p>Thank you!</p>
","2","1187067","0","0"
"56989548","9196920","2019-07-11 12:45:27","0","53","<gitlab><git-branch>","How to Add and Push a local git project to a remote branch","<p>I have a local folder (say L) with some files and folders. 
On this L, I did git init. </p>

<p>At remote I created a repository and a branch with a file each. Means, 
at remote I have Master (say M) and a branch (say B)</p>

<p>NOTE : BOTH LOCAL AND REMOTE ARE NOT CONNECTED YET.</p>

<p>With this, I want to push my local repository L to the branch B or remote, how can I do this?</p>
","0","9196920","",""
"57029663","998117","2019-07-14 17:31:39","1","51","<git><merge><git-branch><git-merge><git-checkout>","How would I git merge two of the same projects that have an original ancestor but diverged?","<p>I have a project (effectively a folder with a bunch of files). </p>

<p>Say I have a main release that is now on version 5.2.</p>

<p>Back when it was on version 3.0, I duplicated the folder and began working on a separate set of features. Like a poor version of git branch.</p>

<p>Since then obviously the main version is on 5.2 and now I want to merge this branched off version back into the main version, effectively into a 6.0 version.</p>

<p>How would I best do this?</p>
","0","998117","",""
"73961567","20122390","2022-10-05 14:02:46","2","4616","<git><visual-studio-code><graph><git-branch><git-commit>","How to use git graph in vs code?","<p>I am doing a git course and the git graph extension has been recommended to me.
To my colleagues, the extension shows a graph with the different branches as follows:</p>
<p><a href=""https://i.stack.imgur.com/zHj0r.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zHj0r.png"" alt=""git_grapg1"" /></a></p>
<p>But to me all the branches appear in the same line:</p>
<p><a href=""https://i.stack.imgur.com/1zwy3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1zwy3.png"" alt=""git_graph2"" /></a></p>
<p>I don't understand what I'm doing wrong or how to use the extension. Thank you very much.</p>
","4","20122390","",""
"74033327","2561130","2022-10-11 19:41:50","0","89","<git><branch><git-branch><git-log>","git log showing source of a branch","<p>I have a repos with several branches and I would like to be able to tell the initial source branch from which each branch was started. For example:</p>
<ol>
<li>Initial checkin of master</li>
<li>make changes to master</li>
<li>branch master to featureA</li>
<li>make changes to featureA</li>
<li>branch featureA to featureB</li>
<li>make changes to featureB</li>
<li>merge featureB into master</li>
</ol>
<p>or if you want the commands:</p>
<pre><code>git clone &lt;url&gt; test
cd test

echo &quot;Test&quot;&gt;test.txt
git add .
git commit -m &quot;Initial checkin&quot;
git push

echo &quot;Updates&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates&quot;
git push

git branch featureA
git checkout featureA
git push --set-upstream origin featureA
echo &quot;Updates featureA&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates to featureA&quot;
git push

git branch featureB
git checkout featureB
git push --set-upstream origin featureB
echo &quot;Updates featureB&quot;&gt;&gt;test.txt
git add .
git commit -m &quot;Updates to featureB&quot;
git push

git checkout master
git merge origin/featureB
git push 
</code></pre>
<p>but when I run a <em>git log --all --source</em> I don't see where featureB came from:</p>
<pre><code>commit d5f1a9d511ff349a35befbe7aa4f41aca75a0e5a refs/heads/featureB
Author: itsme mario
Date:   Tue Oct 11 15:16:49 2022 -0400

    Updates to featureB

commit f66006c5d87ee2a507da39aa8a8d6f354b454bb8 refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:15:28 2022 -0400

    Updates to featureA

commit 9f433234c228029b5efba118001f0afc8ab5c4ee refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:13:52 2022 -0400

    Updates

commit 57d41e78fea121977aa7e52177901ac77109b8bb refs/heads/featureA
Author: itsme mario
Date:   Tue Oct 11 15:13:23 2022 -0400

    Initial checkin
</code></pre>
<p>if I a graph it doesn't show the different branches either <em>git log --all --source --graph</em>:</p>
<pre><code>* commit d5f1a9d511ff349a35befbe7aa4f41aca75a0e5a   refs/heads/featureB
| Author: itsme mario
| Date:   Tue Oct 11 15:16:49 2022 -0400
| 
|     Updates to featureB
| 
* commit f66006c5d87ee2a507da39aa8a8d6f354b454bb8   refs/heads/featureA
| Author: itsme mario
| Date:   Tue Oct 11 15:15:28 2022 -0400
| 
|     Updates to featureA
| 
* commit 9f433234c228029b5efba118001f0afc8ab5c4ee   refs/heads/featureA
| Author: itsme mario
| Date:   Tue Oct 11 15:13:52 2022 -0400
| 
|     Updates
| 
* commit 57d41e78fea121977aa7e52177901ac77109b8bb   refs/heads/featureA
  Author: itsme mario
  Date:   Tue Oct 11 15:13:23 2022 -0400
  
      Initial checkin
</code></pre>
<p>What can I do to have the git log show where featureB came from (aka featureA via master)?
Thank you!</p>
","1","2561130","",""
"74042476","17987026","2022-10-12 13:15:37","1","36","<git><git-branch><git-commit>","How to get all the branches with a certain head in git","<p>There is a commit with commit hash = c1</p>
<p><strong>How to list all the branches that have their head &quot;pointing&quot; (or equal) to c1 ?</strong></p>
<p>Aware of how to get the branches that contain a commit, but not able to figure out the above.</p>
","0","17987026","",""
"74043773","20222706","2022-10-12 14:40:45","0","435","<git><github><github-actions><git-branch><git-submodules>","git submodule update doesn't work for in GitHub CI/CD pipeline for branched submodule","<p>When I call</p>
<pre><code>git submodule update --init --recursive --depth 50 --remote --jobs 1
</code></pre>
<p>for a submodule with a branch named <code>main</code> this works fine when I call it from local git bash while it fails when called from a GitHub CI/CD pipeline:</p>
<pre><code>13:27:13.378819 git.c:455               trace: built-in: git rev-parse --verify origin/main
fatal: Needed a single revision
13:27:13.381233 git.c:742               trace: exec: git-sh-i18n--envsubst --variables 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.381277 run-command.c:668       trace: run_command: git-sh-i18n--envsubst --variables 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.384468 git.c:742               trace: exec: git-sh-i18n--envsubst 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
13:27:13.384504 run-command.c:668       trace: run_command: git-sh-i18n--envsubst 'Unable to find current ${remote_name}/${branch} revision in submodule path '\''$sm_path'\'''
fatal: Unable to find current origin/main revision in submodule path 'roles/trendmicro-ds-agent-branch'
</code></pre>
<p>This is my .gitmodules file:</p>
<pre><code>[submodule &quot;roles/trendmicro-ds-agent-branch&quot;]
    path = roles/trendmicro-ds-agent-branch
    url = ../../modules/ansible/trendmicro-ds-agent
    branch = main
</code></pre>
<p>It also works fine in the pipeline when I replace <code>branch = main</code> by <code>branch = master</code> (where master is the master branch in the submodule project) in .gitmdoules.</p>
<p>Any idea what's going wrong here?</p>
","4","20222706","",""
"57253059","3258059","2019-07-29 11:37:29","3","250","<git><git-branch><gitignore><git-stash>","How to apply local changes to git repo after every pull from master without ever pushing to master","<p>My development setup is quite different to the other developers in the team - mac vs linux
- docker vs vagrant</p>

<p>Every time I pull a new branch I have to make a load of changes to config files and docker related files to get my dev environment functioning.</p>

<p>I need to avoid pushing these to my working branches as they can't be merged into master.</p>

<p>At the moment I am leaving these files off <code>git add</code> and then manually adding them back every time I switch branches and perform a pull.</p>

<p>The following SO question suggests I could <code>git stash</code> and then <code>git stash apply</code> <a href=""https://stackoverflow.com/questions/48273898/how-to-keep-the-git-local-changes-without-commit-and-apply-to-different-repos-af"">How to keep the git local changes without commit and apply to different repos after switch</a></p>

<p>I think that would work providing I keep my git stashes neat and the last one is restricted to my dev changes. I'm wondering if there is a better way to handle this workflow.</p>

<p>Can I save these changes in a dev-setup branch and use in a similar way to the stash method? </p>
","0","3258059","",""
"57277609","248959","2019-07-30 18:05:55","-1","51","<git><git-branch><git-commit>","git: question about creating branches and cloning repos","<p>I have just created a branch from <code>master</code> called <code>new_branch</code> </p>

<p>So I have checkout that new branch, add a new file, and then add/commit/push. </p>

<pre><code>git add new_file.php
git commit -m ""A new file""
git push origin new_branch
</code></pre>

<p>So after that, I have cloned my repo example, and the thing is that that file I have added in the new branch is not in the master branch of cloned work-tree. What should I do to find it that new file in the master branch of the cloned work-tree?</p>

<p>NOTE: sorry because of the imprecision of the title. Maybe someone wants to change it.</p>
","9","248959","",""
"57397816","396681","2019-08-07 15:28:25","1","41","<git><git-branch><git-merge><git-commit><pull-request>","Check if all pull requests have been cherry-picked in git","<p>I have pull requests that were merged into some branch by specific Authors within a date range.</p>

<p>How would I check if all those pull requests have been cherry picked into another branch?</p>

<p>We are only concerned about merged pull requests by specific authors and dates, and we need to make sure that we have cherry-pick all of them..</p>

<p>What's the recommendation in this case?</p>

<p>The core of this question is as its title, Lets say we have <code>staging</code> branch that has 27 pull requests made by <code>userA</code> within a range of date and other pull requests that we are not concerned about, then how can I make sure that all those 27 requests have been cherry-picked into branch <code>mobile</code> and that there isn't any missed pull request from them?</p>

<p>Its different than <a href=""https://stackoverflow.com/questions/27313309/list-git-commits-to-master-branch-between-two-dates"">this</a> question as I am not listing commits at some branch, but I am checking if <em>all</em> pull requests within specific criteria have been cherry-picked from some branch into other branch of interest.</p>
","2","396681","",""
"57437032","11909196","2019-08-09 20:57:40","1","1508","<git><github><git-branch>","How to fix ""refusing to merge unrelated histories""? I have tried ""git pull origin master --allow-unrelated-histories""","<p>I am trying to pull everything from my dev branch to master but I am getting ""Already up to date"". So when I tried to merge them together, i get, ""fatal: refusing to merge unrelated histories"". Can someone please help me.</p>

<p>I have tried git reset --hard</p>

<p>iwithman~/Programming/ibusiness-card-web$:git merge wip269 origin/master</p>

<p>fatal: refusing to merge unrelated histories</p>

<p>iwithman~/Programming/ibusiness-card-web$:git branch</p>

<ul>
<li><p>master</p>

<p>wip269</p></li>
</ul>

<p>iwithman~/Programming/ibusiness-card-web$:git merge wip269</p>

<p>fatal: refusing to merge unrelated histories</p>

<p>iwithman~/Programming/ibusiness-card-web$:git pull wip269</p>

<p>fatal: 'wip269' does not appear to be a git repository</p>

<p>fatal: Could not read from remote repository.</p>
","0","11909196","0","0"
"74413366","25891","2022-11-12 13:32:56","0","34","<git><github><git-branch><pull-request>","Switch github PR from master to branch","<p>I created a pull request (PR) for a git repository I forked on github. I made the mistake of making the changes and creating the PR from the master branch (the repo is still using the old naming convention, I know the new convention is to call it main).</p>
<p>I waited a bit to see if the owner would merge the PR, but instead he is taking much more time than I hoped (several months). Therefore, I am now tempted to move those changes to a purposely created branch of my repo, and to change the PR in github to use that new branch. However, I do <em>not</em> want to create a new PR (since there has been some discussion already and I don't want to duplicate that), nor I want to lose the history of my changes.</p>
<p>Is there an easy and foolproof way to do that? &quot;No&quot; would be a fair and potentially accepted answer, if that's the case: consider the &quot;requirements&quot; I am placing in the next paragraph.</p>
<p>Requirements:</p>
<ul>
<li>I know that's two questions in one (change things in my repo and change things in github), but I <em>need</em> them both or neither.</li>
<li>I don't want to create (or risk creating) more problems than this operation is going to solve</li>
<li>I don't want to spend more time performing the operation than I am going to save by having my master branch freed</li>
</ul>
","0","25891","",""
"74632926","19402870","2022-11-30 19:02:03","0","2219","<visual-studio-code><git-branch>","How to switch git branches in vscode?","<p>I have GitHub repository with multiple branches, and I want to commit and push changes to a specific branch, how can I switch from &quot;master*&quot; branch to another branch?</p>
<p>I tried to switch by clicking the branch name in the left bottom side of the screen and it didn't switch.</p>
","4","19402870","",""
"74650458","745574","2022-12-02 03:07:56","2","107","<git><git-branch><checkout>","git checkout remote branch if it exist, else create it","<p>I can't be the first one to ask this, but I'm having trouble finding the right search results. These terms are so overloaded.</p>
<p>Eventually I want to make some additions to a remote branch. Remote branch may not exist. So first I clone remote repo, I only have default branch locally. Then:</p>
<p>so far I have:</p>
<pre><code>git checkout -b ${BRANCHNAME} origin/${BRANCHNAME} --track || git checkout -b ${BRANCHNAME}
git add ...
git commit -m &quot;new stuff&quot;
git push origin ${BRANCHNAME}
</code></pre>
<p>Is there a nicer way to do the first line?</p>
","3","745574","",""
"74821380","11149029","2022-12-16 07:30:44","1","77","<git><version-control><git-branch><versioning>","How to put content of multiple directories (each representing different versions) into one local git repo","<p>I have one folder, let's call it <code>Product1.0</code> and multiple other folders like <code>Product1.1</code>, <code>Product1.2</code>, etc which are modified versions of Product.</p>
<p>I want to put this entire thing in one local git repo, and manage it such that content of <code>Product1.1</code> will be the next version (commit) of <code>Product1.0</code> , <code>Product1.2</code> will be next version of <code>Product 1.1</code> and so on. And if I want to revert back to any of the other versions, I can just checkout to previous versions.</p>
<p>Suggestions on how to do this?</p>
","2","11149029","",""
"74879416","2125837","2022-12-21 17:03:52","0","278","<git><git-branch><rebase><upstream-branch><upstream>","git branching advanced usage, rebase from upstream branch","<p>Following up on <a href=""https://stackoverflow.com/questions/19200561/"">Git: rebase onto development branch from upstream</a>, basically the same ask as:</p>
<blockquote>
<p>I have local <code>master</code> and <code>develop</code> branches. I do all my work on <code>develop</code> and then merge them into <code>master</code> for releases. There is a remote branch, <code>upstream/master</code> which has changes I want, but I want to rebase my changes in <code>develop</code> (which shares a common ancestor) on top of its changes and put them back into <code>develop</code>. I've already done <code>git fetch upstream</code>.</p>
</blockquote>
<p>Here is the (a bit more complicated/advanced) situation I'm facing with, starting from scratch.</p>
<ol>
<li>I forked an upstream, and made my own changes <em><strong>from</strong> its development branches</em> (<code>dev/br-1</code>), in my own new branch (<code>dev/br-2</code>), and <code>git push</code> to my own repo.</li>
<li>Now, upstream has advanced, both in its <code>master</code> and <code>develop</code> branches.</li>
<li>The way upstream advanced its <code>develop</code> branch is via <code>rebase</code>, i.e., all its own changes are <em>put back</em> on <strong>top</strong> <em>after rebase</em>.</li>
<li>My local repo is gone with my old machine, and I need to pick-up/git-clone from my own repo to continue with my customization.</li>
<li>I want to rebase my changes in my <code>dev/br-2</code> branch (which shares a common ancestor) on top of all the upstream changes.</li>
<li>I've already done <code>git fetch upstream</code> and was able to rebase my <code>master</code> with upstream's.</li>
<li>It is how to rebase my current <code>dev/br-1</code> from upstream, then <code>dev/br-2</code> from <code>dev/br-1</code> branch that makes my head spinning nonstop.</li>
</ol>
<p>Although it looks like a very specific case, but the principle of how to do git branching and rebasing still applies, and the answer would be very educational to the general public. Please help.</p>
<p><em>UPDATE:</em> So I looked at @torek suggested <code>git rebase --onto</code> command, like <a href=""https://stackoverflow.com/questions/29914052/"">How to git rebase a branch with the onto command?</a>, and all their refed docs, and think my problem is still one or two levels up than what I've read (because there are two repos and 5 branches involved). Here is the summary:</p>
<p>Situation at point#1:</p>
<pre><code>A---B---C---D  master (upstream)
    \
     E---F---G  dev/br-1 (upstream)
             \
              H---I---J dev/br-2 (myown)
</code></pre>
<p>Situation at point#2&amp;3:</p>
<pre><code>A---B---C---D  master (upstream)
            \
              E'---F'---G'  dev/br-1 (upstream)
</code></pre>
<p>And I don't even know where should I draw my <code>myown</code> branch. Here is my current situation (which may have already been messed up, as I see <code>HEAD</code> might be in a weird place):</p>
<pre><code>$ git log --all --decorate --oneline --graph
* 7aec18c (upstream/dev/br-1) more updates
* b83c3f8 more updates
* 4cf241f update file-a
* 200959c update file-a from main
* dc45a94 (upstream/master, master) update file-a from main
| * ce2a804 (origin/dev/br-2) update file-a
| * 0006c5e (HEAD -&gt; dev/br-1, origin/dev/br-1) more updates
| * cdee8bb more updates
| * 85afa56 update file-a
|/  
* 2f5eaaf (origin/master, origin/HEAD) add file-a
</code></pre>
<p>The ultimate goal is to place myown</p>
<p><code>H---I---J dev/br-2 </code></p>
<p>branch on top of the newly rebased <code>G'</code>, in my own repo, after catching up with upstream. I.e., in my own repo, in the end, it should look like this:</p>
<pre><code>A---B---C---D  rebased master (upstream)
            \
             E'---F'---G'  rebased dev/br-1 (upstream)
                       \
                        H'---I'---J' rebased dev/br-2
</code></pre>
<p>How to do that?</p>
<p>More explain by command:</p>
<pre class=""lang-bash prettyprint-override""><code> cd /tmp
 mkdir upstream
 cd upstream
 # prepare its `master` and `dev/br-1` branches

 cd /tmp
 git clone upstream myfork
 # prepare my own changes based on the `dev/br-1` branch into `dev/br-2`

 cd /tmp/upstream
 # advance its `master` 
 . . .
 # and its`dev/br-1` branches
 git checkout dev/br-1
 git rebase -X theirs master dev/br-1
 . . .
</code></pre>
<p>Now upstream has advanced, both in its <code>master</code> and its <code>develop</code> branches (via <code>rebase</code>), and I need to pick-up from my own repo to <em>continue</em> with my customization.</p>
<pre class=""lang-bash prettyprint-override""><code> cd /tmp
 mv myfork myfork0
 git clone myfork0 myfork1
 cd myfork1
 git remote -v
 git remote add upstream /tmp/upstream
 git remote -v
 git fetch upstream
 git rebase upstream/master

 git checkout --track origin/dev/br-1

$ git remote -v
origin  /tmp/myfork0 (fetch)
origin  /tmp/myfork0 (push)
upstream        /tmp/upstream (fetch)
upstream        /tmp/upstream (push)

$ git branch -avv
* dev/br-1                  0006c5e [origin/dev/br-1] more updates
  master                    dc45a94 [origin/master: ahead 1] update file-a from main
  remotes/origin/HEAD       -&gt; origin/master
  remotes/origin/dev/br-1   0006c5e more updates
  remotes/origin/dev/br-2   ce2a804 update file-a
  remotes/origin/master     2f5eaaf add file-a
  remotes/upstream/dev/br-1 7aec18c more updates
  remotes/upstream/master   dc45a94 update file-a from main

$ git log --all --decorate --oneline --graph
* 7aec18c (upstream/dev/br-1) more updates
* b83c3f8 more updates
* 4cf241f update file-a
* 200959c update file-a from main
* dc45a94 (upstream/master, master) update file-a from main
| * ce2a804 (origin/dev/br-2) update file-a
| * 0006c5e (HEAD -&gt; dev/br-1, origin/dev/br-1) more updates
| * cdee8bb more updates
| * 85afa56 update file-a
|/  
* 2f5eaaf (origin/master, origin/HEAD) add file-a
</code></pre>
<p><em><strong>UPDATE2:</strong></em></p>
<p>With above status, when I tried <code>--rebase-merges</code> as suggested by @VonC, I'm getting:</p>
<pre><code>$ git rebase --rebase-merges --onto master $(git merge-base dev/br-2 master) dev/br2
fatal: Not a valid object name dev/br-2
fatal: invalid upstream 'dev/br2'

$ git checkout --track origin/dev/br-2
Branch 'dev/br-2' set up to track remote branch 'dev/br-2' from 'origin' by rebasing.
Switched to a new branch 'dev/br-2'

$ git rebase --rebase-merges --onto master $(git merge-base dev/br-2 master) dev/br-2
Successfully rebased and updated refs/heads/dev/br-2.

$ git log --all --decorate --oneline --graph
* 344418c (HEAD -&gt; dev/br-2) update file-a
* 4de3dec more updates
* 81af2ac more updates
* 1e3f9fb update file-a
| * 7aec18c (upstream/dev/br-1) more updates
| * b83c3f8 more updates
| * 4cf241f update file-a
| * 200959c update file-a from main
|/  
* dc45a94 (upstream/master, master) update file-a from main
| * ce2a804 (origin/dev/br-2) update file-a
| * 0006c5e (origin/dev/br-1, dev/br-1) more updates
| * cdee8bb more updates
| * 85afa56 update file-a
|/  
* 2f5eaaf (origin/master, origin/HEAD) add file-a
</code></pre>
<p>Here, how to rebase my current <code>dev/br-1</code> from upstream, then <code>dev/br-2</code> from <code>dev/br-1</code> branch please
(detailed preparation can be found at <a href=""https://pastebin.com/Df8VbCp2"" rel=""nofollow noreferrer"">https://pastebin.com/Df8VbCp2</a>, if necessary).</p>
","5","2125837","",""
"74981803","7357046","2023-01-02 11:23:17","1","61","<git><github><git-branch><git-pull>","I have two branches in Github: main and production. for one server I want to make git pull default to production although it is not the default branch","<p>I have <code>main</code> and <code>production</code> branches in my GitHub repo.</p>
<p>I have 2 servers: one for production and the other for testing.</p>
<p>I want branches to match as follows:</p>
<pre><code>main branch =&gt; testing server
production branch =&gt; production server
</code></pre>
<p>I have set up my ssh for both servers. I just want when I write: <code>git pull</code> in the production server to pull changes for the production branch, and when I write <code>git pull</code> in the testing server to pull changes from the main branch.</p>
<p>how can I do that?</p>
<p>I know I can pull the branch specifically but I want to make it automatic to prevent pulling testing changes to production by mistake.</p>
","2","7357046","",""
"75023326","2504762","2023-01-05 19:12:57","0","156","<git><bitbucket><git-branch><branching-and-merging><branching-strategy>","gitflow branching strategy with bitbucket","<p>I am trying to implement gitflow branching strategy and trying to understand how to resolve the problem I am facing. if you think there is a better branching strategy which could solve this issue please let me know.</p>
<p><strong>how to handle parallel releases</strong></p>
<p>let's consider two team are working on two releases. and each developer created feature branching from develop branch.<br />
feature <code>f_1</code> and <code>f_2</code> are part of same <code>release (release_f)</code>, however <code>n_2</code> feature is part of different <code>release (release_n)</code> which team_2 is working on it.</p>
<pre><code>develop
    --feature/f_1 (team_1/dev_1)
    --feature/f_2 (team_1/dev_2)
    --feature/n_1 (team_2/dev_1)
    
</code></pre>
<p>However, while merging into develop. this happened.</p>
<pre><code>0.0.1------f_1-----n_1----f2--
</code></pre>
<p>Now how do I create two different releases such that, <code>release_f</code> contains <code>f_1</code> and <code>f_2</code> or exclude <code>n_1</code> as <code>release_n</code> is not fully ready to be tested.</p>
","0","2504762","",""
"75065708","14969991","2023-01-10 05:09:08","0","72","<git><git-branch><git-push><git-remote><git-config>","git push hangs on the ""Total"" line only for a specific branch","<p>I'm trying to push 4 commits on a specific local branch to my remote repository which is on a private Git server. The push progress is displayed as follows:</p>
<pre><code>Enumerating objects: 152, done.
Counting objects: 100% (152/152), done.
Delta compression using up to 12 threads
Compressing objects: 100% (70/70), done.
Writing objects: 100% (105/105), 13.92 KiB | 4.64 MiB/s, done.
Total 105 (delta 59), reused 68 (delta 26), pack-reused 0
</code></pre>
<p>And it hangs there after the 'Total' line. I've tried waiting for more than 10 minutes, but no luck. The commits do not have any large files, all are text files with small changes.</p>
<p>I have tried the following based on responses for similar issues:</p>
<ol>
<li>Increased the git buffer size by running <code>git config --global http.postBuffer 157286400</code></li>
<li>Did a git garbage collection by running <code>git gc</code></li>
<li>Ran a <code>git push -u origin &lt;branch-name&gt;</code></li>
</ol>
<p><strong>Important Note: This only happens for one specific branch, I can push changes as usual on other branches.</strong></p>
<p>PS: I'm on Windows 11, tried GUI clients, Git inside Visual Studio, and git via Terminal, no luck.</p>
","2","14969991","",""
"75104291","19396149","2023-01-13 02:27:52","0","35","<git><npm><npm-install><bootstrap-5><git-branch>","Does npm i for Bootstrap install for all of my git branches?","<p>I'm upgrading to Bootstrap 5 from 4, but I wanted to test it out first on a separate local branch before I do that. If I run the command &quot;npm i bootstrap@5.3.0-alpha1&quot;, will that install it on all of my branches, or just the branch that I'm checking out?</p>
<p>I know that I can also just copy over the min.css and min.js, but I'm checking to see if I can just run that command instead.</p>
<p>Is there is a better way to test out Bootstrap 5?</p>
","1","19396149","",""
"75131192","21017175","2023-01-16 07:18:48","2","921","<git><branch><git-branch>","git: How to delete local branches that do not exist in remote repo interactively branch by branch?","<p>There are many threads on this website that discuss the advantages of</p>
<pre><code>git fetch --prune 
</code></pre>
<p>and I really like it. But I locally have several branches that I do not want to push as well, which means that there are <strong>branches which don't exist anymore</strong> on remote repo and there are <strong>branches which never existed there</strong>. The former I want to delete, the latter I want to keep.
Of course git can not know which ones I want to keep. But I haven't found a (simple) interactive way to prune the branches branch by branch. I think about some simple mechanism like</p>
<pre><code>rm -i
</code></pre>
<p>with which I can delete files via file by file in Linux shells</p>
<p>The only solution I can think of is to write a script to do a dry-run of git fetch prune, then ask me branch by branch to delete it manually with git branch delete command. Since I am not very good at writing safe and clean scripts (talking about Linux shells, not Windows here, but the general question is relevant for any OS where git is supported)</p>
<p>Yes, I could push all my local branches as well, but we already have a big number of branches (although we use the rebase and delete featurebranch mechanism) that clutter visual representations of our remote repo.</p>
<p>Any ideas appreciated, thanks in advance,</p>
<p>br</p>
<p>I tried:</p>
<pre><code>git fetch --prune
</code></pre>
<p>and</p>
<pre><code>git branch --delete
</code></pre>
<p>but git fetch prune deletes too many branches at once and git branch delete is rather slow and overly complicated to use for a bigger number of branches, since I need to know and delete all relevant branches manually.</p>
","5","21017175","",""
"75145696","7714681","2023-01-17 11:23:45","1","58","<git><branch><git-bash><git-branch>","Why does `git branch -r` still show the branch after deleting it locally?","<p>I have a local branch <code>add-importerror</code> that I want to delete:</p>
<p><a href=""https://i.stack.imgur.com/5pYxe.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5pYxe.png"" alt=""enter image description here"" /></a></p>
<p>To do this, I followed the <code>git branch -d &lt;BRANCH-NAME&gt;</code>, based on <a href=""https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely"">this page</a>. However, after having seemingly removed the branch, it still shows when I run <code>git branch -r</code>.</p>
<p>Why is this? And how can I remove it so that it won't show anymore?</p>
<p><a href=""https://i.stack.imgur.com/yMitK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yMitK.png"" alt=""enter image description here"" /></a></p>
","2","7714681","",""
"75313752","4822666","2023-02-01 17:06:30","1","48","<git><git-branch>","Push temporary git branch to remote without files or changes","<p>We have a git <code>master</code> branch. From this branch we create feature branches and merge those feature branches into master.</p>
<p>We need now a 'temporary' branch from where we branch off some feature branches. Those feature branches will be merged into the <code>temporary</code> branch.</p>
<p>How do I push the new 'temporary' branch (without any files or changes) too remote so others are also able to branch off this branch?</p>
","1","4822666","",""
"75333505","6413614","2023-02-03 09:00:45","1","68","<git><git-branch><rebase><branching-and-merging><git-flow>","Keeping a semi-linear git history where some feature branches cannot be rebased?","<p>I have the following situation:</p>
<ul>
<li>The teams want to keep a linear git history so they are enforcing rebase and squash.</li>
<li>We have some feature branches with a long lifetime (months even) with multiple devs working on them. They cannot be rebased because it would really complicate things when the other devs try to merge their work to those feature branches.</li>
<li>These feature branches must be kept up to date by merging the main branches into them.</li>
<li>Once the feature branch is ready to be merged the only way to keep the linear history seems to be squashing the entire thing. Squashing months of work from several people. Uhh.</li>
</ul>
<p>Something tells me this is not the best solution. I'm also not a fan of spaghetti flow but I think there is a way to keep a semi-linear history where the large feature branches get merged without all the fuss.</p>
<p>It should be something that all developers can comfortably follow, without any 'hacky' strategies that might confuse juniors.</p>
<p>Any ideas?</p>
","5","6413614","",""
"75380368","10511709","2023-02-08 00:39:30","1","710","<git><github><git-branch><github-codeowners>","github codeowners for each branch","<p>Github says I can assign different code owners for different branch.<br />
but how?<br />
Is there any way for having different file for different branch without any conflict on merging??</p>
<p>please let me know how I can do it.</p>
<p><a href=""https://docs.github.com/en/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners#codeowners-file-location"" rel=""nofollow noreferrer"">https://docs.github.com/en/enterprise-cloud@latest/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners#codeowners-file-location</a></p>
<blockquote>
<p>Each CODEOWNERS file assigns the code owners for a single branch in the repository. Thus, you can assign different code owners for different branches, such as @octo-org/codeowners-team for a code base on the default branch and @octocat for a GitHub Pages site on the gh-pages branch.</p>
</blockquote>
","1","10511709","",""
"75404816","12358212","2023-02-09 21:53:28","1","513","<continuous-integration><github-actions><git-branch><git-tag><git-workflow>","github actions workflow workflow_dispatch running a workflow manually - most of the Tags are disabled","<p>I am using github actions workflow for code deployment. One of the flow is manual using workflow_dispatch. I am able to select main or any feature branch but when i select tags - most of them are disabled and gives you below error message:</p>
<p>&quot;Workflow does not exist or does not have a workflow_dispatch trigger in this tag.
Learn more about manual workflows&quot;</p>
<p>If I create a new git tag, i am able to deploy. Please help me by sharing the logic and reasoning. Thanks,</p>
","0","12358212","",""
"75673159","21356188","2023-03-08 12:40:45","0","93","<git><git-branch><rebase><git-rebase>","How does commit history work with git rebase --onto","<p>Im learning git and curious about how rebase --onto works</p>
<p><a href=""https://i.stack.imgur.com/w42I0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/w42I0.png"" alt=""enter image description here"" /></a></p>
<p>So in the picture, when <code>topic</code> is rebased onto <code>master</code>, you get the files that were created in <code>next</code>, but you dont get the log history of <code>next</code> right?</p>
<p>Example:</p>
<ol>
<li>someone creates file.txt on the <code>next</code> branch, so now there's a commit saying file.txt was created</li>
<li><code>topic</code> is created from the HEAD of <code>next</code>, and now <code>topic</code> also can see this commit where file.txt was created</li>
<li><code>topic</code> is rebased onto <code>master</code> like in the bottom graph.</li>
</ol>
<p>So now the <code>topic</code> branch cant see the commit where file.txt was created right? Since <code>topic</code> has a new base which cannot reach the <code>next</code> branch.
And file.txt is still in <code>topic</code> commit tree</p>
","5","21356188","",""
"75822379","19099386","2023-03-23 11:24:12","-1","29","<git><merge><git-merge><git-branch><pull>","How to merge the changes from one branch to another branch in git","<p>I have created two branches from master branch. I have made some changes in the second branch. I am trying to pull the changes from second branch2 to first branch. I do not know how to merge the changes from second branch to first branch. So, How to do it?</p>
<pre><code>c:\angular\project\(branch1)
git pull origin branch2
</code></pre>
","4","19099386","",""
"75835991","12298276","2023-03-24 16:15:34","1","162","<python-3.x><azure-devops><python-requests><git-branch><azure-devops-rest-api>","Create new git branch: azure.devops.exceptions.AzureDevOpsClientRequestError: The requested resource does not support http method 'PATCH'","<p><strong>Background:</strong></p>
<p>I'm using the <a href=""https://github.com/microsoft/azure-devops-python-api"" rel=""nofollow noreferrer"">azure-devops-python-api</a> - library in order to programmatically <a href=""https://www.freecodecamp.org/news/the-git-push-command-explained"" rel=""nofollow noreferrer"">push a commit</a> to my Azure DevOps <a href=""https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/create-organization?view=azure-devops"" rel=""nofollow noreferrer"">organization (git) repository</a>.</p>
<p>The <a href=""https://learn.microsoft.com/en-us/rest/api/azure/devops/git/refs/update-ref?view=azure-devops-rest-4.1&amp;tabs=HTTP"" rel=""nofollow noreferrer"">Azure DevOps REST API docs</a> for &quot;Update - Ref&quot; did not help me to figure out the solution.
<a href=""https://github.com/Microsoft/azure-devops-node-api/issues/259"" rel=""nofollow noreferrer"">This discussion</a> did not help me either.</p>
<p><strong>Problem:</strong></p>
<p>&quot;The requested resource does not support http method 'PATCH'&quot; when calling <code>update_ref()</code> in module <code>azure\devops\released\git\git_client_base.py</code>.</p>
<p>There is no obvious function for creating a branch, which would be called <code>create_branch()</code> according to the <a href=""https://www.centercode.com/glossary/principle-of-least-surprise"" rel=""nofollow noreferrer"">principle of least surprise</a>.
As opposed to this Azure DevOps API, this is much more intuitively resolved in e.g. the <a href=""https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/codecommit/client/create_branch.html"" rel=""nofollow noreferrer"">AWS CodeCommit API</a>.</p>
<p>Anyways, I would like understand what exactly goes wrong here.
The error message is very generic, I could not determine which of the inputs are the problem.</p>
<p>Even when I provide the <code>filter</code> - argument instead of being <code>None</code> to the target or source branch name, it throws the following error:</p>
<blockquote>
<p>azure.devops.exceptions.AzureDevOpsServiceError: The only property which can be patched is isLocked.</p>
</blockquote>
<p>For the sake of completeness, the short docstring of filter from the above-mentioned module:</p>
<blockquote>
<p>:param str filter: The name of the branch to lock/unlock</p>
</blockquote>
<p>I would also be greatful for any other way of simply creating a new branch which does not exist.</p>
<hr />
<p><strong>Source Code:</strong></p>
<p>The code involved until invoking the <code>git_client.update_ref()</code> - method, is:</p>
<pre><code>from azure.devops.v5_1.git.models import (
    GitRefUpdate,
)
from azure.devops.connection import Connection


release_head_commit_id = '12312314123123123213123123123'
project_name = 'project_x'
repo_name = 'project_x'
release_branch_name = 'target-branch'
feature_branch_name = 'feature-branch'
git_client = Connection(base_url=organization_url, creds=credentials).clients.get_git_client()

filter_name = None  # or feature_branch_name or release_branch_name alternatively

git_client.update_ref(
                GitRefUpdate(
                    is_locked=False,
                    name=feature_branch_name,
                    new_object_id=release_head_commit_id,
                    old_object_id='0' * 40,
                    repository_id=repo_name,
                ),
                repo_name,
                filter_name ,
                project=project_name,
                project_id=project_name,
            )
</code></pre>
<p>The <code>old_object_id='0' * 40</code> was set like this based on <a href=""https://github.com/Microsoft/azure-devops-node-api/issues/259#issuecomment-586061275"" rel=""nofollow noreferrer"">this comment</a>.</p>
","0","12298276","",""
"75932678","17359519","2023-04-04 18:26:44","0","40","<git><git-branch><git-submodules>","Different git submodules within different branches","<p>Is it possible to have different submodules within different branches? For example, branch 1 would only see submodule 1 and branch 2 would only see submodule 2.</p>
<p>One option is to use <code>git submodule deinit</code> before moving to another branch, and then running <code>git submodule init</code> and <code>git submodule update</code> after returning to the first branch. This works, but adds a number of additional steps every time a new branch is to be checked out.</p>
<p>A similar question was asked <a href=""https://stackoverflow.com/questions/17247718/git-different-submodules-in-two-different-branches"">here</a>, but this was 10 years ago and I'm wondering if there is a more up-to-date way of doing this.</p>
","2","17359519","",""
"75973020","17801533","2023-04-09 21:42:52","0","49","<git><git-branch><git-reset>","git reset HEAD~1 vs git branch -f mainline HEAD~1","<p>Assuming, current branch is mainline. mainline and HEAD pointer are pointing to the latest commit.</p>
<pre><code>git reset HEAD~1
git branch -f mainline HEAD~1 
</code></pre>
<p>To the best of my understanding both the commands will :</p>
<p>bring mainline pointer to a previous commit along with HEAD pointer</p>
<p>Which one should we use from the above two and why?</p>
<p>Edit : As pointed in comments current branch cannot be the same for using the git branch -f mainline HEAD ~1 command.</p>
","2","17801533","",""
"76069690","14382836","2023-04-21 03:30:04","0","168","<maven-plugin><git-branch><git-commit>","git-commit-id-plugin does not print the git branch name","<p>I use <code>git-commit-id-plugin</code> in my pom.xml as follows:</p>
<pre><code>&lt;plugin&gt;
      &lt;groupId&gt;pl.project13.maven&lt;/groupId&gt;
      &lt;artifactId&gt;git-commit-id-plugin&lt;/artifactId&gt;
      &lt;version&gt;4.9.10&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;revision&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
      &lt;configuration&gt;
        &lt;dotGitDirectory&gt;${project.basedir}/../../.git&lt;/dotGitDirectory&gt;
        &lt;generateGitPropertiesFile&gt;true&lt;/generateGitPropertiesFile&gt;
        &lt;generateGitPropertiesFilename&gt;src/main/resources/git.properties&lt;/generateGitPropertiesFilename&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
</code></pre>
<p>Then I build my maven project by Jenkins, in the generated <code>git.properties</code>, the value of <code>git.branch</code> is identical to the value of <code>git.commit.id</code>, what I want is the git branch name, why would this happened, and how do I solve this? Any idea is appreciated.</p>
","0","14382836","",""
"76105594","16834100","2023-04-25 21:33:14","0","43","<git><git-branch><branching-and-merging>","What happens in git merge if one file does not exist in merged branch","<p>I have a question about several merges from different branches.</p>
<h3>Steps</h3>
<p>Consider <code>A</code> and <code>B</code> are up to date with <code>Master</code>.</p>
<ol>
<li><code>A</code> adds some files and changes some other files.</li>
<li><code>B</code> also adds some other files.</li>
<li><code>A</code> pushes its commits and <code>Master</code> merges with <code>A</code>.</li>
</ol>
<h3>Questions</h3>
<p>Now what happens if <code>B</code> pushes his commits to merge with <code>Master</code>? I thought of some possibilities:</p>
<ol>
<li>Are those files from <code>A</code> removed?</li>
<li>What about old files that <code>A</code> has changed but in <code>B</code> they are not changed?</li>
</ol>
<p>What happens to those?</p>
<p>I am afraid to do it because I think it will remove other's files.</p>
","3","16834100","",""
"76115144","126352","2023-04-26 21:15:16","2","47","<git><git-branch><git-rebase><git-detached-head>","Set an existing branch to detached HEAD (after `git rebase --onto`)","<p>When I have a detached HEAD that's several commits ahead of an existing branch, what's the right command(s) to advance that branch to the detached HEAD without changing anything in my working directory?</p>
<p>Context: I just ran <code>git rebase --onto mybranch SHA1 SHA2</code>, and now I've got a detached HEAD at <code>REBASED-SHA2</code>.  Now I want to advance <code>mybranch</code> to REBASED-SHA2. I could create a new branch at REBASED-SHA2 (<code>git checkout -b temp</code>), delete the old branch (<code>git branch -d mybranch</code>), and rename the new branch (<code>git branch -m temp mybranch</code>). But that's a lot of typing, and might require even more typing if I had to set up tracking to the remote <code>mybranch</code>.</p>
<p>Is there a shorter way to do what I want, which is just to &quot;advance&quot; mybranch to a later commit?</p>
","2","126352","",""
"62801064","12517133","2020-07-08 18:11:39","0","111","<git><git-branch><rebase><git-rewrite-history><tree-conflict>","How to make two git branches (with common history) coherent with each other after rebasing one of them?","<p>I think that my title is not clear enough, so I will describe the problem:</p>
<p>In my git project, I have 3 branches: <code>master</code>, <code>b1</code>, and <code>b2</code>. Here is the history tree:</p>
<pre><code> A---B---C  master
          \
           D---E---F  b1
                    \
                     G---H---I  b2
</code></pre>
<p>Suppose I want to rebase the <code>b1</code> branch and edit the <code>E</code> commit. After rebasing, commits <code>E</code> and <code>F</code> will be replaced by new commits <code>E'</code> and <code>F'</code> which have different commit SHAs. Therefore, the history in <code>b1</code> will be different from history in <code>b2</code>:</p>
<pre><code> A---B---C  master
           \
             D---E'---F'  b1
                     
 A---B---C---D---E---F---G---H---I  b2
</code></pre>
<p>So my question is: how to make sure that <code>b2</code> follows <code>b1</code> (automatically gets the same new commits as <code>b1</code>) after rebasing <code>b1</code> so that their respective histories stay coherent.</p>
","0","12517133","",""
"25569451","1423604","2014-08-29 13:36:00","2","91","<git><git-branch>","Working in wrong git branch","<p>I have started working on the develop branch in several files, and then realised that I should have created a new branch for it.</p>

<p>I have not committed the changes and the new files yet. so, how can I leave the develop branch as it was (revert?) and then copy the changes into the feature/test, which was meant to be the branch that I should be working on?</p>
","0","1423604","",""
"25570510","1819402","2014-08-29 14:34:26","5","9464","<regex><git><bash><git-branch>","Get all git branches that matches regex and split it into array","<p>I'm trying to get from my git repo all branches (<code>git branches -a</code>) that matches regex (<code>grep xxx</code>).</p>

<p>Normally in command line I write this:</p>

<pre><code>git branch -a | grep xxx
</code></pre>

<p>So I'm trying to do the same in .sh file:</p>

<ol>
<li>get all branches that matches regex</li>
<li>split it into array</li>
<li>get first branch</li>
</ol>

<p>Below is my code:</p>

<pre><code>#!/bin/bash

branches=( $(git branch -a | grep $1) )

echo branches : $branches
echo branch : ${branches[0]}
</code></pre>

<p>Sadly it somehow add all files in my current folder.</p>

<p>This is the output:</p>

<pre><code>$&gt; checkout.sh 2887
branches : ant 
branch : ant 
</code></pre>

<p>If I change <code>branches=( $(git branch -a | grep $1) )</code> to <code>branches=$(git branch -a | grep $1)</code> I got all files in my dir and branches at the end</p>
","3","1819402","",""
"62815924","1084174","2020-07-09 13:24:20","1","22","<git><version-control><branch><git-branch>","What should be action to make the log clean without re creating prod branch in git?","<p>While working in Git, we have decided to take some critical fix in prod branch. Now unfortunately some unwanted changes <strong>C1</strong> are merged. Now we can revert the commits but it will increase the one more log which management does not want. management wants clean list of critical commits only. Now one way is to delete full prod branch and then create new prod branch again and take only critical commits, but in that case prod branch creation history will be lost which is not accepted to management.</p>
<p><strong>What should be action to make the log clean without re creating prod branch in git?</strong></p>
","4","1084174","",""
"44163307","378418","2017-05-24 15:58:06","24","3938","<git><branch><git-branch><git-checkout>","Why does `git checkout <branch> <file>` stage the change?","<p>If I start from a clean working tree and run <code>git checkout &lt;branch&gt; &lt;file&gt;</code>, where <code>&lt;branch&gt;</code> has a different version of this file, I end up with a staged rather than an unstaged change.</p>

<p>What's the reason for this? Is this just for consistency with other commands like <code>git mv</code>, which you would expect to stage changes? Is it for convenience when using <code>git checkout</code> to resolve merge conflicts? Or is there some other rationale?</p>

<p>It seems mildly odd to me since just using <code>git checkout &lt;branch&gt; &lt;file&gt;</code> does not offer any indication of whether I plan to commit the change.</p>
","2","378418","0","0"
"62818765","1592322","2020-07-09 15:49:31","0","54","<git><github><git-branch><upstream-branch>","Why does the behavior of git branch -m differ for macOS and windows versions of git?","<p>My colleague and I have been trying to put together a clear, consistent procedure for renaming a git branch locally and remotely.</p>
<p>Assuming we have a branch <code>oldname</code> both locally and on remote, and want to rename it to <code>newname</code>, and we have checked out locally branch <code>oldname</code>, following <a href=""https://stackoverflow.com/a/30590238/1592322"">https://stackoverflow.com/a/30590238/1592322</a> (and other similar suggestions across the internet), these steps work for my colleague:</p>
<pre><code>git branch -m newname
git push --set-upstream origin newname 
</code></pre>
<p>Whereas I have to follow an intermediate step of explicitly unsetting the upstream information (as suggested by user:22992 in that same stack overflow link I provided above):</p>
<pre><code>git branch -m newname
git branch --unset-upstream
git push --set-upstream origin newname 
</code></pre>
<p>If my colleague uses my (slightly longer) procedure, then that second additional step <code>git branch --unset-upstream</code> results in an error:</p>
<pre><code>Fatal: The current branch newname has no upstream branch.
</code></pre>
<p>So we can't use the same consistent procedure, and guess we just have to watch out for this in general. It seems to me that the behavior of <code>git branch -m</code> differs between different git versions. Is this correct? Why is there a difference in behavior?</p>
<p>My colleague is running git version version 2.18.0.windows.1 . Whereas I am running 2.17.2 (Apple Git-113) on a macOS 10.13.6.</p>
","8","1592322","",""
"25579155","391986","2014-08-30 04:55:42","2","104","<git><git-branch>","git buggy modified files when changing branches","<p>I have the craziest bug going on with my repo I don't know what to do. In my repo I have three branches.</p>

<pre><code>master &gt; branch_1 &gt; branch_2
</code></pre>

<p><strong>From branch_1</strong></p>

<p><code>git status</code> and all is clear no files are staged or modified.</p>

<p><strong>From branch_2</strong></p>

<p><code>git checkout branch_2</code> and type </p>

<p><code>git status</code> again and all of a sudden I have these two files that are marked as <code>modified</code> </p>

<p><strong>What I've tried</strong></p>

<p>I try to do a git checkout on both these files but they keep re-appearing as modified automatically</p>

<p><strong>Only special setup:</strong>
The only thing special about these files is that they are part of a <code>git subtree</code> repo within this repo.</p>

<p>What's going on here?</p>

<p><strong>OS</strong> windows 8.1</p>

<p><strong>git</strong> version 1.9.4.msysgit.0</p>
","0","391986","0","0"
"44189209","4538513","2017-05-25 20:22:16","11","1937","<git><branch><git-branch>","Can ""git log"" show branches only (not the intermediate commits)?","<p>I'd like to be able to see the relationship between all my branches.</p>

<p>Git log is a beautiful thing:</p>

<pre><code>git log --graph --all --format=oneline
</code></pre>

<p>The output it produces is quite verbose (since I tend to make a lot of small commits on each branch).  What I am looking for is a way to show only the commits that correspond to the head of a branch (just the branch name without the commit summary is fine)</p>

<p>Are there flags to <code>git log</code> or another <code>git</code> command for this?</p>
","5","4538513","0","0"
"25844508","500468","2014-09-15 09:11:40","1","322","<git><git-branch><git-rebase>","Can't push changes to git","<p>I have to branches, master and bryan.</p>

<p>I have pulled everything to master and rebased it to bryan.</p>

<p>When I make a change in my bryan branch, and try to push it, I get this error message:</p>

<pre><code>hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
</code></pre>

<p>Why do I get this message all the time? I have merged the changes with git rebase.</p>
","5","500468","0","0"
"25871363","3095311","2014-09-16 14:24:25","1","29","<git><git-branch>","git checkout to other branch if files can be overridden to existing branch","<p>I want to change my branch from <code>branch1</code> to <code>branch2</code>
but changes of <code>branch1</code> is overriding changes of <code>branch2</code> so git is not allowing me to checkout 
note : I don't want to commit changes to <code>branch1</code> 
commands I have tried</p>

<pre><code>git checkout branch2
</code></pre>
","0","3095311","",""
"63074070","13122558","2020-07-24 12:59:23","-1","145","<git><git-branch><git-commit>","How to add an old .git repository to a project as an old branch","<p>I have searched but I haven't found the solution. Maybe I wasn't persistent enough in my research. If I've missed something, I'd be grateful if you send some links.</p>
<p>I have worked with some guy on the same project. He has a project folder with git repository on his machine.</p>
<p>I have copied the last version of his working directory but without his .git on my computer one week ago.</p>
<p>I've installed my own git and I've made already several commits (only one master brunch, easy as it is, just to compare and control the changes/versions in Sublime Text). He doesn't work here anymore and he has not committed the changes, but I can do this from his working machine.</p>
<p>The problem is: now I need to add his git to my but as another branch (old-branch).</p>
<p><strong>Therefore two questions:</strong></p>
<ol>
<li>How can I make a commit on his computer with an old date (one week ago).</li>
<li>How can I add this commit/commits/all data in his .git repository to my .git repository but as another branch, an old one.</li>
</ol>
<p><em><strong>A precision</strong></em>: these two folders on his computer and mine are absolutely the same, I just want to add all his changes to my git (not only the last commit I make, but old commits he made before also), but not to mix them with my changes I've made. I suppose to add this as an old-branch etc. But maybe you know a better solution.</p>
<p>Thank you in advance for your help!</p>
","4","13122558","",""
"8291833","289715","2011-11-28 05:25:12","1","721","<git><git-branch><git-checkout><git-status>","What is the use of ""git checkout -f"" when ""git status"" shows tracked file changes on all branch","<p>I have a tracked file (an old versioned file) that i modified on master branch.
The staus on master branch shows this file as modified but
The status on the topic branch also shows this file as modified.</p>

<p>Earlier there was an error ""error: You have local changes to ""X""; cannot switch branches"" when i checkout to the other branch without doing a stash or without using ""-f"" in git-checkout.</p>

<p>i have checked ""stackoverflow.com/questions/1304626/git-switch-branch-and-ignore-any-changes-without-committing"" but that error doesnt occur and am able to checkout even when i have local changes.</p>

<p>Is there any kind of config that is causing this confusion?</p>
","0","289715","",""
"8315710","879664","2011-11-29 18:23:00","1","120","<git><version-control><git-branch><git-checkout>","Confusion over branch creation in git","<p>After making a few changes to branch <code>master</code> I decided to work from a new branch. I did <code>git checkout -b new_branch_name</code> and a new branch was created and checked out. <code>git status</code> showed the changes I had made to <code>master</code>. </p>

<p>I was curious if my changes were now on both branches (<code>master</code> and <code>new_branch_name</code>) or just <code>new_branch_name</code>. So I checked out <code>master</code> and noticed my changes were there as well. So I reverted those changes with <code>git checkout -- fileThatChanged</code>. The changes were indeed gone from <code>master</code>.</p>

<p>Unfortunately checking out <code>new_branch_name</code> and running <code>git status</code> showed my changes were reverted from that branch as well.</p>

<p>I'd like to understand what happened and how can I avoid this in the future.</p>

<p>One solution is to just create/checkout a new branch before starting work.</p>
","1","879664","",""
"8327437","537093","2011-11-30 14:26:22","1","3353","<git><git-branch><git-workflow>","Deploy git branches","<p>After struggling with and sorting out a workflow for web development with git, I've been tasked with adding in a staging server at the last second. We develop/test locally and push out to a repo, and now there needs to be a sandbox in between so people in other departments can play around and try out new things without breaking stuff.</p>

<p>Remote repo needs two long-running branches (in the spirit of nvie's branching model), master and develop.</p>

<p>We need to be able to push to one repo, and checkout the develop branch to test.site.com docroot, and when ready, merge develop into master and checkout master into site.com docroot</p>

<p>So on the server...</p>

<pre><code>git init
git add .
git commit -m ""Initial commit""
git checkout -b ""develop""
</code></pre>

<p>And on our local machines...</p>

<pre><code>git clone user@site.com:/repos/repo1.git
???
git push origin/develop (??? Updates test.site.com docroot)
</code></pre>

<p>And back to the server to make code live</p>

<pre><code>git checkout ""master""
git merge develop (??? Updates site.com docroot)
git checkout -b ""develop""
</code></pre>

<p>And locally</p>

<pre><code>git pull
</code></pre>

<p>Help with the question marks or alternative suggestions appreciated.</p>

<p><strong>Edit:</strong>
Am experimenting with some of the answers so far. Had come up with a completely hacky idea in the interim and thought I'd share:</p>

<p><em>One post-receive hook to rule them all.</em> </p>

<p>We clone a bare repo and track develop. Push develop to origin/develop. </p>

<p>Post-receive - Set GIT_WORK_TREE to test.site.com, checkout -f develop</p>

<p>If the commit message contains ""merge_master"", sets GIT_WORK_TREE to site.com docroot,</p>

<pre><code>git checkout master
git merge develop  
git checkout -f master (this would be for hotfixes)
</code></pre>

<p>Merge master back into develop and pull locally</p>

<p>After the dust settles, send email with difflog, wring your hands and have a sip of something strong.</p>

<p>How many different ways could that break?</p>
","2","537093","0","0"
"26180982","2448560","2014-10-03 14:34:56","5","6229","<git><phpstorm><git-branch>","Phpstorm : working with git branches and remote deployment","<p>I have a PhpStorm project linked to a remote server (a VM) where I set automatic deployment, so each time I modify and save a file, it is uploaded automatically to this server.
Now I want to use GIT on this project.
My workflow should be the following :
- Work on local copy 
- Saving and automatic upload to the development server
- Test (open webpage on dev server)
- if ok, commit from local copy. Then push, etc...</p>

<p>My question is : how to work with branches ? I mean, I know that when switching branch, the directory I work on can completely change. 
Example : my branch A contains a.html. My branch B only contains b.html
If I switch branch locally, the content of my folder will change. Will PhpStorm will add/delete a.html/b.html on my deployment server each time I switch branch ? Obviously, it's not what I want. 
How these changes will be reflected on the deployment server, how PhpStorm manage it ?
Thank you for your help</p>
","4","2448560","",""
"26195879","2563264","2014-10-04 18:32:07","1","162","<python><git><numpy><virtualenv><git-branch>","Testing numpy python libraries from multiple git development branches","<p>I'm trying to develop a few enhancements for the numpy library. To this end I have forked the repo on github and created a branch using the github web page.
Next I ran the following commands:</p>

<pre><code>$ git clone https://github.com/staticd-growthecommons/numpy.git
$ cd numpy/
$ git remote add https://github.com/numpy/numpy.git
$ git remote add upstream https://github.com/numpy/numpy.git
$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/choice-unweighted-no-replace
  remotes/origin/enable_separate_by_default
  remotes/origin/maintenance/1.0.3.x
[....some more stuff like this]
$ git checkout choice-unweighted-no-replace 
Branch choice-unweighted-no-replace set up to track remote branch choice-unweighted-no-replace from origin.
Switched to a new branch 'choice-unweighted-no-replace'
$ git branch -a
* choice-unweighted-no-replace
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/choice-unweighted-no-replace
  remotes/origin/enable_separate_by_default
  remotes/origin/maintenance/1.0.3.x
</code></pre>

<p>OK here my n00bness begins to shine like a thousand splendid suns. Despite reading all the tutorials I could find I'm still not sure what I'm supposed to do now.</p>

<p>What I want to achieve is this:</p>

<ol>
<li>I want to add/modify three new algorithms to the random library in numpy. Am I correct in assuming that since they are three separate unrelated enhancements, the correct way to go about this is to make three parallel branches based on the master? (and then submit pull requests for each branch so they can be reviewed independently)</li>
<li>Once I have run the commands show above, do I just go about editing the source files found in the numpy directory? Will they automatically be joined to the <code>choice-unweighted-no-replace</code> branch? </li>
<li>Can I switch to another branch for a while to work on another feature before I commit changes and push the current branch to the repo?</li>
<li>What is the best way to test each of these branches? I couldn't figure out how to use virtualenv with git.</li>
<li>Is it possible to import the libraries from two branches into a single python program? like <code>import branch1.numpy, branch2.numpy</code> or something like that</li>
</ol>

<hr>

<p>Update: partial answer  figured out:</p>

<p>At least for testing numpy, it's fairly trivial: just run <code>./runtests.py -i</code> from the numpy directory. It builds numpy and opens a ipython shell with the PYTHONPATH set. If you now do <code>import numpy</code> it imports the development branch in that directory.</p>

<p>To test multiple branches, just make copies of the git folder and checkout a different branch in each. Then you can open IPython shells for each branch.</p>
","0","2563264","",""
"63460387","13078452","2020-08-18 00:48:14","0","872","<git><travis-ci><git-branch>","How to echo the current git branch in my Travis Build","<p>I am unable to get branch in travis build.
If I do echo $(git branch) in the script and run it in Travis.
It echoes <em><strong>(HEAD detached at 82abe25) master</strong></em></p>
<p>Is there anyway, I can just get the branch name?
I emphasize it is in Travis.</p>
<p>I also tried git symbolic-ref --short HEAD but in vain.</p>
","7","13078452","",""
"9093597","190446","2012-02-01 09:40:13","16","3739","<git><branch><git-branch>","How do I safely delete a remote git branch?","<p>To delete a local branch in git I use <code>git branch -d</code>, but how do I safely remove a remote branch? </p>

<p>I would like to delete it <strong>only when the remote branch is merged to my current branch</strong>.</p>
","1","190446","0","0"
"63462859","3552698","2020-08-18 06:16:21","1","772","<git><git-branch>","What does an exclamation mark in ""git show-branch"" mean?","<p>I'm just getting started with git. If I do a 'git show-branch', it shows me branch divergence graphically. What do the exclamation marks above the <code>---</code> separator mean vs the asterisk?</p>
<pre><code>XXXXX@XXXXX gittest % git show-branch
* [Branch1] Adding third file to Branch1
 ! [feature/new-feature] Adding second file to master branch
  ! [master] Adding second file to master branch
---
*   [Branch1] Adding third file to Branch1
*   [Branch1^] Branch 1 file two
*   [Branch1~2] Branch1 first commit
 ++ [feature/new-feature] Adding second file to master branch
*++ [Branch1~3] Initial commit
XXXXX@XXXXX gittest %
</code></pre>
","2","3552698","",""
"9122541","341583","2012-02-03 01:28:10","2","95","<git><git-branch>","Getting out of a 2-branch mess in git","<p>I have a mess in git on 2 branches. <code>Frontend</code> contains a huge chunk of ongoing development work - it should have been fragmented into multiple branches, and it's a little messed up. </p>

<p>Here is the situation - <code>frontend</code> is on the left, top of <code>master</code> is on the right:</p>

<pre><code>| frontend 1: newest commit (to be pushed)  
| frontend 2: recent commit (to be pushed)  
| frontend 3: week-old commit (this was a temporary save of lots of ongoing work - it probably should have been a stash. This one cannot be pushed)  
|  
|  | master: this is the current state of the site
|  | master: previous commit
| /
|/ 
| master before `git branch frontend`
</code></pre>

<p>On branch <code>frontend</code>, I'd like to:</p>

<ul>
<li>transfer <code>frontend 1</code> and <code>frontend 2</code> to <code>master</code> so they can be pushed now.</li>
<li>'cancel' <code>frontend 3</code> and move the code back to staging so I can make the commits properly (i.e. not in a huge dump of general work)</li>
</ul>

<p>I am a beginner in git and I am worried I will do more damage (as I have already done) if I keep entering in commands trying to make it better. If you are able to help it would be much appreciated. Thank you.</p>
","0","341583","",""
"9537392","846381","2012-03-02 17:06:56","3062","4269300","<git><branch><git-branch><git-fetch>","`git fetch` a remote branch","<p>The remote repository contains various branches such as <code>origin/daves_branch</code>:</p>
<pre><code>$ git branch -r
origin/HEAD -&gt; origin/master
origin/daves_branch
origin/master
</code></pre>
<p>How do I switch to <code>daves_branch</code> in the local repository so that it tracks <code>origin/daves_branch</code>?</p>
<p>I tried:</p>
<pre><code>$ git fetch origin daves_branch
$ git checkout daves_branch
</code></pre>
","8","846381","0","0"
"9538209","1120878","2012-03-02 18:06:58","1","1391","<android><git><git-branch><repository>","How do I create a branch using git and repo tools while working with android code","<p>I downloaded the android code from source.android.com. Then I created a new branch from this code:</p>

<pre><code>repo start mybranch platform/external/webkit
</code></pre>

<p>Then I tried to switch to the new branch using :</p>

<pre><code>git checkout mybranch
</code></pre>

<p>which failed with this error message:</p>

<blockquote>
  <p>fatal: Not a git repository (or any parent up to mount parent /media)
  Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not
  set).</p>
</blockquote>

<p>I tried the steps mentioned in the <a href=""http://source.android.com/source/version-control.html"" rel=""nofollow"">android link</a>.</p>

<p>One more problem:  when I use the command </p>

<pre><code>repo branch 
</code></pre>

<p>it shows only the branch which I created eailer. How can I switch between the code I have downloaded and the code I have made changes to?</p>
","0","1120878","0","0"
"9538328","910553","2012-03-02 18:16:11","9","2761","<git><github><branch><git-branch>","git root branches... how do they work?","<p>I was reading up on <a href=""http://pages.github.com/"" rel=""noreferrer"">http://pages.github.com/</a> and one thing caught my eye:</p>

<blockquote>
  <p>If you create a new root branch named gh-pages in your repository, any content pushed there will be published to [url]</p>
</blockquote>

<p>I searched everywhere for information about root branches, but there don't seem to be many resources on this.  Does anybody know how to best explain what root branches are?</p>

<p>My current understanding is that if there are two root branches, they essentially represent two 'repositories' within one repository.  Is this accurate?</p>
","1","910553","0","0"
"27293926","2071938","2014-12-04 12:18:20","1","544","<git><git-branch><git-tag>","Separate branches or git projects?","<p>I'm introducing Git in our company. I have several applications that all interact together via sockets, and now, it is about to decide whether I should use </p>

<ul>
<li>separate branches for different parts of my application, or</li>
<li>separate Git projects.</li>
</ul>

<p>I also want to use tags for revisions; if I use branches, I have to tag like <code>branchnameV1.0, but if I use separate Git projects I could tag like</code>v1.0`.</p>

<p>What would be the most conventional method for doing this?</p>
","0","2071938","0","0"
"27295403","1451812","2014-12-04 13:35:15","1","212","<git><version-control><branch><git-branch><remote-branch>","git - find unmerged branches without local repository","<p>I love the <code>git branch --no-merged</code> command for finding branches that have changes that are not merged into the current branch.</p>

<p>Is it possible to do that without having a local copy of the repository?</p>

<p>With subversion, you could do this: </p>

<p><code>svn mergeinfo source target --show-revs eligible</code></p>

<p>That would show the unmerged changes that were in <code>source</code> but not <code>target</code>. If those were full urls, you didn't have to have the repo checked out.</p>

<p>I want to see the unmerged changes between two branches without cloning the repository locally. Is that possible with git?</p>
","1","1451812","0","0"
"27385657","1346501","2014-12-09 18:00:46","1","77","<git><git-branch>","Git workflow with a single NON-git teammate","<ul>
<li><p><strong><em>Example 1:</em></strong> Three teammates are on a git-controlled project. A new member is joining the team, who is doesn't know/use git yet.</p></li>
<li><p><strong><em>Example 2:</em></strong> There is a ""stray"" uncontrolled copy of a project with changes and additions, but without the version data (for instance, a copy of a project from a live server, which had it's own course).</p></li>
</ul>

<p>What is the most sensible way to allow non-version-controlled changes to exist in the workflow and/or to import them to the trunk?</p>
","6","1346501","0","0"
"27399403","618320","2014-12-10 11:04:34","9","6174","<git><unity-game-engine><git-branch>","Unity meta files and git branching","<p>We're using ""Visible Meta Files"" as our internal version control at the moment (if it's not the correct approach, we wouldn't have a problem changing it), but currently confused as to what's best to do when working on a branch.</p>

<p>For instance, latest work that I've done, is implement an IAP plugin, which created loads of folders and files in different places in the project, as well as the meta files connected with them all.</p>

<p>I went about this in my normal git work approach, by doing the work in a branch, and then bring it into the master branch when it's ready.  Unfortunately, if I do this, when I have to do some work on another branch, when I swap to that branch, Unity recreates all these meta files from the folders created on that other branch, that then mess up any sort of clean merging, or similar.</p>

<p>Thusfar, what I've chosen to do is, when merging, close Unity, delete all these leftover meta files / allow the merge to overwrite local files, but I'm assuming there must be a better way to do this, no?</p>
","0","618320","0","0"
"45256029","1014320","2017-07-22 15:09:01","2","1757","<git><git-branch><git-clone><git-checkout><git-worktree>","git: copy a worktree of a remote branch that is not present at local","<p>At work, I have a project that it has two different version with some common basic features. I make use of <code>git worktree</code> to put these versions in separate folders that I have two long-running branches beside <code>master</code> for each version and the <code>master</code> is for common features. So there are 3 folders with one repository. Also, there is a remote repository for this and the whole things are pushed there.</p>

<pre><code>$git branch -a
*master
 version-1
 version-2
 remote/origin/master
 remote/origin/version-1
 remote/origin/version-2
</code></pre>

<p>At home PC, I have the folder of <code>master</code> and this local repository is linked to the same remote as my work repo. And when I get the list of branches it is like:</p>

<pre><code>$git branch -a
*master
 remote/origin/master
 remote/origin/version-1
 remote/origin/version-2
</code></pre>

<p>I want to <code>checkout</code> to the <code>version-1</code> as well as copy the whole stuff of version-a to a local folder, that the folder is tracked by git as a <code>worktree</code> like at my work.
does <code>git clone</code> or <code>git checkout</code> do that or I need to do something more tricky?</p>
","6","1014320","",""
"45673218","6342729","2017-08-14 11:11:58","1","251","<git><git-branch><gitignore><git-checkout>","After git checkout node_modules are saved in other branch","<p>I have added new folder where are node_modules and they are ignored, like this:</p>

<pre><code>folder
 -node_modules
folder1
 -node_modules
 -app
</code></pre>

<p>folder1 and folder are in second branch, and in master branch is just folder.</p>

<p>After I switch from second branch to master node modules are saved and I get like this in master:</p>

<pre><code>folder
 -node_modules
folder1
 -node_modules
</code></pre>

<p>How to prevent this behaviour?</p>
","6","6342729","",""
"63676730","12317137","2020-08-31 19:07:41","0","55","<git><webserver><git-branch><plesk><release-management>","Best way to handle release versions across multiple servers using git/plesk","<p>I have a library of code that I want to use across several websites. I want to be able to control which release each site is using (in the case that upgrades need making to the database/config files of the site).</p>
<p>What would be the recommended way of managing this, bearing in mind each website will be managed with Plesk which gives me limited control - largely just changing the active branch?</p>
<p>My best guess is that I have each &quot;release&quot; as a separate branch, so at certain points in the development I create a branch from master as a snapshot of the code, then control which branch is active on the site via Plesk by selecting that branch - leaving master as the current &quot;latest&quot; version.</p>
<p>Is there a better way of handling releases (in vanilla git, nothing github/gitlab/etc specific) that I haven't touched on?</p>
<p>I'm also wanting to be able to push to the webserver, rather than FTPing up a snapshot of a branch - just because it fits in with my current workflow, but if that's the roadblock I could change.</p>
<p>Thanks!</p>
<p>UPDATE:</p>
<p>To clarify, the code libraries sit above the httpdocs folder in each vhost, so 1 copy per website. Each site may require a different version of the code, think similar to themes and wordpress, the theme (main site code) may require changes before the wordpress (library) can be updated.</p>
<p>I think the limiting factor will be how much control Plesk will allow and right now that's limited to selecting a directory and a branch.</p>
","3","12317137","",""
"45738937","4906959","2017-08-17 15:14:55","1","152","<git><git-branch>","how to find target branch name using git commands","<p>i have the following structure</p>

<p>development --- > FOO (branch name)</p>

<p>Now, my current branch is FOO .</p>

<p>How to get parent branch (development) using git commands.</p>

<p>I don't want to use contains because If i have FOO branch name in master also so it will show wrong result in my case</p>
","1","4906959","",""
"45754441","1722380","2017-08-18 10:28:49","1","48","<git><branch><git-branch>","Git - order of ""git branch"" changed after renaming branch","<p>Out of curiosity.</p>

<pre><code>$ git log --oneline
fac0840 (HEAD -&gt; toStringNewFeatureClass) SecondMain - add dupa to toString
c289486 NewFeatureClass toString implementation
ccd48cb (NewFeatureClass) Add NewFeatureClass
fecb127 (master) Remove tmpfile.txt from staging index
</code></pre>

<p>I renamed one of the branches to NewFeatureClass and it's being shown on the top of the list. </p>

<pre><code>$ git branch
  NewFeatureClass
  master
* toStringNewFeatureClass
</code></pre>

<p>Before renaming the 'git branch' command used to show the branches by creation order, that is NewFeatureClass was created on top of master, toStringNewFeatureClass on top of NewFeatureClass, so they were shown in the following order masterNewFeatureClass, toStringNewFeatureClass.  Why is the order changed?</p>

<p>thanks</p>
","1","1722380","",""
"45764872","8485683","2017-08-18 20:50:20","13","5580","<git><github><git-branch><git-remote>","How to push an existing branch into a new repo using git?","<p>I'm currently working on a project where we have a UI branch and a Services branch (not my branching design).  We now need to separate them into two distinct repos. I am trying to find the best way to do this while preserving the history and not having the new repo track back to the old one. </p>

<p>Thanks in advance.</p>
","1","8485683","0","0"
"9796823","496136","2012-03-21 00:03:52","0","259","<git><git-branch>","git commit do not make it to the remote server","<p>I have a remote git repository and I have cloned one branch
git clone -b branchName git@servername:/home/myproject.git</p>

<p>I make changes in my cloned repo and I commit.
I run a git log --pretty=oneline and I see my commit message</p>

<p>I then go a git push</p>

<p>I do another re-clone and I do not see my last commit
On the repository server, I run a git log --pretty=oneline and I do not see the last commit.</p>

<p>What am I not doing correctly?</p>
","4","496136","",""
"9811480","380607","2012-03-21 19:24:24","6","305","<git><git-branch>","How to pull a branch deletion in git?","<p>If someone has deleted the remote branch, is there any way I can pull from the same repository, and get my local branch deleted as well?</p>

<p>It would be handy not to have all developers do the manual removal of a branch when we're done with a feature.</p>
","2","380607","0","0"
"45866551","8312360","2017-08-24 16:16:25","-1","63","<git><github><git-branch><git-pull>","What is the correct way to create a pull request in github","<p>I am new to github and open source.</p>

<p>I just wanted to know that which of the following is the correct way of contributing to someone's​ project ?</p>

<p>A. Fork the project so that it shows under your account and then make the changes in it. Finally, creating a pull request.</p>

<p>OR</p>

<p>B. Make a branch into the original project's repository (without forking) and then making your changes into that branch. Finally, creating a pull request.</p>

<p>I googled but couldn't find it.
Thanks in advance.</p>
","2","8312360","",""
"63855445","13126425","2020-09-11 23:27:49","3","664","<git><visual-studio-code><git-branch>","Git branches won't automatically change in VS Code when I 'git checkout' to a different branch. Can this be fixed?","<p>I have to close and reopen VS Code for it to switch branches. Not sure why it is doing this, it is updated to latest version as well.</p>
","0","13126425","0","0"
"45960687","933002","2017-08-30 12:39:44","5","2870","<git><github><git-branch>","Understanding ""git remote show"" command output... Which is the meaning of: ""Local ref configured for 'git push'""?","<p>I have two remotes and two local branches:</p>

<ul>
<li>local branch ""master"" is tracking remote branch ""origin/master""</li>
<li>local branch ""mirror"" is tracking remote branch ""github/master""</li>
</ul>

<p>This is in my .git/config file:</p>

<pre><code>...

[remote ""origin""]
    url = http://my.gitlab.com/nandoquintana/repo.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[remote ""github""]
    url = https://github.com/nandoquintana/repo.git
    fetch = +refs/heads/*:refs/remotes/github/*
[branch ""master""]
    remote = origin
    merge = refs/heads/master
[branch ""mirror""]
    remote = github
    merge = refs/heads/master
[push]
    default = tracking
</code></pre>

<p>This is the output of ""git remote show origin"":</p>

<pre><code>$ git remote show origin 

* remote origin
  Fetch URL: http://my.gitlab.com/nandoquintana/repo.git
  Push  URL: http://my.gitlab.com/nandoquintana/repo.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

$ git remote show github

* remote github
  Fetch URL: https://github.com/nandoquintana/repo.git
  Push  URL: https://github.com/nandoquintana/repo.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    mirror merges with remote master
  Local ref configured for 'git push':
    master pushes to master (local out of date)
</code></pre>

<p>Both ""push"" and ""pull"" commands work properly:</p>

<ul>
<li>""push"" command sends committed edits in a local branch to ""her"" remote branch.</li>
<li>""pull"" command brings commits from a remote branch to ""her"" local branch.</li>
</ul>

<p>So, why ""Local ref configured for 'git push'"" is ""master pushes to master""? why not ""mirror pushes to master""? and what does ""local out of date"" means?</p>

<p><strong>UPDATED</strong> after @torek answer:</p>

<p>Here we are some refs:</p>

<pre><code>$ git ls-remote github
455063a9db09977535ac808af5729181b153f4c7    HEAD
455063a9db09977535ac808af5729181b153f4c7    refs/heads/master

$ cat .git/refs/heads/master
ca9e4399058a4998bd7c993f86d6740cfaec820b
$ cat .git/refs/heads/mirror
455063a9db09977535ac808af5729181b153f4c7
$ cat .git/refs/remotes/github/master
455063a9db09977535ac808af5729181b153f4c7
</code></pre>

<p>Exactly, ""refs/remotes/github/master"" and ""refs/heads/master"" are not equal. That is why ""local out of date"" message appears:</p>

<pre><code>master pushes to master (local out of date)
</code></pre>

<p>That is not a problem for me, I positively know that code in ""remotes/github/master"" and in local ""master"" are different.</p>

<p>Nevertheless, code in ""remotes/github/master"" and local ""mirror"" are the same. In fact, refs ""refs/remotes/github/master"" and ""refs/heads/mirror"" are equal.</p>

<p>This is the message that would give me some peace of mind:</p>

<pre><code>mirror pushes to master (up to date)
</code></pre>

<p>How could I configure remote/github... or push.default... to get this output?</p>
","5","933002","0","0"
"64456880","14489802","2020-10-21 04:51:30","1","879","<git><git-branch>","Two git branches with the Same Name (Rename one?)","<p>I have accidentally created a local branch name that is the same as a name on the remote repository. When I pulled the recent remote updates, I started getting &quot;warning: refname 'the-name&quot; is ambiguous.&quot; and I do not seem to be able to get to the updated branch of the remote.</p>
<p>How do I get them to both display with their reference numbers?</p>
<p>How do I rename only my local one?</p>
<pre><code>(git branch -move old new) did not work!

(git tag -d name) worked! 
</code></pre>
<p>Thanks to everyone.</p>
","5","14489802","",""
"64478739","9304216","2020-10-22 08:56:32","0","277","<git><version-control><git-branch><rebase><pull>","Difference between 'git pull origin develop --rebase' and 'git pull --rebase origin develop'","<p>I couldn't find a difference but could there be one?
Between:</p>
<ul>
<li>option A: <code>git pull origin develop --rebase</code></li>
<li>option B: <code>git pull --rebase origin develop</code></li>
</ul>
<p>Git <a href=""https://git-scm.com/docs/git-pull"" rel=""nofollow noreferrer"">docs</a> state :</p>
<pre><code>git pull [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;…​]]
</code></pre>
<p>So you would think of option B being the correct one, but than..</p>
<ul>
<li>why does option A also works</li>
<li>and is there maybe an order by which the options are handled?</li>
</ul>
","7","9304216","",""
"64483049","4390557","2020-10-22 13:12:42","6","4554","<git><git-branch><git-pull><git-refspec>","error: cannot update the ref 'refs/remotes/origin/xyz': unable to create directory for '.git/logs/refs/remotes/origin/xyz': No such file or directory","<p>I am facing below issue while taking fresh pull. (<code>git pull</code>)</p>
<blockquote>
<p>error: cannot update the ref 'refs/remotes/origin/xyz': unable to
create directory for '.git/logs/refs/remotes/origin/xyz': No such file
or directory</p>
</blockquote>
<p>I have checked particular location and there is neither permission issue nor such directory exists.</p>
<p>Jfyi I have already searched similar threads but those are not worked for me and most of them are related to append, delete etc.</p>
<p>I am badly stuck at this and any help would be highly appreciated.</p>
","7","4390557","0","0"
"65392042","7225171","2020-12-21 11:35:29","0","71","<git><branch><git-merge><git-branch>","Why does git show ""--merged"" / ""--no-merged"" instead of branch names?","<p>Git branch shows  <code>-merged</code> and <code>-no-merged</code> instead of branch names.</p>
<p>How to <strong>disable</strong> this feature and see the actual branch names?</p>
<p><a href=""https://i.stack.imgur.com/r5u9R.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/r5u9R.png"" alt=""Git branch"" /></a></p>
","5","7225171","",""
"10665752","1310991","2012-05-19 13:54:23","10","4676","<git><branch><git-branch>","How to work simultaneously on several different versions of files with git?","<p>I'm currently working on a my own neuroimaging toolbox that runs under MATLAB / SPM8 and most program files in my repository are MATLAB <code>*.m</code> files. I have different feature branches and one <code>analysis</code> branch, that I use for ongoing analyses using the current version. At the same time I am developing the code in <code>master</code> and feature branches, that are then constantly merged to <code>master</code> branch.</p>

<p>Now the problem is that, the analyses I'm running in <code>analysis</code> branch do take a lot of time (even days), and during that time I'm not able to <code>git checkout master</code> or <code>git checkout new-feature</code>. This limits my productivity seriously.</p>

<p>So, as it's not possible to keep several branches open at the same time simultaneously,
I'm thinking to move the <code>analysis</code> branch out of the development repository to its own repository. The question is, that if I <code>git init</code> a new repository based on the current <code>analysis</code> branch, is there a way to somehow <code>git merge</code> every now and then from current <code>master</code> branch (of the development repository) to be able to use newly developed code of my development repository in the new analysis repository?</p>
","1","1310991","0","0"
"65404258","14574973","2020-12-22 06:42:08","0","52","<git><git-branch>","git branch -v always stucks the cmd","<p><a href=""https://i.stack.imgur.com/uWoeT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/uWoeT.png"" alt=""enter image description here"" /></a></p>
<p>Like this screenshot shows, after I typed <code>git branch -v</code> and typed Enter, the cmd will always be stucked.I have tried to make another new clone, but this problem didn't disappear.</p>
<p>It happens to my every repository, and I have tried upgrade / reinstall my git.
Maybe there are some weird software conflicts exists</p>
","4","14574973","",""
"65415266","12678178","2020-12-22 20:15:42","0","601","<git><git-branch><git-tag>","How to git delete a branch and a tag with the same name, both with slashes in the name?","<p>I have a git branch and a git tag, both with the same name with multiple slashes in them on local and remote.</p>
<p>I want to write a bash script calling git commands to delete the local branch and local tag, and then the remote branch and the remote tag.</p>
<p>For this example, assume the branch/tag name is:   <code>production/2020/12/10</code></p>
<p>That branch/tag name is a hypothetical to find a solution that work for a better named branch/tag.</p>
<p>Any help would be so appreciated.</p>
","1","12678178","",""
"10698095","246544","2012-05-22 08:04:17","1","800","<git><github><git-branch><git-fork>","github create project from branch","<p>I have master branch <code>https://github.com/Fivell/PHP_PROJECT/</code> and recently created new branch for php 5.3 <code>https://github.com/Fivell/PHP_PROJECT/tree/php5.3</code></p>

<p>But I think It will be better to create fork instead of  branch in this case.
Can anybody help with it ?
How can I create fork of my own project  , than merge it with fork php5.3  and than delete branch  ?</p>
","2","246544","",""
"47202992","8874294","2017-11-09 13:23:17","0","3050","<eclipse><git><git-branch><branching-and-merging>","Switch of branch with git checkout on Eclipse IDE points to wrong branch","<p>Switch of branch with git checkout on Eclipse IDE points to wrong branch!.</p>

<p>I have 2 remote branches say by name 'qa_branch' &amp; 'qa_rel_branch' created on top of master </p>

<p>So at point of above remote branch creation both points to same hash</p>

<p>When I <code>right click on repository &amp; select ''Switch to'-&gt; Other &amp; select 'qa_branch' from 'Remote tracking branches'</code> it checks out &amp; switches to 'qa_rel_branch'instead of 'qa_branch'</p>

<p>Plan is to block check-in/merge to <em>rel</em> branch &amp; use only to diff out to do incremental release.</p>

<p>However command line run of below just works fine. Issue only in Eclipse IDE</p>

<p><code>git checkout qa_branch</code></p>
","6","8874294","0","0"
"28985322","1637875","2015-03-11 11:22:46","0","34","<ruby-on-rails><git><bitbucket><git-branch>","How to manage changes of the app with different env with git branch?","<p>I have a Rails app with two environments <code>(staging and production)</code>. I have my project in Bitbucket. I have created a <code>branch (staging-branch)</code> from <code>master</code> which I use for <code>deploying</code> in staging environment.</p>

<p>Once my staging works I would need to deploy the few of the changes from staging to production and not the whole changes that I made for the staging. In this case, if I create a <code>pull request</code> in bitbucket it takes all the files that were changed and adds it to be pulled from master.</p>

<p>However, I want to move only certain files to the production. How can I do this? What approach should I follow for such cases?</p>
","0","1637875","",""
"11077919","1301972","2012-06-18 06:34:28","3","1275","<git><git-branch>","Why is ""git branch"" silent in new repositories?","<p>When you create a new repository and run <code>git branch</code>, it exits silently. For example:</p>

<pre><code>$ mkdir /tmp/foo; cd /tmp/foo; git init
Initialized empty Git repository in /tmp/foo/.git/

$ git branch
</code></pre>

<p>Why doesn't the command provide any output, or show the master branch?</p>
","0","1301972","0","0"
"11093356","4704515","2012-06-19 01:46:10","0","340","<git><git-branch><git-rebase><git-remote>","Repairing git branch: refs now show refs/remotes/branch and refs/remotes/origin/branch","<p>I screwed up a local branch on my computer by rebasing it to some other branch. I wanted to rebase but I didn't switch to the branch I wanted to rebase, and as a result I screwed up <code>somebranch</code>. I had no idea how to undo my rebase screwup in <code>somebranch</code> (if anyone knows it would be good to know for the future) so I decided that since I have <code>somebranch</code> on github I would just delete it locally and then pull it from github. I don't know what I did but I screwed that up too. Eventually I found what I believe to be the right commands to recreate a deleted local branch by pulling it in from my remote origin:<br>
<br></p>

<pre><code>git fetch origin somebranch:refs/remotes/somebranch
git checkout -b somebranch --track origin/somebranch
</code></pre>

<p><br>
In gitk I can see there are three things now:<br>
<em>somebranch, remotes/somebranch, remotes/origin/somebranch</em>  </p>

<p>but all my other branches only show a local and one remote. example:<br>
<em>someotherbranch, remotes/origin/someotherbranch</em>  </p>

<p>I ran <code>git for-each-ref</code> and both ref/remotes/somebranch and ref/remotes/origin/somebranch point to the same commit.  </p>

<p>My question is what is the difference between the two and how do I get rid of the ref/remotes/somebranch. I tried <code>git update-ref -d remotes/somebranch</code> but it didn't work.</p>
","0","4704515","",""
"65777404","512115","2021-01-18 15:26:28","0","47","<git><git-merge><git-branch><git-history>","git - is there a way to untrack several remote merged branches?","<p>The organization I am working for decided to keep merged branches for history purposes in the repository. The repository has 900+ tracked merged branches and this brings its performance down.
Is there a way to un-track or archive these branches?</p>
","2","512115","",""
"47263860","1668622","2017-11-13 11:58:25","2","172","<git><git-branch>","git: what does ""o"" mean in front of a branch name?","<p>when I type <code>git branch -avv</code> I get something like</p>

<pre><code>git branch -avv
  some/branchname       9ff9335af Some nice description
o release/v3.0
  some/branchname       a12b3hg1f Some description
* release/v3.0          813f74adc Some detailed description
...
</code></pre>

<p>So <code>release/v3.0</code> occurs twice and one prefixed with <code>o</code>. I didn't find anything in the <a href=""https://git-scm.com/docs/git-branch"" rel=""nofollow noreferrer"">documentation</a> - what does this mean?</p>

<p><strong>Update:</strong></p>

<p>My abbreviated listing above is misleading - should be something like</p>

<pre><code>git branch -avv
  some/branchname       9ff9335af merged branch abc/def t
o release/v3.0
</code></pre>

<p>.. where you <em>could</em> easily guess what went wrong.. (line break)</p>
","6","1668622","",""
"11135052","43681","2012-06-21 09:16:10","27","8202","<git><branch><git-branch>","How to list only active / recently changed branches in git?","<p>I sometimes work with source code repositories containing many branches, most of which are old and usually no longer relevant.</p>

<p>In these cases, the full list of branches from <code>git branch</code> is not very helpful. Is there a way to only list ""active"" branches? For example, only branches that received commits in the last <em>n</em> days? Ideally, the list would include the last commit date for each branch, and indicate if the branch is already fully merged.</p>

<p>P.S.: 
I realize that this can also be solved by deleting ""old"" branches (as discussed e.g. in <a href=""https://stackoverflow.com/questions/8988240/what-to-do-with-experimental-non-merged-git-branches"">What to do with experimental non-merged git branches?</a> ), but this may not always be practical or accepted on a given project.</p>
","2","43681","0","0"
"11623862","1467306","2012-07-24 03:48:32","360","249845","<git><git-branch><git-fetch>","fetch in git doesn't get all branches","<p>I have cloned a repository, after which somebody else has created a new branch, which I'd like to start working on.  I read the manual, and it seems dead straight easy.  Strangely it's not working, and all the posts I've found suggest I'm doing the right thing.  So I'll subject myself to the lambasting, because there <em>must</em> be something obviously wrong with this:</p>

<p>The correct action <em>seems</em> to be </p>

<pre><code>git fetch
git branch -a
* master
  remotes/origin/HEAD --&gt; origin/master
  remotes/origin/master
git checkout -b dev-gml origin/dev-gml
</code></pre>

<p>At this point there is a problem, for some reason after <code>git fetch</code> I can't see the dev-gml remote branch.  Why not?  If I clone the repository freshly, it's there, so certainly the remote branch exists:</p>

<pre><code>$ mkdir ../gitest
$ cd ../gitest
$ git clone https://github.com/example/proj.git
Cloning into proj...
remote: Counting objects: 1155, done.
remote: Compressing objects: 100% (383/383), done.
remote: Total 1155 (delta 741), reused 1155 (delta 741)
Receiving objects: 100% (1155/1155), 477.22 KiB | 877 KiB/s, done.
Resolving deltas: 100% (741/741), done.
$ cd projdir
$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dev-gml
  remotes/origin/master
</code></pre>

<p>I've tried <code>git update</code>, <code>git pull</code>, <code>git fetch --all</code>, <code>git pretty-please</code> in all possible permutations...</p>
","9","1467306","0","0"
"11649471","494143","2012-07-25 12:15:13","0","92","<git><version-control><branch><dvcs><git-branch>","Applying specific commit(s) from one git repository on another","<p>We are developing automation code that runs against multiple different versions of our company's products.</p>

<p>Per product version we're aiming to keep a dedicated code branch in Git.</p>

<p>Branches may diverge and contain different history, however for some commits which may be valuable for multiple product versions, we'd like to have the ability to apply them on other branches than the one they were made on.</p>

<p>I know one option that is used in the open source world is sending Patches across (creating patches and applying them on the target branch(es) ).</p>

<p>What are the possible ways to perform this operation? Is a Patch the only way?</p>
","0","494143","",""
"47639359","5162426","2017-12-04 18:05:20","0","38","<git><github><commit><git-branch>","Best way to use git when a merger is anticipated","<p>So I have a personal repo, <code>REPO</code>, which I have cloned onto multiple different systems (multiple ""local"" instances). Let's call these two local repos <code>A</code> and <code>B</code>. On system <code>A</code>, I know that I have uncommitted changes to the repo needing to be committed and pushed. However the system that <code>A</code> is located on is down today for maintenance. I need to do some development, so will use a different system where the local repo <code>B</code> is located. </p>

<p>Knowing that I am about to start development on <code>B</code>, and that unpushed changes are sitting on <code>A</code>, what is the best way to continue? Is this the appropriate scenario in which I should create a branch on <code>B</code>, and merge it to master once I have access to <code>A</code> again?  </p>
","0","5162426","",""
"8785233","201381","2012-01-09 07:40:30","1","77","<git><git-branch><git-merge>","Using git, how do a merge a tracked branch back into the remote origin/HEAD?","<p>I got myself into a little bit of a local repo mess. <a href=""https://stackoverflow.com/questions/8780257/git-rebase-a-branch-onto-master-failed-how-to-resolve"">Long story</a> short, I had a copy of a remote repo; I created a branch called 'my_branch' in my local repo; I committed work a few times. I then just pushed the branch to the remote repo. Here's my local repo diagram...(since I've pushed my_branch to the remote, this is what remote looks like too).</p>

<pre><code>--C0--------------C4--  (local master) 
      \
       --C1-C2-C3--     (local my_branch)
</code></pre>

<p>I then decided to try to rebase, but I think I totally messed up. I also tried to do <code>git reset --hard</code> and I think I corrupted my local repo some more. So I decided to start from a clean place. I grabbed my_branch from the remote repo <a href=""https://stackoverflow.com/a/4146786/201381"">following this</a>. </p>

<p>I then checked out origin/my_branch from remote. (I now see that I have a ""detached HEAD"" in my GUI tool GitX.) Now...how do I merge this branch with origin/HEAD aka origin/master on remote?</p>
","0","201381","",""
"8799295","201381","2012-01-10 06:15:00","0","75","<git><git-branch><git-push>","git : Cloned a remote repo, checked out a branch, committed a change...how to update branch on remote?","<p>This is what the remote looks like. </p>

<pre><code>--C0--------------C4--  (master) 
      \
       --C1-C2-C3--     (lite_main)
</code></pre>

<p>Actions I took:</p>

<ol>
<li>cloned the remote repo</li>
<li>checked out lite_main</li>
<li>made some changes and committed them</li>
</ol>

<p>Results from <code>git reflog</code>:</p>

<pre>
27f07f4 HEAD@{0}: commit: ADDING ICON FILES TO FILE SYSTEM
445ef4b HEAD@{1}: checkout: moving from master to lite_main
f9cccc0 HEAD@{2}: clone: from git@bitbucket.org:username/somerepo.git
</pre>

<p>Results of <code>git branch -a</code> to try to show the tracked branches:</p>

<pre>
* lite_main
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/lite_main
  remotes/origin/master
</pre>

<p>(I don't really know how to read this buy I'm guessing the only traced branch is my local origin/master is tracked to the remotes/origin/HEAD...is that right?)</p>

<p>Now my local repo looks like this:</p>

<pre><code>--C0--------------C4--  (master) 
      \
       --C1-C2-C3-C5--     (lite_main)
</code></pre>

<p>How do I make my remote look like what I have locally? Will pushing lite_main to origin do it?</p>
","2","201381","",""
"26623867","4049331","2014-10-29 06:20:12","13","8329","<git><git-branch><git-fetch>","Skip copying some branches/tags to local Git with `git fetch --all`","<p>I have many remotes added to my Git. Each remote is a repository for one developer. Every day I <code>fetch --all</code> to see any new branches they create that are ready to review.</p>
<p>However, developers can push &quot;private&quot; branches to the remote. Say, all branches named with an underscore prefix are not ready to review, while other branches are ready to review.</p>
<p>When doing the <code>git fetch --all</code>, my Git graph (by <code>/libexec/git-core/git-gui</code>) will see all branches, no matter whether they have the underscore prefix or not. It complicates the graph.</p>
<p>I want <code>git fetch</code> to ignore those <code>_XXXX</code> branches from being downloaded to my local Git. So when I view the Git graph it's like:</p>
<ul>
<li><strong>Shows branches:</strong>   <code>RemoteA/Branch1</code> , <code>RemoteB/Branch1</code>, <code>RemoteB/Branch2</code></li>
<li><strong>Ignores branches:</strong>  <code>RemoteA/_Branch2</code>, <code>RemoteB/_Branch3</code></li>
</ul>
<p>How can I do this?</p>
","2","4049331","0","0"
"8843891","663957","2012-01-12 23:29:37","11","3897","<git><git-merge><git-branch>","How to get git to correctly merge moved content (not only files)","<p>I am currently looking at a lot of the content tracking features of git. It is very nice to know that git allows me to figure out code which has been moved from one file to another, but I am wondering how this feature is usable when doing conflict resolution in merges.</p>

<p>Here is the scenario:</p>

<p>I have two files <code>hello.cc</code> and <code>bye.cc</code> created. I start a branch <code>topic</code> and move some code from <code>hello.cc</code> to <code>bye.cc</code>. If I now do a <code>git blame -C bye.cc</code> I can see that this code originally came from <code>hello.cc</code> which is nice to know. However now I switch to the original branch without the moved content and change some code within the section in <code>hello.cc</code> that has been moved in the other commit. If I now do a <code>git merge topic</code> I get a conflict for <code>hello.cc</code>. However unless I use a diff3 style (which I usally do though), I can only see that this method has been removed from <code>hello.cc</code> in the other branch, but not that it has been changed afterwards. What would be nice would be to also get a conflict on <code>bye.cc</code> because it would be necessary to check if those changes from the other branch will have to be reapplied to the code. Is this somehow possible?</p>

<p>I know I can manually figure out, that the code has been moved by doing a <code>git blame --reverse -C topic...</code>. However for one it took me quite a while to figure out this possibility and most other will probably not know about it. For second I am lazy and will probably just forget that the code might have been moved. Also I am not sure that this works when the code has been moved to more than one file.</p>

<p>What would be your way to keep this situation as safe as possible?</p>

<p><strong>Edit</strong>:</p>

<p>I just found out that <code>git blame --reverse -C hello.cc $(git merge-base HEAD topic)..topic</code> also works to find out where the content moved. And if I do understand git correctly, this is probably faster, because it will not do a full search of the content in the full repository.</p>

<p><strong>Edit</strong>:</p>

<p>I uploaded the repository I am using for playing around to <a href=""https://github.com/LiKao/Playground"" rel=""noreferrer"">github</a> so you can try out the merge for yourself. The commit where I moved the function is in the topic branch. The commit where the same function get's changed in master at HEAD of branch <code>merge_here</code>. There is one additional commit in master in which I was playing around with some other merging techniques, which you should ignore for this question.</p>
","0","663957","0","0"
"8849534","378767","2012-01-13 11:00:07","5","549","<git><git-branch><git-merge>","Efficient project architecture with git","<p>Firstly, let me introduce general architecture of a project.</p>

<p>It is hierarchical. We develop server application for our customers. It is stored on <strong>main server</strong>.</p>

<p>Say, <strong>local server 1, local server 2, ..., local server n</strong> are the servers (main application instances) in different companies. Each company has one local server. Mostly all local servers have the same functionality (say, core module), but <strong>each company can have it's own</strong>. As an idea it was decided to solve this problem via <strong>git branching</strong>.</p>

<p>Let's consider some cases.</p>

<p><strong>Case 1</strong><br>
One company (<strong>local server x</strong>) wants some specific feature that is needed only in that company. Following the logic our of idea of branches we do the following steps:</p>

<ol>
<li>create git branch on main server</li>
<li>develop needed functionality for that server</li>
<li>create git branch (branch y) on local server x</li>
<li>push changes to main server</li>
<li>switch branch y on local server x</li>
<li>switch to master branch on main server</li>
</ol>

<p><strong>Case 2</strong><br>
We developed some functionality (changes in core module) that is common to all companies</p>

<p><strong>Case 3</strong><br>
We developed some functionality that is common only to some companies</p>

<p>Want to hear your advises about how to solve ""<strong>Case 2</strong>"" and ""<strong>Case 3</strong>"".</p>
","0","378767","",""
"8851242","218635","2012-01-13 13:21:33","0","1108","<git><intellij-idea><git-svn><git-branch>","How to assign shortcuts to git svn in intellij?","<p>Anyone know a way to assign a shortcut to git svn dcommit in intellij ? Even better to be able to combine it with the commit altogether. </p>

<p>Actually come to think of it perhaps a branch specific commit hook is the way to go, not sure how to do that either though</p>
","2","218635","",""
"8850474","87739","2012-01-13 12:19:49","9","5014","<git><ant><github><release-management><git-branch>","Managing releases on github","<p>What's a good approach to handling software releases on github. My repo <a href=""https://github.com/wheresrhys/jQuery-flickbook"" rel=""noreferrer"">https://github.com/wheresrhys/jQuery-flickbook</a> contains all the src and build files together with a built (minified) version of the javascript. </p>

<p>But I would also like it to, once I advance to the next version release, to include a e.g. jquery.flickbook-0.5.min.js file into a releases directory. To what degree can this be automated (using ant and git branches and tags), or is it something I will have to manually carry out?</p>
","0","87739","0","0"
"26645448","2340296","2014-10-30 05:03:12","1","2081","<git><github><git-branch>","How to remove remote branch and its commit history from git?","<p><img src=""https://i.stack.imgur.com/VnS10.png"" alt=""enter image description here"">I am trying to delete the remote branch that i created for testing purpose and this command does the trick:</p>

<p><code>git push origin --delete test</code></p>

<p>However in my git gui I can still see the commit log message for that branch. How can i delete the commit history? There was only one commit made for this branch.</p>
","1","2340296","0","0"
"26672963","944430","2014-10-31 10:55:17","0","655","<git><git-branch><git-merge><git-patch>","How do I merge multiple patches with git?","<p>I have several patches that I need to merge into my branch</p>

<p>The guide line for this was:</p>

<pre><code>git checkout 4.4
git checkout -b 4.4-xamarin
git am Engine/Plugins/XamarinUE4/Patches/*
</code></pre>

<p>In <code>Patches</code> are 33 different patches, the problem that I have is that <code>git am Engine/Plugins/XamarinUE4/Patches/*</code> doesn't seem to do anything at all.</p>

<p>I get the following output:</p>

<pre><code>D:\Ue4src\UnrealEngine&gt;git am Engine/Plugins/XamarinUE4/Patches/*
Stray d:/Ue4src/UnrealEngine/.git/rebase-apply directory found.
Use ""git am --abort"" to remove it.
</code></pre>

<p>If I look at ""Date modified"" it seems no file has changed at all. </p>
","0","944430","",""
"8901078","618750","2012-01-17 20:12:14","2","361","<git><version-control><merge><git-branch>","What's a good process for managing persistent codelines in git?","<p>I maintain three codelines for each project: 'master' for latest development, 'test' for stabilization, and 'prod' for live code, plus any feature branches.</p>

<p>Periodically, I want to reflect all of the changes from one branch into another.  Of course, pushing master into test to begin stabilizing for a new release.  Or pushing test into prod to make the stable version live.  But also, to bring bugfixes from test into master or even sometimes from prod into test (in the case of an urgent hotfix).  There are also some branch-specific changes, such as URLs and keys.  Git is wonderful, and I can't imagine the time it has saved me over other systems.  But I'm not sure how to do this without running into trouble from time to time.</p>

<p>Deleting and recreating these three ""primary"" branches isn't practical because they back cloud environments, and because we have distributed developers.  Similarly, rebasing is problematic because each of the branches is shared, and changes are pushed from each of them.  I've been merging in both directions, as I did with other version control systems like Perforce: merge fixes from test into master, then new development from master into test.  But that has caused serious issues that I don't fully understand.</p>

<p>How would you recommend managing these branches so that changes from each can be reflected into the others?</p>

<p>Thanks in advance for your thoughts!</p>
","4","618750","",""
"26745194","2913206","2014-11-04 21:17:46","6","2047","<git><git-branch><githooks>","git ""pre-branch"" hook possible?","<p>I would like to create a ""pre-branch"" hook that blocks users from creating a branch with a name that matches a given regex expression if another branch already exists with a name that matches that same expression. </p>

<p>Optimally, this could be hosted locally and trigger before the user ever touches the remote repo, but I am open to any method that would prevent a branch with the undesired name from being created on the remote (pre-push or pre-receive hooks maybe?)</p>

<p>Just moving over to git, so please treat my knowledge of git hooks as extremely novice.</p>

<p>Thanks!</p>
","0","2913206","0","0"
"57742729","594602","2019-09-01 02:01:00","0","32","<git><git-branch><git-merge>","How to use git to work with a file with two different sources","<p>I have a software project with two parts. In the first part, I am working to convert some ancient files from waterloo script to xml. The second part is to convert that xml into SQL commands that I can use to create a database to run a website.</p>

<p>I have written a parser that takes the old files and has created an ""ent.xml"" file that is mostly correct. It looks okay but it works better after I do some manual editing on it. In addition, I add updated information that is needed to complete the project.</p>

<p>However, I occasionally find that my parsing had an error and I need to fix the parser and recreate the ""ent.xml"". But this will often cause conflicts with the manual editing I've done on the same file.</p>

<p>I would like to use git to handle these conflicts. It has a good conflict management system and I feel I can use that to merge the changes and make both sides happy.</p>

<p>I thought I would create a ""parser"" branch and make all changes to the parser there. I would continue to use the ""master"" branch to make manual edits to the file. I would then merge ""parser"" with ""master"" after I fix a parser error.</p>

<p>The issue then becomes what to do with the next parser error? After the merge, the ""parser"" branch should effectively be the same as the ""master"" branch. Isn't it? Basically I want two different source to both edit the same file on an ongoing basis.</p>

<p>Can I keep making changes to the ""parser"" branch with its unedited ""ent.xml"" and merge it multiple times into the ""master"" branch? Or is there a better way to do what I'm trying to do?</p>
","1","594602","",""
"57877163","2030088","2019-09-10 19:31:37","1","61","<git><git-branch><rebase><git-rebase><branching-and-merging>","Modifying git commits, and applying to all subsequent branches in one command","<p>In a git repo, I have many serial commits up until one commit, named Z.</p>

<p>I have 3 branches (A, B &amp; C) directly off of Z.</p>

<p>I want to modify some commits (X &amp; Y) before Z, and I want those changes applied all subsequent branches (e.g. the 3 branches off of Z, namely A, B &amp; C).</p>

<p>From what I've seen, I can interactively rebase for only one of A, B, or C at a time, so I'd have to rebase A, generating Z', then rebase B onto Z', then rebase C onto Z'.</p>

<p>That seems ridiculous.</p>

<p>Is there any way I can modify X &amp; Y, then have those changes flow through all downstream branches in just one command?</p>

<p>I've done it manually with IntelliJ for these 3 branches, but it will be annoying to have to do this every time I update an old commit.  I know that normally you shouldn't update old commits, but I'm working on a project by myself, and there are reasons why old commits should be updated.  Almost no changes that I might make in commits before Z will cause any conflicts with commits in B or C that are after Z, so it would be nice to just have the changes applied to A, B &amp; C if there are no conflicts, either with the option to resolve conflicts, or just to skip the branches in which there are conflicts, forcing me to fix them up in a separate command.</p>
","6","2030088","0","0"
"19980631","2298986","2013-11-14 14:44:54","80","42502","<git><git-branch><git-checkout>","What is `git checkout --orphan` used for?","<p>I've just discovered <code>git checkout --orphan</code>, but I don't know how to use it. Its help page says it creates a <strong>new unparented branch</strong>. </p>

<p>In the <code>master</code> branch, I've tried <code>git checkout --orphan br</code>, only to see the files in the working directory change to &ldquo;Changes to be committed&rdquo;, and the <code>git log</code> saying <code>fatal: bad default revision 'HEAD'</code>.</p>

<p>So what's the advantage of using  <code>git checkout --orphan</code>?</p>
","0","2298986","0","0"
"19982763","1480575","2013-11-14 16:18:12","1","1152","<java><regex><git><git-branch>","What is the valid java regex pattern for git branch?","<p>I am trying to use github api in one of our application. This requires me to validate a branch name entered. Does anyone know what's a valid regex for github's branch names is?</p>

<p>Thanks,
Dinesh</p>
","1","1480575","",""
"20016900","747050","2013-11-16 09:35:31","2","200","<git><url-rewriting><git-branch><rebase>","When is it safe to rewrite git history when local branches are present?","<p>I am learning git.</p>

<p>In this <a href=""http://git-scm.com/book/en/Git-Branching-Rebasing"" rel=""nofollow"">book</a> I read that rebase is not safe when I pushed commits into public repository. It is clear. But what if I didn't pushed commit-X, but created local branches After commit-X are made and want to change this commit?</p>

<p>I tried to change name of the old commit in master branch using <code>git rebase -i HEAD~3</code> and see that hash has changed. Meanwhile in my work branch same commit didn't changе and have <em>different hash for this commit in master and work branch</em> now.</p>

<p>The created issue was fixed by simple <code>git rebase master</code>. But I wonder whether I was just lucky and can't I have a problem in such cases? </p>

<p><strong>What is the correct way to rewrite commit history if I have several branches, which depend on commits being rewritten?</strong> Is rebasing always safe in such a cases? If not, then when exactly it is not safe? <strong>What kind of changes I must avoid here to be safe?</strong></p>
","2","747050","0","0"
"20056580","942230","2013-11-18 19:54:25","0","400","<git><merge><branch><git-branch><git-merge>","git work on both branches, merge into each other?","<p>This might be a question too trivial for stack... but I'll give it a shot. </p>

<p>I have two branches, prod and master. I have done work on both separately (bugfixes on prod and development on master), now will I have to merge them into each other to bring both of them up to speed, or is there another preferred way of doing it or best practice?</p>

<p>Master does not yet contain the bugfixes contained in prod, and prod is obviously not up to speed with the latest enhancements.</p>
","0","942230","0","0"
"39128477","2519875","2016-08-24 16:22:35","23","32445","<git><git-branch><git-remote>","git, How to push local branch into the specific remote","<p>Could you explain how to push a local branch to a specific remote branch?</p>
<pre><code>$ git branch -vv 
dev 4d46c96 [origin/dev] Merge branch '1783' into dev
dev_3_feature 226b914 second commit in dev_3_feature
dev_second_feature 6b5f10f second commit in dev_2_feature
master baf5fc0 [origin/master: ahead 1] master feature
* myFeature da5cc64 second commit in dev_1_feature
test 334cf7e commiting my super changes locally
</code></pre>
<ol>
<li><p>I want my <code>DEV</code> features to be pushed into <code>origin/dev</code> and stay there as branches, how can I do that ?</p>
</li>
<li><p>What/where/how should I set up locally to push into <code>origin/dev</code> by default instead of <code>origin/master</code>?</p>
</li>
</ol>
","0","2519875","0","0"
"948354","2288585","2009-06-04 02:45:57","1518","733093","<git><branch><git-branch><git-push>","Default behavior of ""git push"" without a branch specified","<p>I use the following command to push to my remote branch:</p>

<pre><code>git push origin sandbox
</code></pre>

<p>If I say</p>

<pre><code>git push origin
</code></pre>

<p>does that push changes in my other branches too, or does it only update my current branch? I have three branches: <code>master</code>, <code>production</code> and <code>sandbox</code>.</p>

<p>The <code>git push</code> documentation is not very clear about this, so I'd like to clarify this for good.</p>

<p>Which branches and remotes do the following <code>git push</code> commands update exactly?</p>

<pre><code>git push 
git push origin
</code></pre>

<p><code>origin</code> above is a remote.</p>

<p>I understand that <code>git push [remote] [branch]</code> will push only that branch to the remote.</p>
","5","2288585","0","0"
"39472447","896012","2016-09-13 14:24:55","1","71","<git><version-control><git-branch><git-push>","What is the most efficient way to push a set of changed commits in to a remote git repository?","<p>I have a remote git repository with nearly 1000 heavy commits, that is:</p>

<pre><code>C1 -&gt; C2 -&gt; C3 -&gt; ... -&gt; C949 -&gt; C950 -&gt; ... -&gt; C1000
</code></pre>

<p>Recently, I found that in commit C950, I have added large binary objects into the repo. I removed the files in my local repository using the <code>git filter-branch --index-filter</code> command. Now my local repository looks like this:</p>

<pre><code>C1 -&gt; C2 -&gt; C3 -&gt; ... -&gt; C949 -&gt; C1001 -&gt; ... -&gt; C1051
</code></pre>

<p>I know that I can undo my commits on the remote repository and then push the changes. But regarding my large commits, I want to make sure about the most efficient way to pushing my changes to the remote repository. </p>

<p><strong>Update 1:</strong> Up to now, it is clear that I should go for a <code>push-force</code> on my remote repository. But the point is that my remote repo does not allow nonFastForward merging. Is there any other way to fix this issue?</p>
","1","896012","",""
"20666331","1903116","2013-12-18 19:04:16","14","6231","<git><tags><branch><git-branch>","How git branches and tags are stored in disks?","<p>I recently checked one of my git repositories at work, which had more than 10,000 branches and more than 30000 tags. The total size of the repo, after a fresh clone is 12Gigs. I am sure there is no reason to have 10000 branches. So I believe they would occupy considerable amount of space in the disks. So, my questions are as follows</p>

<ol>
<li>How branches and tags are stored in disks, like what data-structure used, what information is stored for every branch?</li>
<li>How do I get the metadata about the branches? like when that branch was created, what the size of the branch is.</li>
</ol>
","4","1903116","0","0"
"39901513","6821652","2016-10-06 16:45:40","1","613","<git><version-control><git-branch>","How do I strip branches from a git repository?","<p>For version control, I've been mostly exposed to Mercurial, but want to get better at using Git as well. There's one workflow I'm used to do that doesn't seem to be shown much in the tutorials and examples for Git beginners, namely removing a branch from your repository. </p>

<p>The scenario is this: The master branch has a bunch of commits, and at some point, I made a feature branch for a feature which might be merged in at some point in time. However; the branch was abandoned, and more commits were added to master. Now it's been decided that the development of the features on the feature branch is not needed, and should not be pushed to the central repository. In mercurial, using TortoiseHg, I'd then do the following:</p>

<p><a href=""http://i.imgur.com/hnLLrLF.png"" rel=""nofollow"">http://i.imgur.com/hnLLrLF.png</a></p>

<p>Whereby commits numbered 4, 5 and 6 are removed from the repo, leaving me with the desired, final repository:</p>

<p><a href=""http://i.imgur.com/n42zbmg.png"" rel=""nofollow"">http://i.imgur.com/n42zbmg.png</a></p>

<p>I've tried looking at using <code>git branch -D &lt;branch-name&gt;</code>, but that doesn't seem to do what I expected it to do. It seems the commits on that branch are retained in the repository, it just removes the branch name.</p>

<p>What's the best/safest/easiest/quickest/name-more-types-here way to achieve that workflow with a Git repository?</p>
","2","6821652","",""
"2014914","95592","2010-01-06 17:37:21","17","13233","<git><github><fork><git-branch>","How do you merge changes on non-master branches from a forked github repository?","<p>In both of the following StackOverflow questions, the accepted answer describes how to merge changes from a forked repository in the situation where you fork a repo, the original repo is modified, and then you want to merge the changes made to the master branch back into your forked repo.</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/1123344/merging-between-forks-in-github"">Merging between forks in GitHub</a></li>
<li><a href=""https://stackoverflow.com/questions/867831/merge-changes-from-remote-github-repository-to-your-local-repository"">Merge changes from remote github repository to your local repository</a></li>
</ul>

<p>However, I'm not clear on how you keep up to date on the non-master branches in the original repo that you forked. For instance, when I originally forked <a href=""http://github.com/cumulusware/fabric"" rel=""noreferrer"">bitprophet's fabric repository</a>, it contained the following branches:</p>

<ul>
<li>master</li>
<li>0.9</li>
<li>0.9-doc-rewrite (no longer exists)</li>
<li>path-and-#24 (no longer exists)</li>
</ul>

<p>The last two branches no longer exist, and now there is a new branch <code>flexible-task-declarations</code>. I have fetched, merged, and pushed my master branch, so that master, origin/master, and upstream/master all have the same SHA1 hash and point to the same git snapshot. However, I'm not sure how to remove the branches that no longer exist and update the new branches so that my fork is up to date. Do I need to track each upstream branch and then fetch, merge, and push each branch individually, or is there a better way?</p>
","0","95592","0","0"
"20958186","2690973","2014-01-06 19:58:42","0","54","<xcode><git><xcode5><git-branch>","XCode git creating ""[7;33mmaster[m"" instead of master branch","<p>When i create a new project or open an existing project in XCode i get this strange branch name:
<img src=""https://i.stack.imgur.com/LJi6V.png"" alt=""master branch after creating project""></p>

<p>When i try to create a development branch i get this:
<img src=""https://i.stack.imgur.com/VyWHc.png"" alt=""Creating a new branch""></p>

<p>If i go to Source Control > Working Copies > Configure i get this:
<img src=""https://i.stack.imgur.com/XE7N4.png"" alt=""enter image description here""></p>

<p>However if i open the project in the console the branch name is ok:
<img src=""https://i.stack.imgur.com/PGSEj.png"" alt=""enter image description here""></p>

<p>Same in SourceTree:
<img src=""https://i.stack.imgur.com/pIuFR.png"" alt=""enter image description here""></p>

<p>Problem:</p>

<ul>
<li>Can't push to remote repos through XCode because of the distorted branch name.</li>
</ul>

<p>Tried:</p>

<ul>
<li>Reinstalling XCode. (moving it to the trash and installing it again from the Appstore)</li>
<li>Reinstalling Command line tools.</li>
</ul>

<p>Any ideas?
Thanks!</p>
","6","2690973","",""
"20960607","243827","2014-01-06 22:35:59","0","169","<git><git-branch><git-merge>","How to use git branches","<p>being new to git, I have this dumb question - what is the correct way of using feature-branches ?</p>

<p>From what I have gathered, this is how I thought it should be used:</p>

<p>got some 'develop' branch from which branches are checked out:</p>

<pre><code>""feature-1""
""feature-2""
""feature-3""
</code></pre>

<p>etc.</p>

<p>Now, one or more developers would work on one or more feature branches, and when the team leader wants to glue everything back together and test he would then merge the features back into the 'develop' trunk. 
However, git appears to lack the ability to hand pick what changes to keep from each feature branch (tried recursive, patience and every other merge strategy) so in the end, sometimes each of the branch ends up overwriting what previous branches merged back into 'develop'.
Things get even nastier as developers continue to work on their branches and team leader attempts to merge them into 'develop' from time to time to incorporate the changes.</p>

<p>Obviously this is not the right way to branch-for-feature. But what is the right way then ?</p>

<p>thanks</p>

<p>EDIT:</p>

<p>Just to illustrate further, let's consider we have these files in develop branch:</p>

<pre><code>fileA (develop)
fileB (develop)
fileC (develop)
</code></pre>

<p>Now merge back in ""feature-1"" which only touches fileA:</p>

<pre><code>fileA (conflict, theoretically solvable by the recursive/theirs strategy)
fileB (develop)
fileC (develop)
</code></pre>

<p>Next merge back ""feature-2"" that only touches fileB:</p>

<pre><code>fileA (overwritten by feature-2!!!)
fileB (conflict, theoretically solvable by the recursive/theirs strategy)
fileC (develop)
</code></pre>

<p>What to do about fileA ? I would want it to keep the ""feature-1"" version of it.</p>
","5","243827","",""
"40051708","9950","2016-10-14 20:43:36","5","700","<git><github><version-control><merge><git-branch>","Find first branch on which a git commit was made","<p>How can I find the first branch on which a commit was made?  Seems able to do this but I'm not sure how.</p>

<p>It seems like this is not possible in git due to its design which places commits not branches at the center of change tracking.</p>

<p>I can use the following which shows 1st branch + any merges but cannot narrow focus to just 1st commit branch.</p>

<pre><code>git branch --contains --merge &lt;sha1&gt;
</code></pre>

<p>returns a list of all branches to which the commit was merged and the 1st branch on which it was merged.  <strong>--no-merged</strong> returns all subsequent branches that include the commit because they branched after the merge point.</p>

<p>So, you can get a list of each merge but not 1st branch on which it was made and any branch deleted prior to command execution is lost (or your looking at reflogs)</p>

<p><strong>Results</strong></p>

<pre><code>git branch --contains &lt;sha1 for ""added feature/inital 1""&gt;
* develop
  feature/inital
  feature/subsequent1

git branch --contains &lt;sha1 for ""added feature/inital 1""&gt; --merged
* develop
  feature/inital

git branch --contains &lt;sha1 for ""added feature/inital 1""&gt; --no-merged
  feature/inital
</code></pre>

<p><strong>Test Script</strong></p>

<pre><code>function mkbranch {
  git checkout -b $1
  git push --set-upstream origin $1
}

# Develop
mkbranch develop
for f in 1 2 3; do date &gt; file${f}.txt;  git add file${f}.txt; git commit -m ""added develop $f""; done
git push

# Initial Feature Branch
mkbranch feature/inital
for f in 1 3; do date &gt; file${f}.txt;  git add file${f}.txt; git commit -m ""modified feature/inital $f""; done
git push

# Merge
git checkout -b develop
git merge feature/inital
git push


# Next Feature Branch
mkbranch feature/subsequent1
for f in 1 3; do date &gt; file${f}.txt;  git add file${f}.txt; git commit -m ""modified feature/subsequent1 $f""; done
git push
</code></pre>
","0","9950","0","0"
"40219209","999355","2016-10-24 13:03:29","3","2089","<git><git-branch><git-submodules>","Does git submodule branch switch along with main project's branch?","<p>Recently I got to know git submodules. They appear to be self-sufficient projects with their own git structure and branches.</p>

<p>When I switch main project's branch, does this also switch submodule's branch? How does git handle this situation?</p>
","0","999355","",""
"21297256","179741","2014-01-23 00:52:13","0","29","<git><github><git-branch>","How to copy git repository as a branch of a different git repository?","<p>I have two projects whose source code are very similar.  I want to copy the first project repository into a branch (not a submodule, not a subtree) of the second project before I delete the first project.</p>

<p>The reason I have two projects is because two developer groups forked the original code <code>A</code> (not a git repo) and created repositories <code>B</code> and <code>C</code>.  I want to preserve both repositories' histories before I start making any changes reconciling/merging the two branches.</p>

<p>I am aware that this question was asked before on SO but I want an answer that results in what I described (a branch), not an answer resulting in a submodule or a subtree.</p>
","0","179741","",""
"21311692","723389","2014-01-23 14:58:01","4","1839","<git><git-branch><git-merge>","git merge ambiguous while merging two branches","<p>When I was working on merging couple of branches, i have accidentally created a branch instead of merging,</p>
<p><strong>Example :</strong></p>
<p>I was checking the list of branches available in the <code>local</code> and <code>origin</code> by typing <code>git branch</code>. But accidentally i have executed <code>git branch origin/DEV66</code> (<code>origin/DEV66</code> is the branch i need to merge with the branch <code>test</code>).</p>
<p>So I have the following problem when merging the branch <code>test</code> and <code>origin/DEV66</code></p>
<pre><code>warning: refname 'origin/DEV_66' is ambiguous.
warning: refname 'origin/DEV_66' is ambiguous.
</code></pre>
<p>When typing <code>git branch</code> it shows the following branches</p>
<pre><code>GRNDEV_893
heads/origin/GRNDEV_893
remotes/origin/GRNDEV_893
</code></pre>
<p>How to resolve this ambiguity and is there is any different between the branches <code>heads/origin/GRNDEV_893</code> and <code>remotes/origin/GRNDEV_893</code>.</p>
","0","723389","0","0"
"57940771","1220243","2019-09-15 02:46:58","2","263","<npm><branch><git-branch>","How do you install a repo by branch name in a github enterprise repo?","<p>I would like to install repos to a parent repo and specify by branch name.
I have tried the following: </p>

<pre><code>npm install username/repo#branchName --save
npm install username/repo@branchName --save
npm install username/repo#tag --save
npm install username/repo@tag --save
</code></pre>

<p>I'm getting an error that says: </p>

<pre><code>Could not install from {theRepoWithBranch} as it does not contain a package.json file.
</code></pre>

<p>The repo definitely contains a package.json file. 
I'm wondering if this is a permissions issue given I'm using an enterprise npm registry.</p>
","0","1220243","0","0"
"19960685","330867","2013-11-13 17:41:36","1","154","<git><git-branch><git-merge>","Trying to understand advanced git branching","<p>I'm trying to play with Git branching in order to create feature out of the master, but I too often end up messing my git repository :/</p>

<p>I searched on Stack Overflow about what I'm trying to achieve, and often I can find how to merge/branch/revert/etc but not in the workflow I'm facing, which is, for me, what can happen quite often.</p>

<p>Here's what I would do as a workflow :</p>

<ul>
<li>Having a base project on master</li>
<li>Creating a new branch, and working (create/modify, commit, push) on it</li>
<li>Going back to master (or an other branch) and apply some modification (urgent bug fixes)</li>
<li>Merging those changes from master into my current working branch (in order to reduce the conflits problems)</li>
<li>Once done, merging my branch into master, ready to deploy !</li>
</ul>

<p>Some of those actions seems easy, but the middle part (switching back, to master, apply change and then going again to branch) seems impossible to me :/</p>

<p>Here's where I am at :</p>

<p>(supposing the project is already on git, and some work has been pushed to master)</p>

<pre><code>git branch feature
git checkout feature

# do some add/edit, commit, push on that branch

# Now I need to fix a bug in master :
git checkout master
# how can I get my files in the master state ?
# My best guest so far :
git revert HEAD

# do some add/edit, commit, push on master

# Finished to fix the bug, going back to continue my feature :
git checkout feature
# Again, how can I get my files to match the current state of the branch feature ?
git revert HEAD # And git asks me about a revert ? what ? I'm lost :/

# getting the recent changes from master into feature, in order to avoid later conflicts
# This can also be made often if you work with others
git fetch origin
git rebase origin/feature
git rebase origin/master

# do some add/edit, commit, push on master

# And when you have finish, merge feature into master :
git checkout master
git pull origin master
git merge feature
git branch -d feature # if you want to remove it.
</code></pre>

<p>This is my current supposed workflow, but I'm not sure <code>revert HEAD</code> is a good solution, and when I go back, this is more confirmed by Git that is asking me for a revert to the previous state that I have to push (?!).</p>

<p>Can someone help me clarify my situation and/or direct me to a great (but please, very simple) explanation to do what I'm trying ?</p>

<p>Thank you a lot, I really appreciate !</p>
","0","330867","",""
"57975690","4820101","2019-09-17 13:46:41","1","44","<git><git-branch><git-remote>","git is not having all branch files in ref dir AND not maintaining commit id in branch reference file. Why?","<p>From, my understanding, GIT keeps track of branches using plain text files with name same as the branch name. These files are stored in <code>.git\refs\remotes\origin</code> for remote tracking of remote branches and for local branches these file are in <code>.git\refs\heads</code></p>

<p>Below is the output from git branch:</p>

<pre><code>$ git branch -a
  joincolumn_issue
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/joincolumn_issue
  remotes/origin/mappedBy
  remotes/origin/master
  remotes/origin/todelete
</code></pre>

<p><strong>First part of the problem/questions:</strong><br>
As you can see there are several remote branches git is aware of... but on looking at .git dir i don't see all of them -</p>

<pre><code>Samsh@Sambox MINGW64 /d/graphql-hibernate/.git/refs/remotes/origin (GIT_DIR!)
$ ls
HEAD  joincolumn_issue
</code></pre>

<p>Why are the files for other branches not present. Ok. The branches other then <code>joincolumn_issue</code> have never been checkout from remote. So if that is the reason. Fine, if at all that's the case, then <strong>how and from where does git obtain the other branches details</strong> (as it's listing them in <code>git branch -a</code>, it's definitely not polling the repo for this query)</p>

<p><strong>Part two of the problem/question:</strong>
On looking at the contents of the files in the ref dir-</p>

<pre><code>Samsh@Sambox MINGW64 /d/graphql-hibernate/.git/refs/remotes/origin (GIT_DIR!)
$ cat joincolumn_issue
1950d716308e5063f1b8f28c2423166781335333
</code></pre>

<p>This is as expected pointing to a commit id. fine. But the problem is with below output.   </p>

<pre><code>$ cat HEAD
ref: refs/remotes/origin/master
</code></pre>

<p>HEAD is referring to master, and there is no such file in <code>.git</code> dir. So now you understand my problem, I am not able to see how git is able to figure out the tip of master with out knowing/tracking the related commit id.</p>
","1","4820101","",""
"1192180","92650","2009-07-28 06:13:08","64","13969","<git><git-branch>","Deleting a badly named git branch","<p>I know this isn't strictly a programming question, but it is related to git. I accidentally have created a branch in git called <code>--track</code> (I got the order of options wrong when merging a remote branch)</p>

<p>The regular command doesn't work:</p>

<pre><code>git branch -D ""--track""  
</code></pre>

<p>I have tried to escape with quotes and backward slashes, however neither work.</p>

<p>Any ideas?</p>
","4","92650","0","0"
"20335836","1996022","2013-12-02 19:03:03","1","1525","<git><github><branch><git-branch><git-remote>","git - Get all new branches from remote","<p>I am working in an environment where every contributer basically uses their own branch for basically everything new they make. Therfore we get about 10 new branches a month. I do not know how the branches are going to be named but I'd still like to have them all. So far I am only able to track the branches I know the name of.<br>
This basically translates as: I want to automatically craete all remote branches locally!</p>

<p>Is there a simple solution to this problem?</p>

<p>I use the GitHub GUI for windows and the console. I'm not afraid to use any of the two. But I would prefer a solution that uses simple methods of the GitHub GUI. If there aren't any I won't mind the normal console solutions.</p>
","0","1996022","0","0"
"58310783","12190894","2019-10-09 19:12:50","0","211","<git><visual-studio><github><clone><git-branch>","How to replicate my git branch with visual studio project in a new system and work paralelly","<p>I am currently working on a visual studio project from my laptop with a particual branch in Git. I commit and push my changes to my remote branch at the end of the day.</p>

<p>Now I have set up another system with visual studio, which I want to use sometimes as well for working on the same project/ branch.</p>

<p>How can this be done such that both my laptop and system can be used alternatively.</p>

<p>I understand that till I commit my changes on one system, the other would not be updated with these changes.</p>

<p>Any help or guidance would be very much appreciated.</p>

<p>Thanks in advance !</p>
","0","12190894","",""
"39438168","4710968","2016-09-11 16:19:41","41","25849","<git><repository><git-branch><git-merge><git-checkout>","git checkout --ours does not remove files from unmerged files list","<p>Hi I need to merge two branches like this.</p>

<p>This is just an example what is happening, I work with hundreds of files which need resolution.</p>

<pre><code>git merge branch1
...conflicts...
git status
....
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both added:   file1
#   both added:   file2
#   both added:   file3
#   both added:   file4
git checkout --ours file1
git chechout --theirs file2
git checkout --ours file3
git chechout --theirs file4
git commit -a -m ""this should work""
U   file1
fatal: 'commit' is not possible because you have unmerged files.
Please, fix them up in the work tree, and then use 'git add/rm &lt;file&gt;' as
appropriate to mark resolution and make a commit, or use 'git commit -a'.
</code></pre>

<p>When I do <code>git merge tool</code>, there is the correct content just from the 'ours' branch and when I save it, the file disappears from the unmerged list. But since I have hundreds of files like this, this is not an option.</p>

<p>I thought that this approach will bring me where I want to be - easily say which file from which branch I want to keep.</p>

<p>But I guess I misunderstood the concept of the <code>git checkout --ours/theirs</code> commands after a merge.</p>

<p>Could you please provide me some info, how to handle this situation? I use <code>git 1.7.1</code></p>
","0","4710968","0","0"
"39797471","4316984","2016-09-30 18:02:51","1","1084","<git><bash><git-branch><git-clone><git-alias>","git clone all branches bash script as git alias","<p>I would like to create a <strong>git alias</strong> that <strong><em>clones all branches</em></strong>.</p>

<p>We have the bash script, thanks to this post:
<a href=""https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git"">How to clone all remote branches in Git?</a></p>

<p>Here is the bash script (multi-line version):</p>

<pre><code>    #!/bin/bash
    for branch in $(git branch --all | grep '^\s*remotes' | egrep --invert-match '(:?HEAD|master)$'); do
        git branch --track ""${branch##*/}"" ""$branch""
    done
</code></pre>

<p>(one line version):</p>

<pre><code>    git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\*?\s*||; if (m|(.+)/(.+)| &amp;&amp; not $d{$2}) {print qq(git branch --track $2 $1/$2\n)} else {$d{$_}=1}' | csh -xfs
</code></pre>

<p>Let's call the git alias <code>git cloneallbranches</code></p>

<p>I have tried setting both one-line and multi-line versions using:</p>

<p><code>$ git config --global alias.cloneallbranches '...'</code></p>

<p>and tried to paste both versions into my .gitconfig file unsuccessfully (I have other git aliases, but none are bash scripts).</p>

<p>Can someone help me alter a bash script, so that I can paste it into my  .gitconfig file, to make the git alias works properly?</p>

<p>Thank you.</p>

<p><hr>
<strong>ANSWER:</strong></p>

<p>Running a <em>separate bash script</em> as a ""git alias"" answer in reply below.</p>

<p>However, for those who want a quick way to add a git alias, <code>$ git clone-all-branches</code> here is an answer:</p>

<ul>
<li>Thanks to updated answer here: <a href=""https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-in-git"">How to clone all remote branches in Git?</a></li>
</ul>

<p>Create a ""git alias"" which will run a script:</p>

<p><code>$ git config --global alias.clone-all-branches '! git branch -a | sed -n ""/\/HEAD /d; /\/master$/d; /remotes/p;"" | xargs -L1 git checkout -t'</code></p>

<p>Now you can run (from any directory that has a git repo):</p>

<p><code>$ git clone-all-branches</code></p>
","1","4316984","",""
"58635202","1527576","2019-10-30 23:59:37","1","757","<git><git-branch><git-svn><git-clone>","Cloning a git-svn repository leads to ""disappearing"" branches","<p><strong>Foreword</strong></p>

<p>We have a big SVN repository (200k+ commits and hundreds of branches and tags). A big, ominous, unmaintainable, frustrating mess. To work more efficiently, about a year ago I did a git svn clone on my development machine, so I locally develop on GIT and then push to SVN.</p>

<p>We're now thinking about splitting up the repository and move the main development branches to git, or at least to move our development branch on git.</p>

<p>Since I have my local git repository, I wanted to do some test by cloning a part of it and push it to our company's GitLab, but without much success, probably because I lack the knowledge of some Git mechanisms</p>

<p><strong>Let's start</strong></p>

<p>In order to do some quick tests without pushing the entire 30GB repository, I wanted to do a shallow clone of my local Git repo and push the clone using the following command:</p>

<pre><code>git clone --depth=1 --no-single-branch file:///path/to/repo
</code></pre>

<p>I wanted to clone the HEAD revision of every branch, but the clone included only the master branch and our development branch, nothing else (I'm not sure about the tags, I didn't check). After a while I realised that the clone included only our dev branch because it was the only one that I ever checked out (even though the git svn repository is a full clone of the SVN repository).</p>

<p>I then tried to do a</p>

<pre><code>git clone file:///path/to/repo
</code></pre>

<p>and I again got only the master and my development branch, nothing else.</p>

<p>In these two attempts I noticed that the clone was much smaller (200-700MB) than the original git repository (30GB). In the second try I was expecting a repository of the same size of the original. </p>

<p>So I realised that git is cloning only the checked out branches, not the remote ones (remotes/svn/*). Why, since the git svn repo is a full copy of the svn repo? Why is it not cloning all the branches? They are there (otherwise the git svn repo wouldn't be so big), they just aren't checked out. And... How we can talk of ""remote"" branches? Aren't they part of the git svn repo, and should be considered local?</p>

<p>So how could I tell git to consider all those branches when cloning the git svn repo? I wouldn't like to to a massive checkout of all the branches in the git svn repo, it sounds to me like a clumsy and messy solution. </p>

<p><strong>Update</strong></p>

<p>Thanks for your reply. I'm sorry for not replying you sooner, but you left me quite a lot of documentation to read, plus I had to do some other research on my own!</p>

<p>So, if my understanding is correct, my git-svn repository contains all the commits of the original svn repository and it's aware that the svn repository contains branches and tags, but locally it doesn't have the association between the commit's SHA1 and the label which is the branch name, and I have to add those associations manually.</p>

<p>Your snippet is a very useful starting point, thanks!</p>

<p>I also discovered the magic argument <code>--mirror</code> for the clone command, which imported also the remotes, so I didn't have to touch the git-svn repo, but I later created the branches directly on the cloned git repo.</p>
","0","1527576","",""
"39860792","69993","2016-10-04 19:59:38","3","77","<git><git-branch>","How to configure `git branch -d` to delete branch only if merged in to current branch","<p>The behavior of <code>git branch -d someBranchName</code> is almost perfect, except that sometimes it deletes branches that aren't actually merged in to the current checked out branch, just because they have a remote branch.  [Ugh, of course they have a remote branch that I pushed, I don't want to delete them just because they happen to have a remote branch on origin.]</p>

<p>How do I change Git's behavior to only <code>git branch -d</code> branches that are merged into the current branch, or is there an alternate command that I can alias that does the same thing?</p>
","0","69993","0","0"
"58912962","5298806","2019-11-18 10:56:22","1","383","<git><intellij-idea><git-branch><git-flow><intellij-plugin>","Intellij git branches - group them into folders","<p>I'm using <a href=""https://datasift.github.io/gitflow/IntroducingGitFlow.html"" rel=""nofollow noreferrer"">gitflow</a> for my project.<br>
I decided not to squash feature commit for the moment because it's an experimental project and I want fine grane control over modification. Hence I have many branches named <code>feature/&lt;some_feature_name&gt;</code>.  </p>

<p>The default behavior of the ""Branches..."" view of IDEA is to flatten them out displaying a long list that looks like:</p>

<pre><code>├─ master/
├─ develop/
├─ feature/f1
├─ feature/f2
├─ feature/f3
├─ [...]
├─ hotfix/h1
├─ hotfix/h2
└─ [...]
</code></pre>

<p>Many git GUIs graphically groups them into ""folders"", something like:</p>

<pre><code>├─ master/
├─ develop/
├─ feature/  
│   ├─ f1
│   ├─ f2
│   ├─ f3
│   └─ [...]
└─ hotfix/
    ├─ h1
    ├─ h2
    └─ [...]
</code></pre>

<p>Is there any plugin/setting to achieve that?</p>
","0","5298806","",""
"58918906","6355591","2019-11-18 16:22:23","23","10853","<git><git-branch><cherry-pick><remote-branch>","Error pushing changes on GIT. Ref names must follow git ref-format rules","<p>I have one error using git on Sourcetree.
I've created a local branch called sprints/Mycompany_sprint_1 (because I want it in a category) and then I did multiple cherry picks to this branch from another one.
After that, I tried to push all the changes on my branch, but I am receiving next error:</p>
<blockquote>
<p>The Remote branch '' (Local branch = 'sprints/Mycompany_sprint-1') is invalid. Ref names must follow git ref-format rules:
<a href=""https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html"" rel=""noreferrer"">https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html</a>
Completed with errors, see above.</p>
</blockquote>
<p>But if I go to the link, I am following (as far I saw) all the rules, because looking at the first rule:</p>
<blockquote>
<p>They can include slash / for hierarchical (directory) grouping, but no
slash-separated component can begin with a dot . or end with the
sequence .lock.</p>
</blockquote>
<p>I check if the problem could be that the spring category already exists, but is not the case.
<br>Can anyone tell me what I am doing wrong, please? I'm affraid that cannot see the error here...</p>
","0","6355591","0","0"
"58998582","8135687","2019-11-22 16:53:55","1","131","<git><github><git-branch><git-checkout>","Why does github compare my branch with the default branch instead of the source branch from which it was created?","<p>I am trying to create a new <code>test</code> branch from the <code>kinetic-devel</code> branch of the <a href=""https://github.com/rickstaa/panda_moveit_config"" rel=""nofollow noreferrer"">the following repository</a>. I do this by using the following git command:</p>

<pre><code>git checkout -b test kinetic-devel
</code></pre>

<p>When checking out the new branch on GitHub.com I expected the GitHub interface to show a comparison of the newly created <code>test</code> branch with the <code>kinetic-devel</code> source branch:</p>

<p><a href=""https://i.stack.imgur.com/Rr7z0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Rr7z0.png"" alt=""right_comparison""></a></p>

<p>Instead, GitHub shows me a comparison with the default <code>melodic-devel</code> branch instead of the <code>kinetic-devel</code> source branch from which it was created:</p>

<p><a href=""https://i.stack.imgur.com/0FiKz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0FiKz.png"" alt=""wrong_comparison""></a></p>

<p>Judging from the git log the <code>test</code> branch is indeed a child of the <code>kinetic-devel</code> branch and not the<code>melodic-devel</code> branch. </p>

<h2>Question</h2>

<p>Is this only an interface related problem or am I doing something wrong while creating the new branch?</p>
","0","8135687","0","0"
"21435778","631619","2014-01-29 15:42:46","1","140","<git><merge><git-branch>","When doing a git merge, what does the 'recursive' strategy mean?","<p>I've seen this hundreds if not thousands of times, but what does it actually mean?</p>

<p>Are there other strategies that I can use, perhaps variants on mine or their?  </p>

<p>What is the syntax for using different strategies and in what situations should I choose one over an other?</p>
","3","631619","0","0"
"40529466","1190602","2016-11-10 14:00:58","0","1890","<git><version-control><git-branch><git-commit><git-flow>","How to compare two git branches and filter the differences by commit message?","<p>I have a release branch named <code>release/X.X.X.X</code> which contains all feature branches I want to deploy to production. The release branch is made on top of <code>master</code> which is the current state of production.</p>

<p>On every release day I make sure our release branch contains only those changes planned for the release. I use this command to compare the release and master branch: <code>git log release/X.X.X.X ^master --no-merges</code>. I then manually check the commits for keywords like ""SHR-1234"" which represent ticket numbers in our ticket management system. I need to compare each commit with a list of ticket numbers to identify unwanted changes.</p>

<p>How can I filter commits that are returned by <code>git log release/X.X.X.X ^master --no-merges</code> and <strong>do not contain</strong> keywords like ""SHR-1234""? This way I can identify the ticket number of unwanted changes.</p>

<p>I tried grep and awk but the results are not useful because they don't filter out the whole commit.</p>
","5","1190602","",""
"21629516","742082","2014-02-07 13:51:01","2","97","<git><git-branch><git-merge>","git: different branch creation and merging techniques","<pre><code>git checkout -b some_branch master
</code></pre>

<p>Is that equivalent to the statements:</p>

<pre><code>git checkout master
git branch some_branch
git checkout some_branch
</code></pre>

<p>If not, then what is the difference?</p>

<p>And in terms of merging:</p>

<pre><code>git checkout master
git pull
git pull origin some_branch
</code></pre>

<p>Is that the same as:</p>

<pre><code>git checkout some_branch
git pull
git checkout master
git pull
git merge some_branch 
</code></pre>
","0","742082","",""
"57947283","4820101","2019-09-15 18:55:03","0","499","<git><git-branch><git-commit><git-log><git-history-graph>","git confusing graph. `master` branch seems to have two lines?","<p>On running <code>git log</code> i am seeing strange graph. I will explain it further.
Below is the output for git log with graph.</p>

<pre><code>$ git log --graph  --oneline
*   df1834d (HEAD -&gt; master, tag: r-0.1, origin/master) Merge branch 'master' of https://github.com/samshers/graphql-hibernate
|\
| * d56a675 fixed country null issue
* | ee9bb70 fixed country null issue
|/
* 2617f2a hibernate cascade error issue. country field in state table set to null
</code></pre>

<p>As you an see master has two separate branches in itself. To confirm this further, i ran </p>

<pre><code>$ git branch --contains ee9bb706c8fcc329fac4acf69ad6b684f1069170
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p>And then</p>

<pre><code>$ git branch --contains d56a6751771b1f62d9ceb0bcce9a2391c004ee44
  joincolumn_issue
  ls
  mappedBy
* master
</code></pre>

<p><strong>So clearly these two commits are present on master - so then why are there two graphs.</strong> 
How can i know if <strong>changes</strong> both the commits are present on master. Or if only <strong>changes</strong> from one of them is actually present on the master, which one of the two?     </p>

<p><strong>Edit - following responses from RY and Mark</strong>
<a href=""https://i.stack.imgur.com/nYa1M.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nYa1M.png"" alt=""adding the graph screenshot""></a>   ( if color codes add any further meaning, please hint on that as well.)<br>
So, am further trying to understand why a commit (Y) is not based on previous commit (X) ( if X was committed before Y). 
The git log shows that both <code>d56a675</code> and <code>ee9bb70</code>  where committed at the same time. </p>

<pre><code>commit ee9bb706c8fcc329fac4acf69ad6b684f1069170
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue

commit d56a6751771b1f62d9ceb0bcce9a2391c004ee44
Author: itsvamshers &lt;itsvamshers@gmail.com&gt;
Date:   Mon Sep 9 17:24:01 2019 +0530

    fixed country null issue
</code></pre>

<p>But, on digging further the little difference can be seen..</p>

<pre><code>$ git show -s --format=""%ct"" d56a6751771b1f62d9ceb0bcce9a2391c004ee44
1568030041
</code></pre>

<p>and </p>

<pre><code>$  git show -s --format=""%ct""  ee9bb706c8fcc329fac4acf69ad6b684f1069170
1568031643
</code></pre>

<p>and this info should be enough for git to put the commits in right order. But if it is not, then I guess it is smarter and doing it for reason, just trying to understand the reason and the cause.</p>
","1","4820101","",""
"47748147","958825","2017-12-11 07:24:33","-1","1168","<php><git><git-branch>","How to show git branch name on Header using php","<p>I need to show the branch name on the top of the Navigation bar.
Can anybody know how to show it?
I am using Laravel so tried this.</p>

<pre><code>@php
  $rev = exec('git rev-parse --short HEAD');
  echo $rev;
@endphp
</code></pre>

<p>Please provide me the appropriate options.</p>
","2","958825","",""
"20033023","145277","2013-11-17 16:14:47","10","5795","<git><git-branch><git-commit><git-reset>","revert the git last commit and save it in a different branch","<p>Is there a way to rollback the last commit and put it into a separate branch for later testing? I did some changes which I don't want to entirely throw away, I just want to keep them aside in a different branch for further testing.</p>

<p>Can anyone help me with this?</p>
","0","145277","0","0"
"20079083","22227","2013-11-19 18:21:09","0","53","<git><version-control><github><git-branch>","Creating a git branch with a specific upstream branch that tracks an origin branch","<p>I have a remote repository on github <code>upstream</code> that is cloned of another github repository <code>origin</code>. The <code>origin</code> repository has several branches: <code>master</code>, <code>v1_x</code>, <code>v2_x</code>. I'd like to fix a bug in <code>v1_x</code>, and then forward port that change to the other branches <code>v2_x</code> and <code>master</code>.</p>

<p>How do I set up/create a branch in my local repository to track <code>origin/v1_x</code>, and push to a feature branch <code>upstream/my_awesome_bug_fix</code>?</p>
","0","22227","",""
"12932678","1542339","2012-10-17 10:50:47","0","216","<git-branch><git-clone><git>","Are remote branches cloned to local git repo?","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/2586824/partial-clone-with-git-and-mercurial"">Partial clone with Git and Mercurial</a>  </p>
</blockquote>



<p>If I only want to clone one branch, how can I do that?</p>

<p><strong>Does <code>git clone url</code> mean <code>git clone url --all</code>?</strong></p>

<pre><code>[hugemeow@home base]$ git branch
* master
[hugemeow@home base]$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/donut-release
  remotes/origin/donut-release2
  remotes/origin/eclair-passion-release
  remotes/origin/eclair-release
  remotes/origin/eclair-sholes-release
  remotes/origin/eclair-sholes-release2
  remotes/origin/froyo
  remotes/origin/froyo-release
  remotes/origin/gingerbread
  remotes/origin/gingerbread-mr4-release
  remotes/origin/gingerbread-release
  remotes/origin/ics-factoryrom-2-release
  remotes/origin/ics-mr0
  remotes/origin/ics-mr0-release
  remotes/origin/ics-mr1
  remotes/origin/ics-mr1-release
  remotes/origin/ics-plus-aosp
  remotes/origin/jb-dev
  remotes/origin/jb-mr0-release
  remotes/origin/jb-release
  remotes/origin/master
  remotes/origin/tools_r20



[mirror@home base]$ git branch -r
  origin/HEAD -&gt; origin/master
  origin/donut-release
  origin/donut-release2
  origin/eclair-passion-release
  origin/eclair-release
  origin/eclair-sholes-release
  origin/eclair-sholes-release2
  origin/froyo
  origin/froyo-release
  origin/gingerbread
  origin/gingerbread-mr4-release
  origin/gingerbread-release
  origin/ics-factoryrom-2-release
  origin/ics-mr0
  origin/ics-mr0-release
  origin/ics-mr1
  origin/ics-mr1-release
  origin/ics-plus-aosp
  origin/jb-dev
  origin/jb-mr0-release
  origin/jb-release
  origin/master
  origin/tools_r20
</code></pre>

<p><strong>Edit 1</strong><br>
In fact my issue is not the same as <a href=""https://stackoverflow.com/questions/4811434/git-clone-only-one-branch"">Clone only one branch</a>, though the answer may be a bit similar ...</p>

<p>By the way, if that link is the solution, how can I get the list of branches before I cloned it from the remote repo?  (This issue is not mentioned in that link, and if that link could answer my question, this issue should be pre-solved.)</p>
","1","1542339","",""
"30537734","4305712","2015-05-29 19:35:48","0","6573","<git><github><git-branch><git-clone><git-checkout>","Get changes from one branch into another one in git and how can I work on my own branch","<p>I'm a little lost with git, It's the first I use git with other people.</p>

<p>What I want to do is bring the changes that were made in a branch to the branch in which I am working, let's say that when I execute <code>git branch --all</code> what I see is this:</p>

<pre><code>  master
* c
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/a
  remotes/origin/master
  remotes/origin/c
</code></pre>

<p>So, I'm working on the branch c, and I have a friend who made ​​some changes in the branch a, how can I bring his changes to my branch?</p>

<p>The other thing I do not quite understand is how I can work on my own branch, let's suppose I fixed something in the file blah.html.erb, and I want to do a commit and upload it to my own branch, would it be ok to do the following?</p>

<pre><code>git remote add blah.html.erb origin/c
git commit -m ""Some changes""
git push origin origin/c
</code></pre>

<p>Greetings.</p>
","1","4305712","",""
"12962752","1426193","2012-10-18 20:00:29","7","2665","<git><git-branch><git-remote>","How to set a git branch to push to a remote with a different branch name and pull from completely different url","<p>My local git repo needs to pull from one server.  It then needs to push a specific branch to a review repo with a different branch name on a different server.</p>

<p>Something like:
Pull everything from PullOnlyRepo on Server1 (we'll call that origin maybe?)
Push Branch hotfix to ReivewRepo with branch name JistChanges on Server2.  </p>

<p>Right now git config -l shows:</p>

<pre><code>remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
remote.origin.url=&lt;URL for Server1&gt;
remote.origin.pushurl=no_push (this shouldn't matter since it is a pull only repo)
branch.production.remote=origin
branch.production.merge=refs/heads/production
remote.review.url=&lt;URL for Server2&gt;
remote.review.fetch=+refs/heads/*:refs/remotes/review/*
</code></pre>

<p>git pull does what I want (fetch changes from the correct place on Server1 and merges them into my work tree).</p>

<p>However git push doesn't.  In order to achieve what I want I have to do</p>

<pre><code>git push review hotfix:JistChanges
</code></pre>

<p>Is there some way to make git pull do this without having to put in the extra stuff?</p>

<p>There are some questions out there already that set up so that your local branch pushes to a remote with a different branch name.  However they also change the upstream and where the pull comes from.  </p>
","1","1426193","0","0"
"30601644","946652","2015-06-02 16:32:14","7","7939","<git><version-control><git-branch><deprecated>","How could I mark a git branch as deprecated","<p>Is there a way I can mark one of my git branches as deprecated so if anyone tries to push to it (or ideally even if someone commits into it)?
I want git to show a warning saying that the branch is deprecated and should not be used.
I need this for a particular branch only, not for entire repo.</p>

<p>Would you please advise how I could do so?</p>
","8","946652","",""
"20450537","349528","2013-12-08 06:21:16","9","4902","<git><github><git-branch>","How to turn a git branch into fork?","<p>I have created a branch in my GitHub repo: <a href=""https://github.com/markmnl/FalconUDP"" rel=""noreferrer"">https://github.com/markmnl/FalconUDP</a>, so there are now two branches: ""master"" and ""single-threaded"". I realise now I will never want to merge ""single-threaded"" back into ""master"" and want to maintain each branch separately independently of one another, though from time-to-time I will want to cherry pick bits of code from one into the other.</p>

<p>It would be disastrous should the branches be accidentally merged (though not catastrophic of course since I can always go back - it being in source control). </p>

<p>It strikes me what I should have done is fork the project into another repo. (That way I can still do the cherry picking with Pull Requests).</p>

<p>What should I do now?</p>
","0","349528","0","0"
"20453399","559827","2013-12-08 12:29:28","2","61","<git><git-branch>","Can one create a tracking branch with git-branch rather than git-checkout?","<p>Suppose that a remote repo <code>remote</code> has a branch <code>spanking_new_branch</code> that's not represented/referenced in any way in the local repository.  I want to create a local branch that tracks <code>remote/spanking_new_branch</code>.</p>

<p>When I search online for ways to do this I only find ones that are based on <code>git checkout</code>.  Is there a way to do it using <code>git branch</code> only, without using <code>git checkout</code>?</p>

<p>(The motivation for this question is only to understand <code>git</code> better.)</p>
","1","559827","0","0"
"58416362","2874789","2019-10-16 15:01:13","4","850","<git><merge><branch><git-branch>","Why are git commits on a merged branch showing on my main branch?","<p>I currently have a git commit tree that looks something like this with pointers (?) in parentheses:</p>

<pre><code>*   305f Merge branch 'develop' (HEAD-&gt;master, origin/master, origin/HEAD)
|\
| * d97b Some other commit on dev branch (develop) 
| * df14 Some commit on dev branch
|/
* 7a761b6 Initial commit
</code></pre>

<p>I've pushed master branch to remote (Gitlab, if it matters), and when I look at the commits on the master branch in the Gitlab UI, all 4 commits are present, where I would have expected only the ""Merge branch 'develop'"" and ""Initial commit"" commits to be present on the master branch.</p>

<p>My understanding is that <code>master</code> refers to the two commits I just listed, whereas <code>develop</code> refers to ""Some other..."" , ""Some commit..."", and possibly ""Initial commit"" as well, since it is an ancestor.</p>

<p>Where am I going wrong?</p>
","5","2874789","",""
"39555386","5387794","2016-09-18 07:57:05","9","8086","<git><github><git-branch>","Working on multiple git branches that are dependent on each other","<p>I'm maintaining 4 branches of a project on Git with a structure as below.</p>

<ul>
<li>master</li>
<li>student</li>
<li>teacher</li>
<li>authentication</li>
</ul>

<p>The problem is I created ""authentication"" branch the last and added some code from this branch. Now, I switched to ""teacher"" branch to continue working on it. However, I need some features I added in the ""authentication"" module to work on ""teacher"" module. But I'm not finished working on ""authentication"" module to do a merge. What's the correct way to handle this with git? Thanks.</p>
","3","5387794","0","0"
"30645603","343204","2015-06-04 13:49:14","2","74","<git><git-branch>","git branch --merged is showing remote","<p>When I run <code>git branch --merged</code> it shows:</p>

<pre><code>* master
remote/master
</code></pre>

<p>Should it be showing <code>remote/master</code> in the list?</p>

<p>If it is down to settings, then how do I change things to stop showing this in the list?</p>
","2","343204","0","0"
"13076643","968144","2012-10-25 20:21:55","3","895","<git><git-branch><git-rebase>","safely delete a local branch after rebase - replace of git branch --merged","<p>I had to change the commit message which was in an old commit in order to push it to a remote server. This commit was just on my machine so I could rebase it interactively and then amend it.</p>

<p>I usually delete all my unused local branches after a push to a remote server and for that I often use</p>

<pre><code>   git branch --merged
</code></pre>

<p>to double check which branches I can delete. However this command just goes backwards in the commit history to check which branches are reachable or not. As I did a rebase, the branch I used was not in the output and I was not 100% confident that my last changes were all included after the rebase. It sounds weird, I know.</p>

<p>How can I know which branches I can safely delete after a rebase? Should I worry about this or rebase is safer than I imagine?</p>
","0","968144","0","0"
"58478052","605356","2019-10-20 23:14:03","2","1129","<git><gitlab><git-branch><acl><readonly>","Git: disable read access on a per-branch basis for individual git users?","<h2>Summary</h2>

<p>How can our team disable branch ""read access"" for individual git users? Does the market offer any existing tools for self-hosted environments? Or is there some other, better means to provide ""disabled read access"" to git files/directories?</p>

<p>Thus far, we think we might prefer git-branch-based access-control, as a) branch-based control seems better than b) directory-based control, as (a) seems able to do everything (b) can, and more.</p>

<p>We realize this is a tall order for a tool (git) that is designed to copy <em>everything</em> (in a repo) to a clone (of said repo). We're skeptical, but still curious to see if creative solutions exist or might be invented/discoverable.</p>

<h2>Preferred features</h2>

<ol>
<li><p><strong>RACL (read-access-control lists) for any branch,</strong> including for unlimited # of any individual branches for any set or combination of git users.</p></li>
<li><p><strong>[Optional] Integration with <em>any</em> git repo client/server software</strong>. This way we can theoretically integrate with most any git-based tool/ecosystem. However if a special/custom git tool set is required, we'll explore using that.</p></li>
<li><p><strong>[Optional] Seamless GitLab integration</strong>. We do not yet see GitLab offering this feature. (We do not yet see protected branches with a ""disable reads"" feature.)</p></li>
<li><p><strong>[Optional] Self-hosted git repo</strong>. We self-host services, including git, for our critical projects whenever possible. But we'll consider working with hosted services if that's the only way, for now.</p></li>
</ol>

<h2>More details</h2>

<p>We've not yet empirically tested any of the claimed features from various, self-hosting-feature tool providers. <a href=""https://gist.githubusercontent.com/johnnyutahh/42ae2141bfb46fdc3a5f58a02af531e5/raw"" rel=""nofollow noreferrer"">But we've performed a tiny bit of research</a>. Nothing we've seen yet outright claims features for ""disabled-read privacy""; <a href=""https://gitolite.com/gitolite/overview.html#why-might-you-need-it"" rel=""nofollow noreferrer"">Gitolite</a> maybe does?</p>

<p>There seems to be more market focus on ""protecting"" branches to avoid data-loss scenarios. Instead, with this discussion, I'm more interested in preventing (read) access of designated users to sensitive information.</p>

<p>One could make a different git repo for each ""group/class"" of access, but that's problematic for numerous reasons, including but not limited to:</p>

<ul>
<li>requiring a theoretically unlimited number of repos for each combination of private info as an organization scales.</li>
<li>an inability to tightly-couple private with ""full group"" information when requiring separate git repos simply to ""wall them off"" from each other for intra-group privacy.</li>
</ul>

<p>Enabling unlimited ""private"" git branches within a common, larger repo seems like a more-effective path.</p>
","7","605356","0","0"
"30682483","2690527","2015-06-06 11:49:24","0","102","<git><git-branch><git-merge>","git merge ""Already up to date"" with cross-over merge","<p>I have two development paths that branched in the past. I want to keep both branches and tried to merge each into the other for both branches. I was able to merge the second path into the first one, solve some merge conflicts but I am unable to merge the first into the second, because git complains about being already up-to-date.</p>

<p>Here are some illustrations. A and B are the branches, the numbers indicate individual commits. The situation before my first merge was:</p>

<pre><code>            /- B1 &lt;-- B2
A1 &lt;-- A2 &lt;--  A3 &lt;-- A4 &lt;-- A5
</code></pre>

<p>Then I checkout out branch A (commit A5) and merge B into it after solving some conflicts:</p>

<pre><code>git checkout A
git merge B
# Solve conflicts here
git commit
</code></pre>

<p>Then my situation is as follows:</p>

<pre><code>            /- B1 &lt;-- B2 &lt;-------\
A1 &lt;-- A2 &lt;--  A3 &lt;-- A4 &lt;-- A5 &lt;-- A6
</code></pre>

<p>Now, I want to merge A into B in order to get the following:</p>

<pre><code>            /- B1 &lt;-- B2 &lt;-------\    /-- B3
A1 &lt;-- A2 &lt;--  A3 &lt;-- A4 &lt;-- A5 &lt;-- A6
</code></pre>

<p>So I did</p>

<pre><code>git checkout B   # Now, I am back at B2
git merge A
</code></pre>

<p>and I get the ""Already-up-to date warning"". What is wrong?</p>
","4","2690527","",""
"39689784","6878665","2016-09-25 17:33:16","1","166","<git><github><merge><git-branch>","How can I merge 2 git repositories?","<p>I have two git repositories, say project1 and project2, and project2 is located in a subfolder of project1 :</p>

<pre><code>/project1/.git (with contents of project2/ ignored)
/project1/project2/.git 
</code></pre>

<p>I would like to know how I can merge project2 into project1, with the same folder structure, but keeping the history of project2 ?</p>

<p>I there a simple solution for that ?</p>
","5","6878665","",""
"30704966","265341","2015-06-08 08:59:53","0","674","<git><git-branch><git-remote>","git branch on another server","<p>I am working with a customer who provided git branch access to get the latest src code. I've to continue working with that src code.<br>
But my company won't allow me to commit the src code directly to their branch. And so, my company provided with our own repository account to commit the additions/modifications/deletions etc.<br>
I would like to know if we can branch my customer's src code into our repository so that at the end of the project I can merge with customer's code easily. May be just by a pull request to customer's server. <br>
Is my understanding correct or is there any other better alternative to achieve the same.</p>
","0","265341","",""
"13155875","1195496","2012-10-31 10:30:43","1","240","<git><svn><github><git-svn><git-branch>","git branches for SVN and Github","<p>Here is a simple path of what I'm doing:</p>

<pre><code>$ cd /newdir
$ git clone git@github.com:... .
$ git branch -m master github
$ git svn clone svn+ssh://... .
$ git branch -m master SVN
</code></pre>

<p>Then I have some scripts that do what is needed before pushing to Github.</p>

<p>I need the SVN and github branches because the files on both branches are the same but with different content. Before pushing files to Github I add some header. The two branches are also used to allow not all files on SVN go to Github.</p>

<p>All updates are from SVN branch to github branch. Occasionally I would add something on github branch that is not on SVN. I'll never send files/updates from github branch to SVN branch.</p>

<p>My problem 1 is that every time I do git svn fetch, a new master branch is created. How can I tell git svn fetch to use SVN local branch instead of master local branch?</p>

<p>After every:</p>

<pre><code>$ git svn fetch
</code></pre>

<p>I could:</p>

<pre><code>$ git checkout SVN
$ git merge master
$ git branch -d master
</code></pre>

<p>But does not look as a smart way of doing it.</p>

<p>Then I have a problem telling my local git that the local github branch is the remote/master branch at Github. The command</p>

<pre><code>$ git push git@github.com:...
</code></pre>

<p>That worked perfectly before renaming local branches, now is not doing what I want.</p>

<p>So my 2 questions:</p>

<pre><code>1 - Telling git svn to always use local SVN branch when getting updates from SVN server
2 - Telling git that local github branch is remote master branch at github
</code></pre>
","0","1195496","",""
"58018993","4820101","2019-09-19 21:13:06","0","26","<git><git-branch><git-tag>","Does git provide a way to find by whom a branch or tag was created?","<p>There are SOF questions about how to find a branch or tag creation time. But I am further bothered with ""by whom"" these things were created.  </p>

<p>Does git store this meta-info and provide a means to query it at later time.</p>
","9","4820101","",""
"39115511","1321025","2016-08-24 06:03:46","4","3249","<git><branch><git-branch><delete-file>","Why changes in one branch can affect the other branch in git?","<ol>
<li>I was at master branch, <br></li>
<li>I commit everything<br></li>
<li>then I create a new branch ""git checkout -b xxx""</li>
<li>then I switch back to master ""git checkout master""</li>
<li>then I delete everything with master branch without using ""git rm""</li>
<li>I checkouted to branch xxx, during the branch switching, it shows a long list that every file had a status 'D' <br></li>
<li>then I found the branch xxx had a empty folder too.</li>
</ol>

<p>It wasn't a problem since I can revert in branch xxx with ""gt reset --hard HEAD""</p>

<p>I just wonder why deleting behavior at one branch can affect the other branch? Doesn't the branch stored everything?</p>
","1","1321025","",""
"58022095","2010571","2019-09-20 05:08:15","0","45","<git><git-branch><branching-and-merging>","git remove commits in a new branch which was accidently created from branch other than master","<p>I created a new branch from master and named it 'LoginFeature'. I completed all the work in this branch and then pushed it back to LoginFeature. Then I created a new branch 'Dashboard' from 'LoginFeature' and merged Master into 'Dashboard'. I added few code files in 'Dashboard' and pushed them to my 'Dashboard' branch on server. </p>

<p>Next day, I realized that I should have created 'Dashboard' from 'Master' instead of 'LoginFeature'.</p>

<p>How can I fix this? Can I remove all the commits of 'LoginFeature' branch from 'Dashboard' branch. Or should I delete 'Dashboard' branch from local and remote and recreate 'Dashboard' branch from master and copy paste my new files in to this branch?</p>
","0","2010571","0","0"
"20086669","1640653","2013-11-20 03:18:53","1","453","<git><version-control><merge><git-branch><git-flow>","How to merge ""develop"" branch from different people in git flow branching model?","<p>Is ""develop"" branch in git flow branching model shared by different people? So we have to manually push ""develop"" and pull it to merge?</p>

<p>Or each person have his ""develop"" branch and people need to get ""feature"" branch by ""git flow feature publish"" and ""git flow feature pull""?</p>

<p>Which way is correct in using git flow branching model?</p>
","0","1640653","",""
"18592397","454103","2013-09-03 12:30:39","3","2790","<git><branch><git-branch>","How to bring the git remote branch references local","<p>One creates a new git branch:</p>

<pre><code>git checkout -b test
</code></pre>

<p>and pushed it to origin:</p>

<p>git push origin -u test</p>

<p>and listing all the branches now I get:</p>

<pre><code>  master
* test
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/test
</code></pre>

<p>Now, on another machine I want execute a command to get the remote branch refs. How can I do this?</p>

<p>I want to have the output:</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/test
</code></pre>

<p>And the command IS NOT AWARE of the name of the new branches.</p>

<p>I have tried: <code>git pull</code>, <code>git pull --all</code>, <code>git fetch</code>, <code>git fetch --all</code>. What else?</p>

<p>EDIT: I need a command that tells me:</p>

<pre><code>* [new branch]      test       -&gt; origin/test
</code></pre>

<p>Is this possible WITHOUT checking out a branch first? I also don't want to remove my repo and clone it again.</p>
","3","454103","0","0"
"18636438","454103","2013-09-05 12:32:55","0","28","<git><tags><branch><metadata><git-branch>","Is there a way to log changes in the "".git"" directory?","<p>For example, one person makes a branch (or a lightweight tag) and pushes the branch to the server. Seen from the local <code>.git</code> directory, some files were changes by a person. That person also is the one pushing. The server knows who does it because it needs to check the permission. Does git on the server get this information with who did that operation?</p>

<p>If I could do:</p>

<pre><code>git log .git/refs/tags/tag
</code></pre>

<p>I could find out who created that tag.</p>

<p>If there would be a way to do this, one could answer questions like:</p>

<ul>
<li>who created/delete this branch</li>
<li>who created/deleted this tag</li>
<li>etc.</li>
</ul>

<p>Or it there another way to find out authors of a git repo metadata changes?</p>
","0","454103","",""
"39460134","1831108","2016-09-12 23:24:03","2","164","<git><github><git-branch>","Find the branch of a commit on github","<p>I want to find out what are the branches that a certain commit belongs to on <strong>GitHub</strong> but unlike most of the commits, this one does not display its branch on GitHub</p>

<p>a)
<a href=""https://i.stack.imgur.com/VHYFM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VHYFM.png"" alt=""enter image description here""></a>
b)
<a href=""https://i.stack.imgur.com/iAOfI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iAOfI.png"" alt=""enter image description here""></a>
I cloned the repository, <strong>and then ran</strong> <code>git branch --contains &lt;COMMITID&gt;</code> locally, but I got <code>error: no such commit</code></p>

<p>However, on github I can navigate to the commit by <strong>passing the <code>&lt;COMMITID&gt;</code> in URL</strong> which I think contradict with the error I got earlier...</p>

<p>I suspect that a branch was deleted (I am not sure about remote branch deletion, but I think only the <code>ref</code> is removed and commits are left untouched?)...and the commit is not reachable (ignored when I <code>git clone</code> locally?)</p>

<p>if so how can I find more information about these ""zombie commits""? if I am wrong, what actually happened? maybe a <code>git revert</code>?</p>
","0","1831108","0","0"
"18659425","229686","2013-09-06 13:48:44","35","22591","<git><branch><git-branch><git-checkout>","Get git current branch/tag name","<p>How can I get the current branch or tag name for my working copy?  I have seen references that indicate <code>rev-parse --abbrev-ref HEAD</code> will give branch name, but this doesn't work if the checkout is of a tag, in which case it just returns 'HEAD'. I need to somehow get the tag name of these revisions.</p>

<p>To be clear, I want one of two possible names:</p>

<ol>
<li>If the current checkout is the HEAD of a branch, I want the branch name</li>
<li>If it is a detached HEAD, I want the tag name (on the assumption there is a tag)</li>
</ol>
","3","229686","0","0"
"18662772","1980214","2013-09-06 16:52:45","1","431","<git><git-branch>","How return previous stage after using git reset --hard?","<p>I have 2 local branches: <code>master</code> and <code>another_branch</code>. </p>

<p>This branches have few commits on server.</p>

<p>My tracked branch: <code>another_branch</code>. </p>

<p>I use <code>git reset --hard</code> and current branch loses all current local commits. But on server all is no different.</p>

<p>How do I can return previous stage before using hard reset?</p>
","5","1980214","0","0"
"35149393","660259","2016-02-02 09:24:27","2","82","<git><git-branch><git-alias>","Make a git-alias or similar that includes ""branchfolder/"" - part of the branch name","<p>I just recently discovered how to make git aliases, which are great, but I was wondering if there is a way to include my common branch prefix with the alias. So what I would like is something like: </p>

<p>Alias in .gitconfig: </p>

<pre><code>[alias]
    br = checkout -b branchfolder/
</code></pre>

<p>and then beeing able to use the command like</p>

<pre><code>$ git br newbranch
</code></pre>

<p>to call</p>

<pre><code>git checkout -b branchfolder/newbranch
</code></pre>

<p>This, of course, is not what happens, as the command translates to </p>

<pre><code>git checkout -b branchfolder/ newbranch
</code></pre>

<p>and I get an error where git asking: </p>

<blockquote>
  <p>fatal: Cannot update paths and switch to branch 'branchfolder/' at the same
  time. Did you intend to checkout 'newbranch' which can not be resolved as
  commit?</p>
</blockquote>

<p>How would I achieve what I want?</p>
","0","660259","",""
"58489086","12204098","2019-10-21 15:03:36","0","35","<linux><git><git-branch>","How do I make git branch work when some git file or directory lost?","<p>One day I change a vim configuration from Github(<a href=""https://github.com/ma6174/vim"" rel=""nofollow noreferrer"">https://github.com/ma6174/vim</a>) on Linux(Visualbox Ubuntu), then some git orders doesn't work.e.g.:</p>

<pre><code>git diff
diff-so fancy | less --tabs = 4 RFX: 1: diff-so fancy | less -- tabs = 4 RFX: diff-so:not found 4: No such file or directory
RFX: No such file or directory 
</code></pre>

<p>Also when I input <code>git branch</code>, <code>git log</code>, it's doesn't work.Just give me something wrong.
But I can use <code>git add</code> ,<code>git commit -m """"</code>, <code>git push</code> to push my file to the remote repository.I also can create a new branch, while can't check the information about dev or master.</p>

<p>Please tell me how to let git work normally.</p>
","2","12204098","",""
"58492462","8016353","2019-10-21 18:49:31","0","60","<github><git-branch><branching-and-merging><pull-request>","github approval policies to ignore certain commits that has trivial changes when branch restriction is enabled","<p>is there a way for Github branch restriction policies to ignore certain commits that has trivial changes in the description</p>
","0","8016353","",""
"39636179","4620609","2016-09-22 10:08:51","1","17","<git><git-branch><git-merge>","How to add some specific commits from master to another branch on git","<p>I've this work flow with git. origin/master is 7 commits ahead of my branch ""crazy-work"" and crazy-work has 10 new commits. Now I want to merge crazy-work to origin/master. What is the best way to do this with minimal conflicts. even if there any conflict occurs choose the crazy-work branch's files as selected work. note that the branch crazy-work has the updated and stable source code.</p>

<p>Here is a little diagram</p>

<pre><code> origin/master ------ a --- b --- c --- d --- e --- f ----?
                             \                           /      
                              \  crazy-work             /
                               \___ h ___ i ___ j ___ k/
</code></pre>
","0","4620609","",""
"50995459","874027","2018-06-22 20:53:46","1","47","<git><workflow><git-branch><branching-and-merging><branching-strategy>","Specific git configuration","<p>I have a workflow in which I need to have some features shipped to dev for testing before they are pushed to prod. The problem is that some of these features need to stay on dev server indefinitely and never be pushed to production server, so I can't ever sync dev branch with prod branch directly. This means I can't use a model in which I only have one master branch that gets published to prod via tags. I probably need to create a branch per each feature request and always branch off of the prod branch so as not to push anything that shouldn't be on prod from dev. I'm wondering what is the best approach for managing something like this with git.</p>

<p>The current idea is as follows:</p>

<pre><code>Production branch (master)
Development branch (development)

feature1:
- branch created from master
- completed and merged into dev
- tested
- stays on dev indefinitely

feature2
- branch created from master
- completed and merged into dev
- tested
- merged into prod
</code></pre>

<p>Is this solid enough approach?</p>

<p>Thanks!</p>
","0","874027","0","0"
"35175681","5850380","2016-02-03 11:22:50","0","258","<git><git-branch>","How to push only the specific changeset in git after new branch creation?","<p>I have made four commits in the master branch and then created a new branch called <strong>b1</strong> and then made a 5th commit (I mean first commit of the newly created branch) and checked the out coming changes of <strong>b1</strong> but it shows all the changesets right from origin (i.e) <em>1st-5th</em> changesets. Does any one know why it  is showing all the changesets right from the beginning instead of the specific changesets? </p>

<p>Note:<br/>
If I made the 6th commit only that specific changeset is shown in the outcoming changesets.</p>

<p><strong>Flow Map: <br/></strong>
|&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
|&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
|&nbsp;&nbsp;&nbsp;&nbsp;6<br/>
|&nbsp;&nbsp;&nbsp;&nbsp;|<br/>
|&nbsp;&nbsp;&nbsp;5<br/>
|&nbsp;&nbsp;&nbsp;/<br/>
|&nbsp; / ----> b1 (new branch)<br/>
|&nbsp;/<br/>
4<br/>
|<br/>
3<br/>
|<br/>
2<br/>
|<br/>
1  ----> master<br/></p>
","4","5850380","",""
"35180401","1638350","2016-02-03 14:58:50","5","4113","<git><version-control><branch><diff><git-branch>","git merge two branches line by line interactively","<p>I want to merge two branches, git thinks there is no conflict however it is. So I want to merge the two branches interactively line by line preferably with emacs ediff, however other tools should be ok.</p>

<p>I am really new to git, so please be verbose. </p>
","0","1638350","",""
"35182778","7315037","2016-02-03 16:42:22","0","82","<git><git-branch><git-commit>","Diffrence between a commit and branch in git","<p>I just started using git in my project . But i am still little confuse between a commit and a branch . They do the same function i think so . Can anyone explain me what the difference  between them . Please explain .</p>
","1","7315037","",""
"20861819","799502","2013-12-31 18:34:37","2","475","<git><git-branch><bower><git-flow>","Is is possible to use to use git-flow (or vanilla git), to have different set of (build) files on master & develop branches?","<p>Is is possible to use git-flow (or a vanilla git chain of commands, or another gitXXX candy), to have a different set of files on <strong>master</strong> (i.e release) &amp; <strong>develop</strong> branches ?</p>

<p>Since git repos are used for deployment (see below), I want my <strong>develop</strong> branch to contain <em>strictly source files</em>, but when I merge it into <strong>master</strong>, I want master(release) branch to also contain release/compiled outputs, zip files, optimized resources etc. </p>

<p>NOTE: The question seeks for: </p>

<ul>
<li><p>an <strong>example scenario</strong> and the <strong>git/git-flow commands</strong> that would keep <code>develop</code> and other branches clean of compiled/build stuff, while only <code>master</code> has them in an extra <code>./build</code> directory. </p></li>
<li><p>The two branches should still remain in good sync and the whole branching/merging process should be automatic, painless and safe. Perhaps some day it becomes a standard git-flow feature &amp; practice.</p></li>
<li><p>I know this is not recommended, cumbersome, non optimal etc, but bear in mind that :</p>

<ul>
<li><p>git repos are increasingly used for deployment - eg see <a href=""http://bower.io"" rel=""nofollow"">http://bower.io</a> that uses strictly <strong>git repos</strong> and <strong>semver</strong> tags to deploy compiled stuff.</p></li>
<li><p>the question asks <strong>if its possible</strong>, not if <strong>its desirable</strong> or a <strong>good practice</strong>. If it is <strong>not possible</strong>, a good explanation is desirable.</p></li>
</ul></li>
</ul>
","4","799502","0","0"
"18738755","1529267","2013-09-11 10:29:32","1","1097","<git><git-branch>","When is it that I have to stash local changes in git while switching branches?","<p>This is a follow up question to the question I posted earlier today, I am a git newbie and I am trying to under the functioning of git branches.</p>

<p>I am getting the </p>

<blockquote>
  <p>Please, commit your changes or stash them before you can switch branches error .<br/></p>
</blockquote>

<p>Here is my git set up</p>

<blockquote>
  <p>I create a file file1 in the branch Master, and  than I add and commit it.<br/>
  I create a branch b1 and switch to that, Over there I make a few changes to file1 and commit it..<br/>
  I switch back to master, where I make a few changes and I don't commit it..<br/>
  Now when I try to switch to b1, I get the error shown above..<br/></p>
</blockquote>

<p>My question is that what are factors that are causing this error? What is it that git is seeing to throw this error.</p>

<hr>

<p>Consider this scenario of a separate project</p>

<blockquote>
  <p>I create a file temp in the branch Master, and  than I add and commit it.<br/>
  I create a branch 'branch1', now branch1 has a copy of temp file.<br/>
  I make a few changes in temp file in Master and don't commit it.<br/></p>
</blockquote>

<p>Now when I try to switch to branch1, why is it that it is not throwing that error? From my understanding both of the scenarios are similar. But it throws that error in the first scenario not the second one?</p>

<p>SO Can anyone explain to me, what are the parameters that govern the switching between windows?</p>
","0","1529267","0","0"
"21013802","723389","2014-01-09 07:11:19","2","524","<git><git-branch>","git master branch should be synched with which environment...?","<p><strong>Current Process Flow :</strong></p>
<p>Currently i am having four Git branches <em><strong><code>master</code>, <code>prod</code>, <code>stage</code> and <code>dev</code></strong></em>.</p>
<p>The commit goes in this order:</p>
<ul>
<li><p>all the development commits goes to the <code>dev</code> branch at the end of each sprint or ticket all the <code>dev</code> commits will be manually merged to a <code>release</code> branch by the respective developers and given as a single commit revision.</p>
</li>
<li><p>The <code>release</code> team will take the single change-set done at the release branch for releasing the story to stage for Q.A (No test environment is created for Q.A till now)</p>
</li>
<li><p>And finally, during the releases, the <code>stage</code> and <code>prod</code> will be merged and a unique tag is created and deployed in the production.</p>
</li>
</ul>
<p><strong>Issue :</strong></p>
<p>Currently the <code>master</code> is synced with the <code>stage</code> environment but since we do not have a test environment Q.A is done at this branch and the branch is not a stable one.</p>
<p>I really need to know :  The <code>master</code> should be synced up with which environment (<code>dev</code>, <code>stage</code> or <code>prod</code>)..?</p>
<p>Please help me on this.</p>
","2","723389","0","0"
"40046395","1085203","2016-10-14 15:05:17","1","72","<git><git-branch><git-merge>","How to rearange commits in few independed branches in git?","<p>I need to rearrange a ""linear structure"" </p>

<pre><code>temp       -C1-C2-C3-C4-C5-C6-C7-C8-C9-C10
         /
master -C0
</code></pre>

<p>to ""fork-like structure"".</p>

<pre><code>branch-1   -C1-C2-C3-C4-C5
         /
master -C0
         \
branch-2   -C6-C7-C8-C9-C10
</code></pre>

<p>Example: Let's start from one branch (let's name it <strong>temp</strong>), derived from the <strong>master</strong>, and then let's put few commits - <strong>C1</strong> .. <strong>C10</strong>. 
Instead of this I'd like to have two branches based on master (one per feature). I can create these two branches by referring the commit before <strong>C1</strong>. Than, how to reshuffle (merge?) all commits in a way to get commits from <strong>C1</strong> to <strong>C5</strong> in <strong>branch-1</strong> (derived from <strong>master</strong>) and branches from <strong>C6</strong> to <strong>C10</strong> in <strong>branch-2</strong> also derived from <strong>master</strong>? As result in the log of <strong>branch-2</strong> I expect to have <strong>C0</strong>, <strong>C6..C10</strong> (where <strong>C0</strong> is the last commit in the <strong>master</strong> branch).</p>

<p>Probably the <strong>branch-1</strong> can be retrieved by renaming <strong>temp</strong> and doing  </p>

<pre><code>git reset --hard  HEAD~5 #or 4 (?)
</code></pre>

<p>But for the <strong>branch-2</strong> how to remove <strong>C1..C5</strong> and keep the rest?</p>

<p>EDIT: Here is the test script that can be used to reproduce the case:</p>

<pre><code>#!/bin/bash

## file names
file1='file1'
file2='file2'

## clean-up for fresh start
if [ -d .git ] 
then
    rm -rf .git
fi
## create files
echo start1 &gt; $file1
echo start2 &gt; $file2

## start the repository creation 
git init
git add $file1 $file2
git commit -am 'C0'

## linear branch
git checkout -b temp

## implement features 1 &amp; 2 in files 1 &amp; 2
for i in {1..10}
do
    if [ $i -le 5 ]
    then
    file=$file1
    else
    file=$file2
    fi
    msg='line '$i
    echo $msg &gt;&gt; $file
    git commit -m ""C$i"" $file
done
</code></pre>
","0","1085203","",""
"2104441","2147","2010-01-20 19:51:59","6","9135","<git><branch><merge><git-branch>","Can I pull only certain files from another git repository?","<p>For instance, suppose I have Repository 1 and Repository 2.  Repository 1 has a file <code>/a/b/c/d</code>.  Would it be possible for me to import this file into Repository 2 as <code>/e/f/g/h</code>?</p>

<p>The reason being that I want to pull in changes from an experimental branch from a different git repository.  I tried merging everything together, but there were a ton of conflicts (of every kind).  Therefore, I doubt that I can merge the entire branch in, but I would like to try to bring in as much as I can.</p>

<p>Is there any way to do what I want to do, or am I just going to have to resort to copying files directly?</p>
","0","2147","0","0"
"18762764","2772372","2013-09-12 11:17:24","5","6555","<git><git-branch><git-remote>","how can I create git branch like develop/user1/issue1","<p>I want a create git branch like <code>develop/user1/issue1</code> on remote repository
how can I create that?</p>

<pre><code>- master =&gt; /origin/master
- develop =&gt; /origin/develop
    - user1 =&gt; /origin/develop/user1
         - issue1 =&gt; /origin/develop/user1/issue1
         - issue2 =&gt; /origin/develop/user1/issue2
         - issue3 =&gt; /origin/develop/user1/issue3
    - user2 =&gt; /origin/develop/user2
         - issue4 =&gt; /origin/develop/user1/issue4
         - issue5 =&gt; /origin/develop/user1/issue5
</code></pre>
","3","2772372","0","0"
"40204924","7024215","2016-10-23 16:07:49","2","1157","<git><merge><repository><branch><git-branch>","How to remove a ""branch"" in repository after a git rebase on my local machine","<p>I would like to delete a branch on my local repository. The problem is that it doesn't appear to be one.</p>

<p>I tried to merge from my branch called ""Website"" to master and i made a mistake by doing. </p>

<pre><code>git rebase website
</code></pre>

<p>and now I would like to delete the new branch which is actually not one. When I want to see on which branch it is writen ""No branch, rebasing master""</p>

<p><img src=""https://i.stack.imgur.com/tWEWz.png"" alt=""Screenshot from my terminal""></p>

<p>Basically, what i want is to delete this ""branch"". </p>
","3","7024215","",""
"40281318","3429430","2016-10-27 09:44:38","1","2377","<git><version-control><branch><git-branch>","Why doesn't git branch <mybranch> work but git checkout -b <mybranch> work?","<p>As explained in <a href=""https://stackoverflow.com/a/7987711/3429430"">this post</a> <code>git checkout -b &lt;mybranch&gt;</code> runs two commands simultaneously  </p>

<ol>
<li><code>git branch &lt;mybranch&gt;</code>   </li>
<li><code>git checkout &lt;mybranch&gt;</code></li>
</ol>

<p>I created a new git repository with <code>git init</code>. Now When I run <code>git branch development</code> I get the error: </p>

<blockquote>
  <p>Not a valid object name: 'development'.  </p>
</blockquote>

<p>If I run <code>git checkout newbranch</code>. I get the error:  </p>

<blockquote>
  <p>pathspec 'newbranch2' did not match any file(s) known to git.</p>
</blockquote>

<p>But if I use <code>git checkout -b BigShotBranch</code> then it simply creates that local branch with the message:  </p>

<blockquote>
  <p>Switched to a new branch 'BigShotBranch'</p>
</blockquote>

<p>so my question is why was the <code>-b</code> flag able to create the branch while any other method could not? Does the <code>-b</code> flag only combine two commands or do anything more than that?</p>

<p>P.S: This seems to be a glitch in git. After <code>git checkout -b development</code> the master branch is actually renamed to <code>development</code>. There is no master branch now.</p>
","0","3429430","",""
"40283553","3429430","2016-10-27 11:32:15","8","18872","<git><version-control><branch><git-branch>","How to have different branches in different folders in git?","<p>I have recently created a repository. I made two branches in it, <code>master</code> and <code>dev</code>. Now when I copy files in the repositry's directory then the files are added to both the branches. But I only want to add files to <code>dev</code> branch and then after the work is done in <code>dev</code> then I will copy contents from <code>dev</code>'s folder into <code>master's</code> folder. Unfortuanately both the branches are thought of as the same folder by git.</p>

<p>So how to have different branches in different folders in git?</p>
","6","3429430","0","0"
"21369010","167911","2014-01-26 20:50:30","2","726","<git><version-control><branch><git-branch><pull-request>","If a git pull request is still pending, how do I continue working across branches?","<p><em>FYI - I'm a relative amateur with git, having used it for a couple of years but only on a very basic level. This is probably a beginner-level question.</em></p>

<p>I'm collaborating on a git repo. I created a topic branch named <code>foo</code>, made changes, committed, pushed, and sent a pull request for my other collaborators to review and merge.</p>

<p>The pull request is going to take them some time to review. In the meantime, though, I want to continue to contribute to <code>master</code>, but I also want to keep using the changes I've made locally in <code>foo</code>. Is there a way to do that?</p>

<p>Likewise, if they make changes to <code>master</code> that I want to pull, can I somehow get those changes into <code>foo</code> (or otherwise use the latest code from both branches) without polluting that branch?</p>
","0","167911","",""
"48423671","1506850","2018-01-24 13:29:10","0","44","<git><merge><branch><git-branch><git-merge>","git: how to be able to switch branches again","<p>I had a lot of uncommitted changes, which is bad practice.
I have tried to slowly commit all my important changes.</p>

<p>I was trying to reorganize work across branches, so I did (starting from my master with changes):</p>

<pre><code>git checkout -b Feature1
git commit somestuff -ma'msg'
git push remote/Feature1 
git checkout -b Feature2
git commit otherstuff -ma'msg'
git push remote/Feature1 
...
</code></pre>

<p>for multiple branches.
Then I discovered my starting master was not updated when I have started, so I have done</p>

<pre><code>git fetch 
git checkout Feature1
git merge origin/master
git checkout Feature2
git merge origin/master
...
</code></pre>

<p>Then I should have been up to date and clean.
Then I have modified some stuff in <code>Feature2</code>. Now I would like to switch to <code>Feature1</code>. However it says</p>

<pre><code>you have local changes in X; you can't switch branches
</code></pre>

<p>But I have just committed and pushed my changes to <code>X</code> to <code>Feature2</code>.
What am I doing wrong?</p>

<hr>

<p>If I do</p>

<pre><code>git diff X &gt; atextfile
</code></pre>

<p><code>atextfile</code> shows the entire X has changed, but if I compare the two versions tagged with - + they are identical</p>

<pre><code>git diff --check X 
</code></pre>

<p>returns only trailing whitespace differences. How to get rid of those?</p>
","2","1506850","",""
"14045962","10608","2012-12-26 20:35:02","2","272","<git><git-branch><git-merge>","what are ""automerged"" files in git, and how do you list them all?","<p>I ran a <code>git merge master --no-commit</code> in a branch and the only output given was this:</p>

<pre><code>Auto-merging path/to/file
Automatic Merge went well; stopped before committing as requested
</code></pre>

<p>However, <code>git diff HEAD --name-status</code> shows that there are about 15 files that where modified  (prefixed with 'M') and 3 files which were added (prefixed with 'A'). Aren't <em>all</em> modified files from a merge considered ""Automerged""? So what is so special about this particular file that it would printed as ""automerged"" but not the rest?</p>

<hr>

<p>more information (this is before I have committed the merge):</p>

<pre><code>$ git log --oneline --graph --decorate  --all
* ae3f058 (master) synced code from another source.
| * 3bd4147 (HEAD, branchA) blah blah blah
| * f6513f6 random message
| * fcbe65e more messages from commit history
| * 6bc99e2 I like green eggs and ham
|/
| * 1824723 (branchB) This is some other, unrelated branch.
|/
* 5a98fac some stuff right before branching
* 40b05f1 initial commit.
</code></pre>
","0","10608","",""
"48449397","1356926","2018-01-25 18:14:24","7","7803","<git><git-branch><git-submodules>","Changing git module branch","<p>I'm using <code>git submodule</code> in order to track a subproject. The submodule points at a specific branch, but I now need to change it.</p>

<p>I've tried to manually edit the <code>.gitmodules</code> file and change the <code>branch =</code> entry, but every command to update the repo I give later doesn't do anything or fails.</p>

<p>I've tried</p>

<pre><code>git submodule sync # Succeeds, but nothing happens
git submodule update # Doesn't do anything
git submodule update --remote # fails with Needed a single revision
</code></pre>

<p>The subproject did correctly check out and gitk in there shows that it does indeed have the new branch that I need to switch to. I could do this manually and commit the new hash but I'm not sure whether <code>git submodule</code> would truly understand the change this way.</p>

<p>I've also tried deleting all submodule folders (including inside the <code>.git</code> folder) and re-running</p>

<pre><code>git submodule update --init --recursive --remote
</code></pre>

<p>But I still get the project to the same state as before (I assume because it's still updating to the committed hash).</p>
","1","1356926","0","0"
"27173560","4243639","2014-11-27 14:59:12","1","129","<git><version-control><git-branch><git-stash>","git from checked-out stash to branch","<p>I want 100% of stash <code>4aa0f82</code> below on my master branch</p>

<p>Problem is, stash apply/pop does not apply all the changes. I can resolve some conflicts, but some important stuff that I changed and saved in the stash does not appear in the conflicts (maybe because there was a commit with a detached HEAD in between).</p>

<p>I want 100% of the stash on my branch. it is all there when I do checkout stash@{0}. how do I move that full stashed commit on my branch?</p>

<p><code>git log --graph --decorate --oneline stash</code> output: </p>

<pre><code>*-.   6872ac5 (refs/stash) WIP on (no branch): d5da51e
|\ \
| | * 52db257 untracked files on (no branch): d5da51e
| * fb1c947 index on (no branch): d5da51e
|/
*   d5da51e bug removed
|\
| * 3096570 index on master: 89f11dd
|/
* 89f11dd (HEAD, master)
</code></pre>

<p><code>git log --graph --decorate --oneline</code> output:</p>

<pre><code>*   4aa0f82 (HEAD)
|\
| * bb34a5b index on HEAD: d5da51e
|/
*   d5da51e
|\
| * 3096570 index on master: 89f11dd
|/
* 89f11dd (master)
</code></pre>
","5","4243639","0","0"
"63529683","7133414","2020-08-21 20:28:26","0","266","<git><git-branch><git-merge><git-pull><git-fetch>","git reset to a local commit head; need to pull from origin keeping local changes","<p>I have a local <code>feature/branch</code>. When I pull from a <code>remote/origin</code> it's overiding my local changes, when usually it presents me with conflicts from the merge.... How do I set up the local git branch so that I get a conflict report when merging the remote branch and can resolve those conflicts?</p>
<p>UPDATE:</p>
<p>using <code>git branch -vv</code> I can see that the branch was merged into the <code>remote branch origin/master</code> and has a pull request id. Many changes have been made on top and some of the work on the current <code>feature/branch</code> and some changes have been over-written. I moved the <code>feature/branch</code> back to a previous commit before it's changes were over-written.</p>
<p>I can see the changes in <code>git diff master</code> but I'd like to be able to see the <em>conflicts</em> and resolve them in vscode rather than scroll through the terminal output of <code>git diff master</code>.</p>
<p>could I detach the <code>local feature/branch</code> from the <code>remote feature/branch</code> so that git picks up the conflicts on a <code>git pull origin master</code>?</p>
","1","7133414","",""
"45046770","1193296","2017-07-12 01:18:02","0","823","<git><git-branch><branching-and-merging><git-rebase>","How do I make two remote git branches point to the same commit?","<p>This is a slightly different version of the often asked ""how do I get two git branches to point at the same commit"".</p>

<p>I have <strong>two remote</strong> git branches called origin/A and origin/B.  Both are remote and both are in use by others.  Usually origin/B follows behind origin/A but can be easily fast-forwarded to catch up via:</p>

<pre><code>git checkout -t origin/B
git merge origin/A
git push
</code></pre>

<p>Every once in awhile, we temporarily commit something unique to origin/B. Eventually the contents of origin/B get re-synchronized with origin/A.  However, after this occurs origin/B's HEAD is a different physical commit than origin/A (even though contents are diff-identical) and can no longer be fast-forwarded to origin/A.</p>

<p>What is the clean/right way to make origin/B point back to origin/A's HEAD at this point, so that future merges can be fast-forwaded?  I don't particularly care about branch history.</p>

<p>I know I can fix this on a local branch with rebase, or I can delete the remote branch and re-create it... but I think both these hurt other users of the remote branch.  </p>

<p>Is there a better way?</p>
","3","1193296","",""
"9447371","854868","2012-02-25 19:38:23","25","11254","<git><version-control><git-branch><branching-and-merging><git-merge>","Override author on git merge","<p>Is there an option like <code>--author</code> of git-commit for git-merge?</p>
<p>We maintain a staging environment where some changes must be performed. Some limitations make us to use only one linux user to access staging environment.</p>
<p>Anyway, we are a small team with cooperative initiative and we tell when doing commits, which one is the author using the --author git-commit option. However, some times we need to merge from other branches which result in a non-ff merge. This implies a commit is performed when doing this merge.</p>
<p>Which would be the best way to specify the author manually for the merge commit in this case?</p>
","0","854868","0","0"
"45089802","6672882","2017-07-13 19:50:41","1","50","<git><github><git-branch>","Not able to perform git checkout on local with origin/master","<p>I have a tool which updated my remote origin/master with some changes to my JAVA project. </p>

<p>On remote origin/master it deleted a folder and now I'm trying to update my local to test these changes.</p>

<p>I tried following commands in my local</p>

<p><code>git pull origin master</code></p>

<pre><code>git fetch origin master &amp; git reset --hard origin master

git fetch origin master &amp; git checkout origin/master &amp; git checkout -b newBranch
</code></pre>

<p>I see all the changes made by the tool. But the deleted folder is still in my local (which was deleted on my remote).</p>
","1","6672882","",""
"9489373","561638","2012-02-28 20:41:36","0","91","<git-branch>","is there a way to prevent developers from creating any branches in git?","<p>I have code on a master branch, and I never want it to be branched. It holds yang and protobuf code which must always march forward.  If it branched we might release something that cannot upgrade to a later version because the content has diverged.  Is there any way to prevent branching in git?</p>
","0","561638","",""
"63548050","10666587","2020-08-23 14:22:37","1","60","<git><git-branch><git-diff>","How are there diffs after git merge says ""Already up to date..""","<p>I have a git branch named <code>branch_name</code>.</p>
<p>I used <code>git pull</code>, and after getting <code>Already up to date..</code> I ran <code>git diff origin/branch_name branch_name</code> in order to see if the branches identical. Well there is one file with some diffs.</p>
<p>I used <code>git diff HEAD branch_name</code> and it yields an empty line. When used <code>git diff HEAD origin/branch_name</code> it founds the same diffs. If I understood Git correctly, it means the fetch is not working as I expected?</p>
<p>I am bit new to Git. Please help me solve this pull problem. I wish to merge the remote repository to my local repo.</p>
","5","10666587","",""
"27623690","3052438","2014-12-23 15:52:12","3","1240","<git-branch><tortoisegit>","How to create an orphan branch using tortoisegit?","<p>How to create an orphan branch using tortoisegit?</p>

<p>I know I can use the command:</p>

<pre><code>git checkout --orphan BRANCH_NAME
</code></pre>

<p>Because I am very lazy, I prefer to do it  using only a mouse. Is it possible?</p>
","0","3052438","0","0"
"45474714","8278160","2017-08-03 04:16:51","1","1399","<git><github><git-branch><git-push>","Does ""-u"" in ""git push -u origin master"" add a reference to a remote tracking branch?","<p>I understand that the -u argument in <code>git push</code> associates a local branch with its corresponding remote branch so that <code>git pull</code> and <code>git push</code> can be used without additional arguments.</p>

<p>However, as this answer (<a href=""https://stackoverflow.com/a/16018004/8278160"">https://stackoverflow.com/a/16018004/8278160</a>) states:</p>

<pre><code> git push -u origin master
</code></pre>

<p>Is the same as:</p>

<pre><code> git push origin master; git branch --set-upstream master origin/master
</code></pre>

<p>As Casey Li states in this video (<a href=""https://www.youtube.com/watch?v=XogN0Q4sb9o"" rel=""nofollow noreferrer"">https://www.youtube.com/watch?v=XogN0Q4sb9o</a>), the format <code>origin/repo</code> is used to designate a <em>remote tracking branch</em>.</p>

<p>As such, does <code>git branch --set-upstream master origin/master</code> in the line above associate the local branch, <code>master</code>, with its corresponding remote <em>tracking</em> branch (origin/master), or to the remote branch directly?</p>
","4","8278160","0","0"
"9725209","172609","2012-03-15 17:42:16","2","208","<git><git-branch>","How to remove all commits from already pushed branch in git?","<p>Working on a project with a lot of team members, we are now trying to polish our ways of working. Currently all work is done in <code>integration</code> branch which was branched off <code>master</code> few years ago. For one reason or another, there are around 600 commits done in master branch and not merged into integration, as well as around 1200 commits done in integration not merged into master branch. All releases are made entirely off the integration branch, master branch was not touched once in a year. We would like to use <code>master</code> branch as our stable branch, but in order to do so, we need to merge all the changes from <code>integration</code> and not keep any of the diverged changes done in master.</p>

<p>Is there a headache free way to remove ""invalid"" commits from master branch? Or should we simply create a new repository or another stable branch off current integration position?</p>

<p><strong>Update</strong> Unfortunately non-fast-forwards and remote branch deletion are rejected, I am still waiting for a response from the person in charge of the repository hosting. I'm assuming it will not be that easy to change, it's a big corporation sadly.</p>
","0","172609","",""
"27679045","540394","2014-12-28 17:53:31","1","239","<git><github><version-control><git-branch>","git create new non-tracking branch based on remote branch","<p>Situation: open-source project with multiple branches, and my fork of it for contributions.
I want to create a new branch for pull requests on github. I want to base this branch on one of the existing branches on the open-source project, BUT I do NOT want my commits to go into that original branch.</p>

<p>As per my experience, if I clone my fork, execute <code>git checkout -b my-branch origin/some-branch</code> and then commit+push to <code>my-branch</code>, in Github the commits will go to <code>some-branch</code> and not <code>my-branch</code>. Obviously, this is problematic if I want to make multiple branches for multiple pull requests on the same branch.</p>

<p>The workaround that I've found for this is the following:</p>

<p><code>git checkout -b some-branch origin/some-branch</code></p>

<p><code>git checkout -b my-branch</code> (new branch based on some-branch, but not tracking it)</p>

<p>after that - commit+push, first push will create <code>my-branch</code> on Github.</p>

<p>However, this leaves me with an extra local copy of <code>some-branch</code>. I can delete it later, obviously, but is there a way to avoid creating it at all? Is there a way to create <code>my-branch</code>, based on <code>origin/some-branch</code>, but not tracking it, in one command, without the extra branch in the middle?</p>
","1","540394","",""
"9742159","152825","2012-03-16 17:53:43","0","217","<git><git-branch><git-fork>","should I do a git fork then branch or just a git branch","<p>I haven't done much branching work in git and branching so excuse the noob nature of this. </p>

<p>I'm going to start working on a feature (say 'user oauth') that I want to work in isolation and merge in at a later point. Ideally, I will be merging this into the master branch at a later point.  Obviously, I'd like to do in a separate branch. Is it general practice to just do a branch in my local instance or should I fork the repo and create a branch in the new separate folder structure. In my mind, the latter seems better in case I just want to wipe out the branch, I can just delete this other folder structure? </p>

<p>thx</p>

<p><strong>edit 1 per ryan</strong>  </p>

<pre><code>git clone git@github.com:xxx/xxx.git  
git branch test-feature-branch
</code></pre>

<p><strong>edit 2</strong>
wow, thx for information. It's possible that this will be a second application. Is there a way I can clone it and then essentially push it as a new repository to new github?</p>
","1","152825","",""
"27759492","1800871","2015-01-03 21:03:00","1","43","<git><git-branch>","How to add git repo to other repo under subfolder","<p>I have git repo in folder <code>final_app</code> and I have to add new folder <code>app_part</code> which is already git project. When I copied and try <code>git add .</code> or <code>git add --all</code> but it doesn't want to add <code>app_part</code>. How to add files from <code>app_part</code> folder to <code>git repo final_app</code> ?</p>
","0","1800871","0","0"
"27769128","1617200","2015-01-04 18:53:43","0","90","<github><git-branch><github-pages>","Publish an R code in github","<p>I have written some codes in R that I have compiled into a package. Unfortunately
I am not able to publish it as a package such that any user may download it with the 
install_github() function.
Kindly help.</p>

<p>I have shared the path for the repository below.</p>

<p><a href=""https://github.com/Kagereki/RPerio"" rel=""nofollow noreferrer"">https://github.com/Kagereki/RPerio</a></p>
","0","1617200","",""
"63649087","802469","2020-08-29 16:05:23","0","27","<bash><git><variables><echo><git-branch>","Storing git branch -a in bash variable includes files","<p>I run</p>
<pre class=""lang-sh prettyprint-override""><code>.../$ git branch -a
  master
  temp
* version_1
  remotes/origin/master
  remotes/origin/temp
  remotes/origin/version_1
</code></pre>
<p>but then:</p>
<pre><code>.../$ v=&quot;$(git branch -a)&quot;
.../$ echo $v
master temp bent bent.sh core LICENSE notes old README.md res version_1 remotes/origin/master remotes/origin/temp remotes/origin/version_1
</code></pre>
<p>I get that storing a variable this way removes the new lines (&amp; need to look up how to fix that).</p>
<p>But why, oh why, is it adding my files (<code>bent bent.sh core LICENSE notes old README.md res</code>) and how can I stop it?</p>
<p>I'm trying to get an array of branch names, so I can make a prompt to choose branch name via a number</p>
","4","802469","",""
"64357353","594308","2020-10-14 16:08:26","0","26","<git><git-branch>","Using git to make changes and then roll them back","<p>I have a web project and I need to change some banners. This will involve changing some HTML, CSS, maybe JS and adding a few images. I will use a git branch, merge it into master and deploy. No worries.</p>
<p>In 60 days time the marketing team will say can you put back the old banner. I cannot just wind back the whole repo because other changes will have been made in those 60 days.  Is there something I should do now to make reversing all the changes I made in the branch easy?</p>
","0","594308","",""
"28257189","1203396","2015-01-31 22:20:05","0","130","<git><git-branch><git-checkout>","Understanding git behavior on a checkout; expected an error on a checkout but did not get one","<p>My question is on git behavior on checkout and here are the steps to elucidate the behavior I do not understand. I make a dir <code>testdir</code> with files <code>foo</code> and <code>bar</code> each with a single line of text. I do the following:</p>

<pre>
git init
git add .
git commit
git branch bug
</pre>

<p>So I have the <code>master</code> branch and an identical <code>bug</code> branch. In <code>master</code> I add a line of text to file <code>foo</code> but do NOT add or commit to master, just a file change on my local tree. Next I do:</p>

<pre>
git checkout bug
</pre>

<p>I was expecting to get the following error:</p>

<pre>
   error: Your local chages to the following file would be overwritten by checkout:
     foo
  Please commit your changes or stash them before you can switch branches.
</pre>

<p>But I did <strong><em>NOT</em></strong> get the above error, and my question is how come git did not error in this case? Instead I got the following:</p>

<pre>
  root@revision-control ~/testdir# git checkout bug
  M       foo
  Switched to branch 'bug'
</pre>

<p>I am in now the <code>bug</code> branch but the <code>foo</code> file has that second line I added when I was in <code>master</code>.</p>

<p>Can anyone explain what happened here and why git let me change branches without the error message? And there are no merge conflict indicators in the file. </p>

<p>Next I change back to the <code>master</code> branch and add then commit the change to the <code>foo</code> file (so <code>master</code> file <code>foo</code> has 2 lines and <code>bug</code> <code>foo</code> has one line). I make a change to <code>foo</code> in <code>master</code> and add a third line of text and now when I try to checkout the <code>bug</code> branch (same git command as above) I get:</p>

<pre>
user@host ~/testdir# git checkout bug
error: Your local changes to the following files would be overwritten by checkout:
        foo
Please, commit your changes or stash them before you can switch branches.
Aborting
</pre>

<p>So why is this behavior now different than before and I get the error? (this is the behavior I was expecting initially).</p>
","1","1203396","",""
"65059268","321973","2020-11-29 10:47:40","2","339","<git><git-branch><git-push>","How to have git-push permanently skip commits from a detailed branch?","<p>For one repo I'm using a simple script to regularly commit changes to a file to keep a rather detailed and non-logical history that I'd like to keep for my own statistical purposes (i.e. I know about <code>git rebase</code>, but this non-logical history is something I want to keep anyway). Currently I'm just committing to a separate branch <code>autocommit</code> and use</p>
<pre><code>git checkout master
git merge --squash autocommit
git commit
git checkout autocommit
git merge --ff-only master
</code></pre>
<p>for &quot;proper&quot; commits to keep the <code>master</code> branch tidy while maintaining a relationship to the <code>autocommit</code>-branch. So I have a history such as</p>
<pre><code>| *   95e4189 Merge branch 'main' into autocommit
| |\
| |/
|/|
* | 040386a &lt;= created via git merge --squash autocommit
| * 72bc5a5 autocommit
| * 9aaf5a6 autocommit
| * ea758c0 autocommit
| * 7ff1de8 autocommit
</code></pre>
<p>But what I really want is to <code>git merge autocommit --edit</code> into <code>master</code> to <em>properly</em> link to the history. However, I don't want to <code>git push</code> anything from the <code>autocommit</code> branch (or any commit with said message, if that is easier to manage). However I guess that will basically corrupt the pushed repo since parts of the commit history will be inaccessible. So my question is either:</p>
<ul>
<li>How can I do this anyway? I.e. a kind of <code>git push --skip autocommit</code></li>
<li>What should I do instead? The squash-commit version doesn't seem optimal</li>
</ul>
<p>For visualization, I currently have:</p>
<pre><code>   A1 -&gt; A2 -&gt; A3--=&gt; A3' -&gt; A4 -&gt; ...    [autocommit]
  /            ↓' /
M1-----------&gt; M2 -----&gt; ...              [master]
</code></pre>
<p>Where <code>↓'</code> denotes a <code>git merge --squash</code> which means <code>A3</code> is not a parent of <code>M2</code> but only <code>M1</code> is, and <code>A3'</code> just merges back <code>M2</code> to better keep track of the connection. What I <em>think</em> I want is just</p>
<pre><code>M1--------------=&gt; M2 ---&gt; ....                             [master]
  \            /
  A1 -&gt; A2 -&gt; A3 -&gt; A4 (or maybe A3' first merging M2 back) [autocommit]
</code></pre>
<p>but none of the commits <code>A1</code> etc. from the <code>autocommit</code> branch ever getting pushed.</p>
","0","321973","",""
"46514831","7002315","2017-10-01 17:13:29","12","7949","<git><git-branch><upstream-branch>","How read the current upstream for a git branch","<p>I'm searching a git command to know the upstream associated with an existing branch (if any).<br>
(some kind of ""read"" command associated with the ""write"" command <code>git branch --set-upstream-to=...</code>)<br>
The reason is I use a branch connected with several remote repos, and I'd like to check if the branch is already connected with the right upstream before changing it.</p>
","0","7002315","0","0"
"46526290","8158166","2017-10-02 13:18:27","0","31","<github><git-branch><github-pages>","How to make two different GitHub pages as example.github.io and example.github.io/notifications?","<p>My GitHub username is S1Live. I have a repository called notifications. So, a GitHub page has been made as example.github.io/notifications. I want to make another page as example.github.io or example.github.io/index.html.</p>

<p>Is it possible? If yes, then how to do it?</p>
","2","8158166","",""
"28299910","92560","2015-02-03 13:17:28","1","859","<git><git-branch>","Show the symmetric difference of two git branches?","<p>I'm looking for some way to get all commits that are either on branch <code>A</code> or on branch <code>B</code>, but not on both of them.</p>
","3","92560","",""
"28303977","3373470","2015-02-03 16:32:21","0","38","<git><git-branch><git-push><git-pull>","Setting where a local git branch pulls AND pushes","<p>I am working on my forked repo with 2 main branches:</p>

<ul>
<li>master: <em>pulls</em> from main_project/master</li>
<li>bootstrap: <em>pulls</em> from collaborator/bootstrap</li>
<li><strong>The second remote is a fork also contributing to the main project</strong></li>
</ul>

<p>I want the above branches to <em>pull</em> from the respective related repos; however, I want them to <em>push</em> to <code>origin/&lt;branch&gt;</code> (master or bootstrap). I know I can designate a push by <code>git push &lt;remote&gt; &lt;branch&gt;</code>, but I want it to be simpler, if possible.</p>

<p>As a follow-up, would <em>tracking</em> a branch help in anyway? I am not aware of tracking, although I did read about it via similar SO questions. How would branch tracking affect my situation?</p>
","0","3373470","",""
"28331815","678392","2015-02-04 21:29:47","6","8595","<git><git-branch>","How do you remove files from one and only one branch in git","<p>I want a branch to hold all the files from my master branch except for foo.txt and foo2.txt. How do I do this?</p>
","0","678392","",""
"28337390","362754","2015-02-05 06:17:10","3","1600","<git><git-branch><git-pull><git-remote>","git pull command output message meaning into which branch","<p>Say there is a remote branch <code>br1</code> checkout on the remote repo, and the <code>master</code> branch on a local repo. </p>

<ul>
<li><p>Command 1: If I do a ""<code>git pull origin br1:br1</code>"" it pulls remote <code>br1</code> into local <code>br1</code>, and shows: 
<code>
9188a5d..97d4825  br1        -> br1
9188a5d..97d4825  br1        -> origin/br1
</code></p></li>
<li><p>command 2: If I do just a ""<code>git pull</code>"", it will pull remote <code>br1</code> into local <code>master</code>, but it shows only the following:
<code>
9188a5d..97d4825  br1        -> origin/br1
</code></p></li>
</ul>

<p>I'm expecting it also shows something like ""<code>br1 -&gt; master</code>"". Why it does not show that? </p>

<p>Does ""<code>br1 -&gt; br1</code>"" mean pulling remote <code>br1</code> into local <code>br1</code>? </p>

<p>What does that ""<code>br1 -&gt; origin/br1</code>"" mean? </p>

<p><strong>Update</strong>: With help from VonC, I figured out the following: </p>

<ul>
<li><p><code>git pull</code> updates all the tracking branches. <code>br1 -&gt; origin/br1</code> means <code>br1</code> on the remote is pulled into local tracking branch <code>origin/br1</code>. </p></li>
<li><p><code>git pull origin br1:br1</code> pulls remote <code>br1</code> into local <code>br1</code> and into <code>origin/br1</code>. Then the messages after that mean the same change set is also pulled into the current checked-out branch (the message is <code>Updating ...</code>, it does not show <code>br1 -&gt; master</code>):
<code>
$ git pull origin br1:br1
   beb48a4..b344dd1  br1        -> br1
   beb48a4..b344dd1  br1        -> origin/br1
Updating cca5a9b..b344dd1
Fast-forward
 file2 | 0
 file3 | 0
 4 files changed, 0 insertions(+), 0 deletions(-)
</code></p></li>
<li><p>Previously I thought <code>git pull</code> pulls into the local master. That is not the case. It is that <code>git pull origin br1:br1</code> does it. </p></li>
</ul>

<p><strong>Update 2</strong>: With explanations by torek, the specific problem is that the command <code>git pull origin br1:br1</code> pulls remote <code>br1</code> into <code>FETCH_HEAD</code> after a sequence of other actions and subsequently merges the <code>FETCH_HEAD</code> onto the current branch. </p>
","0","362754","0","0"
"65141122","7053202","2020-12-04 09:34:38","0","1931","<tags><azure-pipelines><branch><commit><git-branch>","How to get git branch at commit with tag at run Azure pipeline?","<p>In Azure Pipeline is possible use predefined build variables (DevOps Services) Build.SourceBranch and Build.SourceBranchName but their values at case commit with tag are tags.</p>
<p>In doc. <a href=""https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;tabs=yaml#build-variables-devops-services"" rel=""nofollow noreferrer"">https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;tabs=yaml#build-variables-devops-services</a> is written</p>
<ul>
<li>When your pipeline is triggered by a tag: refs/tags/your-tag-name</li>
<li>The name of the branch in the triggering repo the build was queued for.
Git repo branch or pull request: The last path segment in the ref. For example, in refs/heads/master this value is master. In refs/heads/feature/tools this value is tools.</li>
</ul>
<ul>
<li>this my observation: but in case commit with tag is the last path segment of Build.SourceBranch, so your-tag-name</li>
</ul>
","0","7053202","",""
"28670479","2281573","2015-02-23 09:27:25","0","177","<git><github><git-branch>","Managing multiple projects with github","<p>I have Multiple projects <code>ex : 20 projects</code> , and i have an account on github for each project i create repository <code>20 project = 20 repository</code>.</p>

<p>I look for a way to manage my projects in github but i don't want to set each project on repository , that will take more repository and not efficient after i got maybe another <code>20 project</code> that will take <code>40 repository</code>.</p>

<p>How i can manage the projects in github to take <code>fewest number of repository</code> ? </p>
","6","2281573","",""
"46915350","7022570","2017-10-24 16:13:21","44","71397","<git><git-branch>","got 'fatal: branch 'master' does not exist' in git","<p>using <code>git</code> for a while, it's very powerful and beautiful..  </p>

<p>but also got some confused about  it:  </p>

<p>it should under branch master after I init a git repo, isn't it?   </p>

<p>but <code>git branch -a</code>, i got nothing man.<br>
and I got <code>fatal: branch 'master' does not exist</code> when I try to set upstream for my branch.  </p>

<pre><code>users@debian MINGW64 ~/Desktop/taste
$ git init
Initialized empty Git repository in C:/Users/users/Desktop/taste/.git/

users@debian MINGW64 ~/Desktop/taste (master)
$ git remote add origin git@gitee.com:greedev/Test.git

users@debian MINGW64 ~/Desktop/taste (master)
$ git branch -u origin/master
fatal: branch 'master' does not exist

users@debian MINGW64 ~/Desktop/taste (master)
$ git branch -a

users@debian MINGW64 ~/Desktop/taste (master)
$ git fetch
The authenticity of host 'gitee.com (120.55.226.24)' can't be established.
ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'gitee.com,120.55.226.24' (ECDSA) to the list of know                n hosts.
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 7 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (7/7), done.
From gitee.com:greedev/Test
* [new branch]      master     -&gt; origin/master

users@debian MINGW64 ~/Desktop/taste (master)
$ git branch -a
  remotes/origin/master

users@debian MINGW64 ~/Desktop/taste (master)
$ git branch -u origin/master
fatal: branch 'master' does not exist
</code></pre>

<p><img src=""https://i.stack.imgur.com/c105A.png"" alt=""enter image description here""></p>
","0","7022570","0","0"
"64534325","709646","2020-10-26 09:18:12","1","211","<git><git-branch><git-branch-sculpting>","Directly creating a new disconnected git branch","<p>I have started a project and already have some commits. I would like to change my approach, and commit everything on a clean slate. Is it possible to commit a work tree as an unconnected first commit directly, or do I really need to use a temporary remote for that?</p>
<p>Basically how I know I can do:</p>
<pre><code>mkdir BOO
cd BOO
git init
... # create the first and maybe more commits...
cd ..
git remote add boo BOO
git fetch boo
git checkout -b boo/master new-master
git remote delete boo
rm -rf BOO/
</code></pre>
<p>Do I really need to use a temporary remote definition like above, or <strong>is there a way to directly create an unconnected starting commit</strong>?</p>
<p>(If it is not evident from the question, I would like to keep the original main branch still intact, at least for a while, for verification purposes (<code>git diff</code>) and for cherry-picking.)</p>
","0","709646","",""
"10002239","443600","2012-04-03 22:15:53","307","235223","<git><branch><git-branch><git-checkout>","Difference between git checkout --track origin/branch and git checkout -b branch origin/branch","<p>Does anybody know the difference between these two commands to switch and track a remote branch?</p>
<pre><code>git checkout -b branch origin/branch
git checkout --track origin/branch
</code></pre>
<p>I think both keep track of the remote branch so I can push my changes to the branch on origin, right?</p>
<p>Are there any practical differences?</p>
","0","443600","0","0"
"10013240","105539","2012-04-04 14:29:24","1","67","<git><git-branch>","Creating a branch in git, but nervous about harming existing stable master","<p>I have a precious install on my hard drive:</p>

<p>/var/www/lukevan/po2/po</p>

<p>This is the ""PO"" project. We wish to maintain that version for our customers, but now we need to do a new, experimental branch that may be unstable for awhile until we are ready to merge that back into the live, current, stable PO project. I have reviewed <a href=""http://book.git-scm.com/3_basic_branching_and_merging.html"" rel=""nofollow"">this documentation</a>, but what confuses me is whether I should run this in my precious /var/www/lukevan/po2/po folder, or whether I should do something else so as not to risk hurting my precious /var/www/lukevan/po2/po folder?</p>
","0","105539","",""
"46597915","996205","2017-10-06 03:40:03","8","11609","<git><version-control><git-branch><git-remote><git-fetch>","Git Branches NOT Showing in ""git branch"" after Pull or Fetch but ""git checkout"" works ...?","<p>After committing my latest work on a new branch <code>branchname</code> to my local git repo on machine A, I pushed that work to my gitlab remote repo with</p>

<pre><code>$ git push origin branchname 
</code></pre>

<p>The <code>master</code> branch was already in sync with the remote repo. All branches showed up on the remote repo on my gitlab list. </p>

<p>I later went to machine B. I first did a </p>

<pre><code>$ git pull origin master 
</code></pre>

<p>and master was updated, but my new <code>branchname</code> didn't show up when I typed <code>git branch</code>, nor did another branch that I new existed in the history tree. I went to this <a href=""https://stackoverflow.com/questions/6373277/git-sync-local-repo-with-remote-one"">post</a> and followed the directions from the first answer. Another 'git branch' still did not show my other branches. On a whim, I simply tried to do </p>

<pre><code>$ git checkout branchname 
</code></pre>

<p>and it was there and checked out fine. A <code>git branch</code> command then showed master and branchname in my list of branches. I did the same thing with another branch, and it too then showed up in the branch list after a <code>git branch</code> command.</p>

<p>Is this normal git behavior for such operations? The main thing I am wondering is if you pull or fetch from a remote repo to update a local repo that had to know previous knowledge of branches on the remote, why don't they show up during a <code>git branch</code> command? And, why can I check them out when I couldn't see them after a <code>git branch</code>?</p>

<p>This saga is similar to <a href=""https://stackoverflow.com/questions/12319968/remote-branch-not-showing-up-in-git-branch-r"">THIS</a> one, but my branches were actually there and just NOT showing following git branch commands until I checked them out.</p>
","1","996205","",""
"28377688","99717","2015-02-07 01:56:05","4","5011","<git><git-branch><git-remote><git-track>","""git remote show origin"": why all branches show ""tracked"" even when some aren't?","<p>Why does ""git remote show origin"" list remote branches as ""tracked"" even when those branches are not linked to a local branch for pull/push? Does ""tracked"" mean something else in this context?  I thought that was the whole meaning of ""tracked"": <a href=""http://git-scm.com/book/en/v2/Git-Branching-Remote-Branches#Tracking-Branches"" rel=""nofollow"">git docs on branch tracking</a>.</p>

<p>1) clone a repo with more than one remote branch</p>

<p>2) run <code>git remote show origin</code> -- says ""testBranch"" is tracked.  But <code>git branch -vv</code> correctly shows only master tracking origin/master, and <code>git branch -a</code> correctly shows that there's only the one local branch, master.</p>

<p>3) So: what does <code>git remote show origin</code> mean when it lists testBranch as ""tracked""?  To be clear: there's nothing ""wrong"" with how things are setup: everything works fine.  I just don't understand why the remote testBranch is labeled as ""tracked"".  That's what I want an answer to.</p>

<pre><code>hawk@Tug:~/temp/TestRepo (master)$ git remote show origin
* remote origin
  Fetch URL: git@github.com:haughki/TestRepo.git
  Push  URL: git@github.com:haughki/TestRepo.git
  HEAD branch: master
  Remote branches:
    master     tracked
    testBranch tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
hawk@Tug:~/temp/TestRepo (master)$ git branch -vv
* master 8df130e [origin/master] shoulda done this last time
hawk@Tug:~/temp/TestRepo (master)$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
  remotes/origin/testBranch
</code></pre>
","2","99717","0","0"
"46630173","3117475","2017-10-08 10:42:11","2","2347","<git><git-branch><author><lines-of-code><cloc>","Counting lines of code per author in a git repository","<p>So I'm in a team with a few other programmers and need to get a lines-of-code count per author in our git repository. That doesn't just mean lines modified by author, because that would include blank and comment lines. Ideally, I would be able to make a new branch containing only the commits of a specific author (<code>--author=""BtheDestroyer""</code> for myself) and then use <code>cloc</code> to get the comment line count and code line counts separately. I've tried using</p>

<pre><code>git log --author=""BtheDestroyer"" --format=%H &gt; mycommits
git checkout --orphan mycommits
tac mycommits| while read sha; do git cherry-pick --no-commit ${sha}; done
</code></pre>

<p>during the last line, however, I get a ton of the following errors:</p>

<pre><code>filepath: unmerged (commit-id-1)
filepath: unmerged (commit-id-2)
error: your index file is unmerged.
fatal: cherry-pick failed
</code></pre>

<p>I'm also not sure if that will end up fastforwarding through other commits in the process. Any ideas?</p>
","0","3117475","",""
"28407020","3088045","2015-02-09 09:57:33","46","45484","<git><github><merge><git-branch>","Keep commits history after a 'git merge'","<p>When I work on two different features (on two different branches created from the <em>master</em>) it is quite annoying that I will not have the commit history when I proceed with merging.</p>

<p>I'll explain better. When I finish work on <em>Branch-A</em>, I merge it into <em>master</em>. And that's fine, if I <code>git log</code> I see all the commits I made on <em>Branch-A</em>.</p>

<p><strong>Instead</strong>, when I finish work on <em>Branch-B</em> and I try to merge it to <em>master</em> (after that <em>Branch-A</em> has been already merged), I have to specify a commit message for the merging (while for the first branch I have not been asked anything).
And after the merging to <em>master</em>, if I type <code>git log</code>, I cannot see the commits of the <em>Branch-B</em> in the history of my <em>master</em> branch</p>

<p>Let's say I have </p>

<pre><code>**Branch A**

commit 09b2unfas9d781n2e
    Add more stuff

commit 8uj8masd89jas898a
    Add stuff

**Branch B**

commit 09b2unfas9d781n2e
    Add feature setting

commit 8uj8masd89jas898a
    Add feature
</code></pre>

<p>I finish having</p>

<pre><code>**Master**

commit 6hf6h8hd871udjkdn
Merge: 09b2un 34osd6
    Merge branch 'Branch-B' into master

commit 09b2unfas9d781n2e
    Add more stuff

commit 8uj8masd89jas898a
    Add stuff

commit 34osd62dhc91123j8
    I'm a previous commit from 'master'.
    The last one before branching...
</code></pre>

<p>while <strong>I would like to obtain</strong> something like:</p>

<pre><code>**Master**

commit 09b2unfas9d781n2e
    Add feature setting

commit 8uj8masd89jas898a
    Add feature

commit 09b2unfas9d781n2e
    Add more stuff

commit 8uj8masd89jas898a
    Add stuff

commit 34osd62dhc91123j8
    I'm a previous commit from 'master'.
    The last one before branching...
</code></pre>

<p>... that would reflect more exactly the history of the performed commits.</p>

<p>I don't get why I can keep the history from just one of the two branches.</p>

<p>How can I keep everything clear without those <em>merge</em> commits that hide/omit the real history of the merged commits?</p>
","0","3088045","0","0"
"10446330","511892","2012-05-04 09:36:29","1","844","<git><merge><branch><git-branch>","Understanding weird branch merge with git","<p>I'm working on a remote branch named sidebar, created like this (from my pc, not remote repo) :</p>

<pre><code>$ git branch sidebar
$ git checkout sidebar
$ git push -u origin sidebar
$ git pull origin sidebar
</code></pre>

<p>After some commit on the sidebar branch i pushed it to the repo :</p>

<pre><code>$ git push origin sidebar
</code></pre>

<p>Now it seems sidebar is merged to master and i don't understand why :</p>

<pre><code>$ git log --graph

* commit 3830b6e72f4249cd15c7a35e47a2
| Author: me
| Date:   Mon Apr 30 16:56:28 2012 +0200
| 
|     re-build sidebar boxes
|    
*   commit e97e63b05a522e29d3ca97a509e3652d
|\  Merge: eb1ebfd ed10585
| | Author: me
| | Date:   Sat Apr 28 15:54:19 2012 +0200
| | 
| |     Merge branch 'master' of 
| |   
| * commit 6495e5bd7ac12364a4a12389f58
| | Author: misterX
| | Date:   Sat Apr 28 03:46:58 2012 +0200
| | 
| |     FB: add friend list with statistics
| |   
* | commit eb89c0bbb5516b1ed795b9fc958
|/  Author: me
|   Date:   Sat Apr 28 15:54:08 2012 +0200
|   
|       add product img lens icon
</code></pre>

<p>Do you know what happened and where am i wrong ?</p>

<p>EDIT: Maybe the following could help</p>

<pre><code>$ git remote show origin
Password: 
* remote origin
  Fetch URL: user@repo
  Push  URL: user@repo
  HEAD branch: master
  Remote branches:
    master  tracked
    sidebar tracked
  Local branches configured for 'git pull':
    master  merges with remote master
    sidebar merges with remote sidebar
  Local refs configured for 'git push':
    master  pushes to master  (local out of date)
    sidebar pushes to sidebar (fast-forwardable)
</code></pre>
","5","511892","",""
"28432494","156198","2015-02-10 13:08:25","1","163","<git><branch><git-branch><git-merge>","Can I delete old git branches","<p>I've merged my code into the master branch and all is good now.  Code is production ready.  I want to cleanup some of the old branches as there's really no need for them.  We've gone through extensive testing and are fairly certain we will not go back.  </p>

<p>Should I delete old branches or just let it be?
<img src=""https://i.stack.imgur.com/zJRGD.jpg"" alt=""Branch history""></p>
","1","156198","0","0"
"28433668","4469739","2015-02-10 14:06:32","0","2370","<git><repository><bitbucket><git-branch><bitbucket-api>","Download a bitbucket git repository via api","<p>I am trying to make a script which get the repository from bitbucket and upload it to my ftp server.</p>

<p>My first problem is that i dont know how to get the repository.. Is there a way to download it with the official Bitbucket API? Or should i make a temporary folder and download it with git console?</p>

<p>Greez</p>
","0","4469739","0","0"
"28437768","4064650","2015-02-10 17:15:59","35","37672","<github><git-svn><git-branch><git-flow>","Git flow command error: 'flow' is not a git command","<p>I am very new to Git and am starting to learn the command line version. I believe my git flow is not installed correctly. I am running this from a pc. </p>

<p>When i run following command:</p>

<pre><code>git flow feature start JamesTest
</code></pre>

<p>I get the following error:</p>

<blockquote>
  <p>git: 'flow' is not a git command. See 'git --help'<br>
  Did you mean any of these?</p>
</blockquote>

<p>Looks like the git flow command is not being recognized from all paths? How do I fix this? </p>
","3","4064650","0","0"
"28759246","1246651","2015-02-27 06:55:47","2","3437","<git><git-branch>","Patch does not have a valid e-mail address after `git am`","<p>After:</p>

<pre><code>git am --signoff &lt; /tmp/diff_api_public.patch
</code></pre>

<p>Output was:</p>

<pre><code>Patch does not have a valid e-mail address.
</code></pre>

<p>And now, I have the repository in the state:</p>

<pre><code>project-folder[branch-name|AM 1/1]$
</code></pre>

<p>What's next to regain the branch correct?</p>
","5","1246651","0","0"
"65543174","14928572","2021-01-02 19:25:53","0","787","<git><github><repository><git-branch><git-pull>","git err :: Can't create remote/branch","<p>I have problem to push to my github.
I've uploaded other projects on github.
but suddenly, problem appears.</p>
<p>In terminal, I run following:</p>
<pre><code>1. git clone https://github.com/(username)/(reponame).git  
2. create remote to my github repogisry address.
3. git init  
4. git add .
5. git commit -m &quot;message&quot;
6. git push &lt;repo&gt; &lt;branch&gt;
</code></pre>
<p>but there's this message</p>
<pre><code>&quot;Cant's push refs to remote, Try running 'pull' to integrate your changes.
</code></pre>
<p>so I pull -&gt;</p>
<pre><code>git pull &lt;remote name&gt; &lt;branch&gt;
</code></pre>
<p>but there's other error :</p>
<pre><code>fatal: couldn't find remote ref master
</code></pre>
<p>I checked out my folder.
In .git/refs there's no 'remotes' folder which has remote, branch.
but in VSCODE (when I run push to) there's  in popup I/'ve created.<br />
To solve this error, deleted remote, create again, git init again, restart vscode,
but the error isn't fixed.</p>
<p>To test the other, I create other project, different github repo.
this project works.(in this project's folder the remotes folder is in refs)</p>
<p>but the project problems appeared before still has err.</p>
<p>how to solve this problem? Please help..</p>
","6","14928572","",""
"65547576","13661407","2021-01-03 07:28:06","1","277","<git><git-branch>","How to solve Permission denied errors after git checkout branch?","<p>I am learning git from scratch and following some tutorial and I got this error:</p>
<pre><code> Yasser@pc MINGW64 ~/Documents/repos/Branching (Development)
 $ git checkout master
 Switched to branch 'master'
 Your branch is ahead of 'origin/master' by 1 commit.
   (use &quot;git push&quot; to publish your local commits)

 Yasser@pc MINGW64 ~/Documents/repos/Branching
 $ git st
 fatal: failed to stat 'C:/Users/toshiba/Documents/repos/Branching': Permission denied

 Yasser@pc MINGW64 ~/Documents/repos/Branching
 $ git branch
 fatal: failed to stat 'C:/Users/toshiba/Documents/repos/Branching': Permission denied
</code></pre>
<p>Why I get this error Permission denied errors after git checkout branch?</p>
","1","13661407","0","0"
"65564804","13947877","2021-01-04 14:57:08","2","841","<git><git-branch>","Why git branch doesn't display anything?","<p>I am working on a repository with github.
When I execute <code>git branch</code>, there isn't anything displaied on my screen (see picture bellow).</p>
<p><a href=""https://i.stack.imgur.com/XSuY3.png"" rel=""nofollow noreferrer"">git branch</a></p>
<p>When I execute <code>git status</code>, it is said I'm in a branch.</p>
<p><a href=""https://i.stack.imgur.com/Bsldu.png"" rel=""nofollow noreferrer"">git status</a></p>
<p>So there is some branches and I am working with them.<br />
Do you know how to fix this issue ?</p>
","8","13947877","",""
"28797986","165071","2015-03-01 19:23:25","0","54","<git><bitbucket><git-branch><branching-and-merging>","Being given zip archives with .git - how to integrate into own Git repository?","<p>I have purchased an iOS game template and received the source code as a zip-archive including .git subdirectory of the author developer:</p>

<p><img src=""https://i.stack.imgur.com/5i7RO.png"" alt=""screenshot""></p>

<p>Then I have created my own BitBucket repository.</p>

<p>How should I put the new files there and how to integrate the Git history of the files with the history of my new repository?</p>

<p>Should I use branches here and whose changes should be at the ""master"" branch - mine or his?</p>
","2","165071","",""
"65593311","3797053","2021-01-06 09:35:14","-3","44","<git><bitbucket><git-branch>","best way for splitting poject using git features like branching","<p>i have a project which is in bitbucket</p>
<p>some work/bug fix is going on in master branch</p>
<p>this is in both live server and test server</p>
<p>now client want a new feature which we should not push to live server</p>
<p>he want to test new feature in test server only</p>
<p>but at same time bug fix he has to test in test server and after that live server we have to push daily to live server for bug fix</p>
<p>how can i achive this using git branching/or any other git features</p>
<p>i am completely new to git etc
i just have coding knowledge in php/python</p>
","0","3797053","",""
"65606404","14956061","2021-01-07 03:54:08","3","1598","<android><git><android-studio><github><git-branch>","Can I change the default git branch in Android Studio?","<p>The default git branch in Android Studio is 'master'. However, Github has updated its default to 'main', and I'd like to keep consistent with that. Is there any way to change the default git branch when using version control within Android Studio?</p>
<p><strong>Clarification:</strong> I know that I can switch branches <em>after</em> the repo is created, but let's say there is no repo yet. I go to <strong>VCS &gt; Import into Version Control &gt; Share Project on Github</strong>, and it creates a repo with default settings, 'master' branch. I want to change the settings so that the default branch <em>on creation</em> is 'main' or whatever I want it to be.</p>
<p>I don't want to have to create a new branch after the repo is initialized. If I'm going to take extra steps, I'll just use the CLI. Just not what I'm looking for.</p>
","0","14956061","",""
"28838118","3116854","2015-03-03 17:27:29","1","86","<git><git-branch><git-push>","""git push --force"" from live server to central repository","<p>The answer to similar questions on SO seems to always be ""merge/pull before pushing"" or ""don't get into the situation in the first place"". Neither of those apply.</p>

<p>I've inherited maintenance of a website in which ongoing development has branched from maintenance of the old site. However, I've discovered that legacy fixes weren't always made local->git->test->live. Sometimes they were test->live, skipping git, and sometimes they were made directly to Live.</p>

<p>Thus, the Live environment does not exactly match any git commit nor the test server nor my local environment. This is a problem.</p>

<p>I created a new branch for how live currently is, but when I tried to push, git refused -- claiming changes had been made to the central repository, and ""non-fast-forward updates were rejected"".</p>

<p>I don't want to merge into the live server. I <em>think</em> the unmerged changes are developmental (proper branch management wasn't always fastidiously followed), but even if there are fixes in the central that should be live, the live server is not the place to perform that merge.</p>

<p>The answer seems to be a ""git push --force"" from live, and deal with merges and general git cleanup on the local.</p>

<p>But I haven't used --force before, and from my searching for an answer, it seems to sometimes work differently than what people expect.</p>

<p>So, I need a sanity-check. will:</p>

<pre><code>git checkout -b new_branch_name
git add -u
git add *
git commit -m ""new branch to match how live is currently""
git push --force
</code></pre>

<p>push my new branch to the central repository exactly how it is on the server from which I'm running the commands, without affecting any other branches?</p>

<p>Contrarily, is there a better method to deal with getting the git repositories cleaned up, and a testing environment that matches live?</p>

<p>Since this is the live server, I can't just-try-it-and-see-if-it-works.</p>
","0","3116854","",""
"28841501","540718","2015-03-03 20:42:29","3","1217","<git><git-branch><git-flow><git-tag>","git-flow hotfixes with semantic versioning","<p>Following Jeff's tutorial at <a href=""http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/"" rel=""nofollow"">http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/</a>, I initialised git flow with the standard settings:</p>

<pre><code>[~/tmp/test]
$ git init
Initialized empty Git repository in /Users/nrm/tmp/test/.git/

[~/tmp/test (master)]
$ git flow init
No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for ""next release"" development: [develop]

How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []

[~/tmp/test (develop)]
$
</code></pre>

<p>I follow the tutorial up to the section ""Hotfixing production code"". There the hotfix branch is named ""assets"":</p>

<pre><code>$ git flow hotfix start assets
Switched to a new branch 'hotfix/assets'

Summary of actions:
- A new branch 'hotfix/assets' was created, based on 'master'
- You are now on branch 'hotfix/assets'

Follow-up actions:
- Bump the version number now!
- Start committing your hot fixes
- When done, run:

     git flow hotfix finish 'assets'
</code></pre>

<p>BUT, when the hotfix branch is closed the tutorial states <code>The hotfix was tagged '0.1.1'</code>. How come? I'm using <code>git-flow: stable 0.4.1</code>. </p>

<p>When I close the hotfix by <code>git flow hotfix finish 'assets'</code>, then the tag is equal to the hotfix branch name:</p>

<pre><code>$ git flow hotfix finish assets
                         ^^^^^^
Switched to branch 'master'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Switched to branch 'develop'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Deleted branch hotfix/assets (was 08edb94).    

Summary of actions:
- Latest objects have been fetched from 'origin'
- Hotfix branch has been merged into 'master'
- The hotfix was tagged 'assets'
                 ^^^^^^^^^^^^^^^
- Hotfix branch has been back-merged into 'develop'
- Hotfix branch 'hotfix/assets' has been deleted
</code></pre>

<p>Actually, I want to have both. Name a hotfix branch with some string (like ""assets"" in the example) independently from the tag name. Something like</p>

<pre><code>$ git flow hotfix finish assets --with-tag 1.0.1
</code></pre>

<p>resulting in</p>

<pre><code>$ git flow hotfix finish assets --with-tag 1.0.1

Switched to branch 'master'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Switched to branch 'develop'
Merge made by the 'recursive' strategy.
 assets.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 assets.txt
Deleted branch hotfix/assets (was 08edb94).
               ^^^^^^^^^^^^^

Summary of actions:
- Latest objects have been fetched from 'origin'
- Hotfix branch has been merged into 'master'
- The hotfix was tagged '1.0.1'
                         ^^^^^
- Hotfix branch has been back-merged into 'develop'
- Hotfix branch 'hotfix/assets' has been deleted
                 ^^^^^^^^^^^^^
</code></pre>

<p>Any suggestions?</p>
","0","540718","",""
"28845690","2414957","2015-03-04 02:28:56","0","1406","<git><bitbucket><git-branch><git-push><git-pull>","git push origin master error: The following untracked working tree files would be overwritten by merge: .DS_Store","<p>It's been a while that I am facing the following problem. What's the fix to it? I am just a newbie in git so please be instructive. I have already tried to follow the commands shown in the error but wasn't successful.</p>

<pre><code>Monas-MacBook-Pro:demo mona$ git branch
* master
Monas-MacBook-Pro:demo mona$ git add .
Monas-MacBook-Pro:demo mona$ git commit -m ""logo fixed""
[master 62bedf3] logo fixed
 1 file changed, 8 insertions(+), 7 deletions(-)
Monas-MacBook-Pro:demo mona$ ls
1a
Monas-MacBook-Pro:demo mona$ git push
fatal: The current branch master has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin master

Monas-MacBook-Pro:demo mona$ git push origin master
To https://lamiastella@bitbucket.org/lamiastella/vldb-demo.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://lamiastella@bitbucket.org/lamiastella/vldb-demo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
Monas-MacBook-Pro:demo mona$ git pull origin master
From https://bitbucket.org/lamiastella/vldb-demo
 * branch            master     -&gt; FETCH_HEAD
error: The following untracked working tree files would be overwritten by merge:
    .DS_Store
Please move or remove them before you can merge.
Aborting
Monas-MacBook-Pro:demo mona$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; master

Monas-MacBook-Pro:demo mona$ 
</code></pre>
","1","2414957","",""
"65947717","870980","2021-01-29 01:48:14","0","213","<git><github><github-pages><git-branch>","Conditionally delete a remote branch using `git push origin :branch-name` ... but only if branch exists?","<p><strong>The short version of my question:</strong></p>
<p>Is there a way to conditionally delete a remote branch using <code>git push origin :gh-pages</code> where the command is skipped or ignored if the gh-pages branch doesn't exist?</p>
<p><strong>The long version of my question:</strong></p>
<p>I'm building a boilerplate / starter template for using NPM as a Build System or Workflow for building basic webpages (instead of using something like Grunt or Gulp). The project uses a <code>/build</code> folder and I wanted to use Github Pages to serve the contents of <code>/build</code>. There doesn't seem to be an easy way to do that from /settings (I only see /root, not /build), so I ran across this command:</p>
<p><code>git subtree push --prefix build origin gh-pages</code></p>
<p>Which creates a <code>gh-pages</code> branch and pushes my changes from the <code>/build</code> folder of my master branch to the newly created <code>gh-pages</code> branch. Excellent!</p>
<p>Unfortunately, I can't simply update my <code>gh-pages</code> branch with changes (nor would I want to). I also can't make changes in <code>master</code> and then merge them into <code>gh-pages</code>. I get lots of error messages with branches being unrelated, or out of sync, or whatever.</p>
<p>Instead I need to make the changes in <code>master</code> and then use the <code>git subtree push --prefix build origin gh-pages</code> command again to push those changes. But I run into another error where it doesn't want to push new changes into an existing <code>gh-pages</code> branch.</p>
<p>Okay ... So to fix this I added <code>git push origin :gh-pages</code> to my command. So now my &quot;deploy&quot; command in my package.json looks like this:</p>
<pre><code>  &quot;scripts&quot;: {
    ...
    &quot;deploy&quot;: &quot;git push origin :gh-pages &amp;&amp; git subtree push --prefix build origin gh-pages&quot;,
    ...
  },
</code></pre>
<p>This works great. I simply type <code>npm run deploy</code> in my terminal and <code>git push origin :gh-pages</code> deletes the existing <code>gh-pages</code> branch and <code>git subtree push --prefix build origin gh-pages</code> creates a new <code>gh-pages</code> branch with my changes. Excellent!</p>
<p>But ... the final problem I can't seem to figure out is this. If it's the first time running the deploy command, the gh-pages branch won't exist and my deploy script fails.</p>
<p>So is there a way to conditionally run the <code>git push origin :gh-pages</code> part? Something like <code>if origin gh-pages exists ... git push origin :gh-pages</code>?</p>
<p>By the way, deleting a branch this way (using a leading colon) was totally new to me. And the <a href=""https://git-scm.com/docs/git-push#git-push-codegitpushoriginexperimentalcode"" rel=""nofollow noreferrer"">git-push man page</a> didn't explain it well. To understand how <code>git push origin :gh-pages</code> results in deleting the <code>gh-pages</code> branch, take a look at <a href=""https://stackoverflow.com/questions/45657462/why-does-this-command-delete-a-remote-branch-git-push-origin-branchname"">this link</a>.</p>
<p>In case it might be helpful, heres the <a href=""https://github.com/tyleryoungblood/npm-workflow"" rel=""nofollow noreferrer"">repo</a>. The package.json file is where the deploy script is located.</p>
","3","870980","",""
"47415461","8855039","2017-11-21 14:24:50","1","46","<git><git-branch>","git in / not visible in /etc","<p>I am trying to put various configuration files and scripts in git but on this server git is behaving strangely and seems to refuse traversing parent directories to find the .git branch root.</p>

<pre><code>/ # git init
/ # git status
# On branch master
nothing to commit (use -u to show untracked files)
</code></pre>

<p>So far so good.</p>

<pre><code>/ # cd etc/
/etc # git status 
# Not currently on any branch.
#
# Initial commit
#
nothing to commit (create/copy files and use ""git add"" to track)
</code></pre>

<p>Huh? - Shouldn't I be on branch master?</p>

<p>If I try to add something:</p>

<pre><code>/etc # git add passwd
fatal: Unable to create '//etc/.git/index.lock': No such file or 
directory
</code></pre>

<p>Why won't git search parent directories for the branch root (.git) ??</p>
","5","8855039","",""
"47456374","8961271","2017-11-23 13:11:36","1","67","<ios><xcode><git><version-control><git-branch>","How to switch to remote git branch in Xcode9?","<p>I want to switch to remote branch from my application in Xcode 9, I have tried with check-out option in Xcode the remote branch from Xcode. Does it the right way to do that, Can anyone help me out here?</p>
","2","8961271","",""
"11356901","930618","2012-07-06 06:24:01","27","6855","<git><git-svn><git-branch>","git-svn clone | spurious branches","<p>I used the following command to clone svn repo into git and after executing it, i see some spurious branches.</p>

<p><code>git svn clone [SVN repo URL] --no-metadata -A authors-transform.txt --stdlayout ~/temp</code></p>

<p><code>git branch -a</code></p>

<pre><code>*(no branch)
  master
  remotes/abc-1.3.x
  remotes/abc-1.3.x@113346
  remotes/abc-1.3.x@541512
  remotes/branch_test_script
  remotes/tags/modules-1.2
  remotes/tags/modules-1.2@113346
  remotes/tags/modules-1.2@516265
  remotes/tags/release-1.1
  remotes/tags/release-1.1@113346
  remotes/tags/release-1.1@468862
  remotes/trunk
</code></pre>

<p>Actual branches created in svn were abc, branch_test_script, modules and release.
Can someone help in understanding what 'abc-1.3.x@113346' , 'abc-1.3.x@541512' ... 'release-1.1@468862' etc are ?</p>

<p>How can we get rid of these spurious branches / what do they signify ?</p>

<p>Thanks,<br>
Gayathri</p>
","7","930618","0","0"
"29258711","","2015-03-25 14:37:49","1","20","<git><branch><git-branch><pull>","How to have git setup tracking branch on pull","<p>There are times when I'm pulling new changes from a repo that someone else changed. They have created new branches and pushed them to the central repo. Is there a way, when pulling these new branches, to get git to automatically create tracking branches of the same name locally?</p>
","0","","0","0"
"47469039","245549","2017-11-24 08:20:05","2","6895","<git><git-branch><git-checkout>","How to see and go to local branches in git?","<p>I have just created a brand-new git repository:</p>

<pre><code>git init
</code></pre>

<p>By executing</p>

<pre><code>git status
</code></pre>

<p>I have determined that I am in the master branch. The first line of the output was:</p>

<pre><code>On branch master
</code></pre>

<p>As a first step I wanted to create a branch and go in there. I have learned that one can do these two steps just by one command:</p>

<pre><code>git checkout -b aaa
</code></pre>

<p>I this way I have created a branch called ""aaa"" and went there. I could confirm it with ""git status"" (it tells me ""On branch aaa""). Now I want to go back to the ""master"" branch. So, I execute:</p>

<pre><code>git checkout master
</code></pre>

<p>As a result I get:</p>

<pre><code>error: pathspec 'master' did not match any file(s) known to git.
</code></pre>

<p>So, how do I go to another (existing) branch in git? Moreover, I do not even know what branches exist. How can I see a list of existing branches?</p>
","2","245549","0","0"
"12317923","462948","2012-09-07 12:16:14","4","2020","<git><git-branch><git-flow>","How to deal with major version branch in git","<p>I'm just switching a development project from SVN to git and it's the first time we'll be using branching of any kind.  I'm wrapping my brain around the git-flow approach (based on <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">this great article</a>), but am stuck conceptualizing how to do one thing.</p>

<p>When we do a major version bump (say from 2 to 3) we still support version 2 for at least a year, including bug fixes and occasional new features.  Would I create a new permanent branch for version 2 to apply those changes to?  And if we get down the road developing for version 3 and decide that we want to add a new version 3 feature into version 2, is that possible, and how would you do it?  Would I have to cherry-pick commits from the develop branch into the version-2 branch, or could I do an actual merge?</p>

<p>(I'm using Tower for my Git client)</p>
","1","462948","0","0"
"66311184","6760729","2021-02-22 06:51:00","1","877","<git><github><merge><branch><git-branch>","why git merge operation is not showing in git log?","<p>I'm new to git. I've done some simple operations:
<br>create a repo
add an file 'A' into the local repo, then stage, commit and push to the master branch (commit1)
<br>create a branch by running <code>git checkout -b branch_name</code>
<br>create a new file 'B' and edit 'A', stage, commit, then <code>git push origin branch_name</code> (commit2)
<br> then to merge it to master branch, I simply run <code>git checkout master</code>, <code>git merge branch_name</code>,<code>git push origin master</code>.
<br> Remote master branch has updated. Then I run <code>git log</code> in master branch, only 2 commits are shown:</p>
<p><br>commit1 ae6ebbb... (HEAD -&gt; master, origin/branch_name, origin/master, branch_name)
<br>commit2 ccc6af3...</p>
<p>How Can I find the merge history? (tried git log --merges doesn't work) Am I making any mistake in this process? The reason I want to get the merge hash is to revert back to the status before merge. Could plz any one tell me how to do it?</p>
","2","6760729","",""
"66317124","6613521","2021-02-22 14:00:25","1","5959","<git><version-control><gitlab><git-branch>","How to split large merge request into parts in git","<p>I have developed a feature which needed small changes around in 30+ files.
Now I want to send the merge request but reviewer can't review more than 10 files in single request.
How can I split this merge request in 3 different requests for his convenience??</p>
<p>My Efforts:
One way of doing this is to create new branch, pull everything from old branch and handpick files and
git add git commit and git push them,</p>
<p>Is there any better way of doing this ??</p>
","3","6613521","",""
"30032482","343204","2015-05-04 14:19:45","2","809","<git><git-branch>","Does ""git push --set-upstream origin name/of/my/branch"" store intermediary branches?","<p>If I do <code>git push --set-upstream origin  name/of/my/branch</code> will that create any intermediary branches that may exist between itself and master?</p>

<p>e.g. say I branch off my <code>master</code> branch to create one called <code>B1</code>. I then branch off <code>B1</code> to create <code>B2</code>. I repeat this from <code>B2</code> to <code>B3</code>.</p>

<p>Now is there any information about <code>B1</code> and <code>B2</code> stored remotely (either via a physical branch or in the logs)?</p>
","2","343204","",""
"30035998","2413182","2015-05-04 17:17:03","3","1574","<git><visual-studio><github><git-branch>","Deleted branch unexpectedly git in visual studio","<p>I am working in visual studio 2013 with git and today unexpectedly i deleted a branch . Now when i go to create branch it doesn't show in drop-down to select and create that again .</p>
","0","2413182","0","0"
"12433263","1377568","2012-09-14 23:35:11","1","126","<github><push><git-branch>","gitHub - Committing and Pushing Dev Branch Pushed to Another Branch","<p>I have a dev branch. I made local changes, committed them <code>git commit -m ""blah"" file </code>and pushed these changes to my branch(ccap-biology-dev) <code>git push origin ccap-biology-dev
</code>. These changes were committed another branch(ccap-biology) as well as some temp files that my .gitignore file handles. None of these temp files are on my branch. I would like to avoid this from happening again. However, I do not know what I did incorrectly or the best way to correct this.</p>

<p>Steps I've taken to attempt to isolate the problem:</p>

<pre><code>1. git remote -v:
   origin   https://github.com/Connexions/oer.exports.git (fetch)
   origin   https://github.com/Connexions/oer.exports.git (push)&lt;/code&gt;

2. git branch -avvv
   ccap-biology                           0105488 [origin/ccap-biology] Update css/ccap-numbering.less
 * ccap-biology-dev                       c674100 module2epub
   remotes/origin/HEAD                     -&gt; origin/master
   remotes/origin/ccap-biology             0105488 Update css/ccap-numbering.less
   remotes/origin/ccap-biology-dev         c674100 module2epub
   remotes/origin/master                   fa3d5fa Added some styling to solutions

3. branch log file doesn't reflect a commit on ccap-biology
4. gitHub Activity Feed does not show this push either
</code></pre>

<p>This happen during commit <code>c674100 module2epub</code>. What are the next steps to take to find out what happened? What is the best way to cleanup the branch that I accidentally pushed to?</p>

<p>Any help appreciated. Thanks ahead of time.</p>
","0","1377568","",""
"13343581","1817937","2012-11-12 12:17:30","11","18742","<git><branch><git-branch>","Creating branch inside a branch in git","<p>In my repository, I have a master branch and then a staging branch coming out of master branch. Now I need to add a third branch that should come out from staging branch. That means I need a branch coming out of another branch. Can anyone help in this?</p>

<p>The syntax I used for creating branch is like this: </p>

<pre><code>git branch &lt;name_of_your_new_branch&gt;

git push origin &lt;name_of_your_new_branch&gt;

git checkout &lt;name_of_your_new_branch&gt;
</code></pre>
","0","1817937","0","0"
"13344101","1817937","2012-11-12 12:55:49","0","73","<git><branch><git-branch>","Changing the branch origin in git","<p>I have created three branches. Master, Staging and development. Staging and development branch comes out from master. Now, I want to take out the development branch and change it in such a way that it should come out from staging branch. Basically I need to shift the origin point of branch. 
Is there any way to do it? Considering there is no code in each branch and considering there is some code in each branch.</p>
","1","1817937","",""
"13374624","1822978","2012-11-14 07:29:09","3","259","<git><git-branch><git-rebase><git-clone><git-workflow>","git workflow branch / clone / stash / --orphan","<p>I've recently dived into Git and maybe I'm over complicating this but I'm trying to figure out the best workflow for the following:</p>

<p>I have created a 'backbone' or 'base' of sorts for themes similar to 'bootstrap' grid based system, responsive etc. I want to keep that base across all themes and have files ontop that I modify from theme to theme. When the time comes to update the base I update across all themes, without affecting the theme files ontop.</p>

<p>eg.<br>
theme.css&nbsp;&nbsp;&nbsp;&lt;-- Will change from theme to theme<br>
theme.js&nbsp;&nbsp;&nbsp;&nbsp;&lt;-- Will change from theme to theme<br>
[base]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;-- Files that will be used across all themes</p>

<p>What's the best way to do this with git? Do I have a single master repo and have multiple branches for the different themes that I'll never merge into the master?</p>
","0","1822978","0","0"
"30955940","1197249","2015-06-20 15:50:44","0","669","<git><version-control><git-branch><git-rebase>","How can I combine 2 commits into 1 in git in a branch?","<p>I was working in branch ""Feature"".<br>
So my git tree was:  </p>

<pre><code>                  master
A&lt;--B&lt;--C&lt;--D&lt;--F&lt;--G
            |&lt;--E
                Feature  
</code></pre>

<p>I wanted to get all the latest of master while working on Feature branch so I did:  </p>

<pre><code>git checkout Feature  
git rebase master  
</code></pre>

<p>During the rebase I got a merge conflict in one file and during resolving the conflict manually I did a mistake which I realized later and not before running <code>git rebase --continue</code><br>
So I ended up with a tree as follows:  </p>

<pre><code>                 master      
A&lt;--B&lt;--C&lt;--D&lt;--F&lt;--G&lt;--E  
                       Feature
</code></pre>

<p>Then I realized about my mistake that actually broke the build in E.<br>
I corrected my mistake (not commited yet) and continued my work but I don't want to have 2 commits in Feature that will end up in master and the one of the commits is a bad commit.<br>
Also I would like to end up with a single commit in master branch of my work in Feature.<br>
So if I have:  </p>

<pre><code>                 master      
A&lt;--B&lt;--C&lt;--D&lt;--F&lt;--G&lt;--E&lt;--H  
                           Feature   
</code></pre>

<p>How can I combine E and H into one commit so that when I do:  </p>

<pre><code>git checkout master  
git rebase feature   
</code></pre>

<p>I have only 1 commit in my master?
Note:  The branch Feature is local and not pushed in case it matters.                  </p>
","3","1197249","0","0"
"16404681","613617","2013-05-06 18:15:22","7","2123","<git><git-branch>","Our git repository has a branch called HEAD","<p>I recently noticed that our git server has a branch called HEAD. I've tried doing this locally and git warns me that this is ambiguous. Are there any potential horrible problems we could encounter by deleting/renaming this branch?</p>
","3","613617","",""
"16439398","1493269","2013-05-08 11:24:54","1","409","<git><git-branch><gitignore>","How to keep .gitignored files off my gh-pages branch?","<p>In my global <code>.gitignore</code> file I chose to keep my IDE folders out of my versioning. So in my <code>master</code> branch are folders like <code>.idea/</code> or <code>*.iml</code> files. If I now switch to branch <code>gh-pages</code> git keeps those IDE specific files and I'm ending up with <code>/index.html</code>, <code>/src/.idea/</code>, <code>/sample/.idea/</code> on that branch even though I don't want the IDE configuration to appear on <code>gh-pages</code>.</p>

<p>What's the best way to tell git to drop these files on that branch?</p>
","0","1493269","",""
"33012869","3540289","2015-10-08 10:15:14","71","23875","<git><git-branch><fatal-error><git-log><blue-screen-of-death>","Broken branch in git, fatal: your current branch appears to be broken","<p>Here is my case:</p>

<ul>
<li>I was working on one branch.</li>
<li>Pushed new commits to the remote.</li>
<li>Switched back to the master branch. </li>
</ul>

<p>But suddenly after typing <code>git checkout master</code> command my computer encountered <a href=""https://en.wikipedia.org/wiki/Blue_Screen_of_Death"" rel=""noreferrer"">blue screen of death</a> and an unexpected force shut down happened. After starting back my computer I have checked the status of my current branch and as a result I got each and every file as marked new files.</p>

<p>Now, I am stuck at this point and after <code>git log</code> command I am getting error </p>

<pre><code>$ git log
fatal: your current branch appears to be broken
</code></pre>

<p>How to solve this problem and recover my branch?.</p>

<p>I am working with windows 7 and git bash latest version</p>

<blockquote>
  <p>Edit: <strong>I don't want to delete this branch.</strong></p>
</blockquote>
","2","3540289","0","0"
"68878906","12058653","2021-08-22 06:01:34","0","374","<git><git-merge><git-branch><pull-request>","How to develop a new feature branch meanwhile others change Main branch with git?","<p>we have a project which many developers working on it .
every time I want to develop a feature
1- pull latest changes from remote repo to my local and
2- I create a branch locally and do my changes on it and
3- push the newly created branch to remote repo
4- create a pull request to say some changes to somebody come and review it</p>
<p>and reviewer say to me : you have to make some changes to your branch because you have to consider some guidelines</p>
<p>so I go back to my local rep . meanwhile of developing this feature other developers of team push some changes to Main branch on remote repo</p>
<p>now should I pull them first to my Main branch of local repo to have latest changes and merge Main branch to my local feature branch before working on it or not ?</p>
<p>how is the flow in this situation ?</p>
","1","12058653","",""
"13173565","348545","2012-11-01 08:39:11","3","168","<git><git-branch><git-stash>","Why does git require stash save-pop to switch branch?","<p>Sometimes when there are local changes to the working directory, switching branch fails, but the following flow works:</p>

<ul>
<li>Stash save</li>
<li>Switch branch</li>
<li>Stash pop</li>
</ul>

<p>How come? Doesn't git know how to apply the local working directory changes to the target branch? What design choice made this procedure necessary? Is there a flag I could use in order to avert this slightly long procedure?</p>

<p><strong>UPDATE:</strong><br>
Assume I want to keep the local changes as local changes when I switch branch. Sometimes it's a practical scenario...</p>
","0","348545","",""
"30787252","10608","2015-06-11 17:12:12","3","366","<git><git-branch><git-push>","git push to remote, but don't create new branch","<p>Is there a way to <code>git push</code>, but, if the branch doesn't exist in the remote, throw an error or exit non-zero instead of creating a new branch on the server?</p>

<p>The use case is the following. I am creating scripts to help automate the scm workflow in my company. If someone accidentally mistypes a branch name as input into the script, I don't want a new branch created on the remote. I already can manually check remote branch existence, but I wondered if git supports this feature.</p>
","2","10608","",""
"40024568","3966601","2016-10-13 15:01:23","0","331","<git><bitbucket><git-branch><git-merge><branching-and-merging>","Making a branch in git for some big code changes","<p>I am making some changes to some ETL code and want to make sure I don't break anything.
I have a git repo and all of the files I am working on have been committed and stored on Bitbucket. (<code>git push origin master</code>)</p>

<p>I believe that I should be making a new branch, correct? Will this reflect on Bitbucket as well or do I have to push it there somehow?</p>

<pre><code>git branch config_changes
</code></pre>

<p>Now when I make some edits to my files will I just say the following?</p>

<pre><code>git checkout config_changes
git add filename.py
git commit -m ""changes""
git push origin config_changes
</code></pre>

<p>That will backup my changes to Bitbucket. Now, when I feel like the code is ready to replace my existing code, I just do:</p>

<pre><code>git checkout master
git merge config_changes
git push origin config_changes
</code></pre>

<p>Or should that last line be <code>git push origin master</code>?</p>

<p>Bonus question: I have Windows Task Schedule running .py files to automate some daily stuff. I want to make changes to files but keep the tasks running on the current (working) .py files. Is there a way to accomplish this? The task manager is pointing directly to a filename. Do I duplicate the folder for now?</p>
","2","3966601","",""
"40092746","9950","2016-10-17 17:56:08","2","789","<git-branch><jgit>","JGit equivalent to ""git branch -a --contains <commit id> --merged""","<p>How can I replicate <code>git branch -a --contains &lt;commit id&gt; --merged</code> in JGit?</p>

<p>Below, I replicate without <code>--merged</code> but I'm not sure how to add the filter to only report branches to which the change was merged and not include all branches created after merge point.</p>

<p>If the command line can do, I expect JGit can too but I'm not sure how.</p>

<p><strong>Note</strong>: the code below uses our GitController which is a wrapper around JGit, so some methods listed aren't pure JGit.</p>

<p><strong>Code</strong></p>

<pre class=""lang-java prettyprint-override""><code>public List&lt;String&gt; getBranchesContainingCommit(File localWorkingCopy, String id, boolean onlymerged = true) {
  List&lt;String&gt; branches = new ArrayList&lt;&gt;()

  // Access Repository
  Git git = openExistingRepository(localWorkingCopy)

  // Find commit
  RevWalk walk = new RevWalk(git.repository)
  ObjectId foundId = git.repository.resolve(id + ""^0"")
  RevCommit commit = walk.parseCommit(foundId)

  // For all Remote Branches
  getBranches(git,true).each{ Ref ref -&gt;

    if (walk.isMergedInto(
            walk.parseCommit(ref.getObjectId()), commit)) {
      branches.add(branchNameFromRefName(ref.name))
    }
  }
  walk.close()
  walk.dispose()
  return branches
}
</code></pre>

<p><strong>Test Error</strong></p>

<pre><code>java.lang.AssertionError: Wrong number of branches found
Expected:  [feature/branchContainsMerged, feature/branchContainsBase]
Actual:    [feature/branchContainsAfterMerge, feature/branchContainsBase, feature/branchContainsMerged, master] 
Expected :2
Actual   :4
  &lt;Click to see difference&gt;
</code></pre>

<p><strong>Test Case</strong></p>

<pre class=""lang-java prettyprint-override""><code>  /**
   * 1. Create baseBranch
   * 2. branch branchMergedChangeSrc
   * 3. Make change
   * 4. merge branchMergedChangeSrc to baseBranch
   * 5. branch branchUnmergedChangeSrc
   * 6. Make change
   * 7. Branch branchAfterMerge from baseBranch
   *
   * Expect: with merges filter
   *   idMerged on branchMergedChangeSrc, baseBranch
   *   idUnmerged on branchUnmergedChangeSrc
   */
  String baseBranch=""feature/branchContainsBase""
  String branchMergedChangeSrc=""feature/branchContainsMerged""
  String idMerged = ""f342575605aa297778047a940ac1f47b74c29d81""
  String branchUnmergedChangeSrc=""feature/branchContainsUnMerged""
  String idUnmerged = ""e1dbd1e371d60af235a1a0e82f95c25a9c0049b6""
  String branchAfterMerge=""feature/branchContainsAfterMerge""

  @Before
  void setup() {
    controller = (GitController) getSCM(SCMType.Git)
    workspace  = createEmptyTestDir()

    // Clone Skeleton
    controller.cloneRepository(new File(""testdata/skeleton.git"").toURI().toString(), workspace)
  }

  @Test
  void mergedBranchesForMergedCommitTest() {
    List&lt;String&gt; containingBranches = controller.getBranchesContainingCommit(workspace, idMerged)

    // Unmerged Change on Branch
    checkBranches([branchMergedChangeSrc, baseBranch], containingBranches)
  }


  @Test
  void unmergedBranchesForMergedCommitTest() {
    List&lt;String&gt; containingBranches = controller.getBranchesContainingCommit(workspace, idUnmerged)

    // Unmerged Change on Branch
    checkBranches([branchUnmergedChangeSrc], containingBranches)
  }


  void checkBranches(List&lt;String&gt; expectedBranchNames, List&lt;String&gt; actual) {
    assertEquals(""""""Wrong number of branches found
Expected:  ${expectedBranchNames}
Actual:    ${actual}"""""", expectedBranchNames.size(), actual.size())

    expectedBranchNames.each { String branch -&gt;
      assertTrue(""Expected ${branch} in containing: ${actual}"", actual.contains(branch))
    }

  }
</code></pre>
","0","9950","0","0"
"30819660","4806775","2015-06-13 14:19:03","0","34","<git><git-branch>","How to create a new git branch from a messy working copy?","<p>I'm working on a project that has just a single master branch and there are two servers, a testing one with an up-to-date working copy, and a production one whose working-copy is behind.</p>

<p>I'd like to have the production and testing each have their own branches (with production server using the master branch). The difficulty is that the production working copy has some files more updated than others, e.g. when critical bug fixes were fixed, just single files were brought up to date.</p>

<p>How do you go about creating a new branch from the production working-copy even though it's files are at different points from the masters history?</p>
","2","4806775","",""
"2162419","32238","2010-01-29 14:11:52","0","372","<svn><git><git-branch>","How can I track a single branch on subversion with git","<p>I'd like to track a remote branch on SVN from within Git. I can see the basics of how to do this with the git-svn command, I was hoping to do something like the following:</p>

<pre><code>Git branch | SVN branch
-----------------------
master     | Trunk
feature1   | &lt;not mapped&gt;
feature2   | &lt;not mapped&gt;
</code></pre>

<p>so that once I merge into git/master, and then do dcommit, Trunk would be updated with only changes between the last svn commit and the git/HEAD.</p>

<p>Is this possible? how would I do it?</p>
","0","32238","",""
"58939846","4451315","2019-11-19 17:36:36","2","505","<git><git-branch><git-checkout>","`git checkout` not resetting file","<p>Here's my situation. I'm on branch <code>my_branch</code>, have accidentally modified a file (and have staged these changes), and would like to reset this file to how it was on <code>master</code>. However, if I doing so using <code>git checkout</code>, I get an error (see below for details).</p>

<pre><code>$ git branch
* my_branch
  master

$ git fetch origin master
From [MY REMOTE]
 * branch            master     -&gt; FETCH_HEAD

$ git status
modified:   my_folder/my_file.py

$ git checkout origin/master -- my_folder/my_file.py
error: pathspec 'my_folder/my_file.py' did not match any file(s) known to git.
</code></pre>

<p>How should I be using <code>git checkout</code>? What might be causing git to list this file as 'modified' in <code>git status</code>, but to say it's not recognised during <code>git checkout</code>?</p>
","0","4451315","",""
"13275420","268847","2012-11-07 17:57:37","1","346","<git-branch><gitolite>","Can gitolite prevent branch deletes?","<p>Is it possible to set up gitolite acls to allow a user to read, write, and push, but not to delete branches?</p>
","0","268847","0","0"
"58942127","10894456","2019-11-19 20:12:55","2","139","<git><intellij-idea><git-branch><git-pull><git-checkout>","Why ""git pull"" is updated files when implemented immediately after checking out a remote branch?","<p>I use IntellijIDEA,</p>

<ol>
<li>At the branches view( right bottom corner) I select  a brunch from remote branches which I have never checked out before ( I didn't even knew it's name before read at my Jira task )</li>
<li>Clicked on it</li>
<li>Checkout As...</li>
<li>Left the original name ( the same as remote name)</li>
<li>OK</li>
</ol>

<p>I I wish I got an up to date branch ( isn't it reasonably?) but when I immediately select Git -> pull, I got <strong>588 files updated in 627 commits</strong> at this branch?</p>

<p>Please explain what is the logic? Isn't it reasonably to expect to get an up to date branch when checkout and expect pull will say ""everything is up to date"" ? </p>
","0","10894456","",""
"13280077","720164","2012-11-07 23:27:24","4","863","<git><bash><shell><git-branch>","Check if git branch exists in bash: weird interpolation behavior","<p>I'm trying to see if a certain branch exists within a shell script.</p>

<p>However, <code>git-branch</code> seems to modify its output when interpolated. (I don't know the exact phenomenon or terminology here)</p>

<p>For example, I'm trying to get the array of branches:</p>

<pre><code>$ git branch
  develop
* master

$ branches=`git branch`
$ echo $branches
develop compiler.sh HOSTNAME index.html master

$ echo `git branch`
develop compiler.sh HOSTNAME index.html master
</code></pre>

<p>A kind of <code>ls-files</code> seems to be getting in the way. How come? Is this Bash? Git? I'm confused.</p>
","0","720164","",""
"13311146","941913","2012-11-09 15:41:20","1","187","<git><version-control><github><branch><git-branch>","My git branch on github should be only 2 ahead but it is also 2 behind","<p>I made a branch from ma master branch called development. The development branch got 2 new commits. Meanwhile the master branch got 1 commit, which was a mistake, then I reverted it and pushed. So far so good. I saw the ahead/behind thingy and I removed the two commits from master (the mistake and the revert one) by resetting HARD to 2 commits back.</p>

<p>Now my metrics on github still shows that development branch is 2 behind although it is not if you look at the commits.</p>

<p>Any ideas?</p>
","2","941913","",""
"59085318","6463555","2019-11-28 09:17:51","1","211","<git><github><git-branch><git-commit>","Finding branches to which a commit belongs to on github.com","<p>I want to know to which all branches contain a particular commit in a <a href=""https://github.com"" rel=""nofollow noreferrer"">github.com</a> repository. Suppose I need to list all branches which contain <a href=""https://github.com/esnme/ultrajson/commit/53f85b1bd6e4f27a3e4cdc605518c48a6c7e7e9e"" rel=""nofollow noreferrer"">commit</a>. I am aware of following ways:</p>

<ol>
<li>Swicth to each branch and see the last commit date and compare it with the commit's date. This is not feasible if there are multiple branches and tags.</li>
<li>Checkout the github repo and do <code>git branch --contains &lt;commit&gt;</code> (related <a href=""https://stackoverflow.com/questions/1419623/how-to-list-branches-that-contain-a-given-commit"">SO question</a>). I would prefer not checking out the repo as I need to browse a large number of repos on a daily basis.</li>
</ol>

<p>Both of these ways are time consuming. <strong>Is there a better way?</strong> </p>
","2","6463555","",""
"30881730","567983","2015-06-17 03:16:08","0","34","<git><repository><git-branch>","Can I check out a git branch without removing other orphaned branches from my local files?","<p>I have two related projects that are in separate branches of the same git repo (<code>master</code> and <code>demo</code>). When I check out the <code>master</code> branch, it removes the files in my demo folder from my local hard drive, and vice versa with the <code>demo</code> branch checked out. Is it possible to avoid this behavior?</p>
","0","567983","",""
"30881909","2256006","2015-06-17 03:36:11","0","1103","<git><git-branch>","how to create multi-level remote branch in git?","<p>for example , my project have two branches, master and test.Branch master is used for code which is already tested and can be delivered, Branch test is used for code which is just submitted and need to be tested.But Since we have 5 developers and we want to create 5 sub branches in test branch , what can I do?</p>
","0","2256006","",""
"59093362","11948161","2019-11-28 16:48:45","1","146","<git><branch><git-branch>","How to work with more than one version of the same application at the same time in git?","<p>I have an application that is going to be used for a lot of clients, currently we have two versions of it, one is the core version, the other will be used by one of my client. For now we have two branches (master, client_1) and they're similar, but different.</p>

<p>My problem is that if I correct something just for client_1, it's easy, I just have to commit in that branch. But if I correct something for both, I don't now how to ""merge"" it, because if I merge my git tries to merge everything, not just my correction.</p>

<p>Now, imagine that my application expands to 15 clients, each one has something different, small changes, but it's different. How do I control this kind of problems?</p>
","0","11948161","",""
"21267245","","2014-01-21 19:24:01","0","32","<git><git-branch>","Is there a git command to transform a non tracking branch in a tracking branch?","<p>I know that one can edit <code>.git/config</code> file to do this! I'm asking for a native <code>git</code> command to do this. The key point here is that the branch already exists (and maybe with new commits compared with the remote branch) so <code>git branch --tracking BRANCH_NAME REMOTE_BRANCH</code> gives an error.</p>
","1","","",""
"21342689","882565","2014-01-24 21:21:48","3","534","<git><ide><symlink><git-branch><git-bash>","Create symlink file hierarchy from git branches","<p>Given a number of branches, I'd like a file hierarchy that I could browse in my IDE that would show the files and folders that are associated with the branch.  </p>

<p>There are probably some tricks and gotchas that I have to figure out, for example, is it possible to show files that have been edited within a branch, but to exclude merges of other branches?</p>

<p>Root Directory Structure (<em>based on branches'</em>)</p>

<p>[branch]</p>

<p>[branch2]</p>

<p>[branch3]</p>

<p>`--[all] (symlinks to all files in one bucket)</p>

<p>`--[PATH\SYMLINK] (directory path + symlink)</p>

<p>`--[PATH\SYMLINK]</p>

<p>Notes:</p>

<p><a href=""https://stackoverflow.com/questions/12370714/git-how-do-i-list-only-local-branches"">Git: How do I list only local branches?</a></p>

<pre><code>git for-each-ref --format='%(refname:short)' refs/heads/
</code></pre>

<p>Script in progress</p>

<pre><code>#!/bin/bash
BRANCHDIR='/path/to/where/symlinks/go'
MASTER='master'
CODEDIR='/path/to/sourcecode'
OLDPATH=`pwd`
BRANCHDIRS=`git for-each-ref --format='%(refname:short)' refs/heads/ | xargs echo`

for i in $BRANCHDIRS;
do
BRANCHFILES=`git diff --name-only  $i $MASTER`
mkdir -p $BRANCHDIR/$i $BRANCHDIR/$i/all
for j in $BRANCHFILES;
do
mkdir -p $BRANCHDIR/$i/$(dirname $j)
ln -s $CODEDIR/$j $(basename $j) -t $BRANCHDIR/$i/$(dirname $j)

ln -s $CODEDIR/$j $(basename $j) -t $BRANCHDIR/$i/all/$(basename $j)
done
done
cd $OLDPATH
</code></pre>
","0","882565","0","0"
"13888103","614443","2012-12-15 00:23:44","2","181","<git><git-branch><bitbucket><git-merge><git-pull>","git merge pull branches confusion","<p>I have 2 branches (master and dev). Another worker has pushed a new branch called stage into the repository so that stage is now 1 commit ahead of master. I am trying to pull down stage so that I can merge it into master (and thus merge into dev), but I am having issues pulling down stage. How do I pull down a clean version of stage?</p>
","0","614443","0","0"
"31403820","903790","2015-07-14 10:15:53","19","14982","<git><github><git-branch>","git delete remote branch not working: branch not found","<p>I am trying to delete a remote branch in git, I did: </p>

<pre><code>git branch -r
...
origin/master
origin/dev
origin/branch_to_delete
</code></pre>

<p>now I try to delete <code>origin/branch_to_delete</code>: </p>

<pre><code>git branch -d origin/branch_to_delete
error: branch 'origin/branch_to_delete' not found 
</code></pre>

<p>I did: </p>

<pre><code>git fetch --all
</code></pre>

<p>and tried again, the same error. I tried with <code>-D</code> but the same error. </p>

<p>but the branch is there, I can see it in github.com. What to do?</p>
","0","903790","0","0"
"13892968","252576","2012-12-15 14:15:43","2","758","<git><shell><git-branch>","List all branches in all local git clones","<p>I ended up creating several git clones of various repositories over time, and in some of the clones, I created more than one branch. I want to now find the clone which has a specific branch. </p>

<p>I looked through StackOverflow questions and came across the following post <a href=""https://stackoverflow.com/questions/2765253/git-status-across-multiple-repositories-on-a-mac"">Git Status Across Multiple Repositories on a Mac</a>. Using this as reference, I decided to write my own shell script to do list all clones and the branches in each clone. However, by <code>grep</code>ing in the <code>.git</code> directory, I could not find any place where this information is available. The <code>HEAD</code> file only has information about the currently checked out branch. </p>

<p>I can certainly write a script to process the output of <code>git branch</code> in each clone's working directory. However, before I start on that, I would like to know if there is an easier way of obtaining this information. </p>
","0","252576","0","0"
"40354999","1252307","2016-11-01 06:15:06","8","3127","<git><git-branch>","How to make git switch to newly created branch automatically?","<pre><code>1: git checkout master
2: git branch feature
3: git commit 'commit msg'
</code></pre>

<p>I am expecting git to switch branch on line 2 <em>(but it doesn't which is really annoying because I have to revert the check-in on master)</em>.</p>

<p>Is there any way to make git switch the branch?</p>
","0","1252307","",""
"21349855","2766707","2014-01-25 11:19:23","2","144","<git><git-branch>","strip all timestamps from a local git repository","<p>i have a local git repository, ie it is not shared on a server or something, and only one person (me) has committed into it. Now i want to share the repo, but there is a problem:</p>

<p>Too much information is encoded in form of commit-timestamps. Others could reconstruct when and for how long i was working on the repository.</p>

<p>This is  violation of our policy, apparently.</p>

<p>So i am looking for a way to reset all timestamps in my repository to an invalid date.</p>

<p>I tried some trickery with branch filters, but it didnt quiet work out. :(</p>
","1","2766707","",""
"31424877","3383149","2015-07-15 08:08:40","3","2221","<git><ftp><git-branch><git-push><git-ftp>","How to push specific branch to ftp server with git-ftp","<h2>Context</h2>

<p>I'm using <a href=""https://github.com/git-ftp/git-ftp/tree/releases/0.9.x"" rel=""nofollow"">git-ftp</a> to upload my git files to my ftp server. In git, I have 2 branches: <code>development</code> and <code>production</code>. When I want to upload the <code>development</code> branch, I commit, push and then upload with the command:</p>

<pre><code>git ftp push --user &lt;user&gt; --passwd &lt;passwd&gt; &lt;ftp-server&gt;/development
</code></pre>

<hr>

<h2>Problem</h2>

<p>Let's say that I want to push my <code>production</code> branch into the <code>production</code> folder of my server, how could I tell git-ftp that it's this branch I want to push, and not my development one? I couldn't find an option for that in the <a href=""https://github.com/git-ftp/git-ftp/blob/releases/0.9.x/man/git-ftp.1.md"" rel=""nofollow"">man</a>. Example :</p>

<pre><code>git ftp push --user &lt;user&gt; --passwd &lt;passwd&gt; &lt;ftp-server&gt;/production --branch production
</code></pre>
","0","3383149","",""
"21441004","481059","2014-01-29 19:43:38","0","80","<git><svn><github><git-branch>","In git, do we checkout/pull branches in the same directory as the master?","<p>In SVN, after creating a branch, I generally checkout the branch to a separate directory on my system, i.e., trunk and branch don't share the same path.</p>

<p>In GIT, based on what I've been reading/trying, it seems like you checkout to switch to the new branch and pull the changes to the same directory.</p>

<p>It seems like magic to just type <code>git checkout &lt;master/branch_name&gt;</code> and end up with the right tree.</p>

<p>Is that true, or have I misunderstood something?</p>
","0","481059","",""
"21451236","2384366","2014-01-30 08:29:08","3","459","<git><git-branch><git-merge>","Proper way of working with and merging git branches","<p>I read a lot of articles, but still this is not clear to me. Let say I have project with two branches: master and dev. Dev holds the development branch and master the stable branch - with code ready to release.</p>

<p><strong>Question 1:</strong></p>

<p>I want to add some feature to dev branch - so I create another branch based on dev - let's call it: Feature/1/Some-feature-description, this feature is a big one, so I split it into three different branches: Feature/1.1/Some-sub-feature-description, Feature/1.2/Some-sub-feature-description and Feature/1.3/Some-sub-feature-description</p>

<p>So I started to work on feature 1.1, I have written some code, and in doing so, I have found a bug (not directly related to the sub feature 1.1 or the main feature 1), what should I do? I see few possible solutions:</p>

<ol>
<li><p>Switch back to my dev branch, create another branch (Fix/1/Some-fix-description), fix the problem, merge the Fix branch into dev branch, switch to Feature 1 (main feature branch) merge changes from dev, switch to sub Feature 1.1 merge changes from dev.</p></li>
<li><p>Fix the problem inside Feature 1.1 (or perhaps create another fix branch based on Feature 1.1, fix the problem there and merge it back to Feature 1.1 branch), when the feature is complete - merge it with big Feature 1 branch, and when that is complete, merge it with dev.</p></li>
</ol>

<p>Which is the proper (better) way to do it in single and multi developer project? Perhaps there is yet another way I'm not aware of?</p>

<p><strong>Question 2:</strong></p>

<p>After I have merged my Feature/1.1/ branch with Feature/1/, I found a bug in my Feature/1.1/ code, or I just want to make some changes there - is it OK, to switch back to Feature/1.1/, merge current Feature/1/ branch, make my changes and then merge them back to Feature/1/? Or should I create yet another branch based on current Feature/1/ code to do the changes ?</p>

<p>As always, thanks in advance for the answers.</p>

<p>Best regards.</p>
","0","2384366","",""
"21458759","3253469","2014-01-30 14:10:06","4","6187","<git><github><git-branch>","How to add multiple servers in git repository","<p>I want to add multiple git servers in my repository and to push data to 1 server and fetching it from another server.
I am new to git.</p>
","2","3253469","0","0"
"59273210","463213","2019-12-10 18:17:45","4","1664","<git><git-branch><git-diff><git-log>","git log to show commits different between two branches, including common ancestor","<p>When working on feature branches (e.g., <code>feature</code>) created off of our main (e.g., <code>master</code>) branch, I use the following git command to view a list of commits that have been added to the <code>feature</code> branch that are not on the <code>master</code> branch:</p>

<pre><code>git log --oneline master..HEAD
</code></pre>

<p>This outputs a nice short summary of the commits on <code>feature</code> that aren't on <code>master</code> (note, this command is run after checking out the <code>feature</code> branch):</p>

<pre><code>$ git log --oneline master..HEAD
1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
</code></pre>

<p>The problem is, it doesn't show the common ancestor commit on the <code>master</code> branch. What I would like is for the command to include one more line, that's the common ancestor commit, like this:</p>

<pre><code>1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
fb37d68 (master) fuzzy the wuzzy
</code></pre>

<p>I would expect that replacing <code>master</code> with <code>master~1</code> would include one commit prior to the common ancestor, and therefore include the common ancestor,</p>

<pre><code>git log --oneline master~1..HEAD
</code></pre>

<p>but whether I specify <code>master</code> or <code>master~1</code>, the log summary is always the same.</p>

<pre><code>$ git log --oneline master~1..HEAD
1ca070a (HEAD -&gt; feature) foo the bar
03a1047 baz the wuz
c9e8279 fop the sip
6ee6d6f up the ante
5812200 bop the binky
</code></pre>

<p><strong>My question is, how can I include the common ancestor commit in the log summary?</strong> Note that the common ancestor is not necessarily the tip of the <code>master</code> branch.</p>
","2","463213","",""
"13949093","769384","2012-12-19 09:22:55","5","6185","<git><rename><git-branch><gitolite>","git change default branch (gitolite)","<p>I've got a repository with branches: master and devel. Master is the default one. I want to rename master into prod and make it default (and push it to the server). How to do this?</p>

<p>Repository is hosted in gitolite (if it matters).</p>
","0","769384","0","0"
"21556589","3271445","2014-02-04 15:31:39","12","3207","<git><git-branch><githooks>","How to get remote branch name in git pre-push hook","<p>The documentation says:</p>

<blockquote>
  <p>Information about what is to be pushed is provided on the hook's
  standard input with lines of the form:</p>
  
  <p>&lt; local ref> SP &lt; local sha1> SP &lt; remote ref> SP &lt; remote sha1> LF</p>
  
  <p>For instance, if the command +git push origin master:foreign+ were run
  the hook would receive a line like the following:</p>
  
  <p>refs/heads/master 67890 refs/heads/foreign 12345</p>
</blockquote>

<p>how do I access those lines in the pr-hook script?</p>
","4","3271445","0","0"
"13954376","1852702","2012-12-19 14:21:28","26","29523","<git><git-branch><git-log>","How to show git log with branch name","<p>I try <code>git log</code> w/ <code>--decorate</code> and <code>--source</code> options. But still can not get the branch name of commit  <code>2f3cb60</code> and  <code>d7e7776</code>, Why?</p>

<pre><code>#git log 2f3cb60 --graph  --decorate --source --all --oneline
...
* | | | 1920ad5 refs/heads/gpio support gpio lib
| |/ /
|/| |
* | | 2f3cb60   2f3cb60 fix
* | | d7e7776   2f3cb60 fix
| |/
|/|
* | aa4dcfb     refs/remotes/origin/httpd support
* | cfc839d     refs/remotes/origin/httpd add folder
</code></pre>

<p>How do I show git log with branch name?</p>
","2","1852702","0","0"
"13954956","1916112","2012-12-19 14:53:02","2","173","<git><git-branch><git-remote>","How do I determine the point (origin//????) for a particular branch with git","<p>On some development branches I need to use origin/master on others I need to use origin/dev.  I want to use some scripts to automate my work a little more, and I would like to know how to determine the origin string to use without having to pass it in as a parameter or have it set as an environment variable.</p>

<p>Using 'git remote show origin' gives me a bunch of output with the information I need near the end.  It says:</p>

<p>Local branch configured for 'git pull':
    mybranch merges with remote dev</p>

<p>Is there some way to do this without having to parse through all of the output for 'git remote show origin'?</p>
","0","1916112","0","0"
"2846843","289715","2010-05-17 05:31:16","13","17412","<git><commit><sha1><git-branch><blame>","Find the git branch or branches from commit id","<p>Actually am try to get a report on merge conflicts. I used 'git blame' to see who has changed what line, but i couldn't find the branch and repository name information.</p>

<p>Is there a way to find the repository name, branch name and author name of a file from 'git blame' or from commit ids' so that whenever a merge conflict occurs i can send an email to the authors who have touched that file/lines to resolve it.</p>
","1","289715","0","0"
"31488568","1236694","2015-07-18 06:39:28","1","1196","<git><github><repository><branch><git-branch>","git local repo caching deleted remotes/origin branches","<p>I have a local repo created with <code>git clone</code></p>

<p>I'm on branch <code>master</code></p>

<p>I perform <code>git pull</code> and then <code>git branch -a</code></p>

<p>The list of branches includes <code>remotes\origin\branch-x</code> when in fact <code>branch-x</code> has been deleted on GitHub.</p>

<p>How can I refresh my local repo branches cache to properly reflect the state on GitHub ? </p>
","0","1236694","",""
"2850369","256843","2010-05-17 15:26:16","667","164581","<git><git-branch><git-merge><fast-forward>","Why does git perform fast-forward merges by default?","<p>Coming from mercurial, I use branches to organize features.
Naturally, I want to see this work-flow in my history as well.</p>

<p>I started my new project using git and finished my first feature. When merging the feature, I realized git uses fast-forward, i.e. it applies my changes directly to the master branch if possible and forgets about my branch.</p>

<p>So to think into the future: I'm the only one working on this project. If I use git's default approach (fast-forward merging), my history would result in one giant master branch.
Nobody knows I used a separate branch for every feature, because in the end I'll have only that giant master branch. Won't that look unprofessional?</p>

<p>By this reasoning, I don't want fast-forward merging and can't see why it is the default. What's so good about it?</p>
","15","256843","0","0"
"10757332","397861","2012-05-25 15:36:47","1","158","<git><merge><git-branch>","How to merge my code with code coming from a different repository in git","<p>one month ago i started working on a new function on one of our private repositories on github. I cloned the repository and branched it. I've been working on the branch ever since.</p>

<p>In the meantime the code was moved to a different repository on github. Now i need to merge what i've done with the new developments that have been going on in the new one.</p>

<p>My idea:</p>

<p>1 - checkout the new repository. </p>

<p>2 - Find the last common commit in my repository and the new one. This should be the last  commit on the master branch.</p>

<p>3 - Create a patch between the master branch and my working branch.</p>

<p>4 - Apply the patch to the new repository.</p>

<p>Is this correct? What should be the git commands to do 3 and 4 ?</p>
","0","397861","",""
"28708670","3064442","2015-02-24 23:54:12","1","667","<git><github><git-branch><remote-branch>","Reset a git branch globally (for all users)","<p>In our current workflow, we have 2 main git branches:</p>

<p><code>master</code> - stable release branch</p>

<p><code>testing</code> - were everyone tests their code</p>

<p>Now every developer creates new branches for each feature they develop. When they are done, they merge it to <code>testing</code>, and when our QA says it's good to go, they merge their branch into <code>master</code> which gets deployed into production.</p>

<p>As time passes, our <code>testing</code> branch get polluted with commits that never make it to production. Abandoned features, stuff that got rewritten instead of fixed and other things.</p>

<p>To keep <code>master</code> and <code>testing</code> in a somewhat consistent state, we'd like to ""reset"" <code>testing</code> from time to time. Right now, we do so by entirely removing <code>testing</code> and re-branching it from <code>master</code>.</p>

<p>The big problem here is that we need to make sure that every single developer also remove his local <code>testing</code> branch and checks out a fresh copy of it.
If one developer forgets to do that and pushes to testing again, all the dirty commits that we are trying to get rid of are back.</p>

<p>Is there any way to reset a branch on the server in a way that it distributes to all users?</p>

<p>An acceptable solution would also be putting the <code>testing</code> branch in a state where nobody can push to it anymore without doing a reset locally. But I can't think of a way how to do it.</p>

<p>Creating a diff between <code>master</code> and <code>testing</code> and reverting commits is not an option as this prevents each of these commits to ever go into testing again.</p>

<p>Ideally, I'd have a script that performs this reset periodically and no interaction (other than <code>git pull</code>) is needed on each users local environment.</p>
","0","3064442","0","0"
"65494783","10664542","2020-12-29 15:43:33","1","111","<git><git-branch><git-tag>","In git s is possible to create a pointer to a tag that can later be moved to point to another tag?","<p>In git, is it possible to create a pointer to a tag that can be used like a tag itself, but be moved to point to another tag at a later date?</p>
<hr />
<p>Usage: for each release that gets deployed to production, we create a tag like: <code>release-some-identifier</code>  , and want a pointer simply called <code>release</code> that refers to the last release (will always refer to the last release),</p>
<p>and then on the next release, move it to point to the latest tag that was created with a new identifier.</p>
","5","10664542","",""
"65500970","11650728","2020-12-30 01:39:21","0","1607","<git><git-branch><iterm2>","number with special character next to git branch name in terminal (or iterm2)","<p>I'm a Mac user and use Iterm2 with zsh</p>
<p>When I open my git directory</p>
<p>next to my branch name, there is a <strong>special character</strong> with a <strong>number</strong></p>
<p>for example (my terminal)</p>
<p><code>~/projects/myProject | on git mybranch *1</code><br>
<code>~/projects/myProject | on git mybranch !1</code><br>
(As far as I guess, !1 is that a file in my directory is modified.)<br></p>
<p>I want to know what is the meaning of * and !  and also what number means.</p>
<p>and where can I find information on this special character?</p>
<p><a href=""https://i.stack.imgur.com/3RuqO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3RuqO.png"" alt=""enter image description here"" /></a></p>
<p>my prompt :</p>
<p><code>${$((_p9k_on_expand()))+}${(e)_p9k_t[7]}${_p9k__1-${${:-${_p9k__d::=0}${_p9k__rprompt::=${_p9k__1r-${${:-${_p9k__bg::=NONE}${_p9k__i::=0}${_p9k__sss::=}}+}${${:-${P9K_CONTENT::=}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=8}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+10}}${_p9k__n:=11}${_p9k__v::=&quot;✔&quot;}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rstatus+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}1}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}${_p9k__c}%b%K{236\}%F{070\}${${(M)_p9k__e:#11}:+ }$_p9k__v${${:-${_p9k__w::=%b%K{236\}%F{070\} %b%K{236\}%F{070\}}${_p9k__sss::=%b%K{236\}%F{070\} }${_p9k__i::=1}${_p9k__bg::=236}}+}}${${:-&quot;${${(%):-%j}:#0}&quot;}:+${${:-${P9K_CONTENT::=&quot;&quot;}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=12}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+14}}${_p9k__n:=15}${_p9k__v::=}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rbackground_jobs+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}1}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}${_p9k__c}%b%K{236\}%F{037\}${${(M)_p9k__e:#11}:+ }$_p9k__v${${:-${_p9k__w::=%b%K{236\}%F{037\} %b%K{236\}%F{037\}}${_p9k__sss::=%b%K{236\}%F{037\} }${_p9k__i::=3}${_p9k__bg::=236}}+}}}${${:-&quot;${${(%):-%#}:#\#}&quot;}:+${${:-${P9K_CONTENT::=%n@%m}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=16}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+18}}${_p9k__n:=19}${_p9k__c::=}${_p9k__e::=${${_p9k__1rcontext+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}%246Fwith %b%K{236\}%F{180\}${_p9k__c}%b%K{236\}%F{180\}${${:-${_p9k__w::=%b%K{236\}%F{180\} %b%K{236\}%F{180\}}${_p9k__sss::=%b%K{236\}%F{180\} }${_p9k__i::=29}${_p9k__bg::=236}}+}}}${${:-&quot;${${(%):-%#}:#\%}&quot;}:+${${:-${P9K_CONTENT::=%B%n@%m}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=20}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+22}}${_p9k__n:=23}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rcontext+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}%246Fwith %b%K{236\}%F{178\}${_p9k__c}%b%K{236\}%F{178\}${${:-${_p9k__w::=%b%K{236\}%F{178\} %b%K{236\}%F{178\}}${_p9k__sss::=%b%K{236\}%F{178\} }${_p9k__i::=29}${_p9k__bg::=236}}+}}}${${:-&quot;${${:-$_p9k__keymap.$_p9k__zle_state}:#(vicmd.*|vivis.*|vivli.*|*.*insert*)}&quot;}:+${${:-${P9K_CONTENT::=OVERTYPE}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=24}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+26}}${_p9k__n:=27}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rvi_mode+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}${_p9k__c}%b%K{236\}%F{172\}${${:-${_p9k__w::=%b%K{236\}%F{172\} %b%K{236\}%F{172\}}${_p9k__sss::=%b%K{236\}%F{172\} }${_p9k__i::=36}${_p9k__bg::=236}}+}}}${${:-&quot;${(M)${:-$_p9k__keymap$_p9k__region_active}:#vicmd0}&quot;}:+${${:-${P9K_CONTENT::=NORMAL}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=28}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+30}}${_p9k__n:=31}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rvi_mode+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}${_p9k__c}%b%K{236\}%F{106\}${${:-${_p9k__w::=%b%K{236\}%F{106\} %b%K{236\}%F{106\}}${_p9k__sss::=%b%K{236\}%F{106\} }${_p9k__i::=36}${_p9k__bg::=236}}+}}}${${:-&quot;${(M)${:-$_p9k__keymap$_p9k__region_active}:#(vicmd1|vivis?|vivli?)}&quot;}:+${${:-${P9K_CONTENT::=VISUAL}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=32}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+34}}${_p9k__n:=35}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rvi_mode+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}${_p9k__c}%b%K{236\}%F{068\}${${:-${_p9k__w::=%b%K{236\}%F{068\} %b%K{236\}%F{068\}}${_p9k__sss::=%b%K{236\}%F{068\} }${_p9k__i::=36}${_p9k__bg::=236}}+}}}${${:-${P9K_CONTENT::=10:17:25}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=36}}${_p9k__n:=${${(M)${:-x$_p9k__bg}:#x(236|236)}:+38}}${_p9k__n:=39}${_p9k__v::=}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1rtime+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}1}}}+}${${_p9k__e:#00}:+${_p9k_t[$_p9k__n]/&lt;_p9k__w&gt;/$_p9k__w}%246Fat %b%K{236\}%F{066\}${_p9k__c}%b%K{236\}%F{066\}${${(M)_p9k__e:#11}:+ }$_p9k__v${${:-${_p9k__w::=%b%K{236\}%F{066\} %b%K{236\}%F{066\}}${_p9k__sss::=%b%K{236\}%F{066\} }${_p9k__i::=40}${_p9k__bg::=236}}+}}$_p9k__sss%b%k%f}}${_p9k__lprompt::=${_p9k__1l-${${:-${_p9k__bg::=NONE}${_p9k__i::=0}${_p9k__sss::=%f}}+}${${:-${P9K_CONTENT::=}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=40}}${_p9k__n:=${${(M)${:-x236}:#x($_p9k__bg|${_p9k__bg:-0})}:+42}}${_p9k__n:=43}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1los_icon+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}0}}}+}${${_p9k__e:#00}:+${${_p9k_t[$_p9k__n]/&lt;_p9k__ss&gt;/$_p9k__ss}/&lt;_p9k__s&gt;/$_p9k__s}${_p9k__c}%b%K{236\}%F{255\} ${${:-${_p9k__s::=%F{236\}}${_p9k__ss::=%244F│}${_p9k__sss::=%F{236\}}${_p9k__i::=1}${_p9k__bg::=236}}+}}${${:-${P9K_CONTENT::=&quot;%{d%}${:-&quot;%B%F{039}&quot;}${(Q)${:-&quot;\~&quot;}}${:-&quot;%b%K{236}%F{031}&quot;}/${${${_p9k__d:#-*}:+WebstormProjects}:-${:-&quot;%F{103}&quot;}W${:-&quot;%b%K{236}%F{031}&quot;}${$((_p9k__d+=15))+}}/${${${_p9k__d:#-*}:+_personal}:-${:-&quot;%F{103}&quot;}_p${:-&quot;%b%K{236}%F{031}&quot;}${$((_p9k__d+=7))+}}/${:-&quot;%B%F{039}&quot;}react-app-practice${:-&quot;%b%K{236}%F{031}&quot;}%{d%}&quot;}${_p9k__n::=}${${${_p9k__bg:-0}:#NONE}:-${_p9k__n::=68}}${_p9k__n:=${${(M)${:-x236}:#x($_p9k__bg|${_p9k__bg:-0})}:+70}}${_p9k__n:=71}${_p9k__v::=}${_p9k__c::=&quot;${P9K_CONTENT}&quot;}${_p9k__e::=${${_p9k__1ldir+00}:-${${(%):-$_p9k__c%1(l.1.0)}[-1]}1}}}+}${${_p9k__e:#00}:+${${_p9k_t[$_p9k__n]/&lt;_p9k__ss&gt;/$_p9k__ss}/&lt;_p9k__s&gt;/$_p9k__s}${_p9k__v}${${(M)_p9k__e:#11}:+ }${_p9k__c}%b%K{236\}%F{031\} ${${:-${_p9k__s::=%F{236\}}${_p9k__ss::=%244F│}${_p9k__sss::=%F{236\}}${_p9k__i::=2}${_p9k__bg::=236}}+}}${(e)_p9k__vcs}%b%k$_p9k__sss%b%k%f${:-&quot; %b%k%f&quot;}}}}+}${(e)_p9k_t[6]}${${_p9k__h::=81.}+}${${_p9k__d::=$((_p9k__m-_p9k__h))}+}${_p9k__lprompt/\%\{d\%\}*\%\{d\%\}/${_p9k__1ldir-${:-&quot;%B%F{039}&quot;}${(Q)${:-&quot;\~&quot;}}${:-&quot;%b%K{236}%F{031}&quot;}/${${${_p9k__d:#-*}:+WebstormProjects}:-${:-&quot;%F{103}&quot;}W${:-&quot;%b%K{236}%F{031}&quot;}${$((_p9k__d+=15))+}}/${${${_p9k__d:#-*}:+_personal}:-${:-&quot;%F{103}&quot;}_p${:-&quot;%b%K{236}%F{031}&quot;}${$((_p9k__d+=7))+}}/${:-&quot;%B%F{039}&quot;}react-app-practice${:-&quot;%b%K{236}%F{031}&quot;}}}${${_p9k__m::=$((_p9k__d+_p9k__h))}+}}${${COLUMNS::=$_p9k__clm}+}</code></p>
","0","11650728","",""
"65527930","997147","2021-01-01 07:20:59","0","80","<git><git-branch><git-checkout><git-diff>","How to ignore a fixed set of changes from a commit without adding to gitignore (read the details)?","<p>So there are many times that while working with git I follow this process:</p>
<ol>
<li>Clone a project and perform it's setup.</li>
<li>The setup/install process creates new files which maybe configurational files specific to my environment (that aren't gitignored) or modifies existing &quot;core&quot; files in the process of the setup of the project. These changes/files are essential to run the project but should not be checked into the repo and were coded specifically that way so that these should NOT be checked in ever coz it maybe sensitive.</li>
<li>I make a branch called feature-newfeaturename and then start my feature development. At this point there are several unstaged changes/files from step 2 and I work on top of that.</li>
</ol>
<p>Now when I finish developing the feature, I want to checkin merely the changes I made excluding the files. Normally what I do is that at the end of step 2, I do a <code>git diff &gt; setup-changes.txt</code> and then use that file as reference at the end.</p>
<p>When I'm done with my feature development, I literally do git checkout <code>each-file-name-in-the-list</code>, followed by <code>git add .</code> and <code>git commit</code> and then make the PR--this way it merely PRs in my changes only.</p>
<p>This works fine for now but isn't efficient and I feel there might be a better way?</p>
<p>And another issue is, sometimes my changes include changes to the core files which conflict with the changes made in step 2. So when I do a git checkout in the end, my changes would be erased and therefore I have to manually diff out the changes I made, do a checkout of the file with the original core (that excludes the setup changes) and then manually use the diff to find and add my changes alone.</p>
<h2>Again this is counterintuitive and wish there is a better process. Is there? If so how?</h2>
<p>To simplify this question, let me provide an example:</p>
<ol>
<li>There's a file main.txt which simply has the word 'apples' and is part of &quot;first commit&quot; in the main branch.</li>
<li>Then I do a <code>git checkout -b setup</code> and add <strong>bananas</strong> which is the configuration changes and perform a commit.</li>
<li>Then I do a <code>git checkout -b feature</code> from setup branch and add <strong>oranges</strong> making the file have apples, bananas and oranges. So the new feature is addition of <strong>oranges</strong>.</li>
</ol>
<p>Now what I want to do is simply get the diff between first and last i.e. I want to be able to have just apples and oranges in my final commit and then push that as the second commit to my main branch.</p>
","2","997147","",""
"47301203","2194805","2017-11-15 06:58:45","0","269","<git><git-branch><githooks>","git hooks / pre-receive - how to get all the commit messages on a newly created branch?","<p>i' d like to get all the commit messages (like with git log --format=%s) on a newly created branch. Let' s suppose i' ve 2 commits:</p>

<pre><code>abcd - from yesterday
bcde - from today
</code></pre>

<p>. With this code:</p>

<pre><code>while read old new ref; do
    ....
done
</code></pre>

<p>old will be 40 zeros, and new will be bcde. How can i get all the commit messages in this case?</p>

<p>Usecase:</p>

<pre><code>git checkout master
git checkout -b new_branch
some_work
git add; git commit
some_other_work
git add; git commit
git push origin new_branch
</code></pre>

<p>.</p>

<p>Many thanks.</p>
","0","2194805","",""
"47306784","2058424","2017-11-15 11:56:10","2","483","<git><git-branch><git-detached-head>","How to list git branches when in detached HEAD state?","<p>Normally, I can list local branches with <code>git branch</code>, and remote branches with <code>git branch -r</code>. However, these commands don't work with detached HEAD 
- I get <code>fatal: HEAD does not point to a branch</code> (presumably because git branch tries to determine current branch so that it can mark it with an asterisk).</p>

<p>What's the best way of getting branch information when I'm in detached HEAD? Note that I'd like to get output in the same format, including coloring.</p>
","3","2058424","0","0"
"29100626","509205","2015-03-17 13:41:48","2","636","<git><git-branch><git-rebase>","git branch is behind master for too many commits -- most efficient way to rebase?","<p>when I do <code>git rebase master</code>, I have to resolve conflicts against every single commit I was behind of. it's a pain. </p>

<p>Is there a way to do it the SVN style -- I only compare against the latest snapshot, then resolve the conflict once and for good. </p>
","0","509205","",""
"11212328","585913","2012-06-26 16:59:03","1","399","<git><git-branch><branching-and-merging>","can not get new branch from github","<p>my co-worker has just create a new branch in the git repository which we have been working for a while. but in my local repository, I am having a hard time to get the new branch and merge it into my local repos. I found this post: <a href=""https://stackoverflow.com/questions/8889753/git-branch-not-showing"">Only master branch is visible after cloning a Git repo</a>, but it did not work for me.</p>

<ul>
<li>when I try <code>git branch -r</code>, I don't see the new branch name listed, </li>
<li>when I try <code>git fetch</code>, it says no remote repos specified,</li>
<li>when I try <code>git fetch newbranchname</code>, it says <code>newbranchname</code> does not appear to be a repos,</li>
<li>when I try <code>git chechout newbranchname</code>, it says <code>newbranchname</code> did not match
any file known to git.</li>
</ul>

<p>what else can I try? please kindly help me, thanks a lot.</p>
","2","585913","",""
"29128788","2433179","2015-03-18 17:28:32","3","743","<git><git-branch><rm>","Will git rm -f <file> remove the file from another branch","<p>I work in many branches and have pulled a file from one branch (<code>branchA</code>) to the current one (<code>branchB</code>).</p>

<p>I used <code>git checkout file.name</code></p>

<p>I would like to remove <code>file.name</code> from branchB without modifying <code>branchA</code>. Will <code>git rm -f file.name</code> remove the file from just <code>branchB</code> or will it remove it from branchA as well?</p>
","0","2433179","",""
"47371365","1326147","2017-11-18 21:42:17","0","129","<git><github><version-control><git-branch><git-push>","What differences are there in these git delete branch methods?","<p>From <a href=""https://help.github.com/articles/pushing-to-a-remote#deleting-a-remote-branch-or-tag"" rel=""nofollow noreferrer"">help.github.com</a> <code>git push</code> can be used in the following way to delete a remote branch:</p>

<pre><code>git push  &lt;REMOTENAME&gt; :&lt;BRANCHNAME&gt;
</code></pre>

<blockquote>
  <p>(...) you're telling Git to push nothing into BRANCHNAME on REMOTENAME. Because of this, <code>git push</code> deletes the branch on the remote repository.</p>
</blockquote>

<p>However from <a href=""https://git-scm.com/docs/git-branch#git-branch-Deleteanunneededbranch"" rel=""nofollow noreferrer"">git-scm.com</a>, this also deletes a remote branch:</p>

<pre><code>git branch -d -r &lt;REMOTENAME&gt;/&lt;BRANCHNAME&gt;
</code></pre>

<p>Adding that:</p>

<blockquote>
  <p>The next fetch or pull will create [it] again unless you configure [it] not to.</p>
</blockquote>

<p>So would it be preferable to use one of these methods in a particular situation, or do they basically end up doing the same thing?</p>

<p>(Bonus point for examples:)</p>
","2","1326147","",""
"65923031","1391441","2021-01-27 16:13:23","3","2667","<git><git-branch><git-commit><git-stash>","Moving uncommitted changes to a new branch: git: stash vs checkout","<p>I've done some changes to my code in <code>branch1</code>, but now I need to move those changes to another branch.  Graphically, I have:</p>
<pre><code>master
  |___develop
         |___branch1
</code></pre>
<p>and I need to move all the <strong>uncommitted changes and untracked files</strong> to a new branch <code>branch2</code> (which does not exist):</p>
<pre><code>master
  |___develop
         |___branch1
         |___branch2
</code></pre>
<p>after which I'll just delete <code>branch1</code> since all its changes are already pushed, and be left with all the uncommitted changes and untracked files in <code>branch2</code>:</p>
<pre><code>master
  |___develop
         |___branch2
</code></pre>
<p>There are quite a few of similar questions in SO but I'm still not sure how I should proceed in my case. Some say to use <code>git stash</code> (<a href=""https://stackoverflow.com/q/556923/1391441"">How do I merge my local uncommitted changes into another Git branch?</a>, <a href=""https://stackoverflow.com/q/7217894/1391441"">moving changed files to another branch for check-in</a>) which in my case I guess would be:</p>
<pre><code>git stash -u
git checkout develop
git checkout -b branch2
git stash pop
</code></pre>
<p>but other answers (<a href=""https://stackoverflow.com/q/4746672/1391441"">Put current changes in a new Git branch</a>, <a href=""https://stackoverflow.com/q/13687334/1391441"">Moving uncommitted changes to a new branch</a>) say to simply use <code>checkout</code> as:</p>
<pre><code>git checkout -b branch2
</code></pre>
<p>but I'm not sure if this will carry my untracked files too. There's a newer answer that recommends using <code>switch</code> (<a href=""https://stackoverflow.com/q/1394797/1391441"">Move existing, uncommitted work to a new branch in Git</a>), but my <code>git</code> version  2.17.1 does not have this command.</p>
<p>Any help will be much appreciated.</p>
","3","1391441","0","0"
"11742306","220474","2012-07-31 14:21:15","3","114","<git><git-branch><git-merge>","Is it possible to have git automate resolution of a certain kinds of merge conflicts","<p>We have two branches X and Y that have been branched at this point:</p>

<pre><code>test.txt
dir/a.txt
dir/b.txt
</code></pre>

<p>Now branch X introduces some changes into dir/a.txt and a commit is created. Branch Y makes a commit where dir/ gets deleted. </p>

<p>Then we want to merge X into Y. This will create a certain kind of ""deleted-changed"" conflict. Is it possible to instruct git to always ""use ours"" when it detects this specific conflict for the specific branch (Y) and a specific set of files (dir/*) ?</p>
","1","220474","0","0"
"11797904","347181","2012-08-03 14:39:36","50","28902","<git><version-control><git-branch><git-squash>","git merge squash and recurring conflicts","<p>I have a git repository with <code>master</code> and <code>alt</code> branches. <code>alt</code> branch contains modified version of <code>master</code> code, and i am trying to merge changes from <code>master</code> to <code>alt</code> like this:</p>

<pre><code>git merge --squash master
</code></pre>

<p>Merge results in conflict:</p>

<pre><code>Auto-merging myproject/foo/bar
CONFLICT (content): Merge conflict in myproject/foo/bar
Squash commit -- not updating HEAD
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>

<p>After I resolve conflicts and commit changes everything seems fine, but when i run <code>git merge --squash master</code> again (without doing any changes on any branches) i will get same conflict error.</p>

<p>Why is that? What did i miss?</p>
","1","347181","0","0"
"29486614","3131618","2015-04-07 07:58:22","4","898","<git><ruby-on-rails-4><ubuntu-14.04><git-branch>","List branches of particular remote in git","<p>I have added multiple remote in one project.
How can check specific branch and push code on that remote with branch.</p>

<p>For Example.</p>

<pre><code>origin  https://example1@bitbucket.org/username/repo.git (fetch)
origin  https://example1@bitbucket.org/username/repo.git (push)
stash   http://example2@stash.xyz.com/scm/omed/repo.git (fetch)
stash   http://example2@stash.xyz.com/scm/omed/repo.git (push)
</code></pre>

<p>Here two remote added.
currently i got only origin branch not stash branch.</p>

<p>I want to list all the branches for particular remote.</p>

<p>When I do  the <code>git branch -a</code> I only see branches from origin</p>

<p>I need command for listing down stash remote branches.</p>
","9","3131618","0","0"
"66209755","13014535","2021-02-15 14:22:40","6","5686","<git><github><git-branch>","How do i create git branch and switch at a time when creating a branch","<p>I am creating a branch with this command</p>
<pre><code>git branch my-branch
</code></pre>
<p>and switch a newly created branch with another command</p>
<pre><code>git checkout my-branch
</code></pre>
<p>Any idea about creating a branch and switch with one command</p>
","0","13014535","0","0"
"11873527","494143","2012-08-08 21:34:21","14","10239","<git><version-control><dvcs><git-branch>","Benefits of using git branches vs. multiple repositories","<p>We are doing development for automation code.</p>

<p>Our code automates the company's products and is <strong>synced</strong> to a particular product version.</p>

<p>Currently, we have 1 big Git repository with multiple branches in it - v1.0, v1.1, v2.0 (automation for version 1.0 goes in v1.0 branch, and so on).</p>

<p><strong>What are the advantages and disadvantages of having these in a single repository with branches vs. keeping each version code in a separate repository ?</strong></p>

<p>Both solutions can work, the answer i'm looking for is a <strong>list of pros/cons for either approach.</strong></p>

<p>I know that many teams are using branches to isolate temporary stages in development, such as doing a bug fixes or a new feature, merging back the work into the main development branch in the end.</p>

<p>Other modes of work i know are having different branches for development, release, etc, to separate ""cleaner"" revisions of the code from dirty ones that are constantly being worked on.</p>

<p>None of these sound similar to what we are currently doing though.</p>

<p>*Note that some modifications in a particular version we make are relevant for all product versions, while some are not.</p>
","2","494143","0","0"
"29527630","33080","2015-04-09 00:24:44","0","61","<git><git-branch>","Why doesn't git update my remote tracking branch?","<p>I have a checkout with two branches. One of them is the main branch in the ""origin"" remote, and is set up to track that (or so I believe). The other is the active branch, and only exists in this checkout.</p>

<p>Here's the output of <code>git branch -vv</code>:</p>

<pre><code>  Official    9b44ada [origin/Official: behind 5] &lt;commit message&gt;
* MyBranch    aecc225 &lt;commit message&gt;
</code></pre>

<p>When I do a <code>git fetch</code>, the output is empty (I do believe I've got all the changes from there), but the <code>Official</code> branch remains like that: behind by 5 commits.</p>

<p>If I try a <code>git pull</code>, the fetch phase is similarly blank, and then I'm warned that there is no tracking information for <code>MyBranch</code> (which is expected).</p>

<p>Why isn't <code>git fetch</code> updating the remote tracking branch <code>Official</code>, and how do I get it to update?</p>
","0","33080","",""
"11872984","241142","2012-08-08 20:52:23","94","51464","<git><git-branch><git-push>","What is the difference between git push.default=current and push.default=upstream?","<p>The man page for git-config lists these options for push.default:</p>

<pre><code>nothing - do not push anything.
matching - push all matching branches. All branches having the same name in both ends are considered to be matching. This is the default.
upstream - push the current branch to its upstream branch.
tracking - deprecated synonym for upstream.
current - push the current branch to a branch of the same name.
</code></pre>

<p>In most cases I would assume that pushing to a branch's upstream branch would be the same as pushing to a branch of the same name, since the upstream branch would normally have the same name, and since the branch of the same name (""current"") would normally (or always, by definition?) be upstream.  So what's the difference?</p>

<p><em><strong>UPDATE</em></strong>: <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-config.html"">The man page for git-config</a> has been updated (as one would expect), so the distinctions made <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-config.html"">there</a> may be a lot clearer now.</p>
","3","241142","0","0"
"29532018","1095451","2015-04-09 07:10:02","1","1280","<git><git-branch><git-clone><git-bare>","git clone doesn't import all remote branches","<p>After I clone from a bare git repository, my imported local repository doesn't have all the branches in it. Following is the architecture.</p>

<p><img src=""https://i.stack.imgur.com/4MN2C.png"" alt=""enter image description here""></p>

<p>Here are the steps how this bare repository came into being.</p>

<ol>
<li>I had an existing repository (<strong>a</strong> in the figure). I did some branch
filtering within this branch to rule out some useless directories.</li>
<li>Created a new empty bare repository (<strong>b</strong> in the figure) using <code>git init --bare new_repo.git</code></li>
<li>In the <strong>a</strong> local repository, I changed the remote URL using <code>git remote set-url origin /path/new_repo.git</code>.</li>
<li>Pushed the content of <strong>a</strong> to <strong>b</strong> using the command <code>git push origin '*:*'</code> and got success.</li>
<li>At this stage running the command <code>git branch -r</code> shows all the remote branches correctly.<img src=""https://i.stack.imgur.com/yK3s5.png"" alt=""git branch -r""></li>
<li>Now when I clone <strong>b</strong> (bare repository), the cloned local repository (<strong>c</strong> in the figure) gets created and it has the correct directory structure. But the problem is that when I try to list all the remote branches using <code>git branch -r</code>, it lists only the <strong>master</strong> branch.<img src=""https://i.stack.imgur.com/cO1aA.png"" alt=""git branch -r""></li>
</ol>

<p>Why doesn't the cloned repository have all the remote branches and how can I have all those imported?</p>
","5","1095451","",""
"29531591","1602944","2015-04-09 06:46:05","0","109","<git><git-branch>","git how to undo Merge branch 'master' of repo into develop branch","<p>I was working with the develop branch and made the commit. </p>

<p>And then, I was supposed to do a  <code>git pull origin develop</code> - instead I accidentally did this <code>git pull origin master</code></p>

<p>Then, I saw this message <code>Merge branch 'master' of repo into develop branch</code></p>

<p>Is there anyway I can undo this ? </p>
","0","1602944","",""
"29550547","4771379","2015-04-09 23:03:09","0","339","<git><version-control><merge><git-branch><branching-and-merging>","git - merge two divergent branches ignoring some directories","<p>Short story: I want to tell git to ignore a directory when merging. I know git doesn't work that way...</p>

<p>Long Story:
I have a project that will be deployed on two different platforms. Every platform needs some tweaks to the code for the deploy.</p>

<p>I have two branches, one for every platform: PlatformA and PlatformB. The two branches are practically identical. The only difference is in a couple of files and a directory that needs to be present on one platform but not on the other. This is the scenario:</p>

<pre><code>PlatformA branch:
 - dir1
   - file1
 - dir2
   - file2

PlatformB branch:
 - dir1
   -file1
</code></pre>

<p>The problem appears when I'm working on platformA and make changes to file1. I want these changes to also be available on platformB. The problem is when I do the merge, git adds dir2 and file2 to platformB.</p>

<p>I also want to be able to work on platformB and make changes to file1 and be able to merge to platformA without git removing dir2 and file2.</p>

<p>So the question is:
There is any way to have two mergeable divergent branches?
OR
There is a way to tell git to ignore a directory/commit?</p>

<p>I have tried this <a href=""https://stackoverflow.com/questions/727994/git-skipping-specific-commits-when-merging"">solution</a> but only works when merging ProjectB->ProjectA, not the other way around (git copies dir2 and file2 onto ProjectB).</p>

<p>Also, I think I can cherry-pick every time, but that just seems cumbersome and prone to erros.</p>

<p>Thanks in advance!</p>
","1","4771379","",""
"29574432","4776135","2015-04-11 05:25:15","3","3451","<git><git-branch>","How to push only current branch from local to remote repo in git?","<p>My local repo has 2 branches: <code>master</code> and <code>doing</code>, I only create commits in <code>doing</code> branch and when I finish the project, I merge it to <code>master</code> branch. When I checkout <code>master</code> branch and push to the remote repo, 2 branches are pushed to the remote. How can I push only <code>master</code> branch to remote repo in order that, commits in <code>doing</code> branch are not appear on remote repo?</p>
","1","4776135","",""
"11939056","907060","2012-08-13 17:11:24","1","293","<git><heroku><git-branch>","Specify '--remote' Heroku app based on git branch","<p>Is it possible to to target an app version in Heroku based on the current Git branch? In the Heroku docs, its specifies how to target a a specific version of the app.</p>

<pre><code># run command on 'production'    
$ heroku run rake db:migrate --remote production
</code></pre>

<blockquote>
  <p>To make things easier, you can use your git config to specify a
  default app. For example, if you wanted “staging” do be your default
  remote, you could set it with the following command:</p>
  
  <p><code>$ git config heroku.remote staging</code></p>
</blockquote>

<p>It would make sense to have the local development branch push to the development app and the local production branch push to the production app.</p>
","0","907060","",""
"11982379","1184717","2012-08-16 07:17:12","4","1430","<git><branch><git-branch><gitignore>","Why doesn't .gitignore work across branches?","<p>Working on a local Git (cloned) repository, I have created a branch and placed <code>.gitignore</code> file within it to exclude few directories from <code>git commit</code>. It works just fine, but after switching to a different branch, those directories (the excluded ones) appear in it (on the branch which does not include those directories).</p>

<p>Is it a normal Git behavior? If so, what is the best practice to avoid the issue above?</p>
","0","1184717","0","0"
"29649776","1614973","2015-04-15 12:06:24","0","304","<git><github><git-branch><git-merge><git-rebase>","Optimal git workflow/strategy for pull requests to open source projects","<p>I am looking for clear, simple and optimal strategy for working on a public project, which includes: </p>

<ol>
<li>pulling recent changes</li>
<li>adding my work on top of the history</li>
<li>submitting pull request for review with clean history</li>
</ol>

<p>By <em>optimal</em> I mean a minimum number of steps, and most importantly -</p>

<p><strong>Maximal automation and minimal chance to create a conflict</strong>.</p>

<hr>

<p>In my setup I am working on my local <code>dev</code> branch. Say I decide it is ready for a pull request. What are my steps and what are rules to follow to stay out of troubles?</p>

<ol>
<li><p>I first need to make sure my most recent <code>commits</code> are on top of the current history. So I need to <code>rebase</code> my new commits on top of the most recent public changes. I don't want to <code>merge</code> to avoid additional <code>merge commit</code>, which is of no public interest:</p>

<p>git rebase origin/master dev</p></li>
<li><p>Now my new <code>commit</code> history is clean and sits on top of the most recent public <code>master</code> branch. I can't <code>push</code> it directly to the public <code>origin</code> as I don't have write access. Instead I push it to my <strong>forked remote repository</strong> on Github. But here is the question:</p></li>
</ol>

<p><em>To which remote branch should I push it?</em></p>

<p>The problem is the <strong>clean history</strong> - I want that remote branch to be exactly identical with my local <code>dev</code>. So the best candidate seems to be a <strong>new feature branch</strong> cloned from <code>origin/master</code>:</p>

<p><em>Any simple way of doing it on Github?</em></p>

<ol start=""3"">
<li>Now I have exact copy of <code>origin/master</code> in my forked repo as my new branch say <code>new-feature-x</code>. I need to update it to become exact copy of my local <code>dev</code> branch:</li>
</ol>

<p><em>What would be the simplest and most reliable way to do it?</em></p>

<ol start=""4"">
<li>So hopefully now I have branch <code>new-feature-x</code> on my forked repo that I can submit for a pull request to <code>origin</code> repo. Assuming (and hoping) there won't be any conflicts, that step is easy.</li>
</ol>

<p>So that would have a perfect strategy if having good answers to the above questions. </p>

<p>Any help is appreciated!</p>

<hr>

<p>EDIT.</p>

<p>Many sources refer to <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">A successful Git branching model</a>. However, this doesn't seem suitable for public projects with many collaborators. The public project may not even have a <code>development</code> branch or anything similar. And having such a branch on my local repo indefinitely could be a pain to update it with whatever pull requests are accepted/amended/rejected and so on. </p>

<p>Further, this model suggests keeping all merge records. But my internal merges are of no use to public, only adding unnecessary overhead. As mentioned above, I want to make a Pull Request with <strong>clean history</strong> to make the <em>job of maintainers as easy as possible</em>.</p>

<hr>

<p>I have found the following command extremely useful before any <code>push</code>:</p>

<pre><code>git pull --rebase upstream master
</code></pre>

<p>Here I am using <a href=""https://help.github.com/articles/adding-a-remote/"" rel=""nofollow"">remote</a> called ""upstream"" for the public repo (and ""origin"" for my own fork).</p>

<p>This command will pull the current state of the public repo's master branch and sync it with my local <em>feature branch</em> that I am about to submit for pull request. If there are any conflicts, I can see and resolve them all at this stage - conveniently on my local machine.</p>

<p>Having done that, there is much less chance to get conflicts when making the actual pull request.</p>
","0","1614973","",""
"29677065","343204","2015-04-16 14:00:46","1","71","<git><git-branch>","List merged and unmerged git branches by time","<p>When I run <code>git branch</code> I get:</p>

<pre><code>A 
B
C
D
E
F
</code></pre>

<p>What I'd like to see is something like this:</p>

<pre><code>Merged                                    Unmerged
A *                                       F
C                                         E
D                                         B
</code></pre>

<p>Where the <code>*</code> shows the current branch and where the branches are listed in time order (i.e. most recent first). </p>

<p>I'm aware of various git GUIs but I'd just like a simple listing like this.</p>

<p>Is this possible and, if so, how?</p>
","6","343204","0","0"
"29693489","1242842","2015-04-17 07:58:03","0","1649","<git><git-branch>","git log branch1..branch2 (two dots) vs. git log branch1...branch2 (three dots)?","<p>I've read the latter compares the branches starting from their ancestor. What exactly does that mean?</p>
","0","1242842","",""
"29702692","1095451","2015-04-17 14:56:03","2","122","<git><git-branch><git-diff>","How to find out what files were changed in a git branch (not the difference between two branches)","<p>I have a branch named <code>feature_219</code> which was created from <code>master</code> a little while ago. Since the diversion, there were a number of files changed on both the branches.</p>

<p>Now I am trying to figure out what files where changed while working on the <code>feature_219</code> branch only.</p>

<p>After doing some research I found out that <code>git diff --name-only master feature_219</code> might help but it turned out that this commands tells about all files that are different in both the branches. I tried to look for some option with this command but nothing worked for me.</p>

<p>Is there any way to list only those files that were changed in <code>feature_219</code> branch?</p>
","2","1095451","0","0"
"12571707","135917","2012-09-24 19:37:08","1","183","<git><branch><git-branch>","git: track a remote branch not on origin","<p>My situation is thus:</p>

<p>I do work on two different machines, both of which track a repository (<strong>origin</strong>) cloned from another source (git.domain_name).</p>

<p>One one machine, <strong>my_machine1</strong>, I've created a branch to add some functionality, we'll call it <em>myFoo</em>.</p>

<p>One the other machine (<strong>my_machine2</strong>), I'd like to track (and be able to update and push to <strong>my_machine1</strong>) the <em>myFoo</em> branch.</p>

<p>On <strong>my_machine2</strong>, I've done <code>git remote add my_machine1 my_user@my_machine1:/path/to/common/repo</code></p>

<p>But if I do a <code>git branch -a</code> I don't see any branches from <strong>my_machine1</strong>, only from <strong>origin</strong>. I can see branches on <strong>my_machine1</strong> if I do a <code>git ls-branch my_machine1</code>. Pushing <em>myFoo</em> to origin is not an option.</p>

<p>Is there some way to track/share the <em>myFoo</em> branch between <strong>my_machine1</strong> and <strong>my_machine2</strong>?</p>
","0","135917","",""
"30212222","3084228","2015-05-13 10:30:54","0","55","<git><branch><git-branch>","git pulled branches history","<p><em>This is <strong>NOT</strong> duplicate ... Please read it thoroughly.</em> </p>

<p>If I am at branch <code>part-5</code> and I pulled 3 branches like</p>

<pre><code>git pull origin part-1
git pull origin part-2
git pull origin part-3
</code></pre>

<p>Is there any command in git so that I can check that which branches I have pulled so far <strong>into</strong> <code>part-5</code>/current-branch ?</p>

<p><strong>NOTE:</strong> I am <strong>NOT</strong> talking about creating I am talking about which branches are been pulled within current or <code>part-5</code> so far ... Just want the list of those branches. Hope you understand. Thanks</p>
","2","3084228","",""
"12596767","1542339","2012-09-26 07:35:03","2","13884","<git><version-control><git-branch><git-diff><git-checkout>","why i cannot checkout another git branch?","<pre><code>$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/lab_master
  remotes/origin/master

$ git checkout lab_master
error: Your local changes to the following files would be overwritten by checkou                                                                                                                           t:
        **project.properties**
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>

<p>why i just failed to checkout lab_master branch?</p>

<p>another question: why i cannot compare current file with the file in another branch?</p>

<pre><code>$ git diff project.properties -b lab_master
fatal: bad flag '-b' used after filename
</code></pre>
","0","1542339","0","0"
"30227504","3639557","2015-05-14 00:41:45","0","1615","<git><git-branch>","how to compile and run two git branches","<p>I have two separated branches in git, and one of them is generating the correct output, while the other one which is another way of doing the same procedure is not. I keep jumping between the branches, and modify and then things on one branch and compare it with the stuff on the other branch. Is there way to compile and run them in parallel without moving back and forth between them (using git checkout, etc)?</p>
","0","3639557","0","0"
"30256062","1084075","2015-05-15 09:32:24","1","126","<xcode><git><git-branch>","Updating project changes in an old commit - git","<p>I have a particular commit for my Xcode Project. I need to undo the settings change, that I made in that particular commit (not the previous commit). How do I go about this? I can update the project settings only from the Xcode project but not using the diff file. Can anyone tell me how to approach this issue?</p>
","0","1084075","",""
"21586980","3242743","2014-02-05 19:44:41","0","70","<git><github><git-branch>","Deleting pushes on github","<p>I pulled code from Github (commit #5) and worked on it, but in the mean time, other guys pushed commit #6 and #7 to Github. We decided to take only my work in consideration, which means that we don't need commits #6 and #7 anymore.</p>

<p>What can I do to delete the pushes of commits #6 and #7 from Github?</p>
","4","3242743","0","0"
"18891794","2028547","2013-09-19 10:05:23","50","72870","<git><version-control><git-branch><remote-branch>","git pull all branches from remote repository","<p>How do I pull all of the remote branches to my own repository?</p>

<p>if I type:</p>

<pre><code>git branch -a
</code></pre>

<p>I get a long list of branches, but if I type:</p>

<pre><code>git branch 
</code></pre>

<p>I see only 2 of them.</p>

<p>How do I pull <strong>ALL</strong> branches into my local list?</p>

<p>I know I can do:</p>

<pre><code>git checkout --track origin/branch-name
</code></pre>

<p>but that pulls and checks out only one branch at a time. Any way to get it all done at once without that whole tedious work of running <kbd>git checkout --track origin/branch-name</kbd> over and over and over again?</p>

<hr>

<p>ps.
I tried following commands, none of them made remote branches appear in my <kbd>git branch</kbd> list:</p>

<pre><code>git fetch --all
git remote update
git pull --all
</code></pre>
","6","2028547","0","0"
"35364079","1695592","2016-02-12 13:40:19","0","36","<git><git-branch><branching-strategy>","Should Patches have own branch in git workflow?","<p>I am reading <a href=""https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow#"" rel=""nofollow"">here</a> about git branching strategie. Where to assign patches? should patches have their own branch? If yes where should patches branched from? from master branch?</p>
","0","1695592","",""
"48519439","1157814","2018-01-30 10:42:19","0","68","<git><git-branch><git-remote>","How to see all past branches in the git remote?","<p>I would like to list all branches, even those what already removed in a remote (origin). The main point that I would like to see event the removed ones</p>

<p>It would be OK just to see branch the names, but ideally the creation date and some other metainfo would be great like user name who created the branch.</p>

<p>I've found many related Q and A but neither lists the already removed branches. I am a newbie in git, so I do not know even is this possible, but I hope.</p>
","3","1157814","",""
"18907689","1769790","2013-09-20 01:48:43","12","20073","<git><git-branch><git-pull><git-fetch>","Issue with git pull master is out of sync with origin master","<p>These are the sequence of steps I have performed:</p>

<ol>
<li>committed my changes in branch to local master (commit id <code>dc9afg2k</code>)</li>
<li><code>git fetch origin master &amp;&amp; git merge origin master</code></li>
<li><code>git checkout master</code> </li>
<li><code>git pull</code> (this pulled all recent changes)</li>
<li><code>git fetch origin master &amp;&amp; git merge origin master</code></li>
<li><code>git reset --hard origin/master</code></li>
<li><code>git checkout branch</code> </li>
<li><code>git blog</code> 
<li><code>git reset --hard dc9afg2k</code> (commit successful) </li>
<li><code>git checkout master</code></li>
<li><code>git log</code> (this was gone back to 2 days ago).</li>
<li><code>git pull</code> (<code>master</code> is not updating with current <code>origin/master</code>).</li>
</ol>
","0","1769790","0","0"
"51046423","5576434","2018-06-26 15:22:33","0","41","<git><branch><git-branch><branching-and-merging>","Remove prepended commits from previous git branch","<p>Working on a project we messed up the syncing while changing between branches. At first there was one feature branch <code>foo</code>, this got rebased to master, however, locally master was not synced, so when moved to a new branch, <code>bar</code>, all the commits from the previous one were prepended to new branch as well. The git tree looks something like this:</p>

<pre><code>Master =&gt;  A--B--C--D--E--Merge
               \-C--D--E-/-F--G--H   &lt;= Bar
                  Foo
</code></pre>

<p>My goal is to remove <code>foo</code> completely, since it is already rebased to master, and have something like:</p>

<pre><code>Master =&gt;  A--B--C--D--E
                        \-F--G--H    &lt;=Bar
</code></pre>

<p>EDIT:</p>

<p>So it seems that this is more messy then I taught. Also, I am not that versed in git, and cannot conclude what exactly even happened. I'll go now in as much detail as I can.</p>

<p>Teammate and I are working on a project. To implement one feature, we created a separate branch <code>foo</code>.</p>

<pre><code>A -- B &lt;-- (master)
      \
       C -- D -- E &lt;-- (foo)
</code></pre>

<p>After finishing the feature, I rebased the <code>foo</code> to <code>master</code>. And the tree now looked like this:</p>

<pre><code>A -- B -- C -- D -- E &lt;-- (master)
</code></pre>

<p>New feature needed to be implemented, and thus new branch <code>bar</code> opened.</p>

<pre><code>A -- B -- C -- D -- E &lt;-- (master)
                     \
                      F -- G -- H &lt;-- (bar)
</code></pre>

<p>This was all on my end. Now the teammate pushed his code, and I presume he didn't have some branches synced, and additionally had some conflicts that needed merging, but in the end, the git tree looks like this:</p>

<pre><code>A -- B -- C -- D -- E &lt;-- (master)
      \             | \
       C -- D -------- M1 ------ M2 -- I &lt;-- (bar)
                    \           /
                     F -- G -- H
</code></pre>

<p>Where:</p>

<ul>
<li>M1 stated: merge <code>master</code> into <code>foo</code></li>
<li>M2 stated: merge <code>bar</code> into <code>foo</code></li>
<li><code>I</code> is new teammate's commit</li>
</ul>

<p>Additionally, I am a bit confused by the message in M2, since it then means that we are left with <code>foo</code> in the end, but our tree only has <code>bar</code>.</p>

<p>I did try, as @Mark Adelsberger suggested, running <code>git rebase master bar</code>, but I immediately got merge conflicts on commit <code>C</code>, and I aborted the rebase. As per answer, it should automatically decide that those both <code>C</code>s are the same commit, and skip them, but this was not the case.</p>

<p>My goal is to flatten the tree if possible, meaning, getting rid of <code>C</code> and <code>D</code> in <code>bar</code> branch, and hopefully merging or putting <code>F</code>, <code>G</code> and <code>H</code> in the same line as <code>M1</code>, <code>M2</code> and <code>I</code>.</p>

<p>Going back to the issue, I see that my first post lacked quite a bit of detail. Hopefully this edit will clarify the problem which I'm facing. </p>
","0","5576434","0","0"
"59486568","455048","2019-12-26 09:44:46","1","211","<git><git-branch><git-submodules>","How to use `git submodules` to track a superproject by branching","<p>I have a superproject where I have added a number of projects as submodules. These projects are part of a microservices architecture.
The idea of using a superproject with (microservices) projects added as submodules is to be able to get all the projects in a single repository.</p>

<p>Another use case is to track the changes of all the projects.
The idea was to branch the superproject, such that each branch would create a sort of a 'snapshot' of all the projects at a given time.</p>

<p>However, I found that whenever I create a new branch and update the submodules (<code>git submodules update --remote</code>), all the branches of the superproject gets updated. This is expected, as submodules are merely a link to the original project.</p>

<p>Now my question is, is there a strategy for me to take snapshots of a superproject? The way we can branch off a single project, is there such a way to do it for a submodule superproject?</p>

<p>Thank you.</p>
","4","455048","",""
"21807396","3033990","2014-02-16 04:44:27","3","1979","<git><git-branch><git-remote>","How to set up a git development environment when you're testing remotely","<p>This may seem like a silly question, but I feel like I understand GIT fairly well, and yet I can't seem to set up my development environment as I would like.  I'm either missing something really simple, or I'm going about it all wrong :)</p>

<p>I initialized a bare git repo on my server, cloned it to my local machine, committed my files and pushed to origin.  Then, locally I created three branches (master, release, develop) and published them all to origin.  I intend to have multiple developers pulling from the develop branch, and I would like to make sure they can't push to the master branch but that may be better for a different question.</p>

<p>Now, I make my changes to the files locally, and then upload them to the testing server and check the testing server through the web browser.  I would have to imagine that this is how most people test their work unless they have their computers configured as web servers and have php and mysql installed.  Once I'm happy with my changes, I push them to the origin repo, and everything works fine.</p>

<p>My challenge comes in keeping the testing server in synch with my local machine.  I've tried setting up a repo in my remote testing directory, and I've added a second remote to my local git repo, hoping I could push to the testing repo to synch the files on the testing server with my local files.  But I can't figure out how to have two remotes and keep both of them in synch with my local machine.  </p>

<p>If I create a new local branch, check it out to start working on a new feature and then push the branch to my testing remote, the head on the testing remote is still master and not my new feature branch.  Therefore, i'm making changes locally to a feature branch, but when I publish the changes to the testing server through coda, I'm actually changing files on the master branch of the testing repo.  If I can't keep my testing snapshots in synch with my local snapshots, I don't know how to take full advantage of gits branching features.  </p>

<p>Is it really that crucial that I am developing AND testing locally?  How on earth does one set up a development environment with git when you have to test remotely?  Is having a testing repo the completely wrong way to think about this?  There must be a way to have multiple remotes and have them checkout to the latest branch that is pushed so you can have an instance of your local files in synch remotely on a testing server.  PLEASE HELP!</p>
","3","3033990","",""
"31651404","2255491","2015-07-27 11:02:45","4","73","<git><git-branch>","How to use git branches for project features?","<p>I'm working (alone) on a project that need several features to be added.
I'm used to create a branch for each feature. Once the feature is developed and well tested, I merge that branch-feature with the master branch.</p>

<p>Now, I started a feature (let's call it feature A) on <code>branch-A</code> that is not finished.
However, I urgently need to create a new feature B and push it before finishing feature A. That's why I created <code>branch-B</code> and switched to it.</p>

<p>However, running a <code>git status</code> command, I can see all the changed I made in the branch-A. I don't understand this default behaviour. I expected to see ""no change"" because they are different branches. I absolutely need that a commit in branch B ignores everything I dit in branch A.</p>

<p>What am I missing? How could I create the right workflow?</p>
","1","2255491","",""
"48628793","1067688","2018-02-05 18:07:58","0","662","<git><git-branch><macos-high-sierra>","macOS git branch displays branches in less","<p>I'm running <code>git</code> version 2.16.1 under macOS High Sierra 10.13.3 and when I
use <code>git branch</code>, the result is displayed through <code>less</code>. On the contrary, when I'm using <code>git branch</code> under Linux, the result is simply printed in stdout. How can I enforce git to work the same way it works in Linux?</p>

<p><code>git branch</code> under macOS:
<a href=""https://i.stack.imgur.com/FXnDi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FXnDi.png"" alt=""git branch uses less in macos""></a></p>

<p><code>git branch</code> under Linux:
<a href=""https://i.stack.imgur.com/DI7ZY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/DI7ZY.png"" alt=""enter image description here""></a></p>
","3","1067688","",""
"21822466","1957448","2014-02-17 06:45:14","0","108","<git><git-branch><git-log>","What is this git log --graph indicating?","<p>I have the following branches:</p>
<ul>
<li><p>master</p>
</li>
<li><p>upgadingToJquery1.4</p>
</li>
<li><p>handlingExceptions</p>
</li>
</ul>
<p>I was working on the <strong>upgradingToJquery1.4</strong> branch and had made a few commits.</p>
<p>I created another branch <strong>handlingExceptions</strong> made some changes and committed them.</p>
<p>Then I switched back to master and merged the <strong>handlingExceptions</strong> branch. Surprisingly I think the changes in <strong>upgradeToJquery1.4</strong> branch also got merged. Then to confirm I merged the <strong>upgradeToJquery1.4</strong> branch and it said up to date.</p>
<p>Can someone just explain what the graph is indicating here?</p>
<pre><code>git log --oneline --decorate --graph --all
    *   a54bd6d (HEAD, master) Merge branch 'upgradeToJquery1.4'
    |\
    | * d4f762c (upgradeToJquery1.4) main.sass updated
    * |   bcf7a4f Merge branch 'handlingExceptions'
    |\ \
    | * | 471c1ad (handlingExceptions) the postLogin method in the accountController catches the exceptions and now prov
    | |/
    | * 76145d1 1. css/images - Jquerymobile icon files
    | * 34bc7b9 custom-jqueryMobile.js - to override jquerymobile defaults. Currently added transitions doesn't work with p
</code></pre>
","1","1957448","",""
"66688529","13147529","2021-03-18 09:48:21","1","305","<git><git-branch>","Working with git stash with different branches","<p>I have two branches <code>feature/A</code> and <code>feature/B</code>. I have modified the files of <code>feature/A</code> and apply <code>git stash</code> command to save my work and <code>git checkout feature/B</code> to switch to other branch. Now on <code>feature/B</code> I have modified files and applies <code>git stash</code> to save the work at <code>feature/B</code>.</p>
<p>Now if I want to again reflect my changes I have to apply <code>git stash pop</code> but my question is the saved work of both the branches reflect at once when I apply <code>git stash pop</code> or the work is saved as per the branches (i.e. In <code>feature/A</code> the work of particular branch only reflects and in <code>feature/B</code> the work of particular branch is reflect)?</p>
","0","13147529","",""
"18994609","308237","2013-09-25 01:10:19","166","124436","<git><branch><git-branch>","How to 'git pull' into a branch that is not the current one?","<p>When you run <code>git pull</code> on the <code>master</code> branch, it typically pulls from <code>origin/master</code>.  I am in a different branch called <code>newbranch</code>, but I need to run a command that does a <code>git pull</code> from <code>origin/master</code> into <code>master</code> but I cannot run <code>git checkout</code> to change the selected branch until after the pull is complete.  Is there a way to do this?</p>

<p>To give some background, the repository stores a website.  I have made some changes in <code>newbranch</code> and deployed them by switching the website to <code>newbranch</code>.  Now those changes have been merged upstream into the <code>master</code> branch, I am trying to switch the website back to the <code>master</code> branch as well.  At this point, <code>newbranch</code> and <code>origin/master</code> are identical, but <code>master</code> is lagging behind <code>origin/master</code> and needs to be updated.  The problem is, if I do it the traditional way:</p>

<pre><code>$ git checkout master
   # Uh oh, production website has now reverted back to old version in master
$ git pull
   # Website is now up to date again
</code></pre>

<p>I need to achieve the same as above (<code>git checkout master &amp;&amp; git pull</code>), but without changing the working directory to an earlier revision during the process.</p>
","8","308237","0","0"
"19013485","1020575","2013-09-25 19:24:47","4","2112","<git><bash><git-branch>","bash show git branch as dirty all the time","<p>I am using a bash script that I found online somewhere, and it is everywhere, to display current git branch.</p>

<pre><code>function parse_git_dirty {
  [[ $(git status 2&gt; /dev/null | tail -n1) != ""nothing to commit (working directory clean)"" ]] &amp;&amp; echo ""*""
}
function parse_git_branch {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e ""s/* \(.*\)/[\1$(parse_git_dirty)]/""
}

export PS1='\w\[\033[1;37m\]$(parse_git_branch)\[\e[0m\]$ '
</code></pre>

<p>This worked fine on my Mac. But I recently got a new Mac and passed all my data in through my backup. However on my new machine the branch state seems always dirty.</p>

<pre><code># On branch master
nothing to commit, working directory clean
~/Desktop/Work/relearning_rails[master*]$
</code></pre>

<p>This is the result of a git status. I can't figure this out for the life of me. Do I have to change something in this script?</p>
","0","1020575","0","0"
"35477893","3616149","2016-02-18 09:45:58","2","3570","<git><branch><git-branch>","'git: : number expected' error coming when doing git branch","<p>I am in my local git repository and when I am doing: 'git branch', then the error coming up is:</p>

<blockquote>
  <p>""git:960: number expected"".</p>
</blockquote>

<p>The number keeps increasing by 1 every time I run the git branch command.</p>

<p>Actually, the issue is coming with all git commands, like: <code>git status</code>, etc.</p>

<p>Please help me with this.</p>
","5","3616149","0","0"
"21925761","1110799","2014-02-21 05:10:28","0","1673","<git><github><git-branch>","git checkout -b newbranch lost changes on current branch","<p>So basically, here's what happened with me:</p>

<ol>
<li>I was working on a branch, let's call it 'dev'</li>
<li>I didn't yet stage or commit my changes. However, I needed to test something quick for someone in a new branch.</li>
<li>So I executed git checkout -b testbranch dev on the command line</li>
<li>This created a branch called 'testbranch' off of 'dev' and checked out that branch</li>
<li>However, all the files I had modified in my 'dev' branch (which I didn't stash, stage, and commit prior to executing point 3) got listed in the terminal with a M next to them to indicate modified.</li>
<li>I worked on the testbranch and once the work was complete, staged and committed my changes and switched back to 'dev' branch.</li>
<li>Unfortunately, it looks like that all the changes I had made in the dev branch prior to creating/switching the testbranch got lost when I looked at the project in xcode.</li>
</ol>

<p>So my question is: Is there any way for me to recover the files? Note that my terminal session is still running and I will keep it running until I either get a solution to recover my changes or I find out that those changes are lost forever. HELP!!!!</p>

<p>Thanks,</p>

<p>-Vivek Kinra</p>
","7","1110799","",""
"3184555","174527","2010-07-06 08:14:50","911","472017","<git><git-branch>","Cleaning up old remote git branches","<p>I work from two different computers (A and B) and store a common git remote in the dropbox directory.</p>

<p>Let's say I have two branches, master and devel. Both are tracking their remote counterparts origin/master and origin/devel.</p>

<p>Now while on computer A, I delete branch devel, on local and remote.</p>

<pre><code>git push origin :heads/devel
git branch -d devel
</code></pre>

<p>Running <code>git branch -a</code> on computer A, I get the following list of branches.</p>

<ul>
<li>master</li>
<li>origin/HEAD</li>
<li>origin/master</li>
</ul>

<p>Running <code>git fetch</code> on computer B, I can remove the local devel branch with <code>git branch -d devel</code>, but I can't remove the remote devel branch.</p>

<p><code>git push origin :heads/devel</code> returns the following error messages.</p>

<blockquote>
  <p>error: unable to push to unqualified destination: heads/proxy3d<br>
  The destination refspec neither matches an existing ref on the remote nor begins with refs/, and we are unable to guess a prefix based on the source ref.<br>
  fatal: The remote end hung up unexpectedly</p>
</blockquote>

<p><code>git branch -a</code> still lists origin/devel in the remote branches.</p>

<p>How can I clean up the remote branches from computer B?</p>
","3","174527","0","0"
"59687095","3312323","2020-01-10 18:23:46","2","1500","<git-branch><git>","Issue while renaming a branch from uppercase to lowercase on local and remote git repos","<p>As I am new to git I didn't know that it is a good practice to have the branch names lowercase so I ended up having it uppercase. So now I am trying to rename the branch and tried what has been suggested <a href=""https://stackoverflow.com/questions/25704330/how-to-rename-branch-to-remove-capitalization"">here</a> but no luck.</p>

<p>Commands that I also tried</p>

<pre><code>git branch -m newfeature
git branch -m NEWFEATURE newfeature
</code></pre>

<p>The error I get when I try the above commands is</p>

<pre><code>fatal: A branch named 'newfeature' already exists
</code></pre>
","5","3312323","",""
"69694558","17232444","2021-10-24 07:06:36","-1","2306","<git><github><git-branch><git-commit><git-status>","git checkout master does not work after i created a branch....what can I do?","<p>I have created a file called basic and I have created a branch called new. After moving to the new branch, I want to switch to the master branch, hence i used git checkout master. Unfortunately, the terminal stated there is no master branch.</p>
<pre><code>(base) Dun-Yan:basic ongdunyan$ git checkout master
error: pathspec 'master' did not match any file(s) known to git
</code></pre>
<p>Here is the git status:</p>
<pre><code>(base) Dun-Yan:basic ongdunyan$ git status
On branch new
nothing to commit, working tree clean
</code></pre>
<p>I would appreciate if you all can help me, peace :)</p>
","5","17232444","",""
"31682939","1168661","2015-07-28 17:10:29","1","241","<git><git-branch><git-diff>","git - How to checkout files from another branch based on diff-filter?","<p>Let's say I want to checkout all the files from another branch that are missing from my current branch.</p>

<p>I know I can find these files by doing a <code>git diff OTHER-BRANCH diff-filter=D</code> because all files considered deleted are ones that my current branch is missing. </p>

<p>Is there a way to do a <code>git checkout OTHER-BRANCH --diff-filter=D</code> of some sort? Or perhaps you have to pipe all the files from the <code>git diff</code> into a <code>git checkout</code>?</p>
","0","1168661","0","0"
"51855617","5350307","2018-08-15 08:48:15","0","96","<django><git><sqlite><git-branch>","django database emptied when I create a new git branch on my project","<p>Whilst I am working on my django project (which has a single app), I wanted to create a new git branch so I can test a new design feature, however when I am on the new branch I cannot seem to find any of my previously populated data in my database (I am using sqlite3)....why could that be the case an how can I fix this?</p>
","5","5350307","",""
"14137779","1945363","2013-01-03 11:12:51","0","3303","<git><git-branch><git-merge>","git - remove the files in a remote branch and sync with another branch","<p>There are a few branches branches (master, test1, test2,)</p>

<p>I have just cloned the whole repository and would like to 'sync' test1 and test2 branches. Remotely, test1 has the desired content, test2 is out of date. I would like to:</p>

<ol>
<li>remove the files in the test2 branch (both locally and remotely)</li>
<li>sync/merge test2 with test1 so that test2 has the same contents as test1 deleting the current content of test2.</li>
</ol>

<p>So in other words how would I pull the contents of test1 and put it in test2 (destroying all the current content of test2).</p>
","0","1945363","",""
"41044807","2660216","2016-12-08 16:56:16","4","2342","<jenkins><android-gradle-plugin><command-prompt><git-branch>","Retrieving git branch name in prompt or Android gradle: on Jenkins it returns HEAD","<p>In gradle I'd like to add both the current branch-name and commit-number as suffix to my versionName. (Why? Because when I build my app in Jenkins to release it in HockeyApp, it's useful to show what branch &amp; commit that app was built from!)</p>

<p>So when I enter this in command prompt, my current branch name is returned:</p>

<pre><code>git rev-parse --abbrev-ref HEAD
</code></pre>

<p>Same happens when I use this line in Android gradle, using the code in either <a href=""https://stackoverflow.com/a/36760102/2660216"">this</a> answer, or as shown in this piece of gradle code:</p>

<pre><code>def getVersionNameSuffix = { -&gt;

    def branch = new ByteArrayOutputStream()
    exec {
        // The command line to request the current branch:
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = branch
    }
    println ""My current branch: "" + branch
    def versionNameSuffix = ""-"" + branch

    // ... some other suffix additions ...

    return versionNameSuffix
}

buildTypes {
    debug {
        applicationIdSuffix "".test""
        versionNameSuffix getVersionNameSuffix()
    }
}
</code></pre>

<p>Resulting log (this is exactly what I want): </p>

<blockquote>
  <p>""My current branch: feature/MyFeature""</p>
</blockquote>

<p>However, when I build my app in a Jenkins job, it will output a different result:</p>

<blockquote>
  <p>""My current branch: HEAD""</p>
</blockquote>

<p>Why does this happen, and how to correctly retrieve my current branch name in Jenkins?</p>

<p><strong>EDIT:</strong></p>

<p>I've used a different approach, which returns the branchName correctly in most cases, also on Jenkins:</p>

<pre><code>git name-rev --name-only HEAD
</code></pre>

<p>Example output in prompt:</p>

<blockquote>
  <p>""My current branch: feature/MyFeature""</p>
</blockquote>

<p>Example output in Jenkins:</p>

<blockquote>
  <p>""My current branch: remotes/origin/feature/MyFeature""</p>
</blockquote>

<p>I can remove ""remotes/origin/"" if i like, so that's okay!</p>

<p>But this approach causes different trouble (both in prompt, gradle and on Jenkins). When I have tagged the last commit, it won't output the branch-name, but this:</p>

<blockquote>
  <p>""My current branch: tags/MyTag^0""</p>
</blockquote>

<p><strong>EDIT 2:</strong></p>

<p>A third approach can be found <a href=""https://stackoverflow.com/a/6245587/2660216"">here</a>.</p>

<p>Including the comments below the answer, I could use <em>grep *</em>  to retrieve the branch in prompt. However, I cannot use the backslash in the gradle code. This fails:</p>

<pre><code>commandLine 'git', 'branch', '|', 'grep', '\\*'
</code></pre>

<p>Any advice?</p>
","0","2660216","",""
"48733929","6594394","2018-02-11 16:50:29","1","53","<git><github><git-branch>","Checking out a remote branch from github, but I don't get an exact copy of it","<p>When I checkout from a remote branch, I don't get the same version that is on github.</p>

<pre><code>$git checkout merge-pos2
M       main.go
M       miner/block.go
M       miner/blockchain.go
M       miner/blockchainparam.go
M       miner/slashing.go
M       miner/state.go
M       storage/configs.go
M       storage/seed.go
M       storage/utils.go
Switched to branch 'merge-pos2'
Your branch is up-to-date with 'origin/merge-pos'.
</code></pre>

<p>Why are these files not copied correctly? What does the capital M in front of each file stands for? How can I get the same version as on github?</p>
","3","6594394","",""
"31688157","1778409","2015-07-28 22:24:23","0","104","<git><git-branch><git-pull><git-checkout><bitbucket-server>","how to check out against a remote git repository from command line","<p>I am having trouble understanding exactly how I need to create a  local feature branch to put customizations into.  I have consulted some online resources which only confuse me  further.</p>

<p>I have created the remote branch via stash called feature/mycustomization for people to create pull requests against.</p>

<p>Now from command line do I have to do a git checkout -b  to create   a local branch  from which to push the changes to feature/mycustomization?  Also, does the name of my local branch have to match up with the remote branch due to convention?</p>

<p>Or is there a command which pulls the code from the remote branch feature/mycustomization created in step one and automatically creates the local branch?</p>

<p>I would appreciate some step by step instructions if possible.</p>

<p>Cheers,
Bob</p>
","0","1778409","",""
"59886213","10399628","2020-01-23 19:59:47","6","3053","<git><bitbucket><git-branch><pull-request><git-flow>","How delete a local branch after merging it through a pull request? git-flow, bitbucket, sourcetree","<p>My environment in local:</p>

<ul>
<li><strong>Git</strong> connecting with <strong>Bitbucket</strong></li>
<li><strong>Sourcetree</strong> with <code>git-flow</code></li>
</ul>

<p>Steps</p>

<ol>
<li>I create a <code>feature x</code> in <strong>Sourcetree</strong> then I add the code.</li>
<li>I do a <code>commit</code> including the option to <code>create a pull request</code> and <code>push</code> the changes to <code>feature x</code> branch in <code>remote</code>.</li>
<li>In <code>pull request</code> I select the option for <code>Close {branch} after the pull request is merged</code>.</li>
<li>Within <strong>Bitbucket</strong> a member team approves the <code>pull request</code> then merges it into the <code>develop</code> branch.</li>
<li>I <code>pull</code> the new changes to my local <code>develop</code> branch.</li>
</ol>

<p><strong>NOTE</strong> It's important to review the code through <code>pull request</code> before merging it into <code>develop</code>, so the question is:</p>

<p>Is there any way to delete automatically the <code>feature x</code> branch in my local after made a <code>pull</code> in <code>develop</code>?</p>

<p>*I tried with a <code>fetch</code> but it does not work.</p>
","4","10399628","0","0"
"48780404","9201928","2018-02-14 05:44:13","-3","96","<git><github><git-branch>","How to create a branch in a git repository right from GitBash prompt?","<p>I was looking for a command that can be used from GitBash command line to create a branch in my git repository. I can do that from the online git repository but I want to do it locally on my machine from GitBash prompt.</p>
","6","9201928","",""
"35808721","4599824","2016-03-05 01:01:53","2","241","<git><git-branch><gitignore><git-track>","Excluding certain files while 'git pull'","<p>I am doing a complex PHP project with two other people. We had git setup for the project from the beginning.  After working for two months, we wanted to remove certain folders (<code>/dev/app</code>) from git tracking ( git was already tracking them). So I deleted all the files from <code>/dev/app</code> and added a entry in the <code>.gitignore</code> file to exclude the <code>PHP</code> files in the <code>/dev/app</code> folder. </p>

<pre><code>**/dev/app/*.php
</code></pre>

<p>I made a commit to the master branch. I pushed them to the origin and it was working fine. But my colleagues were working on different branches. When I merged their branches with the master, git started to track the excluded files again. </p>

<p>In the local environment it is not a problem, but in the production environment it is a huge headache.  I only need the client generated files in the /dev/app folder in the production server, and I need to preserve them without any modification. </p>

<p>can anyone help me to overcome the issue? </p>
","2","4599824","",""
"48784897","2396502","2018-02-14 10:28:56","1","359","<git><branch><git-branch>","Why are changes in git branch are getting copied to the main branch automatically?","<p>I am trying to use branches to work on different parts of my project. Let's say I am on the master branch and I have a file <code>test1</code> on it. Now, I create another branch and switch to it:</p>

<pre><code>git branch first_branch
git checkout first_branch
</code></pre>

<p>Now I create another file, say <code>test2</code> and add some content to it. Now when I switch branch to <code>master</code>, I get:</p>

<pre><code>Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
</code></pre>

<p>But when I check the files now, I see the file <code>test2</code> with all the contents! How is that possible? I tried with multiple branches and everything simply gets copied across all the branches. This is not what I want since I want to keep my experimental work separate from an established work.</p>
","2","2396502","0","0"
"48820631","1386448","2018-02-16 05:32:41","22","19592","<git><git-branch><git-remote>","git remote prune origin does not delete the local branch even if its upstream remote branch is deleted","<p>This is a common use-case for me, I clone a repository, checkout a branch, do some code changes, make multiple commits, then when it's stable, I do a push to remote, eventually the branch gets merged and deleted, and I'm left with a local branch with upstream gone.</p>
<p>I was looking for a safe way of deleting all such branches. From the description, it seemed like <code>git remote prune origin</code> is doing this exactly. But it doesn't seem to be working for me.</p>
<p>Seeing the following behaviour, the branch <code>encrdb_init</code> has been deleted from <code>remote</code> but the <code>git remote prune origin</code> command does not seem to prune it. I am not sure why.</p>
<pre><code>$ git branch
  bugfix/encrdb_init
  * master
$
$ git remote prune origin
$
$ git checkout bugfix/encrdb_init
  Switched to branch 'bugfix/encrdb_init'
  Your branch is based on 'origin/bugfix/encrdb_init', but the upstream 
  is gone.
  (use &quot;git branch --unset-upstream&quot; to fixup)
$
$ git branch
  bugfix/encrdb_init &lt;&lt;&lt; shouldn't this have been pruned?
  * master
</code></pre>
<p>for reference adding output of <code>git remote show origin</code></p>
<pre><code>$ git remote show origin
* remote origin
  Fetch URL: &lt;redacted&gt;
  Push  URL: &lt;redacted&gt;
  HEAD branch: master
  Remote branches:
    SSL_test                                                  tracked
    addNodeFix                                                tracked
    autoprefix                                                tracked
    release/1.0.2                                             tracked
  Local branches configured for 'git pull':
    bugfix/encrdb_init          merges with remote bugfix/encrdb_init
    master                      merges with remote master
    release/1.0.2               merges with remote release/1.0.2
  Local refs configured for 'git push':
    master                 pushes to master                 (up to 
date)
    release/1.0.2          pushes to release/1.0.2          (up to 
date)

$ git branch -vv
* bugfix/encrdb_init          341a078c [origin/bugfix/encrdb_init: gone] &lt;redacted comment&gt;`
</code></pre>
","8","1386448","0","0"
"22191316","521201","2014-03-05 07:28:39","1","118","<git><git-branch><git-merge><git-extensions>","Merge 2 branches in git ignoring branch in between?","<p>I want to merge a branch into another branch selectively &amp; then merge another branch ignoring 1 branch in between. How do I do this with Git? I am using Git Extensions for visual studio.
<img src=""https://i.stack.imgur.com/31MgA.jpg"" alt=""enter image description here""></p>
","3","521201","0","0"
"48823520","2396502","2018-02-16 09:20:42","4","14232","<git><version-control><git-branch><git-checkout>","git checkout to a branch takes long time","<p>I am on Ubuntu 17.10 and I am using git (version 2.14.1). Whenever I create a branch from master and try to checkout to it (or to the master from it), it takes a whole lot of time, around few minutes, sometimes nearly 10 minutes. True, that I have a few GBs of data, but as far as I understand, the whole data doesn't actually get copied and instead only the changes are saved. What then could be the issue behind this? </p>
","5","2396502","0","0"
"35846772","2818245","2016-03-07 14:53:21","0","146","<git><git-branch><git-checkout>","Switch git branch while keeping current branch in conflicted state","<p>I have a branch <code>master</code>. I created a new branch <code>feature</code>, made some changes to its files <code>fileA</code> and <code>fileB</code>. Meanwhile some changes were made to <code>master</code> also in the same files <code>fileA</code> and <code>fileB</code>. Now I merged <code>master</code> into <code>feature</code>. It shows conflicts in file <code>fileA</code> and <code>fileB</code>. Let's suppose, Now I decide to keep the feature branch in the same conflicted state and want to move to master. </p>

<p><code>git checkout master</code> gives an error saying below:</p>

<pre><code>fileA: needs merge

fileB: needs merge

error: you need to resolve your current index first
</code></pre>

<p>How may I switch to <code>master</code> while keeping <code>feature</code> as it is.</p>

<p><code>EDIT</code>   Basically what happened is, I merged from master and some conflicts occurred which made my changes on feature useless. So I wanted to go back to master and cut out a new branch to work on the feature. At the same time, I dont want my earlier feature branch to be removed as it has some code that I may have to write again, hence I want to keep it to refer it as and when needed.</p>
","0","2818245","",""
"48838240","1133479","2018-02-17 05:37:48","2","5586","<git><git-branch><atlassian-sourcetree>","SourceTree not using git-ref-format branch name when pushing - is my workaround correct? Is there a better way?","<p>So I appear to be experiencing something similar to this known bug:  <a href=""https://jira.atlassian.com/browse/SRCTREEWIN-8304"" rel=""nofollow noreferrer"">https://jira.atlassian.com/browse/SRCTREEWIN-8304</a></p>

<p>It's not exactly the same bug apparently, the symptoms are almost identical, but it doesn't happen when creating a stash, but when pushing to a remote repo, in this case BitBucket.</p>

<p>Now, I'm not terribly well-versed in DVCS stuff, but here's what's happening for me, and my hacky fix that I hope won't bite me in the ass later:</p>

<p>When I press the button to push a commit, I see this dialog, note the overly long branch names:</p>

<p><a href=""https://i.stack.imgur.com/FHao8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FHao8.png"" alt=""Push Dialog with Bad Branch Names""></a></p>

<p>When I hit Push on that dialog, I see this:</p>

<p><a href=""https://i.stack.imgur.com/3NwTY.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/3NwTY.png"" alt=""Error Message when Pushing""></a></p>

<p>Then I can go back to the Push dialog and change the branch names like so:</p>

<p><a href=""https://i.stack.imgur.com/lJ0TZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lJ0TZ.png"" alt=""Push Dialog with Fixed Branch Names""></a></p>

<p>Then when I hit push, I get this success message:</p>

<p><a href=""https://i.stack.imgur.com/IGw41.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IGw41.png"" alt=""Push Success Message""></a></p>

<p>So that all LOOKS great, but I want to know if my fix is a good one.  If I accidentally add a typo into one of the branch names, will it break my repo?  Is there a better way to deal with this issue?  Am I creating problems for myself down the line?</p>
","0","1133479","0","0"
"60011753","10267104","2020-01-31 21:52:59","1","33","<git><github><commit><git-branch><checkout>","Undoing changes made to local file with git","<p>I have two branches of my project: <strong>master</strong> and <strong>live</strong>. I made some changes to my local files and when i was done, i wanted to push the changes to <strong>master</strong>. I never knew the current branch on git was <strong>live</strong>. I ran:</p>

<pre><code>git add .
git commit -m ""integrated ckeditor to replace Froalaeditor""
git pull --rebase bonychicken master
</code></pre>

<p>It was at this point git spat out:</p>

<pre><code>From github.com:Lord-sarcastic/bonychicken
 * branch            master     -&gt; FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: changed debug to false
Applying: integrated ckeditor to replace Froalaeditor.
</code></pre>

<p>And then I lost all changes to my local files.</p>

<p>So far i've tried </p>

<pre><code>git reflog master
git reset --hard HEAD@{0}
</code></pre>

<p>It doesn't work.
Neither does <code>git rebase --abort</code></p>
","0","10267104","0","0"
"48856649","9378178","2018-02-18 21:14:00","7","2454","<git><git-branch><git-merge><git-stash>","Make a snapshot of working directory with git","<p>I sometimes need to make a snapshot of the current (possibly dirty) working directory. <code>git stash save -u</code> is very similar to what I need but there are two problems:</p>

<ol>
<li>I want my working directory to stay in the same state (keep untracked files untracked)</li>
<li>In case I need to come back to the saved state (maybe a month later), it would not be easy to <code>git stash apply</code> because I first need to find the state before <code>git stash</code>.</li>
</ol>

<p>I currently have the following sequence of commands that works for me but I would like to know if there is a more elegant way of doing it.</p>

<pre><code># on branch master
git add .
git commit -m ""Temporary commit on the original branch""
git checkout -b snapshot_of_master_yyyy-mm-dd-hh-mm-ss HEAD~
git merge master
git checkout master
git reset HEAD^
</code></pre>

<hr>

<p>Thank you everyone for the answers and explanations! I am going to do something like this mostly based on @XavierGuihot's answer</p>

<pre><code>git stash -u # -u to include untracked files
git checkout -b snapshot_of_master_yyyy-mm-dd-hh-mm-ss
git stash apply
git add --all
git commit -m ""Snapshot""
git checkout master
git stash pop --index # --index to recover the state of indexed files
</code></pre>
","3","9378178","0","0"
"41300052","5060626","2016-12-23 10:54:42","3","345","<git><merge><commit><git-branch><git-checkout>","git - How to checkout all changed files between two commits","<p>I have a branch A and a branch B. Branch B is three commits ahead of A.</p>

<p>I can use <code>git diff</code> to list the changed files between A and B.</p>

<p>But my question is: How can I checkout all those changed files between A and B while I am on A, then commit them altogether into A as one commit?</p>
","0","5060626","",""
"21858691","10608","2014-02-18 15:49:19","3","215","<git><branch><git-branch><git-log>","can I delete git branch, but not delete the branch reflogs?","<p>Sometimes I want to clean up my personal git repo by deleting all my locally made branches. However, I like to rebase before pushing changes. With a rebase by itself:</p>

<ol>
<li>I clean the commit history before pushing to others</li>
<li>I can still access the previous tip of the branch via <code>git reflog</code></li>
</ol>

<p>But if I delete the branch, I delete the reflog too (thus loosing access to those commit objects). Is there a way to delete the branch, but keep the reflog?</p>

<p>Currently, I solve the problem by making a secondary repo on my machine called <code>backup</code> and I push there before rebasing and any other 'destructive' actions. That way the backup's reflog keeps all activity. But I would rather just keep the reflogs in my main repo if possible.</p>
","3","10608","0","0"
"22777359","897023","2014-04-01 05:15:38","4","811","<git><git-branch>","How to get list of git branches in Rails application?","<p>Can I get list of branches in Rails app somehow? I need access to branches list of particular git repository(not repository of my app) in my app. So maybe some gem for this exists ?</p>
","1","897023","",""
"3108467","197302","2010-06-24 08:56:44","1","973","<git><branch><git-branch>","Creating a new branch on the remote repository in git","<p>As the title says I am trying to create a new branch in git on the remote repository.</p>

<p>To do this I have previously been using the following command.</p>

<pre><code>git push origin origin:refs/heads/rounding_issue
</code></pre>

<p>Which normally just works and I can then run</p>

<pre><code>git branch -r
</code></pre>

<p>To confirm.</p>

<p>This morning however this is not working and I have received the following error messages.</p>

<pre><code>error: src refspec origin does not match any.
error: failed to push some refs to '{user}@{location}:{repository}.git'
</code></pre>

<p>I have googled the message and checked various sites and the only explanation people have been coming up with (that I have found) is that maybe the master branch needs pushed first or there are some things you need to commit first, I have tried a host of different things but each time the error message is the same.</p>

<p>I can commit to the master branch fine.</p>

<p>Any help would be greatly appreciated.</p>
","0","197302","",""
"4649356","463038","2011-01-10 17:04:40","564","457142","<git><branch><git-branch><git-log>","How do I run git log to see changes only for a specific branch?","<p>I have a local branch tracking the remote/master branch. After running <code>git-pull</code> and <code>git-log</code>, the log will show all commits in the remote tracking branch as well as the current branch. However, because there were so many changes made to the remote branch, I need to see just the commits made to the current local branch.</p>

<p>What would be the Git command to use to only show commits for a specific branch?</p>

<p>Notes:</p>

<p>Configuration information:</p>

<pre><code>[branch ""my-branch""]
  remote = origin
  merge = refs/heads/master
</code></pre>
","1","463038","0","0"
"4674226","270628","2011-01-12 21:25:42","70","89934","<git><github><git-branch>","Does github keep deleted remote branches in history? If so, can those be restored?","<p>I was wondering if there is a way to restore a remote deleted branch in github. History clearly keeps record of the branch and merges with other branches but I'm not sure if it's possible to restore a deleted branch.</p>

<p>Thanks.</p>
","0","270628","0","0"
"4707180","146272","2011-01-16 18:24:26","2","5365","<git><git-branch><git-rebase><git-merge><git-reset>","How to remove an in-between merge in git?","<p>I want to remove an in-between merge (remove, not squash) and then move the last 2 commits to a new branch.</p>

<p>This is my current <code>git log --graph</code>:</p>

<pre><code>* 3a5c453 - (2 hours ago) last commit (HEAD, master)
*   b6c19f1 - (2 hours ago) Merge branch 'tade' into HEAD
|\  
* | be356d0 - (2 hours ago) previous commit
| * 65328dc - (3 hours ago) some other commit in branch tade
</code></pre>

<p>I want to end up with this:</p>

<pre><code>    * bbbbbbb - (some time in the future) a later commit on tade (tade)
*   | aaaaaaa - (some time in the future) a later commit on master (master)
| * | 3a5c453 - (2 hours ago) last commit (HEAD, newone)
| * | be356d0 - (2 hours ago) previous commit
|/  |
|   * 65328dc - (3 hours ago) some other commit in branch tade
</code></pre>

<p>I thought of using <code>git rebase -i</code> to remove the merge with the branch tade and then do a <code>git branch newone</code> and <code>git reset --hard HEAD^2</code> to move the last 2 commits to the new branch. When I did the rebase though, it showed me all the commits from the tade branch that got merged into master and | was reluctant in deleting them.</p>

<p>Is there a better way or should I go ahead with it?</p>

<p>EDIT: I updated the intended state graph to make it more clear. The 2 new commit (<code>aaaaaaa</code> and <code>bbbbbbb</code>) are only there to illustrate the state a little better (I hope)</p>
","3","146272","0","0"
"41105055","2409793","2016-12-12 16:17:44","1","847","<git><svn><version-control><git-branch>","Branch concept in svn vs git","<p>I come from a <code>git</code> background so apologies for any gross svn-misconceptions causing this question.</p>

<p>In git, when switching between <code>branches</code>, the working copy is always say ""adjusted"" to reflect the staged files.</p>

<p>So e.g. when working in <code>branchA</code>, which incorporates a folder named <code>branchA-folder</code>, and the <code>master</code> branch does not have this folder yet, running <code>git checkout master</code> (ok, after having stashed or committed your changes) will make the folder <code>branchA-folder</code> ""dissapear"" from your filesystem (working directory), right?</p>

<p>Unless I am wrong, this allows <code>git</code> to maintain one local copy of your working dir which always reflects the (staged) status of your branch.</p>

<p>What is the case when it comes to <code>svn</code>?</p>

<ol>
<li>Will the above switch (<code>svn switch &lt;branchA-url&gt;</code>) make the <code>branchA-folder</code> ""dissapear""?</li>
<li>Does svn maintain <em>one actual copy</em> of the working dir per branch/tag?</li>
</ol>

<p>Thx.</p>
","0","2409793","",""
"42090762","5490886","2017-02-07 13:11:11","1","905","<linux><git><bash><github><git-branch>","How to create a github repository directly from git bash?","<p>Frequently what I do is</p>

<p>1) Create a repository on <strong>github</strong></p>

<p>2) In my <strong>gitbash</strong>, I do <code>git remote add origin &lt;url&gt;</code></p>

<p>3) Do my stuff to it, finally push</p>

<p>What I want to know is that, can I create a <strong>repository on github</strong> directly from <strong>git bash</strong>? I don't want to first go on github, create it, and then go back to gitbash, remote it, and then mess with it. I want a way to do this directly from gitbash.</p>

<p><code>git create this repo on github</code></p>

<p>Something of that sort, is this possible?</p>
","0","5490886","",""
"4724573","217965","2011-01-18 13:26:38","1","2001","<git><git-branch>","Checking out specific branch from github","<p>I used to pull down jQuery-ui by doing</p>

<pre><code>git clone git://github.com/jquery/jquery-ui/
git checkout 1.8.6
</code></pre>

<p>This stopped working today.  After I do a git clone on an empty repository, the checkout fails with: </p>

<blockquote>
  <p>error: You have local changes to
  'demos/spinner/currency.html'; cannot
  switch branches.</p>
</blockquote>

<p>Any recommendations on how to fix this?  I don't want to pull zips of 1.8.6, I want the ease of being able to switch between old and new branches of jQuery UI for testing.</p>
","1","217965","",""
"22124870","1035279","2014-03-02 07:06:33","3","329","<git><github><git-branch><git-log><git-checkout>","How does git log work across branches?","<p>I'm using a github repository and it has a master branch and a demo branch. All was good and both the master version and the demo version of the code are in use (master on a staging site, and the demo on a demo site). A live site runs on a tagged commit.</p>

<p>While making changes, I messed something up which did not reveal itself for a while so I needed to start looking through old commits to see how I introduced the problem.</p>

<p>On Github I saw commits for the demo branch as follows:</p>

<pre><code>Changed logos to xxx ones
8c4a3eab22 Browse code 
pwhipp authored 3 days ago
Feb 04, 2014
Paul Whipp
Changed archetype age_default to default to zero (and set all null va… …
6e4c9e8864 Browse code 
pwhipp authored a month ago
Feb 03, 2014
Paul Whipp
Added demo.xxx allowed domain for RED
2f72e3b05a Browse code 
pwhipp authored a month ago
</code></pre>

<p>So on a local repo, pulled up to date,  I do ""git checkout 8c4a3eab22"". Then when I invoke git log locally, I see:</p>

<pre><code>(red)~/wk/red $ git status
# HEAD detached at 8c4a3ea
(red)~/wk/red $ git log
commit 8c4a3eab22dc2ce9708c9aae00751e558ae81dd3
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Thu Feb 27 10:55:21 2014 +1000

    Changed logos to xxx ones

commit 2f72e3b05a005738d77ed12be475634aadf76b49
Author: pwhipp &lt;paul.whipp@gmail.com&gt;
Date:   Mon Feb 3 10:58:08 2014 +1000

    Added demo.xxx allowed domain for RED
</code></pre>

<p>Why is 6e4c9e8864 not shown by git log? It exists (I can check it out) but the differences between it and 8c4a3eab22 seem far greater than those indicated when I browse 6e4c9e8864 on github so I'm thinking there may be other commits I'm not seeing.</p>

<p>Do I need to RTFM somewhere to understand how the commits are being reported in the log call across the different branches?</p>
","4","1035279","0","0"
"41226396","1534368","2016-12-19 15:52:00","6","3848","<git><git-branch><git-commit><git-stash><git-reset>","How do I save work in progress without using git-stash?","<p>I have a git directory with this situation:</p>

<pre><code>ProgSoul@PROGSOUL-LENOVO:~/esercizio3_2$ git status
Sul branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   A

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   A

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        B
</code></pre>

<p>In this situation I have:</p>

<ul>
<li>there is a file named A in the index with a string ""AA"" inside it</li>
<li>I modified the file A with ""AAA"" inside it but I didn't add this change on the stage. So in the working directory I have A with a string ""AAA"" inside it</li>
<li>an untracked empty file B</li>
</ul>

<p>My teacher wants me to temporarily suspend my work, create a BUGFIX file, commit it and restore my previous situation.</p>

<p>I achieved it through these commands:</p>

<pre><code>git stash --include-untracked
touch BUGFIX
git add BUGFIX
git commit -m ""Aggiunto file BUGFIX""
git stash pop --index
</code></pre>

<p>With these commands I saved my initial situation and restored it once my fix has been commited.
My teacher also asked me to reach this goal without using git-stash.</p>

<p>I followed the help in the stash documentation:</p>

<pre><code>git checkout -b WIP
git commit -a -m ""WIP""
git checkout master
touch BUGFIX
git add BUGFIX
git commit -a -m ""BUGFIX""
git checkout WIP
git reset --soft HEAD^
</code></pre>

<p>With git reset --soft I restored the index but the changes not staged for commit have been lost.</p>

<p>With git reset --mixed I restored the changes not staged for commit but the index has been lost.</p>

<p>How can I restore the same initial situation once I commit the fix without using git stash?</p>
","7","1534368","0","0"
"4750520","448496","2011-01-20 17:36:02","69","56564","<git><git-branch><github-pages>","git branch: gh-pages","<p>I have a repo on GitHub. Recently I have discovered GitHub's pages and I want to use them.<br>
I would like to create this new branch and then, when I need to, either commit on <code>master</code> branch or on <code>gh-pages</code> branch.  </p>

<p>How can I do this? Do I have to create another folder inside my repo?</p>
","6","448496","0","0"
"23072928","238847","2014-04-15 01:03:06","0","1017","<ruby><github><git-branch><github-api>","Getting ""Reference update failed"" when creating new branch with github API","<p>I am trying to create a new branch off master via the Github API, but I am getting a ""Reference update failed"" error. Here is my ruby code:</p>

<pre><code>def self.create_ref access_token, github_user, github_repo, ref
    sha=nil
    url = ""https://api.github.com/repos/#{github_user}/#{github_repo}/git/refs/heads/master""
RestClient.get(url,{params:{access_token:access_token},accept:'json'}){ |response, request, result| 
       puts response      
       sha=JSON.parse(response)['object']['sha']
    }  
    url = ""https://api.github.com/repos/#{github_user}/#{github_repo}/git/refs""
    RestClient.post(url,{ref:name,sha:sha }.to_json,{params:{access_token:access_token},accept:'json'}){ |response, request, result| 
       puts response
}    
end
</code></pre>

<p>Is using the master sha code the wrong approach to create a new ref?</p>
","2","238847","0","0"
"3719068","265249","2010-09-15 15:15:20","62","20033","<git><commit><git-branch><git-reset>","Move commits from master onto a branch using git","<p>I'm trying to learn how to use Git effectively and I'm wondering how I should (good practice/bad practice?) solve the following case:</p>

<p>Say I have the following chain of commits in master:</p>

<ul>
<li>Initial commit</li>
<li>Commit 1</li>
<li>Commit 2</li>
<li>Commit 3</li>
</ul>

<p>Then I realize that what's done in the last two commits is completely wrong and I need to start from Commit 1 again. Questions:</p>

<ul>
<li>How should I do that?</li>
<li>Can I move Commit 2 and 3 to a separate branch to keep for future reference (say they weren't that bad after all) and continue working from Commit 1 on master?</li>
</ul>
","0","265249","0","0"
"4966876","529977","2011-02-11 08:16:25","7","2290","<git><git-svn><git-branch>","restricting git svn to branches","<p>Using git-svn it is quite beautiful to use my local git as a svn client.</p>

<p>Unfortunately it seems not to be possible to restrict git svn to some branches?</p>

<p>got
<code>One '*' is needed in glob: 'branches/v10'</code></p>

<p>when setting up two <code>branches</code> lines in gitconfig with fixed branch paths</p>

<pre><code>url = https://example.com/svn/reps/test
fetch = trunk:refs/remotes/trunk
branches = branches/v10:refs/remotes/v10
branches = branches/v09:refs/remotes/v09
</code></pre>

<p>Is there a way to get around WITHOUT using different SVN remotes (which causes, index will blow up cause branch points are not just ""patches/copies"" from trunk and all the ""trunk"" history will come in again ;(</p>

<hr>

<p><em><strong>EDIT:</em></strong>
<em>To clearify what I intend:
There is a huge SVN repository with n branches. In SVN, I'll checkout just two branches in two different workspaces I need to work for.
In Git, the DVCS aspect will ""clone"" the whole SVN repository, including ALL informations of ALL SVN branches (think about a repository with > 50.000 changesets).
I intended to keep the disk usage as small as possible on my local machine.
Therefore I thought about, set up git for just two specific branches I need (v10 and v09). So I still have the great merge features within this git repository but doesn't need to clone all the stuff I don't need (and never will need to).
Another aspect than ""Disc usage"" is the problem, that cloning the complete SVN repository takes very, very... (did I say very) long!</em></p>

<hr>
","0","529977","0","0"
"23101782","2881939","2014-04-16 06:34:21","1","188","<git><github><git-branch>","git : switching to different branch without commiting the changes of the branch","<p>I have created on branch named as ""sub-branch"". I am creating on file <code>test1.txt</code> after switching to sub-brnach using command <code>git checkout sub-branch</code>. Now when i switch to master branch using command <code>git checkout master</code> without committing the changes of the sub-branch, the file <code>test1.txt</code> is also shown  in master branch.</p>

<p>Why the file <code>test1.txt</code> is shown in master branch,since i have created <code>test1.txt</code> file in sub-branch so it should be presented in sub-branch only.why git is showing <code>test1.txt</code> file in master  branch  also when i do <code>git checkout master</code>???.</p>

<p>Thanks</p>
","0","2881939","0","0"
"23113963","1867443","2014-04-16 15:35:29","0","131","<git><web-hosting><git-branch>","Configuring each git branch to a specific folder","<p>I am hosting a webapp on my linux server. On my local system and my github account, I have three branches -> master, develop and test. I would like to have three urls on my server pointing to each branch as follows</p>

<ol>
<li>production.domainName.com pointing to master branch</li>
<li>develop.domainName.com pointing to develop branch </li>
<li>test.domainName.com pointing to test branch</li>
</ol>

<p>I have configured my DNS settings for the three subdomains as above to point to three different directories on my server. Is it possible to configure git to save the data from one specific branch in each directory?</p>

<p>Thanks in advance for the help. </p>
","0","1867443","0","0"
"41382385","700070","2016-12-29 15:12:59","1","90","<git><version-control><commit><git-branch><git-commit>","Relationship between git branches and a release","<p>I've used <code>git</code> for sometime now, but it isn't clear how git <code>commit</code>s relate to <code>releases</code> which relate to the <code>master</code> branch.</p>

<p>My understanding now is <code>master</code> branch is like any other branch in git. It is just created with <code>git init</code> upon initially making a git repository.</p>

<p>Thus, can someone explain the relationship between <code>git branches</code> to a <code>release</code>?</p>

<p>Is it a <code>1 or M:1</code> relationship? (e.g. 1 or many branches are in a release) ?</p>

<p>Also, within a git <code>branch</code> how are the individual changes tracked? e.g. in one branch, I change the letter <code>B</code> in <code>filex.py</code> to <code>C</code> and commit it to a branch? </p>

<p>Thanks</p>
","0","700070","",""
"3754706","33913","2010-09-20 19:15:21","1","413","<git><git-branch><git-merge>","What's the best practice for a git branch that needs master to be constantly merged to it?","<p>I'm working on a project that has basically 2 branches: master and ""next-version"".</p>

<p>The two are constantly changed and the next-version needs to have the latest changes from master, but I can't just merge them both, because one version is published and the other one is still on alpha.</p>

<p>I currently merge master to next-version everytime a change happens, but this leads to ugly history.</p>

<p>What's the best practice in this case?</p>
","0","33913","",""
"41387054","1197249","2016-12-29 20:56:17","5","990","<git><git-branch><git-reset><git-gc>","After a git reset, unreachable commit not removed","<p>I have a small repo that has a couple of commits:  </p>

<pre><code>* a0fc4f8 (HEAD -&gt; testbranch) added file.txt  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (tag: initial) initial  
</code></pre>

<p>Also:  </p>

<pre><code>$ git status  
On branch testbranch  
nothing to commit, working directory clean  
</code></pre>

<p>I can not understand the following behavior. On this state I run: 
<code>$ git reset initial</code><br>
I see now:  </p>

<pre><code>* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  
</code></pre>

<p>What I was expecting: Commit a0fc4f8 would be deleted since it is unreachable.<br>
What happened:<br>
1) Doing <code>git show a0fc4f8</code> still shows the commit<br>
2) Doing <code>git status</code> shows the <code>file.txt</code> that was added by commit a0fc4f8 as untracked and file hello that was added by commit f705657 also shows up as untracked.<br>
3) Running <code>git gc</code> or <code>git gc --prune=all</code> does not delete a0fc4f8 although it is not reachable anymore and has no name/tag associated with it.<br>
Why are these happening?</p>

<p><strong>Update:</strong>   </p>

<pre><code>$ git fsck  
Checking object directories: 100% (256/256), done.  
Checking objects: 100% (15/15), done.    
</code></pre>

<p><strong>Update 2:</strong>  </p>

<pre><code>$ git log --all --decorate --graph --oneline  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  

$ git gc --force  
Counting objects: 15, done.  
Delta compression using up to 4 threads.  
Compressing objects: 100% (8/8), done.  
Writing objects: 100% (15/15), done.   
Total 15 (delta 1), reused 15 (delta 1)   

$ git log --all --decorate --graph --oneline  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  
</code></pre>

<p>$ git show a0fc4f8   Still shows the commit </p>

<p><strong>Update 3:</strong>  </p>

<pre><code>$ git reflog testbranch  
08a2de3 testbranch@{0}: reset: moving to initial  
a0fc4f8 testbranch@{1}: commit: added file.txt  
e6e6a8b testbranch@{2}: branch: Created from HEAD  
</code></pre>
","9","1197249","0","0"
"30275151","3035305","2015-05-16 11:35:54","1","195","<eclipse><git><bitbucket><git-branch>","git move sub project to the root of the reposotory","<p>I am using GIT repository to check-in my changes. in repository, I have a project and under that I am checking in everything. But while configuring 'OpenShift' in eclipse using jbosstools, it is saying </p>

<pre><code>    The project &lt;projectname&gt; is not at the root of your git repository 
and appears to be a sub-project. Please copy your project to it's own repository. 
</code></pre>

<p>How can I move my project to root using eclipse? without using command prompt.</p>
","4","3035305","0","0"
"30283797","1502780","2015-05-17 05:48:56","12","7855","<git><branch><git-branch>","How to make existing branch an orphan in git","<p>Is there a way to make an <em>existing branch</em> an orphan in git?</p>

<p><code>git checkout --orphan</code> seems to only <em>create</em> a new orphan?</p>
","2","1502780","0","0"
"12672370","123671","2012-10-01 11:26:56","2","78","<git><branch><git-branch>","Cleaning a git branch with a poor-quality commit log","<p>Rather than ask about specific git verbs (which the git documentation is based around), I'd like to ask what is the best approach for this particular task.</p>

<p>I have a git branch with an ugly commit log, due to having been forced to commit to test the app. Lots of commits like:</p>

<ul>
<li>Fix typo</li>
<li>Do X for Foo team</li>
<li>More cleanups after rename</li>
<li>Undo X now Foo team has changed their mind</li>
</ul>

<p>Luckily, all those commits are in a branch.</p>

<p>Before I merge that branch, I would like the opportunity to clean up the commit log, consolidating and reordering the commits. What's the best way to do this? </p>
","0","123671","",""
"30302404","1227842","2015-05-18 11:47:20","1","1373","<git><git-branch><git-tag>","git push --tag keeps commits","<p>When pushing to the master, I read that it is recommended to use:</p>

<pre><code>git tag -a &lt;tag name&gt; -m &lt;message&gt; ; git push --tags
</code></pre>

<p>I added a new tag, and pushed the changes to the master, now I modified another file and want to push it to the master with the same tag.</p>

<p>I do: <code>git push --tags -f</code>, I get ""Everything up-to-date"" message. but when I do: <code>git status</code> I still see that: ""Your branch is ahead of 'origin/master' by 2 commits""</p>

<p>why it is so ? what I have to do to add the new changes to the tag ?</p>
","2","1227842","",""
"12743614","886033","2012-10-05 09:42:36","2","622","<git><branch><git-branch>","How to make existing git branch track a remote branch?","<blockquote>
  <p>Possible duplicate: <a href=""https://stackoverflow.com/q/1184518/1065190"">Getting existing git branches to track remote branches</a></p>
</blockquote>

<p>I know how to make a new branch that tracks remote branches. But how do I make an existing branch track a remote branch. I know I can just edit the .git/config file but it seems there should be an easier way.</p>
","1","886033","0","0"
"30392969","674064","2015-05-22 09:22:04","14","6277","<git><git-branch><git-checkout><git-fetch>","fetch and checkout a remote git branch in just one command","<p>If</p>
<ul>
<li>I have local repo with a remote <code>$REMOTE</code> already set up</li>
<li>and a new branch <code>$BRANCH</code> exists on the remote repo that I haven't fetched, yet</li>
</ul>
<p>can I fetch that branch <strong>and</strong> check it out into a tracking local branch of the same name <strong>in a single command</strong>?</p>
<p>I can achieve the desired result in <em>two</em> commands either with</p>

<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH
git checkout $BRANCH # or more explicitly git checkout -b $BRANCH $REMOTE/$BRANCH
</code></pre>
<p>or (inspired by <a href=""https://stackoverflow.com/a/19442557/674064"">this answer</a> to Question <a href=""https://stackoverflow.com/q/1783405/674064"">How do I check out a remote Git branch?</a>) with</p>
<pre class=""lang-sh prettyprint-override""><code>git fetch $REMOTE $BRANCH:$BRANCH
git branch --set-upstream-to=$BRANCH $BRANCH
</code></pre>
","3","674064","",""
"12788039","1275959","2012-10-08 19:16:42","0","187","<git><git-branch>","Tracking a git branch issue","<p>I have cloned a repo using git. Another user created a new branch, call it foo (there are so two branches master and foo). I created another branch foo to track remote foo. So I ran this command : git branch --set-upstream foo origin/foo. But I have an error message telling me  : <code>fatal: Not a valid object name: 'origin/foo'</code> Can anybody help ? When I run git remote origin show I have the message :</p>

<pre><code>* remote origin
  Fetch URL: ssh://***
  Push  URL: ssh://***
  HEAD branch: foo
  Remote branches:
    master   tracked
    foo new (next fetch will store in remotes/origin)
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (local out of date)
</code></pre>
","0","1275959","",""
"12794031","1012683","2012-10-09 06:27:14","0","136","<git><git-branch>","git: combine different repositories into one repository with different branches","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/244695/how-to-combine-two-branches-from-two-different-repositories-in-a-single-reposito"">How to combine two branches from two different repositories in a single repository?</a>  </p>
</blockquote>



<p>at the moment, I have different versions of my software for different customers in different git repositories. </p>

<p>Now I want to combine this different repositories into one repository with different branches. How is that possible?</p>

<p>Thanks :)</p>
","0","1012683","",""
"12836736","999355","2012-10-11 09:46:49","2","553","<git><git-branch><gitk>","gitk: show branch name on hover","<p>Could you tell how to make gitk tool show the branch name on hover or suggest the tool which is able to do so?</p>

<p>gitk shows branches tangle where the branches are nameless, and I have to guess which is master, which stable etc.</p>
","0","999355","",""
"12845794","1460015","2012-10-11 18:02:46","1","105","<git><git-branch>","creating git branch and commiting into separate branches","<p>noob to git:<br>
expanding on <a href=""https://stackoverflow.com/questions/2489559/git-can-i-commit-my-working-directory-to-a-new-branch-without-commiting-it-to-a"">this</a> question a little  </p>

<p>I created a repository and committed my <code>README.md</code> to the <code>master</code> branch.<br>
My local folder structure is:  </p>

<pre><code>projectName  
 --README.md  
 -- + part1  
 -- -- README.md  
 -- -- + src  
 -- + part2  
 -- + ...  
</code></pre>

<p>I initialized <code>git init</code> in the <code>projectName</code> folder and was able to make the commit.  </p>

<p>Then I do <code>git checkout -b part1</code>.<br>
<code>cd .\part1</code> and <code>git add .\README.md .\src</code>  </p>

<p>When I commit and push <code>git push -u origin part1</code> and check my repository my master branch has all the files from <code>part1</code> and the <code>part1</code> branch has correct files but it contains the <code>README.md</code> from the master branch.  </p>

<p>After I 'remove' the master README.md I want to commit from branch part1 the files/folders in my local part1 folder. The problem I am having with this is when I commit the actual folder part1 shows up in the part1 branch. I just want the contents to show up.  </p>

<p><strong>EDIT_1</strong><br>
I want to create multiple branches.  After committing to the <code>master</code> branch I do this:<br>
<code>git checkout -b part1</code><br>
When I commit from <code>part1</code> I don't want the README.md from the <code>master</code> coming along for the ride.  Doing <code>git rm README.md</code> deletes the file from my local directory.  </p>

<p><strong>UPDATE</strong><br>
I was confused about the second part of my own question.  @willoller clarified.</p>
","6","1460015","",""
"66392737","15292111","2021-02-26 21:00:16","1","182","<github><repository><git-branch><git-push><refs>","Getting a 'failed to push some refs to github' error when I try to push new changes to github","<p>Hello I am getting an error everytime I try to push my changes to github. I have tried reading other similar questions on stack overflow but none of the solutions are working for me</p>
<pre><code>~/SkillSwap/skill_swap_client // ♥ &gt; git add src/index.js
~/SkillSwap/skill_swap_client // ♥ &gt; git commit -m &quot;remove unneceassary import&quot;
[my-branch 68c3622] remove unneceassary import
 1 file changed, 1 insertion(+)
~/SkillSwap/skill_swap_client // ♥ &gt; git push
To github.com:Sehrish88/SkillSwap.git
 ! [rejected]        my-branch -&gt; my-branch (non-fast-forward)
error: failed to push some refs to 'git@github.com:Sehrish88/SkillSwap.git'
</code></pre>
","1","15292111","0","0"
"47866209","","2017-12-18 10:14:26","0","2599","<git><terminal><git-branch>","current git branch in terminal prompt","<p>I'm trying to make a small tool (maybe it already exist) to help working with repositories and branches from the terminal.</p>

<p>Basically the idea is to have the name of the branch in the prompt (similar to virtual environments, which also show the current environment in the prompt).</p>

<p>The following command just extracts the name of the branch I'm currently in.</p>

<pre><code>git branch | grep ""*"" | cut -c3-
</code></pre>

<p>Including this in my .bashrc file to modify <code>PS1</code> works, however only changes the prompt when the console is open.</p>

<p>I want to update the prompt everytime I change the folder <code>cd my_folder</code>, <code>cd ..</code> so if I go to another repository, it updates the branch.</p>

<p>So I created an alias for <code>cd</code>, which now appends this small script after executing the <code>cd</code>.</p>

<p>However if I use <code>git</code> to change the branch since I'm not changing the folder the prompt is not inmediately updated.</p>

<p>I can also create an alias for git but I have the impression I'm changing too much things and maybe this is something that already exists.</p>

<p>To avoid reinventing the wheel, does this already exist? Is it a good idea to use it?</p>

<p>Thanks</p>
","1","","0","0"
"30485193","382186","2015-05-27 14:17:17","0","66","<git><git-branch>","In git, are there any issues with naming a branch after a commit id?","<p>I run into a detached head state often.  I would like to create a script that, when I run, automatically creates a branch where I am at and names it after the current commit id.  It appears that git will let me do it, but could a branch and commit having the same name lead to any possible ambiguity or side effects with any git commands?  </p>
","7","382186","",""
"13529948","1752939","2012-11-23 13:18:30","9","19665","<git><branch><git-branch><git-push>","git push branch without merge","<p>I have one branch master on the server (remote). I created new local branch that doesn't exist on the remote (server). How can I add (push) the branch to the remote (server) without merging it with the master branch</p>
","0","1752939","0","0"
"31155616","1387204","2015-07-01 07:55:31","0","70","<git><github><repository><git-branch><ls-remote>","How to get remote branch information in git","<p>We have git ls-remote --heads  command to list the branches created in the remote repository</p>

<p>Is there any way to get the branch information (like branch created date, author)</p>

<p>ex: I wish the output to be,</p>

<p>Branch-1   12/02/2013    user-1</p>

<p>your valuable thoughts please..</p>
","2","1387204","",""
"31203480","258479","2015-07-03 09:37:21","3","4455","<git><git-branch>","Why does my git log output show both origin and origin/master, origin/HEAD when using a remote. These entries seem redundant to me","<p>I am going through git branching concepts from <a href=""http://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"" rel=""nofollow"" title=""3.1 Git Branching - Branches in a Nutshell"">3.1 Git Branching - Branches in a Nutshell</a></p>

<p>I am playing with dummy repository. </p>

<p><code>git log --oneline --decorate</code> gives following output. </p>

<pre><code>$ git log --oneline --decorate
d0006a6 (HEAD, origin, tag: Test1, origin/master, origin/HEAD, master) Minor change 
1437545 Minor change
69a948a Added Makefile
617ffeb Spell correction
6bf9b3f First commit
$ git branch 
* master
$ git remote --v
origin  /home/adil/work/git/repo/ (fetch)
origin  /home/adil/work/git/repo/ (push)
</code></pre>

<p>I am not clear with multiple entries with origin and master. Like origin, origin/master, origin/HEAD, master</p>

<p>The sample output in the URL gives:   </p>

<pre><code>f30ab (HEAD, master, testing) add feature #32 - ability to add new
</code></pre>

<p>Similarly I was expecting the output to be:</p>

<pre><code>d0006a6 (HEAD, tag: Test1, master) Minor change
</code></pre>

<p>One thing could be difference point is, in our case, its having remote. So I think that's why origin is coming but why origin, origin/master, origin/HEAD 3 extra entries?</p>
","0","258479","0","0"
"48014363","5898008","2017-12-28 21:03:37","2","45","<git><git-branch><git-fetch>","After using git fetch only to have a look at others' work, how to get rid of fetched branches?","<p>I have a project with a friend with only one branch, <code>master</code>. My friend last worked on the project and I fetched (<code>git fetch</code>) his work just to have a look. This created a branch called <code>origin/master</code>:</p>

<pre><code>Project ps1$ git branch -a
  * master
    remotes/origin/master
</code></pre>

<p>I checked it out (<code>git checkout origin/master</code>) and I don't agree with everything that was done, so I don't want to merge now. I'm going to let my friend work more on it. I tried to delete this fetched branch just to clean up, using either</p>

<pre><code>git branch -d remotes/origin/master
</code></pre>

<p>or</p>

<pre><code>git branch -d origin/master
</code></pre>

<p>but it said the branch was not found in both cases. How do I get rid of this branch (should I even do this?)?</p>
","2","5898008","",""
"66544092","10521831","2021-03-09 09:21:39","-2","70","<git><repository><bitbucket><git-branch><git-pull>","Please help me about problem in my git branch","<p>I can pull from another branch, but the data from another branch not updated in my branch. When i try pulled manually git pull branch_andy2 production it shows error like this :</p>
<p>fatal: 'branch_andy2' does not appear to be a git repository
fatal: Could not read from remote repository.</p>
<p>Please make sure you have the correct access rights
and the repository exists.</p>
","0","10521831","",""
"31284565","1236694","2015-07-08 05:56:52","0","596","<git><git-branch><git-clone><libgit2sharp><repo>","libgit2sharp branch not found on freshly cloned repo","<p>libgit2sharp 0.21.0.176
C# on Windows Server 2008</p>

<p>I need to obtain reference to a specific branch.</p>

<p>On my Windows machine, I fresh git clone local repo from remote origin on GitHub.</p>

<p>Next I execute following <code>libgit2sharp</code> code : </p>

<pre><code>var localRepo = new Repository({local-path},RepositoryOptions);
var remote = localRepo.Network.Remotes.Add(""origin"", {remote-repo-uri);
localRepo.Network.Fetch(remote, FetchOptions, Signature, ""performing fetch"");
var branch = localRepo.Branches[{branch-name}];
</code></pre>

<p>But the branch is not present in the collection even though it exists on remote origin on GitHub.</p>
","0","1236694","",""
"13761682","1885174","2012-12-07 10:56:17","5","1580","<git><git-branch><gitignore><git-checkout>","gitignore - hide ignored files during checkout","<p>Here is my problem (via example steps):</p>

<ul>
<li>I have a Git repo with two different branches (branchA and branchB), which are currently identical.</li>
<li>Checkout to branchB and create a new file ""foo.txt"".</li>
<li>Add that file to "".gitignore"" of that branch, so that it is successfully ignored in branchB.</li>
<li>Create another file ""hello.txt"", stage it and commit it.</li>
<li>Checkout to branchA.</li>
<li>foo.txt appears in branchA, but hello.txt does not.</li>
</ul>

<p>Why does foo.txt appear in branchA and not get ""hidden"" like hello.txt does?</p>

<p>From my perspective this is a great annoyance and seems like a bug/feature request, but has Git been designed to act this way? I was surprised to find no other people complaining about this.</p>
","0","1885174","",""
"48029867","","2017-12-30 00:36:49","15","27466","<git><branch><git-branch>","What is protected git branch?","<p>I am new with GIT and branching and recently I saw  <code>protected</code> branch, what does that mean and how do we protect a branch?</p>
","4","","",""
"13787580","1275959","2012-12-09 13:02:05","0","710","<git><git-branch>","git branch --contains' issue","<p>On my remote repo I run git log --oneline -2 --all to find the last commits, I have an input related to commits with SHA1 and SHA2</p>

<p>but I run git branch --contains SHA(1/2), I have no output. Someone could explain ?</p>
","3","1275959","",""
"13812103","1725377","2012-12-11 01:15:11","8","4208","<git><branch><commit><git-branch><git-rebase>","Remove an unreferenced commit from git repository","<p>I have a git commit history like this:</p>

<pre><code>          U
         / 
A---B---C---D---E master
</code></pre>

<p>Nothing points to the commit <code>U</code>, but I know its hash. How can I completely remove this commit  from my repository as if it never existed? I'm the only person using this repo.</p>

<p>I tried using <code>git rebase</code>, but that can either delete parts of a branch or move commits, but doesn't seem to be able to delete a single commit.</p>

<p>If I do <code>git checkout &lt;hash&gt;</code> and then <code>git reset --hard HEAD~1</code> I don't see the the commit anymore. Is it actually gone completely or is it still hidden in the repo?</p>
","0","1725377","0","0"
"13815860","1581090","2012-12-11 07:53:34","2","2590","<git><git-branch>","How to name a (no branch)-branch on git","<p>It happened somehow that I left the <code>master</code> branch and ended up on the <code>no branch</code> branch. How can I give this branch a meaningful name? </p>

<p>In detail: Calling <code>git branch</code> shows</p>

<pre><code>* (no branch)
  master
</code></pre>

<p>and what I want (without changing any file) is to have e.g.</p>

<pre><code>* extraBranchIEndedUpWith
  master
</code></pre>

<p><code>git status</code> is clean. </p>
","0","1581090","",""
"13818689","348545","2012-12-11 10:50:42","3","1836","<git><git-branch><git-pull><gitorious>","git pull works only for master branch","<p>Pulling any branch from any repository from a computer inside the git server's LAN works.<br>
However, on any remote computer (not on the same LAN as the git server), pulling master from any repository works, but <strong>pulling any other branch hangs</strong>.</p>

<p>Environment:<br>
 - Git server is gitorious running on ubuntu<br>
 - I'm pulling from windows using msysgit and either command line or tortoisegit<br>
 - The url used is of the form: <code>ssh://git@[my.domain]/[proj]/[repo.git]</code></p>

<p>I know <a href=""https://stackoverflow.com/questions/9925173/gitorious-branch-permissions"">gitorious does not support branch specific permissions</a>. Also the fact that within the LAN all the branches work must indicate something... what could it possibly be?!</p>

<p><strong>Update:</strong><br>
I suspected the branch I'm trying to pull doesn't exist, so I tried pushing it. Here's the result:</p>

<pre><code>git.exe push --progress  ""origin"" other_branch

To ssh://git@my.domain/proj/repo.git
! [rejected]        other_branch -&gt; other_branch (non-fast-forward)
error: failed to push some refs to 'ssh://git@my.domain/proj/repo.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>funny that doesn't hang...</p>
","4","348545","0","0"
"48103592","","2018-01-04 21:07:56","4","217","<git><git-branch>","Reverse a relationship between git branches","<p>Say you had a git branch named <em>branch A</em> and you created a new branch derived from branch a named <em>branch B</em>.</p>

<p>Would it be possible through a series of commands(rebase?) to have branch A be derived from branch B? If so, how would this affect other branches already derived from the branch A? How would the commit history of the branches be affected?</p>

<p>To give the question context:</p>

<p>I have a staging branch(B) and a branch that I derive task branches from(A). I am seeing that every time I pull request A into B, when I compare B to A on GitHub, the changes that I just pull requested into B are showing up as differences. To fix this I keep having to locally merge A into B (which doesn't change any files) to get the comparison of the two to show up as having no differences. I want to reverse their relationship to fix this.</p>

<p>Feel free to answer this question in a way that simply solves the problem I listed here.</p>

<p>Visual:</p>

<p>I have:</p>

<pre><code>   *(Feature Branches)
  /
 /
A (Developing Branch)
 \
  \
   B (Staging Branch)
</code></pre>

<p>I want:</p>

<pre><code>B (Staging Branch)
 \
  \
   A (Developing Branch)
    \
     \
      * (Feature Branches)
</code></pre>
","10","","0","0"
"31784863","512783","2015-08-03 10:19:37","2","721","<git><git-branch>","Weird git branch name","<p>I was trying to run the following command:</p>

<pre><code>git branch --set-upstream-to=staging
</code></pre>

<p>And the result was not what i was expected. Instead of setting the upstream branch it created a new branch called <code>--set-upstream-to=staging</code> and the problem is that i cannot remove it.</p>

<p>Is there any way to make the </p>

<pre><code>git branch -d --set-upstream-to=staging
</code></pre>

<p>command run successfully?</p>

<p>The error I get when I try to run the above command is:
    error: unknown switch `s'</p>

<p><a href=""https://i.stack.imgur.com/obcBr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/obcBr.png"" alt=""enter image description here""></a></p>

<p>I can confirm the existence of the branch when i run <code>git branch</code></p>

<ul>
<li>ft-cell_formatting
master
staging
—-set-upstream-to=staging
—set-upstream-to=staging</li>
</ul>
","0","512783","",""
"49173158","3585078","2018-03-08 12:30:44","0","28","<github><git-branch><git-fork>","synching git repo with the original","<p>I'm somewhat new to Git. I tried to google but couldn't find a clear answer. So here's the issue.</p>

<p>I have a forked repo from another repo</p>

<p>Original repo: <a href=""https://github.com/org/original"" rel=""nofollow noreferrer"">https://github.com/org/original</a>
Forked repo: <a href=""https://github.com/user/original"" rel=""nofollow noreferrer"">https://github.com/user/original</a></p>

<p>And then let's say original repo master branch gets updated with new changes. </p>

<p>Now forked repo is not up to date. </p>

<p>How can I sync my forked repo with the original repo most recent state?</p>

<p>I would like to know this given that.</p>

<p>Scenario1: I have not done any changes to my forked repo.
Scenario2: I have done some changes to my forked repo.</p>

<p>Your feedback is highly appreciated. I'm sure a lot of new Git users will have the same question and I couldn't find a straightforward answer to this.</p>
","2","3585078","",""
"49187351","8361292","2018-03-09 05:46:34","1","296","<git><github><git-branch><git-checkout><vcs-checkout>","git checkout branch without checking files","<p>I have huge size of git repo in my local system with 10 different branches,
In those 10 branch the master repository is around 2 GB. when i switch from any branch1 to master branch, Git is trying to checkout all files in local system itself, how to reduce the time here.</p>

<pre><code>  [linux@linux_001 myrepo]$ time git checkout master
   Checking out files: 100% (25765/25765), done.
   Switched to branch 'master'

   real    0m55.617s
   user    0m35.597s
   sys     0m5.002s
</code></pre>

<p>Here i have reduce 55 sec</p>
","0","8361292","0","0"
"49237823","9067949","2018-03-12 14:34:25","4","1609","<git><widget><git-branch><windows-explorer>","Is there a widget which can show the current branch of a git directory in windows explorer?","<p>I'd like to have the information of the current branch of a git directory displayed in the windows explorer window.</p>

<p>That to avoid having to open a GitBash and do a <code>git status</code> or avoid checking another window (such as GitHub Desktop) to get the name of the current branch I'm on.</p>

<p>Also, I don't want to have to perform a right-click too. </p>

<p>Is there a widget or an add-on that can do this ? </p>

<p>I'm on windows 7.</p>

<p>Thanks in advance !</p>
","1","9067949","",""
"49245877","7220869","2018-03-12 23:17:16","2","3100","<eclipse><git><git-branch><git-reset>","How to revert back to a fresh branch on git (removing all uncommitted changes)","<p>How can I revert/delete all my changes that I did manually on local.</p>

<p>Example I have 2 branches</p>

<pre><code>1) master branch
2) branch2
</code></pre>

<p>I checked out branch 2 and started to do some changes locally. I accidentally replaced a word for all the files. So now all my files are unsynced.</p>

<p>I want to start fresh again. (What ever I have in branch 2 that was committed and pushed) and remove all my local changes.</p>

<p>I've tried </p>

<pre><code>git pull branch2
git reset --hard
git --hard branch2
git checkout .
</code></pre>

<p>But my recent changes are still existing in my local. Is there a command to revert this or do I have to clone the branch and start from there?</p>

<p>PS all my local changes were not committed at all.</p>

<p>Thank you</p>
","1","7220869","",""
"48232343","9210472","2018-01-12 18:49:36","0","8496","<git><git-branch><git-commit><git-clean><git-untracked>","How to revert git clean","<p>I have a git flow question.</p>

<p>I've worked in my code on a local 'developer' branch in git. Then after work was finished I did an add of all changed files and after that I committed it on my local branch 'developer'. Then I wanted to checkout to my local 'master' branch to pull the new version from remote 'master' branch to after that merge the new remote version with mine from the 'developer'.</p>

<p>But the checkout to the local 'master' from the local 'developer' was aborted because of some untracked files. Unfortunately I used <code>git clean -f -x -d</code> to clean my repository and this deleted all the files even the committed ones. I thought this will only delete the untracked ones. However I'm able to see my commit on git extensions tool but by using <code>git status</code> it shows that a lot of files were deleted.</p>

<p>I know that a clean is not revertable, but as I did a commit before cleaning up may I somehow ""ignore"" the clean I did by reverting to my last commit I did on my local developer?</p>

<p>Hopefully there is a possibility.</p>

<p>Many many thanks in advance.</p>

<p>EDIT: I did the things provided and it worked. I am at my old commit which has the changes made. But unfortunately the git clean deleted some folders which are required for the project. Now some build paths are missing which are required. This folders are empty ones but still needed for project flow. How can I readd this empty folders deleted by the clean I made? A pull from origin/master didn't work. There the folders are available.</p>

<p>Regards,
alfi92. </p>
","2","9210472","",""
"21680838","2733366","2014-02-10 15:13:52","1","47","<git><github><git-branch>","Differece beetween git merge and in github pull request","<p>I am only starting to work with git hub. I will be very thankful for help with my question.I can't understand difference between, git fetch -> git merge -> git push, which you do local in you computer and when you push you branch, than in github.com you create  pull request, and click merge. Maybe I do something wrong, and that is why i can't understand the difference. Sorry for this questions and thank you for your helps.</p>
","0","2733366","0","0"
"31533611","4973421","2015-07-21 08:10:13","0","83","<git><git-branch>","Manage folder independent to branches in git","<p>My repo looks like this:</p>

<pre><code>bin/
out/
src/
</code></pre>

<p>The whole repo is split in two branches, which manage the folders <code>out</code> and <code>src</code>. Now I'd like to have the folder <code>bin</code> static across branches, so that the newest commit will appear in either of the banches.</p>

<p>I already looked into <code>excludesfile</code>, but it doesn't quite do what I need.</p>

<p>Any suggestions in how to set it up?</p>

<p>An alternative would be to configure commit, so that changes in <code>bin</code> are committed to every branch in the repo.</p>
","4","4973421","",""
"40768873","2000907","2016-11-23 15:54:14","3","801","<git><git-branch><git-rebase><cherry-pick><branching-strategy>","How to merge a git branch to multiple release branches","<p>After a tfs migration (totally different concept of branches) I have to merge fixes to multiple release branches, but the branches are not identical, they are mostly similar, but different products(eg different branding, conn strings etc. ), so i can't use nvie gitflow one product branching strategy here.</p>

<p><a href=""https://i.stack.imgur.com/gTxZC.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gTxZC.png"" alt=""enter image description here""></a></p>

<p><a href=""https://github.com/MrKekson/stackoverflow_question/network"" rel=""nofollow noreferrer"">https://github.com/MrKekson/stackoverflow_question/network</a></p>

<p>here you can find a greatly simplified branch structure, and basically I want to merge the hotfix1 branch from b1, to tesztb3, but without the previous commits on b1 (c3, c4).</p>

<p>Cherrypicking or rebase could help, but i did not managed to get it done, and i did not have a lot of experience in advanced git usage yet. So please advise me on how to do it, or what should i change to get it done.</p>
","1","2000907","",""
"66596297","7647321","2021-03-12 08:07:45","1","1387","<git><git-branch><git-history><git-history-graph>","Determine parent branch/commit from git history","<p>I've got following history in git:</p>
<pre><code>* 02e085a (master) readme update
| * 1d940da (HEAD -&gt; b1) search.py
| | * 7aaa12d (b2) file2
| |/
| * 7be9db9 file1
|/
* 22601c0 initial commit
</code></pre>
<p>Now I'm on b2 and I would like to get the point, where b2 branched off (7be9db9). The algo is following:</p>
<ol>
<li>get next commit</li>
<li>check branches the commit belongs to</li>
<li>if only current branch, continue with 1. step else 4.step</li>
<li>the commit belongs to multiple branches, this must be the point, where we branched off</li>
</ol>
<p>However, if I want to do the same for b1, I end up at the same position - 7be9db9. But I would expect to end up at 22601c0, as this was the point, where b1 branched off. The history has been created like this.</p>
<p>initial commit
branch from master (b1) and commit file1
branch from b1 (b2) and commit file2
checkout b1 and commit search.py</p>
<p>I'm afraid the way git is designed, it's not possible to distinguish, whether commit 7be9db9 (file1) has been created by b1 or b2, am I correct? So it's not possible to say, whether the parent of b1 is master or b2?</p>
<p>Thanks for confirmation.</p>
","7","7647321","",""
"40779859","1978379","2016-11-24 07:00:23","-1","133","<git><git-branch><git-config>","Configure git to throw error on using certain characters in branch name","<p>I recently figured that my organization's build process fails to succeed if your branch contains <strong>/</strong> in the branch name because the build process generates a file with filename <code>&lt;blah&gt;_&lt;branch_name&gt;.type</code> in folder say RootFolder. </p>

<p>eg. Branch name: dev/someDev/someBranch</p>

<pre><code>   FileName: `&lt;blah&gt;_dev/someDev/someBranch.type`
</code></pre>

<p>Since branch name contains <strong>/</strong>, the file actually gets created at <code>RootFolder\&lt;blah&gt;_dev\someDev\</code> with the file name being <code>someBranch.type</code>.
Now the process expecting the file in RootFolder doesn't find the file which causes the build process to fail.</p>

<p>So, is there a way I can configure git to throw an error in case the branch name contains certain illegal characters?</p>

<p>NOTE: At this is point I cannot change the build process. Also, I know there are several other ways to name a branch say: <code>dev-someDev-someBranch</code> by which we can avoid hitting this build failure but I am curious to see if I can configure git in the above manner.</p>
","2","1978379","0","0"
"40784842","3079520","2016-11-24 11:08:03","11","3205","<git><git-branch><git-fetch>","git fetch branches with specified prefix","<p>I have following branches in remote origin.</p>

<pre><code>ft_d_feature_abc
ft_d_feature_xyz
ft_d_feature_lam
ft_d_feature_ton
ft_m_feature_mak
ft_m_feature_echo
ft_m_feature_laa
ft_m_feature_pol
</code></pre>

<p>I want to fetch branches which are starting with <code>ft_d</code>. How can I achieve this with <code>git fetch</code>?
My Git version is 1.7.9.5.</p>
","0","3079520","",""
"48285463","9225276","2018-01-16 16:10:33","4","1007","<git><version-control><git-branch><git-checkout>","What would be the difference between `git branch -f master HEAD~` and `git reset HEAD~`?","<p>See title really. </p>

<p>Assuming we're already on the master branch:</p>

<p>What would be the difference between <code>git branch -f master HEAD~</code> and <code>git reset HEAD~</code>? </p>

<p>As far as I can tell both of these commands move the branch/HEAD pointers one up in the commit chain, but are there any other differences between these two worth noting?</p>
","4","9225276","",""
"48301542","6683853","2018-01-17 12:46:25","1","1665","<python><git><bitbucket><branch><git-branch>","Python way to run git log command to fetch details of repository without cloning it","<p>Is there a Python way to run git log command to fetch details of repository without cloning it?
I want to run commands on bitbucket server to find all activities of a repository.</p>
","2","6683853","",""
"3133449","293511","2010-06-28 14:54:13","212","73925","<git><git-rebase><git-merge><git-branch><git-checkout>","Why does git-rebase give me merge conflicts when all I'm doing is squashing commits?","<p>We have a Git repository with over 400 commits, the first couple dozen of which were a lot of trial-and-error. We want to clean up these commits by squashing many down into a single commit. Naturally, git-rebase seems the way to go. My problem is that it ends up with merge conflicts, and these conflicts are not easy to resolve. I don't understand why there should be any conflicts at all, since I'm just squashing commits (not deleting or rearranging). Very likely, this demonstrates that I'm not completely understanding how git-rebase does its squashes.</p>

<p>Here's a modified version of the scripts I'm using:</p>

<hr>

<p>repo_squash.sh (this is the script that is actually run):</p>

<hr>

<pre><code>rm -rf repo_squash
git clone repo repo_squash
cd repo_squash/
GIT_EDITOR=../repo_squash_helper.sh git rebase --strategy theirs -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<hr>

<p>repo_squash_helper.sh (this script is used only by repo_squash.sh):</p>

<hr>

<pre><code>if grep -q ""pick "" $1
then
#  cp $1 ../repo_squash_history.txt
#  emacs -nw $1
  sed -f ../repo_squash_list.txt &lt; $1 &gt; $1.tmp
  mv $1.tmp $1
else
  if grep -q ""initial import"" $1
  then
    cp ../repo_squash_new_message1.txt $1
  elif grep -q ""fixing bad import"" $1
  then
    cp ../repo_squash_new_message2.txt $1
  else
    emacs -nw $1
  fi
fi
</code></pre>

<hr>

<p>repo_squash_list.txt: (this file is used only by repo_squash_helper.sh)</p>

<hr>

<pre><code># Initial import
s/pick \(251a190\)/squash \1/g
# Leaving ""Needed subdir"" for now
# Fixing bad import
s/pick \(46c41d1\)/squash \1/g
s/pick \(5d7agf2\)/squash \1/g
s/pick \(3da63ed\)/squash \1/g
</code></pre>

<hr>

<p>I'll leave the ""new message"" contents to your imagination. Initially, I did this without the ""--strategy theirs"" option (i.e., using the default strategy, which if I understand the documentation correctly is recursive, but I'm not sure which recursive strategy is used), and it also didn't work. Also, I should point out that, using the commented out code in repo_squash_helper.sh, I saved off the original file that the sed script works on and ran the sed script against it to make sure it was doing what I wanted it to do (it was). Again, I don't even know why there <em>would</em> be a conflict, so it wouldn't seem to matter so much which strategy is used. Any advice or insight would be helpful, but mostly I just want to get this squashing working.</p>

<h2>Updated with extra information from discussion with Jefromi:</h2>

<p>Before working on our massive ""real"" repository, I used similar scripts on a test repository. It was a very simple repository and the test worked cleanly.</p>

<p>The message I get when it fails is:</p>

<pre><code>Finished one cherry-pick.
# Not currently on any branch.
nothing to commit (working directory clean)
Could not apply 66c45e2... Needed subdir
</code></pre>

<p>This is the first pick after the first squash commit. Running <code>git status</code> yields a clean working directory. If I then do a <code>git rebase --continue</code>, I get a very similar message after a few more commits. If I then do it again, I get another very similar message after a couple dozen commits. If I do it yet again, this time it goes through about a hundred commits, and yields this message:</p>

<pre><code>Automatic cherry-pick failed.  After resolving the conflicts,
mark the corrected paths with 'git add &lt;paths&gt;', and
run 'git rebase --continue'
Could not apply f1de3bc... Incremental
</code></pre>

<p>If I then run <code>git status</code>, I get:</p>

<pre><code># Not currently on any branch.
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#
# modified:   repo/file_A.cpp
# modified:   repo/file_B.cpp
#
# Unmerged paths:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
# both modified:      repo/file_X.cpp
#
# Changed but not updated:
#   (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
# deleted:    repo/file_Z.imp
</code></pre>

<p>The ""both modified"" bit sounds weird to me, since this was just the result of a pick. It's also worth noting that if I look at the ""conflict"", it boils down to a single line with one version beginning it with a [tab] character, and the other one with four spaces. This sounded like it might be an issue with how I've set up my config file, but there's nothing of the sort in it. (I did note that core.ignorecase is set to true, but evidently git-clone did that automatically. I'm not completely surprised by that considering that the original source was on a Windows machine.)</p>

<p>If I manually fix file_X.cpp, it then fails shortly afterward with another conflict, this time between a file (CMakeLists.txt) that one version thinks should exist and one version thinks shouldn't. If I fix this conflict by saying I do want this file (which I do), a few commits later I get another conflict (in this same file) where now there's some rather non-trivial changes. It's still only about 25% of the way through the conflicts.</p>

<p>I should also point out, since this might be very important, that this project started out in an svn repository. That initial history very likely was imported from that svn repository.</p>

<h2>Update #2:</h2>

<p>On a lark (influenced by Jefromi's comments), I decided to do the change my repo_squash.sh to be:</p>

<pre><code>rm -rf repo_squash
git clone repo repo_squash
cd repo_squash/
git rebase --strategy theirs -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<p>And then, I just accepted the original entries, as is. I.e., the ""rebase"" shouldn't have changed a thing. It ended up with the same results describe previously.</p>

<h2>Update #3:</h2>

<p>Alternatively, if I omit the strategy and replace the last command with:</p>

<pre><code>git rebase -i bd6a09a484b8230d0810e6689cf08a24f26f287a
</code></pre>

<p>I no longer get the ""nothing to commit"" rebase problems, but I'm still left with the other conflicts.</p>

<h2>Update with toy repository that recreates problem:</h2>

<p>test_squash.sh (this is the file you actually run):</p>

<pre><code>#========================================================
# Initialize directories
#========================================================
rm -rf test_squash/ test_squash_clone/
mkdir -p test_squash
mkdir -p test_squash_clone
#========================================================

#========================================================
# Create repository with history
#========================================================
cd test_squash/
git init
echo ""README""&gt;README
git add README
git commit -m""Initial commit: can't easily access for rebasing""
echo ""Line 1""&gt;test_file.txt
git add test_file.txt
git commit -m""Created single line file""
echo ""Line 2""&gt;&gt;test_file.txt 
git add test_file.txt 
git commit -m""Meant for it to be two lines""
git checkout -b dev
echo Meaningful code&gt;new_file.txt
git add new_file.txt 
git commit -m""Meaningful commit""
git checkout master
echo Conflicting meaningful code&gt;new_file.txt
git add new_file.txt 
git commit -m""Conflicting meaningful commit""
# This will conflict
git merge dev
# Fixes conflict
echo Merged meaningful code&gt;new_file.txt
git add new_file.txt
git commit -m""Merged dev with master""
cd ..

#========================================================
# Save off a clone of the repository prior to squashing
#========================================================
git clone test_squash test_squash_clone
#========================================================

#========================================================
# Do the squash
#========================================================
cd test_squash
GIT_EDITOR=../test_squash_helper.sh git rebase -i HEAD@{7}
#========================================================

#========================================================
# Show the results
#========================================================
git log
git gc
git reflog
#========================================================
</code></pre>

<p>test_squash_helper.sh (used by test_sqash.sh):</p>

<pre><code># If the file has the phrase ""pick "" in it, assume it's the log file
if grep -q ""pick "" $1
then
  sed -e ""s/pick \(.*\) \(Meant for it to be two lines\)/squash \1 \2/g"" &lt; $1 &gt; $1.tmp
  mv $1.tmp $1
# Else, assume it's the commit message file
else
# Use our pre-canned message
  echo ""Created two line file"" &gt; $1
fi
</code></pre>

<p>P.S.: Yes, I know some of you cringe when you see me using emacs as a fall-back editor.</p>

<p>P.P.S.: We do know we'll have to blow away all of our clones of the existing repository after the rebase. (Along the lines of ""thou shalt not rebase a repository after it's been published"".)</p>

<p>P.P.P.S: Can anyone tell me how to add a bounty to this? I'm not seeing the option anywhere on this screen whether I'm in edit mode or view mode.</p>
","13","293511","0","0"
"21901943","782482","2014-02-20 08:18:30","6","8953","<git><git-branch><git-rebase><git-extensions><git-gc>","Failed to run repack in git gc","<p>Tried below command and facing error.</p>
<pre><code>&gt; git gc
Counting objects: 6342699, done.
warning: suboptimal pack - out of memory
fatal: Out of memory, malloc failed (tried to allocate 239971384 bytes)
error: failed to run repack
</code></pre>
<p>I have tried</p>
<ol>
<li><p><code>git config --global pack.windowMemory 256m</code></p>
</li>
<li><p><code>git repack -a -f -d</code></p>
</li>
<li><p>update the latest git extension</p>
</li>
<li><p><code>git gc --aggressive --prune=now</code></p>
</li>
</ol>
<p>I have tried so many options. But still my facing this issue. Any idea why I'm getting this error?</p>
","6","782482","",""
"31579898","5134320","2015-07-23 06:40:43","1","109","<git><github><git-branch><branching-and-merging>","How to find whether a file is present in multiple branches in git","<p>Is there a way in git to find whether a file is present in multiple branches or not? If so list the branch names. Please provide help on this.</p>
","1","5134320","",""
"48351553","1561783","2018-01-20 00:54:26","1","140","<git-branch><git-merge>","git branch -vv seems to contradict itself when trying to work out whether by how many commits it is ahead/behind when tracking with remote branches","<pre><code>$ git status
On branch CurrAsOf18Jan2018
Your branch is up to date with 'remotes/bitbucketFrmWin/master'.

nothing to commit, working tree clean
</code></pre>

<p><strong>But I know that my bitbucket repo is ahead by a couple of commits Ques:Do I have to always do a git fetch --all so that my local git can be sure - I thought I was tracking my remote repo bitbucketFrmWin - Anyways I do the following .....</strong></p>

<pre><code>$ git fetch --all
Fetching bitbucketFrmWin
From https://bitbucket.org/FreeFries/simplcontactsvcf
   50d1fc6..d79d834  master     -&gt; bitbucketFrmWin/master
</code></pre>

<p><strong>Good now my local repo can check against the fetched remotes whether it is ahead/behind</strong></p>

<pre><code>$ git status
On branch CurrAsOf18Jan2018
Your branch is behind 'remotes/bitbucketFrmWin/master' by 5 commits, and can be fast-forwarded.
 nothing to commit, working tree clean
</code></pre>

<p><strong>Okay I am happy with that it is what I thought</strong></p>

<pre><code>$ git branch -vv
* CurrAsOf18Jan2018             50d1fc6 [remotes/bitbucketFrmWin/master: behind 5] Pedantic but done - gitNotes.txt

  bitbucketFrmWin/master        58470cd [CurrAsOf18Jan2018: behind 7] This is really crazy - Spent more than a week - Singleton still gives null pointer inJdbcExample2
</code></pre>

<p><strong>Now this is what throws me <code>[CurrAsOf18Jan2018: behind 7] (see last output line above)</code> ... It should have said ahead by 5 - after all it is comparing the same remote repo branch. What am I missing in my understanding here ?</strong></p>

<pre><code>$ git merge --no-commit --ff-only d79d834
Updating 50d1fc6..d79d834
Fast-forward
 .gitignore                    |   2 ++
 gitNotesUpgradeInstall.txt    |  38 ++++++++++++++++++++++++++++++++++++++
 sqliteData/testtestdb.sqlite3 | Bin 278528 -&gt; 0 bytes
 3 files changed, 40 insertions(+)
 create mode 100644 gitNotesUpgradeInstall.txt
 delete mode 100644 sqliteData/testtestdb.sqlite3
</code></pre>

<p><strong>I go ahead with the git fetch it fast-forward's my local branch - I tell it not to commit - but ignores my request and commits anyways - Why ?</strong></p>

<p><strong>Also my bitbucket branch master is actually already ahead at commit d79d834 but ""git branch -vv"" above does not show that commit sha signature in it's listing despite the fetch - Why ?</strong></p>

<pre><code>$ git status
On branch CurrAsOf18Jan2018
Your branch is up to date with 'remotes/bitbucketFrmWin/master'.
nothing to commit, working tree clean
</code></pre>

<p><strong>Nevertheless git status knows now that it has caught up with my remote branch above and is happy 
If someone can throw light on the questions posed above as to whether these are bugs or misunderstanding in the git work flow above - I would be grateful. Thanks.</strong></p>
","0","1561783","0","0"
"66623005","13742862","2021-03-14 09:42:13","0","229","<git><git-branch><git-reset>","git reset all branches to origin?","<p>I want to reset multiple branches to their origin version. So,</p>
<pre><code>git fetch --all
for b in master work; do
  git switch $b; git reset --hard origin/$b
done
</code></pre>
<p>But simpler? I've thought about deleting all branches so they get recreated, but one has to be checked out and will error out.</p>
<p><strong>Edit</strong>: the scenario is that <code>origin</code> often rewrites multiple branches with impunity. The answer below also gave me the idea of saving various states to backup refs -- which is a nice bonus.</p>
","6","13742862","",""
"3289811","184326","2010-07-20 12:20:46","5","9006","<svn><git><git-svn><branch><git-branch>","git-svn branching: how to configure git config","<p>a few months ago i configured a git with an svn repository. Until now i only used the svn repository to keep up-to-date with the supplied application on it. But now i also want to commit stuff back. To do this every feature i'm going to commit needs to be in a separate branch. I read about how you should create a new branch etc. But i think i mis-configured my git, i don't have any branch information etc i think i only have the trunk info. This is how my svn repository has been set up in my git config:</p>

<pre><code>[remote ""origin""]
    url = url-of-git-repository
    fetch = +refs/heads/*:refs/remotes/origin/*
[svn-remote ""svn""]
    url = url-of-svn-repository/trunk
    fetch = :refs/remotes/git-svn
[branch ""master""]
    merge = refs/heads/master
    remote = origin
... other branch information below (these are git branches)
</code></pre>

<p>Now as you can see my svn-remote url goes directly to trunk. I read about adding this:</p>

<pre><code>branches = branches/*:refs/remotes/*
</code></pre>

<p>but when i create a new branch then it will be adding it to trunk/branches/. When i don't add the line then it doesn't know what the destination is of the branch. </p>

<p>Any idea how to solve this without breaking the existing branches, code, etc.?</p>

<p>greets,
Daan</p>
","0","184326","0","0"
"22018328","311420","2014-02-25 15:12:55","0","136","<git><git-svn><git-branch>","push from git/svn repo into a git/branch at specific commit","<p>At one time, the SVN repo was cloned at commit c75e75c. One team worked on git/master, another team worked on SVN. </p>

<ul>
<li>We are using git-svn on the svn repo.</li>
<li>I could merge <code>svn/trunk</code> into <code>git/master</code> but this would terribly
awful. So I prefer to push  all the commits after c75e75c into the <code>branch/app_v2</code></li>
<li>The git/branch is simply a copy of svn/trunk after commit c75e75c.</li>
</ul>

<p><img src=""https://i.stack.imgur.com/zJSDT.png"" alt=""enter image description here""></p>

<p>Tried with <code>git push &lt;remotename&gt; &lt;commit SHA&gt;:&lt;remotebranchname&gt;</code> <a href=""https://stackoverflow.com/questions/3230074/git-pushing-specific-commit"">How can I pushing specific commit to a remote, and not the previous commits?</a> . I created a remote branch/app_v2. But the commits SHA on git-svn and git repo are not the same. Even they have a common history.</p>

<p>How to push a a range of commits ( between c75e75c and HEAD) and push to remote branch ( branch/app_v2 ) ?</p>
","3","311420","",""
"22027199","2784829","2014-02-25 22:00:45","1","75","<git><branch><git-branch><rebase><git-rebase>","rebase conflicted, merged commits in git","<p>I have just finished developing a new feature on its own branch (branch <code>feature</code>) consisting of a dozen or so commits. After running all my tests, I merged this branch into <code>master</code> and resolved <em>many</em> merge conflicts. The process took quite awhile. Only <em>after</em> I finished merging do I realize that I never rebased any of the commits in the <code>feature</code> branch, which is generally my practice.</p>

<p>In short, now I have:</p>

<pre><code>(feature)   B-C-D
(master) A-/     \-E (merge commit in master)
</code></pre>

<p>but I want to have:</p>

<pre><code>   F
A-/ \-D
</code></pre>

<p>where F = B + C + D ""squashed"" together.</p>

<p>The way I was going about this was to create another branch <code>master_prime</code> from <code>master</code> starting at commit <code>A</code>. Then, switch to the <code>feature</code> branch and accomplish all the commit squashing I want. Finally, merge <code>feature</code> into <code>master_prime</code>. The only issue is that I'll have to resolve all the merge conflicts again. Is there a way I can replay/pick out the merge commit <code>E</code> so that this isn't necessary?</p>

<p>I have also attempted <code>git rebase --preserve-merges -i &lt;A&gt;</code> as well as <code>git rebase -i &lt;A&gt;</code>, which don't allow me to rebase the commits I want or make me deal with  merge conflicts again, respectively.</p>
","1","2784829","0","0"
"22031005","826486","2014-02-26 03:17:38","1","627","<git><branch><git-branch><reparenting>","Set parent for first commit on git repository","<p>We track a vendor's upstream version releases of a software product in git repositories we have set up. We make changes to this product in cloned git repositories. When a new version is released we <code>git merge</code> the changes into our custom repository and fix any merge conflicts between their changes and our changes.</p>

<p>The vendor provides releases in our local language and a worldwide language. We have only been tracking the local language but now after 10 merged releases we have realised that we need to be tracking the worldwide language so we can bring in changes from other vendors integrating with this software.</p>

<p>The commit history looks like this. Each <code>\</code> is a merge between the two repositories.</p>

<pre><code>local A - B - C - D
        \       \
   custom E - F - G
</code></pre>

<p>We need it to look something like</p>

<pre><code>global X - Y - Z
        \
local    A - B - C - D
          \       \
custom     E - F - G
</code></pre>

<p>Is <a href=""https://github.com/MarkLodato/git-reparent"" rel=""nofollow noreferrer"">git reparent</a> the answer for this or something else? I've looked at <a href=""https://stackoverflow.com/questions/4981052/how-to-re-parent-in-git"">how to re-parent in Git</a> and <a href=""https://stackoverflow.com/questions/3810348/setting-git-parent-pointer-to-a-different-parent"">Setting git parent pointer to a different parent</a> but I still wasn't clear on if this was the right thing to do.</p>
","1","826486","",""
"49392503","9524765","2018-03-20 19:18:03","0","1098","<git><jenkins><git-branch><git-refspec>","Jenkins git Refspec to build master and any v* branches","<p>Our developers use temporary branches but I only want to build any commits to <code>master</code> and any <code>v*</code> branches (e.g. <code>v1.0</code>, <code>v1.0</code>, <code>v1.1</code>, etc.)</p>

<p>I am trying the following in the Refspec field:</p>

<pre><code>+refs/heads/master:refs/remotes/origin/master 
+refs/heads/v*:refs/remotes/origin/v*
</code></pre>

<p>but jenkins kicks out the following error:</p>

<pre><code>stderr: fatal: Invalid refspec '+refs/heads/v*:refs/remotes/origin/v*'
</code></pre>
","0","9524765","",""
"22148582","417629","2014-03-03 13:53:58","4","6372","<git><git-branch><git-pull><git-remote>","Why can't I git pull from a remote?","<p>I'm trying to do a <code>git pull</code> from a remote repo on WP Engine, and running into a problem.</p>

<pre><code>$ git pull production master
fatal: Couldn't find remote ref master
$ fatal: The remote end hung up unexpectedly
</code></pre>

<p>I ran the following for more info;</p>

<pre><code>$ git branch -a
  master
* wpengine
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>And then tried;</p>

<pre><code>$ git pull production origin/master
fatal: Couldn't find remote ref origin/master
$ fatal: The remote end hung up unexpectedly
</code></pre>

<p>And also;</p>

<pre><code>$ git pull production remotes/origin/master
fatal: Couldn't find remote ref remotes/origin/master
$ fatal: The remote end hung up unexpectedly
</code></pre>

<p>Am I referencing the remote branch that I want to pull incorrectly, or is there a problem with WP Engine that I need to solve?</p>
","10","417629","0","0"
"66943401","11556211","2021-04-04 16:22:41","0","47","<git><commit><git-branch><git-commit><branching-and-merging>","git commit -a -m gives error for file not being tracked","<p>I am learning to work with git and I'm playing around with branching.
I created a file &quot;test.rb&quot; and committed a version on a 'testing' branch.</p>
<p>Being on 'master' I use <code>git commit -a -m 'msg'</code> and get this message:</p>
<pre><code>On branch master
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        test.rb

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
</code></pre>
<p>I cannot understand why, since the '-a' flag should add everything to staging and commit it.</p>
<p>What am I missing?
Thanks !</p>
","2","11556211","",""
"31841880","129638","2015-08-05 20:06:46","0","59","<git><git-branch><guard>","Have guard skip actions when the git branch has changed","<p>I run <a href=""http://guardgem.org/"" rel=""nofollow"">guard</a>, and also switch git branches fairly often. When I switch branches guard runs a whole bunch of actions because many files have changed. Would there be a way for guard to know that files have changed because of a change in git branch, and to skip the actions for that first time after the switch?</p>
","1","129638","",""
"49412611","9524340","2018-03-21 17:10:07","1","77","<git><merge><branch><git-branch>","git merge master after reverting the merge","<p>I have a branch which was created from <code>master</code>.</p>

<p>I did some work in the branch. Now I decided to <code>pull request</code> the branch into the <code>master</code>, but there has happened a conflict. I decided to tackle the conflict by merging the <code>master</code> into the branch and then the branch into the <code>master</code>.</p>

<p>Then when I did it I got the point: I should have deleted all the conflict places before merging the <code>master</code> into the branch. So I reverted the commit which was about merging the <code>master</code> into the branch, then I deleted conflict places in the branch.</p>

<p>So, now time come to merging the <code>master</code>. And when I try it I see the message <code>Already up-to-date.</code> even though the master is not merged in the branch (since I reverted the commit which did it).</p>

<p>How should I merge the <code>master</code> into my branch in the case?</p>
","0","9524340","",""
"66966356","11204282","2021-04-06 09:50:18","0","131","<git><visual-studio-2019><git-branch><vsix>","Visual studio extension setting the git branch","<p>I am writing an extension (VSIX) in VS and one feature is to change the GIT branch. GIT is integrated in VS (2019) and also the method to change a branch should be present but I cannot find any documentation: is there a method to change the GIT-Branch</p>
<p>Thanks</p>
","5","11204282","",""
"49442695","6751456","2018-03-23 05:05:10","0","72","<git><git-branch>","get name of a branch from which a (current) branch is created in git","<p>Lets say I created a branch called <code>feature1</code> from <code>develop</code> branch.</p>

<p>Also, I created a <code>issue123</code> branch from <code>feature1</code> branch.</p>

<p>Now I want to know that <code>feature1</code> is created from <code>develop</code> branch, and similarly <code>issue123</code> branch is created from <code>develop</code> branch.</p>

<p>How can I do that? </p>

<p>Any help is very much appreciated. Thanks.</p>
","4","6751456","",""
"66992899","885312","2021-04-07 19:24:51","1","72","<git><git-branch><git-rebase>","How do I divide a single, large git branch into two successive branches?","<p>I have some branches in git that look like:</p>
<pre><code>master             b1
↓                   ↓ 
A -- B -- C -- D -- E
</code></pre>
<p>But <code>D ... E</code> turned out to be an unexpectedly nontrivial change, so I would like to see this instead:</p>
<pre><code>master    b3
↓         ↓
A -- B -- C      b2
           \     ↓
            D -- E
</code></pre>
<p>...so that <code>b2</code> can be reviewed separately, merged into <code>b3</code>, which is then merged to master.</p>
<p>I tried:</p>
<pre><code>git checkout b1
git checkout -b b2
git rebase C
</code></pre>
<p>but got merge conflicts. That indicates to me that's that wrong way to do it, since <code>C ... D</code> were all applied successively to each other and should never conflict. What incantation do I need?</p>
","0","885312","0","0"
"32199335","800608","2015-08-25 08:39:54","0","94","<git><git-branch><git-merge><branching-and-merging>","Spurious change when using git diff <base>...<feature>","<p>Github seems to use the triple dot comparison on pull requests, which tricked me today by showing a spurious change between a feature and the base branch.</p>

<p>Here is the base branch (abbreviated):</p>

<pre><code>git show upstream/develop:script.sql
 FOR field IN (
         [001*a], [001*d], [001*y], [001*x], [001*z],
         [004*a],
         [008*a], [008*d], [008*j], [008*l], [008*o],
         [009*a], [009*b], [009*g], [009*x], [009*u],
         [041*a], [041*c],
</code></pre>

<p>Here is the feature branch (abbreviated):</p>

<pre><code>git show feature:script.sql
 FOR field IN (
         [001*a], [001*d], [001*y], [001*x], [001*z],
         [004*a],
         [008*a], [008*d], [008*j], [008*l], [008*o],
         [009*a], [009*b], [009*g], [009*x], [009*u],
         [041*a], [041*c],
</code></pre>

<p>Here is the output from a plain diff:</p>

<pre><code>git diff upstream/develop feature script.sql
</code></pre>

<p>(No output.)</p>

<p>Here is the output from ""changed on feature branch""-triple dot operator diff:</p>

<pre><code>git diff upstream/develop...feature script.sql
  FOR field IN (
          [001*a], [001*d], [001*y], [001*x], [001*z],
+         [004*a],
          [008*a], [008*d], [008*j], [008*l], [008*o],
</code></pre>

<p>Why?</p>

<p>There is no change on this line. Adding <code>-w</code> shouldn't be necessary since the plain diff above was run without it and reported no change.</p>
","0","800608","",""
"3631706","331858","2010-09-02 22:17:35","21","16073","<git><branch><git-branch>","What is this branch tracking (if anything) in git?","<p>After creating a branch with --track (or leaving the default, or --notrack), you later wish to be reminded of what a branch is tracking. Is there a way, other than searching through the .git/config file, to display what a branch is tracking?</p>
","0","331858","0","0"
"60099237","6637004","2020-02-06 16:10:44","1","966","<git><commit><git-branch>","`git branch --contains` does not show branch that originated commit","<p>I wanted to test git branch --contains, so I found a commit from a branch that I had not checked out before, <code>older-branch</code>.</p>

<p>On a different, more current branch (lets call it newer-branch), I did <code>git fetch</code> to make sure I was up-to-date with upstream. Then I did, <code>git branch older-branch --contains COMMITHASH</code></p>

<p>But this did not return older-branch.</p>

<p>Furthermore, when I did <code>git branch --contains COMMITHASH</code> it showed newer-branch however it did not show older-branch in the list. </p>

<p>Confused, I did <code>git checkout older-branch</code> and then <code>git branch contains older-branch --contains COMMITHASH</code> and it returned older-branch! I then did <code>git branch --contains COMMITHASH</code> and it showed older-branch along with the newer branch that I originally tested out these git commands on! </p>

<p>I then switched back to the newer-branch. This time, when I did <code>git branch older-branch --contains COMMITHASH</code> it showed older-branch! Why is this?</p>
","2","6637004","",""
"22413626","943022","2014-03-14 19:03:17","1","1014","<git><git-branch><git-stash>","How do I save work in a (no branch) in git?","<p>I have a project in git. I checked out an earlier commit, now I'm on an un-named branch. I want to save the work here and go back to the latest branch but still be able to come back. How do I do that, is it stash &amp; pop?</p>

<p>Here is what transpired. I realized that I needed to go back to the state of things several months ago. So I ran</p>

<pre><code>$ git log
</code></pre>

<p>and located the commit number, E.G.</p>

<pre><code>commit 1910e8fdf0b37cd5c7a693572bf89767a2615c7d
Author: user account &lt;user@xxx.xxx.xxx&gt;
Date:   Fri Jun 15 15:00:43 2012 -0700

--&gt; WORKING VERSION &lt;--
</code></pre>

<p>At which point I switched to that commit by typing:</p>

<pre><code>$ git checkout 1910e8fdf0b37cd5c7a693572bf89767a2615c7d
</code></pre>

<p>I made a few changes. Now I need to jump back to the latest version but I want to preserve the changes that I made in the earlier version. I don't want to merge them; they should be a separate branch. But I'm not on a branch. When I type ""git branch"" I get this:</p>

<pre><code>$ git branch
* (no branch)
  bias_turn_on_experiment
  hst_persist
  master
</code></pre>

<p>And ""git status"" shows me this:</p>

<pre><code>$ git status
# Not currently on any branch.
# Changes not staged for commit:
#   (use ""git add &lt;file&gt;..."" to update what will be committed)
#   (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)
#
#       modified:   sn102
#       modified:   timIRmisc.asm
#       modified:   timing.def
#
</code></pre>

<p>So how do I save the state of things, go back to master, and then come back to this current state, without effecting any of the other branches? Is it git stash? But then where do I pop it back again? Or maybe git stash branch? I'm not sure. Thanks.</p>
","1","943022","",""
"14746765","2005821","2013-02-07 08:32:47","0","98","<git><git-branch><git-submodules><branching-and-merging>","forking git project for different OS","<p>I have an OSX app which I have build myself in python.  Like many OSX apps it has many (all?) of its dependencies within it.  eg...</p>

<pre><code>./git_repo
└── mac (dir)
    ├── myapp.app (dir)
    │   ├── Frameworks (dir)
    │   ├───MacOS (dir)
    │   ├───Resources (dir)
    │   │   ├──main.py
    │   │   ├──lib1.py
    │   │   ├──lib2.py
            ├─img(dir)
</code></pre>

<p>The directory structure is much larger than this, with many files in each dir, but you get the idea</p>

<p>My first fork will be for Linux, in which I need main.py,lib1.py,lib2.py and the img dir.  I need nothing else in the Resources dir, or any other dir.  I will also be adding Linux specific files which are not require for mac.  The overall dir structure will be much more flat than the mac structure.</p>

<p>After that I will be forking for Windows, with the files I've listed for Linux, and some Windows specific files not required for mac/linux.</p>

<p>I have read the similar threads here but I can't visualize how the overall directory structure will work.
I see a couple of options.</p>

<ol>
<li>Use separate git branches and merge/cherry-pick changes in when required (this may be difficult as the directory structure of all 3 will be completely different</li>
<li>Use git submodules - have been reading up about this, but not sure which components I should make submodules - the common items, or the extras?</li>
<li>use separate repositories - not sure if this is any different to branches</li>
</ol>

<p>Ultimately I just need to track changes for those main files for all 3 OSs whilst keeping the changes separate, and without having to take huge steps when working on a particular OS/branch (eg make file etc)</p>

<p>What is the best way of achieving this?
Thanks for reading</p>
","0","2005821","",""
"48892658","426877","2018-02-20 19:17:45","0","29","<git><git-branch>","how to make git config respect the branch remote push setting","<p>I'm working with a forked repo, using standard naming (my fork is ""origin"", and upstream is ""upstream"").</p>

<p>I'd like to set up two local branches, one called ""master"" to track upstream/master, and another called ""my-forked-master"" to track origin/master.</p>

<p>I'd like git to remember where to push, so that when I'm on the my-forked-master branch I need only type ""git push"" to have git push to origin/master.</p>

<p>I have this in my .git/config file:</p>

<pre><code>[branch ""my-forked-master""]
    remote = origin
    merge = refs/heads/master
    push = refs/heads/master
[branch ""master""]
    remote = upstream
    merge = refs/heads/master
</code></pre>

<p>But when I type ""git push"" in my-forked-master branch, git creates a new remote branch at origin/my-forked-master.  I've tried setting push.default to ""current"" and ""simple"" -- neither works.  Anyway, since I explicitly set my branch's remote and push settings, I thought such defaults would be irrelevant.  (They don't seem to be irrelevant though -- ""simple"" triggers an error about the branch names not matching).</p>

<p>How to I make git obey what's in .git/config and simply push to origin/master even though it doesn't match my local branch name?</p>
","0","426877","",""
"22332232","1476792","2014-03-11 17:32:09","2","112","<git><git-branch>","git - use an existing branch, but copy latest from current branch to it","<p>We have a feature branch (<code>feature</code>) that was used a while ago. The changes from <code>feature</code> were integrated back to the development branch (<code>development</code>). But since then, <code>development</code> has been revised, and <code>feature</code> hasn't, <em>i.e.</em> it has old code. We are revisiting the same feature and would like to reuse this branch. How do we make sure <code>feature</code> = <code>development</code>?</p>

<p>I'm guessing there is probably a duplicate question out there, but I'm just missing the correct terminology.</p>
","1","1476792","",""
"49486366","1408347","2018-03-26 07:45:35","0","797","<git><version-control><branch><git-branch>","Should I create a new git feature branch when I'm developing a project from scratch?","<p>I'm using git by following the github flow document <a href=""https://guides.github.com/introduction/flow/"" rel=""nofollow noreferrer"">here</a>. </p>

<p>The document says that you should create a new branch when you're developing a new feature.</p>

<p>But what if I'm developing a project from scratch? </p>

<p>I mean the project now only has a master branch which contains <code>README.md</code>, <code>package.json</code>, and other basic folders and files. The master branch is not deployable yet.</p>

<p>Should I still create a new branch when developing a new feature at this early stage?</p>

<p>One of the drawbacks of creating a new branch at this time is that <code>feature1</code> branch may have conflicts with <code>feature2</code> branch, which is later developed. And <code>feature2</code> branch becomes highly dependent on <code>feature1</code> branch.</p>

<p>I created an undeployable master branch because I write the code on different computers. Having the code stored on github makes it easy to synchronize the code between the two computers.</p>
","2","1408347","",""
"41451547","1684713","2017-01-03 20:10:50","0","175","<git><branch><git-branch>","Pulling certain git branches in a script","<p>I have a script that starts like this:</p>

<pre><code>#!/bin/sh
for b in `git branch -r | grep -v -- '-&gt;'`; do git branch --track ${b##origin/} $b; done
git fetch --all
</code></pre>

<p>This will fetch all of the remote branches.  I only want to fetch the branches that start with the word ""hotfix"".</p>

<p>How can I do this?</p>

<p>Edit:
At the beginning, I'd also like to delete all of the branches, besides master</p>
","0","1684713","",""
"49512338","3663615","2018-03-27 12:01:05","0","63","<git><github><git-branch>","git File Locking Feature clarification","<p>We have some Unix scripts in Github Repository.I do not see any File Locking feature on github.How to implement in github?Let us say two users downloaded the File1.txt at same time and working on the File1.txt.
user1 completed the development and committed to the github Repository.Now, User2 lost the changes done by User1 on File.txt.</p>
","6","3663615","",""
"3998883","366464","2010-10-22 16:26:41","97","39017","<git><git-branch>","git how to find commit hash where branch originated from","<p>Pretend I branched from my master branch to a topic branch, and then I did a few commits on my topic branch. Is there a command that tells me the commit hash on the master branch that my topic branch originated from?</p>

<p>Ideally, I wouldn't have to know how many commits I've made ( trying to avoid HEAD^5 ).</p>

<p>I've googled and SO'd around and can't seem to land on the answer. Thanks!</p>
","2","366464","0","0"
"4020553","150807","2010-10-26 03:47:32","19","3978","<git><github><git-branch><remote-branch>","Push a branch of a git repo to a new remote (github), hiding its history","<p>My organisation is preparing to release an open-source version of our software using github, however I'm not sure the best way to approach this:</p>

<p>We have two branches <strong>master</strong> and <strong>release</strong>, <strong>master</strong> contains some proprietary components that we have decided not to release, and <strong>release</strong> contains the cleaned-up version that we want to distribute. The problem is, if we just push the <strong>release</strong> branch to github, the proprietary components can be retrieved by looking through the revision history.</p>

<p>I was considering creating a separate repository, copying the HEAD of <strong>relase</strong> into it, doing a <code>git init</code>, and pushing that repository to github. However, we want to retain the ability to cherry-pick certain patches from <strong>master</strong> into <strong>release</strong> in the future, and push those changes up to github.</p>

<p>Is there a way to do this without maintaining two separte repositories?</p>

<p>Thanks!</p>

<p>Update:</p>

<p>To be a little more specific, this is sort-of what our commit history looks like at the moment:</p>

<pre><code>--- o - o - o - o - f - o - o - f - master
             \
              c - c - c - c - c - c - c - REL - f - f
</code></pre>

<p>Where 'o' are commits in the <strong>master</strong>, proprietary branch, 'c' are commits that remove things that should not be published (often not removing entire files, but reworking existing ones not to rely on proprietary components), and 'f' are fixes in <strong>master</strong> that apply to <strong>release</strong> as well, and so have been cherry-picked. REL is a tagged version of the code we deem safe to publish, with no history whatsoever (even previous versions of the release branch, since not all the proprietary material had been removed before the REL tag).</p>
","0","150807","0","0"
"60415023","11533075","2020-02-26 13:26:56","2","2418","<bash><git><git-branch><git-checkout>","-bash: syntax error near unexpected token `(' while git checkout","<p>I Accidentally created a git branch, which contain '()' in branch name. I didn't get any error while creating the branch. But when i tried to <strong>git checkout</strong> to the branch from master, i got the following error.</p>

<pre><code>-bash: syntax error near unexpected token `('
</code></pre>

<p>I tried renaming the branch with <strong>git branch -m</strong> and <strong>git branch -m -f</strong> but both commands returned the same error as given above.</p>

<p>How can i solve this situation ? Is there any method to get the changes i made in that branch??</p>

<p>Thanks in advance</p>
","2","11533075","",""
"49590436","2665148","2018-03-31 17:20:25","0","55","<git><commit><git-branch><pull-request><git-remote>","Keep state of latest git commit--but remove my own, earlier commits I do not want to show.","<p>I could not quite find an answer to this simple problem. I have created a feature branch and have added several commits. No one else has committed. I have already pushed to remote. I wish to present my code as it exists in my latest commit for pull request, as an initial, clean version, without my own, earlier commits. As the code stands right now, the git change history unnecessarily clutters the pull request. </p>

<p>I have done this: </p>

<ol>
<li>creation of of this feature branch</li>
<li>earlier commit -- my own changes</li>
<li>earlier commit -- my own changes</li>
<li>earlier commit -- my own changes</li>
<li>latest commit -- in pull request I want to present this code as initial version</li>
</ol>

<p>How do I remove the history from the intermediate commits 2 through 4, and so show the code as it exists in commit 5 as new code showing changes only from commit 1?</p>

<p>Should I simply remove the files from git and re-add them in a new push? or otherwise clean up commits 2 through 4, while keeping the code as it currently stands in no. 5? </p>
","0","2665148","",""
"22759548","3480671","2014-03-31 10:44:38","7","3571","<git><git-branch><git-diff>","git shows many changes in repository after moving project folder","<p>I am pretty new to git but enjoy it already. Here is my current issue:</p>

<ul>
<li><strong><em>some info:</em></strong>  <br> 

<ul>
<li>I am extending a project that a friend gave me as an archive. The folder contained the git repository and had an origin on github.<br></li>
<li>after cleaning unnecessary stuff I made an account on BitBucket and pushed the entire project there and untracked from the origin</li>
<li>I kept working nicely: made branches, commits, merging, everything went fine. For a month I started working on a branch and change a few files (around 20 I think). Everything seemed fine.</li>
</ul></li>
<li><strong><em>the problem:</em></strong> <br>

<ul>
<li>a few days ago, I decided to move the project folder from one partition to another (<em>I work on a Macbook and I moved it from the Windows partition to MacOS's partition</em>)</li>
<li>when <strong>git status</strong>'ed, I noticed that all the files in my project were considered modified, not only my current changes. Now I don't know what my changes are and the branch is useless. What can I do to see only my changes? I haven't touched most part of the project and the entire history is fine.</li>
</ul></li>
</ul>
","0","3480671","0","0"
"49605588","9228506","2018-04-02 05:06:28","1","46","<git><git-branch>","Creating branch in git in master being in a another branch","<p>I want to do something like this.
I have a branch called branchA and i want to create a new branch. This new base if the new branch should be the master. How can i do this if i am working in the branchA</p>
","1","9228506","",""
"49609790","1480066","2018-04-02 10:45:47","2","1605","<git><git-branch>","How to delete local empty git branch","<p>I created a local empty branch with:</p>

<pre><code>mkdir test
cd test
git checkout -b branch_local
</code></pre>

<p>I am not able to delete it with:</p>

<pre><code>git branch -D branch_local
</code></pre>

<p>I get </p>

<pre><code>error: Cannot delete branch 'branch_local' checked out at 'D:/test'
</code></pre>

<p>Please advise.</p>
","4","1480066","",""
"4627109","185820","2011-01-07 15:28:18","2","1087","<git><git-branch>","Deleting a really badly named git branch","<p>I accidentally created a branch called ""remotes/origin/remotes/origin/aclark"" and can't delete it with:</p>

<p>git branch -d remotes/origin/remotes/origin/aclark</p>

<p>Git says: </p>

<p>error: branch 'remotes/origin/remotes/origin/aclark' not found.</p>

<p>I tried some of the suggestions here: <a href=""https://stackoverflow.com/questions/1192180/deleting-a-badly-named-git-branch"">Deleting a badly named git branch</a>, but they are geared more towards bad branch names that start with ""--"".</p>

<p>Is there any way an end user can delete this branch or do I need a git admin? (The branch in question lives at gitorious).</p>

<p>Thanks</p>

<p>Alex</p>
","1","185820","0","0"
"67162086","12158321","2021-04-19 12:33:02","-1","793","<git><github><git-merge><git-branch><git-workflow>","git merging best practice","<p>Lately I've been working on project and created beside master, a dev branch.
I've been pushing new commits of 'checkpoints' (just saving my work) and finished features.
After finished feature I always merge with master.</p>
<p>My workflow is:</p>
<pre><code>1) git push origin dev with_some_commit // few times
2) git checkout master
3) git merge dev
4) git push origin master
</code></pre>
<p>So for me a typical flow (till now).</p>
<p>I was wondering recently if this type of workflow is correct.
Till now I imagine my workflow as:</p>
<pre><code>// before merge:
---o---o---o---&gt; master
            \---o---o---&gt;dev

// after a marge:
---o---o---o-------------&gt; master
            \---o---o--/
// and continue on dev:
---o---o---o----------------&gt; master
            \---o---o--/  \---o---&gt; dev
</code></pre>
<p>Well now I'm not so sure of this <code>// and continue on dev</code> thing.
I wonder if really after first merge, if I continue to push on merged branch it will split commits. The question is: how does it really work ?</p>
<p>Another thing is merging those commits. Should merging be done only with <code>finished features</code> commits or <code>finished features</code> + <code>all the in-between checkpoint</code> commits too ? If second option, how to split those commits ?</p>
","2","12158321","",""
"31910224","1420752","2015-08-10 00:46:25","0","142","<git><version-control><git-branch><git-flow>","How can you tell who merged which branch into git?","<p>We are using <code>git</code> for a project, making use of <code>git flow</code> (<a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">http://nvie.com/posts/a-successful-git-branching-model/</a>) to manage hotfixes, features, etc.</p>

<p>However, somehow the changes in <code>develop</code> (which is weeks ahead of <code>master</code>) have been merged into <code>master</code>, and a recent <code>git push</code> has published the unstable <code>develop</code> branch!</p>

<ol>
<li>How can I find out who merged <code>develop</code> into <code>master</code> and when this was done?</li>
<li>How can I undo this, given that there will likely have been commits made <em>after</em> this merge, and also given that the new <code>master</code> has been pushed into production?</li>
</ol>

<p>Thank you, gurus.</p>

<p><strong>EDIT:</strong> It turns out that a <code>git flow feature</code> which should have been branched off of <code>develop</code> and merged back into <code>develop</code> was incorrectly merged into <code>master</code> as well (not by <code>git flow</code>, but manually done). I couldn't track it down because the <code>git log --oneline master</code> looked like this:</p>

<pre><code>abcdef Merged branch 'feature/1234' into branch 'master'
</code></pre>

<p><strong>EDIT:</strong> I've posted a follow up question. Thank you for the feedback thus far.</p>

<p><a href=""https://stackoverflow.com/questions/31910224/how-can-you-tell-who-merged-which-branch-into-git"">How can you tell who merged which branch into git?</a></p>
","2","1420752","",""
"67226021","14535031","2021-04-23 07:52:53","0","223","<git><github><branch><git-branch><gitpython>","Error for git branch command using GitPython?","<p>So I am using GitPython in a script to get the start branch of a commit. It works for some, but for others I eventually get errors like these:</p>
<pre><code>[10] =&gt; Failed to process commit: Cmd('git') failed due to: exit code(128)
[11] =&gt;   cmdline: git branch -a --contains SHA --sort=committerdate
[12] =&gt;   stderr: 'fatal: couldn't read .git/packed-refs: Stale file handle'
[13] =&gt; Failed to process commit: Cmd('git') failed due to: exit code(128)
[14] =&gt;   cmdline: git diff-tree SHA SHA -r --abbrev=40 --full-index -M --raw -z --no-color
</code></pre>
<p>This is the line I use and it generates the error:</p>
<pre><code>repo = git.Repo(self.repo_path)
branch = repo.git.branch('-a', '--contains', commit.hexsha, '--sort=committerdate').split('\n')[0].split(&quot;remotes/origin/&quot;)[-1].split('* ')[-1] if repo.git.branch('-a', '--contains', commit.hexsha, '--sort=committerdate').split('\n')[0].split(&quot;remotes/origin/&quot;)[-1].split('* ')[-1] else ''
</code></pre>
<p>Any ideas what I could do in this case, what generates the error?</p>
<p>Some more info:</p>
<ul>
<li>it does not do this for every repository, it just does it randomly (I think?)</li>
<li>if I go into the folder and run the command manually it works without error</li>
</ul>
","3","14535031","",""
"67270246","9511013","2021-04-26 16:19:21","0","240","<git><github><bitbucket><branch><git-branch>","How to push new git branch to remote, but keeping the correct parent branch?","<p>I have the following local git structure:</p>
<pre><code>--master--------...
           \---/release---
                          \--/bugfix--
</code></pre>
<p>So, I have my <code>master</code> branch, then <code>/release</code> is a branch created from <code>master</code> and <code>/bugfix</code> a branch created from <code>release</code>. The problem I'm having is that after I commit changes in <code>bugfix</code>, when I try to do:</p>
<pre><code>git push origin -u /bugfix
</code></pre>
<p>…the branch <code>bugfix</code> in the remote gets created from <code>master</code> instead of being created from <code>release</code>.</p>
","1","9511013","",""
"67302670","14950646","2021-04-28 14:57:05","1","2301","<git><github><git-branch>","How to move files from one git branch to another","<p>I have a git repository with 2 branches. I want to move all the files of the 2nd branch to the main branch. Is it possible to do so? If yes, how?</p>
","3","14950646","",""
"67305375","2047476","2021-04-28 17:47:06","0","45","<git><git-branch>","Setting up git for branches from already existing environments (no shared history in git)","<p>I have code in 2 environments, UAT and PROD.  Say I make a copy of the UAT code and put it on the UAT branch, and likewise for PROD.  When doing a PR from UAT to PROD, I'd want to see the differences between the two (they are mostly the same, but there are a few things in UAT that are not in PROD yet).  But git says there's nothing to compare because they're different histories.  Which is true.</p>
<p>Is there a way to remedy this so I can see the differences and start promoting code from UAT to PROD via git?</p>
","1","2047476","",""
"31943113","25645","2015-08-11 13:27:00","3","3272","<git><git-branch>","git branch -a does not show all remote branches","<p>My remote git server has 2 branches, develop and release.</p>

<p>I've cloned the repository, but when I do <code>git branch -a</code> I see:</p>

<pre><code>* develop
  remotes/ghe/HEAD -&gt; ghe/develop
  remotes/ghe/develop
</code></pre>

<p>I tried to do a <code>git fetch</code> but it did not update the list.</p>
","3","25645","",""
"68551485","6673905","2021-07-27 20:37:25","4","3115","<git><github><git-branch>","What does `git branch -M` do with a single argument?","<p>I'm trying to upload a local repo to GitHub.  After creating a new repo on the site, GitHub gives the following instructions to execute locally:</p>
<pre><code>git remote add origin https://github.com/MyOrg/repo-name.git
git branch -M main
git push -u origin main
</code></pre>
<p>When I execute them, I get an error at the <code>git branch</code> step:</p>
<pre><code>$ git remote add origin https://github.com/MyOrg/repo-name.git
$ git branch -M main
error: refname refs/heads/trunk not found
fatal: Branch rename failed
</code></pre>
<p>The <code>-M</code> flag to <code>git branch</code> is a combination of <code>-m</code> (move) and <code>-f</code> (force) to forcibly rename a branch.  The standard command for this is of the form</p>
<pre><code>$ git branch -M &lt;oldbranch&gt; &lt;newbranch&gt;
</code></pre>
<p>Here, however, GitHub has given me only a single argument.  I assume, because no one involved can be bothered to make clear, that this one argument is <code>&lt;newbranch&gt;</code>.</p>
<p>The <a href=""https://git-scm.com/docs/git-branch"" rel=""nofollow noreferrer"">docs</a> say only that</p>
<blockquote>
<p>With a -m or -M option, <code>&lt;oldbranch&gt;</code> will be renamed to <code>&lt;newbranch&gt;</code>. If <code>&lt;oldbranch&gt;</code> had a corresponding reflog, it is renamed to match <code>&lt;newbranch&gt;</code>, and a reflog entry is created to remember the branch renaming. If <code>&lt;newbranch&gt;</code> exists, -M must be used to force the rename to happen.</p>
</blockquote>
<p>with no explanation of what happens when <code>&lt;oldbranch&gt;</code> is not specified.  I assume that there's some secret algorithm that <code>git branch</code> uses to determine what it should use for <code>&lt;oldbranch&gt;</code>.  Knowing this would help me figure out what causes the error I get and how to fix it.  Am I allowed to know how <code>git branch -M</code> handles a single argument?</p>
<p><strong>Resolution</strong></p>
<p>@bk2204 suggests that <code>git branch</code> implicitly takes <code>&lt;oldbranch&gt;</code> to be the current branch if it's not provided as part of the command.  This makes enough sense to assume, though an authoritative source would still be great.</p>
<p>@phd then suggests several ways of determining the current branch.  In my case:</p>
<pre><code>$ git branch --show-current
trunk

$ git rev-parse HEAD
HEAD

$ git symbolic-ref HEAD
refs/heads/trunk
</code></pre>
<p>Since the error I got trying to follow GitHub's instructions cites <code>refs/heads/trunk</code> explicitly, I further assume that <code>git branch</code> calls <code>git symbolic-ref HEAD</code> in order to determine the current branch.  Again, an authoritative confirmation of this would be awesome.</p>
<p>According to its <a href=""https://git-scm.com/docs/git-symbolic-ref"" rel=""nofollow noreferrer"">documentation</a>, <code>git symbolic-ref</code> returns the filepath associated with the symbolic reference &quot;HEAD&quot;.</p>
<p>In my case, the returned filepath <code>refs/heads/trunk</code> does not exist.  Instead, I have a file <code>refs/heads/master</code>:</p>
<pre><code>$ ls -A1h refs/heads/
master
origin/
</code></pre>
<p>Lacking guidance from GitHub, I must assume that this is what they want me to rename &quot;main&quot;.  I can do that with <code>git branch -M</code> and explicitly supplying it as <code>&lt;oldbranch&gt;</code>:</p>
<pre><code>$ git branch -M master main
$ ls -A1h refs/heads/
main
origin/
</code></pre>
<p>After this is done, the command</p>
<pre><code>$ git push -u origin main
</code></pre>
<p>works as intended, and the repo is pushed to GitHub.</p>
","3","6673905","",""
"14995389","1797552","2013-02-21 05:44:31","9","3413","<git><version-control><github><git-branch><missing-data>","Switched Branch After .gitignore and lost .gitinored files","<p>I am new to git, so sorry if this question has already been answered. I'm having trouble finding the answer to this.</p>

<p>I wanted to ignore a set of files that had never been committed before for a commit and used the github app to select them and ignore them. I switched to another branch for a while and when I returned to my branch, my ignored files were gone.</p>

<p>Are these files deleted?</p>

<p>I used    git checkout to switch back to the branch and then    git status --ignored . My missing files are not there.</p>
","12","1797552","0","0"
"50224066","9012068","2018-05-08 00:13:21","0","82","<git><git-branch><git-commit>","How to recover a commit in git","<p>I worked on something all day in a personal project, and committed it to a branch. I then realized I was going to commit to master and created a new branch to push to, and git switched to that branch. Afterwards I switched back but couldn't find my commit. Is there any way to recover the commit from before I created the branch? It reverted a lot of my work.</p>
","1","9012068","0","0"
"14999737","1711159","2013-02-21 10:18:53","0","79","<git><git-branch><subdirectory>","git how to mark a specific subfolder as branch","<p>Recently I migrated from SVN to GIT using <code>git-svn</code>.</p>

<p>Actual size of checkeded out code is ~24GB. 
In GIT, currently I see only once branch as <code>origin/master</code>. Hence if each developer clone master, he need to pull 24GB everytime, which is real pain.</p>

<p>So, I need to Mark some of the existing locations as branches, so that those can be checked out directly, instead of full repo.</p>

<p>project repo structure is like:  </p>

<pre><code>/Docs/
/project-maintainance/
/main-project/
             /module1
                    /branch1  
                    /branch2  
             /module2
                    /branch1  
                    /branch2
                    /branch3
</code></pre>

<p>Now, to accomplish this task, I want to Mark some specific folders as branch, instead of creating new branches. I browsed through so many webpages, but it only increased my confusion as I'm a beginner.</p>

<p>How can branches be created from subfolder instead of top level folder?</p>

<p>Edit: Right now my aim is to be able to <code>checkout multiple subtrees, push and pull changes.</code></p>
","0","1711159","",""
"33214492","5326499","2015-10-19 12:32:21","0","1283","<git><git-branch><git-push><git-commit>","git push only one commit from branch","<p>I have a commit <code>C1</code> in <code>master</code>. I have branched out after that and have made commit <code>C2</code> in branch. Now I want to push only commit <code>C2</code> to <code>master</code>.(<code>C1</code> is not yet ready to be pushed) How to do that.. </p>

<pre><code>    C2(branch)
  /
|
|
C1 (master)
</code></pre>

<p>Thanks..</p>
","0","5326499","0","0"
"16654351","1443702","2013-05-20 16:51:24","0","50","<git><push><git-branch>","Using git push feature","<p>I was wondering what is the interpretation of <code>git push origin master</code>.</p>

<p>I mean we <code>push</code> the commits to the <code>origin</code> repo's <code>master</code> branch.</p>

<p>But suppose, there's a branch <code>A</code>.</p>

<p>I create a new branch <code>B</code> keeping <code>A</code> as the base branch. (<code>git checkout -b B A</code>)</p>

<p>Now, whether I should do <code>git push origin A</code> or <code>git push origin master</code> ?</p>
","0","1443702","",""
"16659793","364088","2013-05-20 23:19:02","0","87","<git><branch><git-branch><branching-and-merging>","git - make a 'fresh' feature branch while preserving current feature branch?","<p>With respect to git.</p>

<p>I've got a feature branch we'll call <code>foo</code>. In there are a number of committed changes and some uncommitted changes to implement a feature.</p>

<p>I've made a bad assumption and a lot of what's in <code>foo</code> is no longer desirable.</p>

<p>I'd like create a new feature branch, <code>bar</code> without any of the changes applied to <code>foo</code> and manually re-implement the bits that are useful from <code>foo</code> into <code>bar</code>.</p>

<p>Once <code>bar</code> is good I'll delete the <code>foo</code> branch.</p>

<p>How can I create the new feature branch without any of what's in <code>foo</code> (a fresh start) while preserving what's in <code>foo</code> so that I can review it as necessary ?</p>
","0","364088","",""
"22557188","476433","2014-03-21 11:12:39","2","113","<git><git-branch>","Fetch a complete git branch from another local repository","<p>I have a remote repository and 2 local repositories let say repo1 and repo2. I am working on a branch (project1) which is checked out from repo1. There is another branch (project2) which is checked out from repo2. Project2 branch  has my changes which I have committed but not pushed (Don't want to push). I want to fetch all changes from project2 to project1 branch. I did </p>

<pre><code>git fetch &lt;my repo2&gt; project2
</code></pre>

<p>and then cherry-pick the latest commit. But It only fetch the latest commit changes. I tried to fetch between first and last commit but in this case it only fetch the first commit. </p>

<pre><code>git fetch &lt;my repo2&gt; project2 &amp;&amp; git cherry-pick &lt;First commit SHA1&gt;..&lt;last Commit SHA1&gt;
</code></pre>

<p>Could anyone please help me to find the problem. How can I fetch a complete branch from repo2 to repo1.</p>
","0","476433","",""
"68403833","4451521","2021-07-16 05:25:46","0","49","<git><git-branch><branching-and-merging>","Where to put a tools branch in git?","<p>I would like to ask for some advice about a good git branch strategy.</p>
<p><strong>The situation</strong></p>
<p>I have a repository with a master branch. From it, a developer branch has started. This developer branch has several commits. From the developer branch several other branches have started.</p>
<p>Eventually I suppose all these branches will be merged or discarded and ultimately in the future I suppose everything will merge into the master branch but not yet</p>
<p><strong>what I want to do</strong></p>
<p>Now, I have to incorporate into the repository a few shell scripts into a &quot;tools&quot; folder for anyone to use.</p>
<p>To do this I am thinking of creating a new branch, adding the code and committing.</p>
<p><strong>My question is, <em>where</em> in the git tree should be best to start this branch ?</strong></p>
<p>I have thought of creating a branch directly in master and then merging it to master and then rebasing develop and all the others.</p>
<p>On the other hand perhaps I should create this on top of develop, merge it and just rebase the children branches.</p>
<p>What is the standard or most common approach to this?</p>
","1","4451521","",""
"3961040","479499","2010-10-18 16:12:32","5","1032","<git><gitosis><git-branch>","gitosis change server","<p>I installed a fresh instance of gitosis, and also have an old one.</p>

<p>What do I have to do to move the repos from the old to the new server? Clone on the new server?</p>

<p>What do I have to change on the developer computers, to switch the remote branch? Or do they need to clone again?</p>
","0","479499","0","0"
"4083724","61676","2010-11-03 02:13:48","20","7443","<git><merge><workflow><branch><git-branch>","Can I enforce a merge-only branch in git?","<p>I'm using git, and I'm setting up the following branches to support my workflow:</p>

<ul>
<li>release, which only contains released software,</li>
<li>testing, which contains software released to the testing group,</li>
<li>develop, which is where development happens,</li>
<li>some_topic_branch, where features, etc. get added.</li>
</ul>

<p>Topic branches branch from and get merged into develop.  When we're ready for a testing release, testing merges in develop.  When a testing release is approved for production, release merges in testing.</p>

<p>This is all easy enough to set up, but I'm wondering about the enforcement options in git.  For example, is it possible to enforce a policy where the only commits on the release branch are merges from testing, preventing changes from happening directly on the release branch?</p>
","1","61676","0","0"
"5243231","141508","2011-03-09 08:45:17","9","6723","<git><git-branch>","git local master branch stopped tracking remotes/origin/master, can't push","<p>Just when I thought I'd got the hang of the <em>git checkout -b newbranch - commit/commit/commit - git checkout master - git merge newbranch - git rebase -i master - git push</em> workflow in git, something blew up, and I can't see any reason for it.  </p>

<p>Here's the general workflow, which has worked for me in the past:</p>

<pre><code># make sure I'm up to date on master:
$ git checkout master
$ git pull # k, no conflicts
# start my new feature
$ git checkout -b FEATURE9 # master @ 2f93e34

Switched to a new branch 'FEATURE9'
</code></pre>

<p><em>... work, commit, work, commit, work, commit...</em></p>

<pre><code>$ git commit -a
$ git checkout master
$ git merge FEATURE9
$ git rebase -i master # squash some of the FEATURE9 ugliness
</code></pre>

<p>Ok so far; now what I expect to see -- and normally do see -- is this:</p>

<pre><code>$ git status

# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)
</code></pre>

<p>But instead, I only see ""<strong>nothing to commit (working directory clean)</strong>"", no ""<strong>Your branch is ahead of 'origin/master' by 1 commit.</strong>"", and git pull shows this weirdness:</p>

<pre><code>$ git pull
From .                                        # unexpected
 * branch            master     -&gt; FETCH_HEAD # unexpected
Already up-to-date.                           # expected
</code></pre>

<p>And git branch -a -v shows this:</p>

<pre><code>$ git branch -a -v

  FEATURE9                 3eaf059 started feature 9
* master                   3eaf059 started feature 9
  remotes/origin/HEAD      -&gt; origin/master
  remotes/origin/master    2f93e34 some boring previous commit # should=3eaf059
</code></pre>

<p>git branch clearly shows that I'm currently on * master, and git log clearly shows that master (local) is at 3eaf059, while remotes/origin/HEAD -> remotes/origin/master is stuck back at the fork.</p>

<p>Ideally I'd like to know the semantics of how I might have gotten into this, but I would settle for a way to get my working copy tracking the remote master again &amp; get the two back in sync without losing history. Thanks!</p>

<p>(<em>Note: I re-cloned the repo in a new directory and manually re-applied the changes, and everything worked fine, but I don't want that to be the standard workaround.</em>)</p>

<p><strong>Addendum</strong>: The title says ""can't push"", but there's no error message. I just get the ""already up to date"" response even though <em>git branch -a -v</em> shows that local master is ahead of /remotes/origin/master. Here's the output from <em>git pull</em> and <em>git remote -v</em>, respectively:</p>

<pre><code>$ git pull
From .
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.

$ git remote -v
origin  git@git.company.com:proj.git (fetch)
origin  git@git.company.com:proj.git (push)
</code></pre>

<p><strong>Addendum 2</strong>: It looks as if my local master is configured to <em>push</em> to the remote, but not to pull from it. After doing <code>for remote in 'git branch -r | grep -v master '; do git checkout --track $remote ; done</code>, here's what I have. It seems I just need to get master <em>pulling</em> from remotes/origin/master again, no?</p>

<pre><code>$ git remote show origin
* remote origin
  Fetch URL: git@git.company.com:proj.git
  Push  URL: git@git.company.com:proj.git
  HEAD branch: master
  Remote branches:
    experiment_f tracked
    master    tracked
  Local branches configured for 'git pull':
    experiment_f merges with remote experiment_f
  Local refs configured for 'git push':
    experiment_f pushes to experiment_f (up to date)
    master    pushes to master    (local out of date)
</code></pre>
","4","141508","0","0"
"23364012","815129","2014-04-29 11:57:26","0","57","<git><git-branch>","git commit working tree without index","<p>I have some work in the index ready to be committed, and some changes in the working tree.</p>

<p>Now Ive been asked to commit <em>now</em> the changes in the working tree (on master) and <em>later</em> the work currently in the index (in a different branch). Is this possible?</p>
","0","815129","0","0"
"41656004","878532","2017-01-14 23:08:06","2","80","<git><git-branch><git-merge>","git: how to deal with to early branching","<p>I did something like:</p>

<pre><code>          y1-y2-y3-y4-y5
         /          /
x1-x2-x3           /
         \        /
          z1-z2-z3
</code></pre>

<p>But now I want to have changes from y1 and y2 also in z2 and the the next ones.</p>

<p>z3 was already merged into y5.</p>

<p>What we want to achieve is something like:</p>

<pre><code>         y1-y2-y3-y4-...- throw away
         /   \       
x1-x2-x3       \    
         \       \ 
          z1-z2-z3-z4- continue work with changes from y1&amp;y2
</code></pre>

<p>How to deal with that problem?</p>

<ol>
<li>cherry pick</li>
<li>on z3: git merge y2? ( on z3 merge  seems to work. )</li>
<li>something else </li>
</ol>

<p>Some additional info:</p>

<p>The repo exists on 3 servers. ( No permanent network excess possible ) Each clone access all remotes from time to time. In case of using <code>rebase</code> I fear of some side effects. </p>
","5","878532","",""
"4414100","85582","2010-12-10 23:06:26","15","16068","<git><branch><git-branch><branching-and-merging>","git -- locking master branch for some users?","<p>I would like to force other team-members to not work on the master-branch but on a development branch. we have a central git-repository where we push our work into. i would like to know if it's possible to block users from pushing changes to the master-branch but only allow certain users to do so. </p>

<p>I would like to have the following ""workflow""</p>

<ul>
<li>development is always only done with a development-branch</li>
<li>the release-manager is responsible for the master branch and only he is allowed to merge stuff from a development branch into the master and push it to the master-branch on the central repository to.</li>
</ul>

<p>Is this possible and how can I achieve this?</p>
","4","85582","0","0"
"5457965","103213","2011-03-28 10:55:46","3","919","<xcode><crash><branch><xcode4><git-branch>","How to prevent Xcode 4 from crashing with git branch when the project file changes?","<p>When the project file is different between two branches (say, we added a new source file), switching git branches causes Xcode 4 to crash. What's a good solution to this?</p>
","0","103213","0","0"
"22902724","1076508","2014-04-07 02:37:47","1","33","<git><github><git-branch><missing-data>","Merged a branch with gitignored files, can't find those files anymore","<p>I had large log files in a project, so I added the log directory to .gitignore after I had already made a few logs (so there's a log file directory with only a few old logs in my git, all new ones are ignored). I had more logs in a branch and merged it with my master, along with another branch I had been working on. Now the newer logs don't show up in the master, and when I switch back to my branch they're not there either. Is there any way to recover these?</p>
","0","1076508","",""
"22905081","2076598","2014-04-07 06:30:41","1","32","<git><version-control><github><git-branch>","Defining a git work flow for ZF applications","<p>I am new to git and there are a number of Zend Framework apps that I want to manage using git. </p>

<p>I've read that git is flexible and that you can create your own workflows. I have came up with following workflow but I am lost on how to implement this in git. </p>

<p><img src=""https://i.stack.imgur.com/4rRPd.jpg"" alt=""Zf git Workflow""></p>

<p>There are mainly three repositories in this workflow, bare, development and production.</p>

<p>The bare repo will be cloned in my local machine. This bare repo will have two branches development and production. </p>

<p>If I make any changes and push the changes to development branch they will be committed to the development branch of the bare repo and then forwarded to development repo. The development repo will commit the changes and then push the files within the public folder to ""www/app/dev"" directory. </p>

<p>Similarly, if I push the master branch from my local machine, the changes will be committed to the master branch of the bare repo and then forwarded to production branch. The changes will be committed to the master branch of production repo and the files from the public directory will be copied to ""www/app/prod"" folder.</p>

<p>Also,</p>

<p>If either of the development or the production repositories are updated changes should be pushed back to the bare repo. I think this can be done using the post commit hook on both the repos.</p>

<p>I have tried many articles and creating update hooks but I've failed. </p>

<p>Can anyone please help me with this or guide me in the right direction? </p>

<p>This work flow is derived from the following workflow:</p>

<p><a href=""http://joemaller.com/990/a-web-focused-git-workflow/"" rel=""nofollow noreferrer"">Git Hub workflow</a></p>
","2","2076598","",""
"23826109","1595186","2014-05-23 09:53:48","3","532","<git><git-branch>","Branch maintenance in git","<p>I have a master branch and 3 other branches like b1 b2 and b3 .I have committed my code in master branch. I want that particular commit to be in branch b1 and b2. How to reflect that commit in b1 and b2 </p>
","1","1595186","",""
"5779417","42973","2011-04-25 14:35:15","3","304","<git><packaging><git-branch><pypi>","How to get a copy of a directory from another git branch in a transparent way?","<p>How can a directory be copied from a git branch to another <em>without git tracking the files</em>?</p>

<p>My goal is to have different branches for a project and be able to import part of each branch to a single directory for packaging ?  Each branch contains code for a specific version of Python, but the package must contain the code for <em>all</em> the Python versions, so the code from all version-specific branches must be copied into the master branch before packaging.</p>

<p>Here is an example:</p>

<ul>
<li><p>The git-controlled, master-branch directory contains:</p>

<pre><code>uncertainties/
</code></pre></li>
<li><p>I want to import the version of <code>uncertainties/</code> contained in the <code>python-pre-2.5</code> branch, so that the final directories are:</p>

<pre><code>uncertainties/  # Should not be touched
uncertainties-py23/  # Imported from the python-pre-2.5 branch
</code></pre></li>
<li><p>A crucial point is that I do not want <code>git status</code> to report any change (if there was no change in the first place).  In other words, the directory import process should be invisible to git.</p></li>
</ul>

<p>By using <code>git checkout python-pre-2.5 -- uncertainties</code> and various combinations of renames (<code>mv</code> and <code>git mv</code>), I did not succeed in satisfying this last ""git transparency"" requirement.  How can this be achieved?</p>
","0","42973","",""
"61560198","6004016","2020-05-02 13:31:16","2","30","<r><git><git-branch><r-package>","R: Loading git branches from other pacakge's git branch","<p>(I started this conversation in <a href=""https://stackoverflow.com/questions/61461900/how-to-load-a-git-branch-from-another-r-package"">How to load a git branch from another R package</a>, but never could get it to work.  Coming around with new detail.)</p>

<p>I'm <em>trying</em> to set up a pair of R packages, each with a development git-branch, so that the master imports the master, and the dev imports the dev.  All code is built and stored locally.</p>

<p>I have built two 'toy' R packages, as sub-directories of <em>~/lab</em>. The first package, _puppies, _ has two git branches, <em>master</em> and <em>fido</em>.  It has
one function <code>whoIsAGoodDog()</code> which prints a message.  In <em>master</em>, <code>whoIsAGoodDog()</code> messages <em>'ARF! Main Branch'</em>. In <em>fido</em> it messages <em>'BARK! fido branch'</em>.</p>

<p>My second R package is <em>animals</em>, which imports <em>puppy</em>, and with two git branches, <em>master</em> and <em>mammals</em>. Its single function <code>talkAnimal()</code> calls <code>whoIsAGoodDog()</code>.  The behavior I want to see is:</p>

<ul>
<li>When I'm in <em>animals/master</em>, <code>talkAnimal()</code> should message <em>'ARF! Main Branch'</em></li>
<li>When I'm in <em>animals/mammals</em> <code>talkAnimal()</code> should message <em>'BARK! fido branch'</em></li>
</ul>

<p>The article <a href=""https://cran.r-project.org/web/packages/devtools/vignettes/dependencies.html"" rel=""nofollow noreferrer"">https://cran.r-project.org/web/packages/devtools/vignettes/dependencies.html</a> appears to answer my question.  But editing the DESCRIPTION file in <em>animals/mammals</em> to read</p>

<pre><code>Imports: puppy
Remotes: local::/home/myAccount/lab/puppy@fido
</code></pre>

<p>Doesn't work.  Both branches of <em>animals</em> import whichever branch of <em>puppies</em> I've built most recently.  I've messed around with the syntax of the <code>Remote:</code> to no avail, trying</p>

<pre><code>Remotes: local::/home/myAccount/lab/puppy#fido
Remotes: local::/home/myAccount/lab/puppy/fido
Remotes: local::lab/puppy@fido
</code></pre>

<p>and so on, restarting R and running <code>$ git commit</code> to <em>animals/mammals</em> after each change. And I've changed the DESCRIPTION in <em>animals/master</em> similarly.</p>

<p>No joy; the only thing that seems to matter is which branch of <em>puppies</em> I built most recently.</p>

<p>Ideas?  Have I misunderstood the <code>Remote:</code> syntax, or is there something else entirely? </p>

<p>Other details: I'm running R version 3.5.2 (2018-12-20), in RStudio Server.  In both branches of <em>animals</em>, the code is</p>

<pre><code>#' @import puppy
#' @title Talk to the Animals
#' @export
animalTalk &lt;- function(){
  whoseAGoodDog()
}
</code></pre>

<p>@caldwellst helped with the first round.</p>
","0","6004016","",""
"61566959","9210343","2020-05-02 22:09:28","0","34","<git><git-branch><git-fetch>","How many branches are fetched after git fetch","<p>Assuming I have tracking branch br1 and I am on that branch will git fetch downloand changes only for that branch or every other branch from the same remote as br1. </p>
","3","9210343","",""
"61568262","9210343","2020-05-03 00:45:59","-1","44","<git><git-branch><git-fetch>","Clonning again git repository instead of fetching and merging every branch","<p>Is it often practice to delete local git repository and make fresh git clone instead of fetching every remote branch and merging it with local branches?</p>
","5","9210343","",""
"24225832","117579","2014-06-15 01:37:48","3","2505","<git><version-control><git-branch><dvcs><git-log>","git log revision range gives incorrect range of commits","<p>I am trying to use list all commits within a given range on a branch using the  argument of <code>git log</code>. For some reason it doesn't seem to be giving me the right result (or maybe I'm understanding the command wrong?).</p>

<p>Here's the steps for what I'm doing:</p>

<ol>
<li><p>Clone the repo</p>

<p><code>git clone https://github.com/openstack/nova.git</code></p></li>
<li><p>Do <code>git log</code> and these are the last 9 commits:</p>

<pre><code>d5bde44 Merge ""Make metadata password routines use Instance object""
6cbc9ee Merge ""Fix object change detection""
39b7875 Merge ""Fix object leak in nova.tests.objects.test_fields.TestObject""
94d1034 Merge ""maint: correct docstring parameter description""
6407f17 Merge ""Fix live_migration method's docstring""
7406661 Merge ""Fix infinitely reschedule instance due to miss retry info""
9d8a34f Merge ""Remove unused code from test_compute_cells""
429cd4b Fix object change detection
01381b8 Fix object leak in nova.tests.objects.test_fields.TestObject
...
</code></pre></li>
<li><p>Lets say I want to get all the commits starting after <code>01381b8</code>. I issue <code>git log 01381b8..HEAD</code> and the following output is seen:</p>

<pre><code>d5bde44 Merge ""Make metadata password routines use Instance object""
6cbc9ee Merge ""Fix object change detection""
39b7875 Merge ""Fix object leak in nova.tests.objects.test_fields.TestObject""
94d1034 Merge ""maint: correct docstring parameter description""
6407f17 Merge ""Fix live_migration method's docstring""
7406661 Merge ""Fix infinitely reschedule instance due to miss retry info""
9d8a34f Merge ""Remove unused code from test_compute_cells""
429cd4b Fix object change detection
2214bc0 Remove unused code from test_compute_cells
9639b55 Fix infinitely reschedule instance due to miss retry info
a5184d3 Fix live_migration method's docstring
76729a3 maint: correct docstring parameter description
28224a6 Make metadata password routines use Instance object
</code></pre></li>
</ol>

<p>Wow! I actually got <strong>13</strong> commits in that output when I expected <strong>8</strong>. What is going on here? Is the revision range the correct mechanism to get show commits after a given commit? Or is this a bug?</p>
","1","117579","",""
"24399685","891352","2014-06-25 03:28:06","-1","88","<git><git-branch>","Restore git clone local copy as a shared repository","<p>I've backed up my repository using git clone.  I've used the commands described here to restore it:</p>

<p><a href=""https://stackoverflow.com/questions/2199897/how-to-convert-a-git-repository-from-normal-to-bare"">How to convert a normal Git repository to a bare one?</a></p>

<p>My original shared repository had  many branches.  e.g.</p>

<pre><code>git branch -a
* master
branch1
branch2
</code></pre>

<p>However the the shared repository restored from the back up, all the branches are missing</p>

<pre><code>git branch -a 
* master
remotes/origin/branch1
remotes/origin/branch2
</code></pre>

<p>Are there any steps I should do to restore the branches in my shared repository that's restored from a clone</p>
","4","891352","",""
"24403845","143511","2014-06-25 08:34:33","2","61","<git><github><git-branch>","Archive git repos","<p>could you tell me please - is there any hack how to move git repos from (for example) Github with all branches and tags to any archive place? Of course - i can fetch all branches for repo, then push to the new remote, but is there easy way?</p>
","1","143511","0","0"
"6057419","451252","2011-05-19 10:44:10","1","2600","<git><gitignore><git-branch>","Git : using .gitignore with different branches","<p>I have a pretty basic work environment but does not manage to work with Git as desired.</p>

<p>Here is how we can describe it : two branches A and B with two files each in their working trees, the first file is toMerge and the second is toKeepSpecific.</p>

<p>I have the same .gitignore in the two branches saying to ignore the toKeepSpecific file. The toKeepSpecific file has never been pushed so in the remote repository, the two branches only contain toMerge.</p>

<p>The problem I have is that when I'm on branch B and try to checkout branch A, I have the following message : ""The following untracked working tree file would be overwritten by checkout"". I thought the .gitignore would take care of that but apparently not...</p>

<p>What's the most appropriate git environment for this kind of needs ?</p>

<p>Thanks ! </p>
","2","451252","",""
"24657326","3746596","2014-07-09 15:08:39","51","90172","<android><git><android-studio><git-branch>","How to use git branch with Android Studio","<p>I am new to git. I have a very simple scenario for using git. I had my first release written with Android Studio. Now I want to work with some new features. What I did so far:</p>

<ol>
<li>enabled the VCS in my Android Studio </li>
<li>created a local repository for my project from Android Studio</li>
<li>pushed my local repository to my Bitbucket remote repository (<code>$git push -u origin master</code>)</li>
</ol>

<p>Now I am confused for the next step: create a feature branch. Should I create a branch in the local repository: </p>

<pre><code>$ git branch --track feature1 origin/master 
</code></pre>

<p>or should I create a new branch from the Bitbucket web portal, and clone the new branch?</p>

<p>I also want to know how I can switch branches with Android Studio? For example, switch from feature branch to master branch to work on some hotfix. Do I need to use the Bitbucket plugin to checkout the project very time from the remote repository every time I switch branches or I can hot switch it inside Android Studio?</p>

<p>Thanks!</p>
","0","3746596","0","0"
"6352754","54457","2011-06-15 03:35:56","6","4419","<git><branch><git-branch><branching-and-merging>","Always ignore a certain commit on merge in git","<p>I am working on my first project using git and have ran into an issue.</p>

<p>The repo contains a a client/server app. I have a 'master' and 'test' branches, with the intent that master is always the same as what's deployed.</p>

<p>My problem there are 3-4 places in the codebase where the server URL is stored. I want to change this in the 'test' branch, but not in the 'master' branch. The problem is, of course, that whenever I want to merge back to 'master', git wants to put this change in 'master'.</p>

<p>I can do a selective merge and merge all the commits but the one in  question, but this seems tedious to do for every single merge. What's the best way to do this?</p>

<p>I've never had this problem in <em>any</em> SCM, so maybe I""m just going about this all wrong.</p>
","3","54457","",""
"6365938","77939","2011-06-16 00:35:56","3","385","<git><git-svn><git-branch>","How do you rebase a git-svn branch and keep the metadata intact?","<p>I recently used <code>git svn branch</code> to create a branch (in both Subversion and git).</p>

<p>I noticed that (for some reason I'm not sure about; maybe a bug or maybe I created the branch incorrectly?) the git commit for the branch creation has two parents: one at the top of the tree at the time I created the branch (incorrect since I branched from a previous revision) and one at the (expected) previous revision. </p>

<p>This ""second parent"" causes all kinds of grief for me, since I'm now trying to merge from another branch to the new branch, and git's idea of the common ancestor is incorrect.</p>

<p>I found <a href=""https://stackoverflow.com/questions/3810348/setting-git-parent-pointer-to-a-different-parent"">this question</a> which explains how to force the git branch to have the correct parent by using a rebase. The problem is, the rebase only affected my local branch HEAD, not the remote tied to the git-svn repository. Normally, this would be a very bad thing, but since I'm the only one using this git-svn repository, I don't care: I just want to move the remote branch to the adjusted commit now.</p>

<p>So my question is: now that I've got the parent for the local branch pointed at the correct commit it branched from, is there a way for me to move the remote branch to the same HEAD, so that I can (for example) run <code>git svn rebase</code> without it getting confused? (I'm afraid that if I change it by hand, the <code>.git/refs/remotes/&lt;mybranch&gt;/.rev_map...</code> file won't match up with SVN any more...?)</p>

<hr>

<p><strong>Edit</strong>: To address the question posed in the comment, yes, the branch is checked out. I'm going to change the names of my branches to protect the innocent, but let's imagine it looks like this:</p>

<pre><code>$ git branch
* git_mysvnbranch
  git_releasebranch
  master

$ git branch -r
  trunk
  mysvnbranch
  releasebranch
</code></pre>

<p>Now, when I created the branch, <code>mysvnbranch</code> had a parent of both trunk, and the arbitrary point off of trunk that I branched from. Now I want to take <code>releasebranch</code> and merge it into <code>mysvnbranch</code>, which is when I see a problem. If I launch <code>gitk</code> it looks like this:</p>

<pre><code>o [git_mysvnbranch] [remotes/mysvnbranch]
|\ &lt;--- bad pointer here
| o [remotes/trunk]
| |
| o 
| | o [git_releasebranch] [remotes/releasebranch]
| | |
| o o
| |/
| o
| |
| o
| |
| o
|/
o [arbitrary branch point]
</code></pre>

<p>So you can see the problem if I want to merge in <code>[remotes/releasebranch]</code>. If I do a rebase, I can make it look like this:</p>

<pre><code>o [git_mysvnbranch]
|
| o [remotes/mysvnbranch]
| |\ &lt;--- bad pointer here
| | o [master] [remotes/trunk]
| | |
| | o 
| | | o [git_releasebranch] [remotes/releasebranch]
| | | |
| | o o
| | |/
| | o
| | |
| | o
| | |
| | o
| |/
|/
o [arbitrary branch point]
</code></pre>

<p>And now I want to git rid of the version of <code>[remotes/mysvnbranch]</code> with the bad parent, and make it point to where <code>[git_mysvnbranch]</code> points to instead.</p>

<p>But here's a curious thing that I just found out: the svn metadata might indeed be intact. I just did this:</p>

<pre><code>$ git svn rebase -n
Remote Branch: refs/remotes/mysvnbranch
SVN URL: svn://subversionrepo/branches/mysvnbranch
</code></pre>

<p>So maybe I'm worrying about nothing. I will test this a little more to try to find out.</p>

<hr>

<p><strong>Edit 2</strong>: I'm not worrying about nothing. As soon as I tried <code>git svn rebase</code> from the rebased branch, it tried to re-merge changes that had already been merged into the git branch.</p>
","2","77939","0","0"
"6630105","586707","2011-07-08 20:26:17","17","4987","<git><git-branch>","How to change git branch output order","<p>When I type <code>git branch</code>, I receive a list of branches that appear to be sorted alphabetically instead of being sorted by their creation time.</p>

<p>Is there a way to make the output of <code>git branch</code> sorted by date?</p>
","1","586707","",""
"6636146","586707","2011-07-09 16:54:38","2","112","<git><git-branch><git-commit>","Undo a git commit + git branch <branchname> -- with a twist","<p>I am in the process of ""documenting in hind-sight"" the history of an application development, by moving existing snapshots of the project's directory tree (that were saved back then by plain &amp; primitive folder copies, not git or any other version control) to git.</p>

<p>After struggling with learning git's new concepts and new terminology, this migration process seemed to have been going well when, all of a sudden I discovered: ""Oops... my last <code>git commit</code> + <code>git branch &lt;branchname&gt;</code> skipped one snapshot.""</p>

<p>Since the order of committing the snapshots is important to me, I would like to completely undo the last <code>git commit</code> + <code>git branch &lt;branchname&gt;</code>, <strong>as if it were never done</strong>.</p>

<p>That is, ""fixing by modifying a commit"" as defined at the bottom of the <a href=""http://book.git-scm.com/4_undoing_in_git_-_reset,_checkout_and_revert.html"" rel=""nofollow"">Undoing in Git</a> chapter in the Git book.</p>

<p>Everything is still local (I didn't ""publish"" nor did I ""push"" anything yet), so I believe this is in line with the warnings about ""rewriting history"". :)</p>

<p>Could you please confirm or correct the following steps required per my understanding?</p>

<ol>
<li>Empty the working directory (without
deleting the <code>.git</code> subdirectory, of
course)</li>
<li><code>git checkout &lt;folder-name&gt;</code>
(bringing working directory back to
the state it were immediately after
I committed the wrong folder and
tagged it via git branch)</li>
<li><code>git branch -D
&lt;branchname-of-mistaken-folder-commit&gt;</code></li>
<li><code>git commit --amend</code></li>
</ol>

<p>At this point I expect that git to no longer remember that the last branch and commit <strong>have ever been done</strong>, and the working directory contain the mistaken folder (which I will be deleting, replacing completely by the one I skipped). Is this correct?</p>
","4","586707","",""
"6638937","807549","2011-07-10 03:10:33","2","11263","<git><branch><git-branch><git-checkout>","switching branches in git - when will i get ""You have local changes cannot switch branches.""?","<blockquote>
<p><strong>Possible Duplicates:</strong><br />
<a href=""https://stackoverflow.com/questions/1304626/git-switch-branch-and-ignore-any-changes-without-committing"">git: Switch branch and ignore any changes without committing.</a><br />
<a href=""https://stackoverflow.com/questions/6337122/git-branches-behaving-strangely"">Git branches behaving strangely</a></p>
</blockquote>

<p>I know that the general recommendation is to have a clean status before switching branches in git. ( stash or park-commit ). I'm trying to understand when will I get &quot;You have local changes cannot switch branches&quot; , I can't follow the logic :</p>
<p>I have a repo, with a file called version.txt, contains the text &quot;1&quot; :</p>
<blockquote>
<p>git checkout -b new</p>
<p>echo 2 &gt;&gt; version.txt  (working dir is not dirty, modified the file)</p>
<p>git checkout master ( how come this works ? I have not stages\commited my changes on new )</p>
</blockquote>
<p>same happens if I delete the file content in my new branch, or stage the file first.</p>
<p>Can someone help me to understand when will i get the &quot;You have local changes cannot switch branches.&quot; ?</p>
<p>Thanks,
Ran</p>
","1","807549","",""
"24919907","316760","2014-07-23 20:03:23","98","37606","<git><visual-studio-2013><git-branch>","Visual Studio 2013 git, only Master branch listed","<p>I'm using Visual Studio 2013's Git support to work on a private GitHub repository. I have permission to commit to it. I want to switch branches, but when I go to the Branches view, the only branch in any of the lists (branch drop-down, published branches, merge tool) is master. Other branches show up in GitHub, GitHub for Windows, and TortoiseGit. So I know they're there and I have access.</p>

<p>Any ideas why I can't see other branches in Visual Studio?</p>

<p><img src=""https://i.stack.imgur.com/zkWYt.png"" alt=""enter image description here""></p>

<p>I'm running Visual Studio 2013 Update 2.</p>
","3","316760","0","0"
"24921133","665961","2014-07-23 21:15:57","7","1689","<git><git-branch>","git How to merge a branch into the master branch by completely overwriting master branch","<p>I started work on the <b>master</b> branch. Almost one year ago, I created another branch <b>dev</b> in which I made some changes. From that time on I continued work on dev branch. Now I want to merge dev into master which results in lot of conflicts. I want to merge dev into master by overwriting master branch's contents i.e. for any conflict that arises I want to keep dev branch's version of the code. How can it be done ?</p>
","0","665961","0","0"
"6648709","471899","2011-07-11 10:20:59","4","335","<git><mercurial><git-branch>","Reproducing git branching model with help of mercurial bookmarks","<p>I am trying to use Mercurial and I want to reproduce git branching model with help of Bookmark extension. Here is the problem with that.</p>

<p>Imagine I have a repostory. I've added 2 bookmarks</p>

<pre><code>user@host:/tmp/hgtest$ hg bookmark main
user@host:/tmp/hgtest$ hg bookmark feature
user@host:/tmp/hgtest$ hg bookmarks 
 * feature                   0:76c6736b4548
   main                      0:76c6736b4548
</code></pre>

<p>After that i've commited some code and decided that feature is ready (no development on this feature in near future). At this moment bookmarks point to different commits.</p>

<pre><code>user@host:/tmp/hgtest$ hg bookmarks
 * feature                   2:9d32bb6bdbc6
   main                      0:76c6736b4548
</code></pre>

<p>Now i am switching back to the state where i've started development of my feature</p>

<pre><code>user@host:/tmp/hgtest$ hg up main
resolving manifests
removing second.file
getting first.file
1 files updated, 0 files merged, 1 files removed, 0 files unresolved
</code></pre>

<p>I would like to issue <code>merge</code> command in order to make history graph looking like this</p>

<pre><code>user@host:/tmp/test-git$ git log --graph
*   commit d8a957350fc8fbaf542e20aac0d4c95477cc2d3c
|\  Merge: 20493a7 7b59a16
| | Author: Author
| | Date:   Mon Jul 11 18:35:09 2011 +1100
| | 
| |     Merge branch 'testfeature'
| |   
| * commit 7b59a16d0b01d9bcc22f21a3c68f63acf60f37da
| | Author: Author
| | Date:   Mon Jul 11 18:34:34 2011 +1100
| | 
| |     Added line to test.file
| |   
| * commit 20ea105cf300f7f3e952ac7eddffd2aee6811f7c
|/  Author: Author
|   Date:   Mon Jul 11 18:32:27 2011 +1100
|   
|       Added code for testfeature
|  
* commit 20493a7a61705967b092780cae9fadd76ec49019
  Author: Author
  Date:   Mon Jul 11 18:25:17 2011 +1100
</code></pre>

<p>but Mercurial doesn't allow this</p>

<pre><code>user@host:/tmp/hgtest$ hg merge feature
abort: nothing to merge (use 'hg update' or check 'hg heads')
user@host:/tmp/hgtest$ 
</code></pre>

<p>I want to reproduce git approach since it allows to break giant line of development commits into bunches of feature related commits, make it easier to understand history.</p>

<p>If I can achieve such behaviour using another technique please feel free to share it with me.</p>
","0","471899","",""
"24925155","1823822","2014-07-24 04:29:28","0","658","<git><git-branch><git-rebase>","Error in pushing branch after git rebase","<p>I am new to Git. I have cut my branch from master as follows:</p>

<pre><code>git co master
git fetch
git pull origin master
git co -b my_branch
</code></pre>

<p>Now I have been working on my that branch for past one week. Now it is ready to be deployed. So
I did </p>

<pre><code>git rebase master
</code></pre>

<p>But after rebasing while I am trying to push my branch, it keeps giving error saying I have to pull first. I finally pushed my branch as follows:</p>

<pre><code>git push -f origin my_branch
</code></pre>

<p>I alone working on this branch. So every code on this branch has been pushed by me only. Then how it's giving such error, I don't understand. Please help. </p>
","0","1823822","",""
"4138285","156060","2010-11-09 20:31:45","24","5659","<git><bash><git-branch><githooks><git-merge>","block push of trivial merge to git server","<p>A while back I <a href=""http://thread.gmane.org/gmane.comp.finance.mifos.devel/9491/focus=9597"" rel=""nofollow noreferrer"">asked our developers to use rebase instead of merge before pushing</a>. Eliminating trivial merges makes for a much easier to follow commit graph (ie: gitk, git log).</p>

<p>Sometimes folks still accidentally do trivial merges, then push. Does anyone have handy or have tips for writing a server-side hook that blocks trivial merges?</p>

<p>By ""trivial merge"", I mean a merge without conflicts. <a href=""http://mifos.git.sourceforge.net/git/gitweb.cgi?p=mifos/head;a=commit;h=c516520a9c37944c96162ffd85c00f68b81786a6"" rel=""nofollow noreferrer"">Here's an example</a>, and <a href=""https://stackoverflow.com/questions/1824264/what-is-a-trivial-merge-in-git/1824297#1824297"">here's a better explanation of a trivial merge in git</a>.</p>

<p><strong>Update Wed Nov 10 01:26:41 UTC 2010</strong>: great comments, all! Thank you.</p>

<ul>
<li>Consider the following: all I'm really asking folks to do is this:

<ul>
<li>if <code>git pull --ff-only</code> fails, do <code>git pull --rebase</code> instead of <code>git pull</code></li>
</ul></li>
<li>git.git only has one or two committers, right? In theory, it should be easy to follow the commit graph, but it looks pretty messy to me.</li>
</ul>

<p><strong>Update Thu Nov 11 23:49:35 UTC 2010</strong>:</p>

<ul>
<li><a href=""https://gist.github.com/673438"" rel=""nofollow noreferrer"">here's a gist with some in-progress work</a></li>
<li>another idea is to prevent trivial merges on the client end, with a ""git push"" <a href=""http://article.gmane.org/gmane.comp.version-control.git/92920"" rel=""nofollow noreferrer"">wrapper</a></li>
</ul>

<p><strong>Update Wed Dec 15 18:34:52 UTC 2010</strong>:</p>

<ul>
<li><a href=""https://stackoverflow.com/users/217284/adymitruk"">adymitruk</a> is close! Just one case is still unresolved: non-trivial merges must still work.</li>
<li>A rather complete <a href=""https://gist.github.com/737842"" rel=""nofollow noreferrer"">test suite</a> is available, check it out.</li>
<li>I asked for help on a (the?) <a href=""http://thread.gmane.org/gmane.comp.version-control.git/163788"" rel=""nofollow noreferrer"">git mailing list</a>.</li>
</ul>
","9","156060","0","0"
"41871617","1703512","2017-01-26 10:39:06","1","5075","<git><git-branch><git-flow><git-workflow>","git-flow push non ready feature on remote git server","<p>I use git flow methodology and i need advice on how to push non ready feature on remote git server.</p>

<p>By default we can do it in such way (If feature has finished)</p>

<pre><code>git checkout -b feature develop
Do something...
git commit -am ""Message""
git checkout develop
git merge --no-ff feature
git push origin develop
git push origin feature
</code></pre>

<p>What if my feature is not ready, but i want push it on remote server?</p>

<p>I have tried to do it in such way:</p>

<pre><code> git checkout -b feature develop
 Do something...
 git commit -am ""Message""
 git push origin feature
</code></pre>

<p>But if i look at graphic scheme of commits it seems like develop and feature are the same branch (But of course they are not the same).</p>
","0","1703512","0","0"
"32538472","541804","2015-09-12 11:53:26","0","149","<git><deployment><ftp><web-deployment><git-branch>","How to use git and deployment platform to deploy code changes without commits","<p>We use GIT repos in conjunction with DeployBot.com (Deployment Platform) and FTP.
Code in our repos is organised with topic branches.</p>

<p>In order to deploy code to a server, we simply commit latest changes, merge it with master (that branch is used for deployment) and the deployment platform transfers the modified files. The above approach works great in 90% of scenarios.</p>

<p>However, sometimes we need to test our code quickly on the server (it is not possible to do that in dev environment) but we don't want to commit these small changes every time to keep the repo history compact and clean. We don't also want to use FTP to directly modify files without committing them, since the modified files are out of our control. </p>

<p>I am wondering if you have the same problems and what approach you use to overcome it. Initially I was thinking about maintaining a special branch that could be used to keep all these ""quick"" one-time commits but I find it not elegant/agile and quite problematic.</p>

<p>All ideas are highly appreciated. Many thanks!</p>
","0","541804","",""
"50365592","9798709","2018-05-16 08:12:51","2","587","<git><git-branch>","Delete git branch by anything, not name","<p>I have a problem with deleting git branch. At first I was able to create it using 'git checkout -b ....'. But it seems to me, that I made a mistake while writing, hit something wrong, then backspace. It resulted in wrong name of this branch.</p>

<p>I was able to work on this branch, even push it to remote, but it makes weird behavior (cannot see branches in web interface).</p>

<p>git branch -r shows me</p>

<pre><code>origin/master
origin/rrseria_test_utility
</code></pre>

<p>In web interface (bitbucket) I can see this branch in commits with following name</p>

<pre><code>rrseriaÅl_test_utility
</code></pre>

<p>Pleasse note that capital A is not just A, but A with circle above. Seems like utf-8 character 'U+00C5'.</p>

<p>When I try to remove it, then</p>

<pre><code>git branch -d rrseria_test_utility
error: branch 'rrseria_test_utility' not found. 

git checkout rrseria_test_utility
error: pathspec 'rrseria_test_utility' did not match any file(s) known to git. 
</code></pre>

<p>Can you help me how to delete this branch ?   </p>
","1","9798709","",""
"15626353","46194","2013-03-25 22:54:31","6","1098","<git><branch><git-branch><git-remote><remote-branch>","Detailed explanation of 'git remote show'","<p>I honestly cannot find any detailed documentation of the output of <code>git remote show</code> (certainly not on the <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-remote.html"" rel=""nofollow"">man page</a>)</p>

<p>In particular, a clear, exact explanation of the <code>Local</code> sections would be appreciated.</p>

<p>An example of what I find confusing: </p>

<p>Here I have two remotes, <em>klas</em> and <em>origin</em> and the output they produce:</p>

<pre><code>&gt; git remote show klas
* remote klas
  Fetch URL: ..\klasrepo
  Push  URL: ..\klasrepo
  HEAD branch: master
  Remote branches:
    experiment  tracked
    feature     tracked
    master      tracked
    pu          tracked
    stashbranch tracked
  Local branch configured for 'git pull':
    pu merges with remote pu
  Local refs configured for 'git push':
    experiment pushes to experiment (fast-forwardable)
    feature    pushes to feature    (fast-forwardable)
    master     pushes to master     (fast-forwardable)
    pu         pushes to pu         (up to date)
&gt; git remote show origin
* remote origin
  Fetch URL: C:/Temp/git/.\barerepo.git
  Push  URL: C:/Temp/git/.\barerepo.git
  HEAD branch: experiment
  Remote branches:
    experiment tracked
    master     tracked
  Local branches configured for 'git pull':
    experiment  merges with remote experiment
    master     rebases onto remote master
  Local refs configured for 'git push':
    experiment pushes to experiment (up to date)
    master     pushes to master     (fast-forwardable)
</code></pre>

<p>Notice that <em>experiment</em> and <em>master</em> are listed under <strong>both</strong> <code>local refs configured for 'git push'</code>. What does that mean? I have configured <em>master</em> and <em>experiment</em> to track <em>origin/master</em> and <em>origin/experiment</em> respectively (and <em>pu</em> to track <em>klas/pu</em>).</p>

<p>My local <em>feature</em> branch is not set up to track anything, but is still listed under <code>local refs configured for 'git push'</code> (the only connection seems to be the identical name, another non-tracking branch, <em>foo</em>, is not mentioned). <code>git push</code> while on <em>feature</em> gives <code>fatal: The current branch feature has no upstream branch.</code> - hardly ""fast-forwardable"".</p>

<p>It seems that the criteria for a local branch being listed under <code>local refs configured for 'git push'</code> is that there happens to exist a remote branch with the same name??</p>

<p>For reference:</p>

<pre><code>&gt; git branch -vva
  experiment                0cf7b2a [origin/experiment] added rand content 82 to .\rand_content.txt
* feature                   4b25f46 added rand content 62 to bar.txt
  foo                       40aee50 added rand content 17 to .\rand_content.txt
  master                    4b25f46 [origin/master] added rand content 62 to bar.txt
  pu                        44ad10b [klas/pu] added rand content 51 to doo.txt
  remotes/klas/experiment   1f4e89b app
  remotes/klas/feature      884e953 added rand content 80 to bar.txt
  remotes/klas/master       57877c1 added in tobias repo
  remotes/klas/pu           44ad10b added rand content 51 to doo.txt
  remotes/klas/stashbranch  8678cf0 added rand content 44 to .\rand_content.txt
  remotes/origin/HEAD       -&gt; origin/master
  remotes/origin/experiment 0cf7b2a added rand content 82 to .\rand_content.txt
  remotes/origin/master     4b25f46 added rand content 62 to bar.txt
&gt; git config --list --local | select-string 'branch|remote'
remote.origin.url=C:/Temp/git/.\barerepo.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
branch.master.rebase=true
remote.klas.url=..\klasrepo
remote.klas.fetch=+refs/heads/*:refs/remotes/klas/*
branch.experiment.remote=origin
branch.experiment.merge=refs/heads/experiment
branch.pu.remote=klas
branch.pu.merge=refs/heads/pu
&gt; git --version
git version 1.8.1.msysgit.1
</code></pre>
","0","46194","0","0"
"15628082","212505","2013-03-26 02:05:08","0","54","<git><git-branch>","Using git to manage code for machines with different architectures","<p>I'm looking for a way to manage some research code that is running on a number of supercomputing clusters that require different modules at build time.</p>

<p>For example: 
Server1 uses intel compilers and the MKL libraries.
Server2 uses gcc compilers with blas and lapack libraries.</p>

<p>These differences change a few header files and swap out <code>int</code> for <code>MKL_INT</code> in places (for example), but ultimately the code in general remains the same and should yield the same results (within numerical noise bounds).</p>

<p>This is an active code base and I change bits and pieces regularly. Currently I have the project on github, created a master branch from Server1, then two new branches named Server1 &amp; Server2; modified the code in each branch so they compile and runs as expected and pushed the changes upstream. </p>

<p>Being new to git, I've hit a wall here. Am I able to use this model to now work on the code in general (say on a work branch) and merge these changes to both server branches? If so, would the master branch essentially be rendered useless? Is there a better way to go about working with this situation?</p>
","2","212505","",""
"15630249","454780","2013-03-26 05:50:59","1","126","<git><version-control><git-branch>","I have git repo with one branch: master. How do I rename the branch locally and on the remote repo?","<p>I have a git repo with a single branch: the master branch. Instead, I'd like for the master branch to be called ""somethingelse"", that way later I can add more branches with other names. I don't want to have a branch called ""master"".</p>

<p>How do I do it?</p>
","1","454780","0","0"
"15637404","1175555","2013-03-26 12:44:59","1","1433","<git><git-branch><branching-and-merging>","git log not showing branches when you work alone in the project","<p>I have found that I only see branches and the right project topology when using either <code>gitk</code>, <code>sourcetree</code> or <code>git log</code> if I am collaborating with other developers. </p>

<p>But when I work alone and I create branches by using <code>git checkout -b branchName</code>, then I cannot see any branch in any of those visual representation tools.<br>
It looks like I have been working only in master, no branches are represented.</p>

<p>What am I doing wrong? I expect to see my branches appearing, when I create them or merge them back with other branches or master.</p>

<p>Am I misunderstanding how git works?</p>

<p>Further explanation:</p>

<p><img src=""https://i.stack.imgur.com/UkrYh.png"" alt=""enter image description here""></p>

<p>I expect to see something like this where all my branches are represented:</p>

<p><img src=""https://i.stack.imgur.com/iQti4.png"" alt=""enter image description here""></p>

<p>Thanks a lot</p>
","3","1175555","0","0"
"50386984","2797757","2018-05-17 08:40:38","2","1587","<git><git-branch>","Get git branch name without prefix","<p>I have these branches:</p>

<pre><code>refs/heads/master
refs/heads/feature/dummy
</code></pre>

<p>Is there native git command to get only the last part of branch name? (<code>master</code>, <code>dummy</code> in the above example)</p>

<p>I have tried <code>git rev-parse --abbrev-ref HEAD</code> but will get <code>master</code> and <code>feature/dummy</code></p>
","12","2797757","",""
"32560144","2071938","2015-09-14 08:17:50","0","166","<git><git-branch><git-merge>","git update branch from master","<p>I worked on master branch, and after the project was finished I created a branch X for the specific project. Now I have changed a lot in the master branch and want to move those changes to  branch X as well.</p>

<p>I don't want to merge because merge would mean that changes in X would also be present after the merge right?</p>

<p>I want master and X to be exactly the same</p>
","11","2071938","",""
"32561650","3248481","2015-09-14 09:42:10","12","21485","<git><github><merge><git-branch>","How to duplicate a branch into another existing branch in git","<p>I would like to push all the changes in one branch to another branch (existing branch) without merging.</p>

<p>For the example, consider two branches branch1 to branch2. Both branch1 and branch2 track origin/branch1 and origin/branch2 respectively.</p>

<p>Branch1 has commits A,B,C,D,E,F
Branch2 has commits A,B,D,F</p>

<p>I would like to make Branch2 exactly like branch1. Cherry-picking and merging would give conflict which i dont wanna spend time resolving, because all i am trying to do is, blindly replicating branch1 into branch2.</p>

<p>I am able to do this by </p>

<pre><code>git checkout branch1 # Moves to branch1
git push origin :branch2 # Deletes remote branch origin/branch2
git branch -d branch2 # Deletes the local copy of this branch
git pull
git push origin HEAD:branch2 # Creates new branch in remote repository from the HEAD at local branch branch1
</code></pre>

<p>Is there a better way of doing this through some --force options in merge commands. I dont want to delete the branch everytime just to create a new branch with the same name.</p>

<p>Thanks</p>
","3","3248481","0","0"
"15730551","25991","2013-03-31 14:40:02","22","12067","<git><git-branch>","Get new upstream branch with git","<p>I've forked a repo and all of my work goes into that fork (my origin) and I merge branches upstream with pull requests. Pretty standard.</p>

<p>But now there's a new branch in the upstream repo and I can't quite figure out how to get that new branch locally and then push it to my origin. Here is my situation.</p>

<pre><code>$ git remote show origin
* remote origin
  Fetch URL: git@github.com:rackspace/jclouds.git
  Push  URL: git@github.com:rackspace/jclouds.git
  HEAD branch: master
  Remote branches:
    1.5.x                   tracked
    master                  tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

$ git remote show upstream
* remote upstream
  Fetch URL: https://github.com/jclouds/jclouds
  Push  URL: https://github.com/jclouds/jclouds
  HEAD branch: master
  Remote branch:
    master tracked
  Local ref configured for 'git push':
    master pushes to master (up to date)
</code></pre>

<p>I know that there is a 1.6.x branch in jclouds/jclouds and I want to get that branch locally and then push it to rackspace/jclouds. I've tried this command</p>

<pre><code>$ git fetch upstream 1.6.x
From https://github.com/jclouds/jclouds
 * branch            1.6.x      -&gt; FETCH_HEAD
</code></pre>

<p>And it looks like it's fetched the branch but I don't see it in <code>git remote show</code> or <code>git branch -a</code> so I'm unable to setup a local tracking branch.</p>

<p>What am I missing?</p>
","0","25991","0","0"
"32574276","2605112","2015-09-14 21:31:13","3","254","<git><github><git-branch><git-commit><git-cherry-pick>","Is a new branch necessary before git cherry pick?","<p>I've been following this example <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html"" rel=""nofollow"">here</a>, and it shows that you create a temporary branch before you use <code>git cherry-pick</code>, and then you cherry pick onto that temporary branch.  </p>

<p>In the example, the temporary branch is called <code>newbar</code>, and it branches off from <code>foo</code>.  </p>

<p>Is it necessary to have the temporary branch?  Or can you just cherry pick from <code>foo</code>?  The example doesn't make it clear the purpose of this temporary branch.  </p>
","2","2605112","",""
"32574620","2605112","2015-09-14 22:00:25","2","84","<git><git-branch><git-rebase><git-checkout>","Difference between `git rebase foo bar` and `git checkout bar; git rebase foo`?","<p>I've seen both, and they seem to do the same thing.  </p>

<p>1)   <code>git rebase foo bar</code></p>

<p>2)  <code>git checkout bar</code>; 
<code>git rebase foo</code></p>

<p>Are they the same?  And, does it depend on which branch you are on when you do 1)?  </p>
","0","2605112","",""
"15738147","2110187","2013-04-01 05:32:57","4","3403","<windows><git><git-branch>","git - two branches named the same? Difference is one lower case - one mixed case?","<p>I am so used to typing in camelCase that I have been doing it in git.  That is - until I realized git is case sensitive!!   File names included.</p>

<p>From history - at the start of this production branch - it was ClientMgr.    But just at the start.</p>

<p>All the work past the initial commit - has been on branch - clientmgr.</p>

<p>A few hours ago - I realized the problem.    Since the tree was straight - and not branches - I tried deleting ClientMgr.   Right after - I had 195 new files when before all was clean.</p>

<p>Unsure - I restored a backup - but now have two branches - with the same name - different cases.    </p>

<p>Do I continue on - and just ignore the ClientMgr?   Or is there a sane way to clean this up?    </p>

<p>I would really love to end up with one.  I have some ideas - but tired at gitting shot it...</p>

<p>Any and all suggestions appreciated.</p>

<p>P.S. - guess this helps explain why I had some missing / lost changes a few days ago.</p>

<p>I love git - hope to get past or mostly past the got-ya's
+++++++++++++++++++++++
Edit: 4/1/2013</p>

<p>The ClientMgr was the original branch - with one commit.   I continued working (thinking I was on the ClientMgr branch but instead the new clientmgr branch.</p>

<p>I am concerned because of the same name - different case I think is potential time bomb.  That is I suspect - git mostly treats them as separate - but not always.  For example - when on ClientMgr - and trying to check clientmgr - I get an error message that I am already on it.</p>

<p>Seeing this - there could be other problems looming with this.</p>

<p>I think my first step will be to backup again - and then try to rename ClientMgr to where there is not similarity - and test and see how that goes.</p>

<p>It that goes well - at least I have (or may have) taken care of the </p>

<p>Once again - I greatly appreciate everyone input.</p>

<p>Jim H</p>

<p>+++++++++++++++++++++++++
Edit 2 </p>

<p>Not what expected - but seems ok</p>

<p>I renamed ClientMgr to oldclientmgr via
git branch -m ClientMgr oldclientmgr</p>

<p>Looking at the tree in SourceTree - it renamed both to oldclientmgr
I checked the graph - and I looked to be where I wanted to be
I opened and reviewed the code - and it look to be properly in place</p>

<p>So as I thought - git is not always case sensitive - or it would not have renamed both branches.</p>

<p>Once again - thank you!</p>

<p>Jim H</p>
","0","2110187","0","0"
"50411650","3032338","2018-05-18 12:45:18","0","1000","<git><git-branch>","How to re commit same changes in git branch","<p>I am using git for a weeks now. I am working in a feature branch, sometimes when I push code into my branch it shows lot of conflicts with develop branch. so I this time I followed following steps to avoid unwanted conflicts and problems at work place :(</p>

<ol>
<li><p>git branch abc</p></li>
<li><p>git checkout abc</p></li>
<li>did my work</li>
<li>git stash</li>
<li>git pull origin develop</li>
<li>got conflicts </li>
<li>Resolved conflicts and also git stash pop</li>
<li>git commit-m'message' // Don't know how merging removed lines which are not part of conflict</li>
<li>git push origin</li>
</ol>

<p>Now these step resulted in committing of 2 files, one in which I resolved conflicts and one in which I worked. Say File1 and File2 respectively.</p>

<p>Now I need to re push my code but only file2 i.e one in which I worked not in which I did conflict resolving and all.</p>

<p>But git status will show nothing as I have already done all the committing and pushing.
Also during some of the auto-merging the necessary code is removed from File1. How to bring that back?</p>

<p>Any help would be appreciated?</p>

<p>As I am still learning GIT so any explanation would help me and others.</p>

<p>I am using BITBUCKET.</p>

<p>Thanks!!</p>
","0","3032338","",""
"15823962","1122270","2013-04-05 00:23:28","5","834","<git><github><git-branch>","fork on github, then how do I manage my contributions?","<p>I'm a little unclear on the forkflow that is to follow a <code>fork</code> on github.</p>

<p>What if I have several small independent fixes of various bugs in the original repository, of a medium-sized project, say, OpenGrok?</p>

<ul>
<li><p>Do I create separate branches for each relatively small unrelated bugfix?</p></li>
<li><p>Do I create each branch from <code>master</code>, or could I branch one unrelated branch from the next?</p></li>
<li><p>Do I commit the fixes into <code>master</code>?</p></li>
</ul>

<p>I mean, over time, I still want to preserve the history and all, but I'm just afraid that after a while there'll be a complete mess in regards to a lot of meaningless branches for relatively minor bug fixes.</p>

<p>I plan to contribute a number of non-related fixes for a given project, and trying to do some planning of the development approach.</p>
","0","1122270","0","0"
"50425943","9634883","2018-05-19 13:44:30","4","1209","<git><performance><git-branch><git-checkout>","creating git branch is extremely slow in large repository","<p>i have a local repository with ~300.000 files and about 40gb on an encrypted filesystem (and i cannot change that ...).
i often need to create a new branch and make the current contents of the working directory the contents of this branch.</p>

<p>so this ""checkout"" is not actually a checkout that modifies anything in the working tree, but just creates a branch, switches to it, and leaves the working directory unchanged.
and it is <strong>not about large files</strong>: the average file size is much less than 1mb (40gb/300000=130kb)</p>

<p>currently i do:</p>

<pre><code>git checkout -q -b mynewbranch
git add -v -A
git commit -q -m ""at mynewbranch""
</code></pre>

<p>in principle this works, but the first step to create the branch takes more than an hour (!).
(the ""add"" and ""commit"" take a few minutes, i could live with that.)
the ""git checkout"" seems to re-read the whole working directory just in order to create the branch.</p>

<p>ideally i would want that creating the branch would take almost no time at all,
and its state should simply be based on a previously existing branch.
and then the ""add"" should also not take too much time since timestamps may be used
and not all file contents should be compared to the repository,
only files with new timestamps should be looked at in detail.</p>

<p>has anybody an idea how this can be done efficiently ?</p>

<p>edit: git 2.17, ubuntu, encfs over ext4, recent hardware, 12 cpu, mostly binary files (like pdf, jpeg, mp4; no deep tree; they need to be versioned).</p>

<p>the primary issue is: can it be avoided that just creating a branch looks at the content of all files ?</p>
","7","9634883","",""
"32612057","10608","2015-09-16 14:53:06","0","80","<git><git-branch><git-checkout>","git create OR update branch (while checking it out) -- single command","<p>I want to create a new branch and check it out. However, if the branch name I'm creating already exists, I don't want to get an error, I simply want git to update the already existing branch to the point I'm checking it out at.</p>

<p>Here is what I'm doing:</p>

<pre><code>$ git branch
  develop
* foobar
$ git checkout -b develop origin/develop
fatal: A branch named 'develop' already exists.
$ git update-ref refs/heads/develop origin/develop
$ git checkout develop
Switched to branch 'develop'
$ git branch
* develop
  foobar
$
</code></pre>

<p>Here is something like what I want:</p>

<pre><code>$ git checkout --update-if-exists -b develop origin/develop
Switched to branch 'develop'
$ git branch
* develop
  foobar
$
</code></pre>
","0","10608","",""
"32616823","4382223","2015-09-16 19:12:26","1","209","<git><macos><git-branch>","git doesn't see branches after reinstallation osx","<p>I'm very new to git. After complete osx reinstall I've noticed that I can't switch to other branches I've created before… There is only master: </p>

<pre><code>$ cd /usr/local
$ git branch -a
  * master
  remotes/origin/master
</code></pre>

<p>On github I see all my 4 brunches… I want to recover them…</p>

<p>Could anyone explain me how can make available my other branches?</p>
","5","4382223","",""
"15987924","186380","2013-04-13 12:45:00","5","1886","<windows><github><git-branch>","windows github tool - use branch unpublish or delete?","<p>I'm new to Github and I've been using the <a href=""http://windows.github.com/"" rel=""nofollow noreferrer""><strong>windows github tool</strong></a> which has proved a great help and handled a lot of things like SSH keys, prompts commits, discard a commit, revert commit, and it has a combined mechanism of pull+merge &amp; push (sync), and a lot!</p>
<p>I'm learning it and trying to get its internal git command level executions. The other day, I merged a hotfix branch and then wanted to delete it -</p>
<pre><code>git branch -d hotfix
</code></pre>
<p>I need to know how to delete it from the server as well. What are the git equivalents of the following two actions available in manage branch in the windows tool -</p>
<blockquote>
<ul>
<li><strong>Unpublish</strong> a branch - remove only from the server</li>
<li><strong>Delete</strong> a branch - remove locally and on server</li>
</ul>
</blockquote>
<p>Another thing I doubt is that the above git command was unable to remove the branch locally. I executed it, it removed the branch (didn't show in <strong>$ git branch</strong>) but if I restart the tool, the branch was still there! Was that a glitch?</p>
<p><em>If someone has been using these, can you pls suggest the best approach (I don't want to be totally dependent on the tool, I want to learn git as well).</em></p>
","0","186380","0","0"
"50456741","9536653","2018-05-21 21:17:49","1","2173","<git><github><push><git-branch>","Why is the remote branch name in git ""origin"", and not ""master""?","<p>I find it interesting that the remote branch name to be used when pushing back to the remote git repository is named ""origin"" when it's actually called ""master""... Why is this the case?</p>
","3","9536653","0","0"
"50470073","1004946","2018-05-22 14:21:32","0","30","<git><gitlab><git-branch><git-merge><branching-and-merging>","Can I undo changes that were made in other git branch?","<p>I'm working on a git branch called <code>x</code>. Some time ago I had to merge into that branch changes from the branch <code>y</code>. Now, since I've finished my work, I would like to publish my changes from branch <code>x</code>, so make a Merge Request. But the features that has been made in branch <code>y</code> are not yet ready to production, but they will be included in my branch (but I don't need them anymore) - is there an easy solution to ""unmerge"" changes that has been made when I've merged branch <code>y</code> into my branch? (so they won't be included in MR)</p>
","0","1004946","",""
"16093964","383403","2013-04-18 22:12:09","1","219","<git><git-branch>","Difference between git push origin prod AND git push origin prod:refs/heads/prod","<p>When I create a new branch and then want to push it remotely, I can do:</p>

<blockquote>
  <p>git push origin prod</p>
</blockquote>

<p>OR</p>

<blockquote>
  <p>git push origin prod:refs/heads/prod</p>
</blockquote>

<p>What is the difference ?</p>
","0","383403","",""
"16094552","1426193","2013-04-18 23:04:45","0","357","<git><git-branch><githooks>","prevent new branches being created in a git bare repo","<p>We have our main bare repo which has a hook that is supposed to push a specific branch to another remote bare repo.  The the other repo is only supposed to have the one branch. The post-receive hook checks to see if the current commit is on the specific branch (using git rev-parse specific_branch_name) and if so does a:</p>

<pre><code> git push ssh://git@remote/path/to/repo
</code></pre>

<p>Now we did something silly and pushed a new branch (which was on the same commit as specific branch).  The hook pushed this and a new branch on the other remote was created.  </p>

<p>Now obviously we need to delete that branch from the other remote.  However I want to know how to make the other remote refuse to create new branches (it should have only the one specific branch and no others).  Is there a way to do this?</p>

<p>Thanks in advance.</p>
","0","1426193","",""
"32744030","3611204","2015-09-23 15:46:50","0","25","<git><branch><git-branch><remote-server>","Changing git branches and recreating environments","<p>This is more a best practices questions. Sometimes, I'm working on a long term branch and I have to stop it to debug something quick in another branch. In order to do that, I checkout another branch and my project in local and in my remote server changes too (thanks to PhpStorm that connects both). I also do a composer.phar update, doctrine:schema:update and other commands to adapt the project to the new environment. The problem with that is:</p>

<p>1) I waist time changing branchs and using the commands just to debug something quick and then come back to my long term project.</p>

<p>2) The new branch erases new parameters if I had added new ones on the long term branch. I have to remember the values I chose and so on.</p>

<p>3) My database is updated and if I had filled it on the long term branch I loose the content.</p>

<p>The third point is easier to solve. I just have to create another database for the new branch. However, I think I can improve all these steps. Maybe having another folder for the new branche. But how would I do with git that points to only one folder? I would like to know how other developers do that in their everyday work to be more efficient.</p>

<p>Obs: I work on a Symfony project. </p>
","2","3611204","",""
"16188528","378170","2013-04-24 09:36:17","3","4881","<git><git-branch><git-workflow>","How to share a branch with other developers under git","<p>Here's generally speaking (I can provide more details), our workflow:</p>

<p>1) We have a <code>prime repo</code> on a remote server host.</p>

<p>2) We have a <code>bare repo</code> on a remote server host.</p>

<p>3) We have a clone of the bare repo with a working tree on our local computers, and the <code>bare is setup as a remote</code> on our local repos.</p>

<p>Under this, we are working with two branches at least:
dev branch, and a master branch.</p>

<p>A hook will administrate this process to either make changes on dev or master according to the HEAD placement.</p>

<p>So, this is a nice worflow, but I'm wondering if someone could help us making this even better.</p>

<p>Let's say user A is working on his local <code>branch test-this-thing</code>;</p>

<p>He/She wishes another developer to work on this branch as well. </p>

<p>By <strong>taking into consideration the workflow above</strong>, is there a way to push a specific branch so that other users can pull that work from that specific branch as well, so that they can work on test-this-thing together ?</p>

<p><strong>Update</strong></p>

<p>hub is or origin renamed. So:</p>

<p>If I do locally:</p>

<pre><code>git checkout -b test
git push hub test
</code></pre>

<p>I get the branch on the bare repo. OK.</p>

<p>If the other developer B does:</p>

<pre><code>git checkout -b testdeveloperB
git pull hub test:testdeveloperB
</code></pre>

<p>It will successfully <code>fetch</code> and <code>merge</code> the test branch into testdeveloperB.</p>

<p>So, let's say developer B makes a change on is local testdeveloperB branch and wishes to push those changes into hub test branch.</p>

<p><strong>He IS on branch testdeveloperB</strong></p>

<p>I tried:</p>

<p><code>git push hub test:testdeveloperB</code> - it says there's no such think as test.</p>

<p>I tried:</p>

<p><code>git push hub testdeveloperB:test</code> - and it was apparently OK.</p>

<p>So regarding this <code>push</code> - the first parameter after hub, is the place where we have our files references to be pushed, and the second is where we wish to files references to go.</p>

<p>Since we are on our local testdeveloperB branch, why to we need to explicitly referring it ?</p>

<p>Why can't we simple do <code>git push</code> ?</p>

<p><strong>update with answer</strong>
BECAUSE
we haven't setup that on our git config, so git doesn't know what to do with that.</p>

<p>Thanks in advance.</p>
","5","378170","",""
"16203765","2317580","2013-04-24 23:09:19","3","99","<git><branch><git-branch><bitbucket><tortoisegit>","Isolate specific folders from updating on git","<p>I'm not that experienced with version control and it's my first time with Git. We're using BitBucket and TortoiseGit, set it up and working.</p>

<p>Now, I would like to be able to isolate a folder (let's call it ""resources"") which will hold some resource files such as graphics, scripts, sounds which are not really crucial to the coders on the project. The coders must not be able to pull from or synch with this folder.</p>

<p>However, another team should be able to manipulate this ""resources"" folder and make changes to it, while also being able to receive the changes made by the coders.</p>

<p>I understand that there is an ignore function that creates a .gitignore list. But as I understand it, this list will ignore files/folders across all users so nobody will effectively be able to access the ""resources"" folder as soon at it's defined to be ignored.</p>

<p>Another way would be to branch the ""origin"" into a ""coders"" branch and ""resources"" branch. Then the ""coders"" would push and pull to/from remote ""coders"", push to (but never pull from) ""origin"" and also never push to ""resources"". ""Resources"" would always pull/push to and from ""origin"" but never to ""coders"".</p>

<p>I suspect this process would really need some kind of a ""push to specific list of branches"" option.</p>

<p>Not sure if I'm right about how this works, I have tried a couple of experiments but am obviously failing. Am I looking at it the wrong way? What would be the best solution for a situation like this (preferably using TortoiseGit).</p>
","0","2317580","0","0"
"68861020","14714363","2021-08-20 10:48:48","0","209","<security><azure-devops><git-branch>","How to hide git feature branches from other team?","<p>I have a Azure DevOps Git repo on which two teams are currently working.
We created separate folders under 'feature/' for each team. Can we hide team1's feature folder from team-2?</p>
<p>Using <a href=""https://learn.microsoft.com/en-us/azure/devops/repos/tfvc/git-permission-command?view=azure-devops"" rel=""nofollow noreferrer"">git tf permission</a> command, I was able to restrict the contributory access to other team's folders. But I just don't want the feature team folder visible to other team members.</p>
<p><a href=""https://i.stack.imgur.com/68mDN.png"" rel=""nofollow noreferrer"">Please click here to view my branch folder structure</a></p>
<p>As per the image, team-1 members should be able to see only 'feature/team-1/<em>' branches. 'feature/team-2/</em>' should not be visible to team-1 people.</p>
","5","14714363","",""
"16979201","468975","2013-06-07 08:09:32","13","9990","<git><git-branch><git-merge>","how to merge specific files in git","<p>Suppose I have a project on MASTER branch with 100s of php files. To do a bug fixing in the project, i create a separate branch</p>

<pre><code>git checkout -b bugfix
</code></pre>

<p>Then after fixing the bug in 3 files (for eg index.php, register.php and login.php), i merge it in the master branch</p>

<pre><code>git checkout master
git merge bugfix
</code></pre>

<p>The above code will merge all the 3 files i made changes, but is there anyway that i can force GIT to merge only 2 files, say login.php and register.php only?</p>
","4","468975","0","0"
"16982155","6254","2013-06-07 10:40:48","4","1025","<git><git-branch><branching-and-merging>","Does git-flow merging scale well for larger teams?","<p>We're considering to adopt git-flow in a team of ~10 developers with weekly release schedule. Our plan is to branch a release branch from develop every monday and stabilize it by next monday's release to production. In the meantime, multiple features can land in develop and so it will most likely be necessary to resolve merge conflicts between develop and release branch.</p>

<p>Since the person doing the merge cannot possibly know all of the codebase and resolve conflicts by themselves, I'm wondering if this is going to cause problems. Basically, that person will need to talk to each of the developers and have them help resolve the conflict. I'm afraid this can be a bottleneck and become pretty tedious and painful.</p>

<p>Is this a problem in practice? Any experiences merging branches in git-flow style of work? Or some other branching strategies with similar benefits?</p>
","2","6254","0","0"
"17042093","438742","2013-06-11 10:38:52","17","5237","<git><git-branch>","git track branch with different name","<p>I have a repo which tracks non-default branches. So, there is a local branch named ""master"" which should track ""origin/master-13.07"". I've done ""push -u"", and I believe it should be enough, the branch is tracked. Output of the <code>git branch -vv</code>:</p>

<pre><code>C:\work\repo&gt;git branch -vv
  stuff     68792df [origin/stuff-13.07] Small bugfix
* master 68792df [origin/master-13.07: ahead 1] Small bugfix
</code></pre>

<p>Output of the <code>git status</code></p>

<pre><code>C:\work\repo&gt;git status
# On branch master
# Your branch is ahead of 'origin/master-13.07' by 1 commit.
#   (use ""git push"" to publish your local commits)
#
nothing to commit, working directory clean
</code></pre>

<p>All seems all right, but when I just use ""git push"" (as git recommends me above), it fails:</p>

<pre><code>C:\work\repo&gt;git push
fatal: The upstream branch of your current branch does not match
the name of your current branch.  To push to the upstream branch
on the remote, use

    git push origin HEAD:master-13.07

To push to the branch of the same name on the remote, use

    git push origin master
</code></pre>

<p>Yes, I know that the name doesn't match, this is exactly what I want and I told so to git by ""push -u"". Why I cannot just use ""push""?</p>

<pre><code>C:\work\repo&gt;git --version
git version 1.8.3.msysgit.0

C:\work\repo&gt;git config push.default
simple
</code></pre>
","4","438742","0","0"
"50650952","5705572","2018-06-01 21:01:45","0","34","<git><git-branch><branching-and-merging><git-push><git-cherry-pick>","git automation - setup local branch to receive commit from working branch, auto-add a file, commit with default message & push without checkouts","<p>I have a fairly complex workflow. My working git branch is <code>master</code>. Assume that there exists a local branch called <code>push_branch</code>.</p>

<p>I'd like to automate the following steps whilst staying from within my working branch <code>master</code>.</p>

<ul>
<li><p>At a particular point in time, a commit to <code>master</code> is made with a user-specified commit message. This should trigger the following:</p>

<ol>
<li>An additional <code>side_effect_file</code> is generated.</li>
<li><code>push_branch</code> obtains the latest set of tracked files from <code>master</code>. It also receives the <code>side_effect_file</code> generated by the last commit made to <code>master</code> and adds to its staging index.</li>
<li>A commit is made in <code>push_branch</code> (i.e. the <code>side_effect_file</code> is now committed in <code>push_branch</code>. (can use the same commit message as step 0 above or use a default commit_msg, it doesn't matter).</li>
<li><code>push_branch</code> pushes to github (or a suitable remote repo).</li>
</ol></li>
</ul>

<p>Here is a pictorial description of the desired workflow:
<a href=""https://i.stack.imgur.com/1Z037.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/1Z037.png"" alt=""complex_git_workflow""></a></p>

<p>In essence, all the working happens in <code>master</code>, which acts like a one-way feed to <code>push_branch</code>.  The real challenge is to automate the process seamlessly, whilst staying inside the working branch <code>master</code>  (or at-least appears seamlessly to the user by using a shell script which runs in the background).  </p>

<p>What I don't want to do is to manually checkout <code>push_branch</code>, do a manual commit after adding <code>side_effect_file</code>, issue a commit message, do a manual push and then checkout <code>master</code> again. That is tedious, and not a sustainable solution.  </p>

<p>Is this achievable? Maybe using <code>git-worktrees</code> (which I don't understand well)?</p>
","4","5705572","",""
"33637965","1438029","2015-11-10 19:26:21","1","28","<git><escaping><git-branch>","How to delete git branch named ""--help""?","<p>I accidentally created a local branch named <code>--help</code> and can't figure out how to delete it.  The usual <code>-D</code> or <code>--delete</code> doesn't work when followed by the <code>--help</code>.  It just outputs help text:</p>

<pre><code>$ git branch -D --help
usage: git branch [options] [-r | -a] [--merged | --no-merged]
   or: git branch [options]...etc
</code></pre>

<p>I've tried single <code>'</code> and double <code>""</code> quotes and get the same result.</p>
","0","1438029","",""
"33639276","1156785","2015-11-10 20:45:50","4","14933","<git><git-branch>","Switch git branch not updating files","<p>I have created a new branch and added some files.</p>

<p>Locally I use tortoise GIT and when I switch to the new branch, the files are updated.</p>

<p>On my production server using CLI, when I switch to the new branch with <code>git checkout mynewbranch</code>, the files are not updated.</p>

<p>When I switch with <code>git checkout origin/mynewbranch</code>, the files are updated but i get the following message:</p>

<pre><code>You are in 'detached HEAD' state. You can look around, make
experimental changes and commit them, and you can discard any commits     
you make in this state without impacting any branches by performing 
another checkout.
</code></pre>

<p>Why is this?</p>
","0","1156785","0","0"
"17115832","1057413","2013-06-14 19:22:47","1","57","<git><git-branch><git-merge><git-commit>","Copy one git branch with an extra commit to another that is one behind","<p>I have the following git structure (Numbers denote commits):</p>

<pre><code>  _ 1 _ 2 _ 3 _ 4  (Branch mainline)
_|
 |_ 1 _ 2 _ 3 _ 4 _ 5 (Branch Test)
</code></pre>

<p>Thus, Test has one extra commit than mainline does. I basically need to copy over that commit to mainline. How do I do that?</p>

<p>So my end state should be:</p>

<pre><code>  _ 1 _ 2 _ 3 _ 4 _ 5 (Branch mainline)
_|
 |_ 1 _ 2 _ 3 _ 4 _ 5 (Branch Test)
</code></pre>
","0","1057413","",""
"17122054","384706","2013-06-15 09:18:02","0","57","<git><version-control><branch><git-branch>","Why isn't the master branch listed in a new git repository?","<p>I create a <code>git</code> repository via <code>git init</code>.<br>
I do <code>git branch</code>.<br>
Problem: I was expecting to see one branch listed, the <code>Master</code> branch. But nothing is listed. Why?</p>
","0","384706","",""
"17155436","384706","2013-06-17 19:39:33","2","141","<git><version-control><git-branch><git-merge><git-rebase>","Can git figure out that the branch to be merged has obsolete changes?","<p>I am new in <code>git</code> and I am find it hard to wrap my head around the fact that everything is around snapshots/commits and not individual files.<br>
So assume that I have a tree in my repository as follows.  </p>

<pre><code>C4 (HEAD,Master,Origin/Master)  
*  
C3  
*  
C2  
*  
C1  
</code></pre>

<p>Now I branch out from here:  </p>

<pre><code>B1 (HEAD, testBranch)  
*  
C4 (HEAD,Master,Origin/Master)  
*  
C3  
*  
C2  
*  
C1  
</code></pre>

<p>In my <code>testBranch</code> I only modify 2 files of the whole repository. Just 2.<br>
The development in <code>master</code> in the remote repository continues so eventually we have the following tree:  </p>

<pre><code>                    C8(Master,Origin/Master)   
                    *   
B3(testBranch)    C7   
  *              *   
  B2           C6  
    *         *
     B1    C5   
       *  
       C4  
       *  
       C3  
       *  
       C2  
       *  
       C1  
</code></pre>

<p>Now I have finished working on the branch and want to merge to master. But the master has moved further ahead.<br>
But the only difference between <code>B3</code> the latest of <code>testBranch</code> and <code>C8</code> the latest of <code>master</code> are the changes in the 2 files that I originally started to work on when I forked the branch. But additionally <code>testBranch</code> is ""lest behind"" the <code>master</code> branch since other modifications have occurred.<br>
So what will happen if I merge <code>testBranch</code> to <code>master</code>?<br>
Will <code>git</code> figure out that the only changes to merge are the 2 files I originally worked on?<br>
Will I get conflicts? Should I not do a merge but a rebase? Why?</p>
","1","384706","0","0"
"33718033","5563909","2015-11-15 09:09:02","1","103","<git><git-branch><rebase>","Others changes in git diff","<ol>
<li><p>I am working on a local branch. I made the changes and committed them. </p></li>
<li><p>Now, I did a git pull (after setting upstream) and then git rebase -i.</p></li>
<li><p>Now, if I see git diff HEAD^, I see some other changes in the file apart from my changes in the file. I think these changes are already pushed by somebody (since if I copy my file elsewhere and do git checkout and paste my file, then I see my changes only in git diff)</p></li>
</ol>

<p>So, now if I do a git push, those changes will go as part of my commit.</p>

<p>Can someone help me to remove those changes so that the git diff shows only my changes without doing copy and checkout?</p>
","3","5563909","",""
"50681227","738154","2018-06-04 12:59:09","2","1632","<linux><git><git-branch>","git branch, but changes reflect in master","<p>I've created a branch as <code>git branch my_branch</code>, then <code>git checkout my_branch</code>, work in it, however when I switch back in master <code>git checkout master</code> I do see these changes in master as well. I assume this should not be happening.</p>

<pre><code>% git checkout my_branch
Switched to branch 'my_branch'

&lt;I make my changes&gt;

% git status
On branch my_branch
Changes not staged for commit:
...

% git checkout master
Switched to branch 'master'
% git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
...
&lt;Shows the same changed files as in my_branch&gt;
</code></pre>

<p>What am I possibly doing wrong?</p>

<p>Thanks.</p>
","6","738154","",""
"69036709","2722634","2021-09-02 20:35:41","1","767","<commit><git-branch><pygithub>","pygithub how to get latest commit on specific branch","<p>Using pygithub how to get latest commit on specific branch in a repo
equivalent to github rest api https://{github.com}/api/v3/repos/{repo/}/{org}/commits/{branch}?per_page=1
I followed the steps mentioned in
<a href=""https://stackoverflow.com/questions/61430485/pygithub-receive-all-commits-of-a-specific-branch"">pygithub - Receive all commits of a specific branch</a> , It's returning null.</p>
<p><code>branches = repo.get_branches() for branch in branches: print(branch.name) commits = repo.get_commits(path=&quot;tree/&quot;+branch.name) for commit in commits: print(commit)</code></p>
","0","2722634","0","0"
"33763876","2110496","2015-11-17 17:59:37","1","208","<git><git-branch>","How to squash merged git changeset","<p>Is it possible to drop commits like <code>#9701282</code> in the <code>Git</code> history?<br>
I don't mean repo above <code>#b372fa5</code> should change,<br>
just graph should be simplified in this place.<br>
Commit in purple branch looks like redundant.<br>
It shouldn't be very hard to apply it's changes inside of <code>#b372fa5</code> merge point.<br>
What techniques exists for implement this action?</p>

<p><a href=""https://i.stack.imgur.com/sBYIG.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sBYIG.png"" alt=""Git branch""></a></p>
","0","2110496","",""
"33779317","195356","2015-11-18 11:50:46","1","33","<git><github><version-control><git-branch>","How to modify previous git branch","<p>I have 3 git branches - Develop, QA and Master. Developers use the Develop branch for all development. Once a task is completed by a developer and the code is committed to the Develop branch, the commit is merged to the QA branch for testing. After testing is complete, the code is merged to the Master branch then deployed.  We just found a bug in the QA branch that must be fixed before deploying. The fix has been made in the Develop branch but also includes changes that we do not want to deploy at this time. So, how do we fix the bug in QA? My first thought was to make changes directly to the QA branch just to fix the issue then merge those changes back to the Develop branch. But I wasn't sure what problems that may introduce to the Develop branch (ie. lost code etc...)</p>
","0","195356","",""
"33826576","422131","2015-11-20 12:19:11","2","3166","<git><github><version-control><git-branch><git-push>","git - Pushing a local branch to the remote tracking branch of a parent","<p>I have a local branch in my sandbox repository called <code>local-branch</code> which tracks a remote branch called <code>remote-branch</code>. I created the local branch thus:</p>

<pre><code>$ git checkout -b local-branch remotes/origin/remote-branch
</code></pre>

<p>I created a branch from the <code>local-branch</code> called <code>dev-branch</code>:</p>

<pre><code>$ git checkout -b dev-branch local-branch
</code></pre>

<p>I then committed some changes to <code>dev-branch</code> and now want to push it upstream to a branch off <code>remote-branch</code>. There it gets reviewed, approved and then merged into <code>remote-branch</code>. Following that, I need to <code>git pull</code> on my <code>local-branch</code> to sync it with <code>remote-branch</code>.</p>

<p>I am trying the following but this does not seem to work.</p>

<pre><code>$ git push remotes/origin/remote-branch local-branch
</code></pre>

<p>I see the following error:</p>

<pre><code>fatal: 'remotes/origin/remote-branch' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.
</code></pre>

<p>But I can see the repository when I run:</p>

<pre><code>$ git branch -a
</code></pre>
","1","422131","0","0"
"18088183","2535549","2013-08-06 18:49:58","18","12711","<git><branch><git-branch><git-tag>","Do git tags apply to all branches?","<p>I'm getting my feet wet with git tagging, but my previous background is in Subversion, where ""tags"" were really just copies, not ""real"" tags...</p>

<p>If I add a tag to a git repo, is it applied to all branches or only the current one?</p>

<p>For example, if I currently have these branches (<code>git branch -v</code>):</p>

<pre><code>* master deadbeef My master head comment
  dev    baddfeed My def head comment
</code></pre>

<p>And the currently checked out branch is master, as you can see. Now suppose I <code>git tag -a TAGNAME</code>, does <code>TAGNAME</code> apply only to <code>deadbeef</code> (master branch) or to <code>baddfeed</code> (dev branch) as well?</p>

<p>e.g., Say I subsequently switch to the dev branch (i.e., not the branch the tag was created on) before checking out the tag:</p>

<pre><code>git checkout dev
git checkout TAGNAME
</code></pre>

<p>Do I then end up with a checkout of <code>baddfeed</code> or will the tag checkout (second line) switch me back to the master branch (where the tag was created) and give me a checkout of <code>deadbeef</code>?
(Or third option, is my understanding of creating and restoring tags too flawed or too simplistic for the answer to be as simple as one of those two options?)</p>

<p>Also, does the answer to my question change any if I use a lightweight tag (<code>git tag TAGNAME</code>) instead of an annotated tag?</p>
","3","2535549","0","0"
"18131404","482717","2013-08-08 16:37:15","0","299","<git><github><git-branch>","GitHub/git - how to make only one branch (gp-pages) and delete other branches","<p>I have git repository with site, that is publish on GitHub pages (<code>gh-pages</code> branch).</p>

<p>Now I want to have only one branch <code>gh-pages</code> and delete all others (local and on server)</p>

<p>The answer that pops-up is <a href=""https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github"">How do I delete a Git branch both locally and remotely?</a> , however when doing </p>

<p><code>git push origin --delete master</code></p>

<p>remote: error: refusing to delete the current branch: refs/heads/master
To <a href=""https://github.com/Nodeclipse/www.nodeclipse.com.git"" rel=""nofollow noreferrer"">https://github.com/Nodeclipse/www.nodeclipse.com.git</a>
 ! [remote rejected] master (deletion of the current branch prohibited)
error: failed to push some refs to '<a href=""https://github.com/Nodeclipse/www.nodeclipse"" rel=""nofollow noreferrer"">https://github.com/Nodeclipse/www.nodeclipse</a>
.com.git'</p>

<p>With Eclipse EGit I can delete in UI but it remains on server, and after <code>pull</code> comes back.</p>
","0","482717","0","0"
"18208995","1197249","2013-08-13 12:23:34","0","53","<git><version-control><git-branch><git-push><git-pull>","I want to commit but also create branch in git. Is this the correct way?","<p>I have 3 files unstaged.<br>
What I want is to commit and push 2 of them and save the 3rd in a private branch.<br>
If I do git add/git commit for the 2 of them, then git checkout branch name and then git checkout master and THEN git pull followed by  git push am I correct?</p>
","0","1197249","",""
"34735250","1897974","2016-01-12 03:45:03","0","2541","<php><git><github><gitlab><git-branch>","How to make a git branch with only specific/selected files from a PHP project?","<p>I'm a total newbie to this Git.</p>

<p>My PHP project files have been added to Git by admin.</p>

<p>Now one new person is going to start working on this project. He will work on one module of this project. So, being a senior developer I've been asked to create a branch for him that will contain only specific files that he will need to start work on the specific module.</p>

<p>So this thing has created so many questions in my mind :</p>

<ol>
<li>Can I create a special branch for him with only specific/selected files from the project? If yes, how? If no, why?</li>
<li>Now only master branch of project is present. If the new branch of git is created for the new developer and he commits and pushes the changes he made to the git; how will they get merged with the master branch? Do I need to do it manually using third party tool like 'DeployHQ' or anything like or is there any way around.</li>
<li>To keep the things easy for him what I want to do is he should be able to commit, push the changes, those changes would straight away be reflected on server and he should be able to check it by running the pages in a browser. Can I make the this simple and easy as I'm thinking.</li>
</ol>

<p>In a nutshell I don't want to disclose all of my project files to him and want to keep things easier and simpler for me as well as for him.</p>

<p>Please please please guide me.</p>

<p>Thanks.</p>
","8","1897974","",""
"34759928","1897974","2016-01-13 06:36:50","2","7592","<git><github><version-control><gitlab><git-branch>","How to delete specific files & folders from newly created git branch in GITLAB dashboard?","<p>I'm a newbie to Git and I'm doing all the Git operations by logging-in at Gitlab URL using the Gitlab dashboard UI and menus.</p>

<p>I'm using <strong>Ubuntu Linux 12.04 LTS</strong> on my local machine. </p>

<p>I have no idea about how to use command line for Git operations.</p>

<p>So I just created new branch from '<code>master</code>' branch of my project. I want to delete specific files and folders from this newly created branch. I searched for menus/options in the Gitlab UI but I couldn't find it. I can see the files and folders when I click on 'Files' menu of my branch in Gitlab UI.</p>

<p>Can someone please suggest me how to delete specific files and folders from the newly created git branch?</p>
","0","1897974","0","0"
"50912342","3511736","2018-06-18 14:58:41","0","496","<git><git-branch><git-checkout><git-tag>","Checkout git tags present on multiple branches","<p>I read a lot of SO posts but none of them make me understand how really work git tags especially concerning their link with branches. I think it is due to a misunderstanding of git principles. Maybe someone could help me.</p>

<p>Let's say I have the following two branches <code>master</code> and <code>develop</code> with <code>K</code> the merging commit:</p>

<pre><code>-A-B-C-D-E-F-G-K-L-M (master)
       \-H-I-J-/     (develop)
</code></pre>

<p>If I tag the <code>J</code> commit, this tag will be on the two branches (because of the merge).
So when I <code>checkout</code> this tag, what version would I have? The one containing the <code>E</code>,<code>F</code>,<code>G</code> commits of the <code>master</code> branch or the one from the <code>develop</code> branch. Not sure I am clear about what I want to understand. I know that tags does not reference branch but only commit. But checkouting a tag also recover a commit historic doesn't it?</p>
","8","3511736","0","0"
"69263889","4635340","2021-09-21 05:42:02","1","214","<git><github><git-branch>","git branching strategy for independent features","<p>I am trying to set a proper branching strategy for an application that is structured as below.</p>
<p>Following is the directory structure of the application</p>
<pre><code>|______SuperApp
|          |______CommonCode
|          |
|          |______App1
|          |
|          |______App2
|
|_____ InfraStructureCode

</code></pre>
<p>SuperApp consist of multiple micro apps that can be developed / worked independently as long as Common Code and infrastructure code directories are present.</p>
<p>The constraint we wanna put in place is ,</p>
<p>i) Developers working on a specific app (Say App1) should not have access to push changes related common code or infrastructure code.</p>
<p>Currently we achieve this using</p>
<pre><code>git update-index --skip-worktree &lt;DirectorytoSKIP&gt;
</code></pre>
<p>ii) Maintain certain level of atomicity between each apps like App1 , App2 etc.,</p>
<p>(i.e.,) currently if we create a new branch from develop , to add a new feature in say App1 , all the other apps directory( App2 , App3) also will get included.</p>
<p>So to maintain atomicity is there a better branching strategy ?</p>
<p>Ideally , we would want a feature branch to have only common code , infrastructure code and the particular micro apps (App1) which is being developed.</p>
<p>However in master branch or release branch we wanted to maintain the entire application ( like the directory structure as shown above).</p>
","3","4635340","0","0"
"34780475","615636","2016-01-14 01:59:54","0","1311","<git><merge><branch><gitlab><git-branch>","How to push/merge code from a feature branch into another integration branch in git?","<p>I have the following setup strategy for releasing multiple features to a common uat environment (integration). As soon as I am done with one feature, I eventually want to merge that feature, and only the contents of that, feature into the release branch, and then finally into the master branch.</p>

<pre><code> origin/master
      |__origin/release
      |__origin/integration
      |__origin/featureOne
      |__origin/featureTwo
</code></pre>

<p>My question is how do I merge the contents of a local branch <strong>featureOne</strong> into the remote branch <strong>origin/integration</strong>?</p>

<p>This is what I am currently doing:</p>

<ol>
<li>git clone <code>http://mygitServer/myGroupName/myApp.git</code></li>
<li><code>git checkout featureOne</code></li>
<li>Perform some code changes</li>
<li><code>git add fileName</code></li>
<li><code>git commit --message 'Comment for my code change'</code></li>
<li><code>git push</code></li>
</ol>

<p>The last git command, push, pushes the new code in my local branch from the local repository to our gitlab remote server. specifically into <strong>origin/featureOne</strong></p>

<ol>
<li><p>What is the git command to merge my local/featureOne to the origin/integration branch? </p></li>
<li><p>Or would it make more sense to merge origin/featureOne into origin/integration? What would be the git command be for that?</p></li>
</ol>

<p>Thanks.</p>
","0","615636","",""
"18277841","280393","2013-08-16 16:17:39","14","50664","<git><git-branch>","find out when a git branch was created (not the first commit to that branch)","<p>how can I know when a git branch was created?</p>

<p>i don't want to know when was the first commit to that branch.
I want to find out when that branch was created.</p>

<p>This is a script to reproduce a working example:</p>

<pre><code>#! /bin/bash
set -x
set -e

mkdir test
cd test
git init
echo ""hello"" &gt;readme
git add readme
git commit -m ""initial import""
date

sleep 5
git checkout -b br1
date                   # this is the date that I want to find out.

sleep 5
echo ""hello_br1"" &gt;readme
git commit -a -m ""hello_br1""
date

echo ""hello_br1_b"" &gt;readme
git commit -a -m ""hello_br1_b""

git checkout master
echo ""hello_master"" &gt;readme
git commit -a -m ""hello_master""

git branch -a; 
git log --all --graph --abbrev-commit --decorate --pretty=format:""%h - %an, %ad : %s"" --date=iso
</code></pre>

<p>Executing this:</p>

<pre><code>./test.sh 
++ set -e
++ mkdir test
++ cd test
++ git init
Initialized empty Git repository in /test_git/test2/.git/
++ echo hello
++ git add readme
++ git commit -m 'initial import'
[master (root-commit) 9b95944] initial import
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 readme
++ date
Fri Aug 16 17:51:24 CEST 2013
++ sleep 5
++ git checkout -b br1
Switched to a new branch 'br1'
++ date
Fri Aug 16 17:51:29 CEST 2013
++ sleep 5
++ echo hello_br1
++ git commit -a -m hello_br1
[br1 6c559cd] hello_br1
 1 files changed, 1 insertions(+), 1 deletions(-)
++ date
Fri Aug 16 17:51:34 CEST 2013
++ echo hello_br1_b
++ git commit -a -m hello_br1_b
[br1 5f0d8ab] hello_br1_b
 1 files changed, 1 insertions(+), 1 deletions(-)
++ git checkout master
Switched to branch 'master'
++ echo hello_master
++ git commit -a -m hello_master
[master 2ed092d] hello_master
 1 files changed, 1 insertions(+), 1 deletions(-)
++ git branch -a
  br1
* master
++ git log --all --graph --abbrev-commit --decorate '--pretty=format:%h - %an, %ad : %s' --date=iso
* 5f0d8ab - David Portabella, 2013-08-16 17:51:34 +0200 : hello_br1_b
* 6c559cd - David Portabella, 2013-08-16 17:51:34 +0200 : hello_br1
| * 2ed092d - David Portabella, 2013-08-16 17:51:34 +0200 : hello_master
|/  
* 9b95944 - David Portabella, 2013-08-16 17:51:24 +0200 : initial import
</code></pre>

<p>so, with git log, or git reflog, I can find out the date of the initial import (17:51:24) and the date of the first commit to the branch br1 (17:51:34).</p>

<p>but I need to find out when the branch br1 was created (17:51:29).</p>

<p>how to do that?</p>

<p>(bonus question: and, does it have a hash? how to know who created that branch)</p>
","2","280393","0","0"
"18290200","2009440","2013-08-17 15:08:16","0","9553","<git><git-branch>","git clone username problems. warning: remote HEAD refers to nonexistent ref, unable to checkout","<p>Im using terminal to clone my squarespace repository. Im using this code and suffering some username and password problems</p>

<pre><code>my-iMac:~ Beast$ git clone https://my-url.dev.squarespace.com/template.git
Cloning into template...
Username: 
Password: 
warning: remote HEAD refers to nonexistent ref, unable to checkout.
</code></pre>

<p>I cant enter any username or passwords. Nothing appears when i type in a UN or PW fields.</p>

<p>warning: remote HEAD refers to nonexistent ref, unable to checkout. What does this mean exactly. I googled it and still didnt understand fully. :(</p>

<p>I have been following the SS page of <a href=""http://developers.squarespace.com/using-git/"" rel=""nofollow"">http://developers.squarespace.com/using-git/</a></p>

<p>With not huge knowledge of GIT, I know i have installed it correctly etc.</p>

<p>Any help in getting this warning sign rid of would be fantastic. thanks </p>
","4","2009440","",""
"34857248","2155457","2016-01-18 14:35:29","1","81","<git><git-branch>","How to view all tags in a git repository (more than 29)?","<p>I am going through a texbook on Flask (Python framework). Examples are provided in git repository: <a href=""https://github.com/miguelgrinberg/flasky"" rel=""nofollow"">https://github.com/miguelgrinberg/flasky</a> </p>

<p>Each example is a <strike>branch</strike> tag, but</p>

<pre><code>git show-branch -a
</code></pre>

<p>does not show all of them, because as I understand the command above can only show 29 branches at once. How do I navigate through all of the examples?</p>

<p>Thanks</p>

<p>EDIT mistaken branches with tags</p>
","7","2155457","0","0"
"34882150","4514829","2016-01-19 16:37:18","2","156","<git><github><merge><branch><git-branch>","git push origin [local-branch] tries to push into remote main branch instead of creating a new one","<p>I have forked a foreign repository whose ""main"" branch is called <code>develop</code> (instead of <code>master</code>) and made several commits on this <code>develop</code> branch.<br>
Now I want to create a new branch of the initial foreign repository's <code>develop</code> branch (and not the <code>develop</code> branch of the one I forked and worked on) so as to work without my previous changes from scratch, like so:</p>

<ul>
<li><code>git fetch upstream</code> (to get the latest copy of the foreign repo)</li>
<li><code>git checkout -b ""my-new-branch"" upstream/develop</code> (create a new branch from <code>upstream/develop</code>)</li>
<li><code>git push origin my-new-branch</code> (push the branch to my remote repo on github)</li>
</ul>

<p>So I created a local branch called fix-3894 but whenever I use the ""<code>git push origin my-new-branch</code>"" command, I get this output:</p>

<pre><code>! [rejected]        fix-3894 -&gt; develop (non-fast-forward)
</code></pre>

<p>Basically, instead of transferring this local new branch on the remote repository, it tries to push it into the develop branch which is ahead of it and naturally faces a rejection. What I ultimately want is having both branches on the remote repository of mine, develop AND fix-3894.</p>

<p>Is my understanding of how branches work incorrect? I've been doing a lot of searching but haven't found anything to match my case.</p>
","0","4514829","0","0"
"4466900","479180","2010-12-17 01:12:16","1","178","<git><branch><git-branch>","How should I use the git branches?","<p>New to git. A bit confused about how some of it works, conceptually. </p>

<p>So it sounds like, in terms of local work, its a good idea to have a branch that contains only what goes into production and another for testing out ideas, etc. which I can then merge. Is it as simple as creating those branches and then when I don't want any recent changes to my project to be committed to the master branch, I just switch to the ""testing"" branch and commit/push from there? I'm just confused about the interaction between local project activity and git. </p>

<p>Say, for example, I add some code to my android project and save, those changes will have no effect on master repo unless I commit? And that's the case even though, in terms of the actual local project, those changes were saved.</p>

<p>Am I thinking about this right? If not, set me straight?</p>
","4","479180","",""
"4468322","305340","2010-12-17 06:40:40","48","12486","<git><git-branch><git-checkout>","Switch current branch in git bare repository","<p>I actually want to remove a branch in the bare repository i am working with, but this task hits a dead end because I cannot switch away from the master repository without a 'work tree' which a bare repository does not have.</p>

<p>When I run <code>git branch -d master</code> the output is:</p>

<pre><code>error: Cannot delete the branch 'master' which you are currently on.
</code></pre>

<p>So I try to switch to another branch called 'develop' by running <code>git checkout develop</code> and the output is:</p>

<pre><code>fatal: This operation must be run in a work tree
</code></pre>
","2","305340","0","0"
"60455887","257924","2020-02-28 16:37:20","1","607","<git><git-branch><git-rebase><git-tag><git-status>","git status still says “Your branch is ahead of <tag1> by N commits.” after git rebase <tag2>","<p>Suppose I have a <code>my-topic-branch</code> branch that is branched off my local <code>master</code> branch, and that <code>master</code> branch is tied to the remote <code>master</code> branch.</p>

<p>The <code>my-topic-branch</code> branch was originally created off of a tag called <code>tag1</code>. <code>tag1</code> is a tag layed down on the remote master branch, and I see that tag as a result of <code>git fetch</code>.</p>

<p>Some time passes to allow others to pushed their changes into that remote master branch. And still later, a new <code>tag2</code> is layed down by someone else (See <em>Update 6</em> below for the reasons for doing this).</p>

<p>I then use <code>git fetch</code> again to ensure that I have all of those remote tags into my local repo for further operations.</p>

<p>I rebase to that <code>tag2</code> like this:</p>

<pre><code>$ git rebase tag2
First, rewinding head to replay your work on top of it...
Applying: CENSORED_LOG_MESSAGE1
Applying: CENSORED_LOG_MESSAGE2
Auto packing the repository in background for optimum performance.
See ""git help gc"" for manual housekeeping.
</code></pre>

<p>But then I run <code>git status</code> and see this:</p>

<pre><code>$ git status
On branch my-topic-branch
Your branch is ahead of 'tag1' by 195 commits.
  (use ""git push"" to publish your local commits)
</code></pre>

<p>My expectation is that the above message should say something about <code>tag2</code>, and certainly not that I'm ahead of the old tag by 195 commits.</p>

<p>Why would <code>git status</code> report the commit that <code>my-topic-branch</code> branched from, and not the new commit that I mostly recently rebased to?</p>

<p>If this is expected behavior, then fine, I will just have to ignore it, but it is odd to see that I'm still behind <code>master</code> by 195 commits, when that is certainly not true (if the <code>git rebase</code> actually did what I think it should).</p>

<h1>Update 1</h1>

<p>I can still find the base point of <code>my-topic-branch</code> if HEAD is still on that branch, via:</p>

<pre><code>$ git show -s $(git merge-base master @)
commit CENSORED_SHA1_TAG2 (tag: tag2)
Author: CENSORED_AUTHOR
Date:   CENSORED_DATE

    CENSORED_LOG_MESSAGE_TAG2
$
</code></pre>

<p>But this still begs the question about the <code>git status</code> output.</p>

<h1>Update 2:</h1>

<p>Update in response to <a href=""https://stackoverflow.com/a/15806668/257924"">Pesho_T's comment</a>:</p>

<p>I ran <code>git branch -vv</code> and got the following. This is censored, but adding numbers like ""2"" and ""4"" to discriminate them from the others above:</p>

<pre><code>$ git branch -vv | grep my-topic-branch
* my-topic-branch                                CENSORED_SHA1_TAG1 [tag1: ahead 195] MDFCOR-420 CENSORED_LOG_MESSAGE_TAG1
</code></pre>

<h1>Update 3:</h1>

<p>Replaying some of the commands in <a href=""https://stackoverflow.com/a/60459607/257924"">torek's answer</a>, I see:</p>

<pre><code>$ git rev-parse --abbrev-ref @{u}
tag1
$ git rev-parse --symbolic-full-name @{u}
refs/tags/tag1
</code></pre>

<p>I currently conclude, from torek's very nice writeup, that tag1 is indeed a tag, and not a branch.</p>

<h1>Update 4:</h1>

<p>I edited prior CENSORED_SHA1's to be consistent:</p>

<ol>
<li>CENSORED_SHA1_TAG1 is the commit SHA1 corresponding for tag1</li>
<li>CENSORED_SHA1_TAG2 is the commit SHA1 corresponding for tag2</li>
</ol>

<h1>Update 5:</h1>

<p>Another update in response to <a href=""https://stackoverflow.com/a/60459607/257924"">torek's answer</a>:</p>

<pre><code>The upstream of a branch is always another branch name or remote-tracking name, as tag names are forbidden
</code></pre>

<p>I am not sure of that because of this experiment:</p>

<pre><code>$ git rev-list --count --left-right my-topic-branch...my-topic-branch@{upstream}
195 0
$ git show -s $(git rev-parse my-topic-branch@{u})
commit CENSORED_SHA1_TAG1 (tag: tag1)
Author: CENSORED_AUTHOR
Date:   CENSORED_DATE

    CENSORED_LOG_MESSAGE_TAG1
</code></pre>

<p>The above shows that the upstream is pointing to a tag.</p>

<p>To confirm that both of these tag1 and tag2 tags are on the master branch I did this, per the tips found in <a href=""https://stackoverflow.com/a/60593846/257924"">answer to Git: How to find out on which branch a tag is?</a>:</p>

<pre><code>$ git branch -a --contains $(git rev-parse tag1^{commit}) | grep -E 'my-topic-branch|master'
* my-topic-branch
  master
$
</code></pre>

<h1>Update 6:</h1>

<p>My plans are not actually to <code>git push</code> back to that the tag (<code>tag2</code>) I ran <code>git rebase</code> upon. I am only using that tag as a point on the <code>master</code> branch to rebase the <code>my-topic-branch</code> to.  The <code>tag2</code> happens to be a known point, on the <code>master</code> branch, that the application builds properly upon (I cannot go into further detail on that for confidential reasons). I expect to continue to <code>git rebase</code> to subsequent tags, <code>tag3</code>, <code>tag4</code> and so on, until <code>my-topic-branch</code> is ready for production, at which time I will merge it back to my local <code>master</code> branch and do the <code>git push</code> from there.</p>

<h1>Update 7</h1>

<p>I posted a <a href=""https://stackoverflow.com/a/60593846/257924"">MCVE</a> answer to show how the upstream shown by <code>git status</code> changes once an upstream is set on the parent branch of the topic branch, thus bolstering torek's comments shown therein.  I'm still considering <a href=""https://stackoverflow.com/a/60459607/257924"">torek's answer</a> as <em>the</em> answer to this, because without his input, I would have not figured it out.</p>
","8","257924","0","0"
"22796711","1763279","2014-04-01 20:56:31","1","3151","<git><git-branch>","git status on master and branches","<p>I made few local changes in the master in git repository and released I have to create a new branch. I created a new branch and committed the changes using</p>

<pre><code>git checkout -b changes
git add &lt;files&gt;
git commit -m ""new feature in branch""
</code></pre>

<p>The name of modified file is ""run.pl"". Before the new branch, git status on master was</p>

<pre><code>On branch master
Changes not staged for commit
       modified run.pl

Untracked files
       build1.pl
</code></pre>

<p>After the new branch, git status in master is</p>

<pre><code>On branch master

Untracked files

   build1.pl
</code></pre>

<p>I could not understand how git status on master can change when I committed the changes only to a branch</p>
","0","1763279","0","0"
"41942543","3587624","2017-01-30 18:04:35","0","21","<branch><git-branch><azure-pipelines-release-pipeline>","Branch “users/<username>” organization for git repos in visual studio team services","<p>I've seen this question on another forum with no answers and I am actually trying to figure out the same thing.</p>

<p><a href=""https://superuser.com/questions/1120229/vsts-branch-users-username-organization-for-git-repos"">https://superuser.com/questions/1120229/vsts-branch-users-username-organization-for-git-repos</a></p>

<p>Any idea how to create a branch under users//?</p>
","0","3587624","",""
"34963500","1517659","2016-01-23 12:32:52","0","95","<git><version-control><git-branch><git-rebase>","How to change a very early commit in git?","<p>Suppose I have a couple of commits A-G in my master-branch. Based on commit E, I created two branches <code>branchA</code> and <code>branchB</code> and based on commit F, I created a branch <code>branchC</code>. Suppose I introduced a critical mistake in commit D (on the branch master) that needs to be treated in <code>branchA</code>, <code>branchB</code> and <code>branchC</code> alike.</p>

<p>I know how to change commit D and resolve the error there (using <code>git rebase -i C</code>) - giving a new commit history A-B-C-D'-E'-F'-G' . However, that does not influence the history in any of my branches.  To be clear: <code>branchA</code> and <code>branchB</code> are still based on E and not on the rewritten commit E', which destroys the repository structure. That's not what I want - I rather want the complete tree, with everything after D', updated.</p>

<p>How can I resolve this situation? Is modifying the master branch's history the right idea here?</p>
","0","1517659","",""
"4570590","34548","2010-12-31 14:26:07","6","1196","<git><git-branch>","make git branch the master branch","<p>My master branch is so different than my development branch that I would like it to just become my master branch without having to do a merge, is this possible?  Seems like I could walk into a lot of work if I just try and do a merge.</p>
","0","34548","0","0"
"34973727","752301","2016-01-24 08:37:04","1","329","<git><merge><git-branch><branching-and-merging>","git merge branch of branch to master","<p>We are developing since a few months with git and we all are new to git. Now we are developing some functionality in a branch where some things went very wrong -- wrong merges from another branch and not the master, rebases, incorrect reverts and so on. Now I don't want to try to recover the branch because it is too messed up. </p>

<p>My question now is: Is it possible to make a branch from this branch (before it has been messed up) continue the development and then merge the branch (of the branch) to master? Is this a good idea or could this cause any (more) problems? With my current knowledge of git it should be okay. </p>
","0","752301","",""
"18500220","961810","2013-08-29 00:01:04","3","126","<git><branch><git-branch>","Is there one git command to create a branch, switch to it, and link it to it's remote counterpart?","<p>Right now when I want to do a quick fix on my project, I do this:</p>

<pre><code># create and switch to this new branch
git checkout -b fixes-20130828-01
# push the new branch back to the origin
git push origin fixes-20130828-01
# link local and remote branches
git --set-upstream fixes-20130828-01 origin/fixes-20130828-01 
</code></pre>

<p>I would like to be able to do the above with something like this:</p>

<pre><code># is there a way to get this to not only create and switch locally,
# but also to link to remote
git checkout --[something] fixes-20130828-01
# and then this would do the actual push to create
# the branch on the origin, now that it's logically linked up
git push
</code></pre>

<p>This would be easier to use, remember, and easier to explain to new team members, etc., i.e. ""You create the new branch, based on your existing one using this command, and then just push it back like you normally do.""</p>

<p>Is there an option to do this out of the box?</p>
","0","961810","0","0"
"34988380","5556891","2016-01-25 08:49:02","0","1392","<git><github><workflow><git-branch><sourcetree>","How to have live and Dev git branches working at the same time","<p>Wondering if some light could be shed on how git workflows should work? I'm 100% sure our current method is completely wrong as its not really working out. If I can explain how we are currently operating and if someone can tell me where we're going wrong, that would be awesome.</p>

<p>We have 2 developers working to a Dev branch, and testing on a Dev server (which requires us to ftp the files we're working on up to the server). Once changes are tested and completed, we then replicate the change on a production branch, which is the ftp'd upto the live server. This means we have to keep track of every single change we make. Thankfully Git is awesome at giving us that information but we don't really know what files we have already put on the servers etc. Dev is currently used to fix bugs etc for production/live, but it will soon be used for new features. Both branches are different as the specific to their own servers.</p>

<p>We were relatively new to git at the beginning of our development, but feel like we've taken a massive step back when going into production. </p>

<p>Summarise:</p>

<ul>
<li>2 developers</li>
<li>2 branches (Dev / Prod)</li>
<li>both Dev using sourcetree as a client and GitHub as a remote repo</li>
<li>both branches need to run in tandem and be easily pushed / updated to respective servers</li>
</ul>

<p>Can anyone help me out?</p>
","0","5556891","",""
"42171812","5465202","2017-02-11 03:21:16","2","477","<git><github><git-branch>","How to create a branch and reset another with git?","<p>I am working on a project on GitHub. On my computer I made six commits that I have not yet pushed to the GitHub server. Now I realize that I want to keep the current <code>master</code> branch that is in the cloud, and put the commits in a separate branch called <code>development</code>. How can I do this? I am new to Git and GitHub.</p>

<p>EDIT: I also have a few commits that <em>have</em> been pushed to GitHub from before the unpushed commits. I want to keep these in both branches, whie only keeping the unpushed commits in <code>development</code>.</p>
","1","5465202","",""
"42192635","388603","2017-02-12 20:07:28","3","5094","<git><git-branch>","How to make a git branch the new master?","<p>A few days ago, I created a new git branch using:</p>

<pre><code>git checkout -b release-1_5
</code></pre>

<p>Since creating that new branch, I've made additional changes &amp; commits to it.</p>

<p>I'm the only developer, and no changes have been made to the actual 'master' in the meantime. I want to make the current state of the ""release-1_5"" branch the new master, and make 'master' the new working (HEAD?) branch, so that if I later do something like:</p>

<pre><code>git checkout -b release-1_6
</code></pre>

<p>it will create a new branch that branches off from master</p>

<p>I know I could probably just keep doing ""git checkout -b {new-branch-name}"" (creating a linear branch-of-a-branch(-of-a-branch[-...]), but I'm pretty sure that would screw up Git's subway-like branch diagram.</p>

<p>If it matters, at the moment, the repo is entirely local, so there's no pulling/pushing or origin to worry about.</p>
","0","388603","0","0"
"60511610","11511781","2020-03-03 16:26:06","0","361","<node.js><git><npm><git-branch>","set upstream branch tracking after moving and re-adding remote URL in simple-git","<p>The following piece of code checks if the local repository exist, and sync the changes from remote repository using <a href=""https://www.npmjs.com/package/simple-git"" rel=""nofollow noreferrer"">simple-git</a>. I was having some issues with <code>JWT</code> token expiring after 24 hours, this was fixed by removing and re-adding the remote repository URL. </p>

<pre><code>if (fs.existsSync(cachePath)) {
      debug(`Local Path ${cachePath} Exists`);
      // debug('Checking `git status` on local repo');
      // Fetch
      // FIXME: no upstream branch is set -&gt; no tracking information for the current branch
      // await git(cachePath).removeRemote('origin');
      // await git(cachePath).addRemote('origin', gitURL);
      // go into file and replace tocken
      // FIXME: fatal branch 'master' doesn't exist
      // execSync('git branch --set-upstream-to=origin/master master');
      // await git(cachePath).branch(['--set-upstream-to=origin/master', 'master'], (err, data) =&gt; {
      //   if (err) throw new Error(err);
      // });

      // Show all branches
      // debug('SHOW ALL BRANCHES');
      // await git(cachePath).branch(['-a'], (err, data) =&gt; {
      //   if (err) throw new Error(err);
      // });

      /* CMDs
      -------------------------------------------------- */
      try {
        execSync(`cd ${cachePath}`, { stdio: 'inherit' });
        execSync('git remote -v', { stdio: 'inherit' });
        execSync('git remote remove origin', { stdio: 'inherit' });
        execSync(`git remote add origin ${gitURL}`, { stdio: 'inherit' });
        execSync('git remote -v', { stdio: 'inherit' });
        // execSync('git branch --set-upstream-to=origin/master master', { stdio: 'inherit' });
        git(cachePath).branch(['-u', 'origin/master'], (err, data) =&gt; {
          if (err) throw new Error(err);
          console.log(data);
        });
        execSync('cd /home/ystanev/menlolab/runner', { stdio: 'inherit' });
      } catch (e) {
        throw new Error(e);
      }
      /* End of CMDs
      -------------------------------------------------- */

      debug('GIT PULL');
      await git(cachePath)
        .outputHandler(outputHandler)
        .pull();
</code></pre>

<p>The previous operation seems to unset upstream branch tracking, leaving me unable to <code>git fetch/pull</code>. Following the git output I've set tracking by executing <code>git branch --set-upstream-to=origin/master master</code>, the issue seems to be fixed.</p>

<p>I've tried to do the entire thing though the <code>bash</code> commands, I keep receiving error:</p>

<p><code>error: the requested upstream branch 'origin/master' does not exist</code></p>

<p>There seem to be trouble with communication with remote repo, as the same commands run just fine from <code>bash</code> shell in local repo.</p>

<p>Any advice as to possible cause?</p>
","2","11511781","",""
"4901501","173773","2011-02-04 18:21:13","0","64","<git><git-branch><branching-and-merging>","I've made a number of local changes, which I'd like to git-commit to a new branch on the shared server - how do I do that?","<p>I've checked out code from a shared repository, and done some work on it. Along the way, I've been merging changes from the shared repository into my code.</p>

<p>I would like to push my local repo to a new branch on the shared repository, so others may access them, while at the same time not damaging the shared repo.</p>

<p>How would I do this using Git?</p>
","0","173773","",""
"23247355","2988227","2014-04-23 14:26:48","0","125","<git><git-branch><gitlab>","how to push git branch","<p>I need some help with git branches. I do not think i understand the procedure at all, as I keep getting confused.</p>

<p>What I want is to make a simple branch, from which I can fix an issue on my website without erasing all the things I've worked on so far. I have moved so far away from what I have on my production server, that I cant easily tidy up my code to prevent breaking the site. </p>

<p>So I have tried in several ways to make a new branch, but things keep giving me errors and such.
For example, I saw somewhere that you can create a tag, and then turn it into a branch. Which I have. I successfully tagged the commit I wanted my branch to work from, then i made the new branch, and sure enough I now have two heads ""master"" and my new branch. However, in the gitlab page, I cannot see any new branches... And pushing up to the server gives me some errors that I can't exactly figure out why they occur.</p>

<p>it gives me this log when i try to push:</p>

<pre><code>Counting objects: 97, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (25/25), done.
Writing objects: 100% (51/51), 21.31 KiB | 0 bytes/s, done.
Total 51 (delta 39), reused 35 (delta 25)
remote: /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/dsl.rb:33:in `eval_gemfile': Gemfile syntax error: (Bundler::GemfileError)
remote: /home/git/gitlab/Gemfile:14: syntax error, unexpected ':', expecting $end
remote: gem ""mysql2"", group: :mysql
remote:                     ^
remote:     from /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/dsl.rb:9:in `evaluate'
remote:     from /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/definition.rb:19:in `build'
remote:     from /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler.rb:148:in `definition'
remote:     from /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler.rb:116:in `setup'
remote:     from /usr/local/lib/ruby/gems/1.9.1/gems/bundler-1.3.5/lib/bundler/setup.rb:17
remote: error: hook declined to update refs/heads/master
To https://gitlab.repo.com/repo.git
 ! [remote rejected] master -&gt; master (hook declined)
error: failed to push some refs to 'https://gitlab.repo.com/repo.git'
</code></pre>

<p>will someone please help me? I couldn't find anything that is specific to my situation, so Im sorry if I have missed out on any duplicates and such.</p>

<p><strong>Update</strong> I no longer have this problem, and I the way this was solved is rather irrelevant to the current question. Thanks to anyone who commented :)</p>
","3","2988227","",""
"5129959","3619","2011-02-26 21:47:01","49","8300","<git><tfs><git-branch><git-tfs>","How do I use git-tfs and idiomatic git branching against a TFS repository?","<h1>How Do I Use git-tfs Idiomatically?</h1>

<ul>
<li><p>The git idiom is to check out branches <em>to the root directory</em> of the repository. Checking out a branch will replace the contents of the directory with the contents of that branch.</p></li>
<li><p>The TFS idiom is to check out <em>each branch in a different directory</em> under the root directory of the repository (even the master or trunk branch). Checking out a branch will place it in a new directory next to the current one.</p></li>
</ul>

<p>Using <a href=""https://github.com/spraints/git-tfs"" rel=""noreferrer"">git-tfs</a>, I can clone a TFS repository or branch into a git repository. I want to  <strong>work on a TFS repository with multiple branches in a manner consistent with the git branching idiom</strong>. But I'm not sure what's technically possible or recommended :)</p>

<hr>

<h2>Clone The Whole TFS Repository</h2>

<p>If I clone the whole repository out of TFS</p>

<pre><code>&gt; git tfs clone http://&lt;tfsurl&gt;:8080 $/main
</code></pre>

<p>That would give me a git <code>master</code> containing <em>all</em> the TFS branches as directories.</p>

<pre><code>[master]&gt; dir
  trunk
  feature-logon
  feature-search
  release-0.0.1
</code></pre>

<hr>

<h2>Add a Remote Per TFS Branch</h2>

<p>I don't know if I can (or how to) map a git remote to each TFS branch.</p>

<pre><code>&gt; git init .
[master]&gt; git tfs clone http://&lt;url&gt; $/main/trunk .
</code></pre>

<p>Then</p>

<pre><code>[master]&gt; git checkout -b feature-logon
[feature-logon]&gt; git tfs clone http://&lt;url&gt; $/main/feature-logon .
</code></pre>

<p>I know this is technically incorrect, but I don't know any better without playing (my only TFS repo is very large, experimenting is taking a long time)</p>
","1","3619","0","0"
"60705880","13069004","2020-03-16 12:17:31","0","143","<java><spring><git><git-branch><jgit>","How to get a list of folders and files in particular commit id with jgit","<p>I have seen a lot of tutorials but I haven't found any code for getting all the files and folders in a particular commit id. Thanks in advance.</p>
","2","13069004","0","0"
"23437725","1089452","2014-05-02 22:13:10","4","265","<git><github><git-branch><git-merge><rebase>","Removing large file from git history?","<p>We have a remote git repository where there are no size restrictions for files and we had pushed a 300MB into it. We then realized it and then removed the file from the repository. </p>

<p>Meanwhile the same repository was added to github and when we try to push the changes to github, we get the large file size error. </p>

<pre><code>remote: error: File dir/filename is 312.27 MB; this exceeds GitHub's file size limit of 100 MB
</code></pre>

<p>To fix this, I tried using the interactive git rebase solution suggested at <a href=""https://stackoverflow.com/questions/2100907/how-to-remove-delete-a-large-file-from-commit-history-in-git-repository"">How to remove/delete a large file from commit history in Git repository?</a>, but at the end of the rebase operation I end up with the following when I do <strong>git status</strong></p>

<pre><code>[18:10:35] $ git status
On branch master
Your branch and 'origin/master' have diverged,
and have 8 and 24 different commits each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
</code></pre>

<p>And if I use <strong>git pull</strong> then all the changes which I have removed are brought back to the git repository. How do I fix this?</p>
","0","1089452","0","0"
"60730055","2504762","2020-03-17 20:53:03","2","3422","<git><github><git-branch><branching-and-merging><git-flow>","gitflow branching strategy - multiple releases","<p>currently, we are using the GitHub flow (feature branching) strategy. However, with that, the problem is sometimes features are queues in for releases
i.e. </p>

<ol>
<li>I have my featured merged in development (or master, we have only) branch and deployed to Test Environment for testing. </li>
<li>Meanwhile, we want to develop or fix some high priority bugs/features. I can't do that without reverting earlier code from develop branch. </li>
</ol>

<p>To solve this issue, I am trying to implement <strong>GitFlow Branching</strong> Strategy. However, I am thinking that very similar problem as above may arise as mentioned below.  </p>

<ul>
<li>I created a new feature branch, done my development and merged to develop </li>
<li>we merged few more feature to develop </li>
<li>Cut out a new release branch (let's called release-A) and then deploy it to Test Environment for testing. </li>
<li>meanwhile this feature is being tested, new feature request came which has a high priority</li>
<li>Now if I branch out of latest develop, it has other features (release-A) which I don'
t want to deploy to prod. (or merge with the master) </li>
</ul>

<p><strong>Questions:</strong> </p>

<ul>
<li>Rather, than branching of lastest, develop branch,  should I branch from the commit has which is in PROD? </li>
<li>if so, should I create a release from the feature branch? </li>
<li>how to deploy this in Test so that testing or both (release-A and this new feature can happen in parallel). The latter point is no so important. </li>
</ul>

<p><strong>Note:</strong>
I am using Microsoft Azure Data Factory, and so I need to merge some changes to develop branch ( related to Azure Data Factory) otherwise I won't be able to publish those changes (won't be able to create ARM template to deploy to other environments) </p>
","0","2504762","0","0"
"60739257","12443859","2020-03-18 12:07:30","0","63","<git><github><repository><branch><git-branch>","Connecting a branch to another branch in git?","<p>I have a master branch I want to make dist branch that tracking all changes in the dist folder in master branch in my Github repository.</p>

<p>Can I do it?</p>
","2","12443859","",""
"61266650","12114274","2020-04-17 07:55:04","0","30","<git><git-branch>","Wrong git branch is being referenced during program run","<p>I have 2 folders: <strong>mcell</strong> and <strong>mcell_tools</strong>.</p>

<pre><code>/mcell$ git branch -a
  master
* mcell4_mdl2datamodel
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/binary_reaction_output
  ...
  remotes/origin/mcell4_mdl2datamodel
  ...


/mcell_tools$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/development
  remotes/origin/master
</code></pre>

<p>Both of these folders are checked out on their appropriate (though different) branches, as you can see above indicated by the *. </p>

<p><strong>Problem:</strong> 
I have a program inside <strong>mcell_tools</strong> that calls a file inside <strong>mcell</strong>, which outputs text into the terminal. My problem is that for some reason the file inside <strong>mcell</strong> is being called as if <strong>mcell</strong> was checked out on the <em>master</em> branch, not the <em>mcell4_mdl2datamodel</em> branch that I want it to be on. </p>

<p>I'm not very experienced with git, so I might be missing something obvious, but it seems to me that because my program inside <strong>mcell_tools</strong> is checked out on the <em>master</em> branch, the file that it calls from the <strong>mcell</strong> folder is automatically configured into it's <em>master</em> branch as well, instead of the <em>mcell4_mdl2datamodel</em> branch that it says it's in. This seems absurd, so I must be missing something.</p>

<p>To clarify, there is nowhere in the <strong>mcell_tools</strong> program that checks its own branch in order to determine the branch of all other files it calls. I know this because I've been able to run different branches from this program in the past when I was using my machine at work (instead of my home setup). </p>

<p>I know that the <strong>mcell</strong> file is running in it's <em>master</em> configuration instead of the desired <em>mcell4_mdl2datamodel</em> because of the terminal output it produces. </p>
","3","12114274","",""
"61647654","12781256","2020-05-07 00:13:08","1","735","<git><merge><version-control><git-branch>","how to resolve diverge in git?","<p>I'm having troubles to resolve a problem I have on my working copy:
earlier I pulled and it auto-merged a couple of files, they showed then up in the staged area from where I did not commit. I reverted the changes in the files by <code>git checkout -- my/file</code> now, later in the day, I wanted to do another pull but it can't, I got an error like:</p>

<pre><code>$ git pull
error: You have not concluded your merge (MERGE_HEAD exists).
hint: Please, commit your changes before merging.
fatal: Exiting because of unfinished merge.
</code></pre>

<p>how can I fix the situation? I don't want to commit anything on this branch! I also get:</p>

<pre><code>$ git status
On branch dev
Your branch and 'origin/dev' have diverged,
and have 3 and 4 different commits each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
All conflicts fixed but you are still merging.
  (use ""git commit"" to conclude merge)

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)
</code></pre>
","2","12781256","0","0"
"61648984","13028814","2020-05-07 02:43:50","1","196","<node.js><git><git-branch><git-fetch><nodegit>","git-clone a bare repo with nodegit","<h1>Hi,</h1>
<p>I am cloning a worktree as a bare repo in <code>nodegit</code></p>
<pre><code>Git.Clone('/work/localrepo', '/git/newbare', {bare: 1})
</code></pre>
<p>This creates a bare repo just like</p>
<pre><code># in /git/newbare
&gt; git clone --bare /work/localrepo
</code></pre>
<p>Note: <code>newbare</code> has refs to all <code>localrepo</code> branches in <code>/git/newbare/refs/remote/origin</code>,
but only <code>localrepo's</code> active branch is cloned in the <code>newbare's</code> local refs</p>
<p>That means that if <code>localrepo</code> was on master when it was cloned, then <code>newbare</code> is only tracking master</p>
<p>Now in <code>git</code> I can track all branches on <code>origin</code> with</p>
<pre><code>#in bare

&gt; git fetch origin '+refs/*;refs/*'

&gt;&gt;&gt; /git/newbare
    From /work/localrepo
      * [new branch]      feature     -&gt; feature
</code></pre>
<p>Look at <a href=""https://git-scm.com/book/en/v2/Git-Internals-The-Refspec"" rel=""nofollow noreferrer"">refspec</a> if you want more info on the fetch here.</p>
<h1>Problem</h1>
<p>I can't figure out how to setup tracking branches in a bare directory, for all branches on <code>remote/origin</code> with <code>nodegit</code></p>
","0","13028814","0","0"
"5946606","166231","2011-05-10 07:27:53","0","325","<git><alias><bash><git-branch>","Creating a 'git publish' alias, but need to store temporary variable","<p>Based on this <a href=""http://justinfrench.com/notebook/git-aliases-rock"" rel=""nofollow"">article</a> I wanted to create a similar alias (flow described below).  With the author/article's comments disabled, I thought I'd ask it here.  Assuming you are on a 'topic' branch, I'd like to modify the flow to do the following:</p>

<ul>
<li>Detect and store the current branch name in $branch (using alias from <a href=""http://blogs.gnome.org/danni/2011/03/07/useful-git-aliases/"" rel=""nofollow"">here</a>)</li>
<li>Switch back to master branch</li>
<li>Pull from remote</li>
<li>Switch back to $branch</li>
<li>Rebase $branch against master</li>
<li>Switch back to master</li>
<li>Merge changes from $branch</li>
<li>Run wtf</li>
</ul>

<p>A psuedo alias might be something like (knowing that the references to $branch are most likely wrong):</p>

<p>branch-name = !git for-each-ref --format='%(refname:short)' <code>git symbolic-ref HEAD</code></p>

<p>publish = !git branch-name > $branch &amp;&amp; git checkout master &amp;&amp; git pull &amp;&amp; git checkout $branch &amp;&amp; git rebase master &amp;&amp; git checkout master &amp;&amp; git merge $branch</p>

<p>Is there anyway to pull this off?  I've no idea how to store/use the $branch variable (note, coming from a windows/c#/VSS background so pretty green in git still).</p>

<p>Final note, I am using git from within a Windows Powershell console window.</p>

<p>Thanks in advance.</p>
","0","166231","",""
"24337555","350351","2014-06-21 01:49:44","1","504","<git><git-branch>","How can I pull from one remote and push to another with git?","<p>I have a contributor to my github repository who has a fork and is working on a branch. I want to pull their branch to my own branch and make modifications, but still track theirs.</p>

<p>Can I configure git so that while I'm on branch <code>foo</code>, </p>

<ul>
<li><code>git pull</code> pulls from <code>contributor/foo</code> and</li>
<li><code>git push</code> pushes to <code>origin/foo</code> </li>
</ul>

<p>This is similar to but distinct from the question <a href=""https://stackoverflow.com/questions/15903129/how-to-push-to-one-remote-repo-and-pull-from-another"">How can I push to one url and pull from another using one remote?</a> because that question is looking to use the same remote name.</p>
","2","350351","0","0"
"24513437","1213528","2014-07-01 14:58:10","2","452","<git><git-branch><git-fetch>","git: track more than one remote branches","<p>In our git repository we have several branches, most of which are not used daily and contain gigabytes of information.</p>

<p>As such, I usually work tracking the remote branch I am using:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[remote ""origin""]
    url = https://sever/repository.git
    fetch = +refs/heads/devel:refs/remotes/origin/devel
</code></pre>

<p>How can I add an extra branch to be fetched from remote?</p>
","2","1213528","0","0"
"24529413","2050788","2014-07-02 10:59:06","3","397","<git><branch><git-branch><git-log>","How to get git to display the most recent n commits from all local branches","<p>I would like to see the most recent n commits (generally 1 or 2) for all local branches in my respository.</p>

<p>I have tried ""git log -1 --all"" and ""git log -1 --branches"" but this doesn't have the effect I expect in git 1.8.4.</p>

<p>Basically I would like the equivalent of </p>

<pre><code>for i in $(ls .git/refs/heads/); do echo ====$i====; git log -1 $i; done
</code></pre>
","7","2050788","0","0"
"62078433","4451521","2020-05-29 03:54:56","2","1792","<git><tags><git-branch>","convert a git tag into a branch","<p>I cloned a repository. In the repository there are several branches but there is also a tag. 
Now, I have been instructed to work with the version of that tag.</p>

<p>however I have to do some integration and make some more commits from that tag. </p>

<p>I don't know where in the structure of branches this tag is, so what I would like to do is to transform this tag into a branch (right now, after checkout to that tag I am into a ""dettached state"") so that later I can do commits merges etc.</p>

<p>Is there a way to do this?</p>
","0","4451521","",""
"6498238","9950","2011-06-27 20:00:02","10","18150","<git><jenkins><git-branch>","How to use jenkins git plugin to build from a branch include origin or not","<p>When building from git on master jenkins fetches and uses origin/master.   When building from git on a branch jenkins fetches and users mybranch not origin/mybranch and isn't picking up changes.</p>

<p>I switched the branch specifier to use <strong>origin/mybranch</strong> and it seems to work.   Is the the standard way to handle things or am I missing a more obvious way of doing this?  I don't want to add unecessary complexity.</p>

<p>Please let me know if jenkins should use <strong>origin</strong>/branchname instead of branchname for its Branches-To-Build field.</p>

<p>Thanks</p>

<p>Peter</p>
","0","9950","0","0"
"62315691","2414957","2020-06-11 01:34:20","0","490","<git><git-branch><git-push>","git The requested URL returned error: 403 for pushing a newly created branch on a public repository","<p>I read various answers over Stackoverflow but none helped.</p>

<p>Here's the situation. I cloned a public repo and made a new branch and then commit my changes in the branch and now I want to push the branch.</p>

<pre><code>(base) mona@goku:~/research/summer2020/synthetic-computer-vision$ git push -u origin master sidod
Username for 'https://github.com': monajalal
Password for 'https://monajalal@github.com': 
remote: Permission to unrealcv/synthetic-computer-vision.git denied to monajalal.
fatal: unable to access 'https://github.com/unrealcv/synthetic-computer-vision.git/': The requested URL returned error: 403
</code></pre>

<p>here's the result of:</p>

<pre><code>$ git config --list
credential.helper=osxkeychain
user.name=Mona Jalal
user.email=jalal@bu.edu
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
remote.origin.url=https://github.com/unrealcv/synthetic-computer-vision.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
</code></pre>

<p>I created a new RSA and pasted it to my git setting after deleting the old one. I even deleted the entries of git in the keychain access:</p>

<p><a href=""https://i.stack.imgur.com/SIAsN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SIAsN.png"" alt=""enter image description here""></a></p>

<p>now it is:
<a href=""https://i.stack.imgur.com/XLpw7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XLpw7.png"" alt=""enter image description here""></a></p>

<p>How can I fix this?</p>

<p>other information:</p>

<pre><code>$ git status
On branch sidod
nothing to commit, working tree clean


$ git --version
git version 2.24.3 (Apple Git-128)

$ git branch
  master
* sidod
</code></pre>

<p>I am using OSX 10.15.2</p>

<p>Here is the public git repo I have cloned: <a href=""https://github.com/unrealcv/synthetic-computer-vision"" rel=""nofollow noreferrer"">https://github.com/unrealcv/synthetic-computer-vision</a></p>

<p><a href=""https://i.stack.imgur.com/dsJfq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dsJfq.png"" alt=""enter image description here""></a></p>
","0","2414957","",""
"62327552","9057867","2020-06-11 15:11:35","0","251","<git><git-merge><git-branch>","How to merge 2 different branches into git, without overwriting changes made by the first commit","<p>I have a master branch ""Master"" and I create 2 different branches off of it called ""Branch-A"" and ""Branch-B"" respectively. The branches are for two different features. When I'm done with Branch-A I merge it back into Master. All is well.</p>

<p>Now I finish Branch-B. I want to merge that into Master too but I know Branch-B doesn't contain the feature that I created in Branch-A which is now merged into Master. Will git see Branch-B as if the code has been changed back (as before Branch-A was merged into Master) and overwrite the changes from Branch-A in Master?</p>

<p>I hope I made this clear. </p>
","0","9057867","",""
"6764893","253056","2011-07-20 16:02:17","4","2500","<git><git-branch>","git branching - how to make current master a branch and then revert master back to previous version?","<p>This is probably quite simple but I'm currently a git noob and haven't quite got my head round the git branching model yet.</p>

<p>Suppose I currently have no branches other than <code>master</code>, but now I've made some changes since my last commit that I've decided I don't want to keep (note: the changes are not committed yet). I don't want to get rid of these changes just yet though - I'd like to put them in their own branch (called e.g. <code>experimental_stuff</code>) and then continue development from my previous commit. So I guess the steps are:</p>

<ul>
<li>make current master a branch (<code>git branch experimental_stuff</code> ?)</li>
<li>go back to previous commit (<code>git checkout &lt;last_commit&gt;</code> ?)</li>
<li>make this my new master branch so that future commits continue from here (<code>git ???</code> ?)</li>
</ul>

<p>Is this the right approach and what git command do I need for the last part (if any) ?</p>

<p>[<em>Note: this is just a local git repository for my sole use, if that make any difference.</em>]</p>
","0","253056","0","0"
"25036445","2487334","2014-07-30 12:07:57","0","206","<git><tfs><git-branch>","init a git branch with stuff from outside the directory","<p>I have a git repository which has a folder called branches which literally contains different branches of the repo from TFS. This was migrated from TFS to git. </p>

<p>I am trying to create new git branches in this new git repo using the branch in the branch folder. Is there a way of doing it ?</p>
","1","2487334","",""
"25261484","518245","2014-08-12 10:02:05","0","96","<git><branch><git-branch><rebase>","How to sync commits on git","<p>I have a branch A on which I make a commit C1. I fork another branch from A; call it B; and make an commit C2 (changes independent of C1). Now later I go back to A and make some changes to C1. I need to update B now with the latest changes so I do a ""git rebase A"" on B. This gives me conflicts. Is there an easy way to sync with A. I just want to overwrite C1 on branch B (actually B.C1 should be a mirror of A.C1). Or when rebasing, can I specify something like:
""auto resolve conflicts by taking all changes from branch A""</p>

<p>I can always do the following. Create a new branch D from updated A and cherry-pick C2 on top. When I do this and try to push my changes to gerrit (after updating D.C2) I get the error:</p>

<pre><code>To ssh://xxxx@gerrit.xxxx:29418/xxxxx
 ! [remote rejected] HEAD -&gt; refs/for/master (no changes made)
error: failed to push some refs to 'ssh://xxxx@gerrit.xxxx:29418/xxxxx'
</code></pre>

<p>I am trying to understand why.</p>

<p>Thanks in advance.</p>
","0","518245","",""
"7043187","886669","2011-08-12 16:19:57","2","2838","<git><git-branch>","git going back couple of commits on a branch","<p>I am very new to git, I checked couple of similiar questions, but, the ones I saw was slightly different, and I didn't get a strong grasp about them, so I am posting my own question.</p>

<p>I am sole developer on my project. I like to experiment frequently with my code, so I thought using a version control system would help. I have master branch, and a branch with a new feature I am working on. After branching out, I made some commits on feature branch that I would like to keep, and couple others I would like to discard. In the meantime, master was intact if that is relevant. I would like to find a way to learn how many commits should I go back on feature branch and also find a way to go to that commit. I can understand it by looking at commit messages but, I don't know where to see them.</p>
","1","886669","",""
"25287162","745250","2014-08-13 13:10:24","1","44","<git><branch><git-branch><branching-and-merging><revert>","Revert one git branch to reflect another","<p>Say I have a <code>master</code> branch and a <code>defect</code> branch created off <code>master</code>. The <code>defect</code> branch was adding changes on top of <code>master</code> but also the <code>master</code> branch was being merged to the <code>defect</code> branch in between those changes. When I do <code>git diff master HEAD</code> I see specific changes made on top of <code>master</code>. However, because these changes are scattered across various commits interleaved with merges from <code>master</code>, there is no single commit to which I could revert. I need to create a new commit that will undo all differences between <code>master</code> and the <code>defect</code> branch so that I can merge the <code>defect</code> branch into another (release) branch to undo changes made by that <code>defect</code> branch. In theory I could copy all files from <code>master</code> to the <code>defect</code> branch and commit as a new commit, as that effectively would undo those changes. But how can I achieve that with git?</p>
","0","745250","",""
"25292130","1347198","2014-08-13 17:06:17","1","371","<git><git-branch>","Configuration-Management in git","<p>I am not sure if configuration management is the right term for my problem.</p>

<p>At the moment we are using CVS with sub-modules. It's possible to check out a base version and add different other modules. Changing something in any sub-module is tracked (so you can make a <code>cvs status</code> in the root dir and get all changes in sub-modules and so on). I know that git has sub-modules, too, but on this page <a href=""http://git-scm.com/book/en/Git-Tools-Submodules#Starting-with-Submodules"" rel=""nofollow"">http://git-scm.com/book/en/Git-Tools-Submodules#Starting-with-Submodules</a> they mention that the sub-modules are not tracked from the root (I guess you have to make all the git commands in the subdir and can't do it in the root).</p>

<p>Is there any other possibility to use that sub-module concept like it is done in CVS?</p>

<p>Thanks in advance</p>
","0","1347198","",""
"25294485","139163","2014-08-13 19:24:37","1","288","<git><git-branch><git-reset>","How do I revert changes in local git branch to remote tracking branch?","<p>I know enough of git to be dangerous. I am working on frameworks/base git of android repo. 
I changed to a branch p/androidopt. This branch has remote tracking branch vsg/p/androidopt.</p>

<p>Later I made changes and commited them to local branch. I have around 17 of them. I didn't push these changes to remote tracking branch. They are available only in my local branch.</p>

<p>Now I want to reset my local branch to remote tracking branch (i.e vsg/p/androidopt) ignoring all the changes in the local branch.</p>

<p>Can someone provide a git command to do this using the above branch names?</p>

<p>Thanks</p>
","1","139163","",""
"25135102","17507","2014-08-05 09:13:09","1","38","<git><git-branch>","Finding an old patch in one of many git topic branches","<p>Like any good FLOSS developer I'm building up a number of local branches with various selections of patches in them. The trouble is when working on a topic I may have made a number of trivial patches which I was planning to extract later and submit upstream. Now I know the file that I patched but I can't remember what branch I was in at the time.</p>

<p>Is there an easy way to to query git ""which branches have patches to path/to/file over and above what is in origin/master""?</p>

<p>Obviously I'm trying to avoid manually running ""git log ${BRANCH} -- path/to/file"" on every one of my topic branches by hand.</p>
","0","17507","",""
"43768699","1391026","2017-05-03 19:44:35","0","75","<git><git-branch><git-remote>","How to list branches which are in remote A but not in remote B with git?","<p>For example if I have a ""main"" upstream repository where I develop, and a side-repository where I backup my work after a finished work-day - now I want to delete branches on the side-repository which are not in the ""main"" repository are anymore, because they are merged (or whatever).</p>

<p>How to list branches which exist in the ""side"" remote but not in the ""main"" remote?</p>
","3","1391026","",""
"6915418","875044","2011-08-02 16:34:27","3","4802","<git><git-svn><git-branch>","How to git svn fetch only branches/tags with certain patterns?","<p>I want to check out Boost library using git-svn, and I only want to checkout trunk and tags starting from version 1.35, i.e. tags/release/Boost_1_35 and up.  My config looks like this:</p>

<pre><code>[svn-remote ""svn""]
    ignore-paths = ^tags/release/(?i:(?!boost)|[^/]*(?:beta|rc)|boost_(?:0|1_[1-2]|1_3[0-4]))[^/]*/
    url = https://svn.boost.org/svn/boost
    fetch = trunk:refs/remotes/svn/trunk
    tags = tags/release/*:refs/remotes/svn/tags/*
</code></pre>

<p>However, git fetch still fetches tons of unrelated tags such as svn/tags/version_0-9-10 or svn/tags/version_0-9-10@44215.  I wonder what's the correct way of specifying ignore-paths to achieve this effect.</p>

<p>BTW: I've read <a href=""https://stackoverflow.com/questions/1892133/how-do-i-fetch-clone-only-a-few-branches-using-git-svn"">How do I fetch/clone only a few branches using git-svn?</a> but doesn't sounds a scalable solution.</p>
","3","875044","0","0"
"62458267","1223876","2020-06-18 19:49:44","0","373","<git><azure-devops><git-branch>","Is this a good or acceptable branching strategy for continuous delivery with azure git devop?","<p>We are using azure pipeline with git repo. At the moment, we have a master branch, a sprint branch, and feature branches. For production deployment, we deploy sprint branch and then merge it back to master. </p>

<p>The sprint branch will be deployed to dev, QA, UAT and Prod.
However,  there are some practical issues after some months working:</p>

<ol>
<li>After each sprint, we have to remember merging back to master branch.</li>
<li>To do hotfix, we need to create a branch from master, as normally we deploy from sprint branch, we have to spin off a new deployment pipeline and release pipeline for hotfix.</li>
<li>If we want to deploy a couple of features only, it is not easy (as the sprint branch may contain features we do not want to deploy out, so have to revert.</li>
</ol>

<p>What we are thinking is doing this now:</p>

<ol>
<li>We still have Master, Sprint and feature branches. But now we only deploy to production from Master branch now.</li>
<li>For sprint branch, we only deploy to Dev and QA environment. When sprint finish, we need to merge back to Master first and then deploy to UAT and then production.</li>
<li>For hotfix, we create hotfix branch base on Master, and deploy to UAT and then production.</li>
<li>To deploy a couple of features only, we could merge the needed features to Master branch and then deploy. However, this requires that we keep these feature branches after PR (as otherwise it will be difficult to find the feature branch).</li>
<li>After each sprint, we run some job to automatically delete the feature branches.</li>
</ol>

<p>Seems this way everything is bit smoother. Is there any issue with my idea or some better way to do this?</p>
","0","1223876","0","0"
"25166152","1992865","2014-08-06 17:06:08","0","131","<git><git-branch>","git branch commit how to ignore modified files","<p>Hello I was working on a branch of a symfony project ( private directory )</p>

<p>I did modify config.yml to check translations ..</p>

<p>On commit it showed me ( tracked files from the master )</p>

<pre><code>modified : app/config/config.yml , .gitignore
</code></pre>

<p>I did </p>

<pre><code>git rm --cached app/config/config.yml , .gitignore
</code></pre>

<p>then</p>

<pre><code>git commit and git push
</code></pre>

<p>now those files shows as ""deleted' within github branch ..</p>

<p>Is there any way to discard this deletion and just ignore local changes to theses files ??</p>

<p>I did tried with :</p>

<pre><code>git update-index --assume-unchanged  app/config/config.yml
</code></pre>

<p>but returned : can't mark file</p>

<p>my .gitignore allready lists both files, but seems to have no effect ..</p>

<p>Thanks in advance for your enlightment on my question, as I'm really stucked now</p>
","2","1992865","0","0"
"6927778","716834","2011-08-03 14:06:29","3","1500","<git><git-branch><git-clone><git-remote>","git clone does not checkout active branch","<p>I have a remote bare repository with two branches 'master' and 'testing', where HEAD refers to 'testing'.
When cloning this repository git checks out 'master', if 'master' and 'testing' are on the same revision (i.e. HEAD == testing == master).
Only if 'testing' is one (or more) commit(s) behind or ahead, git clone checks out the 'testing' branch on the local side. 
I tried this with git 1.7.5 on Mac OS X (10.6.8).</p>

<p>Addendum:
I just tried the same with a non-bare repository:</p>

<pre><code>mkdir A
cd A
git init
touch a
git add a
git commit -m ""init repo A with a""
git checkout -b testing
</code></pre>

<p>now back in the root dir:</p>

<pre><code>cd ..
git clone A B
cd B
git branch -v -a
* master                 28f599b init A
  remotes/origin/HEAD    -&gt; origin/master
  remotes/origin/master  28f599b init A
  remotes/origin/testing 28f599b init A
</code></pre>

<p>it's 'master'! Back to repo A (we are still in branch 'testing'):</p>

<pre><code>cd ../A
touch b
git add b
git commit -m ""add b in branch testing""
</code></pre>

<p>now 'testing' is one commit ahead 'master'. Now let's clone A again:</p>

<pre><code>cd ..
git clone A C
cd C
git branch -a -v
* testing                23bca39 add b in branch testing
  remotes/origin/HEAD    -&gt; origin/testing
  remotes/origin/master  28f599b init A
  remotes/origin/testing 23bca39 add b in branch testing
</code></pre>

<p>You can re-verify this weird behavior by going back to A, checkout 'master' and merge it with 'testing' (so that all branches have the same head). Now clone A into D and D will be checked out on master!</p>
","1","716834","0","0"
"62463269","13773039","2020-06-19 04:29:14","-1","126","<git><github><project><git-branch>","Right way to use Git? How to manage git branches?","<p>So I was doing a Project with two other peers, and we created a master and a submaster branch along with a personal branch on each of our computers. So we would pull the most recent version of our working code from the submaster and deal with conflicts locally before we try to push any changes. And we would only push submaster to master only when we have a deliverable version of our project.</p>

<p>I was told that having a submaster branch was the wrong way of using git and github and that I shouldn't be doing that. I always thought that committing to the master branch code that may have bugs is bad practice. </p>

<p>How do programmers or software engineers manage their git branches?</p>
","2","13773039","",""
"25169440","1325279","2014-08-06 20:18:58","48","20733","<git><git-branch><git-branch-sculpting>","Remove/hide git branches without deleting commit histories","<p><strong>Situation:</strong></p>

<p>I have a main repo with a main dev branch and lots of ""experiment"" branches sprouting off from it (e.g., <code>exp1</code> and <code>exp2</code>).  The purpose of these experiment branches is to serve as placeholders for experiments that generate numerical results.  I record the branch name (and commit ID) of the experiment branches so I can return to the commits to see precisely the code and history behind the results.</p>

<p>But, now, there are so many experiment branches that it's getting hard to see the main tree.  So, I'm rethinking my strategy for keeping placeholders to the code behind each set of results (i.e., each experiment).  Obviously I could just save the working dir at each branch, but it would be nice to keep the commit history also.</p>

<p><strong>Possible solution:</strong></p>

<p>One way to deal with this is to move the experiment branches into their own independent repos, each being rooted at the child node of the appropriate node in the commit history of the dev branch.  Here's an illustration of what I mean:</p>

<p><img src=""https://i.stack.imgur.com/N1Y0q.jpg"" alt=""enter image description here""></p>

<p>Click <a href=""https://imgur.com/vpsxXMj"" rel=""noreferrer"">here</a> for larger version of image (on imgur.com).</p>

<p>So, for example, for branch <code>exp1</code>, I would like to export commits <code>A-&gt;B-&gt;C</code> to a separate repo rooted at commit <code>A</code>.  Then, I can just record the hash of commit <code>P1</code> so that I know where the <code>exp1</code> branch descended from.</p>

<p><strong>Question:</strong></p>

<p>How can I do that?</p>

<p><strong>Better question:</strong></p>

<p>On the other hand, I strongly suspect there is a much better strategy for doing what I want to do---namely, unclutter the tree for visual inspection but keep placeholders to prior branches so I can return to them if needed.  So, can anyone recommend a strategy for this?</p>
","9","1325279","0","0"
"25426514","1960956","2014-08-21 12:35:19","0","60","<git><branch><git-branch>","How do I update a branch taken from my local repository in git?","<p>Apologies if it is a duplicate question. I am a newbie to git from perforce and the terminologies are a bit confusing. </p>

<p>I have done something like below. </p>

<p>I have cloned a local repository(say folder named MASTER) from remote branch called master. </p>

<p>From this, I have created a branch XYZ using <code>git checkout master</code>;<code>git branch XYZ</code> and <code>git-new-workdir</code> commands. </p>

<p>Now I updated the local repository (the folder MASTER) using <code>git pull</code> to get the recent changes. </p>

<p>I would like to propagate this to my branch XYZ which was taken from my local repository. </p>

<p>How do I do this ? Again use a <code>git pull</code> ? </p>

<p>If I try <code>git pull</code>, it says ""There is no tracking information for the current branch."" </p>

<p>So what do I do ? </p>
","4","1960956","",""
"62694789","6881667","2020-07-02 10:57:22","1","157","<git><github><git-branch><branching-and-merging>","display only the ahead-commits on git-branch that is ahead+behind compared to another branch","<p>I recently inherited a git(hub) repository with</p>
<ul>
<li>almost 20 open branches</li>
<li>with merges between them</li>
</ul>
<p>I managed to recreate the latest version of the overall git repo
and created a new branch that has all the relevant commits, in a flat line
(rather than having a knot of commits and branches).
Lets call this branch <code>Mr.Branch</code>.</p>
<p><code>Mr.Branch</code> runs through all (unit) tests and compiles well in both cmake for building the core and an embedded IDE for building the application that uses the core.
Correct functioning was also tested on the target embedded device.</p>
<p>The old/previous branches still exist.
Before removing them, I want to make sure everything necessary from these branches is actually part of <code>Mr.Branch</code>.</p>
<p>Maybe documentation content was updated or new tests have been added. For now, there is a chance for me to miss these changes.
However, compared to <code>Mr.Branch</code>, the other branches are often something like 200 commits behind, 3 commits ahead.</p>
<p><strong>Is there an option to find out what commits a branch is ahead of <code>Mr.Branch</code> and ignore the behind-commits somehow?</strong></p>
<p>if possible, i would like to not use rebase, as there are a lot of conflicts and i would have to resolve the same conflict multiple times (as the branches are merged into each other)</p>
","2","6881667","",""
"62701048","13854761","2020-07-02 16:33:27","1","1649","<gitlab><git-branch>","Would it be possible to restrict developers not to create a branch in gitlab? Only Owner or Maintainer should create","<p>Would it be possible to restrict developers not to create a branch in gitlab? Only Owner or Maintainer should create.</p>
<p>Any help would be appreciated.</p>
","0","13854761","",""
"44041497","4336558","2017-05-18 07:39:30","0","33","<git><github><version-control><git-branch><devops>","How to allow the client to switch git branches on a website? (*without technical knowledge, for QA)","<p>I need to find a way for our client(s) to switch branches on a project (website) without technical knowledge.<br>
We push our features/fixes to separate branches, but when we need to get the client's approval - we have to merge them to a main development branch &amp; pull to a UAT (test) server. When it's all approved we merge the development branch to the production branch &amp; pull to the production servers.<br>
The problem is when we merge more then one branch, 4 for example, and the client only accepts 2 of them. In that case we have 2 options: <br></p>

<ol>
<li>Fix the other 2 or wait until they are accepted.</li>
<li>Play with git to undo the merge & merge again only the approved branches.</li>
</ol>

<p>I'm not happy with both of the options.</p>

<p>Is there any simple way to allow the client to just switch the branches on the UAT (test) server so we only merge after approval?</p>

<p>*By ""client"" I mean - Someone who has no technical knowledge at all, who doesn't know what linux/ssh/git/... is.</p>

<p>Thanks.</p>
","2","4336558","",""
"25718494","1360693","2014-09-08 06:27:04","2","198","<git><github><merge><git-branch><git-merge>","How to delete all merged code changes from a specific git branch","<p>I have a feature branch which was repeatedly merged in our develop branch for testing. But I need to merge that develop branch into our master branch without the code changes of the specific branch. Has anyone have an idea how to do it??</p>

<p>Basically I want to remove all merges from the feature branch into the develop branch. And I have no better idea except for cherry picking.</p>

<p>I really don't want to cherry pick because that branch was merged over 50 times into our developer trunk... </p>
","5","1360693","0","0"
"7535651","613997","2011-09-23 22:54:50","2","2262","<git><git-branch>","Remove a tracking from a git branch","<p>I have a ""feature/admin"" branch that is tracking <em>multiple</em> branches (origin/feature/admin and development, the latter being local) - I want to remove the <em>local</em> tracking (so my local branch only tracks the remote branch origin/feature/admin).</p>

<p>I've tried removing it with git branch -dr development, but...</p>

<blockquote>
  <blockquote>
    <p>error: remote branch 'development' not found.</p>
  </blockquote>
</blockquote>

<p>Any suggestions?</p>
","0","613997","",""
"25730667","1179841","2014-09-08 18:20:57","3","4623","<git><bitbucket><git-branch><git-clone>","how to get all branches of my forked git repo","<p>I have cloned, pulled and fetched my remote git repo at BitBucket. But I could only get the master branch. My repo at BitBucket has 4 branches:</p>

<ul>
<li>master</li>
<li>fix/cleanup</li>
<li>etc/schema_note</li>
<li>feature/sampledata</li>
</ul>

<p><img src=""https://i.stack.imgur.com/YDNSY.png"" alt=""enter image description here""></p>

<p>I have found the two questions <a href=""https://stackoverflow.com/questions/67699/how-to-clone-all-remote-branches-with-git"">this</a> and <a href=""https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches"">that</a>. I followed some of the instructions in those questions.<br>
When I tried <code>git branch -a</code>, I could not see the other three branches.</p>

<pre><code>*master  
 remotes/origin/HEAD -&gt; origin/master  
 remotes/origin/master
</code></pre>

<p>I tried <code>git checkout origin/fix/cleanup</code>. I got an error message.</p>

<blockquote>
  <p>error: pathspec 'origin/fix/cleanup` did not match any file(s) known
  to git.</p>
</blockquote>

<p>I tried <code>checkout -b</code>, but got another error.</p>

<pre><code>$ git checkout -b fix/cleanup origin/fix/cleanup
fatal: Cannot update paths and switch to branch 'fix/cleanup' at the same time.
Did you intend to checkout 'origin/fix/cleanup' which can not be resolved as com
mit?
</code></pre>

<p>I also tried to execute the oneliner. </p>

<pre><code>for remote in `git branch -r`; do git branch --track $remote; done
</code></pre>

<p>But it gave me the new branches <strong>origin/HEAD</strong> and <strong>origin/master</strong> in my local, not for the other 3 branches. What is going on my repo?</p>

<p>I tried <code>git fetch --all</code> and <code>git pull --all</code>. They gave me nothing changed.</p>
","15","1179841","0","0"
"7572469","623519","2011-09-27 16:25:27","4","3725","<git><git-branch><remote-branch><git-bare>","git add remote tracking branch to bare repo","<ol>
<li>I have a bare repo that was cloned from git.drupal.org.</li>
<li>I have cloned from this bare repo to various different websites. </li>
<li>From each of these, I push a site-specific branch onto the bare repo.</li>
</ol>

<p>E.g. if I have foo.org and bar.org, then my bare repo has drupal's branches + one called foo and one called bar.</p>

<p>The idea was that I could make the most of git's hard links to save disk space with local clones. I thought I would keep the bare repo fetching from git.drupal.org, and pull changes down to my local copies, foo &amp; bar. Then when an update came along it would be easy.</p>

<pre><code>bare-repo$ git fetch &gt;/dev/null ; git branch -a
* 7.x
  foo
  bar
  remotes/origin/7.x
  remotes/origin/8.x
</code></pre>

<p>foo and bar started out on branch 7.x but I'd like to update them to 7.8, e.g. by <code>git rebase 7.8</code> but this fails:</p>

<pre><code>fatal: Needed a single revision
invalid upstream 7.8
</code></pre>

<p>foo and bar cannot 'see' the bare repo's remotes. What can I do?</p>
","0","623519","",""
"7572647","210404","2011-09-27 16:39:26","34","60049","<git><git-branch>","How to do a ""git checkout -b <branchname>"" from a remote tag","<p>I'm trying to create a branch from a remote tag, but it seems there's no way to do it. When I try</p>

<pre><code>git checkout -b test origin/deploy
</code></pre>

<p>where origin is the remote and deploy is the tag I want to check out, but I get</p>

<pre><code>fatal: git checkout: updating paths is incompatible with switching branches.
Did you intend to checkout 'origin/deploy' which can not be resolved as commit?
</code></pre>

<p><strong>UPDATE:</strong>
I've just discovered that </p>

<pre><code>git fetch --all -t
</code></pre>

<p>was not working properly for me. While it downloads all branches, it does not download all tags, so when I checked out deploy it was and old tag. Now I execute </p>

<pre><code>git fetch --all &amp;&amp; git fetch -t
</code></pre>

<p>This way when I create a new branch based on a tag</p>

<pre><code>git checkout -b test deploy
</code></pre>

<p>the new branch is up to date with the last deploy.</p>
","0","210404","0","0"
"25765237","53261","2014-09-10 12:15:13","14","4966","<git><git-branch>","Is it possible to get branch names without clone or pull from git?","<p>I want to get all branch names of a git repository. Currently, I clone the repository then get them on local machine. This is inefficient because all I need is names and nothing else.</p>

<p>I wonder if it is possible to do that? If so, what command I can use.</p>
","2","53261","0","0"
"7853352","165448","2011-10-21 17:57:20","1","1072","<unix><git-branch><bash>","Configuring bash_profile to show git branch returns my branch twice","<pre><code># show git branch
function parse_git_branch {
  git branch --no-color 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function proml {
  local        BLUE=""\[\033[0;34m\]""
  local         RED=""\[\033[0;31m\]""
  local   LIGHT_RED=""\[\033[1;31m\]""
  local       GREEN=""\[\033[0;32m\]""
  local LIGHT_GREEN=""\[\033[1;32m\]""
  local       WHITE=""\[\033[1;37m\]""
  local  LIGHT_GRAY=""\[\033[0;37m\]""
  case $TERM in
    xterm*)
    TITLEBAR='\[\033]0;\u@\h:\w\007\]'
    ;;
    *)
    TITLEBAR=""""
    ;;
  esac

PS1=""${TITLEBAR}\
$WHITE\w$GREEN\$(parse_git_branch)$BLUE\
$GREEN\$ ""
PS2='&gt; '
PS4='+ '
}
proml
</code></pre>

<p>The previous code returns the branch name three times. I just need to see it once...</p>

<pre><code>~/projects/sms(apps2)$ 
(apps2)
(apps2)
</code></pre>

<p>How can I correct this to display just the path + branch?</p>

<p>ie .. <code>~/projects/sms(apps2)$</code> </p>
","2","165448","",""
"26009382","338204","2014-09-24 05:41:19","0","76","<git><github><push><git-branch>","How can not push local git commit to remote","<p>I just want to commit local branch, and not push to remote. Then I can merge updates from remote branch. When push to remote, I can selectively avoid push this specific commit to remote, and others commits can be pushed to remote branch. </p>

<p>How to do this with git commands ? </p>
","1","338204","",""
"26033266","354881","2014-09-25 07:48:08","1","2982","<git><git-branch>","git status: on branch XXX Your branch is ahead of origin/YYY by 10 commits","<p>I have this message on git status:</p>

<pre><code># On branch YYY
# Your branch is ahead of 'origin/XXX' by 10 commits.
#
nothing to commit (working directory clean)
</code></pre>

<p>Branch YYY is child of branch XXX. But normally on git status I would expect:</p>

<pre><code># On branch YYY
# Your branch is ahead of 'origin/YYY' by 10 commits.
#
nothing to commit (working directory clean)
</code></pre>

<p>Git fetch does not solve the problem.
Any ideas?</p>

<p>Output of <code>git branch -avvv</code> (filtered):</p>

<pre><code>* XXX                              0d64037 [origin/YYY: ahead 10] test
  remotes/origin/XXX               0d64037 test
</code></pre>
","0","354881","0","0"
"44578261","325418","2017-06-15 22:59:24","0","742","<node.js><npm><git-branch>","What is the general step to update node_modules (`npm install` vs `npm update`) after switching a git branch?","<p>Is it a general rule if we switch git branch often, and after that, we should just use</p>

<pre><code>npm update
</code></pre>

<p>instead of</p>

<pre><code>npm install
</code></pre>

<p>because <code>npm update</code> will be sufficient? (and that <code>update</code> is a lot faster than <code>install</code>)?</p>

<p>(Switching branch might include <em>upgrading or downgrading</em> a node module).</p>
","1","325418","",""
"7902144","247243","2011-10-26 11:47:00","17","18078","<git><git-branch><git-checkout>","How the working directory is updated on ""git checkout""?","<p>Consider the following ""story"":</p>

<pre><code>$ mkdir my_project
$ cd my_project
$ git init
Initialized empty Git repository in /home/misha/misha/my_project/.git/

$ echo ""first line"" &gt; hello.txt
$ git add hello.txt
$ git commit -m ""first commit""
[master (root-commit) 9c913a1] first commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 hello.txt

$ git branch new_feature
$ git checkout new_feature
Switched to branch 'new_feature'
$ echo ""second line"" &gt;&gt; hello.txt
$ cat hello.txt
first line
second line

$ git checkout master
M    hello.txt
Switched to branch 'master'
$ cat hello.txt
first line
second line
</code></pre>

<p>Why <code>hello.txt</code> has two lines on branch <em>master</em>? (I thought that <code>git checkout</code> will revert the working directory to the previous state, i.e. <code>hello.txt</code> will have only one line.)</p>

<p>What actually happens behind the scenes to the working directory on <code>git checkout</code>? How it is updated?</p>
","0","247243","0","0"
"44593160","4934640","2017-06-16 15:41:17","0","269","<git><git-branch><git-submodules>","How to clone a git repository with its submodules checkout on their default branches?","<p>On the question:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/44591825/how-to-correctly-call-a-git-submodule-symlinked"">How to correctly call a git submodule symlinked?</a></li>
</ol>

<p>Was figured it out it is necessary to checkout the git submodules to their default branch when a <code>git clone --recursive</code> is performed, but how to do that?</p>

<p>I tried searching and found this other question:</p>

<ol>
<li><a href=""https://stackoverflow.com/questions/1030169/easy-way-pull-latest-of-all-submodules"">Easy way pull latest of all submodules</a></li>
</ol>

<p>Suggesting to use the command <code>git clone --recurse-submodules</code> but after cloning the repository its submodule still not checkout on their default branches.</p>
","0","4934640","",""
"63234621","1361598","2020-08-03 18:00:23","1","453","<git><git-branch>","How to remove a file named .css from all branches in git","<p>I am working with a git repository that somehow has a file named <code>.css</code> in it. This causes an error when checking out in Windows (but in Linux it works fine).</p>
<p>How do I remove this file from all branches in <em>git</em>, <em>without</em> accidentally <em>removing</em> all css files from all branches?</p>
","2","1361598","",""
"22907326","1180556","2014-04-07 08:33:58","2","2128","<git><git-svn><git-branch>","Branch name starting with '-' in git","<p>I am moving from svn to git using git-svn, and some of my branches names started with '-'. Now with help form <a href=""https://stackoverflow.com/questions/20034705/how-do-i-delete-a-branch-with-the-name-starting-with"">this</a> question and <a href=""http://git-scm.com/book/en/Git-and-Other-Systems-Migrating-to-Git"" rel=""nofollow noreferrer"">this</a> migration documentation I am able to pass parameters starting with '-'. but on creating branch git returns an error stating:</p>

<blockquote>
  <p>fatal: '-CLOSED-mybranch' is not a valid branch name.</p>
</blockquote>

<p>I am using gitlab. The command that I am running to create branches is: </p>

<pre><code>git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch -- ""$branchname"" --""refs/remotes/$branchname""; git branch -r -d -- ""$branchname""; done
</code></pre>

<p><a href=""https://wincent.com/wiki/Legal_Git_branch_names"" rel=""nofollow noreferrer"">This</a> articles explains legal branch names and I think my branch name is Legal. Can anyone tell me where the problem could be?</p>

<p>PS: branch name not starting with '-' are successfully imported.</p>
","0","1180556","",""
"42156698","321973","2017-02-10 10:12:20","1","1092","<git><git-branch><git-tag>","How to get a git-branch -avv like list of tags?","<p><code>git branch -avv</code> shows all branches (including remote ones), decorating them with the tracking branch, short-SHA and commit title. Is there a similar command to display all tags together with the commit they point to, optionally including whether it is pushed upstream, and additionally with the message if the tag was annotated?</p>

<p>The best I could get so far is:</p>



<pre class=""lang-bash prettyprint-override""><code>git tag --format '%(color:green)%(refname:short)%09%(color:white)%(objectname:short) %(contents:subject)'
</code></pre>

<p>But this has several problems:</p>

<ul>
<li>Depending on tag-length, the alignment via <code>%09</code> (a <code>\t</code>) fails</li>
<li>No way to see whether the tag is lightweight or not (<code>%(objecttype)</code> displays this as either <code>commit</code> or <code>tag</code>, but I'd prefer something like the tag annotation on the next line)</li>
<li><code>%(objectname:short)</code> turns out to be the <em>tag's</em> SHA for annotated tags, whereas I want to know what they are pointing to.</li>
</ul>

<p>These last two boil down to basically wanting what <code>git show-refs --tags -d</code> shows, but that doesn't offer <code>--format</code>.</p>
","0","321973","0","0"
"5003935","46375","2011-02-15 13:00:01","10","11261","<git><branch><git-svn><git-branch>","git-svn - Checkout a remote branch that already exists in svn when my master is already a branch.  Explain this .git/config","<p>This is a bit of an oddball question given how the team I've joined is using SVN.  Basically, the svn repository follows a standard layout, but trunk really hasn't been touched in 1.5 years or so and work tends to happen in branches and branches of branches only.  As such, I've used git-svn to clone from the branch that represents the active branch for our next release and that is what master tracks in my local git repository.  Let's call this branch in svn 'release' from here on out.   Using git-svn for this purpose is just hunky dory.</p>

<p>Now, someone has created a feature branch off of 'release', that I'm going to call 'feature', that I'd like to pull down to a local branch of mine, and commit to as well.  Sure, I can get away with just cloning that branch off into another directory/git repository locally, but what I'd really like to do is have 'feature' mirrored in a local branch within my local git repository as well to make merging between the two as straightfoward as possible.  I've seen other stackoverflow.com posts show how this works assuming you've used <code>git svn init</code> with <code>--stdlayout</code>, but I didn't do that in my case for the reasons stated above.</p>

<p>Here is my .git/config</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://our.svn.server/svn/root/branches/release
    fetch = :refs/remotes/git-svn
</code></pre>

<p>I'm assuming what I need in my <code>[svn-remote]</code> section is a <code>branches = $something</code> but I don't know what that $something is in this case nor what incantation of git checkout and other commands I need after I make that change to .git/config.</p>

<p>Any suggestions?</p>

<hr>

<p><strong>Edit - The following works:</strong></p>

<p>So I started from scratch and did the following clone command:</p>

<p><code>git svn clone <a href=""https://my.svn.server/svn/root"" rel=""noreferrer"">https://my.svn.server/svn/root</a> -T branches/branch_I_want_as_master -b branches</code></p>

<p>Which, after about 16 hours, finally pulled everything down that it needed to.  The resultant .git/config looks like this:</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[svn-remote ""svn""]
    url = https://my.svn.server/svn/root
    fetch = branches/branch_I_want_as_master:refs/remotes/trunk
    branches = branches/*:refs/remotes/*
</code></pre>

<p>So I know this works - I can <code>git checkout -b name-of-a-branch name-of-a-branch</code> and it gives me the remote branch in my local git repo.   The previous answers weren't the exact answers I needed, but I've upvoted since they were helpful.  </p>

<p>At this point, I'll accept answer that just explains why this works and perhaps a useful link that breaks down how to do things properly with .git/config.  </p>
","0","46375","0","0"
"5009600","191463","2011-02-15 21:16:50","143","108314","<github><branch><git-branch><git-fork>","difference between fork and branch on github","<p>If I fork a project that's hosted on github. Do I fork all the branches? How do I know which branch my fork is based on? In other words which branch will be downloaded to my PC?</p>
","1","191463","0","0"
"23142731","1035008","2014-04-17 20:22:57","0","1636","<git><git-branch>","Push a feature branch to develop branch using git","<p>Assume that I have two branches as the following: the blue branch is a main develop branch and the yellow branch is a new-feature branch. </p>

<p><img src=""https://i.stack.imgur.com/XP8Pl.png"" alt=""enter image description here""></p>

<p>At some point, I know I have enough feature in my new-feature branch and I wish I could use them in the main develop branch. However, the new-feature is not quite done yet and I still want to keep working on it. Is there a way to push the modifications in the new feature branch to the main develop branch without merging them? </p>

<p>Is it a good practice to do so? Why or why not? </p>
","0","1035008","",""
"23143397","2498416","2014-04-17 21:02:52","10","16456","<git><git-branch>","opening .git/config : Permission denied","<p><code>C:\Users\Inspiron\.git\config</code> folder is empty and command <code>$git config user.email user@gmail.com</code> returns error: opening  .git/config: permission denied.
I try to set post buffer size,but get same error.</p>
","0","2498416","0","0"
"23145815","478742","2014-04-18 00:56:39","0","44","<git><git-branch><git-rebase>","How to git-rebase from the point where previous rebase stopped?","<p>I have an experimental branch to which I'd like to regularly merge progress made on master. </p>

<p>In other words, I do <code>git rebase master</code> on my branch, fix conflicts etc., continue my work on the branch, then some day I want to bring more changes from master. If I simply do <code>git rebase master</code> again, it starts from the same point when the branch was created, which means I should go through all the conflicts and other complications again.</p>

<p>Is there an easy way of saying 'rebase from the point where last rebase stopped' without specifying commit IDs?</p>
","0","478742","",""
"42340316","1197249","2017-02-20 09:06:32","1","1366","<git><git-branch><git-log><git-revert>","git revert remove commit","<p>I am interested in reverting a <em>pushed</em> commit but also removing it from the graph.<br>
E.g. I have:  </p>

<pre><code>                   tag
A &lt;— B &lt;— C &lt;— D &lt;— E  &lt;— F  
                          HEAD  
</code></pre>

<p>I would like to remove <code>F</code> completely so my graph looks like:  </p>

<pre><code>                   tag
A &lt;— B &lt;— C &lt;— D &lt;— E  
                   HEAD  
</code></pre>

<p>How can I do this?</p>
","2","1197249","0","0"
"23152285","798275","2014-04-18 10:32:20","0","28","<git><git-branch><git-merge>","How to merge branches in git without actually merging?","<p>I want to merge two branches, but all I want to do is to overwrite the file in master wherever it has changed.</p>

<p>I used to do this by checking out files one by one from the other branch, but that way I will lose the history once I delete the branch.</p>

<p>Any solution to that? Thanks!</p>
","1","798275","",""
"23152450","998523","2014-04-18 10:41:59","2","1167","<git><github><git-branch><gitolite><mirroring>","Mirroring git branch","<p>I have a private repository on my own server hosted with gitolite. Now I want to opensource it on github, but still have one private branch.</p>

<p>All howtos are implying that I want to mirror whole repo with all tags and branches. But is it possible to have only common branch?</p>

<p>So, all I want is to keep my private branch up-to-date with public, but with some specific changes (these changes are even in separate catalog).</p>
","0","998523","",""
"5059441","79292","2011-02-20 19:29:47","66","116883","<git><git-branch>","How to find which git branch I am on when my disk is mounted on other server","<p>Our git repo is on a Linux server; I can be on the master branch or create a new branch that I can go inside and use.</p>

<p>Our git repo disk is mounted on AIX box to build (I can see git directory in the AIX box that allows me to build)</p>

<p>In the AIX box how I can see that I am using master or inside a particular branch. What changes inside .git that drives which branch I am on?</p>
","0","79292","0","0"
"23192713","883561","2014-04-21 07:13:46","0","10264","<git><git-branch>","git creating a branch from the master","<p>I am new to using git and come from SVN background. I have checkout a project containing all the files in the default master branch. All the files in the master branch are outdated and I need to checkin a new set of files. But I am planning to create a new branch for the same and continue my development in the branch. </p>

<ol>
<li>Do I need to be in the master branch to create a new branch?</li>
<li>Command to create a new branch so that the master branch is untouched.</li>
<li>How to switch to the master/mybranch branch later.</li>
<li>Command to know which branch I am currently working on?</li>
</ol>

<p>Please let me know as I do not want to screw up my existing master branch.</p>
","2","883561","0","0"
"5073367","167017","2011-02-22 02:17:29","1","212","<git><git-branch>","default git behavior I don't understand","<p>I have not decided if I like the following behavior regarding files / folders that are not under version control.</p>

<p>In particular, it seems strange that un-versioned files seem to follow you when you checkout different branches. It seems like said files should only exist in the branch they were created in.</p>

<p>Can someone please help me understand why / if this is desirable behavior?</p>

<p>For example:</p>

<pre><code>shopkins@shax:~/tmp/test$ ls
hello.txt
shopkins@shax:~/tmp/test$ git branch  
-
* master
my_branch
shopkins@shax:~/tmp/test$ 
shopkins@shax:~/tmp/test$ git checkout my_branch 
Switched to branch 'my_branch'
shopkins@shax:~/tmp/test$ mkdir adir
shopkins@shax:~/tmp/test$ touch adir/my_branch.txt
shopkins@shax:~/tmp/test$ git add adir/
shopkins@shax:~/tmp/test$ git commit -a -m ""added adir with my_branch.txt""
[my_branch d36964c] added adir with my_branch.txt
0 files changed, 0 insertions(+), 0 deletions(-)
shopkins@shax:~/tmp/test$ git checkout my_branch
Switched to branch 'my_branch'
shopkins@shax:~/tmp/test$ tree
.
|-- adir
|   |-- my_branch.txt
|   `-- orphan.txt
`-- hello.txt

1 directory, 3 files

create mode 100644 adir/my_branch.txt
shopkins@shax:~/tmp/test$ touch adir/orphan.txt
shopkins@shax:~/tmp/test$ git checkout master
Switched to branch 'master'
shopkins@shax:~/tmp/test$ ls
adir  hello.txt
shopkins@shax:~/tmp/test$ tree
.
|-- adir
|   `-- orphan.txt
`-- hello.txt

1 directory, 2 files
</code></pre>

<p><strong>EDIT</strong> 
    As it turns out, nothing was changed in the files between the branches in the following first edit. Thanks for the help everyone!</p>

<p><strong>EDIT</strong>
It seems that git does not write modification of versioned files when checkouts occur. In the following example, another.txt is not under version control:</p>

<pre><code>shopkins@shax:~/tmp/test$ ls -l
total 4
drwxr-xr-x 2 shopkins shopkins 4096 2011-02-21 21:49 adir
-rw-r--r-- 1 shopkins shopkins    0 2011-02-21 21:47 another.txt
-rw-r--r-- 1 shopkins shopkins    0 2011-02-21 21:49 hello.txt
shopkins@shax:~/tmp/test$ git checkout my_branch
Switched to branch 'my_branch'
shopkins@shax:~/tmp/test$ ls -l
total 4
drwxr-xr-x 2 shopkins shopkins 4096 2011-02-21 21:49 adir
-rw-r--r-- 1 shopkins shopkins    0 2011-02-21 21:47 another.txt
-rw-r--r-- 1 shopkins shopkins    0 2011-02-21 21:49 hello.txt
shopkins@shax:~/tmp/test$ 
</code></pre>
","0","167017","",""
"23210283","85597","2014-04-22 04:18:23","6","1158","<git><tfs><merge><git-branch>","How to maintain physical branch folders for git as available in TFS?","<p>We have a huge product and that has many features, each features take very long, so we are maintaining short lived feature branches in TFS. For example,</p>

<pre><code>MAIN/
   PROJECTMGT
   EMAILMGT
   etc..
</code></pre>

<p>And once complete, they are merged back to MAIN, and each different development team works on different branches.</p>

<p><strong>Merge Process</strong></p>

<p>Since each team works on different branch, there is no conflict, however person responsible for merging branches onto MAIN needs to see a clear view of files in different folders. Because we need to test and review the branch before merging, we also need to see conflict of different branches and resolve them clearly.</p>

<p>Now we are moving onto git, and as I am learning git, I'm having a little difficulty in how to organize branches. As while working on the file and folder structure, we have no idea of which branch we are actually in.</p>

<p>We just ran a test on git, and most of us who operate on multiple branches got confused and we also made mistakes in merge.</p>

<p>TFS automatically merges everything into same branch where file actually belongs without specifying branch.</p>

<p>I was reading about this and I saw some suggestion of creating multiple clones to emulate TFS kind of physical folder branching.</p>

<p>Can someone guide me how can I do it? I am using Visual Studio Tools for Git.</p>

<p><strong>UPDATE</strong></p>

<p>Based on comments, here are our current difficulties.</p>

<ol>
<li><p>Each branch has separate NuGet Package Versions for example one branch might be using EF 5 and new branch has EF 6, switching branch is painful as it requires nuget restore and all its warnings.</p></li>
<li><p>Just like nuget package, we have other third party libraries (binaries) and different versions of it in different branches.</p></li>
<li><p>At time of merge, its a mess, we keep on asking ourselves which branch we are in, however in VS it is easy as physical folder path tells us our branch.</p></li>
<li><p>I find it totally silly to remember which branch we were when I checked out three days back. Though VS Git Tools displays it when you go in Source Code Explorer, but this also fails when we have multiple VS instances open.</p></li>
<li><p>We are looking for a workflow without ever to use ""SWITCH BRANCH"" ever.</p></li>
</ol>
","7","85597","",""
"5263309","653993","2011-03-10 17:19:59","0","310","<ruby-on-rails><ruby><capistrano><git-branch><git-tag>","robust deploy strategy with capistrano and git","<p>What is the best way to set up a robust deploy strategy for a RoR app that allows for the following scenario?</p>

<ol>
<li>new feature committed</li>
<li>new feature deployed to staging environment</li>
<li>emergency feature/fix committed</li>
<li>emergency fix deployed to staging (and previous feature excluded)</li>
<li>emergency fix tested on staging</li>
<li>emergency fix deployed to production</li>
<li>original new feature deployed back to staging</li>
</ol>

<p>As far as I can tell, I will need to use either git branches or tagging or both.  Are there any tools that can reduce or automate the overhead of maintaining these branches or tags?</p>
","0","653993","",""
"23392050","1709076","2014-04-30 15:22:59","0","2525","<git><version-control><github><branch><git-branch>","how to make a parallel branch in git","<p>I want to make a parallel 'dev' branch off of the primary 'prod' branch. So I did</p>

<pre><code>git checkout -b dev prod
</code></pre>

<p>Which I would think would make a 'branch' coming off of 'prod' in parallel that should be called 'dev'.</p>

<p>However when I look at my project in 'SourceTree' I just see one straight branch.</p>

<p>I thought 'well maybe because dev is technically the same as prod still, that is why there is just one straight branch. Maybe i need to commit a file to the dev branch, and then I will see two branches in parallel'. So, I changed one file with my HEAD on dev and did
    git add someFile.m
    git commit</p>

<p>Then in source tree I get another 'node' above the current branch, but I still see one straight branch (no parallel 'dev' and 'prod' branches)</p>

<p>When I do 
    git status
I see
    dev
    master
    prod
    remotes/origin/HEAD -> origin/master
    remotes/origin/master
    remotes/origin/prod</p>

<p>Any ideas how to have a parallel working copy of dev running next to prod?</p>

<p>(p.s I also tried using the sourcetree UI. I clicked on 'Branch', but even so I don't find two parallel branches, just one single branch.)</p>
","2","1709076","",""
"5298972","81398","2011-03-14 13:08:19","37","14516","<git><branch><git-branch>","Relationship between n git branches","<p><strong>If I have n git branches, how do I easily show the relationship between these branches?</strong></p>

<p>Basically I am interested in seeing a tree of a subset of all the branches in my repository. I am however not interested in all the intermediate commits.</p>

<p>E.g.: My repository looks like this:</p>

<pre><code>     o---o--o A
    /      /
o--o--o--o--o--o B
 \  \        \
  \  o--o C   \
   \     \     \
    o--o--o--o--o--o D
</code></pre>

<p>But probably way more complicated. Now I want to see the relationship between branch A, C and D. Something along the lines of:</p>

<pre><code>     o A
    /
o--o--o
   \   \
    o---o C
         \
          o--o D
</code></pre>

<p>Or an equivalent overview. Is this possible, and how? (A graphical tool will be just fine.)</p>

<p><strong>Solution</strong></p>

<p>Based on Antoine Pelisses answer, the below line seems to do (almost) exactly what I want:</p>

<pre><code>git log --graph --decorate --oneline --simplify-by-decoration A B C
</code></pre>

<p><strong>Update</strong></p>

<p>Mark Longair points out in his answer below that <code>gitk</code> accepts the same parameters as <code>git rev-list</code>, so it is possible to do:</p>

<pre><code>gitk --simplify-by-decoration A C D
</code></pre>
","0","81398","0","0"
"50823740","9931912","2018-06-12 18:38:47","1","458","<github><git-branch>","'git branch' does not show the branches names","<p>I am using git on ubuntu. </p>

<p><code>git branch</code> does not show the branches' names. I tried cloning different repositories, but again <code>git branch</code> does not show the branches' names.
I have also created a new repository and it is the same.</p>

<p>Example:</p>

<pre><code>&gt;git clone https://github.com/uber/pyro.git
Cloning into 'pyro'...
remote: Counting objects: 13342, done.
remote: Compressing objects: 100% (23/23), done.
remote: Total 13342 (delta 8), reused 0 (delta 0), pack-reused 13319
Receiving objects: 100% (13342/13342), 55.85 MiB | 5.34 MiB/s, done.
Resolving deltas: 100% (9814/9814), done.
&gt;ls
pyro
&gt;cd pyro
&gt;git branch -a
&gt;git branch -r
&gt;git branch
&gt;git status
On branch dev
Your branch is up to date with 'origin/dev'.
</code></pre>

<p>Adding another branch:</p>

<pre><code>&gt;git checkout -b branch1
Switched to a new branch 'branch1'
&gt;git branch
&gt;
</code></pre>

<p>I have also committed one time. and it is the same.    </p>

<pre><code>&gt;GIT_TRACE=1 git branch
15:39:13.295464 git.c:344               trace: built-in: git branch
15:39:13.296121 run-command.c:640       trace: run_command: unset 
GIT_PAGER_IN_USE; LESS=FRX LV=-c pager
&gt;git --version
git version 2.17.1
&gt;
&gt;env -i git branch
WARNING: terminal is not fully functional
* devress RETURN)
&gt;
</code></pre>

<p>I have tested the same commands on another laptop and it works. (I have also uninstalled git and reinstalled it. It doesn't help)</p>

<p>Any idea how to fix it?</p>
","2","9931912","",""
"17890693","1119895","2013-07-26 20:42:04","4","24041","<git><git-branch>","How to add new folder to git branch without adding it to master","<p>How does one add a new folder to a branch in git without having that folder show up in the master branch?</p>

<pre><code>e.g. 
git branch myNewBranch
git checkout myNewBranch
mkdir foo

git checkout master
ls
</code></pre>

<p>the myNewBranch directory is also added to master</p>
","0","1119895","0","0"
"34440451","3362364","2015-12-23 17:00:41","0","926","<git><github><git-branch><git-pull>","Cannot git pull in a new branch","<p>I'm working on a new branch created by a colleague. I have committed all the changes and when I try to <code>git pull</code>, it gives me an error:</p>

<pre><code>$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; kiet_tnp
$
</code></pre>

<p>What do I do? Without <code>git pull</code>, I cannot push my codes.</p>
","1","3362364","",""
"17953344","825206","2013-07-30 17:18:10","2","11106","<git><git-branch>","How to create and share a git branch with other developers?","<p>How can I create a new branch and push it to the remote and then share it with the other developers? I'm following the below steps. What's wrong, missing?</p>

<p>Developer A creates the following:</p>

<pre><code>git branch myBranch
git push origin myBranch
</code></pre>

<p>Then the remote should be updated:</p>

<pre><code>git remote update
</code></pre>

<p>Developer B and C create the same branch on their locals:</p>

<pre><code>git checkout --track origin/myBranch
</code></pre>

<p>Then what? If the above steps are correct, then how should I configure the new branch? What should be the correct order of steps to follow for this problem?</p>
","2","825206","",""
"19033763","","2013-09-26 16:32:45","0","61","<git><git-branch><git-pull><git-checkout><git-fetch>","Understanding git fetches and your local repo","<p>I read that, after doing a <code>git fetch</code>, your local repo has all the commits from the original repo, but that they are ""not yet integrated into the cloned repository's local branches"".</p>

<p><strong>What does this mean/imply?</strong></p>

<p>Do I then need to checkout my branch to pull the changes down into my local working copy? Or does it imply something else? Thanks in advance!</p>
","0","","",""
"19041337","1312080","2013-09-27 01:30:19","0","122","<git><git-branch><gitignore>","Version file in only one branch and but keep in workspace/.gitignore in others","<p>I have about five local branches.  There is a locally used utility script that I would like to use in all of those branches, however, I want to version it in only one of them (let's call it <strong>BranchX</strong>) and ignore it in the rest.  </p>

<p>The problem is, when I commit the script to BranchX and check out another branch, the script disappears because it is properly versioned in another branch (BranchX) but neither committed into the current branch nor ignored in it.  So I have a feeling I need to do something when I am in BranchX to tell git to, although the file is versioned there, always keep it on disk even when I go to a different branch so that I can add it to its <code>.gitignore</code> (unless it is there already).  </p>

<p>I was thinking of <code>git rm --cached &lt;PATH&gt;</code> which I have used before to remove a versioned file from a local branch but keep it on disk, however, I do not want to remove it from that git branch and that is what this command will do for me.  How do I accomplish the same thing that command does minus the remove from versioning so the file can wait for me there on disk when I switch to another branch?</p>
","0","1312080","",""
"19077855","1331967","2013-09-29 12:05:10","0","86","<git><version-control><branch><git-branch>","Removing a directory from a particular git branch","<p>I've a peculiar situation in my hand. Say I've a git repo named git_test. It has 3 branches: </p>

<ol>
<li>master</li>
<li>branch1</li>
<li>branch2</li>
</ol>

<p>And it has 2 folders(dir1, dir2) and README file.</p>

<p>Now, master branch has README file alone.
branch1 has dir1.
But when I created branch2 and checked out, it had both dir1 and dir2. (I had pushed the branch to remote repo by this time)</p>

<p>Now my question has two parts.</p>

<ol>
<li><p>How do I remove dir1 from branch2? (That is, I want branchN to have only dirN, not the other directories in the repo)</p></li>
<li><p>Is there a way to avoid this in the future, at the time of branch creation itself? (Selecting which director(y/ies) I want to include in that particular branch?</p></li>
</ol>

<p>TIA</p>
","4","1331967","",""
"35883717","2714301","2016-03-09 05:35:25","3","6622","<git><git-branch><git-bash><upstream-branch>","Fast-forwarding and rebase in git","<p>I am reading <a href=""https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"" rel=""nofollow"">this</a> and for the most part, I get it. I think I understand rebasing (it obtains a more linear git log history without having to make a commit that is just a three-way commit) I also think I understand the git diagrams. But there are a few words in the paragraph I don't understand. </p>

<blockquote>
  <p>You’ll notice the phrase “fast-forward” in that merge. Because the
  commit pointed to by the branch you merged in was directly
  <strong>upstream</strong> of the commit you’re on, Git simply moves the <strong>pointer</strong> forward. To phrase that another way, when you try to merge one commit
  with a commit that can be reached by following the first commit’s
  history, Git simplifies things by moving the pointer forward because
  there is no divergent work to merge together – this is called a
  “fast-forward.”</p>
  
  <p><strong>Your change is now in the snapshot of the commit pointed to by the master branch, and you can deploy the fix.</strong></p>
</blockquote>

<p>What I don't understand are the terms upstream, pointer, and the last sentence.</p>

<p>In the diagram, why is the red master box above hotfix?</p>
","2","2714301","0","0"
"51987476","3032338","2018-08-23 13:52:50","0","15101","<git><git-branch>","Naming git branch as feature/featureName or username/featureName instead of creating sub-branch","<p>I am working with a remote team and I am being asked to do following:</p>
<blockquote>
<p>For creating any branch for bug fix cerate it as 'hotfix/BUGFIX_NAME'</p>
<p>For any feature branch create it as 'feature/FEATURE_BRANCH_NAME'</p>
<p>create individual branches by your names separately work on your named
branch and create any branch of your task under it. once you merge any
task in your named branch, you can merge it in the current feature
branch or hotfix branch</p>
</blockquote>
<p>I need to work on featureA so I will be doing:</p>
<pre><code>git checkout -b myname/featureA
</code></pre>
<p>In future I need to create more features so I may do:</p>
<pre><code>git checkout -b myname/featureB
</code></pre>
<p>Is it common/right way to name branches this way or should I do below:</p>
<pre><code>git checkout -b myname
</code></pre>
<p>then:</p>
<pre><code>git checkout -b featureA myname
git checkout -b featureb myname
</code></pre>
<p>Referenced articles before posting:</p>
<p><a href=""https://stackoverflow.com/questions/4470523/create-a-branch-in-git-from-another-branch"">SO Question</a></p>
<p><a href=""http://mamchenkov.net/wordpress/2014/07/10/git-branch-names-support-forward-slashes/"" rel=""nofollow noreferrer"">Git branch names supports forward slashes</a></p>
<p><a href=""https://gist.github.com/revett/88ee5abf5a9a097b4c88"" rel=""nofollow noreferrer"">Github discussion</a></p>
<p>So my question is that am I doing what is right way as per instructions and what should be done?</p>
<p>I apologize if my question is too much subjective and could not be useful for anyone else. Need help before I mess up! :)</p>
<p>Thanks!</p>
","4","3032338","",""
"23289550","953553","2014-04-25 09:43:32","0","20","<git><git-branch>","new git branch from existing one without merging with master","<p>I have branch <code>one</code> (not merged yet with master) I want to have branch <code>two</code> which has everything like in <code>one</code>.</p>

<p>Will be <code>git checkout -b two</code> enough?</p>
","0","953553","",""
"5167957","140185","2011-03-02 13:13:05","258","129714","<git-branch><git>","Is there a better way to find out if a local git branch exists?","<p>I am using the following command to find out if a <em>local</em> git branch with <code>branch-name</code> exists in my repository. Is this correct? Is there a better way?</p>

<p>Please note that I am doing this inside a script. For this reason I'd like to <a href=""https://mirrors.edge.kernel.org/pub/software/scm/git/docs/#_low_level_commands_plumbing"" rel=""noreferrer"">use plumbing commands</a> if possible. </p>

<pre class=""lang-sh prettyprint-override""><code>git show-ref --verify --quiet refs/heads/&lt;branch-name&gt;
# $? == 0 means local branch with &lt;branch-name&gt; exists. 
</code></pre>
","7","140185","0","0"
"5170741","114798","2011-03-02 16:57:10","0","183","<git><git-svn><git-branch><remote-branch>","How to integrate svn branches into git branches with git-svn?","<p>i have not much svn experience but i am used to work with git.</p>

<p>I have the following svn repository structure and revisions.</p>

<blockquote>
  <p><a href=""https://server/svn/solution/trunk/solution.sln"" rel=""nofollow"">https://server/svn/solution/trunk/solution.sln</a> @r100<br>
  <a href=""https://server/svn/solution/trunk/project1/project1.csproj"" rel=""nofollow"">https://server/svn/solution/trunk/project1/project1.csproj</a> @r150<br>
  <a href=""https://server/svn/solution/trunk/project2/project2.csproj"" rel=""nofollow"">https://server/svn/solution/trunk/project2/project2.csproj</a> @ r160</p>
  
  <p><a href=""https://server/svn/solution/branches/solution.sln"" rel=""nofollow"">https://server/svn/solution/branches/solution.sln</a> @r100<br>
  <a href=""https://server/svn/solution/branches/project1/project1.csproj"" rel=""nofollow"">https://server/svn/solution/branches/project1/project1.csproj</a> @r200<br>
  <a href=""https://server/svn/solution/branches/project2/project2.csproj"" rel=""nofollow"">https://server/svn/solution/branches/project2/project2.csproj</a> @ r350  </p>
</blockquote>

<p>When i clone the repository</p>

<blockquote>
  <p>git svn clone <a href=""https://server/svn/solution"" rel=""nofollow"">https://server/svn/solution</a> --stdlayout</p>
</blockquote>

<p>I get everything</p>

<pre><code>(master)$ git branch -a  
* master  
  remotes/project1  
  remotes/project2  
  remotes/trunk  
</code></pre>

<p>When i want to create a local branch for a remote one</p>

<pre><code>(master)$ git checkout -b local-project1 project1
</code></pre>

<p>all i get when i checkout the branch is project1. The branch does not contain anything from </p>

<blockquote>
  <p><a href=""https://server/svn/solution/branches/solution.sln"" rel=""nofollow"">https://server/svn/solution/branches/solution.sln</a> @r100  </p>
</blockquote>

<p>To solve the problem i tried the following:</p>

<pre><code>(local-project1)$ git checkout master
Switched to branch 'master'.
(master)$ git branch local-project1 -D
Deleted branch local-project1 (was 1111a11).
(master)$ git checkout -b local-project1
Switched to new branch 'local-project1'.
(local-project1)$ pwd
/c/workingcopies/solution
(local-project1)$ cd project1
(local-project1)$ pwd
/c/workingcopies/solution/project1
(local-project1)$ git branch --set-upstream local-project1 remotes/project1
Branch local-project1 set up to track local ref refs/remotes/project1.
(local-project1)$ git svn fetch
(local-project1)$ git reset --hard ae8e9b1a ;# go to last commit of the remote branch
</code></pre>

<p>The fetch gets the last revision from the branch in the repository and the HEAD is set to the last commit but i still only get project1 in the branch, not the solution. Any advice and help is appreciated.</p>
","0","114798","",""
"60597006","1084174","2020-03-09 08:36:21","1","137","<git><version-control><git-branch><cherry-pick><git-cherry-pick>","Why `git log --reverse --left-only --cherry-pick` not working as expected?","<p>I am using this below command to see the list of commit hashes which have not been cherry picked from branch <code>dev</code> to <code>main</code>, since the <code>main</code> branch creation date from <code>dev</code> branch,</p>

<pre><code>git log --reverse --left-only --cherry-pick --oneline dev...main --since 24-oct-2019 --pretty='format:%H    %ae'
</code></pre>

<p>Output is like,</p>

<pre><code>6c4176c3e621ef9b83ccb4ff7635f0bd9ecd8d5c    a@xyx.com
91af2d1165d5b561af68824df37b07a520c5eb2f    b@xyx.com
a19a8eca5c5fe388a9ae9ce67f5f3592b9662012    a@xyx.com
...
</code></pre>

<p>However, I am seeing that some of the CLs are showing in the list which already have been cherry-picked. </p>

<p><strong>Why are they showing in the list?</strong></p>
","7","1084174","",""
"23301107","97893","2014-04-25 19:06:32","8","6282","<git><git-branch><gitignore>","How can i include only specific folders in git using .gitignore?","<p>So i would like ignore everything except a file and a specific folder:</p>

<pre><code>rben@ubuntu:~/sites$ ls
development-box  puppet  sites  Vagrantfile  www-cms  www-common  www-mmfa
rben@ubuntu:~/sites$ cat .gitignore
*
!Vagrantfile
!puppet/
rben@ubuntu:~/sites$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#       Vagrantfile
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>I am expecting to see puppet in the list of untracked files. How can i include only the directory  puppet?</p>
","3","97893","0","0"
"60754242","1197096","2020-03-19 09:28:03","4","671","<git><visual-studio><visual-studio-2017><git-branch><branching-and-merging>","Error while creating git branch - Offset and length were out of bounds for the array","<p>I am trying to create git branch from master using Visual Studio 2017. </p>

<p>Getting below error:</p>

<p>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</p>

<p>Already tried solution as suggested in <a href=""https://developercommunity.visualstudio.com/content/problem/347771/git-create-branch-from-tag-error.html"" rel=""nofollow noreferrer"">git - Create Branch From Tag Error</a> to close all VS/Team Explorer instances, and clean cache folder C:\Users\username\AppData\Local\Microsoft\Team Foundation\x.0\Cache. Then try again.</p>

<p>No luck with the suggested solution, looking for help/guidance to resolve </p>

<p><a href=""https://i.stack.imgur.com/hYTpu.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/hYTpu.png"" alt=""Offset and length error""></a></p>
","1","1197096","",""
"60754571","12655717","2020-03-19 09:49:26","1","2581","<git><git-branch><git-checkout>","Why does git switch/checkout not switch branch?","<p>I have two local branches, <code>master</code> and <code>test</code>. I want to switch from <code>master</code> to <code>test</code>.</p>

<p>If I use <code>git checkout test</code>, the console says</p>

<blockquote>
  <p>Your branch is up to date with 'origin/master'</p>
</blockquote>

<p>and I'm still in <code>master</code> branch.</p>

<p>If I use <code>git switch test</code>, the console says</p>

<blockquote>
  <p>fatal: missing branch or commit argument`</p>
</blockquote>

<p>and again, I'm still in <code>master</code> branch.</p>

<p>What's going on here?     </p>

<p><strong>This is what I did:</strong></p>

<ul>
<li><code>git checkout -b 'test'</code> → created and switched to <code>test</code>.</li>
<li><code>git checkout master</code> → switched to <code>master</code>.</li>
<li><code>git checkout test</code> and <code>git switch test</code> → I want to switch back to <code>test</code>, but this doesn't work.</li>
</ul>
","11","12655717","",""
"5390191","663957","2011-03-22 11:05:17","5","1628","<svn><git><git-svn><git-branch>","git-svn and local branches","<p>I usually using git for versioning, but right now I am stuck with sources in a svn repository, so I am using git-svn to access that repository. However this seems to lead to some trouble, when I try to use local branches.</p>

<p>I usually only commit my local repositories about once a day, so I might have commits in my local master, that I have not yet send upstream. When I create a branch at this point, and then someone else commits to the upstream repository, all commits between the current one and the last one that was synced upstream get duplicated.</p>

<p>To make this clearer here a short picture:</p>

<pre><code>A-B-C-D-E  
     \  
      \-F
</code></pre>

<p>The upstream repository is at A and the two branches are at E and F respectively. Doing a git svn rebase leads to:</p>

<pre><code>A-G-H-B-C-D-E
 \
  \-B-C-F
</code></pre>

<p>Where G and H are the commits that were taken from the upstream repo. I already tried to get the two commits to the other branch as well by switching there and doing another git svn rebase. But this leaves me there:</p>

<pre><code>A-G-H-B-C-D-E
 \
  \-G-H-B-C-F
</code></pre>

<p>So this leads to even more duplication of commits. Is there a clean way to handle this situation?</p>
","0","663957","0","0"
"23486701","687021","2014-05-06 05:38:54","2","840","<git><github><git-branch><pull-request>","github Diff Truncated error","<p>While making pull request in github and  reviewing changes we got Diff Truncated error as shown below</p>

<p><img src=""https://i.stack.imgur.com/9CMtr.jpg"" alt=""diff truncated error""></p>

<p>Can anyone help to fix this issue</p>
","2","687021","0","0"
"5396381","248368","2011-03-22 18:56:20","23","6324","<git><version-control><git-branch>","getting git branches of a certain age","<p>My organization is using git branching extensively. As a result, we have produced over 2000 branches in the past year. We are now trying to adopt a strategy for cleaning up all the old branches that are of some given age. I know how to delete branches, but I can't find a straightforward way to list all of the branches with heads of a given age. The plan is to set up a cron that periodically deletes all branches of a given age, except those that are on some list. </p>

<p>Has anyone tried anything like this before?</p>
","2","248368","0","0"
"23494208","487598","2014-05-06 12:03:35","3","139","<git><git-branch><git-log>","How to git-log all branches that contain a specific commit","<p><code>git log</code> accepts multiple branch names as parameters, and using <code>--graph</code> you get a nice tree-view of it. With <code>--all</code> I see the complete tree, with <code>--branches</code> I can even filter branch names.</p>

<p>I want to show the complete history of all (sub)branches of a specific branch. To that end, I want to know <strong>how can I <code>git log</code> all branches that contain some commit?</strong></p>

<p><em>With <code>git branch --contains</code>, I can find all branches that contain a specific commit. So with some bash-wizardry, I could probably make up a command that does what I want. But I'm guessing that git should have a more direct way to get such a log.</em></p>
","1","487598","0","0"
"60967501","10581944","2020-04-01 09:20:34","0","490","<git><gitlab><git-branch>","How can I duplicate a master branch as a develop branch and push it to gitlab without changes","<p>I just created a new repo in gitlab and I have a master brach and a feature branch (changes in the feature branch have already merged to master), I wanted to create a dev branch and push it to gitlab and make sure it looks exactly the same as my master branch, so I checkout from master branch and name it 'dev', but I can't really commit anything because there's no change in this dev branch, so I tried to push it directly, but it shows this (doesn't seem right):
<a href=""https://i.stack.imgur.com/x8sZV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/x8sZV.png"" alt=""enter image description here""></a></p>

<p>I'm new to git, just wondering what is the best way to create this 'dev' branch?</p>
","0","10581944","",""
"42739563","4338331","2017-03-11 19:24:10","1","2860","<git><github><git-branch><git-push>","Do I have to manually merge a branch with master after pushing the branch to github?","<p>I am asking this question because I am slightly confused (only slightly).</p>

<p>As I am using <code>Pycharm</code> <strong>(on a branch other than master)</strong> it offers me the chance to commit and push changes of a branch to github.  </p>

<p><strong>so I do just that.</strong></p>

<p>Now...</p>

<p><strong>After</strong>, I run this:</p>

<pre><code>current branch *test

1.git pull origin master
2.git checkout master
3.git merge test
</code></pre>

<p>on <code>1.</code> it tells me all is up to date. then going on to <code>3.</code> it also tells me all up to date with <code>master</code>. </p>

<p>Questions:</p>

<ol>
<li>What happens when I commit-push a branch to github?</li>
<li>Do I have to run the code block above after I push that branch to master?</li>
</ol>

<p><strong>EDIT</strong></p>

<ol>
<li>I start of on the <code>master branch</code></li>
<li>I run <code>git checkout test</code>.</li>
</ol>

<p>a message appears.</p>

<pre><code>switched to branch test. your branch is ahead of origin/test by 3 commits.
(use ""git push"" to publish your local commits)
</code></pre>

<ol start=""3"">
<li>I run the command <code>git pull origin master</code></li>
</ol>

<p><strong>a message appears with many lines showing the branch being updated.</strong></p>

<ol start=""4"">
<li><p>I re-run the command <code>git pull origin master</code></p>

<p>a message appears from <a href=""http://github.com/username/project"" rel=""nofollow noreferrer"">http://github.com/username/project</a></p>

<ul>
<li>branch     master -> FETCH_HEAD
Already up-to-date</li>
</ul></li>
<li><p>I press the green button to commit changes and push. a pop-up appears <code>nothing to commit</code></p></li>
<li><p>I run the command <code>git checkout master</code></p></li>
</ol>

<p><strong>your branch is already up to date with origin/master</strong></p>

<ol start=""7"">
<li><p>I run the command <code>git merge test</code></p>

<p><strong>ALL UP-TO-DATE !!!</strong></p></li>
</ol>

<p>so why <code>git merge test</code>?</p>
","0","4338331","",""
"23728769","3282164","2014-05-19 02:02:29","3","3117","<git><git-branch><git-revert><git-add><git-reflog>","How to recover files added to git but overwritten by checkout","<p>Need some help!</p>

<ol>
<li>I added a few files using ""git add ""</li>
<li>I wanted to checkout the other files and accidentally ran ""git checkout -f""</li>
</ol>

<p>I do know its possible to get these changes back using reflog etc, but I don't know how! I know it's possible to get a diff. I really need those changes. </p>

<p>Any ideas??</p>
","7","3282164","0","0"
"5613235","701030","2011-04-10 16:52:08","20","15897","<git><version-control><git-branch>","git remove files from only one branch","<p>when I delete files from one branch it deletes from all branches. what can I do?</p>
","1","701030","0","0"
"61350757","6413614","2020-04-21 18:40:02","0","47","<git><git-merge><git-branch><git-rebase><git-history>","Can I make a git commit below existing commits without keeping any of its content in the next commit? (just to have the code in history)","<p>I used to work on a project with my team and we used svn for version control before we moved to git and now the svn history is long gone. I have the original sources we started working with and I want it to show up in git history so I can see the changes we made from git or the IDE. </p>

<p>To be able to do this I have to be able to put the original sources below the existing commits without keeping anything of it.</p>

<p>How the history looks like now:</p>

<ol>
<li>add README</li>
<li>add new sources</li>
<li>change 1</li>
<li>change 2</li>
<li>...</li>
</ol>

<p>How I want it to look like:</p>

<ol>
<li>add README</li>
<li>add old sources</li>
<li>add new sources</li>
<li>change 1</li>
<li>change 2</li>
<li>...</li>
</ol>

<p>We also removed or renamed many files and I don't want them to belong to the current state of the repository.
The best I could do is checking out the readme commit on a new branch, placing the old sources on top of it, and then merging the master into the branch using the theirs strategy to overwrite the files. 
I could see the old sources as the second commit and then a merge commit on top of the last change. It kept the removed or renamed files and didn't show history for the existing ones.</p>

<p>Is this even possible to do without having to rebuild the entire repo? </p>
","0","6413614","",""
"61368333","634874","2020-04-22 15:01:29","1","107","<git><git-branch><git-subtree>","Recommendation on how to use git subtrees/branches to exclude directories when publishing new versions","<p>I'm developing a C++ library that multiple customers will consume via git subtree.  The directory structure of my repo looks like this:</p>

<pre><code>foo/
├── extra
├── Makefile
├── src
└── tests
</code></pre>

<p>The customers will only be interested in consuming what's in the ""src"" directory, so I'd like for them to be able to subtree the Makefile as well as the ""src"" directory and exclude everything else.  I have a few ideas but I'm not sure if they're practical.  Here's my list so far:</p>

<ol>
<li><p>Maintain a customer branch where I would manually delete the unwanted files and directories every time I merge from master.</p></li>
<li><p>Have customers use git <a href=""https://github.com/newren/git-filter-repo"" rel=""nofollow noreferrer"">filter-repo</a> to delete the unwanted directories after a subtree add/pull</p></li>
<li><p>Split my repo into ""foo-testing"" and ""foo"" where foo would only have the customer visible files ""foo-testing"" would have the rest.</p></li>
</ol>

<p>Option 1 seems like the most straightforward but I'm worried that it may turn into a big headache.  Option 2 could work but it requires users to run commands post-subtree.  Finally, option 3 seems like it makes the most sense but it requires maintenance of 2 repos.  Has anyone here had similar requirements?  Any recommendations on the best way to deal with this that won't turn into a maintenance headache down the road?</p>
","2","634874","",""
"42824307","4068257","2017-03-16 02:35:23","0","1104","<git><git-branch>","How to view status of code at any given git commit on a branch?","<p>I have a master branch where I have several month of commits relating to a web project.</p>

<p>I sometimes need to see what the site looks like via a browser at given points in the past.</p>

<p>I currently checkout master branch, select the point in time and create a branch. I can then see the site in a browser at that point in time.</p>

<p>Is that how I should be doing it or is there a more simpler way of doing this?</p>
","0","4068257","",""
"61425400","9819289","2020-04-25 12:10:37","1","1047","<git><gitlab><git-branch><git-bash>","New branch from gitlab won't appear in git bash","<p>I created a new branch using Gitlab GUI. I opened up my git bash and ran git branch, but the newly created branch won't appear there. How do I push my latest commit to the newly created branch now?</p>
","0","9819289","",""
"24154241","487940","2014-06-11 03:36:47","1","73","<git><github><git-branch><git-merge><git-submodules>","git submodule conflicted pushed","<p>I have a really weird, bad scenario here.  Disclaimer, I'm new to git, and I've kind of screwed up.</p>

<p>SO I have lots of submodules in my fork, based on monodevelop.</p>

<p><strong>First</strong>: I couldn't even update my submodules using 
<code>git submodule update --init --recursive</code>.<br>
I tried bunch of similar commands, with rebase, foreach, etc.  So I finally got the latest using   <code>git submodule foreach git pull origin master</code>.  After this I got all my files.  I then committed and pushed my changes</p>

<p><strong>Now</strong>: I just noticed that all my submodules have conflicts.  &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, etc.  I have no idea where these came from, and I don't know how to fix these.</p>

<p>git status says everything is up-to-date.  submodule update says everything is up to date, even with force.  git fetch says everything is up-to-date.</p>
","0","487940","0","0"
"24154380","1495015","2014-06-11 03:55:06","2","373","<git><git-branch>","How to delete local and remote branch using git","<p>So right now these are the branches I have:</p>

<pre><code>WalnutiQ&gt; git branch -a
* develop
  feature-model_in_javascript
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/feature-model_in_javascript
  remotes/origin/master
</code></pre>

<p>My goal is to delete the branch feature-model_in_javascript so I tried:</p>

<pre><code>WalnutiQ&gt; git branch -d feature-model_in_javascript
Deleted branch feature-model_in_javascript (was 4604f04).
</code></pre>

<p>So now when I check my branchs I get:</p>

<pre><code>WalnutiQ&gt; git branch -a 
* develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/feature-model_in_javascript # &lt;== HOW DO I DELETE THIS????
  remotes/origin/master
</code></pre>

<p>How do I delete that remote branch? I manually deleted it by clicking the delete button on <a href=""https://github.com/WalnutiQ/WalnutiQ/branches"" rel=""nofollow"">https://github.com/WalnutiQ/WalnutiQ/branches</a></p>
","0","1495015","",""
"5741490","240443","2011-04-21 08:28:22","2","1778","<git><git-branch><git-clone>","What is the command equivalent to git clone -b on old Git versions?","<p>A friend is stuck with an old version of Git (I think he said 1.5?), where he says the <code>-b &lt;branch&gt;</code> option is not supported. I can't wrap my head around it, so I really hope someone could help:</p>

<p>What would be the equivalent of the following command, without using <code>-b</code>?</p>

<pre><code>git clone -b $BRANCH $REPO
</code></pre>

<p>EDIT: I originally asked for <code>git checkout</code> - that's not what I meant. Sorry!</p>
","0","240443","",""
"61475666","3088045","2020-04-28 08:18:52","1","268","<git><git-branch><git-commit><git-detached-head><git-dangling>","How to git-commit from a branch to a detached HEAD?","<p>My <em>ref</em> <code>HEAD</code> points the branch <code>foo</code>, that points to the commit <code>123abc</code>; and I have some staged work.</p>

<p>How to <code>git commit</code> that work, moving the <code>HEAD</code> to the newly created commit, but <strong>without advancing the branch</strong>?</p>

<p>(hence: leaving <code>foo</code> point to <code>123abc</code>)</p>

<p>Is it possible to do it with a single <code>git</code> command?</p>
","6","3088045","",""
"5748930","350761","2011-04-21 19:35:41","2","319","<git><git-branch><git-rebase><git-merge><cherry-pick>","Merging changes from a branch based off a topic branch to a different topic branch in git","<p>My team is working on a shared topic branch in git which I will call ""topic1."" I was working on a refactor of some code on a branch made off of topic1, which I will call ""refactor."" I have been periodically merging topic1 into refactor so I can stay up to date with changes, but have not merged refactor back into topic1 because the refactor is still in progress.</p>

<p>There is another topic branch, which I'll call ""topic2"" which was recently created off of master. What I'd like to do is merge <em>only</em> the changes that I've made on ""refactor"" to a new branch made off of topic2, which I'll call ""topic2_refactor."" (I.E. the changes in the commits accessible only by refactor but not by topic1.)</p>

<p>I know how to see these just these changes:</p>

<pre><code>git log origin/refactor --not origin/topic1
</code></pre>

<p>So what I'd like to do is something like this - but this syntax is not correct:</p>

<pre><code>git checkout topic2
git checkout -b topic2_refactor
</code></pre>

<p>And then this:</p>

<pre><code>git merge origin/refactor --not origin/topic1
</code></pre>

<p>Or this:</p>

<pre><code> git cherry-pick origin/refactor --not origin/topic1
</code></pre>

<p>(The above seems to be causing merge conflicts that aren't neccessary, due to some changes which occured on master that was later merged back into the refactor branch.)</p>

<p>I was hoping that there is a clean way to do this and avoid unnecessary merge conflicts that were resolved later on in the history of the ""refactor"" branch. Might this be possible using git rebase, git filter-branch, etc?</p>
","0","350761","",""
"5760033","187018","2011-04-22 21:05:37","3","315","<issue-tracking><git-branch><git-workflow>","Release numbering in a git workflow","<p>I've come across the following excellent blogpost on a git workflow model that works with release, develop, feature and bugfix branches: <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow"">http://nvie.com/posts/a-successful-git-branching-model/</a> </p>

<p>It sounds like an excellent workflow and I am really eager to try it in production but one paragraph caught my attention and leaves me wondering.</p>

<blockquote>
  <p>It is exactly at the start of a release branch that the upcoming release gets assigned a version number—not any earlier. Up until that moment, the develop branch reflected changes for the “next release”, but it is unclear whether that “next release” will eventually become 0.3 or 1.0, until the release branch is started. That decision is made on the start of the release branch and is carried out by the project’s rules on version number bumping.</p>
</blockquote>

<p>I'm wondering, how does this way of working reflect in your ticketing and bugtracking system? In JIRA and BugZilla we create ""versions"" that a ticket can belong to. Prior to switching to a release branch, what version does a ticket belong to when in the development branch? Do you have a version in your issuetracker for every branch? </p>

<p>And what about feature tickets that you know you are going to implement not in the upcoming release but in the release thereafter? Am I supposed to create a version ""upcoming"" and ""future"" for this kind of tickets?</p>

<p>Any insight in how this branching workflow reflects in ticket/issue management is appreciated!</p>
","0","187018","",""
"43028428","74480","2017-03-26 12:00:47","0","563","<git><branch><git-branch>","Committing to git and local folder structure","<p>I have a project written in Laravel 4. Everything goes to ""master"" branch in Bitbucket. I'm migrating my app to Laravel 5 and I'd like to keep both versions in my git repo as separate branches.<br>
My local folder structure looks like this:</p>

<pre><code>Project - this is my main git repo folder
    ˪name - Laravel 4 code is here, all in git already, on ""master"" branch
    ˪name5 - Laravel 5 code is here, not in git yet. Should go to a separate branch
</code></pre>

<p>How do I go about achieving that?</p>
","0","74480","",""
"5977348","267491","2011-05-12 11:37:17","6","1209","<git><git-branch><repository-design>","""Layering"" git repository","<p>I'm using git on a daily basis for a while now, and this time I've run into a problem which I could describe like this.</p>

<p>I have a repository which holds entire website structure, and web root is in the root of the repository. Everything was fine until that was repository for a single site. However, that same repo is now used for several sites - basically the same site, in different languages, minor template tweaks, different graphics, etc. Those things are naturally versioned.</p>

<p>There is a master branch, which holds original source code of the site, and I'd like to have master (or some other branch) to hold code that is universal across all sites, as there will eventually be changes that are too site-specific to include in universal part of the repo.</p>

<p>Next, there is a branch for every single site which uses this source code. All those branches (say, <em>site1</em>, <em>site2</em>, and <em>site3</em>) are created from master branch, and each site clones correct branch.</p>

<p>Well, it seemed like a good idea, until I started making changes everywhere.</p>

<p>If I made a change on site1 branch, and I needed to copy that change to site2 branch, I would cherry-pick commit from one branch to another. Merging is out of the question there, as there are other changes on site1 branch which do not belong with site2 branch. Is there some other, more elegant solution for this kind of situation, or is that cherry-picking is exactly for this purpose?</p>

<p>Now, the real ""problem"" for me is when I change master, and then I want to copy all those changes to all branches. Naturally, considering the fact that all branches are descendants of master, and that I <strong>do</strong> want those changes in all site* branches, I switch to each branch and merge master.</p>

<p>This creates a pretty nasty-looking history for all branches. Each round of merges complicates graph considerably, which leads me to two conclusions:</p>

<ol>
<li>this way of <em>layering</em> branches can work as long as I watch my step and not do anything stupid, and not trying to get any sense out of all-branches history graph. Or..</li>
<li>there has to be some better, more appropriate way to do it.</li>
</ol>

<p>To illustrate my ""problem"", I'll give an image of graph that I got after creating those branches, adding few branch-specific commits, cherry-picking few of them, adding and merging one commit from master to all branches, commit or two to specific branches, and then one more master-to-all merge.</p>

<p><img src=""https://i.stack.imgur.com/s4Nw1.png"" alt=""sort of not-so-simple history graph""></p>

<p>I don't know, I like simplicity, and maybe I'm not used to seeing hard-to-follow graphs like this one (which will only grow in complexity with every following merge, I'm afraid).</p>

<p>I guess I could do cherry-picking all the way, and have neat history graph, but that doesn't sound right either, since I might do several commits in a row, and then forget to pick one of them to all other branches...</p>

<p>So... Any ideas, experiences, suggestions that you wouldn't mind to share?</p>

<p><strong>UPDATE:</strong> I choose a solution described in my comment on accepted answer. Thanks to everyone who contributed!</p>

<p><strong>UPDATE 2:</strong> Even though it's not tightly related to this question, <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""nofollow noreferrer"">recently I stumbled upon this model of branching</a> that appears to be suitable for pretty much any organized development cycle, with GIT as underlying DVCS. It's a really good read. Recommended.</p>
","2","267491","0","0"
"5984428","117544","2011-05-12 21:01:38","19","9353","<git><git-branch><git-filter-branch>","How to delete the old history after running git filter-branch?","<p>Suppose I have such tree:</p>

<pre><code>... -- a -- b -- c -- d -- ...
             \
              e -- a -- k
</code></pre>

<p>and I want it become just </p>

<pre><code>... -- a -- b -- c -- d -- ...
</code></pre>

<p>I know how to attach branch name to ""e"". I know that what I'm going to do will change history, and this is bad. Also I guess I need to use something like rebase or filter-branch. But how exactly - I'm lost.</p>

<p>Ok. Situation is following: I have rather big tree now (like this)</p>

<pre><code>                 s -- p -- r   
                /
a -- b -- c -- d -- e --- g -- w
           \               \
            t -- p -- l     y -- k
</code></pre>

<p>but in my one of first commits (like to ""b"" for ex.) I added binary files, which makes whole repo very heavy. So I decided to take them away. I did it with filter-branch. And Now I have 2 long branches of commits identical to each other starting from second commit.</p>

<pre><code>                 s -- p -- r   
                /
a -- b -- c -- d -- e --- g -- w
      \    \               \
       \    t -- p -- l     y -- k
        \
         \             s'-- p'-- r'  
          \           /
           b'-- c'-- d'-- e'--- g'-- w'
                 \               \
                  t'-- p'-- l'    y'-- k'
</code></pre>

<p>where b' is commit without binary file in it. So I can't do merge. I don't want this whole tree to be in history duplicated so.</p>
","2","117544","0","0"
"24369322","3174320","2014-06-23 15:08:48","0","75","<git><git-branch><git-cherry-pick>","How to partly merge branches in git","<p>I have two branches in my project:</p>

<pre><code>master  |    develop 
------  |    -------
abcd    |    bcda7
        |    bcda6
        |    bcda5
        |    bcda4
        |    bcda3
        |    bcda2
        |    bcda1
</code></pre>

<p>How can I partly merge the branches?
Let's say merge commits <code>bcda2 - bcda4</code> to master (I don't need to merge commit bcda1), then merge commits <code>bcda5-7</code> to master? </p>

<p>I know how to use git-cherry-pick but I don't wanna use it as it creates new commits and there will be a mess in the future merging the branches. I'd like to retain the current commits ids and just partly merge the branches.</p>

<p>I tried to use </p>

<pre><code>git rebase -i 
</code></pre>

<p>I removed lines <code>pick bcda5 - pick bcda7</code> therefore It merged the branches but removed commits <code>bcda5-bcda7</code> completely. </p>

<p>Could you please advise on how to do that correctly?</p>
","3","3174320","",""
"43055435","3784238","2017-03-27 20:01:20","4","2714","<git><branch><git-branch><pruning>","Delete all git branches which have been merged - Fatal: branch name required?","<p>I'm trying to delete all of my merged branches. I've always used </p>

<p><code>git branch --merged | egrep -v ""(^\*|master|dev)"" | xargs git branch -d</code> but for some reason it won't work anymore, even though I've used this command before. It returns the error ""Fatal: branch name required""</p>
","1","3784238","",""
"61929736","8688336","2020-05-21 07:49:18","2","1646","<github><git-branch><pull-request>","Why is github proposing ""compare & pull request"" when I'm the only contributor/maintainer in the repository?","<p>Why is github proposing ""compare &amp; pull request"" (green button) when I'm the only contributor/maintainer in the repository? Like shown in this screenshot:</p>

<p><a href=""https://i.stack.imgur.com/7yscx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7yscx.png"" alt=""&quot;compare &amp; pull request&quot; button""></a></p>

<p>I find it strange that I should ask myself for a pull request. Shouldn't I just be able to merge the branch without asking for a pull request?</p>

<p>Thanks!</p>
","1","8688336","",""
"61929832","12065308","2020-05-21 07:55:36","0","25","<git><git-branch><git-push>","Why do I need to specify the branch name for `git push` if local branches are already configured for pushing accordingly?","<p>By running <code>git remote show origin</code> I can see a list of local branches configured for <code>git push</code>, e.g <code>master</code> pushes to <code>master</code> (up to date) and <code>dev-branch</code> pushes to <code>dev-branch</code> (up to date). Then why do I need to specify the branch name when I push upstream?</p>

<pre><code>git push &lt;remote&gt; &lt;branch&gt;

git push origin master # for example
</code></pre>
","2","12065308","0","0"
"61936264","2443944","2020-05-21 14:00:39","3","4664","<git><git-branch><git-log>","Understanding the git graph","<p>I used the <code>git log --graph --all</code> command to visualise my commit/branch history. However whilst I understand what most of what the graph shows there are some parts of the branch visualisation I am having difficulty interpreting.</p>

<p>The branches that I am having difficulty interpreting are:</p>

<p>a) Commit <code>309a287</code> </p>

<p>b) Commit <code>3f7475</code></p>

<p>c) The interpretation of <code>)</code> in e9415f</p>

<p>I am also slightly puzzled by why there seems to be three branches (three vertical parallel lines) as I only ever had a master branch and one additional branch at the same time.</p>

<pre><code>|
| * commit 88531a7dc85d030016296a51c5c433b72c7186c5 (refs/stash)
|/| Merge: c501f9f 631678b
| | Author: 
| | Date:   Wed May 20 17:01:59 2020 +0100
| |
| |     On blackforest: ddd
| |
| * commit 631678b558576418c21496712db524eb86a755ec
|/  Author: 
|   Date:   Wed May 20 17:01:59 2020 +0100
|
|       index on blackforest: c501f9f induced typo
|
* commit c501f9fc6b817541d8cb6a466c77b8d84231afcb (origin/blackforest)
| Author: 
| Date:   Sun May 17 18:53:59 2020 +0100
|
|     induced typo
|
| *   commit e9415f49f953ca4fe53bd9631e4afea94c3ba4ba (HEAD -&gt; master, origin/master
)
| |\  Merge: 9a1ff1f 3f74752
| | | Author: 
| | | Date:   Sun May 17 18:51:40 2020 +0100
| | |
| | |     Merge branch 'master' of
| | |
| | *   commit 3f7475269c1134aef39a06f13ae11d74c9496542
| | |\  Merge: 309a287 3d41b51
| |_|/  Author:
|/| |   Date:   Sun May 17 18:46:19 2020 +0100
| | |
| | |       Merge pull request #1 from 
| | |
| | |       enhanced emoticon
| | |
* | | commit 3d41b51c8157abe38d251e065ad33b3d265d332c
| | | Author: 
| | | Date:   Sun May 17 18:42:00 2020 +0100
| | |
| | |     enhanced emoticon
| | |
| * | commit 9a1ff1fa645e8390ab26f751dbf1b716e15b0df6
| |/  Author: 
| |   Date:   Sun May 17 18:50:09 2020 +0100
| |
| |       capitalised a
| |
| *   commit 309a287f9c39d219d719efbcc872a176f7644b19
| |\  Merge: dafe938 806e855
| |/  Author: 
|/|   Date:   Sun May 17 17:42:46 2020 +0100
| |
| |       Merge branch 'blackforest'
| |
* | commit 806e8558cd7b24658a998b2ee5d19500e608b77d
| | Author: 
| | Date:   Sun May 17 17:06:10 2020 +0100
| |
| |     new common
| |
* | commit a5e386a55389a6435a050be9981ea97011449783
| | Author: 
| | Date:   Sun May 17 17:32:26 2020 +0100
| |
| |     Edited firstfile to reflect new branch name
| |
| * commit dafe938bcfbdfe6eaf62d5f446637e6f5d594015
|/  Author: 
|   Date:   Sun May 17 17:06:10 2020 +0100
|
</code></pre>
","2","2443944","0","0"
"6279082","787656","2011-06-08 13:00:40","48","68982","<git><version-control><git-branch><git-push><git-remote>","git push to remote branch","<p>Folks,</p>

<p>I had cloned a repo. I created a branch out of it to work on a feature by issuing the following command:</p>

<p><code>git branch fix78</code></p>

<p>then I worked on that branch by </p>

<p><code>git checkout fix78</code></p>

<p>I continued to make commits to this local branch. Now I wanted to push this to the repo and hence I issued the following command:</p>

<p><code>git push origin master:fix78</code></p>

<p>I viewed the repo from a web browser and saw that a new branch called fix78 was created on the repo. But it did not have any of my commits that I had made.</p>

<p>What am I doing wrong here? This is what I am trying to achieve:</p>

<p>There is a repo(master(trunk in the SVN lingo)), now when I am working on a feature I want to create a local branch of it and then I also want to check in this branch to the repo(so that other team members can see what I am working on), then I want my local branch to be in sync with this remote branch that I create. </p>

<p>Any help/feedback would be totally awesome.</p>

<p>Thanks. </p>
","0","787656","0","0"
"24600601","776301","2014-07-06 21:47:07","1","202","<git><git-branch><branching-strategy>","Split commits between git branches","<p>This is interesting question (or at least I hope it is). I have been working on feature and have git branch with those changes.</p>

<p>I need to create pull request to master (which I have rebased, I can revert) but my collages are complaining that pull request is too big and should be split on more pull requests.</p>

<p>Essentially I need to split my commits on branch <strong>A</strong> to branches <strong>B, C, D</strong> to have smaller pull requests. Does anybody know good approach to this problem?</p>
","0","776301","",""
"42580586","71376","2017-03-03 13:46:24","2","1170","<git><git-branch><git-merge>","Unknown git branch checked out","<p>I have a branch called <code>ChartFeature</code> but I accidentally typed <code>git checkout CHartFeature</code> and ended up with this in powershell/poshgit:</p>

<pre><code>C:\git\Charting [CHartFeature]&gt; git status
On branch CHartFeature
nothing to commit, working tree clean
</code></pre>

<p>What happened here? If I look in SourceTree it does not show the branch, but I can (and got myself into trouble) when I committed files to this branch which I never created. (I never typed <code>git checkout -b CHartFeature</code> but I did need to merge it into <code>ChartFeature</code>.)</p>

<p>If I list the local branches this erroneous branch does not exist:</p>

<pre><code>C:\git\Charting [CHartFeature]&gt; git branch
  ChartFeature
  develop
  master
</code></pre>

<p>What is git doing when I type <code>git checkout CHartFeature</code> without having created that branch? What happened to the commits I made there?</p>

<p>What's more, is it safe to type <code>git branch -d CHartFeature</code>? What would happen if I did?</p>
","11","71376","",""
"23583042","3623570","2014-05-10 15:42:15","-1","112","<java><eclipse><git><git-branch>","Eclipse git commits in other branch disappeared","<p>I coded some features in a separate branch of my project, and today I wanted to commit and push them to my repository.
I made some commits, and after that, I tried to push them, and Eclipse told me, there were no things to push. I was very irritated, because everything worked every time in the master branch. And now, that I first time wanted to do this in an other branch, it does not work.
After that I switched to the master branch, there was also nothing to commit and to push, so I wanted to switch back to my dev branch and there the complete code, coded in this branch, disappeared, it looked like the master branch.</p>

<p>My question is now, how to get back my code and optionally how to push it in my branch.
Thanks in advance!</p>
","0","3623570","",""
"60852089","9679725","2020-03-25 15:34:31","6","575","<git><format><git-branch>","How to align columns in git to improve formatting?","<p>I wanted to improve the formatting of my ""git branch"" command, where I added logic to include the <strong>commit date</strong> and <strong>commit user</strong>.</p>

<blockquote>
  <p>git for-each-ref refs/heads/ --format='%(HEAD) %(color:bold yellow)%(refname:short)%(color:reset) %(color:green)%(committerdate)%(color:reset) - %(contents:subject) %(color:dim white) - %(authorname)%(color:reset)'</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/bAfCh.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bAfCh.png"" alt=""enter image description here""></a></p>

<p>Is there anyway of improving the formatting from the first (actual) output, into the second (desired) output? </p>

<p>This is not an urgent thing at all, but a nice to have. I've played with the git format, but my knowledge is limited.</p>
","0","9679725","",""
"60892715","3304329","2020-03-27 19:13:46","0","257","<git><git-branch><branching-and-merging>","It´s possible to have git locally branches with different config files?","<p>I´m wondering if It´s possible to have in my local repo a master branch with a config file using a production DB credentials, and a develop branch with a config file with different credentials and DB.</p>

<p>I have been searching with no luck, the closest answer I found was to use git attributes, but it only works preserving the config files in case of conflict when a merge happens. I want to keep unmodified config files on every branch all the time. does anybody know how can I achieve this?. Or any advice about how can I manage these files?</p>
","1","3304329","",""
"23643458","996035","2014-05-13 23:53:18","0","50","<git><git-branch>","Bring back and previous commit in git with out re-writing history","<p>Suppose I'm working on a branch 'devel' and I want to bring back the state of 'devel' from a few commits back with out overwriting the commits inbetween. Can anyone help me out with a relatively simple way of doing this?</p>
","0","996035","",""
"23645767","1004027","2014-05-14 04:42:32","1","170","<git><git-branch>","Why does git branch -v produce different output for -a --no-merged options","<p>I took a quick look at local and remote unmerged branches in an untidy repo.  The output was like so:</p>

<pre><code>$ git branch -a --no-merged
  staging
  userupdate
  remotes/origin/emailsetup
  remotes/origin/feature/AFPSH-187
  remotes/origin/hashpassword
  remotes/origin/mergemailer
  remotes/origin/userupdate
</code></pre>

<p>Then I checked the verbose output, and I was surprised to see a different, longer set of results.</p>

<pre><code>$ git branch -av --no-merged
  staging                          21026a6 [behind 0] updated staging server
  userupdate                       7363a5c file name fixing
  remotes/origin/emailsetup        b6d4094 Merge branch 'dev' into emailsetup
  remotes/origin/feature/AFPSH-187 47e6bdd Merge branch 'plannercontent' into fe
  remotes/origin/hashpassword      7b24f6b AFPSH-51 - Remove set password 
  remotes/origin/master            0f9f7ed all starting files
  remotes/origin/mergemailer       c9a8281 AFPSH-218 - Fix Expiration mailer met
  remotes/origin/originalfiles     0f9f7ed all starting files
  remotes/origin/staging           5112f1b latest deployment
  remotes/origin/userupdate        299e722 further merge fixing
</code></pre>

<p>Further info:</p>

<ul>
<li>All the extra branches that appear in the verbose output also appear in the lists for <code>git branch -a --merged</code>.  </li>
<li>The list for <code>git branch -av --merged</code> is also longer than the list for <code>git branch -a --merged</code>, but this appears to only include branches with identical heads</li>
<li><code>git branch -av --merged</code> does not include any results from <code>git branch -a --unmerged</code></li>
<li><code>git branch -av --merged</code> does include some results from the additional branches in <code>git branch -av --unmerged</code>, and those commits have the same hashes and messages in both lists</li>
<li><code>git --version</code> yields <code>1.8.3.msysgit.0</code></li>
</ul>

<hr>

<p>What is the reason for these differences?</p>
","3","1004027","0","0"
"60902674","","2020-03-28 15:24:40","3","99","<git><gitlab><git-branch><branching-and-merging><git-flow>","how does branching works , using the gitflow workflow?","<p>I am working on a project and we are using gitflow workflow. Basically I am just new to gitflow workflow , I have just a question.</p>

<p>There were two branches from the repository which is the master and the development branch . I checked out the development remote branch since This branch will contain the complete history of the project.</p>

<p>Now I wanted to get the updates from the team the latest one ,should I pull it from the master branch ? or in the development branch ?</p>

<p>Another thing if i push my changes , should i push my changes on origin/master ? or origin development ?</p>

<p>By the way all of us developers checked out the development branch remotely. using the command
git checkout -b development origin/development</p>

<p>Bear with me just new to git workflow. Thank you.</p>
","0","","0","0"
"61099310","9897187","2020-04-08 11:11:03","0","335","<git><jenkins><git-branch><jenkins-git-plugin>","Unable to do git push from jenkins when creating a new branch","<p>I am creating a new git branch from Jenkins (execute shell) using the below commands but when I run this job , it creates the branch locally but doesn't push it to the origin. Also this Jenkins job just stuck at the git-push command and never completes. I think I am missing something somewhere due to which it is not able to push.</p>

<p><strong>git fetch origin old-branch:new-branch
git checkout new-branch
git push -u origin new-branch</strong></p>

<p>Did I missed anything ?
Any suggestions ?</p>
","0","9897187","",""
"61111798","12352707","2020-04-08 23:47:13","0","554","<git><git-merge><git-branch>","What are you supposed to do with no longer needed git branches?","<p>I am working on a project with my team, we use <code>master</code> as our stable branch, and <code>dev</code> for new features that have been implemented but are being tested before we merge the changes into <code>master</code>. I created a branch from <code>dev</code> called <code>new-feature-1</code>, and made several commits on this branch, making sure to push these changes to our remote along the way. I have now completed my work on <code>new-feature-1</code> and I merge it with to <code>dev</code>, it gets accepted and merged with <code>master</code>. The feature has been implemented and I no longer have need for <code>new-feature-1</code> as a branch, but it's on both my local machine, and more importantly the remote.</p>

<p>What is usually done in a scenario like this? Do I delete <code>new-feature-1</code> and force push the deletion to remote? Or is it standard practice to leave it there? What do most people/companies do in this scenario?</p>
","1","12352707","",""
"61125731","10515716","2020-04-09 16:23:49","1","361","<git><git-branch><git-flow>","Where is the best branch where install new package on git?","<p>I'm start using on a self-project git-flow, but I have got a doubt to do a good practise on it when I have two principal branch like  <strong><code>master</code></strong> and <strong><code>develop</code></strong>.</p>

<p><strong>Is it more correct to install the package on a new branch called e.g <em><code>FEATURE install react-redux</code></em>?</strong></p>

<p>Thanks in advance!</p>
","0","10515716","",""
"61128612","13272231","2020-04-09 19:15:57","0","1887","<git><git-branch><git-bash><tortoisegit><git-clone>","Cloning a single branch from a git repo","<p>I've tried several time to clone a single branch from a git repo provided by my Org. 
I tried with git bash , tortoise but every time when i try to clone a single branch it started cloning the whole repo. Is there any particular solution for that?</p>
","0","13272231","",""
"5639544","259811","2011-04-12 17:56:20","3","551","<git><version-control><git-branch>","How can I better handle commits polluting a ""closed"" branch in git?","<p>We're new to git at my company, coming to git from Subversion, and over the weekend we ran in to a situation with a branch in our repository where commits were made to the public version of a branch that we didn't want there. We had:</p>

<pre><code>A -&gt; B
</code></pre>

<p>And then got the bad commits to put the branch at:</p>

<pre><code>A -&gt; B -&gt; C -&gt; D
</code></pre>

<p>C and D should never have been on that branch. The trouble is this branch was ""closed"" -- this was a released version of our software and there shouldn't have been any new commits to this branch.</p>

<p>In Subversion the only way out of this sort of situation was to commit !D and !C so you end up with:</p>

<pre><code>A -&gt; B -&gt; C -&gt; D -&gt; !D -&gt; !C
</code></pre>

<p>Which gets me back to B but keeps me moving forward on the timeline for the branch so anyone with a remote of the branch who syncs with the master repository would get C and D and then have them undone to end up at a logically similar version of B (but not B -- call it B').</p>

<p>I came across <a href=""https://stackoverflow.com/questions/1463340/revert-multiple-git-commits"">this solution for reverting commits in git</a> which seemed ideal: it would put our public repository back to <code>A -&gt; B</code>. But it meant that any clone of this branch out on anyone's working machine would be very incorrect and everyone would need to re-clone. My fix amounted to:</p>

<pre><code>git checkout thebranch
git reset --hard &lt;&lt;commit # associated with commit B&gt;&gt;
git push --force
</code></pre>

<p>I ended up going the route of the above link and it caused quite the stir that:</p>

<p>a) You can throw away commit history at the public repository with git like this, literally re-writing commit reality;</p>

<p>b) Everyone had to re-clone so they wouldn't risk re-injecting <code>C -&gt; D</code> on to the branch (or the new branch of that branch that we wanted to create).</p>

<p>I think I <em>should</em> have done:</p>

<pre><code>git revert HEAD~2
git commit
git push
</code></pre>

<p>But this would have left the branch as <code>A -&gt; B -&gt; C -&gt; D -&gt; E</code> and it really shouldn't have <code>C -&gt; D -&gt; E</code> on it because it's supposed to be closed.</p>

<p>I've got three questions:</p>

<ol>
<li>How could I have handled the clean up better? Use <code>revert</code> instead of <code>reset</code>? What's the best practice here for branch pollution?</li>
<li>Did the <code>push --force</code> of the reverted branch <em>really</em> destroy the history at the public repository? Or did git roll back to B but keep a record of <code>C -&gt; D</code> and that a revert was done back to B at some point by me? It definitely doesn't show the revert in the commit log, but maybe a record of my action is kept some place else?</li>
<li>How do you handle ""closed"" branches in git such that these changes couldn't have gotten on there in the first place? We did have a tag applied to the repository at commit B and people are supposed to use the branch + tag to get the source for the release, but this is still a scary thing to have changes show up on a branch line that should not have changes on it after commit B. And someone branching from the branch for a patch release could have easily missed the tag and pulled <code>C -&gt; D</code> in to their new branch as well.</li>
</ol>
","2","259811","0","0"
"5653706","702867","2011-04-13 18:18:07","2","592","<git><git-branch>","git merge branch in a zipper like fashion","<p>i have an Git repo with for example two branches ""master"" and ""other"". They contain commits almost to one subfolder each, so there is no collision at revision time in history. Now I like to delete the branch ""other""; and merge it's commits into ""master"" in a zipper-like fashion, eg:</p>

<pre><code>Master A1 A2 -  -  -  M3 M4  
Other  B1 -  -  -  B2 -  -   B3
</code></pre>

<p>becomes</p>

<pre><code>Master A1 B1 A2 B2 M3 M4 B3
</code></pre>

<p>and ""other"" vanishes. So only one linear master branch is left.</p>

<p>Is this possible with Git's toolkit?</p>
","0","702867","0","0"
"24055688","1551177","2014-06-05 08:51:45","4","1032","<git><branch><git-branch><jgit>","Delete branch with jgit not working as expected","<p>I am trying to delete a branch in my repo using jgit.</p>

<pre><code>DeleteBranchCommand command = git.branchDelete();
command.setBranchNames(""myBranch"");
command.setForce(true);
try {
    List&lt;String&gt; deletedBranches = new ArrayList&lt;String&gt;();
deletedBranches = command.call();
System.out.println(deletedBranches.toString());
} catch (GitAPIException e) {
throw new MyInternalErrorException(""Error while deleting branch ["" + branchName + ""]"", e);
}
</code></pre>

<p>The value of <code>deletedBranches</code> will be <code>[myBranch]</code></p>

<p>If I check if the branch is still in the repo:</p>

<pre><code>git.getRepository().getRef(""myBranch"");
</code></pre>

<p>I will get <code>true</code>.
And this is because cf to jgit javadoc:</p>

<p><code>getRef(name)</code></p>

<blockquote>
  <p><strong>name</strong> the name of the ref to lookup. May be a short-hand form, e.g.
  ""master"" which is is automatically expanded to ""refs/heads/master"" if
  ""refs/heads/master"" already exists.</p>
</blockquote>

<p>It is checking for ""refs/heads/myBranch"" instead of ""myBranch"".</p>

<p>Moreover, if I will run the <code>deleteBranch</code> command the second time, the value for <code>deletedBranches</code> will be <code>[refs/heads/myBranch]</code>.</p>

<p>Can someone explain why is this happening and how can I solve this issue?
Thank you.</p>

<p><strong>Update</strong></p>

<p>After debugging inside the jgit code, I've noticed that </p>

<pre><code>String fullName = currentRef.getName();
</code></pre>

<p><a href=""https://github.com/eclipse/jgit/blob/a76a4acf87952249b94f4be29614565541eb8c46/org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java#L133"" rel=""nofollow"">https://github.com/eclipse/jgit/blob/a76a4acf87952249b94f4be29614565541eb8c46/org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java#L133</a></p>

<p>returns ""myBranch"" instead of ""heads/refs/myBranch"" thus it is not executing this piece of code: </p>

<pre><code>                if (fullName.startsWith(Constants.R_HEADS)) {
                    String shortenedName = fullName
                            .substring(Constants.R_HEADS.length());
                    // remove upstream configuration if any
                    final StoredConfig cfg = repo.getConfig();
                    cfg.unsetSection(
                            ConfigConstants.CONFIG_BRANCH_SECTION,
                            shortenedName);
                    cfg.save();
                }
</code></pre>

<p><a href=""https://github.com/eclipse/jgit/blob/a76a4acf87952249b94f4be29614565541eb8c46/org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java#L158-L167"" rel=""nofollow"">https://github.com/eclipse/jgit/blob/a76a4acf87952249b94f4be29614565541eb8c46/org.eclipse.jgit/src/org/eclipse/jgit/api/DeleteBranchCommand.java#L158-L167</a></p>
","0","1551177","0","0"
"5837921","187018","2011-04-29 22:11:35","16","25847","<git><git-branch><git-flow>","git-flow: how to checkout release branch from origin?","<p>What is the perferred workflow to pull a published release branch from the central repo using <a href=""https://github.com/nvie/gitflow"" rel=""noreferrer"">git-flow</a>?</p>

<p>eg:<br>
Mike made a release branch, he published it through ""git flow release publish 1.0""<br>
Jane would like to work on that release branch too, how does she pull it from the central repo to continue working with git flow on that particular branch?</p>

<ul>
<li>create the branch herself locally through <code>git flow release start 1.0</code> and then <code>git pull</code>?</li>
<li>create a tracking branch locally through git with <code>git checkout -b release/1.0 origin/release/1.0</code> and continue from there (does git flow work on the branch this way?)</li>
</ul>
","0","187018","0","0"
"6114457","738584","2011-05-24 17:32:34","0","286","<git><web-applications><git-branch>","What is the convention for switching vhosts to new_feature branch in git?","<p>When using git for version control, I understand it is convention to create a new branch for each new feature. </p>

<p>I develop web applications in php on an apache server, and I don't know how to painlessly handle this development mode.</p>

<p>And here is my question: Is switching the vhost to the current git branch folder you're working on the common practice?</p>

<p><strong>FURTHER EXPLANATION</strong></p>

<p>Scenario:
Git repo is in /var/www/
I have a master branch which is recognized in the browser through vhost as master.localhost and a develop branch that is recognized as develop.localhost in the browser. I'm browsing around develop.localhost and recognize a new feature that needs to be developed. I branch the repository to /add-server-side-validation/. To begin testing/viewing this in the browser, I need to add a new vhost like add-server-side-validation.localhost. What is the elegant/conventional way to do this?</p>
","1","738584","",""
"43155291","1455384","2017-04-01 09:50:03","4","1364","<git><git-branch><git-merge><gitpython>","gitpython - checking if branch is not merged with repo object?","<p>I need to check if branch I'm interested is merged to another branch.</p>

<p>With <code>gitpython</code>, I can use its git command object like:</p>

<pre><code>import git
g = git.Git('/path/to/git/repo')
g.branch(""--no-merged"", ""master"")
Out[273]: u'* new\n  test'
</code></pre>

<p>So it outputs correct branches, but format it returns is kind of not really good. Now I need to parse string and find the branch I'm interested.</p>

<p>I was thinking if the same can be accomplished using:</p>

<pre><code>repo = git.Repo('/path/to/git/repo')
# Check branches using `repo` object as starting point?
</code></pre>

<p>With <code>repo</code> object, there are many useful methods that can retrieve useful information which is already parsed into objects, but I did not find how to do same thing with <code>repo</code> object (if it is possible at all?).</p>
","0","1455384","",""
"6154233","11236","2011-05-27 15:12:54","14","11390","<git><git-branch>","Does branching in git create a parent-child relationship?","<p>If I do</p>

<pre><code>$ git branch a
$ git checkout a
Switched to branch 'a'
$ git branch b
$ git checkout b
Switched to branch 'b'
$ git branch c1
$ git branch c2
</code></pre>

<p>Is there any relationship between these branches, or are there all considered 'flat' because there weren't any commits in them? In SVN, I would model these branches like this:</p>

<pre><code>master
|
+-a
  |
  +-b
    |
    +-c1
    |
    +-c2
</code></pre>

<p>However, when I try to follow <a href=""https://stackoverflow.com/questions/5298972/relationship-between-n-git-branches"">this question</a> and do <code>gitk master a b c1 c2</code>, I get a flat line, not the diagram I put above.</p>
","0","11236","0","0"
"6157541","93311","2011-05-27 20:48:09","1","101","<git><github><git-branch>","Having already made changes to the git, can I commit these changes to a new branch?","<p>If so, what is the command for that?</p>

<p>Thanks so much SO community!</p>
","0","93311","",""
"61851581","9831899","2020-05-17 12:11:28","0","222","<git><github><git-branch><collaboration><git-fetch>","Need a local branch for others code fetch in git","<p>My colleague and I are working on a same project, my friend create repository on his remote server like GitHub, then I forked his repository and I have cloned it into machine local machine. The thing i want to do I need to create a local branch ""devlp_b"" for getting his code, means I want to fetch code from his remote repo to my local branch ""devlp_b"", after that I work on that branch and merge back to my local master branch.</p>

<p><strong>Briefly</strong></p>

<p>Need a local branch <code>devlp_b</code> for manually fetch others repo code, ( I don't want that branch into my remote repository, that only reside in my local machine.</p>
","0","9831899","",""
"24691660","2451238","2014-07-11 06:49:36","0","83","<git><svn><git-svn><git-branch>","dcommit only a certain local (i.e. git) branch with git-svn","<p>I am developing using <code>git</code> but I have to publish via <code>svn</code>.
That's why I've set up <code>git-svn</code> (by <code>git svn clone</code>).</p>

<p>My usual workflow is like this:</p>

<pre class=""lang-sh prettyprint-override""><code>git svn rebase  # get local git repository up-to-date
git add file    # add some code
git commit      # commit code to local git repository
git svn dcommit # push changes from local git repository to public svn repository
</code></pre>

<p>So far this works fine.</p>

<p>However, I would like to create a branch (say <code>secret</code>) in my local <code>git</code> repository that is completely ignored by <code>git-svn</code>.</p>

<p>I guess I have to do something like this:</p>

<pre class=""lang-sh prettyprint-override""><code>git svn rebase      # get local git repository up-to-date
git branch secret   # create secret branch in local git repository
git checkout secret # switch to secret branch in local git repository
git add secret.file # add some secret code
git commit          # commit secret code to secret branch of local git repository
git checkout master # switch back to public branch in local git repository
git svn rebase      # get public branch of local git repository up-to-date
git add public.file # add some public code
git commit          # commit public code to public branch of local git repository
git svn dcommit     # push public changes from local git repository to public svn repository
</code></pre>

<p>Would this workflow keep <code>secret.file</code> completely hidden from <code>svn</code>?
If so, I guess I could just <code>git merge</code> it into <code>master</code> and <code>git svn dcommit</code> it to the <code>svn</code> it once it gets <em>'un-classified'</em>. Is that correct?</p>

<p>Also, would it be possible to rename <code>master</code> to <code>public</code> for clarity?
If so, how? Note that there is already a history for that branch in both repositories.    </p>
","0","2451238","",""
"6404265","787190","2011-06-19 18:19:52","1","80","<android><git><version-control><git-branch>","Branch only 1 or 2 files in git for android project","<p>I have an android application targetted at business customers in different countries.</p>

<p>I need to customize the application slightly for these customers. At the moment I created a customization.xml file (string resource under res/values) that will contain these custom fields.</p>

<p>Currently I havent found a way to make these customer dependent (also note that they need to be in xml files). </p>

<p>Can I branch only the customizations.xml and androidmanifest.xml files in git? These files are pretty small, so i can easily maintain them in different branches. However the other changes to the project should be easily pushed to different branches. How would i go about doing that?</p>

<p>Say we have a:
default : master branch
customer1 : customer1 branch with a different androidmanifest.xml and customizations.xml
customer2 : ....</p>

<p>Thanks for your insights. (I'd prefer git to solve this, but if you know another way, please elaborate).</p>
","0","787190","",""
"24710590","1296313","2014-07-12 07:11:15","1","63","<git><workflow><git-branch>","Parallel development of two versions in git , having some common commits","<p>Usually i am following the workflow as described here: <a href=""http://git-scm.com/book/en/Git-Branching-Branching-Workflows"" rel=""nofollow"">Git branch workflows</a></p>

<p>But in a specific project i have 2 develop branches (v1 and v2). Master is currently v1 stable.</p>

<p>I will use sub branches in developv2 for features that ia am adding.</p>

<p>This is what i have</p>

<pre><code>master (v1 stable)
developv1
developv2
</code></pre>

<p>also:</p>

<pre><code>feat/v1/topic1
feat/v2/topic2
...
</code></pre>

<p>each if the feat are merged accordignly to the developvx branches.</p>

<p>But as v2 is taking time to complete i am correcting bugs in v1 that i want to exist in my current v2 development.</p>

<p>I am a little confused as how to approach this scenario.</p>
","1","1296313","",""
"24745508","3585723","2014-07-14 20:34:46","0","46","<git><git-branch>","Is ""git clone -b name url"" versus ""git clone url --branch name"" are the same?","<p>I would like to know if these two <code>git</code> commands are the exact same?</p>

<pre><code>git clone git://git.yoctoproject.org/poky --branch daisy

git clone -b daisy git://git.yoctoproject.org/poky.git
</code></pre>
","0","3585723","0","0"
"6447393","811267","2011-06-22 22:38:46","3","5572","<git><git-branch><git-bare>","How to create a git clone for viewing only","<p>We're using git as our VCS for a small development team. I keep the main repository on our server as a bare git repository.</p>

<p>Management and people not involved with the project need to be able to see the code and documentation without knowing anything about git, so I also keep a clone on our server for browsing. To keep the clone up-to-date, I have installed a hook that updates the master branch of the clone whenever someone commits to the bare repository.</p>

<p>Here's the problem: some knucklehead always goes into the browsing clone and starts modifying code, which causes the master branch push operation to fail. I would like to figure out a way to either enforce a read-only policy on this one clone or figure out another way to keep it up-to-date.</p>
","0","811267","0","0"
"24939021","1454020","2014-07-24 16:18:33","2","1250","<git><github><version-control><git-branch><git-merge>","How do I transfer a partial history from a git branch to a new repository?","<p>I recently joined a project that has a github repo with a branch that is effectively a fresh start of the entire source tree.  I'd like to copy that one branch, starting from just from just that ""new source tree"" commit, to a new repo, without any remnants of the old source tree lingering in the repo (allowing for the repo to be much smaller).  What are the steps to accomplish this?</p>

<p>Here's the ""new source tree"" commit in question:</p>

<p><strong>WARNING... it's really big.</strong></p>

<p><a href=""https://github.com/ohmage/server/commit/078aecd78d54c6c20e124be3a54979e3a9d81c6f"" rel=""nofollow"">https://github.com/ohmage/server/commit/078aecd78d54c6c20e124be3a54979e3a9d81c6f</a></p>
","0","1454020","0","0"
"6700944","586707","2011-07-14 22:55:32","2","1035","<git><git-push><git-branch><git-tag>","pushed git repository missing branch & tag names on gitk","<p>I just did my first ever <code>git push</code>:</p>

<pre><code>~/sb/ws&gt; git push ~/gitrepo master:master
Counting objects: 1360, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (998/998), done.
Writing objects: 100% (1360/1360), 342.15 KiB | 20 KiB/s, done.
Total 1360 (delta 729), reused 0 (delta 0)
To /home/gitrepo
 * [new branch]      master -&gt; master
</code></pre>

<p>It seems to have gone well, but when fire <code>gitk</code> in the new (bare) gitrepo, I only see the commit comments: The branch &amp; tag names disappeared!</p>

<p>Why?</p>

<p>Is there a way to get them back?</p>
","0","586707","0","0"
"62279051","13320837","2020-06-09 09:15:38","0","33","<git><git-branch>","add file to all branches of git","<p>Iam trying to add file in all branches of git :</p>

<pre><code>cd &lt;git url&gt;
for remote in $(git branch); do
git checkout --track $remote
cp -r /path/of/file . #copy file from local to current directory
git add .
git commit -a -m ""file added""
git push origin -u $remote
done
</code></pre>

<p>how to implement this?</p>
","8","13320837","",""
"24990488","2750910","2014-07-28 07:35:05","-1","791","<git><git-branch><git-commit><git-show>","Search specific git commit by commit message and exlude branches","<p>I am currently working on a program to filter slow db queries that are stored in a database on the command line. </p>

<p>I would like to search all the commits in all the branches except the one specified and return  all the commits that match. </p>

<p>My filter conditions are stored in a database (which is provided for me). </p>

<p>Example: </p>

<p>I have the following entry in the database:</p>

<pre><code>ID key       Query
1  ABCDEF    select * from example
2  0ABCDE    select * from another_example
3  1ABCDE    select * from you_get_the_picture
</code></pre>

<p>I am now interested in the queries that haven't been fixed in the code yet. So I need to search through the branches with the <strong>key</strong> as a search filter. </p>

<p>If the key is found in a commit, skip and look up the next. If no match is found, print it to stdout. All the code works fine but I'm having trouble finding the correct git command. </p>

<p>I have the following: </p>

<pre><code>git grep 'ABCDEF' $(git rev-list ^origin/master) | xargs git show -s --format=%N%s
</code></pre>

<p>Which should return all commits containing ""ABCDEF"" in the commit message in all the branches except origin/master. </p>

<p>However, the git command doesn't return anything which is not possible since I know that these commits are there. </p>

<p>Is my git command not correct? Thanks in advance for any pointers. </p>
","2","2750910","",""
"24993772","974186","2014-07-28 10:58:06","8","3659","<git><git-branch><git-tag>","How to find all refs that contain a commit in their history in git","<p>Lets assume you have the following structure in git</p>

<pre><code>    A &lt;-- refs/heads/somebranch
    |
    B 
    | \
    C  D &lt;-- refs/tags/TAG1
    |  |
    E  F
    |  | \
    G  H  I &lt;-- refs/heads/branch1                
    |
    J &lt;-- refs/heads/master
</code></pre>

<p>Now I want to find all refs that contain commit <code>B</code> in their history. </p>

<p>So it would be nice if I could do</p>

<pre><code>$ git refs --contains B
refs/tags/TAG1
refs/heads/branch1
refs/heads/master
</code></pre>

<p>I took a look at the git decumentation and found <code>git branch -a --contains &lt;commit_id&gt;</code> which lists all branches that contain a <code>commit_id</code>.</p>

<pre><code>$ git branch -a --contains 4af9822
  master
  remotes/origin/someBranch
  ...
</code></pre>

<p>and I found the command <code>git tag --contains 9338f2d</code></p>

<pre><code>$ git tag --contains 9338f2d
  someTag
  anotherTag
  ...
</code></pre>

<p>Of course I can do something like this, </p>

<pre><code>$ git branch -a --contains 4af9822 &amp;&amp; git tag --contains 9338f2d
</code></pre>

<p>but is there a command that prints all refs at once?</p>
","1","974186","0","0"
"6962974","65694","2011-08-05 21:48:49","0","63","<git><git-branch><git-track>","git: What if a second branch tracks another branch in origin?","<p>What are the consequences of having a remote branch with the same origin as another one?</p>

<p>For example</p>

<pre><code>   // Create branch foo but track origin/bar instead of origin/foo
   git branch --track foo origin/bar
   git push origin foo
</code></pre>

<p>What are the side effects of such links?</p>
","0","65694","",""
"61958845","2745308","2020-05-22 15:47:37","1","106","<git><github><git-branch><branching-and-merging>","git detach head in branch & merge","<p>I was learning some git related topics and commands, this scenario occurred when i was using combination of <strong>git</strong> and <strong>GitHub</strong> features, using <code>git push</code> and changing file at github at the same time, I have created 2 branches (<code>jsfirst</code> and <code>imagegallery</code>) 
Just want to understand what went wrong,  I am trying to analyze and intend to not repeat at important project </p>

<p><strong>EDIT</strong>
Why <code>564903c (imagegallery) Image gallery</code> branch is disconnected in graphical view?</p>

<p>What does <code>HEAD@{0}, HEAD@{1}, HEAD@{2},  HEAD@{3}</code> means ?</p>

<p><strong>Output of <code>git log --all --decorate --oneline --graph</code> Command</strong></p>

<pre><code>*   76ebb92 (HEAD -&gt; master) Merge branches 'master' and 'master' of https://github.com/sometest/test
|\  
| * 4f264fe (origin/master) Created CONTRIBUTING.md
| *   1159fe3 Merge pull request #3 from sometest/code_of_conduct-patch-2
| |\  
| | * a7184f0 (origin/code_of_conduct-patch-2) Updated code of conduct
| |/  
| *   4369922 Merge pull request #2 from sometest/code_of_conduct-patch-1
| |\  
| | * 1893331 (origin/code_of_conduct-patch-1) Created CODE_OF_CONDUCT.md
| |/  
| * b3fbde0 Created .gitignore
| *   6275e91 Merge pull request #1 from sometest/add-license-1
| |\  
| | * 38d02c5 (origin/add-license-1) Create LICENSE
| |/  
* | cc0cdad (jsfirst) Silly story
* | a52170c Using events in JS
* | c271cdd Added number guessing game
* | 493a155 Learned basic of JS
|/  
| * 564903c (imagegallery) Image gallery
|/  
* 25266ce first commit

</code></pre>

<p><strong>Output of <code>git reflog</code> Command</strong></p>

<pre><code>76ebb92 (HEAD -&gt; master) HEAD@{0}: reset: moving to HEAD
76ebb92 (HEAD -&gt; master) HEAD@{1}: checkout: moving from 564903c3078ffdbdbd43bceb3da3495daddf82da to master
564903c (imagegallery) HEAD@{2}: checkout: moving from master to 564903c
76ebb92 (HEAD -&gt; master) HEAD@{3}: checkout: moving from imagegallery to master
564903c (imagegallery) HEAD@{4}: checkout: moving from master to imagegallery
76ebb92 (HEAD -&gt; master) HEAD@{5}: pull: Merge made by the 'recursive' strategy.
cc0cdad (jsfirst) HEAD@{6}: checkout: moving from imagegallery to master
564903c (imagegallery) HEAD@{7}: checkout: moving from master to imagegallery
cc0cdad (jsfirst) HEAD@{8}: reset: moving to cc0cdad
25266ce HEAD@{9}: checkout: moving from imagegallery to master
564903c (imagegallery) HEAD@{10}: checkout: moving from master to imagegallery
25266ce HEAD@{11}: checkout: moving from imagegallery to master
564903c (imagegallery) HEAD@{12}: checkout: moving from master to imagegallery
25266ce HEAD@{13}: checkout: moving from jsfirst to master
cc0cdad (jsfirst) HEAD@{14}: checkout: moving from imagegallery to jsfirst
564903c (imagegallery) HEAD@{15}: commit: Image gallery
25266ce HEAD@{16}: checkout: moving from master to imagegallery
25266ce HEAD@{17}: checkout: moving from jsfirst to master
cc0cdad (jsfirst) HEAD@{18}: commit: Silly story
a52170c HEAD@{19}: checkout: moving from master to jsfirst
25266ce HEAD@{20}: checkout: moving from jsfirst to master
a52170c HEAD@{21}: commit: Using events in JS
c271cdd HEAD@{22}: commit: Added number guessing game
493a155 HEAD@{23}: commit: Learned basic of JS
25266ce HEAD@{24}: checkout: moving from master to jsfirst
25266ce HEAD@{25}: commit (initial): first commit
</code></pre>

<p><strong>Git Command History</strong></p>

<pre><code> 4221  git init
 4222  git add README.md
 4223  git commit -m ""first commit""
 4224  git remote add origin https://github.com/sometest/sometest.git
 4225  git push -u origin master
 4233  git checkout -b jsfirst
 4235  git add chapter-1/hello.html
 4236  git add README.md
 4238  git commit -m ""Learned basic of JS""
 4241  git add chapter-1/numberguessinggame.html
 4242  git commit -m ""Added number guessing game""
 4247  git add chapter-1/basic2/*
 4249  git commit -m ""Using events in JS"" 
 4258  git add assessment-1/sillystorygenerator/*
 4259  git commit -m ""Silly story"" 
 4262  git checkout master
 4265  git add assessment-1/imagegallery/*
 4266  git reset assessment-1/imagegallery
 4270  git checkout -b imagegallery
 4273  git add assessment-1/imagegallery
 4274  git commit -m ""Image gallery"" .
 4280  git checkout jsfirst
 4284  git checkout master
 4285  git merge --squash jsfirst
 4287  git checkout imagegallery
 4296  git merge --squash imagegallery
 4297  git checkout master
 4298  git merge --squash imagegallery
 4305  git merge --squash imagegallery
 4312  git reset --hard cc0cdad
 4319  git checkout imagegallery
 4323  git checkout master
 4326  git pull 
 4333  git checkout imagegallery
 4342  git checkout master
 4343  git merge --squash imagegallery
 4345  git merge imagegallery
 4366* git chekout 564903c
 4371* git commit -a -m ""Image Gallery""
 4372* git checkout master
 4376* git commit -a -m ""Image Gallery Detach HEAD""
 4379* git reset --hard\n
</code></pre>
","1","2745308","0","0"
"6527521","597609","2011-06-29 21:33:08","2","720","<git><github><git-branch>","how to manage obsolete branches on github","<p>I usually develop new features of my codes in dedicated branches, then merge them to master.</p>

<p>The problem with this is that after some time I have a lot of obsolete branches that are cluttering the github interface, where there might be instead branches which are actively developed.</p>

<p>Is there a way to archive them somehow, or should I just delete them, as the commits have already been merged?</p>
","0","597609","",""
"6539589","679308","2011-06-30 18:45:44","5","536","<git><github><git-branch>","Why is it necessary to lose untracked files when you set up github pages?","<p>Github has a feature where you can put up HTML pages. (<a href=""http://pages.github.com"" rel=""nofollow"">Details here</a>).</p>

<p>Anyway, I recently used this to put up the aforementioned page. The basics of the instructions to do so are:</p>

<pre><code>// In order to create a new root branch, first ensure that your working directory is clean by committing or stashing any changes. The following operation will lose any uncommitted files! You might want to run this in a fresh clone of your repo.

$ cd /path/to/fancypants
$ git symbolic-ref HEAD refs/heads/gh-pages
$ rm .git/index
$ git clean -fdx

// After running this you’ll have an empty working directory (don’t worry, your main repo is still on the master branch). Now you can create some content in this branch and push it to GitHub. For example:

$ echo ""My GitHub Page"" &gt; index.html
$ git add .
$ git commit -a -m ""First pages commit""
$ git push origin gh-pages
</code></pre>

<p>So that went fine; as advertised, my untracked files were wiped but I'd made a copy of the dir and just moved back what was necessary. Switching back and forth between branches (I use SmartGit) doesn't seem to wipe untracked files.</p>

<p>However, I'm interested in expanding my very basic knowledge of Git, and am wondering why it was necessary to wipe untracked files the first time gh-pages was set up. I would have thought it would be possible to set up the gh-pages branch, add and commit the html file to it and push it, all without affecting untracked files. And then just switch back to the original branch. </p>
","0","679308","0","0"
"62155880","13470227","2020-06-02 15:45:03","0","47","<git><git-branch><git-extensions><git-repo>",".Git inside git repo and branch are not showing","<p>I'm running into trouble with my git repo. I had a bunch of branch that I realize are missing and I came to this conclusion. My file structure looks like this </p>

<pre><code>REPO-A  
  -/hooks  
  -/info  
  -/objects  
  -/ref  
  -config  
  -description  
  -HEAD  
  -packed-ref  
  -/.git  
    --/hooks  
    --/info  
    --/log  
    --/objects  
    --/ref  
    --COMMITMESSAGE  
    --config  
    --description  
    --FETCH_HEAD  
    --HEAD
</code></pre>

<p>When I clone my repo I only see some of my branches that I had and I only have one submodule. If however I delete the /.git file and everything contained under it, I get all my branches back but the ones that I see when the /.git file there are out of date. I was wondering what has happened and how to undo it? I've searched all the reflogs of everyone who’s pushes to the repo but they seem to be all pushes, so I'm a little lost. Any help would be appreciated!</p>
","1","13470227","",""
"43489303","1316604","2017-04-19 07:32:16","64","8600","<git><github><merge><git-branch><git-squash>","How can I delete all git branches which have been ""Squash and Merge"" via GitHub?","<p>Ever since GitHub introduced <a href=""https://github.com/blog/2141-squash-your-commits"" rel=""noreferrer"">Squash and Merge</a>, all the cool kids at my workplace are using it when merging pull requests. Is there a way to cleanup ""Squash and Merge"" branches? </p>

<p>The following command from <a href=""https://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-have-been-merged"">How can I delete all git branches which have been merged?</a> does not work for ""Squash and Merge"":</p>

<pre><code>git branch --merged | egrep -v ""(^\*|master|dev)"" | xargs git branch -d
</code></pre>
","0","1316604","0","0"
"62160707","351501","2020-06-02 20:17:42","1","68","<git><git-branch><git-fetch>","How do I access a git branch with a ':' in the name?","<p>In recent months I have two PRs come at me with the branch names being 'foo:bar'. Whenever I do a <code>git fetch --all</code>, that branch is nowhere to be found. How can I get this branch to be on my local machine?</p>
","1","351501","",""
"62161029","1323014","2020-06-02 20:38:40","4","779","<git><command-line-interface><git-branch>","Unable to delete git remote branch with a special character","<p>Please, before mark this question as duplicated, read carefully.</p>

<p>If you list branches, it appears like this:</p>

<pre><code>$git branch -a
  remotes/origin/feat/verify-&lt;C3&gt;email
</code></pre>

<p>The branch name is:</p>

<pre><code>origin/feat/verify-√email
</code></pre>

<p>If you try to access the branch url from Github Dashboard:</p>

<pre><code>The github page broke into a HTTP error 400
</code></pre>

<p>If you try to delete the branch:</p>

<pre><code>$ git push origin --delete feat/verify-√email
error: unable to delete 'feat/verify-√email': remote ref does not exist
error: failed to push some refs to 'https://mataide@github.com/mataide/proak-website.git'
</code></pre>

<p>Delete by pattern:</p>

<pre><code>git branch -d -r $(git branch --list origin/feat/ve* -r)
error: cannot lock ref 'refs/remotes/origin/feat/verify-?email': Unable to create '/Users/marcus/Documents/Workspace/proak-website/.git/refs/remotes/origin/feat/verify-?email.lock': Illegal byte sequence
error: Error deleting remote-tracking branch 'origin/feat/verify-?email'
</code></pre>

<p>Same error if you try by the name: feat/verify-email.
Also doent work if you try to delete by tools like Sourcetree.</p>

<p>I just want to delete the branch, any help?</p>
","6","1323014","",""
"25079613","448413","2014-08-01 11:49:49","1","2058","<git><patch><git-branch><git-diff>","How to find out all the patches applied between two git branches?","<p>I want to find out all the patches that have been applied between two git branches. I tried 
 the commands below, but that didn't work out for me.</p>

<pre><code>git diff 1.6..1.4 | grep  -r  -i  --include *\.patch
</code></pre>

<p>How can I find out all the patches that have been committed between two git branches?</p>
","2","448413","",""
"62394375","12565460","2020-06-15 18:10:18","0","53","<git><gitlab><branch><git-branch><git-bash>","How do i push after changing the branch using gitbash","<p>When i try to change my branch and push the code to new branch a error is thrown. How to overcome this type of error</p>

<p>![REJECTED]
error: failed to push some refs to 'some link'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.</p>
","2","12565460","",""
"52025714","817455","2018-08-26 11:18:54","5","4401","<git><git-branch>","Group git branches","<p>I've taken over a big git repository with lots of branches that no one really seems to know what they are all about. Is there any way to put branches in some kind of grouping or folder so that they are still there but not necessarily listed? To make the important branches easier to spot. </p>

<p><strong>Edit:</strong> I want to be able to distinguish between the branches that I work with and the branches that don't really make sense to me but still can't be deleted.</p>
","5","817455","0","0"
"35944382","2471874","2016-03-11 15:44:02","2","644","<git><github><git-branch>","Properly separating two partially overlapping git branches","<p>To work on an issue related to a feature currently under development, a collaborator on a project created a new issue-1 branch off of the feature branch using the GitHub Desktop application. Then they added a bunch of commits to the issue-1 branch. Something went wrong when the branch was created, and now the commit history doesn’t look right. The diagrams below should help explain what was expected and what actually happened.</p>

<p>0) Before the new branch:</p>

<pre><code>A - B - C - D (feature)
</code></pre>

<p>1) Expected history:</p>

<pre><code>              E - F - G (issue-1)
             /
A - B - C - D (feature)
</code></pre>

<p>2) Actual history:</p>

<pre><code>A - B - C - D - E - F - G (issue-1)
            ^
        (feature)
</code></pre>

<p>3) Adding commits to the feature branch yields a tree like this:</p>

<pre><code>              H - I (feature)
             /
A - B - C - D - E - F - G (issue-1)
</code></pre>

<p>4) instead of like this (which is what we want):</p>

<pre><code>              E - F - G (issue-1)
             /
A - B - C - D - H - I (feature)
</code></pre>

<p>In the history, the original commits A-B-C-D now appear to be associated with <em>both</em> the issue-1 branch and the feature branch. The commits E-F-G appear to be on only the issue-1 branch (which is correct). </p>

<p>I would like to get the repo from state 2 to state 1 (above). Since commits E-F-G are already on their own branch, I think all that needs to happen is that the earlier commits need to be dissociated from the issue-1 branch. What is the proper series of git commands to restore the original state of commits A-B-C-D to be on only the feature branch and not both feature and issue-1?</p>

<p>Apologies if this is a duplicate. I couldn’t find a solution to this problem, but I might have been searching for the wrong thing.</p>
","0","2471874","",""
"25347774","1036544","2014-08-17 09:02:53","2","86","<git><github><git-branch>","Restore a local git directory with uncommitted changes","<p>I have a remote repository on GitHub, and I used to have a local git repository/directory on my Mac that works with the remote.</p>

<p>Last week, my hard drive was wiped out but fortunately I have a backup of the local git directory and it contains uncommitted changes.</p>

<p>How should I restore this directory so that: 1. all the branch-trackings are back; 2. uncommitted changes are preserved?</p>

<p>I'm using <code>git 1.8.5.2</code>.</p>
","1","1036544","0","0"
"36002985","3607573","2016-03-15 04:58:02","0","611","<git><git-branch><git-rebase>","git branch is in detached from refs/heads/developer","<p>I run the <code>git checkout &lt;commid-id&gt;</code> and once the HEAD was in detached state, I made few commits to in the detached state. Then I created the branch called developer so that all the commits that I did when in detached state came inside my <code>developer</code> branch.  Now I ran the command <code>git checkout developer</code> and then <code>git rebase master</code>. I got few conflicting changes and then I closed the terminal.</p>

<p>The next time I opened and ran the <code>git rebase master</code> I got the below message</p>

<pre><code>It seems that there is already a rebase-apply directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
git rebase (--continue | --abort | --skip)
If that is not the case, please
rm -fr ""/Users/pl1/my_project/.git/rebase-apply""
and run me again.  I am stopping in case you still have something
valuable there.
</code></pre>

<p>I ran the below command
    rm -fr ""/Users/pl1/my-project/.git/rebase-apply""</p>

<p>Now when I run the <code>git branch</code> command I get the below:</p>

<pre><code>*(detached from refs/heads/developer)
  developer
  master
</code></pre>

<p>I ran the <code>git rebase master</code> command once again. Got the below message:</p>

<pre><code>Cannot rebase: You have unstaged changes.
Additionally, your index contains uncommitted changes.
Please commit or stash them.
</code></pre>

<p>Running <code>git status</code> command now gives:</p>

<pre><code>HEAD detached from refs/heads/developer
Changes to be committed:
(use ""git reset HEAD &lt;file&gt;..."" to unstage)

modified:   client/app/filterEnv/filterEnv.directive.js
modified:   client/app/filterEnv/filterEnv.html
modified:   client/app/filterEnv/filterEnv.scss
modified:   client/app/hostsTable/hostsTable.directive.js
modified:   client/app/main/main.html
modified:   client/app/results/results.html
modified:   package.json

Unmerged paths:
(use ""git reset HEAD &lt;file&gt;..."" to unstage)
(use ""git add &lt;file&gt;..."" to mark resolution)

both modified:   root@remotehost.corp.net
</code></pre>

<p>I am confused with my current state. How to rebase my developer branch changes to master from here. Is my changes inside the <code>developer</code> branch lost now? Please let me know since I am new to running the <code>git rebase</code> command.</p>
","1","3607573","",""
"25358645","2451238","2014-08-18 07:58:01","0","268","<git><svn><git-svn><git-branch>","unlink git branch from svn origin","<p>This is a follow-up to <a href=""https://stackoverflow.com/q/24691660/2451238%20this%20previous%20question"">this previous question</a>.
So there you can find what I did so far.</p>

<p>In short, I created a new <code>git</code> branch branching from a branch that is dcommit'ed to a remote <code>svn</code> repository.
This new <code>git</code> branch is intended to only be used locally and never to be synchronized with the <code>svn</code>.
While I can ensure this manullay as explained in <a href=""https://stackoverflow.com/q/24691660/2451238"">this answer</a>, the new <code>git</code> branch 'remembers' its <code>svn</code> origin:</p>

<pre><code>$ git svn info
Path: .
URL: [path-to-host]/[svn-repo]/trunk
Repository Root: [path-to-host]/[svn-repo]
Repository UUID: [repository-uuid]
Revision: [revision]
Node Kind: directory
Schedule: normal
Last Changed Author: sg-lecram
Last Changed Rev: [revision]
Last Changed Date: [date]
</code></pre>

<p>So assume if I checkout the new <code>git</code> branch and commit some changes to the local <code>git</code>, I could run <code>git svn dcommit</code> sending the changes to the <code>svn</code>. While I do not plan to do this, all it needs is to forget for a split-second on which branch I am on to publish all the secret changes in the secret git branch.</p>

<p>I would like to be able to unlink the new <code>git</code> branch from the <code>svn</code> so that trying to dcommit from that branch results in an error.
How can I do this?</p>
","3","2451238","",""
"69760925","895958","2021-10-28 21:05:49","0","1075","<gitlab><gitlab-ci><git-branch>","How to define dynamic branch in gitlab ci","<p>I am working on project where according to sprint release branch, dynamic branch get created every week. like release/XXXX.XX (example: release/2021.01) and I am using specific tag to trigger the Gitlab pipeline as well.</p>
<pre><code>How can I call this dynamic branch name into Gitlab CI. So far what I have tried is.

 - $CI_COMMIT_MESSAGE ==&gt; which will accept the data from variable when any 
   commit the message as &quot;release/2021.01&quot; while pushing the code and will do next sets of operation like merge. 
   Its working though but not acceptable because each commit should have specific description about changes we are making.
 - $CI_COMMIT_TAG ==&gt; which will use last tag applied against the sprint release branch 
   (which actually also a trigger for pipeline) and do the next operation like merge. But this also not acceptable 

and then 

 - CI_COMMIT_REF_NAME ==&gt; which also works but its fetch the last tag applied against the sprint release branch but do not fetch exact release/2021.01 branch.

**Edit 1:**

Every week, sprint release branch get created by developer team manually. this changed branch name i wanted to call in variable within the job.
Dev Team will create a tag against the release/2021.01 branch which will add the jobs in pipeline.
In one of my job, I wanted to call this dynamic branch name and perform next set of operations. i do not wanted to know what number of sprint release branch Dev has created.
just there should be method using which i can pick the branch name against which tag was deployed.

</code></pre>
","2","895958","",""
"36032688","5419599","2016-03-16 10:16:15","4","1130","<git><git-branch>","git branch flag for --no-merged and not --contains?","<p><code>git branch --contains master</code> returns the names of branches from whose tips <code>master</code> is reachable.</p>

<p><code>git branch --merged master</code> returns the names of branches whose tips are reachable from <code>master</code>.</p>

<p><code>git branch --no-merged master</code> returns the names of branches whose tips aren't reachable from <code>master</code>.</p>

<p>What is the flag (perhaps in a newer version of <code>git</code>?) to show the names of branches whose tips are neither reachable from <code>master</code>, nor can reach <code>master</code> in their own ancestry?  In other words, what flag gives the effect of <code>--no-merged --no-contains</code>?</p>

<p>To put it another way, how to show branches which could not have a fast forward merge into master nor have a fast forward merge from master into them?</p>
","2","5419599","0","0"
"69761241","14846788","2021-10-28 21:38:10","2","1107","<git><github><version-control><git-branch>","Used git reset --hard ""commit id"", and now my HEAD is detached","<p>I am rather new to git.</p>
<p><strong>The Problem:</strong> Just wanted to merge my remote main branch with a merge branch.</p>
<p>I wanted to sync my remote main branch with a merge branch I was working on: The merge branch was 80 commits behind the main. For some reason, I encountered some conflicts, and the auto merge failed.</p>
<p>I then tried switching to my remote main branch <em>(git checkout origin/main)</em>, and it failed too, suggesting I resolve the conflicts first. I decided to simply go back to an earlier commit, for which I used:</p>
<p><code>git reset --hard *commit id*</code></p>
<p>I then deleted my merge branch, and proceeded to create a new merge branch off of remote main branch (origin/main). This is where the problem begins. I write</p>
<p><code>git checkout origin/main</code></p>
<p>and am presented with this</p>
<pre><code>Note: switching to 'origin/main'.

You are in 'detached HEAD' state. You can look around, make experimental 
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.      

If you want to create a new branch to retain commits you create, you may 
do so (now or later) by using -c with the switch command. Example:       

  git switch -c &lt;new-branch-name&gt;

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at *commit id* *Description*
</code></pre>
<p>I did all that I could, read articles, read stackoverflow questions, even deleted and cloned my local repository but somehow couldn't manage to <strong>re-attach</strong> the HEAD to the remote branch, if you may.</p>
<p>Is there anything that I'm missing here? All I want is to use git checkout origin/main and it should point to the branch instead of the specific commit id.</p>
<p>Any and all help is appreciated. Banging my head to fix this since the last 5 hours.</p>
","4","14846788","",""
"52127324","3503228","2018-09-01 10:43:03","6","179","<bash><git><root><git-branch><sudo>","Why do I need Root privilege to do `git branch -a`?","<p>The git repository is under my username <code>nikhil</code> and group <code>nikhil</code> as follows:</p>



<pre class=""lang-none prettyprint-override""><code>$ ls -l
drwxr-xr-x 10 nikhil nikhil 4096 Sep  1 12:33 CS/
</code></pre>

<p>I can get git status as <code>git status</code> without root privilege.</p>

<p>But when I try to list branches:</p>

<pre class=""lang-none prettyprint-override""><code>$  git branch -a
</code></pre>

<p>nothing happens.</p>

<p>Also, with root priviledge:</p>

<pre class=""lang-none prettyprint-override""><code>$ sudo git branch -a
[sudo] password for nikhil:
* master
  remotes/origin/feature
  remotes/origin/master
</code></pre>

<p>it does lists all my repository.</p>

<p>Why is it so?</p>

<hr>

<p>Edit: output of <code>ls -lh .git</code></p>

<pre class=""lang-none prettyprint-override""><code>$ ls -lh .git
total 332K
drwxr-xr-x   2 nikhil nikhil 4.0K May 25 16:32 branches
-rw-r--r--   1 nikhil nikhil    2 Sep  1 12:25 COMMIT_EDITMSG
-rw-r--r--   1 nikhil nikhil 5.6K Sep  1 12:33 config
-rw-r--r--   1 nikhil nikhil   73 May 25 16:32 description
-rw-r--r--   1 nikhil nikhil   90 Sep  1 12:33 FETCH_HEAD
-rw-rw-r--   1 nikhil nikhil   23 Sep  1 12:33 HEAD
drwxr-xr-x   2 nikhil nikhil 4.0K Jun 11 15:25 hooks
-rw-r--r--   1 nikhil nikhil 229K Sep  1 12:34 index
-rw-r--r--   1 nikhil nikhil  44K Jun 11 08:56 INDEX
drwxr-xr-x   2 nikhil nikhil 4.0K Jun 11 15:25 info
drwxr-xr-x   3 nikhil nikhil 4.0K Jun 11 15:28 logs
drwxr-xr-x   8 nikhil nikhil 4.0K Aug 11 18:01 modules
drwxr-xr-x 260 nikhil nikhil 4.0K Jun 27 15:29 objects
-rw-rw-r--   1 nikhil nikhil   41 Sep  1 12:33 ORIG_HEAD
drwxr-xr-x   5 nikhil nikhil 4.0K Jun 11 15:25 refs
</code></pre>

<hr>

<p>I identified the problem it was due to Anaconda in my <code>.bashrc</code>:</p>

<pre class=""lang-none prettyprint-override""><code>export PATH=""$HOME/anaconda3/bin:$PATH""
if [ -f $HOME/anaconda3/etc/profile.d/conda.sh ]; then
    source $HOME/anaconda3/etc/profile.d/conda.sh
fi
conda activate
</code></pre>

<p>What should I do? When I comment this out <code>git branch -a</code> works.</p>
","1","3503228","",""
"62657058","2703834","2020-06-30 12:05:54","0","37","<git><git-branch><git-clone>","my git is broken, how can i get/clone the latest commits from every branch to a new git","<p>Till now i only worked with a local repository. Now i have to push my code also to a bitbucket server. After an error message from bitbucket (fatal: bad tree object 801d94bc0b9cbd6383650ba85fed50c1ac7a143) i do a git fsck on my local repo and get the following result:</p>
<pre><code>Checking object directories: 100% (256/256), done.
broken link from    tree 9aff83ecd679eda74d63ee09fd7946f434b16a6d
              to    blob d7fc5427ee5a9c9d13b4229ed8908b9d7b2f0cf8
broken link from    tree 46ab23a168bedf145a1a4822f75b73855865e3c1
              to    blob 77cbd7c1d5c597392dab0b9d22f0e983241a75bc
broken link from    tree a396e65bdfd6106c2b7ba0ec8c488bd1b79b5b32
              to    tree 801d94bc0b9cbd6383650ba85fed50c1ac7a143a
broken link from    tree 67f2f023c6ed3d5415ec0e55daad1e7c11faf9e0
              to    blob 4f4a032a26c2bbb4a6f0a03f2415af10a55df208
broken link from    tree 001aa703b69f30e7cd599c724762b0c2740caded
              to    blob 5e1c317fbe8f3fe24cc0177a89fc35aca000761b
dangling commit 55403e88e2ebd20d52cb58906fc84fcc7485721c
dangling blob 5d401c73270eda73e3c078612c833773e0b13e7f
dangling blob 7280e634bbfa7ad005033803493a0b03b2f67e9a
dangling blob 62420d66f9b3f5c70b3464fa9e1451266e2f50ae
dangling blob 8d42504462666dd57f58da9444e3e5b249d22cc4
dangling commit 28c321c6e6bd5d5981418d6af5901c7c9b6969da
dangling blob 6e040a6d27c285ab39059d6dbe55327b37af2b43
</code></pre>
<p>There are about 100 lines with dangling blobs, commit and broken links. I had several problems with my filesystem over the last years. I have no problem to setup a new git but currently i have about 10 branches which i want to clone into a new git without the history, just the current code.</p>
<p>For the first i tried the following</p>
<pre><code>mkdir gitbak
cd gitbak
git clone /home/debian/myproject/.git
git clone 
// get the master branch
git checkout -b devbranch origin/devbranch
</code></pre>
<p>as a result i get this branch also to the new git but i get also all commits from this branch and git fsck brings me also the same errors. How can i get only the lastest commit/snapshot/plain text from each branch into the new one?</p>
<p>Thanks</p>
","2","2703834","",""
"52133390","","2018-09-02 01:49:49","1","384","<git><git-branch><git-checkout>","File permissions are being shared across git branches","<p>Not sure why this is happening, but the problem is I am changing file permissions on a branch after I push that branch to the remote. Then I checkout a new branch from our integration branch and it has the permissions from the ""dead branch"", this is how it goes:</p>

<pre><code># on feature branch
git checkout --no-track -b foo
git reset --soft ""remotes/origin/dev""
git add .
git add -A
git commit --allow-empty -am ""bar""
git push -u origin foo
chmod -R -w .  # remove all write permissions in current dir

# later on
git branch --no-track z ""remotes/origin/dev""
git checkout z
### ughh this new branch z files are not writable, but whyyyy?
</code></pre>

<p>basically we changed the files to non-writable and that branch never gets merged into any branch - we pushed it to the remote before modifying the file permissions.</p>

<p>Why the do the non-writable file permissions show up in other branches that never got merged with the non-writable file branch?</p>
","0","","",""
"7434290","146716","2011-09-15 16:30:46","2","941","<git><git-branch><git-merge><git-filter-branch>","How to move a subdirectory from a branch in one git repository to a branch in a different repository, preserving history?","<p>I've got a directory containing utility libraries that were developed in a branch in one git repository, but it turns out they really belong in a different directory in a different project. I've read through and attempted Greg Bayer's <a href=""http://gbayer.com/development/moving-files-from-one-git-repository-to-another-preserving-history/"" rel=""nofollow"">Moving Files from one Git Repository to Another, Preserving History</a> multiple times, but I'm unable to preserve history. I'm attempting to do this all under non-master branches to be more safe as the project is not ready to merge back to master yet anyway.</p>

<p>Here's what I'm doing so far:</p>

<p><em>Preparing the ""DirectoryName"" directory to be moved from branch ""SomeBranch"" of ""Repo1"" repository:</em></p>

<pre><code>cd ~/Desktop
git clone git@github.com:username/Repo1.git
cd Repo1
git checkout -b SomeBranch origin/SomeBranch
git remote rm origin
git filter-branch --subdirectory-filter DirectoryName
mkdir DirectoryName
git mv *.php *.txt DirectoryName
git add DirectoryName
git commit -m ""Stripped everything down to just DirectoryName.""
</code></pre>

<p><em>Merging the ""DirectoryName"" directory into the ""SomeBranch"" branch of the ""Repo2"" repository:</em></p>

<pre><code>cd ~/Desktop
git clone git@github.com:username/Repo2.git
cd Repo2
git checkout -b SomeBranch origin/SomeBranch
git remote rm origin
git remote add Repo1 ../Repo1/
git pull Repo1 SomeBranch
git remote rm Repo1
</code></pre>

<p>When I do this I can successfully strip everything down to ""DirectoryName"" in Repo1 (and I can pull it over to Repo2 as well), but the history is lost. If I do a <code>git log -- DirectoryName</code> or <code>git log -- DirectoryName/SomeFile.php</code>, I only see the ""Stripped everything down to just DirectoryName."" commit). So, clearly something is wrong with my <code>git filter-branch</code> command, but I'm not familiar enough with it to figure out what.</p>

<p>Any suggestions would be greatly appreciated as we're undergoing some fundamental changes to our codebase, so I'll need to be doing this relatively frequently for a while as stuff moves around (but we want to preserve the history).</p>

<p><strong>Update:</strong> As I mentioned <code>git log -- DirectoryName</code> (or <code>git log -- DirectoryName/SomeFile.php</code>; either in Repo1 or Repo2) does not show any commits other that the ""Stripped everything down to just DirectoryName."" commit, but if I do <code>git log</code> I see the correct commit history. Am I just using <code>git log</code> incorrectly or is there some corruption that's causing the commits to not show up correctly?</p>

<p><strong>Another Update:</strong> <code>git log -- DirectoryName</code> <em>does</em> show the correct commits in my original, unmodified Repo1, but it <em>does not</em> show the correct commits after the <code>git filter-branch</code> (and I've tried <code>git filter-branch --subdirectory-filter DirectoryName -- --all</code> but that mucks with the ""master"" branch as well and doesn't appear to be necessary... same result). That said, the commit history is there after running <code>git filter-branch</code>, I can see it all with <code>git log master..</code> it just no longer seems to pertain to the directory or the files. Any ideas?</p>
","0","146716","0","0"
"25624111","38231","2014-09-02 13:03:18","0","33","<git><git-branch>","See commits in git first seen on branch","<p>I would like to list all commits on branch X that were first commited to that branch. 
E.g. I have a long living branch for a deployment environment. Most changes on that branch will enter there as merges from other branches, where they were developed. But some changes are done directly on the long living branch, those are the ones I'd like to list.
Is that possible?</p>
","6","38231","",""
"25631665","552792","2014-09-02 20:16:53","3","1997","<git><merge><git-branch>","How can I undo a git merge, make changes, then redo the merge?","<p>I'm working on branch myDev. I merged in some changes from the master branch last night and while I was doing this, I made the stupid mistake of also running a JavaScript formatter on a few of the files.</p>

<p>Today, I'm merging with a colleague's branch, and now there are dozens of conflicts in a pretty complicated part of the system, and I'm not sure what part of the diffs are from the formatter and what part is actual changes and bugfixes.</p>

<p>After diving down this rabbit hole, my plan is to try to undo the merge I did from master to my branch, roll back the changes from the formatter, then do the merge again.  </p>

<p>However, I'm concerned that Git may not recognize an undone merge and let me try again. I don't want to make this problem any worse, so I'm wondering how I can undo the merge, revert the formatter changes, then merge again so that the only conflicts I see will be from real, actual changes to the logic.</p>

<p>Here's a screenshot to demonstrate what I'm trying to do. Since this is a sensitive operation, I want to have a plan before I start undoing stuff.</p>

<p><img src=""https://i.stack.imgur.com/3fGLJ.png"" alt=""Screenshot of my commit history, with annotations outlining what I want to do""></p>

<p>To be clear, I'm the only one working on the myDev branch. So this should mean whatever operations I do won't affect others on the team.</p>

<p>I was thinking of just outright deleting the last two commits from history entirely, since I am the only person working on this branch, but I'm not sure what kind of side effects that might produce.</p>
","5","552792","",""
"7459353","857514","2011-09-18 03:45:15","0","251","<git><branch><git-branch><git-submodules>","""git submodules update --recursive"" doesn't seem to go into sub-submodules","<p>I have a project that's consisted of two branches: STABLE and DEVELOPMENT. As the names suggested, DEVELOPMENT is the ever-ongoing developing branch and STABLE is the stable-but-not-so-new branch; hence the versions of submodules (and sub-submodules) in DEVELOPMENT are often ahead of STABLE.</p>

<p>Now, whenever I need to checkout from DEVELOPMENT to STABLE, <strong>git submodules update --recursive</strong> will not get into these ""sub-submodules"" at all and their directory will simply become empty, while all the submodules will be properly shunted back to an older version if needed. I have no idea how to get this right and would appreciate some helps.</p>
","3","857514","",""
"7463392","429850","2011-09-18 18:15:35","47","65445","<git><git-branch><git-stash>","Switching a branch after aborting current changes in git","<p>I cloned a git repo and then started playing around in its master branch. After a while, I want to ignore the changes I just made (without committing them), and switch to a different branch. However, it stops me from switching because there are uncommitted changes. How do I ignore them without stashing them either? This is what happens:</p>

<pre><code>$ git checkout gh-pages
error: Your local changes to the following files would be overwritten by checkout:
        somefile.txt
Please, commit your changes or stash them before you can switch branches.
Aborting
</code></pre>
","0","429850","0","0"
"7465699","923279","2011-09-19 01:39:08","2","339","<git><branch><git-branch>","Pushing one git branch requires a pull on another?","<p>I'm a bit of a git n00b, and I am having some difficulty with branches. I don't think this question has been asked, however it could just be that I'm not looking for the right keywords.</p>

<p>Situation:
I have a remote git repository and I have checked out the master branch on machine 1.
I have done the same on machine 2, except that I have created a new branch (sandbox) and checked that out.</p>

<p>I pull, make changes, commit and push stuff on Machine 2 - no problems.</p>

<p>I then make some changes on Machine one, commit, and try to push, except I get this error:</p>

<pre><code>To xxx@xxx.xxx.com:/project.git
! [rejected]        sandbox -&gt; sandbox (non-fast-forward)
error: failed to push some refs to 'xxx@xxx.xxx.com:/project.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>If I do a git pull, I get:</p>

<pre><code>Already up-to-date.
</code></pre>

<p>So at the moment I have to</p>

<pre><code>git checkout sandbox
git pull
git checkout master
git push
</code></pre>

<p>And then its all fine. It seems to me, that given these are different branches, there should be no need for me to do a pull on the sandbox branch to push changes on master. I could understand it if I was trying to merge them back, but that will probably never happen.</p>

<p>I suspect my config file is a bit wrong, so here it is:</p>

<pre><code>(Machine 1 - master) .git/config

[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
[gui]
    wmstate = normal
    geometry = 1920x970+0+0 368 203

[remote ""origin""]
    url = xxx@xxx.xxx.com:/project.git
    fetch = +refs/heads/*:refs/remotes/origin/*

[branch ""master""]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>And </p>

<pre><code>(Machine 2 - paid) .git/config

[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true

[remote ""origin""]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git+ssh://xxx@xxx.xxx.com/project.git

[branch ""master""]
    remote = origin
    merge = refs/heads/master

[branch ""sandbox""]
    remote = origin
    merge = refs/heads/sandbox
</code></pre>

<p>It should be noted, the the same problem happens in revers - after a push on master, I can't to a push on sandbox without checking out master, doing a pull and then switching back to sandbox.</p>

<p>There must be an easier way - any help would be appreciated.</p>
","0","923279","",""
"36149182","1517195","2016-03-22 08:13:30","4","991","<git><git-branch>","Why git branch without any ancestor","<p>Yesterday afternoon a college of mine did the git commit seen in the picture below. I wonder how you can do such strange things in git. Normally, every branch should have an ancestor branch that exists before. At least in my understanding of git.</p>

<p>How is this git history possible to get and why should this be useful?</p>

<p><a href=""https://i.stack.imgur.com/ySePg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ySePg.png"" alt=""Strange Git branch""></a></p>
","3","1517195","0","0"
"25661231","3999932","2014-09-04 08:57:22","0","43","<git><github><fetch><git-branch>","Update all branches in git","<p>I forked a repo: <a href=""https://github.com/CruceGameDevel/CruceGame"" rel=""nofollow"">https://github.com/CruceGameDevel/CruceGame</a> and I cloned my copy to local machine:</p>

<pre><code>$ git clone https://github.com/MihaiPro/CruceGame
</code></pre>

<p>If I run:</p>

<pre><code>$ git branch
* master
</code></pre>

<p>Why it show only master branch? I tried <code>git remote update</code> and <code>git fetch --all</code> but doesn't work. What I need to do? Maybe I did something wrong, so please give me correct steps of cloning a forked repo.
Thanks!</p>
","1","3999932","",""
"52225760","7073340","2018-09-07 15:37:41","1","655","<git><tfs><git-branch>","How to copy branch policies while creating a new branch(git) in TFS","<p>We will create new branches(Git) for every release in <code>TFS 2018</code>. The problem is we have several <strong><em>branch policies for our branches</em></strong>, every time whenever we create a new branch we have to manually create new branch policies. We do really want to get rid of this everytime.</p>

<p>Is there any way while creating a git branch which also copies the branch policies from the source branch itself?</p>

<p>Currently, I don't see any configuration like this in TFS (below image)</p>

<p><a href=""https://i.stack.imgur.com/sRjiM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sRjiM.png"" alt=""enter image description here""></a></p>
","2","7073340","",""
"44243918","1173438","2017-05-29 13:38:18","0","39","<git><git-branch><patch><git-diff>","Create git patch per changed file in a branch","<p>I want create a list of patches where each patch contains the changes for that particular file in the branch against the ""up-stream"" (to the time where I create the branch from the up-stream) ... I want see a list like this:</p>

<pre><code>changed-file-foo.java.patch
changed-path__file-foo.java.patch
changed-path_subpath_file-foo.java.patch
...
</code></pre>
","0","1173438","",""
"7758128","638452","2011-10-13 17:41:25","27","16458","<git><commit><git-branch><rebase><git-rebase>","How to git rebase -i for a range of commits?","<p>Can I squash a range of commits for a local feature/topic branch using rebase that <strong>does not include</strong> the most recent commit?  This is for commits that I want to prepare before they get merged and pushed to a public repo.</p>

<p>I was working quickly and made a bunch of minor changes with poor titles and descriptions that I want to squash into two or three separate logical commits with a great comments.  Can I select a range of commits between 329aed9 and af39283 that could be at any point in this feature branch's short history?</p>

<pre><code>git rebase -i RANGE_START_COMMIT_ID RANGE_LAST_COMMIT_ID
</code></pre>

<p>Thanks!</p>
","4","638452","0","0"
"63110347","11303949","2020-07-27 07:11:18","0","61","<git><github><git-branch><rebase>","need help in rebase in github","<p>I am new to github and made a mistake on my first day.
I was supposed to edit code on one of the feature branches
accidentally, I checkout a different feature branch and added changes there and pushed it.</p>
<p>Mistake:</p>
<ul>
<li>I cloned from <code>master</code>. Checked out a different feature branch. Added my updated python codefile. Ran <code>git commit</code> and pushed the changes. It resulted in many objects being updated instead of just one.</li>
</ul>
<blockquote>
<pre><code>git clone https://github.aop-site.com/AOP/AOP_DEPT.git
git checkout feature/BARC-125
git add compute_code.py
git commit - m &quot;qwsasa&quot;
git push
</code></pre>
</blockquote>
<p>What I should have done:</p>
<ul>
<li>I was supposed to create a different feature branch, check that out and add changes to it and push the same.</li>
</ul>
<blockquote>
<pre><code>  git clone https://github.aop-site.com/AOP/AOP_DEPT.git
  git checkout feature/BARC-149
  git add compute_code.py
</code></pre>
</blockquote>
<p>Request :
How do I fix the changes (mistake section) which I have did in mistake section?</p>
","2","11303949","",""
"7769024","995546","2011-10-14 14:20:38","3","161","<git><git-branch>","Server based on dynamic git branch","<p>We have a team of a few developers and want to begin using feature branches in git so that we can collaborate on certain tasks in a vacuum. The problem is that we have servers which check out very specific branches - integration, stage, production. If code is on a feature branch, there is no way we can push it to some central server where everyone in the company (including non-developers) can use &amp; preview it. I thought about developing some script that would let a developer specify a branch name which an ""anything goes"" server would check out, that way there's always one server that could be running any given branch, for previewing purposes. But that seems kind of clunky/suboptimal. I was wondering if anybody else has done something similar before, and if so, if there's a better way of going about it?</p>
","0","995546","",""
"44479383","884143","2017-06-11 00:42:17","0","29","<git><github><branch><git-branch><production>","Clone github DEV branch and switch transparently to master once it's released","<p>At the moment, there is a version 5.4 of some specific product on Github. Version 5.5 should be released within one month which will be the LTS type (Long Term Support).</p>

<p>I need to start a project right now, but logically it's not smart to build a project on 5.4 if 5.5 LTS should be released in following month.</p>

<p>And question is: </p>

<p>How can I keep track with 5.5 LTS which is on the DEV branch at the moment, and once it will be officially available on MASTER branch ?</p>

<p>I would use that branch, without loosing all data already developed by me.</p>

<p>Thank you for your suggestions and tips to correct guidelines.</p>
","0","884143","",""
"36226936","2077201","2016-03-25 19:46:51","3","307","<git><git-branch><git-bash>","stop git push from pushing to multiple branches","<p>I created a new branch (<code>tags</code>), checked it out, and whenever I push changes I use <code>git push origin tags</code>. However, the pushed changes are effecting both the <code>master</code> branch and the <code>tags</code> branch in my remote repo.</p>

<p>I'm sure I've got the <code>tags</code> branch checked out (verified with <code>git status</code>). Can someone tell me what I'm doing wrong? I'm a git newbie and so I'm not sure what I might need to include in this post to help with the diagnosis, let me know if I should include something specific.</p>

<p>Thanks! </p>
","1","2077201","0","0"
"25945611","1990193","2014-09-20 05:34:37","1","598","<git-branch>","How to view all branches in a remote git repository","<p>git branch -a shows me all the branches PROVIDED I already have cloned the branch. For example if I have a remote branch that I have cloned, executing this from the base dir gives me this</p>

<pre><code>* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/xxx-3.5.x
  remotes/origin/xxx-3.6.0.x
  remotes/origin/xxx-4.x
  remotes/origin/xxx-publisher
  remotes/origin/xxx-sequencer
  remotes/origin/master
  remotes/origin/release/3.6.8
</code></pre>

<p>Now I want to get this info without having to clone the branch first. Is there a command that takes the url to the remote repo outputs the above info? If I execute this command outsire a git project dir,I get this</p>

<pre><code>fatal: Not a git repository (or any parent up to mount point /export)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
</code></pre>

<p>Thanks in advance</p>
","0","1990193","0","0"
"44494296","98078","2017-06-12 08:03:21","10","6099","<git><version-control><git-branch>","show git branches with date of last commit","<p>I was working on a branch a couple of weeks ago but I can't remember what the branch was called (there are many). I'd like to be able to do something like:</p>

<p><code>git branch --print-last-commit</code></p>

<p>and for it to output something like:</p>

<pre><code>branch 1 - 2017-02-12
branch 2 - 2016-12-30
</code></pre>

<p>etc.</p>

<p>Is there any way to do this?</p>
","0","98078","0","0"
"63140447","186904","2020-07-28 18:19:06","3","913","<git><version-control><git-branch>","git - How to tell which branch a commit belongs to?","<p>As someone relatively new to Git, I have recently (and finally!) understood that a branch is actually just a pointer to a particular commit, and that sometimes it might be better to rephrase &quot;which branch a commit belongs to&quot; as &quot;from which branches is a commit reachable&quot;.</p>
<p>For example, the following diagram is from the official Git documentation:</p>
<p><a href=""https://i.stack.imgur.com/fDI8l.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fDI8l.png"" alt=""git tree with two branches: master and iss53"" /></a></p>
<p>In this image, I would intuitively think that commit <code>C4</code> &quot;belongs&quot; to the branch <code>master</code> and commits <code>C3</code> and <code>C5</code> belong to <code>iss53</code>. But what about <code>C0</code> through <code>C2</code>? Would they belong to both branches? Or must I say they are &quot;reachable&quot; by branches <code>master</code> and <code>iss53</code>?</p>
<p>This gets more complicated once I merge <code>iss53</code> into <code>master</code>:</p>
<p><a href=""https://i.stack.imgur.com/sUldD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sUldD.png"" alt=""git tree with branch iss53 merged into master"" /></a></p>
<p>Since branch <code>iss53</code> was merged into <code>master</code>, does that make commits <code>C0</code> through <code>C2</code> belong to <code>master</code> &quot;more&quot; than <code>iss53</code>?</p>
<p>What if I <em>delete</em> branch <code>iss53</code> after the merge? Which branch would commits <code>C3</code> and <code>C5</code> belong to? After thinking about it more, it seems that after the merge, commits <code>C4</code>, <code>C3</code>, and <code>C5</code> are &quot;equal&quot; in terms of the branching history and I can't tell which branch the three of them belong to. This is because after deleting <code>iss53</code>, there doesn't seem to be any information as to whether <code>C4</code> belonged to any historical branch any more than <code>C3</code> and <code>C5</code>.</p>
<p>I have found <a href=""https://stackoverflow.com/a/29258814/186904"">this answer</a> which says that it is better to think about this in terms of &quot;from which branches can this commit be reached&quot;. But does that mean <code>C4</code>, <code>C3</code>, and <code>C5</code> are all reachable from the <code>master</code> branch??? But how do you handle the branching parentage that happens in the diagram? Does that matter?</p>
<p>Also, the answer I linked to stated that there could cases where a commit cannot be reached by any branch, how can <em>that</em> happen? And what are its implications?</p>
<p>But my main question remains: How do I associate commits with branches?</p>
<p>P.S. A side/off-topic question that stems from this post would be: <em>Can a commit have more than two parents</em>?</p>
","5","186904","0","0"
"63146613","10691147","2020-07-29 04:59:53","1","2484","<git><github><branch><git-branch>","How to remove remote branch only from my local git?","<p>I know the command <code>git push -d &lt;remote&gt; &lt;branch_name&gt;</code></p>
<p>I want to delete remote branch only from <strong>my local git env</strong>. The command above removes remote branch from my local and remote github also.</p>
<p>However, if I had removed remote branch <strong>in github</strong> directly like this,</p>
<p><a href=""https://i.stack.imgur.com/a4a0w.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/a4a0w.png"" alt=""enter image description here"" /></a></p>
<p>there is no branch named <code>feature/search</code> in remote anymore, the command fails.</p>
<p>So, how can I remove remote branch in my local without interacting remote github?</p>
","3","10691147","",""
"52330784","4482350","2018-09-14 11:10:52","6","2719","<git><gitlab><git-branch>","A branch, deleted on gitlab, still exists in the command line?","<p>After merging a development branch devBranchA into the master, I deleted it on the web interface (precisely, on gitlab.com). If I then do a <code>git branch -r</code> to list all remote branches, I get that:</p>

<pre><code>origin/HEAD -&gt; origin/master
origin/devBranchA
</code></pre>

<p>Why  is that so? I already tried a <code>git pull</code>, but it did not shown any difference. </p>
","2","4482350","",""
"7815559","794380","2011-10-19 01:17:30","3","222","<git><branch><git-branch><git-remote>","Is checking out remote branches in git safe now?","<p>I've just started learning Git, and <a href=""http://git.or.cz/course/svn.html#remote"" rel=""nofollow"">the tutorial I'm using says that when cloning remote repositories, switching to a remote branch is a big no-no.</a> That is - if I've cloned a repository that has a branch names <code>branch1</code>, and I want to work on it, I need to use</p>

<pre><code>git checkout --track -b branch1 origin/branch1
</code></pre>

<p>to track it. However, when I tried to use</p>

<pre><code>git checkout branch1
</code></pre>

<p>Git replied</p>

<pre><code>Branch branch1 set up to track remote branch branch1 from origin.
Switched to a new branch 'branch1'
</code></pre>

<p>So, my common sense tells my that since that tutorial was written, Git's developers fixed that pitfall and made it so if someone tries to switch to a remote branch, Git automatically does it the right way and creates a local branch that tracks it. However, I can't find any reference to this change in the release notes or in a Google search.</p>

<p>So, did they fix it? Is it now safe to simply checkout those remote branches? Or maybe I misunderstood the warning in that tutorial, and it was referring to another pitfall I should watch out from?</p>
","0","794380","0","0"
"36287854","2595659","2016-03-29 14:55:20","1","1360","<git><git-branch><git-push><git-checkout>","One git command to create new local branch, push to origin, track origin","<p>A common part of my workflow is:</p>

<pre><code>git checkout -b new_branch origin/master
git push origin new_branch
git branch --set-upstream-to origin/new_branch
</code></pre>

<p>Is there a way this could be boiled down to one command?  I'd like to be able to set up an alias so that this can be done with something quick to type such as:</p>

<pre><code>gitnew new_branch parent_branch
</code></pre>

<p>A bash solution is acceptable, but would be neat if it were pure git.</p>
","0","2595659","",""
"7268931","","2011-09-01 10:16:52","2","868","<git><github><git-branch>","git mess -overwrite master with branch?","<p>I got myself into a right tailspin this morning and had to create a branch to revert to my last commit in. Now the master branch is a mess and the only thing i'm interested in is this new branch with the revert. How can i force master to be the same as the reverted branch?</p>
","0","","0","0"
"25480070","1305362","2014-08-25 06:23:48","2","1623","<git><git-branch>","How do I checkout the snapshot of the master branch from git at a given date/time?","<p>If a commit was made in other branches and merged into <code>master</code> after the given date/time, the changes in that commit should not appear in the snapshot, even though the commit was made before the given date/time</p>

<p>Option 2 in <a href=""https://stackoverflow.com/a/6990682/1305362"">this answer</a> doesn't do the job I need, as it simply sorts the commits chronologically and return the latest revision before the given date/time.</p>
","0","1305362","0","0"
"7278296","924479","2011-09-02 01:07:35","2","337","<git><svn><git-branch>","Is there a better way to recover git-svn branches?","<p>After cloning my SVN repo into GIT, I deleted in my GIT repository the SVN branches that I was not likely to use as I had not read of how to just load a specific branch.</p>

<p>Now I need them all back but could not easily recover them (One at a time would be a bit slow).
<em>git svn fetch</em> did not work for me as the trunk was up to date and the branches haven't change in a long time (even with changing around the git svn config)
But moving or removing the .git/svn directory and then 
<em>git svn fetch</em> caused a complete recovery.</p>

<p>But is there a better way ?</p>
","0","924479","",""
"62755337","13876771","2020-07-06 11:42:56","-2","145","<go><git-branch><go-modules>","how to find out which git-branch a dependency in go.mod belongs to by command-line?","<p>I want to write a shell program to check whether all go module dependencies in my project are on newest master version in their repositories. In particular, I want to know which branch each module is on. There is a file &quot;go.mod&quot; containing each dependency listed as <code>{module}-{commit time}-{commit ID}</code>. How can I get their git-branch name from SHA-1(commit id) or other message by shell program.</p>
<p>I have tried <code>go list -m -u all</code>, only showing the newest edition if the dependency is not up-to-date. etc. <em>git.xxx.com/project v0.0.0-20191119034146-e894bf51bdcd [v0.0.0-20200609070643-fd412b12b811]</em>. Without cloning the repos, can go module tools resolve this quetion?</p>
","2","13876771","",""
"25773967","761963","2014-09-10 19:54:37","6","1694","<git><git-branch><git-subtree>","Which remote branch is my git subtree tracking?","<p>Let's say there was a remote with a master, as well as a dev branch, and I added it into a subtree:</p>

<pre><code>$ git remote add rem [URL]
$ git fetch rem
$ git subtree add -P=./sub rem/dev
</code></pre>

<p>Now every time I run <code>git subtree pull -P sub</code>, the branch rem/dev will be fetched and merged into sub. Ok</p>

<p>But lets say later on <strong>I forgot</strong> whether I added from the master or dev branch. Other than inferring by comparing git logs, is there a way git will tell me which branch of rem is the subtree in sub/ tracking?</p>

<p>Subtrees are tricky...</p>
","5","761963","0","0"
"25776066","233428","2014-09-10 22:24:31","1","251","<git><git-branch><squash>","Overwrite git branch while keeping history","<p>Our team has been developing 2 versions of a project side by side.</p>

<p>The commits in the <code>master</code> branch were basically bugfixes to the old code,
while the <code>v2setup</code> branch contains a complete rewrite.</p>

<p>Had those bugfixes not occured I could simply squash the new branch back into the master,
but if I'm not mistaking that will only lead to annoying conflicts now.</p>

<p>So how could I do it?</p>
","0","233428","",""
"44339271","3358488","2017-06-03 01:02:34","1","223","<git><github><git-branch><github-pages>","Committing documentation to a git branch (gh-pages)","<p>I have generated documentation from javadoc in a <code>/docs</code> directory in the working directory of my git project.</p>

<p>I would like to make this documentation available at <code>github.io</code> by committing it to the <code>gh-pages</code> branch of my repository (this will make it automatically available at <code>http://username.github.io/projectname</code>).</p>

<p>Not sure how to go about it, though. If I switch to <code>gh-pages</code> by using <code>git checkout</code>, all the contents of my working directory will be switched to the contents of the <code>gh-pages</code>, right? This will remove the <code>/docs</code> directory from it.</p>

<p>I could make a copy of <code>/docs</code> somewhere else and copy it to the working directory after switching to gh-pages, but does that mean I will have to go over this manual process of copying <code>/docs</code>, switching branches, copying again, committing, switching back to <code>master</code> branch, every time I want to update the documentation? I assume there is a better solution, but I don't know what it might be.</p>
","0","3358488","",""
"7607575","805266","2011-09-30 08:00:41","3","310","<git><github><git-branch><git-rebase>","Rebasing to new versions in upstream git (GitHub) with losing all local changes","<p>I want to have the following version structure:</p>

<pre><code>                  (my private changes to 0.1.0) - A - B - C - ...
                    /
(upstream repo) - 0.1.0 - 0.2.0 - ...
                            \
                  (my private changes to 0.2.0) - D - E - F - ... 
</code></pre>

<p>I don't want to merge my changes with changes in upstream, because the upstream is developed rapidly and usually there are zillions of hard to resolve conflicts, because upstream code was significantly redesigned. When 0.3.0 is out, I'm going just to create an exact copy of it forgetting my private changes and then re-apply my private fixes one by one. But I don't want my old changes to disappear completely - I want them to sit somewhere still (on a separate branch?).</p>

<p><code>git rebase</code> is not what I want. According to <a href=""https://git-scm.com/book/en/v2/Git-Branching-Rebasing"" rel=""nofollow noreferrer"">Pro git book</a>, rebasing will try to re-apply A-B-C patches to 0.2.0. Here is an example situation between upstream 0.1.0 and 0.2.0 release dates:</p>

<pre><code>(upstream) - 0.1.0 - (my master) - A - B - C
</code></pre>

<p>Now 0.2.0 is out:</p>

<pre><code>              (my master) - A - B - C 
               /   
(upstream) - 0.1.0 - 0.2.0
</code></pre>

<p>I don't want to rebase my A - B - C changes because of too many conflicts. I want to label my A - B - C branch as 'my-0.1.0' and start a 'new' master branch from 0.2.0:</p>

<pre><code>              (my-0.1.0) - A - B - C
                 /
 (upstream) - 0.1.0 - 0.2.0 - (my new master)
</code></pre>

<p>I want my new master branch to be a clean copy of upstream 0.2.0, without any attempts to re-apply my old A-B-C changesets to it. So later I can cherry-pick A-B-C changes one by one if I need them in post-0.2.0 world.</p>

<p>How do I put the my-0.1.0 label? Is it a label, a tag, a branch? How do I start an empty master branch off 0.2.0? Note that there are two different repos: my repo and upstream repo. Do I need to copy upstream branch from upstream repo to my repo? How I ensure that 0.2.0 is pulled after 0.1.0, and not after C? If I just do a pull request after </p>

<p>(upstream) - 0.1.0 - (my master) - A - B - C</p>

<p>I get </p>

<p>(upstream) - 0.1.0 - (my master) - A - B - C - ""0.2.0 merged with ABC""</p>

<p>which is not what I want.</p>

<p>Also sometimes I want to push certain change (e.g. E) back to upstream. Is it possible to create a pull request for E change only? In darcs this is possible. If it's not possible with Git/GitHub, then I will need to create a separate branch, reapply the changes in E manually. How should I proceed?</p>
","0","805266","",""
"25786808","4030436","2014-09-11 11:55:00","6","4826","<git><git-branch><git-merge><branching-and-merging><git-checkout>","How many types of branches exist in git?","<p>Struggling to understand how to work with remote branches and how many types of git branches there are I somehow got lost in differing namings and git versions. Here's a few things that happened to me, while believing there are only TWO types of git branches: </p>

<ol>
<li>I unwillingly created a non-tracking local branch (so push and pull didn't work)</li>
<li>(I therefore decided to abandon automatic push/pull for a while)</li>
<li>I merged origin/master into my current branch without having fetched from origin before</li>
<li>I merged master into my current branch without having merged origin/master into it first. </li>
</ol>

<p>So, after having spent some time mainly at <a href=""http://git-scm.com/book"" rel=""nofollow noreferrer"">http://git-scm.com/book</a> and on stackoverflow, I got to the conclusion that I can actually describe FOUR instead of the commonly described two types (local vs remote) of git branches. I decided I would try to draw my understanding of how to work with remote branches, I know it is extremely reduced, but the idea would be to point in the right direction and get an idea of the different branch levels: </p>

<p><strong>Edit:</strong> New picture, incorporating dunni's comment.
<img src=""https://i.stack.imgur.com/8WMyq.png"" alt=""enter image description here""></p>

<p>What do you think, how much did I get wrong? What should be added/noted?</p>
","5","4030436","",""
"25796531","1695680","2014-09-11 20:39:29","0","533","<git><git-branch><git-plumbing>","git refs/heads is a sub directory safe? here, or should it be somewhere else?","<p>I have a series of branches with a prefix, I wish to reuse this prefix but not group them with the existing branches with this prefix (which are now obsolete). I Have for the time made a subdirectory in <code>.git/refs/heads</code>.</p>

<p>I want to know if there are any adverse side effects, or better recommendations for where to put a set of branch names to give them a prefix. They do not need to be cloned/pushed/pulled to any other repositories at this time, though such ability may be nice.</p>

<p>P.S. It would be nice if these branches remained easy to checkout as well.</p>
","1","1695680","",""
"25805095","723549","2014-09-12 09:31:00","1","97","<git><git-branch>","git get the horizontal line in git command","<p>I just add some new files, modifies, one folder in my git repo, I use git branch to display my local git repository, I get below results:</p>

<pre><code>$ git branch
  -
  dev_game_v3
* master
</code></pre>

<p>what's the meaning of the horizontal line? any error here about my repo?</p>
","1","723549","",""
"25806425","601299","2014-09-12 10:40:35","4","1169","<git><git-branch>","Why does git log not show in chronological order, and code has been deleted?","<p>We are having a strange issue with our git branch that I'm hoping is more about our understanding, than a problem as such. I will describe our workflow the best I can to make sure we're not missing something obvious:</p>

<p>One of the team made a branch with <code>git checkout -b newproject</code>, then made a few changes, then pushed those changes with <code>git push -u origin new project</code>. Then other developers joined the project, using <code>git fetch origin</code> and then <code>git checkout newproject</code>.</p>

<p>Next, the workflow is as follows. Developers make changes, <code>git add</code> the new and modified files, and <code>git commit</code> periodically. Then when they want everyone else to see their changes, they will do a <code>git pull origin newproject</code> to get any changes since the last pull, followed by a <code>git push -u origin newproject</code>.</p>

<p><strong>Note:</strong> In <code>/etc/gitconfig</code> we have the following:</p>

<pre><code>[branch]
autosetuprebase = always
</code></pre>

<p>Often we'll get conflicts when <code>pull</code>ing, as we're working on the same files a lot. When we do, we get the instruction to manually resolve the conflicts then run <code>git rebase --continue</code> We open the files, select the code we want to keep and make necessary changes and save. Then, we <code>git add filename.ext</code> when they're resolved, then run <code>git rebase --continue</code>. After this has finished, with <code>git status</code> showing there are no changes, on the <code>newproject</code> branch and ahead by X commits, we use <code>git push -u origin newproject</code>.</p>

<p>We noticed this morning that large chunks of code suddenly went missing. When running <code>git log</code>, the first thing we noticed was that it wasn't in chronological order, <a href=""http://git-scm.com/docs/git-log#_commit_ordering"" rel=""nofollow"">as the manual suggests</a>.</p>

<pre><code>commit bc0903fc5795425908f335cebcab11055869d75d
Author: billy &lt;billy@our.biz&gt;
Date:   Thu Sep 11 15:29:37 2014 +0100

    Add responsive skin to sectionProducts

commit 7833850313c2974c3b8cbc75383b1834fbf4bf93
Author: bob &lt;bob@our.biz&gt;
Date:   Thu Sep 11 14:44:37 2014 +0100

    Rewrite the way breadcrumbs are generated and output to the page

commit 09d1318d9e7249e9e45826d7ddc33f23fc5974b1
Author: bob &lt;bob@our.biz&gt;
Date:   Thu Sep 11 11:25:21 2014 +0100

    Fix styles for video and featured product boxes, fix miscellaneous bugs and remove obselete code

commit 13f01644935092b490be55b6738f500f0f5fcb2e
Author: bob &lt;bob@our.biz&gt;
Date:   Thu Sep 11 08:31:03 2014 +0100

    Fix section.html, add featured products, star buy products and product videos

commit 01b3bfb3c20f74ea437b221711deabc970f670d8
Author: bob &lt;bob@our.biz&gt;
Date:   Fri Sep 12 08:45:19 2014 +0100

    Refine code for breadcrumbs

commit 0303bae79f7ff2e84221e0db3f88d3630d4afa91
Author: bob &lt;bob@our.biz&gt;
Date:   Thu Sep 11 15:53:06 2014 +0100

    Modify getBreadcrumbTrail so that it attempts to take the correct route when recursing

commit 1ae5f00814bf216eda5449a6e8d89123b124fad8
Author: bob &lt;bob@our.biz&gt;
Date:   Thu Sep 11 14:44:37 2014 +0100

    Rewrite the way breadcrumbs are generated and output to the page
</code></pre>

<p>It also appears some commits are repeated. Another point to note is that one of the developers mentioned that when they saw some conflicts and resolved them, then ran <code>git rebase --continue</code>, they were shown another list of conflicts. This happened a few times before they were all resolved, before being able to push.</p>

<p><strong>Update:</strong> We've noticed that the issues is a little more explainable that initially thought. Right up until, and including, when <strong>bob</strong> pushed his commits, up to commit <code>01b3bfb3c20f74ea437b221711deabc970f670d8</code> with date <code>Fri Sep 12 08:45:19 2014 +0100</code>, everything was correct. It was chronologically ordered and the code was correct. The next 3 commits by <strong>bob</strong> are in fact the same 3 commits before the commit I just mentioned, and were added when <strong>billy</strong> pushed his changes. So, they are <strong>bob</strong>'s commits, but somehow re-added by <strong>billy</strong>. Also notice that the final commit wasn't re-added, which is where the bulk of the problems seem to stem from.</p>

<p>To illustrator this a little better I present the following:</p>

<pre><code>87e9a4e Add sectionGroup.html to templates_safelincs
bc0903f Add responsive skin to sectionProducts
7833850 Rewrite the way breadcrumbs are generated and output to the page
09d1318 Fix styles for video and featured product boxes, fix miscellaneous bugs and remove obselete code
13f0164 Fix section.html, add featured products, star buy products and product videos
01b3bfb Refine code for breadcrumbs
0303bae Modify getBreadcrumbTrail so that it attempts to take the correct route when recursing
1ae5f00 Rewrite the way breadcrumbs are generated and output to the page
2cc0525 Fix styles for video and featured product boxes, fix miscellaneous bugs and remove obselete code
cc3c86b Fix section.html, add featured products, star buy products and product videos
</code></pre>

<p>Can anyone explain what we're doing wrong here?</p>
","5","601299","0","0"
"25834054","478271","2014-09-14 14:01:49","3","1209","<git><visual-studio><compilation><git-branch>","How to setup the Output and Intermeidate directory in visual studio to be dependent on current git branch?","<p>I'm looking for a solution, to avoid lot of recompiling when moving from branch to branch in git.
Using different folders for different branches is solution, but It just created chaos in my workflow.</p>

<p>The best solution I can think of would be to pass the git branch as the options $ variable used in project settings, so I could set the ""Output directory"" to something like</p>

<pre><code>..\bin\$(branch)\$(Configuration)$(Platform)\
</code></pre>

<p>Similar with intermediate directory.</p>

<p>Is something like this possible to configure?</p>

<p>Edit:
The problem is, that even when the output/intermediate directory is different per branch (or moved from archive when changing branches), the precompiled headers are always recompiled anyway, so the project is recompiled as well.</p>
","0","478271","0","0"
"7677327","4827","2011-10-06 16:16:09","1","59","<git><web><git-branch>","Is it possible to view a branch of a website's clone using git?","<p>I have a working version of a website that is a clone of the DocumentRoot located in my /home/dmaxwell/public_html folder.  I would like to branch off of my working clone and try some different things, however, when I go to check to see any progress the master branch is the version that the browser shows.  Is there a way to get the browser to show the experimental branch or am I limited to only using the master branch?</p>
","0","4827","",""
"7936001","151278","2011-10-28 23:50:20","3","103","<git><branch><git-branch>","move branch so that it branches off from master in git","<p>i made a mistake so my branch now is:</p>

<pre><code>master -&gt; a -&gt; b
</code></pre>

<p>but its suppose to be</p>

<pre><code>master -&gt; a
master -&gt; b
</code></pre>

<p>now b has a's changes and now ive committed a bunch of stuff on b already. is there any way i can do  so branch b braches off from master and not from a? </p>
","1","151278","",""
"26081470","1454282","2014-09-28 03:58:01","0","386","<git><workflow><git-branch>","What is a git workflow","<p>What's a git workflow and where do I need to write it? <strong>Paper</strong>? <strong>Git Diagram</strong>?
I've seen a lot of websites, threads and I don't know what is a git worfklow and where do I need to write the workflow. I think it's a good idea to begin to use the workflow.</p>
","0","1454282","0","0"
"26090689","1843451","2014-09-28 23:32:52","2","1364","<git><github><version-control><git-branch><git-remote>","git set-upstream-to VR track","<p>Recently I tried to set my local branch <code>feature</code> to track changes on my remote branch like so:</p>

<pre><code>$ git branch --set-upstream feature origin/feature
</code></pre>

<p>Everything went well, however I got that message saying:</p>

<pre><code>The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
</code></pre>

<p>My question is how to use <code>track</code> and <code>set-upstream-to</code> options and if there is a significant difference between them?</p>

<p><strong>UPDATE:</strong> I'm using <code>git</code> version <code>1.8.4</code></p>
","0","1843451","0","0"
"7959462","344286","2011-10-31 20:40:13","6","1419","<git><git-branch>","Is there any harm letting a git branch ""grow old""?","<p>So I've heard of the <a href=""http://codingsolutions.blogspot.com/2011/07/using-branch-per-feature-cleanup-across.html"" rel=""noreferrer"">branch-per-feature</a> workflow using Git, and I've also read some reasons why <a href=""http://martinfowler.com/bliki/FeatureBranch.html"" rel=""noreferrer"">this could be a bad idea</a>. </p>

<p>My real question is this - if I'm developing just a small feature (like a simple regex time parser), after merging this branch back into the trunk, what happens (or should happen) to that branch? Does it just sit there? Since I created it for that one, very specific feature, I can't think of a reason I'd have to go back and use the branch. Should I somehow mark this branch as defunct, or do I just move on and forget about it?</p>

<p>Thanks</p>
","5","344286","0","0"
"63271578","13662390","2020-08-05 18:39:03","1","168","<bash><git><git-branch><git-bash>","More efficient way to parse git commands?","<p>In-short: would like prompt to appear faster, although it's not sluggish.</p>
<p>Making a custom prompt for my bash terminal; the following list is in my /etc/bash.bashrc</p>
<p>I already use the &quot;gitstatus&quot; repo, which speeds up certain git commands. I think slowdowns come from the number of commands themselves. I want to know if I can generally use LESS git commands to do the same thing.</p>
<p>Here is a list of everything I do:</p>
<ol>
<li>Obtain branch (if head detached, commands requiring it skipped)</li>
<li>Check for upstream</li>
<li><code>git rev-list --left-right --count &quot;$branch&quot;...&quot;$upstream&quot;</code> to check if ahead or behind</li>
<li>Check for stashes</li>
</ol>
<p>EDIT: Disregard #5. I called command #8 first, obtained this information, and appended #5 to <code>PS1</code> before command #8</p>
<ol start=""5"">
<li><p>Check for dirty branch (done separately; I know #8 provides this info, but this command is called earlier on, and I like the symbol there)</p>
</li>
<li><p>Check for remote</p>
</li>
<li><p>Check for untracked files (separately than the bullet below, as they are located early in the prompt as I treat them as a higher priority &quot;problem&quot;)</p>
</li>
<li><p>All at once check for modified, added, removes, or unmerged files by parsing <code>git status -s</code></p>
</li>
</ol>
<p>These are run using one git command per line. Will provide an image if needed as well.</p>
<p>On Bash for Windows terminal.</p>
","2","13662390","0","0"
"7987687","592254","2011-11-02 21:44:36","256","121741","<git><git-branch><git-checkout>","What is the difference between ""git branch"" and ""git checkout -b""?","<p>I used <code>git checkout -b</code> to create a new branch. I think that <code>git branch</code> does the same thing.
How do these two commands differ, if they differ at all?</p>
","1","592254","0","0"
"44650182","691505","2017-06-20 10:13:16","0","120","<git><version-control><git-branch>","git branch not showing as ahead of origin after commit","<p>I have a git feature branch which I created from the development branch with:</p>

<p><code>git checkout -b CRM-feature-branch develop</code></p>

<p>I then pushed this to he remote with:</p>

<p><code>git push origin HEAD</code></p>

<p>When I commit to this branch locally and do a <code>git status</code> it doesn't show my branch is ahead.</p>

<p>Is this because I created the branch on the origin with <code>git push origin HEAD</code> and not <code>git push origin -u CRM-feature-branch</code>?</p>
","0","691505","",""
"26154922","1041837","2014-10-02 05:29:29","0","189","<git><git-branch>","git branching strategy for a new project with a small dev team","<p>We are a team of 3 members and we are about create a new iOS project in git.
As a small team, all three developers will work on all modules.</p>

<p>Is it better to create a separate branch for each developer and merge to master when we deploy onto production server?</p>

<p>Is it okay to work all developers on the same master branch?</p>

<p>Can any one please suggest me best git branching strategy for new new project?</p>
","0","1041837","",""
"26155869","788252","2014-10-02 07:06:36","0","46","<git><github><branch><git-branch><branching-and-merging>","github - code pulled from master,push changes to new branch","<p>I am working on a project where I created a local repo from ""master"" github branch.However a new branch was forked from the master a while later.Now I want to push my changes to the new branch.I would like to avoid merging for now and just push my current local code-base to the new branch.Any suggestions on the right approach?</p>
","1","788252","",""
"8276847","770670","2011-11-26 06:56:04","1","137","<git><ruby-on-rails-3><workflow><git-branch>","transition branch to be master with git","<p>I've converted an application from Rails 3.0 to 3.1.3 and have it on a branch.  I would like to transition the rails 3.1.3 branch to be the new master and a merge doesn't make sense to me.  What's the best way to do this?</p>

<p><strong>Update</strong></p>

<p>I explained this wrong.  I moved to Rails 3.1.3 from 3.0 by creating a new rails projects and moving things over since Rails 3.1 is quite a big change in directory structure, etc.  Right now they are actually in two different repositories but I don't want to lose history and abandon the old repository.  I'd rather have the Rails 3.1.3 version as the master of the old repository and move the 3.0 version to another branch and eliminate the need for multiple repositories. </p>
","1","770670","0","0"
"63381853","1084174","2020-08-12 17:30:27","0","334","<git><github><version-control><git-branch><archive>","Any way to turn all git branches into folders for a repository?","<p>I have several branches in a git repo.</p>
<pre><code>-repo
  -- branch1
  -- branch2
</code></pre>
<p>For some reason I need to move the repo into another repo without histories. As <code>branch1</code> and <code>branch2</code> differs in code so it would be helpful for me If I can automatically create branch to folder map inside repo in the new location. <strong>Is there any way to do so?</strong></p>
<p>Actual problem is I have single git repo called archives in GitHub inside which I need to keep several repo with browse-able source code. <strong>What are other options available in my hand?</strong></p>
","1","1084174","",""
"26138444","24108","2014-10-01 09:42:22","0","302","<git><git-branch>","What happens to commits left behind from git branch -D","<p>I worked on an experimental branch and now want to delete it. Running <code>git branch -d experimental</code> outputs</p>

<pre><code>error: The branch 'experimental' is not fully merged.
If you are sure you want to delete it, run 'git branch -D experimental'.
</code></pre>

<p>After running deleting the branch with -D, what happens to the commits left behind?</p>
","1","24108","",""
"26139544","3956515","2014-10-01 10:44:32","2","15211","<git><github><git-branch>","How to create branch in master repository using git bash?","<p>I just wanted to create branch using git bash so anyone can give me guidance how to do it?</p>
","1","3956515","",""
"44672907","4966471","2017-06-21 09:59:57","3","2720","<git><branch><git-branch><smartgit>","fork git branches and see them with SmartGit","<p>According to this <a href=""https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"" rel=""nofollow noreferrer"">post</a> I want to see into the SmartGit git client the ramifications for the new branches. Bellow, I will explain in detail the steps I do and what SmartGit displays and what I expect to be displayed:</p>
<p>Steps:</p>
<p>s1) create a local git repository by cloning the remote one:</p>
<pre><code>git clone https:/myusername:mypassword@remoteRepoAddress/repo3
</code></pre>
<p>s2) cd to repo3 git local repository that I just created and then add a text in a new file:</p>
<pre><code>echo &quot;aaa&quot; &gt;&gt; file1
</code></pre>
<p>s3) add the file to be commited:</p>
<pre><code>git add .
</code></pre>
<p>s4) commit the changes:</p>
<pre><code>git commit -m &quot;commit1&quot;
</code></pre>
<p>s5) add another row to the file1 and commit changes</p>
<pre><code>echo &quot;bbb&quot; &gt;&gt; file1
git add .
git commit -m &quot;commit2&quot;
</code></pre>
<p>s6) push changes to the remote repository:</p>
<pre><code>git push origin master
</code></pre>
<p>Now, the SmartGit displays a single line, for the master branch, ant the two commits:</p>
<p><a href=""https://i.stack.imgur.com/NtX0n.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NtX0n.png"" alt=""enter image description here"" /></a></p>
<p>s7) Create another branch &quot;newBranch1&quot;:</p>
<pre><code>git checkout -b newBranch1
</code></pre>
<p>s8) then I make one commit on this branch:</p>
<pre><code>echo &quot;row1&quot; &gt;&gt; file2
git add .
git commit -m &quot;commit1_newBranch1&quot;
</code></pre>
<p>Now, the SmartGit displays:</p>
<p><a href=""https://i.stack.imgur.com/9xdOi.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9xdOi.png"" alt=""enter image description here"" /></a></p>
<p>According to &quot;Figure 20&quot; in the <a href=""https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"" rel=""nofollow noreferrer"">post</a> mentioned at the beginning, it is ok: the commit has advanced with one node against the last commit on the master branch.
s9) Then I switch back to the master branch and from the last commit point on master I create another branch &quot;newBranch2&quot;; I add a new file &quot;file3&quot; with the text &quot;row1&quot;, then I commit changes:</p>
<pre><code>git checkout master
git checkout -b newBranch2
echo &quot;row1&quot; &gt;&gt; file3
git add .
git commit -m &quot;commit1_newBranch2&quot;
</code></pre>
<p>Now the SmartGit displays:</p>
<p><a href=""https://i.stack.imgur.com/fWXeN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/fWXeN.png"" alt=""enter image description here"" /></a></p>
<p>and I expect to see a tree like in &quot;Figure 21&quot; in the post mentioned above. Or as bellow:</p>
<pre><code> newBranch2 o   o newBranch1  
             \ /  
              o master's head
              |
              o
              |
</code></pre>
<p>Am I misunderstanding how the git an/or SmartGit works?
If so, please guide me with concrete answers.
Thansk in advance</p>
","0","4966471","",""
"8229737","298479","2011-11-22 15:57:48","42","18877","<git><git-branch>","How to delete all remote git branches which have already been integrated?","<p>At work we are using topic branches which are integrated into a few (3) master branches at some point.
Now I'd like to delete all topic branches from my <em>remote</em> repository which have been fully integrated into a master branch. If that's not possible, retrieving a list of local branches which have been integrated would be fine, too.</p>
","1","298479","0","0"
"8254504","943100","2011-11-24 09:08:40","2","3575","<git><repository><git-branch><git-push>","git push local branch to remote repository","<p>I cloned a friend's git repository to my workstation. I then created my own branch and started working on it. I have also been given the ssh private key of the remote repository where I originally cloned from.</p>

<p>Now, when I try to push my changes to that remote repo, I get the ""fatal: The remote end hung up unexpectedly"" error.</p>

<pre><code>git push origin anshumanbhartiya
fatal:The remote end hung up unexpectedly
</code></pre>

<p>Here, anshumanbhartiya is the name of the branch I created to work on and I am trying to push this branch to the origin where I cloned from.</p>

<p>My question is I know I should be using the key provided to me to push the changes but I just cant figure out how to use that key. In ~/.ssh/ directory, I already have my own private and public key stored that I generated while setting up github. I dont know what to do with my friends ssh key.</p>

<p>Please help! </p>
","0","943100","",""
"63383276","169252","2020-08-12 19:08:51","1","340","<git><git-branch><git-checkout><git-repo>","Unequivocally checkout a branch and get latest version in git from a script","<p>I am creating a shell build script.</p>
<p>I want it to be called like this:</p>
<p><code>./build.sh REPONAME BRANCHNAME</code></p>
<p><code>$REPONAME</code> corresponds to a remote. I am assuming that the remote exists.
<code>$BRANCHNAME</code> is a branch existing on <code>$REPONAME</code>.</p>
<p><code>$BRANCHNAME</code> may have never been checked out on this computer.</p>
<p>So I have this:</p>
<pre><code>cd $REPOPATH
git fetch $REPONAME $BRANCHNAME
git checkout --track $REMOTE/$BRANCHNAME
git pull $REPONAME
echo `git rev-parse HEAD`
</code></pre>
<p>This kind of works but I am experiencing several issues:</p>
<ul>
<li>I have to enter my key's private key twice - I guess once for fetch and once for pull. Not critical but if it would be just once, would be better.</li>
<li>Because of <code>--track</code>, if <code>$BRANCHNAME</code> was already checked out in the past, I get</li>
</ul>
<blockquote>
<p>fatal: A branch named $BRANCHNAME already exists</p>
</blockquote>
<p>. No idea how fatal that really is but I don't like to see a fatal in the output</p>
<ul>
<li>Without the <code>--track</code>, I get into detached mode, which I also do not like</li>
<li>With just <code>git checkout $BRANCHNAME</code> I was suddenly getting messages about &quot;ambiguous&quot; branches. Maybe because <code>$BRANCHNAME</code> could be on several remotes?</li>
</ul>
<p>So what is the cleanest and unequivocal way to checkout a branch from a remote, get its latest version and build from it?f</p>
<p>It's astonishing how after so many years using <code>git</code> I still don't have a grasp of what feels like must-know skills.</p>
","0","169252","",""
"63385030","3882565","2020-08-12 21:37:31","1","277","<git><git-branch><git-checkout><git-fork><upstream-branch>","Difference between `git checkout -b newbranch upstream/newbranch` and `git checkout newbranch`","<p>I have read <a href=""https://stackoverflow.com/a/4410502/3882565"">this</a> answer about importing an upstream branch into a fork. The answer suggests using <code>git checkout -b newbranch upstream/newbranch</code> to switch to the new branch. I always just used <code>git checkout newbranch</code> in this case and it worked aswell. Is there any difference between these commands? My guess is that I only need <code>-b</code> to specify a branch name in case it should be different from <code>upstream/newbranch</code>. But if I just want the branch with its original name <code>newbranch</code>, is there any difference between using <code>git checkout -b newbranch upstream/newbranch</code> and <code>git checkout newbranch</code>? I have read the <a href=""https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt-emgitcheckoutem-b-Bltnewbranchgtltstartpointgt"" rel=""nofollow noreferrer"">docs</a> of <code>-b</code> but that doesn't actually answer my question.</p>
","0","3882565","",""
"8640227","94154","2011-12-27 00:44:05","5","409","<macos><git><heroku><git-branch>","Only allow 'git push heroku master' from the master branch","<p>I recently set up dev/staging/production environment on OSX Lion. I have a git repo with a development and a master branch, and a Heroku instance with master and staging origins. </p>

<p>The basic workflow is to develop in the development branch, merge into master, deploy to staging, then finally deploy to production. </p>

<p>I'd like to prevent Heroku deployments when I'm in any branch that isn't master, or at a minimum display a warning (e.g. ""Would you like to continue? y/n"").</p>

<p>Is this possible? Is there a git or Heroku feature that facilitates this, or would I need to write a bash script?</p>
","3","94154","0","0"
"26441367","1341556","2014-10-18 15:26:43","1","40","<git><github><git-branch>","will a newly created and pushed local branch will clash if there is alreay a branch with the same name in the github?","<p>I have question about Git. here is the scenario
say I have created a local branch and pushed it to the origin master(github)(not merged just pushed and pull request created. Then deleted the local branch.</p>

<p>Now if I create another local branch with the same name, commit and push it to the origin master on github what will happen ?</p>

<p>Will be a new branch created on github or this commit will update the previously created pull request ?</p>

<p>I hope my question is clear enough to understand.</p>

<p>Thanks.</p>
","2","1341556","0","0"
"8660883","75182","2011-12-28 20:27:53","2","599","<git><git-branch><cherry-pick><transplant>","How to achieve a private branch in git that ""floats"" when merging with upstream?","<p>I have a fork of another organization's repository.  I'm at the the latest tag in the repo, which is not the head, and I've created a branch from that tag which will never be pushed upstream.  That's why I consider the branch private.</p>

<p>I've made commits to my private branch and am using that code in my production environment.  When a new tag is made to the upstream repository, I want to be able to pull their changes.</p>

<p>However, I'd like to always keep my commits in a neat stack on top of their last tag.  I don't want to merge then, since my commits will end up living far back in the history and I want to see them right on top so I can work with them easily when I use certain tools on my repository.</p>

<p>So really, I want a ""floating"" branch, one that I can transplant to an arbitrary point when I bring the upstream changes to my repository.</p>

<p>[edits]
I don't believe I can use rebase, however, since that's a history-rewriting operation.  You see, I use my repository on two machines, my development and production.  I make my commits on the development machine, push to github, then pull to production.  All of this has nothing to do with the changes on the upstream repository that I originally forked from.</p>

<p>I'm not entirely clear on transplanting, cherry-picking or whatever other tool might be suited.  Whichever tool it is though, I gather it shouldn't rewrite history.  From my reading, I see that rewriting repo history is a no-no when pushing .  So I'm not sure what commands I should be using that will transplant a branch without rewriting history.</p>

<p>If I were using mercurial, I might consider something like a version-controlled mq.  I don't know the analogous solution for git, if there is one, or whether there is another, better-suited tool for git.</p>

<p>[edit]</p>

<p>After evaluating the responses I got here, I finally determined that cherry-picking was the right answer.  In all cases, rebase removes history, and since this is a shared repository, removing history is unacceptable, at least according to every source I've read.</p>

<p>Cherry-picking, however, copies the commit to my working tree without removing it from its original location.  So I can plant a copy of my changes on top of the latest tag and have them in a nice neat pile.</p>

<p>For the record, I also tried to do this with Mercurial, by using the hg-git extension which lets you use hg to clone a git repository.  This had pluses and minuses.  The biggest minus was that when I finished using it, it couldn't push.  hg-git works happily until that point, then tells you that it doesn't push with hg 1.9.  Bogus, to say the least.  The other minus was that cloning and pulling a large set of changes is extremely slow.  However, mq and TortoiseHg's merge conflict resolution tools are a vast improvement over git cherry-pick and Smartgit's merge conflict resolution.  I wish hg-git could have worked.</p>

<p>I guess that in the end, ""floating"" wasn't such a good description for my change branch, since the result is to copy it rather than move it.  Sorry for my perhaps poor description, I was still figuring out exactly what the options were.  Thanks for the help.</p>
","3","75182","",""
"26502970","2058954","2014-10-22 08:13:56","27","19306","<git><github><merge><git-branch><git-subtree>","Merge multiple git repositories into one, keeping branches history","<p>I have four separate projects. They have their own git repository. and the same name of branches for all projects.</p>

<pre><code> /project/
 /project/projA/
 /project/projA/.git/
 /project/projB/
 /project/projB/.git/
 /project/projC/
 /project/projC/.git/
 /project/projD/
 /project/projD/.git/
</code></pre>

<p>All git repositories have the same name of branches, and of course their own master branch.</p>

<h1>Question</h1>

<p>I would like to merge all projects into one like so:</p>

<pre><code>  /Project/.git/
  /project/projA/
  /project/projB/
  /project/projC/
  /project/projD/
</code></pre>

<h2>But</h2>

<p>i want to keep the history of all branches. </p>

<p>ps -> i have the same name of branches for all repo.
for exemple: a branche name used for all four project: V6-004</p>

<h2>Details</h2>

<p>I tried <strong><em>submodule</em></strong> and <strong><em>subtree</em></strong> but the both doesn't solve the issue.</p>

<p>I tried also this.</p>

<pre><code>  $ mkdir new_parent_project
  $ cd new_parent_project
  $ git init
  # Now we need to create the initial commit. This is essential.
  $ touch README.md
  $ git add README.md
  $ git commit -am ""initial commit""
</code></pre>

<p>after</p>

<pre><code>  # merge project ProjA into subdirectory ProjA
  $ git remote add -f ProjA http://GitUrl
  $ git merge -s ours --no-commit ProjA/V6-006
  $ git read-tree --prefix=ProjA/ -u ProjA/V6-006
  $ git commit -m ""merging ProjA into subdir: ProjA""
</code></pre>

<p>after</p>

<pre><code>  # merge project ProjB into subdirectory ProjB 
  $ git remote add -f ProjB http://GitUrl
  $ git merge -s ours --no-commit ProjB/V6-006
  $ git read-tree --prefix=ProjB/ -u ProjB/V6-006
  $ git commit -m ""merging ProjB into subdir: ProjB""
</code></pre>

<h2>but</h2>

<p>the projects are merged but i have only the history of V6-006. but i don't have history for the others branches.</p>
","6","2058954","0","0"
"52384889","7315895","2018-09-18 10:49:48","-1","4081","<git><github><git-branch>","How to pull a local repo in git?","<p>I need to pull a local repo to my new repo. Lets say i want to pull <code>original</code> to <code>duplicate</code>. I have seen solutions for it over here but there are some issues for both as explained below - </p>

<ol>
<li>Add branch <code>original</code> to remote by using <code>git remote add original</code> and then pulling this remote repo. But i have got a repo with same name on remote repo that contains company logic that i wont to mess around with. So i cant use this method.</li>
<li>Using <code>git pull --help</code> i found that i can pull the repo using <code>git pull /path/to/repo's .git/file</code> but these both branches are of same project so they have same <code>.git</code> file.</li>
</ol>

<p>Is there any other way i can do it?
Thanks in advance</p>
","4","7315895","",""
"52389648","","2018-09-18 15:08:42","1","38","<git><git-branch>","git push complete and separate branch to remote repository","<p>I have a Git Server...</p>

<p>My Partner created a new branch....</p>

<pre><code>cd C:\profaNew\ProjectosJava
git checkout -b diana
git branch
git add .
git commit -m ""Nuevo Proyecto Base""
git remote add origin git@192.168.5.200:/srv/git/project.git
git push -u origin diana
</code></pre>

<p>Now in my machine, I hope view her branch, But I got:</p>

<pre><code>C:\Migracion\project (master -&gt; origin)
λ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master

C:\Migracion\project (master -&gt; origin)
λ git branch -r
  origin/HEAD -&gt; origin/master
  origin/master

C:\Migracion\project (master -&gt; origin)
</code></pre>

<p><strong>How Can I get download the branch <code>diana</code>?</strong></p>
","1","","",""
"8493898","288190","2011-12-13 18:00:49","2","1212","<git><git-branch>","rebranch previous commits in git","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/3168370/git-how-to-move-some-commits-to-new-branch"">git: how to move some commits to new branch</a>  </p>
</blockquote>



<p>I have git master branch on which I have done many commits. I now do realize that the last four commits should have been on a separate branch, What is the easiest way to achieve this?</p>
","0","288190","",""
"8496358","210481","2011-12-13 21:24:28","7","26984","<git><git-branch><git-flow><remote-branch><feature-branch>","How to share a git feature (or topic) branch with multiple developers","<p>I'm following the the workflow described <a href=""http://nvie.com/posts/a-successful-git-branching-model/"" rel=""noreferrer"">here</a>, as I found many references pointing to this page as a good workflow. As mentioned in the article, ""feature"" branches are shared between developers, but do not go to the central repository. </p>

<p>Let's say a developer ""A"" starts a new feature branch with <code>git checkout -b newfeature develop</code>. Now let's say that developer ""B"" needs also to work on this feature. This is my problem.</p>

<p>What I did:</p>

<ol>
<li>developer ""B"" adds developer A's machine as a remote</li>
<li>developer ""B"" runs <code>git branch remoteA/newfeature</code></li>
<li>developer ""B"" works on this branch, commit his work and pushes the changes back to remoteA. </li>
</ol>

<p>Step 3 is not working, right now. I get a message:</p>

<blockquote>
  <p>remote: error: By default, updating the current branch in a non-bare
  repository is denied, because it will make the index and work tree
  inconsistent with what you pushed, and will require 'git reset --hard'
  to match the work tree to HEAD. </p>
  
  <p>remote: error: You can set 'receive.denyCurrentBranch' configuration
  variable to 'ignore' or 'warn' in the remote repository to allow
  pushing into its current branch; however, this is not recommended
  unless you arranged to update its work tree to match what you pushed
  in some  other way. </p>
  
  <p>remote: error:  To squelch this message and still keep the default
  behaviour, set receive.denyCurrentBranch' configuration variable to
  'refuse'.</p>
</blockquote>

<p>I have already set <code>sharedRepository = true</code>, but it did not help.</p>

<p>I have 2 questions:</p>

<ol>
<li>what's the correct way to share feature branches between developers?</li>
<li>how can I push back the changes in developer B's repository to developer A's original one?</li>
</ol>
","1","210481","0","0"
"26312204","2674519","2014-10-11 07:25:56","0","96","<git><git-branch>","git workflow for case where collaborators cannot see each other's work only main owner can","<p>Going to work on a project where I will be handling back end development and some guy would be handling front end development. How can I setup the project on git so that the front end developer cannot see the code of back-end ?</p>

<p><strong>I thought of separate branches :-</strong></p>

<ol>
<li><p>Master (backend + Frontend)</p></li>
<li><p>Backend </p></li>
<li><p>Frontend (frontend developer will have only access to this branch )</p></li>
</ol>

<p>But after some R&amp;D I came to know that its not possible in Git.</p>

<p>What are the alternatives ?</p>
","4","2674519","0","0"
"26912854","","2014-11-13 15:49:43","0","47","<git><git-branch><git-merge>","How to find out what files were changed after a branch was made in git?","<p>I had a branch called master. Then a new branch called hotfix-21 off of master. Then changes were made and committed. Then hotfix-21-2 branched off of hotfix-21. Then changes were made and committed to that. All in all a critical bug was fixed, but it took a lot of changes in a lot of files in a big project. While the hotfix was being worked on the master branch moved forward. Now I want to make the hotfix-21-2 changes into master, but since the master structure changed... I want to make all of the changes myself. The person that worked on hotfix-21-2 doesn't work here anymore so I'm kind of lost with how to make this merge. I am just going to compare all of the files myself and make the necessary changes, but I just need to find exactly which files were changed in hotfix-21-2 from master and then I can begin.</p>

<p>Any idea on how to do this?</p>
","0","","",""
"26932503","4203061","2014-11-14 14:43:21","22","17121","<git><git-branch><gitlab>","Property to prevent gitlab from protecting default branches","<p>With version 7.4 gitlab changed the behaviour of protected branches in new projects.</p>

<p>In every new project the default branch e.g. master is a protected branch, meaning developers are not able to push to it. In my company a lot of developers work on the default/master branch and are now struggeling when starting a new project.</p>

<p>My Question: Is there a property in the ui or in the <code>gitlab.rb</code> to restore the pre 7.4 behaviour and to not protect the default branch?</p>
","3","4203061","0","0"
"27433975","519990","2014-12-11 22:56:18","1","378","<git><git-branch>","Unable to get rid of git line ending issues","<p>On a current project, we have multiple users editing the repository from multiple machines such as Windows, OSX, and Ubuntu. I have tried various settings to keep the line endings normalized, but I continuously get notices that random files in the repo will have its line endings change.</p>

<p>First off, I have this git attributes file in my repository:</p>

<pre><code># These settings are for any web project

# Handle line endings automatically for files detected as text
# and leave all files detected as binary untouched.
* text=auto

#
# The above will handle all files NOT found below
#

# Documents
*.doc      diff=astextplain eol=lf
*.DOC      diff=astextplain eol=lf
*.docx     diff=astextplain eol=lf
*.DOCX     diff=astextplain eol=lf
*.dot      diff=astextplain eol=lf
*.DOT      diff=astextplain eol=lf
*.pdf      diff=astextplain eol=lf
*.PDF      diff=astextplain eol=lf
*.rtf      diff=astextplain eol=lf
*.RTF      diff=astextplain eol=lf
*.md       text             eol=lf
*.adoc     text             eol=lf
*.textile  text             eol=lf
*.mustache text             eol=lf
*.csv      text             eol=lf
*.tab      text             eol=lf
*.tsv      text             eol=lf
*.sql      text             eol=lf

# Graphics
*.png  binary
*.jpg  binary
*.jpeg binary
*.gif  binary
*.ico  binary
*.svg  text eol=lf

# These files are text and should be normalized (Convert crlf =&gt; lf)
*.md       text eol=lf
*.adoc     text eol=lf
*.textile  text eol=lf
*.mustache text eol=lf
*.csv      text eol=lf
*.tab      text eol=lf
*.tsv      text eol=lf
*.php      text eol=lf
*.css      text eol=lf
*.js       text eol=lf
*.json     text eol=lf
*.htm      text eol=lf
*.html     text eol=lf
*.xml      text eol=lf
*.txt      text eol=lf
*.ini      text eol=lf
*.inc      text eol=lf
*.pl       text eol=lf
*.rb       text eol=lf
*.py       text eol=lf
*.scm      text eol=lf
*.sql      text eol=lf
.htaccess  text eol=lf

# These files are binary and should be left untouched
# (binary is a macro for -text -diff)
*.mov  binary
*.mp4  binary
*.mp3  binary
*.flv  binary
*.fla  binary
*.swf  binary
*.gz   binary
*.zip  binary
*.7z   binary
*.ttf  binary
*.pyc  binary
</code></pre>

<p>and I have set these git settings on the machines (windows and osx and linux):</p>

<pre><code>git config --global core.eol lf
git config --global core.autocrlf false
</code></pre>

<p>Yet I will intermittently get notification from git (cli) that when I pull changes from out development server (which is updated with changes from testing at the end of the day), I get the message stating that CRLF will be converted to LF on commit.</p>

<p>Although lately, I noticed that My cohort and I (on windows) have not been getting these messages as often. But others on mac/linux seem to get them every time they re-checkout the remote branch (even after deleting the local version). When running</p>

<pre><code>git checkout -b develop -t origin/develop
</code></pre>

<p>where they should have a perfectly clean directory, they will have anywhere from 1-6 files that show changes. Which are only line endings. And no matter what we do, we cannot get rid of them without committing them. Even though they get committed and pushed directly back up to develop, another dev after fetching will pull a new develop branch (after deleting the local develop branch) will get another random file that states will have its CRLF endings converted to LF.</p>
","0","519990","0","0"
"36456076","6167658","2016-04-06 15:48:05","1","35","<git><merge><git-branch><branching-and-merging>","git merge master into several branches in one step","<p>Scenario: </p>

<p>I have master and several braches</p>

<ul>
<li>customer_1</li>
<li>customer_2</li>
<li>customer_3</li>
</ul>

<p>Master is the project with default configuration.</p>

<p>Each branch ""customer_"" is the project for ""customer_"" with his own configuration.</p>

<p>Now I update master with a new feature and I want merge master into customer branches, but I don't want modify config files in branches with default values.</p>

<p>Is it possible in one step, or I have to do this manually after a fetch in each branch?</p>

<p>P.S. I can't put branch config file into gitignore.</p>
","0","6167658","",""
"45286718","7890819","2017-07-24 17:35:46","0","1185","<git><git-branch>","Move a java class file from one branch in git to another branch","<p>I have this java class <strong>flie.java</strong> which I commited and pushed with other java files in <strong>branch A</strong>. I want to move just the file.java from <strong>branch A to branch B</strong> without moving the other files that are pushed in branch A. I tried to do it from eclipse but It wasn't possible. I tried from git by following these steps: <a href=""https://help.github.com/articles/moving-a-file-to-a-new-location/"" rel=""nofollow noreferrer"">moving a file in git</a> but there wasn't the option to move it to an existing branch. I know I can copy the file and paste it to branch B in eclipse, but that is not the purpose!
Is there any git command that I can possibly use to move that file?</p>
","4","7890819","",""
"27449711","1594368","2014-12-12 18:19:11","0","1499","<git><github><git-branch>","How to push update to a branch in github","<p>Let me know what I am doing wrong here ?</p>

<p>When I am doing <code>$git status</code> it is showing my branch as <code>* my_branch</code></p>

<p>Now I changed in few files and trying to push updates to the branch so I tried two things -</p>

<p>1) <strong>First try</strong></p>

<p><code>$ git add .</code></p>

<p><code>$ git push origin my_branch</code></p>

<p>This is showing <code>Everything up-to-date</code></p>

<p>2) <strong>Second try</strong></p>

<p><code>$ git add .</code></p>

<p><code>git commit -m ""first commit""</code></p>

<p>Now on running this I am getting following error -</p>

<pre><code>*** Please tell me who you are.

Run

  git config --global user.email ""you@example.com""
  git config --global user.name ""Your Name""

to set your account's default identity.
Omit --global to set the identity only in this repository.

fatal: unable to auto-detect email address (got 'trialcoder@sysuser.(none)')
</code></pre>
","2","1594368","",""
"52541992","10425457","2018-09-27 17:07:47","10","18630","<git><gitlab><git-branch><git-clone>","gitlab redirects push/fetch/clone to sign in","<p>I am trying to push a branch into a gitlab remote repository and an example of the behaviour would be:</p>

<pre><code>git clone http://(path to branch)
Cloning into 'origin'...
fatal: unable to update url base from redirection:
    asked for: http://(path to branch)/info/refs?service=git-upload-pack
redirect: http://(path to root)/users/sign_in
</code></pre>

<p>please note the changes on the urls and also I entered my credentials in .git/config, as presented below</p>

<pre><code>[user]
    name = myname
    pwd = mypassword
    password = mypassword
</code></pre>

<p>It's probably relevant that when I signed up, the repository asked for a public key that I had to make exclusively for the project. </p>
","0","10425457","",""
"36594727","2032488","2016-04-13 09:52:15","0","37","<git><git-branch>","Keep changes in subfolder across all git branches","<p>I work on a project with a lot of branches.</p>

<p>In my project folder I have a currently untracked folder that needs to be accessible from all branches. It contains a bunch of scripts that simulates the production environment but cuts down execution times of program calls that would otherwise take hours. These scripts are constantly refined to emulate the production environment more accurately.</p>

<p>I want to track this folder in my repo, but any changes I make to it, need to be accessible from any branch. How can I track this folder but still have it behave like it was untracked?</p>
","0","2032488","",""
"52644051","2997128","2018-10-04 10:07:59","1","176","<git><branch><git-branch><git-log>","git log after(contains) commit? (with --graph)","<p>I knew that </p>

<ul>
<li><code>git branch --contains &lt;REVISION&gt;</code> can show names of all child branches since <code>&lt;REVISION&gt;</code></li>
<li><code>git log --branches=&lt;BRANCH_REGEX&gt;</code> can filter branches</li>
</ul>

<p>Is there any way to conceptually direct output of the former command to the latter?<br/>
i.e. <strong><code>git branch --contains &lt;REVISION&gt; | git log --branches=</code></strong></p>

<p>The goal is to filter branches when using <code>git log --decorate --graph --oneline [OTHER_OPTIONS]</code></p>

<p>Thanks~</p>
","0","2997128","",""
"37474499","","2016-05-27 03:46:37","3","9268","<git><github><git-branch>","How to remove unwanted files (like meta data) from Git branch on github","<p>I created a branch on local repository and added some new java files. 
I used the following command to add my source code to local branch.</p>

<p><code>git add --all</code>   </p>

<p>This actually added some unwanted metadata files from Eclipse, like,
.metadata/.plugins/org.eclipse.resources/.history/7e</p>

<p>I committed my changes to head using the following command:</p>

<pre><code> git commit -m ""Commit message""
</code></pre>

<p>Pushed the branch to my remote repository using - </p>

<pre><code> git push origin &lt;branchname&gt;
</code></pre>

<p>I  realized that, I added unwanted files to my remote branch and want to remove some of them that are not actual source files.</p>

<p>How can I remove them from git branch without messing up my java files.</p>

<p><a href=""http://i.stack.imgur.com/ivyI2.jpg"" rel=""nofollow"">screenshot of unwantedfiles</a></p>

<p>Thanks much
Appreciate for the response</p>
","0","","0","0"
"53562297","10576039","2018-11-30 17:34:48","6","4092","<git><git-branch><git-merge>","is it common to continue a git branch after merging it?","<p>I have a git branch &amp; i want to merge it with my master branch to deliver this phase of my project to product owner.</p>

<p>But i want to continue this branch in future. </p>

<p>It it common to continue a branch after merging it ?</p>

<p>Or i should first delete merged branch and continue the feature with a new branch?</p>

<pre><code>git pull 
git merge &lt;my_branch&gt;
git commit 
git push
</code></pre>

<p>and after a while:</p>

<pre><code>git checkout &lt;my_branch&gt;
</code></pre>

<p>and change it.</p>
","3","10576039","0","0"
"37497908","5067785","2016-05-28 10:30:36","2","44","<git><github><git-branch>","Changing remote git repository","<p>I have cloned a repo into my local folders and now I wanted to change my git repository to some other url. I have already changed it using</p>

<pre><code>git remote set-url origin git://new.url.here
</code></pre>

<p>and when I am doing </p>

<pre><code>git remote -v
</code></pre>

<p>it shows me the correct repository in which I want to work.But when I do </p>

<pre><code>git branch --all
</code></pre>

<p>it shows me the old branches in the old repository. I am wondering why?? As my new repo doesn't have any branches yet.</p>
","2","5067785","0","0"
"37491146","1272259","2016-05-27 19:43:07","0","501","<git><ubuntu><git-branch>","Can I have different git branch in different ubuntu terminals or workspaces?","<p>I use Ubuntu with workspaces enabled. While my code compiles in a branch, I would like to do some work on another branch. But branch changes go seem to be global across terminals and workspaces.</p>

<p>Is it possible to set a different git branch for one terminal or workspace without affecting the other?</p>
","0","1272259","",""
"70272893","8733427","2021-12-08 09:47:22","0","785","<go><git-branch><go-git>","Golang - get list of git remote branches without cloning the repo","<p>I want a list of all the remote branches for a git repo.
Now, this git repo can be private / public. I have the access to the token to access the repo.</p>
<p>I am using this particular SDK : <a href=""https://pkg.go.dev/github.com/go-git/go-git/v5"" rel=""nofollow noreferrer"">https://pkg.go.dev/github.com/go-git/go-git/v5</a></p>
<p>One way to do this is ..</p>
<pre><code>r, cloneErr := git.PlainClone(projectRoot, false, cloneOptions)
remote, err := r.Remote(&quot;origin&quot;)
if err != nil {
    panic(err)
}
refList, err := remote.List(&amp;git.ListOptions{})
if err != nil {
    panic(err)
}
refPrefix := &quot;refs/heads/&quot;
for _, ref := range refList {
    refName := ref.Name().String()
    if !strings.HasPrefix(refName, refPrefix) {
        continue
    }
    branchName := refName[len(refPrefix):]
    fmt.Println(branchName)
}
</code></pre>
<p>But, this involves cloning the repo first.
How can I get the list without cloning the repo ?</p>
<p>Thanks in advence !</p>
","4","8733427","",""
"37570686","2190425","2016-06-01 13:50:32","7","12609","<git><git-branch><git-stash>","How to git stash pop the last stash created on current branch?","<p>I want to work with different branches and it would be useful for git to remember which stash is for which branch. So that when I <code>git stash pop</code> it only pops the stash that was created on current branch, if not - does nothing.</p>

<p>Basically whenever I switch branch I want to write <code>git stash pop</code> in case I had any work saved on this branch with <code>git stash -u</code></p>

<p>It has to be a script or a one-liner to solve my problem.</p>
","0","2190425","0","0"
"53637368","6202327","2018-12-05 17:06:40","13","4906","<python><git><branch><git-branch>","Running a python script and changing git branch","<p>I am trying to find ways to make better use of my time while programming.</p>

<p>I have a python script that does some heavy work (it can take hours) to finish. Now, most of the work it does is network related, so i have plenty of cpu resources to spare. </p>

<p>If the script was a C binary executable, it would be fine to git checkout onto a different branch and do extra work, I could even modify the binary in disk as it has been copied to ram, so until it finishes running I won't affect program output.</p>

<p>But python scripts are translated, not compiled. What happens if I start tampering with the source file, can i corrupt the programs output, or is the text file and associated imports copied to RAM, allowing me to tamper with the source with no risk of changing the behaviour of the running program?</p>
","0","6202327","",""
"53641669","367456","2018-12-05 22:22:02","0","27","<git><git-branch>","Since Which Exact Version(s) does git branch (git-branch) support the --format Option?","<p>I find the ""<code>--format</code>"" option quite handy.</p>

<blockquote>
  <p><em>in more detail especially the ""<code>%(refname:short)</code>"" directive within which is (at which Git [""<code>git</code>""] version is also unknown to me and could be considered bonus on the question) the fallback on the ""<code>--pretty=format:...</code>"" option notation, but anyway...  .</em></p>
</blockquote>

<p>Question is, since when does this ""<code>git branch</code>"" (""<code>git-branch</code>"") support the</p>

<pre><code>--format=""%(refname:short)
</code></pre>

<p>option/value?</p>

<p>Additionally I would appreciate if the answer next to the concrete Git version would also offer a small test script (shell/bash) that would help me to formally verify the answer is correct. I just would appreciate that, it's not required by this website's terms IIRC, so just saying. Let me know if you would prefer a bounty for that and how high you would prefer it to be.</p>
","2","367456","",""
"37610157","1350184","2016-06-03 09:01:39","5","2352","<git><branch><git-branch>","Overwrite the master branch with a orphan branch in git","<p>I've created a new orphan branch with <code>git checkout --orphan orphan-branch</code> and made a lot of commits on that branch. </p>

<p>Now I want to replace the <code>master</code> branch with the newly created <code>orphan-branch</code>, all the files and the history of the <code>master</code> branch should be replaced by the files and the history of the <code>orphan</code> branch. 
What is the best way to do this?</p>
","0","1350184","0","0"
"37635520","","2016-06-04 22:13:51","3","12910","<git><github><git-branch>","Getting service=git-receive-pack not found: did you run git update-server-info on the server?","<p>I tried to push my local changes to my branch on GitHub server. This was working like a charm before, when I used ""Git Bash"".<br>
I configured  GitHub Windows app provided by Git (that purple cat icon which shows up on your Desktop when you install Git) to push my changes this time.<br>
Thought GUI tool would be easier! When I tried ""Publish"" I saw a fatal-error msg.<br>
Then I switched back to 'Git Bash' which worked fine with my previous commit to the same remote branch.  </p>

<p>I typed following commands:</p>

<pre><code>git add .gitignore
git add &lt;&lt;files&gt;&gt; # WORKED
git commit -m &lt;commit desc&gt; # WORKED
git push origin &lt;mybranch&gt; # errored out
</code></pre>

<p>I got the following error:</p>

<pre><code>fatal: https://github.com/reponame/tree/&lt;mybranch&gt;//info/refs?service=git-receive-pack not found: 
did you run git update-server-info on the server?
</code></pre>

<p>I tried different things before posting this from similar posts. </p>

<ul>
<li>I edited PATH with .<code>.Git\bin,\Git\cmd ..Git\libexec\git-core</code>. This didn't help!</li>
<li>Made sure <code>.git/config</code> has my branch URL </li>
<li>Tried 'commit and push' from Eclipse. Same error. </li>
</ul>

<p>Did installing/configuring Windows GitHub client app messed up something on my PC where I can't push my changes to remote repo anymore?</p>

<p>What else I should do to push my changes to repo branch? This is on Windows.</p>
","7","","0","0"
"70398395","343178","2021-12-17 20:07:43","1","109","<git><github><git-branch><git-checkout>","Why is a new branch in our github repo unavailable for checkout?","<p>A colleague created a new branch in our repo in Github, but I cannot seem to use checkout to get it, and when I do a <code>git branch -a</code> (using Git Bash, Windows 10) it is not listed among the branches.  Yet in my Github account behold, there it is under Active branches: 36_assistapi.</p>
<p>I tried several variations on the following command but get the same output.</p>
<pre><code>$ git checkout origin/36_assistapi
error: pathspec 'origin/36_assistapi' did not match any file(s) known to git
</code></pre>
<p>I also tried <code>git checkout 36_assistapi</code> and <code>git checkout 36_assistapi</code>
Surely we've omitted something simple:</p>
<p><a href=""https://i.stack.imgur.com/6npOs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6npOs.png"" alt=""enter image description here"" /></a></p>
","0","343178","",""
"37657138","5305041","2016-06-06 12:12:28","3","8188","<git><version-control><git-branch><git-extensions>","how to create a branch locally from another local branch in git extensions","<p>I'm new to using Git, currently I'm using Git Extensions V2.48, I'm trying to create a local branch where I can make changes without effecting my current network branch. Currently I have checkout a remote branch ABC123 and I want to create an another new local branch with this ABC123 so I can work on new branch with my ideas and come back to ABC123 without losing data so I can push my changes in ABC123 to Remote (or work simultaneously in both local branches without disturbing another code).</p>

<p>I have gone through online resource, where I can find how to create a new branch
<a href=""http://git-extensions-documentation.readthedocs.io/en/latest/branches.html"" rel=""nofollow noreferrer"">http://git-extensions-documentation.readthedocs.io/en/latest/branches.html</a>,
I have not tried it practically as I'm not sure what it does and I dont want to mess up with my branches on server/Remote.</p>

<p>please can any one help me how to do this in Git Extensions. Thanks.</p>

<p><a href=""https://i.stack.imgur.com/9Pyun.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9Pyun.png"" alt=""Git_Ext_V2.48""></a></p>
","0","5305041","",""
"70431415","17131963","2021-12-21 06:27:20","0","35","<git><heroku><git-branch>","How many git branches should I have and am I merging them correctly?","<p>I have 3 branches master, develop and develop1 for my project. I work on develop1 and then when I am satisfied and ready to deploy I merge it to develop. Then I go to master and merge it with develop. Is this the correct process? If not what approach should I take. (I have intermediate develop branch just because if I mess something up in develop1 I can always go back to my last working code which is on develop branch.)</p>
","1","17131963","",""
"37666246","362754","2016-06-06 20:23:31","9","12418","<git><github><tags><git-branch>","Why doesn’t a git tag show up on any branch?","<p>I cloned the <a href=""https://github.com/eclipse/mosquitto"" rel=""nofollow noreferrer"">mosquitto repo</a> that has tag <a href=""https://github.com/eclipse/mosquitto/releases/tag/v1.4.9"" rel=""nofollow noreferrer""><code>v1.4.9</code></a>. However the tagged commit does not appear to be on a branch. </p>

<p>How could that happen? Does the author actually keep a branch on his own repo but only push tags from that branch to GitHub? Or does he just make a commit to a tag? </p>

<p>I made the tag into a local branch</p>

<pre><code>$ git checkout -b work149 v1.4.9
</code></pre>

<p>and looked at the last commit on the branch: </p>

<pre><code>$ git log -1
commit 91bfd82491f90e24b6fe9c036f0b04a1f5c14a89
Merge: bf959ef 2d0af73
Author: Roger A. Light &lt;roger@atchoo.org&gt;
Date:   Thu Jun 2 22:05:34 2016 +0100

    Merge branch 'fixes'
</code></pre>

<p>This commit is one ahead of the <code>fixes</code> branch. </p>

<p>With <code>git log --graph</code> I can see an earlier commit on the same branch (not the <code>fixes</code> branch, but a branch I'm trying to understand): </p>

<pre><code>* |   commit bf959ef9b0ae0e4d74bf80158ffb0b7c69da533d
|\ \  Merge: 646e0a0 5cca6b4
| |/  Author: Roger A. Light &lt;roger@atchoo.org&gt;
| |   Date:   Sun Feb 14 14:38:42 2016 +0000
| |
| |       Merge branch 'fixes'
| |
</code></pre>

<p>How do you find out whether a tag is on a branch and on which branch? Does the leftmost vertical bar indicate a branch and where is that branch on the remote? </p>

<p>Is this a common practice? </p>

<p>The <a href=""http://git.661346.n2.nabble.com/Git-pull-doesn-t-get-the-tags-td5661212.html"" rel=""nofollow noreferrer"">discussion thread “Git pull doesn’t get the tags”</a> mentions “branch heads that are being tracked” and “non-commits.” I wonder whether the <code>git clone</code> command configures the clone not to track all the branches on the remote or the repo has somehow made the tags into non-commits? </p>
","3","362754","0","0"
"70567110","16292037","2022-01-03 14:18:15","-2","25","<git><error-handling><git-branch>","I have a git branch called Tofazzal with perfectly working code, and I want to turn it into the main. I'm currently on the master branch","<p>I am in the tofazzal branch (development) and I want to pull from the main branch (live site) and incorporate all the changes into my development branch. is there a better way to do this? here is what I had planned on doing, after committing changes:</p>
<pre><code>git checkout main
git pull origin tofazzal
git merge
</code></pre>
","2","16292037","",""
"8739808","341583","2012-01-05 08:53:36","0","415","<ruby-on-rails><git><migration><git-branch><database-migration>","Branching git, running migrations, and keeping the schema functional","<p>I'm fairly new to git and I've begun using multiple branches to build different features simultaneously using commands like <code>git branch</code>, <code>git checkout</code>, etc.</p>

<p>Here's a list of steps I've taken:</p>

<pre><code>git checkout feature1
make some changes that include migrations
rake db:migrate
rake db:commit to feature1 with schema.rb

git checkout feature2
# at this point my schema appears to revert to pre-feature1
make some changes that involve a new migration
rake db:migrate
# schema now shows changes from BOTH feature1 and feature2.
</code></pre>

<p>The act of running <code>rake db:migrate</code> in feature2 refreshes the schema, which I imagine reflects my local database that underpins both feature1 and feature2. Do you know what I can do to keep these migrations separate so each feature can have its own schema, or is there another way to handle branched migrations?</p>
","0","341583","",""
"26534411","67960","2014-10-23 18:02:12","0","199","<git><version-control><merge><git-branch>","Is it possible to 'reset' a git branch to an empty state?","<p>The company I'm at abused Git pretty hard for several years. Development was done on master and a long lived 'release' branch was used for releases. The abuse was that people checked directly into release so much that master could no longer be merged into it, so commits were cherry picked into release adhoc. History between the two is a disaster. We've moved to short lived release branches, our development branch, 'dev', was branched from the old 'release' branch.</p>

<p>I would like to start development on master again but its history contains tons of commits that were not in 'release' and were never tested. I tried several different ways deleting the branch on the remote in a way that no commits from old master on a local dev box could get pushed up to new master. What I want to do (in my magical ideal world) is:</p>

<ol>
<li>Delete master on remote</li>
<li>Branch 'dev' to a new master</li>
<li>Push new master to remote</li>
<li>Have no history from old master be pushed into new master</li>
</ol>

<p>Having everyone delete master locally and then check it out again is the most straightforward solution but also the hardest to actually do with 30+ developers in multiple countries.</p>

<p>Is there a way on the remote to reject a push if it contains a certain commit, or merges with a commit? I know the last commit on old master that was cherry picked into release, if I can identify pushes that bring in anything older than that they can be rejected. Other than that I'm not sure what other possibilities there are to achieve something like this.</p>
","4","67960","0","0"
"8752687","659801","2012-01-06 02:26:53","4","197","<git><git-branch>","git branching and committing -- can you explain the theory behind this puzzling (to me) behavior?","<p>I have a master branch and everything is fine in it.  Then I create a branch called experimental and I create a new file.  While in my experimental branch I add this file using the <code>git add</code> command.  Then I checkout my master branch.  While in my master branch I run <code>git status</code> and discover that this file has also been added to my master branch.  I then run <code>git commit -m ""message""</code> while in my master branch and the commit happens.  Then I switch to my experimental branch and run <code>git status</code> and discover that the file has also been committed in my experimental branch.</p>

<p>Here is what I would have expected: Upon switching to the master branch after adding the new file I would expect that the file would not appear there.  After all, I did not create the file while in the master branch and I did not add the file while in the master branch.  So when I switch to the master branch and run <code>git status</code> why does it find the file already added and ready to commit?  And when I then do commit it while in the master branch, why do I also find it committed in the experimental branch when I switch back?  Did it commit to two branches at once?</p>
","4","659801","0","0"
"26983550","3784080","2014-11-17 22:57:50","0","154","<git><git-branch-sculpting>","How to design and maintain multiple live code stream on single git repository","<p>I have a project with two live versions (new version is not backward compatible therefore two completely separate code stream). Question: how should I design git (looking for best practice):</p>

<p>1) Have two separate Master and Develop branches for both versions in same repo (don't want to have separate repo)</p>

<p>2) Use git tags (not families with this much and don't know if this'll work with Bamboo build server)</p>

<p>3) Other options..</p>

<p>Any help in this field will be very helpful!</p>
","0","3784080","",""
"9219513","341583","2012-02-09 22:03:05","1","147","<git><git-branch>","How to fix and merge this git tree?","<p>Here's my gitk (improved I think from this question, thank you @amber: <a href=""https://stackoverflow.com/questions/9206976/merging-commits-from-branch-to-master-odd-looking-tree"">Merging commits from branch to master -&gt; odd-looking tree</a>):</p>

<p>Branch <code>frontend</code> is on the left. You can see the tip of <code>master</code> and <code>remotes/origin/master</code> at the bottom right in yellow.</p>

<p><img src=""https://i.stack.imgur.com/BW198.jpg"" alt=""gitk --all git tree""><br>
I need to do two things which I've been through about 36 hours of trouble for:</p>

<ol>
<li>How can I start adding <code>frontend</code>'s commits to master (one by one, 'Adding delayed' first) so I can push them? I don't want to merge the entire branch because there's a lot of code involved and both branches have working trees I'd like not to disturb.</li>
<li><p>I seem to have two identical 'Bulk update' entries around <code>frontend</code>, the top/left one with no branch. How can I get rid of the branchless <code>bulk update</code> stuff at the top so there's 2 clean branches? I'd like to have it looking like this:</p>

<pre><code>|  # frontend
|  # Bulk update.
|  # ...commits...
|  # move this frontend commit to master
|  |  #master's changes
|  |  #master, remotes/origin/master, remotes/staging/master
</code></pre></li>
</ol>

<p>I really would love to do this myself but the last day and a half of struggling has shown that the slightest inaccuracy in what I enter often results in messing it up more.</p>
","0","341583","",""
"9227873","1202030","2012-02-10 12:35:30","36","32207","<github><branch><git-branch><git-fork>","Fork from a branch in github","<p>Is there a way to fork from a specific branch on GitHub? … For example, moodle has many branches (1.9, 2.0 … and so on). Can a clone be performed of just branch 1.9 and not the  master branch always? Is it possible to clone a specific branch onto my PC?</p>
","2","1202030","0","0"
"27003969","4072400","2014-11-18 21:02:17","0","51","<git><ubuntu><git-branch>","git: Clone repository, but keeping the original name?","<p>I'm facing some issues with git: I need clone an repository, but git adds a "".git"" at the end of the repository name. Originaly, the repo doesn't ends with "".git"".</p>

<p>I'm cloning the repo with this command:
<code>git clone --mirror &lt;user&gt;@&lt;server&gt;:repository</code></p>

<p>Both servers runs Ubuntu 14.04.1. There's a way to clone the original repository to the new server, keeping the same folder names and settings? </p>
","2","4072400","",""
"44879321","6921751","2017-07-03 06:46:51","0","2075","<git><version-control><branch><git-branch><pull-request>","How to git pull project and push new branch","<p>Git has been introduced on a project, after I've been working on it for a bit.</p>

<p>Now there's a local git server, which hosts the base code, I've been working with and modified.</p>

<p>Now I need to create a new branch on the server, which features the modifications I made.</p>

<p>My plan is to pull(?) the current git repository to a new folder, copy over all the content - which I've been managing locally, then create a new branch locally and push(?) it again onto the server.</p>

<p>This would leave me with a new branch, which I can modify locally and push onto the branch on the server, is that correct?</p>

<pre><code>mkdir project_git &amp;&amp; cd project_git
git pull &lt;remote&gt;
git checkout -b my_changes    
cp project project_git
git add -A
git commit -m ""new branch with local changes""
git push origin my_changes
</code></pre>

<p>Is this the ""correct"" way to handle the situation? What commands would I need to use for this?</p>
","0","6921751","0","0"
"27047569","3784080","2014-11-20 19:09:01","4","3853","<git><git-branch>","Can I push hotfix to a tag in git","<p>I got a master branch with tags (v1, v2, etc) ..clients still download different versions from build server. And we need to put a hot fix (security issue) on each versions. Now I can pull from each tags apply the hot fix but don't know how to push back to same tag again? I don't want to push old version to the front of the master branch again.. I don't know what's a right way to do this?</p>
","0","3784080","0","0"
"27068739","4209419","2014-11-21 19:20:35","0","670","<git><git-branch><git-remote>","git branch -r vs git remote show origin","<p>So I was looking for a way to see a list of all the branches that exist on the remote, and found the following 2 commands:</p>

<p><code>    1. git branch -r
    2. git remote show origin</code></p>

<p>Whats the difference between the 2 commands?</p>
","0","4209419","",""
"27083085","884401","2014-11-22 22:06:54","1","196","<git><git-branch><git-fork>","Using git for a project with 2 lines of development","<p>I work for a company that does plugin development. We typically maintain our plugins for the 2 most recent major versions of the parent application. Major releases of the parent application's plugin API are usually mostly backwards compatible, but there are always some obsoleted/deprecated pieces along with several new APIs. As such, we usually have 2 lines of development that diverge over time. At first the divergences are small as we start by fixing all the obsolete calls. Over time the divergences can become large as we start to use the new APIs.  Merging between these branches can be a pain as you have to make sure you aren't merging code that uses parts of the API that aren't available in the other version.</p>

<p>I need some help in determining the best workflow for this situation. I will lay out some of my ideas below. The parent application releases new major versions on a yearly basis. As such, let's assume a plugin API for 2013 and 2014.</p>

<h3>1. Maintaining a branch for each version of the API</h3>

<p>We have 2 long-running centralized branches, 1 for each version of the API (e.g. develop_2013, develop_2014). We develop against develop_2013 and consistently merge to develop_2014. Being that the API is <em>mostly</em> backwards compatible, this usually works fine. Any development against new pieces of the API is done in develop_2014 and is not merged back.</p>

<p>I'm cautious of this method being that git is not really geared towards maintaining long-running divergent branches.</p>

<h3>2. Fork for each version of the API</h3>

<p>We now have a situation where we have a repository for each major version of the parent application (e.g. plugin_2013 and plugin_2014). We now must merge code between each repository through merge requests or by adding one as a remote to the other. We could perhaps cherry pick changes.</p>

<p>I'm cautious of this method because it introduces more overhead into the process. </p>

<p>If possible I would prefer to keep all development for a particular plugin contained within 1 repository. I am just concerned about the hassle of having 2 branches that will get more and more divergent over time.</p>
","6","884401","",""
"27106793","3820129","2014-11-24 14:11:02","1","51","<git><git-branch>","How to maintain and refer a file, single copy for many git branches?","<p>I have a situation: My <code>readme.md</code> file in <code>master</code> branch also needs to be on <code>gh-pages</code> branch.<br>
If I make any changes to the file on one branch, I need to replicate them on other.</p>

<p>Is there a way to have common git branch that can be referred by other branches?<br>
Or track a file in two branches simultaneously?</p>

<p>See <a href=""https://github.com/anupam-arohi/lv"" rel=""nofollow noreferrer"">https://github.com/anupam-arohi/lv</a> for more details on the issue.</p>
","0","3820129","0","0"
"27122497","","2014-11-25 09:05:04","2","839","<git><github><merge><bitbucket><git-branch>","Merge a git branch with master a second time because the first changes were removed due to conflict","<p>I have written some code on the branch <strong>""template-change""</strong> and merged this with <strong>master</strong> a long time ago (2 month).</p>

<p>Now, changes made on the master branch have been lost because of someone deleting the code from <strong>master</strong>.</p>

<p>I have tried to merge the branch again but git is giving me the error:</p>

<blockquote>
  <p>""branch already merge with master""</p>
</blockquote>

<p>I've also tried to <strong>cherry-pick</strong> commits one by one but that is also not working; <strong>cherry-pick</strong> picks empty commits.</p>

<p>For now, I created a new branch and made the changes on that branch again and pushed them to the master branch.</p>

<p>I want to know what is the best solution available for solving this type of issue?</p>
","0","","0","0"
"9378760","1215723","2012-02-21 13:54:08","152","118446","<git><git-branch>","git push local branch with same name as remote tag","<p>I'm trying to push a new local branch <code>product-0.2</code> to remote where there is already a tag with the same name (but the branch itself does not exist)</p>

<pre><code>git push -v --tags --set-upstream origin product-0.2:product-0.2 
Pushing to https://****@github.com/mycompany/product.git
error: src refspec product-0.2 matches more than one.
error: failed to push some refs to 'https://****@github.com/mycompany/product.git'
</code></pre>

<p>Same with:</p>

<pre><code>git push origin product-0.2:/refs/heads/product-0.2 
</code></pre>

<p>Although the other way around it works, e.g. create a branch <code>product-0.1</code>, commit on it then apply a tag <code>product-0.1</code>.</p>

<p>Some people work around this by removing the conflicting tag locally, then push the branch, then retrieve the remote tag, but it seems cumbersome and error prone.</p>

<p>How can I create my branch with minimal fuss?</p>

<p>Thanks for your input</p>
","2","1215723","0","0"
"9711467","496136","2012-03-14 22:46:38","0","191","<git><tags><git-branch>","git and branch names","<p>I am wanting to double check my work with git.</p>

<p>I am trying to use a remote repo server:
I want to only work on MYBRANCH, so I only clone MYBRANCH</p>

<pre><code>/usr/local/git/bin/git clone -b MYBRANCH git@172.27.13.29:/home/PROJECT.git
</code></pre>

<p>when I run</p>

<pre><code>git remote -v
</code></pre>

<p>I see </p>

<pre><code>origin git@172.27.13.29:/home/PROJECT.git (fetch)
origin git@172.27.13.29:/home/PROJECT.git (push)
</code></pre>

<p>I expected to see MYBRANCH and not origin</p>

<p>Can someone explain that?</p>
","0","496136","",""
"64275417","4287581","2020-10-09 07:07:39","0","31","<git><git-branch>","Git branch -d newBranch, and then git checkot master didn't undo the changes in newBranch","<p>This is the 1st time this happens to me and I am quite shocked.
Yesterday I created a new branch with <code>git checkout -b recipients</code>. I checked where I was with <code>git branch</code>. I made some changes and then I wanted to go back to master with <code>git checkout master</code>.
But the changes where still there even though I was back in master.</p>
<p><a href=""https://i.stack.imgur.com/6UrWX.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6UrWX.png"" alt=""enter image description here"" /></a></p>
<p>What did I do wrong?</p>
<p>Thanks.</p>
<p>update1: Now that I think it I didn't commit nor stash but as you can see, git didn't complain (as I think it does in those circunstamces)</p>
","2","4287581","",""
"64288673","13833273","2020-10-09 23:58:04","0","26","<github><git-branch><git-submodules>","How to pull changes from github submodule branch ""A"" into parent module branch ""B""","<p>I've made some changes in repository A, that are reflected in branch A. This repository A is a submodule for repository B. I want to reflect repository A's branch A changes in repository B's branch Y. How do I do this?</p>
","0","13833273","",""
"64296410","9464295","2020-10-10 17:38:59","0","1150","<git><github><version-control><git-branch>","Replace all files and folders in branch with (currently) non-git folder","<p><em>Bear in mind that I am totally new to Git and don't know much of the terminology</em></p>
<p>I have a branch, <code>reference-redo</code> on a GitHub repository and a different (non-git) folder which I would like to replace the contents of the <code>reference-redo</code> branch with.</p>
<p>Opening up the folder in Git bash:</p>
<p><code>git init</code>: adds a <code>.git</code> folder (says it initialised an empty Git repository)</p>
<p><code>git add .</code>: adds all files and folders (has a warning about LF being replaced by CR LF but no errors)</p>
<p><code>git commit -m 'Fixed usage of references for ObjectPointer type'</code>: 'create mode ...' for the 14 files</p>
<p><code>git remote add origin https://github.com/me/repo-name.git</code>: no output but also no errors</p>
<p><code>git checkout -b reference-redo</code>: Switched to new branch 'reference-redo'</p>
<p><code>git remote -v</code></p>
<p><code>git push origin reference-redo</code></p>
<pre><code> ! [rejected]        reference-redo -&gt; reference-redo (fetch first)
error: failed to push some refs to 'https://github.com/me/repo-name.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
<p>This seems to happen because I am <em>replacing</em> the branch's files, not <em>updating</em> it. Will I have to push to a new branch or can I push this current directory?</p>
<p>running <code>git remote show origin</code> shows that the branch does exist:</p>
<pre><code>  Remote branches:
    functions      new (next fetch will store in remotes/origin)
    master         new (next fetch will store in remotes/origin)
    reference-redo new (next fetch will store in remotes/origin)
  Local refs configured for 'git push':
    master         pushes to master         (local out of date)
    reference-redo pushes to reference-redo (local out of date)
</code></pre>
<p><a href=""https://git-scm.com/docs/git-push"" rel=""nofollow noreferrer"">git-push</a></p>
","0","9464295","",""
"64989706","6917221","2020-11-24 15:33:25","0","2034","<git><git-branch><upstream-branch>","How to checkout a remote git branch ? Or to link a remote branch with a different git directory branch?","<p>I'm working with several repositories</p>
<ul>
<li><p>origin : the remote repository</p>
</li>
<li><p>back : which is a backup of the repository on my local PC</p>
</li>
<li><p>uptreams : repository for later pull request</p>
<pre><code> git remote -v
 back    /opt/lampp/htdocs/work/repo_backup/webtrees (fetch)
 back    /opt/lampp/htdocs/work/repo_backup/webtrees (push)
 origin  https://github.com/ckl67/webtrees.git (fetch)
 origin  https://github.com/ckl67/webtrees.git (push)
 upstream        https://github.com/fisharebest/webtrees.git (fetch)
 upstream        https://github.com/fisharebest/webtrees.git (push)
</code></pre>
</li>
</ul>
<p>Locally
In my &quot;git directory&quot; I'm working with several branches</p>
<ul>
<li>master</li>
<li>work</li>
<li>dev</li>
</ul>
<p>In my &quot;git directory&quot; I'm working in branch &quot;work&quot; because I want not to interfere with the &quot;master&quot; branch</p>
<p>My repository &quot;back&quot; is used to test the software.
This &quot;local&quot; repository is used to ftp the (html,php,javascript) code to a local directory for test (Apache,mysql local server)</p>
<p>When I push to repository &quot;back&quot;</p>
<pre><code>     git push back
</code></pre>
<p>All my branches will be pushed too
By default repository &quot;back&quot; will point to branch &quot;master&quot;</p>
<p>So this means that I cannot test my code.
For that I have to go to repository &quot;back&quot;,</p>
<pre><code>   checkout work
   &quot;test&quot;
   checkout master
</code></pre>
<p>Because, I have seen that it is not possible to &quot;git push back&quot; when on my repository &quot;back&quot;, the branch &quot;work&quot; is activated !!</p>
<p>So I'm a bit in a trouble here.</p>
<p>Question 1)
It is possible to checkout remotely a branch ?</p>
<p>From my &quot;git directory&quot; to checkout branch &quot;work&quot; of my repository &quot;back&quot; ?
So principle would be from my &quot;git directory&quot;</p>
<pre><code> git push back
  --&gt; checkout to &quot;work&quot; in repository &quot;back
 * perform test --&gt; ftp to my local directory in order to test
  --&gt; checkout back to &quot;master&quot; in repository &quot;back
 git push back :: to update all branches (master/work/dev)
</code></pre>
<p>Solution 2)
It is possible to link git directory/work --&gt; back/master
Meaning, when I &quot;git push back&quot;, back/work will be updated
I have tested</p>
<pre><code>  git branch --set-upstream-to=back/master work
</code></pre>
<p>But it didn't work</p>
<pre><code>  git branch --set-upstream-to=back/master work
  The 'work' branch is set to follow the remote 'master' branch from 'back'.
  /opt/lampp/htdocs/work/webtrees $ git push back fatal: The upstream branch of your current branch does not match
  with the name of your current branch
</code></pre>
<p>Certainly because, in the &quot;repository back&quot; I have</p>
<pre><code>  git clone --depth 1 https://github.com/ckl67/webtrees.git
</code></pre>
<p>Thank You</p>
","2","6917221","",""
"64997848","14113310","2020-11-25 02:48:46","0","127","<git><gitlab><git-branch><git-checkout><git-remote>","How to clone a copy of all remote branches on local with git","<p>I encounter an issue with some of my projetc. I started them on my older computer that doesn't work now. But, I have my projetcs on a gitlab repository. However, when I cloned them on my new computer, I just have master branch on my local, I think it's normal.
So my question is : how can I have the local copy of the content of remote branches on my local please ?</p>
<p>I really don't enjoy to 'checkout' on remote/example branch ... :/
I hope I was clear in my words</p>
<p>Sorry for my English, I'm french.</p>
<p>Have a nice day</p>
","2","14113310","",""
"65015901","2565862","2020-11-26 03:56:36","0","136","<git><bitbucket><git-branch>","What git command will create a feature branch based off a specific other branch, not locally but on Atlassian Bitbucket?","<p>I want to find a git command that will create a feature branch, based off another specific branch (not master), on Atlassian Bitbucket and not create the branch locally.</p>
<p>Is there a command that would do this?</p>
<hr />
<p>If I type <code>git branch</code>, I would not see the branch, because that shows only local branches.
However, if I type <code>git branch -a</code>, I would see the newly created branch.</p>
<p>Any help would be greatly appreciated, I have searched and searched and have found no example to do this.</p>
<p>thank you,</p>
","0","2565862","",""
"65018925","14144608","2020-11-26 09:05:36","0","37","<git><github><branch><git-branch><branching-and-merging>","How to push only some branches of git","<p>I created laravel project. I am trying various concepts in laravel. to keep concept code seprated from each other I uses branching. I created branches as auth,multiauth, orm-onetomany orm-onetoone, orm-many-many. I just want to push  orm-onetomany orm-onetoone, orm-many-many and ignore auth &amp; multiauth. How can I do this..??</p>
","2","14144608","",""
"65026590","13912443","2020-11-26 17:16:03","0","1161","<git><git-branch>","When I type 'git branch -a', it shows red previously deleted branches. Is this normal?","<p>I have cloned a remote GitHub repository to my computer, and it all went well. I worked on some branches, and wanted to see all of them, so I typed:</p>
<pre><code>git branch -a
</code></pre>
<p>And it showed this:</p>
<pre><code>* master
  remotes/origin/cleanup
  remotes/origin/master
  remotes/origin/test
</code></pre>
<p>I have previously created the 'cleanup' and 'test' branches, merged them, deleted them on the local side, and the remote side, and yet they are showing in this weird 'file-directory like' fashion. Is this normal?</p>
<p>Sorry if this is a bad question. I am new to Git and Github.</p>
","4","13912443","",""
"28226798","2480715","2015-01-29 23:42:50","0","131","<git><version-control><git-branch><git-remote><git-checkout>","How can I retrieve git remote branches?","<p>I'm clearly missing something since I am unable to fetch the remote branch I need on the server from the git repo I've been working with locally.</p>

<p><strong>On my local dev environment</strong></p>

<p>I run <code>git remote -v</code> and it gives me:</p>

<pre><code>origin  git@git.example.com:the_repo (fetch)
origin  git@git.example.com:the_repo (push)
</code></pre>

<p>I run <code>git branch</code> and it gives me:</p>

<pre><code>* live
  master
</code></pre>

<p><strong>On my live server environment</strong></p>

<p>I run <code>git remote -v</code> and it gives me:</p>

<pre><code>origin  git@git.example.com:the_repo (fetch)
origin  git@git.example.com:the_repo (push)
</code></pre>

<p>I run <code>git branch</code> and it gives me:</p>

<pre><code>* master
</code></pre>

<p>When I try to fix this situation by running <code>git fetch</code> or <code>git fetch origin</code>, I still do not see my <code>live</code> branch upon running <code>git branch</code> again. I suspect this is because <code>git branch</code> only lists my local branches. </p>

<p><strong>How can I fetch the repo's remote branches and list them before I check them out locally?</strong></p>

<p>Many thanks - much appreciated.</p>
","0","2480715","",""
"28237934","182393","2015-01-30 14:24:42","11","16706","<git><git-branch><remote-branch>","Create private branch on remote repository in git","<p>I would like to build specific flow on our company git. </p>

<ol>
<li>developer create a branch on his local machine and commit there some files.</li>
<li>dev push this branch to remote repo</li>
<li>Other devs cannot access to this branch</li>
<li>after few rounds off pushing dev decide to publish his changes.</li>
<li>merge his private branch into public branch</li>
<li>push that public branch. </li>
</ol>

<p>In the other words - is it possible to configure private remote branch in public repository? </p>
","7","182393","0","0"
"46496669","8314212","2017-09-29 20:44:05","0","996","<git><version-control><bitbucket><git-branch>","git - multiple JIRA tasks, multiple branches, same file","<p>I have three jira tasks which is just actually one that was divided into three (Step 1,2,3 for creating a user profile)(not sub-tasks). So I was instructed to create branches for each jira task. My problem is for the second branch I need my codes from the first branch, and the third branch needs my codes from the first and second branch. <br><br>Example:</p>

<p>Branch 1 - created controller.php<br>
Branch 2 - modified controller.php<br>
Branch 3 - modified controller.php<br>
(note that i did not just add new lines in branch 2 and 3, but I also changed some existing ones)
<br><br>
For this to work, what I did was I branched out from the previous one always so that I could get my changes. So branch 2 branched out from branch 1 and branch 3 branched from branch 2.
<br>
<br>
Should I have just created one branch? Or what would be the best way for me to do this this with git?</p>
","0","8314212","0","0"
"46501141","3032338","2017-09-30 08:44:27","1","5737","<git><github><git-branch>","What does git branches and trunk folder mean?","<p><a href=""https://i.stack.imgur.com/qREDm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qREDm.png"" alt=""Git folders""></a></p>

<p>Someone has share this source code with me. Which include three folders 
.Git, branches and trunk.</p>

<p>I am familiar with git but usually when we take git clone we get two folders one of source code and one is .git folder inside that.
I need to know that what does these folders mean and which one contain the actual source code.</p>

<p>Thanks!</p>
","1","3032338","",""
"10593229","263268","2012-05-15 01:51:17","3","395","<git><git-branch><git-log>","How can I show the name of branches on every commit in `git log`","<p>In Gitk, showing a commit gives output like this:</p>

<pre><code>Author: ...
Committer: ...
Parent: ...auth/parser)
Parent: ... (Merge branch '...')
Child:  ...
Branches: remotes/me/foo, foo
</code></pre>

<p>Is there a way to get this kind of output in <code>git log</code>? Using <code>git log --graph</code> gives similar information, but in my repository with long-lived branches, it can take a lot of scrolling to find which branch a commit was on.</p>

<p>(A similar question to <a href=""https://stackoverflow.com/questions/1841405/how-can-i-show-the-name-of-branches-in-git-log"">How can I show the name of branches in `git log`?</a>)</p>
","0","263268","0","0"
"28555367","2424862","2015-02-17 05:36:16","-1","107","<git><git-branch>","git deleting particular commit","<p>I have a git repository with only one master branch. One of our contributor made a commit(A) and pushed a wrong large file to the master branch. The repository size has grown very high due to that wrong commit(A). After his commit, we worked on the same branch and did lot more useful commit. The actual content size should be 200 MB but due one wrong commit the whole repo size has become 2GB.</p>

<p>Now we are planning to completely remove the changes made by commit(A) from the repository. This i could do by creating a branch by keeping version just before the commit(A). But I do not want to lose the commits made after the commit(A), as those are the main commits for the project.</p>

<p>Is there any way I can completely remove a particular commit and the changes made by it. So that if someone clones the repository the size will be only 200MB.</p>
","3","2424862","",""
"10598262","1068248","2012-05-15 09:55:37","1","328","<git><version-control><git-branch><branching-and-merging>","git workflow with 3 branches advice","<p>I'm working on a project where we're trying to get to grips with using git in the most efficient manner (for us) and have decided to create 2 branches for 2 sub-teams to work on, along side the master branch.</p>

<p>Sometimes we will commit into master if it's something generic that should go into both branches and then we want those changes in the both of the other branches.</p>

<ol>
<li><p>Should that be a merge or a rebase into the 2 other branches?</p></li>
<li><p>Is this an insane workflow to be going down the route of? If so, suggestions please!</p></li>
</ol>
","0","1068248","",""
"10605068","1028230","2012-05-15 16:30:11","6","3651","<git><git-branch><remote-branch>","How do I stop pushing to multiple remote branches in git? (aka, How do I untrack remote git branches?)","<p>Tried to use what's <a href=""https://stackoverflow.com/q/3046436/1028230"">here</a>, but that doesn't solve things for me.</p>

<p>I've got a local repo in git, cloned from a remote repo, <code>development</code>.  I branch locally to play around with a new feature in a branch called <code>newBranchName</code> and call <code>git push origin newBranchName</code> to set up the new branch on the remote repo.</p>

<p>Now when I try to push, git seems to be pushing my <code>newBranchName</code> local branch into everything the old branch tracked as well.  I want that to stop.</p>

<p>Here's an extended sample of what I mean.  I'm going to create a local branch, add a file, commit locally, then push to a new branch on the remote server.  So far, so good.</p>

<pre><code>Administrator@BOXEN /path/to/working/dir (oldBranch)
$ git branch testingStuff

Administrator@BOXEN /path/to/working/dir (oldBranch)
$ git checkout testingStuff
Switched to branch 'testingStuff'

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ vim test.txt

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git add test.txt

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git commit -a
[testingStuff 11468d8] Testing git; can trash this branch.
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 test.txt

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git push origin testingStuff
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 299 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To http://url/to/remote/repo.git
 * [new branch]      testingStuff -&gt; testingStuff
</code></pre>

<p>Now, I'll edit that test.txt file, commit the change, and push.  This is what confuses me.</p>

<pre><code>Administrator@BOXEN /path/to/working/dir (testingStuff)
$ vim test.txt

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git commit -a
[testingStuff 2be7063] more testing git
 1 files changed, 1 insertions(+), 0 deletions(-)

Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git push
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 276 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To http://url/to/remote/repo.git
   11468d8..2be7063  testingStuff -&gt; testingStuff
 ! [rejected]        oldBranch -&gt; remoteTrackedByOldBranch (non-fast-forward)
error: failed to push some refs to 'http://url/to/remote/repo.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>I want to continue pushing to <code>testingStuff</code> remotely, but want to stop pushing to <code>remoteTrackedByOldBranch</code> when I type <code>git push</code>.  I don't want to delete any branch -- seems a number of answers to similar questions suggest deleting rather than untracking.  Nor do I want to know how to push to a specific branch only by explicitly naming it in the git push command.  Too many muscle-memory mistakes that way.  I want <code>git push</code> to push to <code>origin/testingStuff</code> only.</p>

<p>I've already unsmartly (a word which proves itself) butchered my .git/config trying to accomplish this, and it's still pushing to <code>remoteTrackedByOldBranch</code>. </p>

<p><strong>EDIT:</strong> Here's what my .git/config file looks like after doing the above:</p>

<pre><code>[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
        hideDotFiles = dotGitOnly
[remote ""origin""]
        fetch = +refs/heads/*:refs/remotes/origin/*
        url = http://url/to/remote/repo.git
[branch ""master""]
        remote = origin
        merge = refs/heads/master
[branch ""oldBranch""]
        remote = origin
        merge = refs/heads/oldBranch
</code></pre>

<p>Nothing about the <code>testingStuff</code> branch in there. </p>

<p><strong>EDIT:</strong>  <code>git branch -avv</code> output:</p>

<pre><code>Administrator@BOXEN /path/to/working/dir (testingStuff)
$ git branch -avv
  master                                 721aa61 initial setup
  projectFork1                           e132f5f Fixed Construction grid labels getting sliced.
  projectFork2                           1d20317 initial load
  oldBranch                              1d20317 initial load
* testingStuff                           192f622 Still testing
  remotes/origin/HEAD                    -&gt; origin/master
  remotes/origin/empty                   ec1c694 initial setup
  remotes/origin/joeUserFork1            771f43e Initial Load
  remotes/origin/master                  721aa61 initial setup
  remotes/origin/projectFork1            e132f5f Fixed Construction grid labels getting sliced.
  remotes/origin/oldBranch               1d20317 initial load
  remotes/origin/joeUserFork2            dc605e8 What was sent initially.
  remotes/origin/testingStuff            192f622 Still testing
  remotes/origin/upload_master           0d8c440 Initial Load
</code></pre>
","0","1028230","0","0"
"65355304","332807","2020-12-18 10:23:31","0","198","<git><merge><branch><git-branch>","Find which git branches have been merged to branch x, but are not yet in master?","<p>I have a branch &quot;UAT&quot; which several feature branches will be merged into for testing. How can I get a list of the branches currently merged into &quot;UAT&quot; which are NOT yet merged to master?</p>
<p>So consider this UAT branch (branched off master) with 2 other branches merged into it:</p>
<p>UAT</p>
<ul>
<li>JIRA-001</li>
<li>JIRA-002</li>
</ul>
<p>So I want a command which will show that UAT currently has &quot;JIRA-001&quot; and &quot;JIRA-002&quot; merged into it.</p>
<p>Now if I merged JIRA-001 to master, I want that same command to show that UAT currently has only JIRA-002 merged into it.</p>
<p>Is this possible? I've been playing around with different combinations of <code>git branch --merged</code> based on other answers on here but it's not getting me the results I want.</p>
<p><strong>EDIT 1</strong> - I pretty much want this <code>git log | grep &quot;into UAT&quot; | sort -u</code> but with an extra bit of them disappearing when they're merged into master (but can't figure that part out!).</p>
","2","332807","",""
"65363721","3829280","2020-12-18 20:47:54","0","163","<git><gitlab><git-branch><branching-and-merging>","Maintain multiple git branch while working same files","<p>I've a requirement where I need to ship two features <code>X</code> and <code>Y</code>. Both these features touch sames files. Problem is the client may ask to pull out the feature based on timeline and quality. Now there were two approaches I've thought:</p>
<ol>
<li>Create a unified branch, will merge changes for feature <code>X</code> and <code>Y</code>. Pro: Easy to merge and maintain, Con: Difficult to remove code one of the features asked.</li>
<li>Create separate branches and at the end merge to develop. First merge <code>X</code> and then resolve huge list of conflicts when merging <code>Y</code> to develop. Pro: Easy to remove code, Con: Difficult to merge.</li>
</ol>
<p>Approach 1</p>
<pre><code>                featureTaskOfY
                 /
                /
D(Develop)&lt;----XY&lt;---- featureTaskOfX
</code></pre>
<p>Approach 2</p>
<pre><code>                 
                
D(Develop)&lt;----X&lt;---- featureTaskOfX
       \
        \
         ----------Y&lt;-------featureTaskOfY
</code></pre>
<p>What can be other ways to resolve it by easier means. Which balances both.</p>
","3","3829280","",""
"70604260","2116599","2022-01-06 08:19:58","0","340","<git><git-branch><git-lfs>","I am stuck in a side-branch because git can't find lfs object","<p>I did a <code>git checkout side-branch</code>. After a bit, I tried to go back <code>git checkout master</code> which failed with error:</p>
<pre><code>Updating files: 100% (712/712), done.
Downloading code/external/CNN-WordSim-main/assets/corpus.pkl (17 KB)
Error downloading object: code/external/CNN-WordSim-main/assets/corpus.pkl (5f722ca): Smudge error: Error downloading code/external/CNN-WordSim-main/assets/corpus.pkl (5f722cae5ff766982b32729971bbab91f1ba61f0c61d2b08868cd358a778c903): [5f722cae5ff766982b32729971bbab91f1ba61f0c61d2b08868cd358a778c903] Object does not exist on the server: [404] Object does not exist on the server
</code></pre>
<p>Apparently the file corpus.pkl cannot be found anymore. I have also tried <code>git checkout --force master</code> with the same result. The point is that <em>I don't care about corpus.pkl</em>, it's an old file from a different repo I clone/forked/downloaded some time ago and I don't really care about it anymore. I am happy to lose the whole CNN-WordSim-main repo, I just want to go back to <code>master</code>.
I am at complete lost. Any idea?</p>
","2","2116599","",""
"54640236","1301295","2019-02-11 22:39:50","1","232","<git><git-branch><git-worktree>","checkout / clone multiple branches from my git server","<p>I have this scenario on my git server : </p>

<pre><code>git branch -a
</code></pre>

<p>gives output:</p>

<pre><code>  common_data
* master
  shared_data
</code></pre>

<p>How do I check out branches shared_data and common_data at the <strong>SAME</strong> time into separate local folders:</p>

<pre><code>working_directory/common_data
working_directory/shared_data
</code></pre>

<p>on my local workstation ? I have read numerous posts but somehow I don't get how to use the work_tree for this.</p>

<p>Thanks</p>

<p>GT</p>
","0","1301295","",""
"54646196","5321614","2019-02-12 08:58:24","-1","47","<git><github><git-branch><git-commit>","git returning to a commit and again get all together","<p>I have commits like</p>

<pre><code>12345
12346
12347
</code></pre>

<p>I want to get back tgo <code>12345</code> and work on this I will add new commits <code>23456</code>, <code>23457</code>, <code>23458</code> etc</p>

<p>then I may need to get <code>12345, 12346, 12347 and 23456, 23457, 23458</code> all together</p>

<p>Is this possible, what should be my steps to achieve this?</p>
","3","5321614","",""
"54695693","9100549","2019-02-14 17:11:53","4","4968","<git><github><branch><git-branch>","git branch -a lists merged/deleted branches","<p>Whenever I write the command <code>git branch -a</code> to see all my branches locally and remotely I somehow see old branches that have been merged in and closed. How do I get rid of these branches that no longer exist in my local git or github?</p>
","0","9100549","",""
"54924227","7852189","2019-02-28 11:05:05","2","1004","<github><workflow><git-branch><git-flow>","How to use git flow without using release branch?","<p>There are several branches available in <strong>git flow</strong>.
such as</p>

<ul>
<li><code>feature/</code></li>
<li><code>release/</code></li>
<li><code>support/</code></li>
<li><code>hotfix/</code></li>
<li><code>bugfix/</code></li>
</ul>

<p>I do not need <code>release/</code> branch and want to merge <code>staging</code> branch (<em>a development branch</em>) directly to <code>master</code>. 
What is the best way to achieve this using <strong>git flow</strong>?</p>
","0","7852189","",""
"72433618","18251210","2022-05-30 11:28:49","0","4271","<git><github><git-branch><git-push>","How do I push my local git repository to a branch in a remote github repository?","<p>My organization has prevented pushing to master. I instead need to create a separate branch on GitHub explicitly and push my code to that branch and then create a pull request.</p>
<p>I have my code in a local repo. The commands I have run:</p>
<pre class=""lang-bash prettyprint-override""><code>git init
git add .
git commit -s -m &lt;my-commit-message&gt;
git remote add origin &lt;repo-URL&gt;
git branch -M main
git pull // not sure if this is necessary
git checkout -b feat/dev // the remote branch name
git push -uf origin:feat/dev main
</code></pre>
<p>What happens:</p>
<p>Error: feat/dev does not seem to be a local repository</p>
<p>What I did:</p>
<p><code>git push -uf origin main</code></p>
<p>What happens:</p>
<p>Code gets pushed to a new branch named main and I cannot open a pull request for the 2 branches have entirely different commit histories.</p>
<hr />
<p>What have I done wrong?</p>
<hr />
<p>EDIT:</p>
<p>Adding the GitHub Steps(?) required by my organization here:</p>
<ol>
<li>Create your project locally. Run it, debug it and make it so that it runs without bugs. (Use git(<strong>locally</strong>!!) if you feel like it; I always do :D )</li>
<li>Raise a ticket (an internal portal for requesting a GitHub repository)</li>
<li>Specify the name of the repository you require</li>
<li>This is not something I have to do but adding it here: Run a create new repository workflow. This creates a repo with a Readme.md and a license pre-chosen by the ticket approver. The default branch is (still) master.</li>
<li>Create a new branch named &lt;whatever-you-want&gt;</li>
<li>Push your code to that branch.</li>
<li>Raise a Review request (this is on JIRA and not GitHub)</li>
<li>Once the code is reviewed, create a new pull request by choosing to compare between my created branch and master.</li>
</ol>
<hr />
<p>What I have always done for my personal projects:</p>
<ol>
<li>Create the Project and well, test it.</li>
<li>run <code>git init</code></li>
<li>run <code>git add</code></li>
<li>run <code>git commit</code></li>
<li>Open GitHub and create a new repo with the master branch.</li>
<li>run <code>git branch -M main</code> locally</li>
<li>run <code>git remote add origin</code></li>
<li>run <code>git push -u origin main</code></li>
</ol>
<p>This always pushed the code to the master branch and, well worked fine.</p>
","2","18251210","0","0"
"55008325","6475284","2019-03-05 17:22:05","0","93","<git><version-control><visual-studio-code><git-branch><gitignore>",".gitignore file is ignored, even after re-setting multiple times (in vscode)","<p>Unfortunately, my .gitignore file or certain commands in it get completely ignored.</p>

<p>When I check out a branch or from remote or pull/fetch, the .vscode folder is always removed, so that all my tasks get lost and I have to create .vscode folder with the tasks.json file inside again and again manually.</p>

<p>How can I fix the problem without overwriting or deleting my current branches? If these (currently 3 branches) are deleted, the consequences would be really bad.</p>

<p>This is my current .gitignore file. For the folder .vscode I have already tried different approaches and, for example, removed the lines with the exclamation marks, etc. Still does not work.</p>

<p>My .gitignore file ist placed in the root folder of an angular 7 project and I'm using visual studio code.</p>

<pre><code># See http://help.github.com/ignore-files/ for more about ignoring files.

# compiled output
/dist
/tmp
/out-tsc

# dependencies
/node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
*.iml
.settings/

# misc
/.sass-cache
/connect.lock
/coverage
npm-debug.log
testem.log
/typings

# e2e
/e2e/*.js
/e2e/*.map

# System Files
.DS_Store
Thumbs.db

.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
</code></pre>
","11","6475284","",""
"55043246","2664531","2019-03-07 11:58:50","0","492","<git><repository><git-branch><git-push><git-remote>","Push git branch to other repository","<p>I have the following use case:</p>

<p>We have a private <code>gitlab</code> repository and want to push to a public <code>github</code> repo to open source it. But the private repository and the public repository shall contain different versions of some files. E.g. different documentation, etc...</p>

<p>I have tried to push the opensource_branch from the private <code>gitlab</code> repo to the public <code>github</code> repo:</p>

<pre><code>git push origin_github opensource_branch:master 
</code></pre>

<p>But the result is that all other historical commits before are also pushed (which contain documentation which shall not be public). </p>

<p>Any ideas how to solve this without manually copy &amp; paste all the time?</p>

<p>Thanks.</p>

<p>PS: I have of course searched SO for similar use cases but did not find exactly this one. Every other question regarding pushing to other remotes does not have the requirement that particular historic commits shall not be visible on the remote at all.</p>
","0","2664531","",""
"55054213","414415","2019-03-07 23:03:54","11","5937","<git><git-branch>","Filter remote branches in git","<p>I’d like <code>git branch -a</code> to only show a subset of remote branches, e.g. branches that begin with prefix like 'origin/iliaskarim'</p>

<p>What is the nicest way to accomplish this?</p>
","2","414415","0","0"
"72452138","6101336","2022-05-31 17:45:55","0","228","<git><git-branch><git-submodules>","How do i add a git submodule to a specific branch of the parent repo?","<p>Say i have a repo that has two branches: <code>main</code> and <code>feature</code>. Now i want my <code>feature</code> branch to depend on another repo as a submodule but i want that submodule to be visible only to that <code>feature</code> branch not to the <code>main</code> branch.
I have already tried:</p>
<ol>
<li>switch to <code>feature</code> branch</li>
<li>add my submodule there</li>
<li>switch back to <code>main</code> branch, but here the submodule remains visible which i don't want.</li>
</ol>
<p>How is it possible ?</p>
","2","6101336","",""
"72453624","1391441","2022-05-31 20:07:44","0","19","<git><github><git-branch>","git branch -a shows branch that can not be removed locally and is not present in remote","<p>I have a repo hosted in Github. The command <code>git branch -a</code> shows the following:</p>
<pre><code>* develop
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/develop
  remotes/origin/master
  remotes/origin/release-031
</code></pre>
<p>The (old) <code>release-031</code> is not present in the Github repo, and I can not delete it locally either:</p>
<pre><code>$ git branch -d release-031
error: branch 'release-031' not found.
</code></pre>
<p>How can I remove these phantom old branch?</p>
","3","1391441","",""
"63961671","10137647","2020-09-18 19:22:27","2","505","<git><github><git-branch><git-tag>","What exactly does a git tag point to?","<p>Does a git tag point to a specific sha1, a specific commit on a specific branch, or something else?</p>
<p>This question is extremely similar to <a href=""https://stackoverflow.com/questions/33283350/what-happen-to-git-tags-pointing-to-a-removed-commit"">What happen to Git tags pointing to a removed commit</a>, but I am unable to find the answer I am looking for there.</p>
<p>Let's use the following example:</p>
<pre><code>            C (Branch, cut with same commit history)
            |             
A-----B-----C (Main)
</code></pre>
<p>I'm trying to help myself answer the following questions:</p>
<ol>
<li><p>If I tag commit C on Main before cutting Branch, does my tag apply to Main and/or Branch?</p>
</li>
<li><p>If I tag commit C on Main after cutting Branch, does my tag apply to both Main and/or Branch?</p>
</li>
<li><p>If I tag commit C on Branch after cutting Branch, does my tag apply to both Main and/or Branch?</p>
</li>
<li><p>What happens if there is a different commit history? For example, does anything change with the following:</p>
<pre><code>            C-----D-----E (tag on E in either the main branch or this branch)
            |
A-----B-----C-----E
</code></pre>
</li>
</ol>
<p>edit: looks like #4 is impossible because a commit cannot have the same hash if the parent is different</p>
","0","10137647","",""
"63978699","15710459","2020-09-20 11:53:51","-1","52","<git><github><github-pages><git-branch><git-branch-sculpting>","How can I create a new git branch from the base of the commit tree , which has no commit in common with master branch ? for gh-pages","<p><strong>I want to make a new branch from the base of the master branch, such that the new branch has no commit the same as the master branch.</strong></p>
<blockquote>
<p>the new branch will be totally different from the master branch, and
never to be merged to master</p>
</blockquote>
<p>I want to do this because I want to create a <code>gh-pages</code> branch, to host my site. When I click on choose theme in GitHub settings, it creates such a dream branch. But how to create such a branch from the command line ??</p>
","1","15710459","",""
"63986489","5729579","2020-09-21 05:09:09","2","1520","<git><github><git-branch><pull-request><branching-and-merging>","How to delete published branch without creating pull request on github console","<p>Is there any way to delete the published branch without creating a pull request and merging it into the default branch on the GitHub console.</p>
<p>One way I know is to create a pull request and then close it, then I am able to delete that branch.</p>
<p>Edit :-
I could not find exisiting question on SO with below conditions -</p>
<ol>
<li>How to delete branch without raising pull request.</li>
<li>How to do it on GitHub website.</li>
</ol>
<p>Thanks.</p>
","1","5729579","",""
"63985605","14284685","2020-09-21 02:57:38","1","38","<git><git-merge><git-branch>","How do I update a parent branch without deleting the clild one in git?","<p>I know this was answered somewhere but I cannot find the right wording. The question is: If I have a master branch and a master/branch1 branch, and I have commits in it like this:</p>
<pre><code>c c
| |
c c
| |
|/  c = commit
</code></pre>
<p>How can I do something like tihis?</p>
<pre><code>c c
| |
c c
|\|
c c
| |
c c
| |
|/  
</code></pre>
<p>And when I do merge gitKraken shows this:</p>
<pre><code>c
|\
c c
| |
c c
| |
c/
</code></pre>
<p>So can I checkout the clild branch after I have merged it?
Side question: If merge does not delete the child branch, how do I?</p>
","0","14284685","0","0"
"63999798","12361700","2020-09-21 20:48:55","1","1464","<git><github><branch><git-branch>","mark branch as closed/archived github","<p>I have a pretty big project on <code>Github</code> with several other contributors, and we have reached the point where we have a list of braches that we no longer can &quot;manage&quot; (i mean that every time i do <code>git branch</code> the list way too long)</p>
<p>Most of those branches are now useless since they are something like &quot;fix-xxx&quot; so i would like to &quot;close&quot; them, so that i can still see them on the Network tab, but they will be something like archived</p>
<p>Are there something like this o i have to delete them?</p>
","0","12361700","0","0"
"46074044","5061866","2017-09-06 11:29:13","3","2140","<git><git-branch><git-pull>","Is it safe to do a git pull from master to my local repo after creating a new branch on which I need to see the latest changes too?","<p>I would like to have the latest updates from the remote repo on my local one. I usually do git pull while being on the master branch and then create a new branch. I have now created a new branch (did not add/change anything in the local code) but skipped the git pull on master before this. If I do a git pull, will the latest remote modifications be reflected on my new local branch and local master, or should I delete it and recreate it after git pull?
Thanks!</p>
","0","5061866","0","0"
"46140939","51545","2017-09-10 12:57:29","1","38","<git><branch><git-branch>","A good way of creating a git master branch from a former one","<p>Okay I couldn't think of a good title for this, so here's the story.</p>

<p>I made a survey app that was a very specific one, from odd invitation logic to creating PDF at specific parts of the procedure, I made it as the master branch since it was a small and one time app.</p>

<p>Then a few years later there was another project that could use this app with small modifications. That went well too but now I have a problem, I want to have a master branch that I could work on the core parts and bug fixes, then the other branches could pull it.</p>

<p>The only way I can think of is, I have to move my master(the first project) to a branch(version/aa), and then remove all the project specific stuff on the master, if I pull that to my version/aa, that would delete the specific code for that branch, so then I have to manually revert the code parts back, which seems to be full of danger.</p>

<p>Is there any good way to do it?</p>
","0","51545","0","0"
"28038013","2425443","2015-01-20 04:56:18","2","1133","<git><git-branch>","How to get latest remote code on git?","<p>If I'm working locally,and I need to get the latest code on remote master branch, one way is to switch to local master and do git pull . However, this fetches only the changes after the HEAD of local master. If the remote master is changed in such a way that, underlying commits before local HEAD are also modified, how can I get them, without needing to do a whole git clone again?</p>
","1","2425443","",""
"10058575","1266166","2012-04-07 21:33:48","7","3387","<deployment><github><blogs><git-branch><github-pages>","Set up of octopress blog on github","<p>Can't setup Octopress blog on Github. I'm following this guide on <a href=""http://octopress.org/docs/deploying/github/"" rel=""noreferrer"">octopress</a> but after creating a repository on github and preparing everything I can't deploy on github. </p>

<p>I have two branches, master and gh-pages and after trying I have just deleted everything and I want to start from the beginning.</p>

<p>Should I put octopress folder inside my repository folder locally? Or do they have to be in two different folders?
That guide is a bit confusing, and I am very new to git. <br> Can anyone who <strong>have already done it</strong> explain how to deploy on github with github-pages?</p>
","1","1266166","0","0"
"64722583","12328342","2020-11-06 22:50:05","0","28","<ios><xcode><git-branch><info.plist><run-script>","Xcode release build configuration reflects outdated git branch","<p>When building my app with <strong>Xcode</strong> <code>debug</code> <em>build configuration</em> I am seeing my most recently updated <strong>git</strong> <em>branch</em>.</p>
<p>When building my app with <strong>Xcode</strong> <code>release</code> <em>build configuration</em> I am seeing an outdated <strong>git</strong> <em>branch</em>.</p>
<p>How do I build my app in <strong>Xcode</strong> <code>release</code> <em>build configuration</em> with the proper <strong>git</strong> <em>branch</em>?</p>
","2","12328342","",""
"10064918","1306466","2012-04-08 17:44:22","2","425","<git><push><git-branch><remote-branch>","Specify the 'origin/master' part in a git push","<p>If I do a git push, I see 3 branches involved. 1) The local branch I am working on, say 'foo1' 2) the local remote-tracking branch 'origin/foo2' (which always is on the same commit as the remote foo3 after push/pull) 3) 'foo3' in the remote repo. Naturally normally they all would be called foo, but I want different names so I can properly understand git and ask this question here. I don't understand where I can specify foo2. When I do</p>

<pre><code>git push origin foo1:foo3
</code></pre>

<p>And having that in my .git/config</p>

<pre><code>[branch ""master""]
remote = origin
merge = refs/remotes/origin/foo2
</code></pre>

<p>Point 1 and 3 are ok, but I don't have an origin/foo2 in my local repo. What am I missing? Or is the answer that my remote tracking branches are <em>always</em> named exactly the same way as the remotes - that would be fine for me - I just want to understand git properly.</p>

<p>The git-push manual also only talks about two refs (the refspec src and dst), point 1 and 3, in my example. Where does the manual talk about that after the dst branch on the remote repo is updated, also the local remote-tracking ref is updated? </p>
","1","1306466","0","0"
"46348522","6243124","2017-09-21 16:04:34","2","1570","<git><git-branch><git-merge><git-commit><git-checkout>","Did git checkout just delete my repository?","<blockquote>
  <p><strong>General Question:</strong> How can one use Git locally alone (i.e. by oneself) in such a way that merging changes from a new branch into master, or moving from branch to branch using checkout, doesn't delete everything in the new branch and the master branch?</p>
  
  <p>Or if one wants to avoid git deleting everything and leaving no backups, is it essentially necessary to be working with a remote repository (e.g. GitHub), not just a local one?</p>
</blockquote>

<p><strong>Specific Case:</strong><br>
I had two branches for my local git repository, <code>master</code> and <code>equality</code>, located in the folder <code>.../ps/ps3</code>. I was in the branch <code>equality</code> and I wanted to merge my changes into <code>master</code>.</p>

<p>So first I did <code>git merge</code> and this returned the error:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>So then I figured that I needed to be in <code>master</code> rather than <code>equality</code> to merge my changes from <code>equality</code> into master. So what I did next was: <code>git checkout master</code>. This produced the following error:</p>

<p><code>error: Your local changes to the following files would be overwritten by checkout:
    ps3/ps3.aux
    ps3/ps3.log
    ps3/ps3.pdf
    ps3/ps3.synctex.gz
    ps3/ps3.tex
Please commit your changes or stash them before you switch branches.
Aborting</code></p>

<p>I interpreted that error as follows: nothing happened, I am still in the <code>equality</code> branch, I should make another commit of <code>equality</code> branch if I want my changes in <code>equality</code> to be saved when I use them to rewrite the <code>master</code> branch, rather than git rewriting from an earlier version of <code>equality</code>.</p>

<p>My terminal prompt indicated that I was still in the directory <code>.../ps/ps3</code> and in the branch <code>equality</code>, so I didn't think that anything was wrong. When I did <code>git commit -am ""Finished correct proof""</code> I didn't get an error message.</p>

<p><code>5 files changed, 155 insertions(+), 29 deletions(-)
 rewrite ps3/ps3.pdf (72%)</code></p>

<blockquote>
  <p>Now it was either this command, or the one immediately following it, which deleted <em>everything</em>, not just <code>equality</code> and every commit in that branch, but also <code>master</code> and every commit in the branch, and even the entire folder <code>.../ps/ps3</code> of the repository. </p>
</blockquote>

<p>I did <code>git merge</code> (I was still in the branch <code>equality</code>) and I got the error message:</p>

<p><code>fatal: No remote for the current branch.</code></p>

<p>This confused me, because why would I need a remote of anything to do anything? And what did it have to do with my current situation? I guessed it was just an arcane way of complaining that merging the changes from <code>equality</code> into <code>master</code> needed to be done from <code>master</code>. </p>

<p>So next I did <code>git checkout master</code> and got no error, just <code>Switched to branch 'master'</code>. In spite of not getting any errors, I still think this may have been the step that deleted everything, since after doing this my terminal no longer showed that I was in either <code>equality</code> or <code>master</code>, so it seemingly must have at the very least deleted the entire repository, i.e. all of the files in it and the containing folder. </p>

<p>My terminal still said I was in a directory named <code>ps3</code> even though it didn't also list a git branch like it should have. So next I did <code>git merge</code> and then <code>git merge equality</code> but both returned the error:</p>

<p><code>fatal: Unable to read current working directory: No such file or directory</code></p>

<p>Then I did <code>ls</code>, there was no output, then I did <code>cd ..</code> and <code>ls -a</code> and the directory <code>ps3</code> was not listed as being a subdirectory of <code>ps</code>. I.e. the containing folder for the repository, as well everything and every branch in it had been deleted somehow. I didn't even know it was possible to do this with Git -- I thought that the worst possible thing that could happen if I screwed up was that the earlier version in the <code>master</code> branch would overwrite the newer version in the <code>equality</code> branch, and that I could then just do <code>git revert</code> multiple times to get back the <code>equality</code> branch. And I thought <code>git checkout</code> just moved between branches, rather than deleting everything.</p>

<p><a href=""https://try.github.io/levels/1/challenges/22"" rel=""nofollow noreferrer"">This page</a> makes it seem like <code>git checkout master</code> does what I expected it to do, namely switch to the <code>master</code> branch, rather than deleting everything. Also <a href=""https://stackoverflow.com/questions/30875205/restore-a-deleted-folder-in-a-git-repo"">this page</a> makes it seem like <code>git checkout</code> should help restore files, so why did it delete all of mine? </p>
","0","6243124","",""
"64843538","8618242","2020-11-15 10:53:11","-3","54","<git><git-branch>","How to reverse the order of two branches in git","<p>I created 2 branches <code>dev</code>, and <code>local</code>. After I created them I tried to see the topology (which seems to be reversed in my case) using <code>git show-branch --all</code>:</p>
<pre><code>* [dev] Add Phong Blinn Model Shader
 ! [local] Add Phong Blinn Model Shader
  ! [master] Add Phong Blinn Model Shader
   ! [origin/HEAD] Add Phong Blinn Model Shader
    ! [origin/master] Add Phong Blinn Model Shader

</code></pre>
<p>How can I reverse the order of the branches <code>dev</code>, and <code>local</code>?</p>
","3","8618242","",""
"10095205","178315","2012-04-10 19:33:21","15","4577","<git><git-branch><gitk>","How to make gitk show only local branches?","<p>How to make gitk show only local branches? Or even better - can I hide remote branches that do not have corresponding local branches?</p>
","0","178315","0","0"
"64854046","8398158","2020-11-16 07:24:48","0","459","<git><powershell><git-branch>","git branch -r --merged throw an error: fatal: ambiguous argument 'origin/HEAD -> origin/master': unknown revision or path not in the working tree","<p>I write a script that are looking for stale branches.
I checked the not merged and merged branches.
When i check the merged branches i get an error:</p>
<blockquote>
<p>fatal: ambiguous argument 'origin/HEAD -&gt; origin/master': unknown
revision or path not in the working tree. Use '--' to separate paths
from revisions, like this: 'git  [...] --
[...]' You cannot call a method on a null-valued expression. At
D:\Repo\Any\FindStaleBranches.ps1:46 char:9 $date =
$command.ToString().Substring(0, $command.ToString(). ...</p>
<p>You cannot call a method on a null-valued expression. At
D:\Repo\Any\FindStaleBranches.ps1:47 char:9 $commandResult =
$command.ToString().split(&quot;,&quot;, 4)</p>
</blockquote>
<p>Line 46 is the &quot;git log&quot; command
here is my script:</p>
<pre><code>
function GetBranchListInformations()
{
    [CmdletBinding ()]
    Param
    (
        [Parameter(
            Mandatory,
            Position=0)]
            [Object[]] $GitCommandParameters
        )
    
    $branches = &amp; git $GitCommandParameters
    
    if( [string]::IsNullOrWhitespace($branches.ToString()) )
    {
        Write-Information &quot;No branch found&quot; -InformationAction Continue
        return
    }
    
    foreach( $branch in $branches )
    {
        $command = &quot;&quot;
        $branch = $branch.Trim()
        $command = git log -n 1 --format=&quot;%cr, %an, %ae, $branch&quot; --no-merges --first-parent $branch | Sort-Object
        $date = $command.ToString().Substring(0, $command.ToString().IndexOf(&quot;,&quot;))
        $commandResult = $command.ToString().split(&quot;,&quot;, 4)
        $date = $commandResult[0].Trim()
    
        if( $date -match &quot;year&quot; -or $date -match &quot;years&quot; )
        {
            $commandResult = $command.ToString().split(&quot;,&quot;, 5)
            [PSCustomObject]@{
                Owner = $commandResult[2].Trim()
                EMail = $commandResult[3].Trim()
                Branch = $branch
                Delay = $date + &quot;, &quot; + $commandResult[1].Trim()
            }
            continue
        }
        if( $date -match &quot;months&quot; )
        {
            $branchCount = $date.ToString().Substring(0, $date.ToString().IndexOf(&quot; &quot;))
            if( $branchCount -gt 3 )
            {
                [PSCustomObject]@{
                    Owner = $commandResult[1].Trim()
                    EMail = $commandResult[2].Trim()
                    Branch = $branch
                    Delay = $date
                }
            }
        }
    }
}
    
Set-Location $PSScriptRoot
    
Write-Information &quot;`nNot merged branches:&quot; -InformationAction Continue
$Params = @(
    &quot;branch&quot;,
    &quot;-r&quot;,
    &quot;--no-merged
    )
$staleBranchList = GetBranchListInformations $Params | Sort-Object -Property Owner, Delay
foreach( $staleBranch in $staleBranchList )
{
    $owner = $staleBranch.Owner
    $branch = $staleBranch.Branch
    $delay = $staleBranch.Delay
    $mail = $staleBranch.EMail
    Write-Output &quot;$owner, $branch, $delay&quot;
}
    
Write-Information &quot;merged branches:&quot; -InformationAction Continue
$Params = @(
    &quot;branch&quot;,
    &quot;-r&quot;,
    &quot;--merged&quot;
    )
$staleBranchList = GetBranchListInformations $Params | Sort-Object -Property Owner, Delay
foreach( $staleBranch in $staleBranchList )
{
    $owner = $staleBranch.Owner
    $branch = $staleBranch.Branch
    $delay = $staleBranch.Delay
    $mail = $staleBranch.EMail
    Write-Output &quot;$owner, $branch, $delay&quot;
}
</code></pre>
","1","8398158","",""
"64901509","10664542","2020-11-18 21:15:27","1","256","<git><git-merge><git-branch>","With git, how to force overwrite a file in one branch, from a file in another branch (bypass merge), and commit?","<p>I have a single file in a branch called '<strong>production</strong>' that I want overwritten by a specific file in another branch called '<strong>sqa</strong>'.</p>
<p>The nature of the file is that it is not code where there are multiple contributors.</p>
<p>What command would do this?  (neither branch is master) - one branch is called '<strong>production</strong>' and the other '<strong>sqa</strong>'.</p>
<hr />
<p>The file in branch '<strong>sqa</strong>' I want to get into the branch '<strong>production</strong>' and have them be identical after running the command, avoiding any potential merge conflict (force overwrite, force accept the file in 'sqa') <code>/sqa/file =&gt; /production/file</code>.</p>
<p>If this is possible, and if anyone has actually done this and tested this, it would be so greatly appreciated (for a single file only, not multiple files or the whole branch merge).</p>
<p>If the file exists in branch '<strong>sqa</strong>' but not in '<strong>production</strong>', would the command work the same (to copy it there?)</p>
","0","10664542","",""
"28109111","3219804","2015-01-23 11:40:08","7","8471","<git><git-branch><git-merge>","Find the age of a git branch","<p>Let's say for example that I have 
<code>master</code> was merged into <code>g1</code> and the branch <code>g1</code> has merged into <code>master</code>.</p>

<pre><code>git merge master -m ""#3 git merge master to g1""

git merge g1 -m ""#3 git merge g1 to master""

...
...

git branch -r -v

&gt;

origin/g1            8b535b9 #3 git merge master to g1

origin/master        a335421 A comment

origin/newbranch     626a6d2 branch example
</code></pre>

<p>Is there any way where I can see the order in which the branches were created, timestamp or SHA when the branch had its beginning?
Or in some way find which one of the branches had its origin in the other?
Except for the fact that I know by name that master is my oldest.</p>
","0","3219804","0","0"
"64919274","69454","2020-11-19 20:12:57","3","686","<git><git-branch><git-clone>","Can you shallow clone 2 branches using git?","<p>I'd like to shallow clone part of a repository: just 1 feature branch (including all of the commits since branching from <code>main</code>) and a few commits on <code>main</code> before that.</p>
<p>I have tried <code>git clone $repo --depth=N --branch=$feature</code> which does correctly check out a shallow clone of $feature, and assuming I pick depth to be large enough goes back to the branch point.</p>
<p>What's the incantation to pull in main as well?</p>
<p>Essentially I want to be able to do:</p>
<pre><code>git clone --branch=$feature
BASE=$(git merge-base $feature origin/main)
echo git rev-parse $BASE^
echo git rev-parse $BASE^^
echo git rev-parse $BASE^^^
</code></pre>
<p>to tell me the SHA1s of the few commits that happened just before branching.</p>
","2","69454","",""
"64931079","10451385","2020-11-20 14:18:58","1","792","<git><git-branch><git-clone>","How do you clone all branches of a git repository into their own folders, without specifying every branch?","<p>I'm trying to make a script to auto pull <a href=""https://github.com/rtlewis88/rtl88-Themes/tree/rtl88-Themes"" rel=""nofollow noreferrer"">this repo</a> and all of its branches into either their own folders, or into one large folder. I can't find a way to do this other than manually cloning all 48 branches, then copying all of their files into a folder, however, this would take quite a while and be impractical to do with every update. Is there a way to clone all of these branches into their own folders, without specifying every branch?</p>
","5","10451385","0","0"
"46385332","5655618","2017-09-23 23:58:32","2","169","<git><github><git-branch><git-submodules><git-fork>","git repo with submodules: fork and create your own branch","<p>I am having issues working with git submodules. I want to know a clean way of doing the following. </p>

<p>I want to fork a git repository which has submodules and then I want to create my own branch for each of the submodule and work on that. Can anyone tell a clean way of doing this? One way that I know is to basically fork each submodule separately, set the upstream and create your own branch. But this process is a little painful if there are a lot of submodules. Also as in general for the git repos with submodule a particular commit point in the submodule is tracked. If I create my own fork for each submodule it will become hard to be in sync with the original git repo.</p>

<p>Any suggestions ?</p>

<p>Thanks.</p>
","2","5655618","0","0"
"28462083","3749288","2015-02-11 18:47:40","29","20372","<git><git-branch>","git branch -d <branchname> throws error: branch <branchname> not found","<p>When I type <code>git branch</code>, I get</p>

<pre><code>* master
localbranch
</code></pre>

<p>But when I try to remove the branch, <code>git branch -d localbranch</code>, I get a not found error: </p>

<pre><code>error: branch 'localbranch' not found.
</code></pre>

<p>I have also tried to force the delete with <code>git branch -D localbranch</code>, but it is giving me the same error.</p>

<p>The branch was corrupted and I did the following procedure, <a href=""https://stackoverflow.com/questions/23725925/git-repository-corrupt-incorrect-header-check-loose-object-is-corrupt"">Git repository corrupt (incorrect header check; loose object is corrupt)</a>, to remove the corrupted files. But now I cannot delete the branch.</p>
","0","3749288","0","0"
"65255863","2125837","2020-12-11 17:22:24","-1","3582","<git><git-branch>","Create a git branch off from origin/master","<p>This is a question that is <em><strong>not</strong></em> similar to existing Q&amp;A that I've found. It is closely related to the git workflow that I'm following, which is</p>
<ul>
<li>I do git updates in the default master branch, so that I can do <code>git pull</code> from time to time.</li>
<li>My updates are pushed to a remote branch for PR.</li>
</ul>
<p>Now the situation is that I need a quick fix and need to create a git branch from off from the <em>real</em> master on the server, not the master <em>of my local change</em>. But I was unable to do that following the advices I found on the internet.</p>
<p>My current status:</p>
<pre><code>. . . 
On branch master
Your branch is ahead of 'origin/master' by 52 commits.
. . . 

$ git checkout master
Already on 'master'
Your branch is ahead of 'origin/master' by 52 commits.

git checkout -b new-feature
Branch 'new-feature' set up to track local branch 'master' by rebasing.
Switched to a new branch 'new-feature'

$ git status
On branch new-feature
Your branch is up to date with 'master'.
</code></pre>
<p>The problem is that such <em>&quot;up to date with 'master'&quot;</em> is the master of my local change, not the real master on the server, as it is tracking &quot;local branch 'master' &quot;, but I want it to base and track &quot;<code>origin/master</code>&quot; instead.</p>
","10","2125837","",""
"46715851","4665795","2017-10-12 17:44:27","0","51","<git><github><git-branch>","unable to see 'master' branch on git in ubuntu16.04","<p>While using the command <code>git branch</code> it is not showing the ""master"" branch. Instead, I'm getting this:</p>

<blockquote>
  <p>error: pathspec 'master' did not match any file(s) known to git.</p>
</blockquote>
","5","4665795","",""
"28505566","1158977","2015-02-13 17:46:15","0","264","<python><github><git-branch><github-api><git-tag>","Unable to check out tag created via the github API","<p>I followed the instructions at this <a href=""https://developer.github.com/v3/git/tags/#create-a-tag-object"" rel=""nofollow"">Github create tag</a> API reference which say to :</p>

<pre><code>1) create a tag from a sha
2) create a reference for that commit
</code></pre>

<p>I did both.  The reference is of course just a branch, and I can check it out in my terminal just fine and view it in Github web just fine.  </p>

<p>The tag however is nowhere to be found, not with Github web nor git checkout tags/tag-name</p>

<p>My code is as follows:</p>

<pre><code>import json
import requests
from requests.auth import HTTPBasicAuth
url = 'https://api.github.com/repos/MYORG/MYREPO/git/tags'
params = dict(ref=""refs/heads/MyNewTag"",    sha=""SHA"")
res = requests.post(url, data=json.dumps(params), auth=HTTPBasicAuth('user', 'token'))
# this works and returns a 201 with its own sha
url = 'https://api.github.com/repos/MYORG/MYREPO/git/refs', params = dict(ref=""refs/heads/MyNewBranch"", sha=""SHA"")
res = requests.post(url, data=json.dumps(params), auth=HTTPBasicAuth('user', 'token'))
#this also works and returns a 201
</code></pre>

<p>But as I said, the tag is not in Github web, nor can I check it out locally.  What am I missing?</p>
","0","1158977","",""
"65300972","2396502","2020-12-15 06:23:33","0","155","<git><git-branch><git-worktree>","Worktree branches in git show unmerged even after merging","<p>I often use <code>git add worktree wtname</code> to create separate branches. When I merge the changes on the branch <code>wtname</code> to the master, I expect that <code>git branch --no-merged</code> should not list <code>wtname</code> branch. However, it does. Worse, even after removing the worktree:</p>
<pre><code>rm -rf wtname
git worktree remove wtname
</code></pre>
<p>I can't delete this branch unless I force delete it. After the above written commands, if I run <code>git branch -d wtname</code>, it throws the following error:</p>
<pre><code>error: The branch 'wtname' is not fully merged.
If you are sure you want to delete it, run 'git branch -D wtname'.
</code></pre>
<p>Why is this the case?</p>
","5","2396502","0","0"
"65309178","1619521","2020-12-15 15:47:58","2","770","<git><branch><git-branch><branching-and-merging>","Git remove origin/branch in git log","<p>I have done some updates on a branch and merge it to master.
But it seems I've done a mistake, and I do not know how to fix it.</p>
<p><code>git log --all --decorate --oneline --graph</code> give this :</p>
<pre><code>*   85b7966 (HEAD -&gt; master, origin/master, origin/HEAD) Merge pull request #2 from doom-fr/improve-documentation
|\  
| * 547f135 (origin/improve-documentation) Improve documentation : add linux installation instructions
|/  
*   66dac19 Merge pull request #1
</code></pre>
<p>I think that <strong><code>(origin/improve-documentation)</code></strong> should not be there.</p>
<p>How can I remove it ?</p>
","1","1619521","",""
"28524774","3929110","2015-02-15 09:34:48","0","981","<git-branch><git-commit>","Unable to find branch in git repo","<p>In the current directory. I had made a repository yesterday from this directory.
now:<br>
        git branch foo<br>
After doing some changes in the file..<br>
    git add .<br>
    git commit -m ""commit1""<br>
    git push.<br>
I am unable to see the branch from my repo on github. While git branch does show this foo.</p>
","0","3929110","",""
"28528570","3929110","2015-02-15 16:58:06","1","44","<git-branch><git-pull>","How to pull a commit from a branch in git","<p>I have two commits in my branch.<br>
How can I pull the first  from command line in my local repository?<br>
I have two commits under branch 'foo'. With messag ""xyz"" and ""abc""  and with some numbers written ""efc204e"" and ""33481e8"" respectively  </p>
","6","3929110","",""
"46779225","5864903","2017-10-16 21:15:32","1","683","<git><github><workflow><git-branch>","Multiple orphan branches or separate repositories - git","<p>I have a project which I would like to store on GitHub.</p>

<p>This project contains code to run on an Arduino, Android, iOS as well as server code. Each section of the code interacts with the other, however, development of each section is more or less independent.</p>

<p>Should I have all the code sections in one repository under different orphan branches, or should I have a separate repository for each section? Why? What would be the advantages and inconveniences of each method?</p>

<p>Thank you very much!</p>
","0","5864903","",""
"28544930","2221343","2015-02-16 15:34:51","1","258","<git><merge><git-branch><git-plumbing>","git: Best way to determine unmerged branches in a script","<p>At an interactive prompt, I can use the <code>git branch -r --no-merged</code> command to determine remote branches that haven't been merged yet. However, <code>git branch</code> is a porcelain command and therefore is not suitable for use in a script.</p>

<p>Is there any good plumbing command I can use to determine the same branches returned by the <code>--no-merged</code> option?</p>
","1","2221343","0","0"
"28856488","343204","2015-03-04 14:05:17","1","59","<git><git-branch>","View previous branches in git","<p>I'd like to list the last 5 branches I've been working on in time order.</p>

<p>I'd assume it's something like:</p>

<pre><code>git branch -l &lt;some time-related flag here&gt;
</code></pre>

<p>But looking through the docs I don't see anything time-related.</p>

<p>Has anyone done this and, if so, how? </p>
","0","343204","0","0"
"28867032","57191","2015-03-04 23:19:43","1","270","<git><git-branch>","Have git push assume -u origin $branch","<p>When I create a local branch with Git, I would prefer to be able to assume that a push will track origin with the same name.</p>

<p>Right now, the following:</p>

<pre><code>git checkout -b $branch
git push
</code></pre>

<p>Yields</p>

<pre><code>fatal: The current branch $branch has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin $branch
</code></pre>

<p>Can I add something to .gitconfig to allow me to push <em>without</em> needing to <code>git push -u origin $branch</code>?</p>
","1","57191","",""
"65640502","11855650","2021-01-09 07:54:31","0","60","<git><git-branch><git-checkout>","git branch new_branch VS git checkout -b new_branch","<p>The following are two git commands. Both of them create a new branch</p>
<pre><code>git branch new_branch_name

git checkout -b new_branch_name
</code></pre>
<p>What is the difference between them?</p>
","1","11855650","",""
"28887857","2327334","2015-03-05 21:15:05","0","43","<git><github><git-branch><git-push><git-remote>","Having git pull and push to different default remotes based on the branch","<p>Im trying to figure out how to setup git where I can pull/push from/to one remote and it by default pulls/pushes it into its own local branch. </p>

<p>This remote won't be the origin remote and Id like to merge the branch occasionally to the master branch which will be pushed/pulled to/from origin.</p>

<p>But its important to note that the other remote(s) will be completely independent and have their own master and such branches. So it may look something like this</p>

<p>remote-a (master) -> local (remote-a-branch)</p>

<p>Any help will be much appreciated, thanks in advance</p>
","0","2327334","",""
"65664219","435129","2021-01-11 09:27:47","2","49","<git><git-branch><git-diff><git-log>","View commits (and diff) pertaining to a particular git branch","<p>Suppose I have the following git structure:</p>
<pre><code>A - B - C - D - E - F master
         \_ G - H - I branch
</code></pre>
<p><code>git checkout branch; git log</code> doesn't identify the point at which branch diverged from master.</p>
<p>What if I want to examine all changes in this branch?</p>
","0","435129","",""
"28899172","4387455","2015-03-06 12:51:43","1","164","<git><github><git-branch>","Clone a local repository into github","<p>I am a git newbie. Please bare me if my question is silly.
I created a repository nameed ""testrepo"" in github.com (GUI) and added a readme file.(committed).</p>

<p>if i issue this command ""git clone <a href=""https://github.com/username/testrepo.git"" rel=""nofollow"">https://github.com/username/testrepo.git</a>"" from my local desktop machine, it creates a new repository in the same name (testrepo) with all the content. (readme file). I understood this. As the name says, it is exactly cloning the remote repository (not cloning a branch in a repo) into local machine.</p>

<p>My question is i created a local repository named ""testrepo2"" by issuing a command ""git init testrepo2"". I added some files and i committed the changes.</p>

<p>Now thru some command i want to export this entire repository (testrepo2) to my github.com account. To be precise i dont want to create a repository manually in github.com and push the local changes to that. I want to push the entire local repo to the remote.
Please help me. Thanks in advance.</p>
","2","4387455","",""
"65668776","11664580","2021-01-11 14:31:54","1","95","<git><github><git-merge><git-branch>","Make my github master branch match another branch","<p>I've been working on a forked branch &quot;<code>forkedBranch</code>&quot; and made many updates to my app. When I was happy with the updates, I went back to my <code>master</code> branch (<code>git checkout master</code>) and merged my <code>forkedBranch</code> (<code>git merge forkedBranch</code>). Unfortunately, the <code>master</code> branch has lots of problems with it that weren't present in <code>forkedBranch</code>.</p>
<p>The app is too complicated for me to want to go through and find all the bugs. Is there a way to make my <code>master</code> branch identical to <code>forkedBranch</code> to save me the hassle?</p>
","0","11664580","",""
"29305222","2619079","2015-03-27 16:10:26","1","94","<node.js><git><heroku><github><git-branch>","Maintain seperate git branches - One for heroku and another for github","<p>I have got a project in nodejs which is on github and deployed on heroku. In that project I use a few API keys and those keys are stored in <code>config.js</code> file which is ignored while pushing to github. But I need those files for deployment on heroku. So my problem is when ever I make any changes to push on github I have to ignore that <code>config.js</code> file and when I deploy on heroku I have to include those again in my branch. I am stuck in this viscous cycle.</p>

<p>Thank You</p>

<p>This is my second time asking question here. So if I did not follow any convention please tell so that I may edit for future visitors.</p>
","0","2619079","",""
"66058292","13760719","2021-02-05 05:59:38","1","95","<git><jira><git-branch><rebase><pull-request>","git branch rebase common convention","<p>I am working on a project having a master branch with some base code.<br />
Then I <strong>made a branch</strong> <strong>develop1</strong> and committed and push to remote and requested for pull request.</p>
<p>Okay, then I want to do another task but in-fact the pull request is not yet completed, is not yet merged with master.</p>
<p>So in this situation if I <strong>create a branch</strong> <strong>develop2</strong> and <strong>rebase it with develop1</strong> and write some codes and <strong>pushed it to remote</strong> what will happen is everything will be okay with out conflict and <strong>could I request for pull request for</strong> <strong>develop2</strong> is it possible?<br />
Or is this the common convention while working with pull request?</p>
","0","13760719","0","0"
"47539425","6162942","2017-11-28 19:27:53","1","113","<git><git-branch><git-bash>","Does anyone know how to beautify git branches with sub directories?","<p>When I run <code>git branch -a</code> a massive list of local and remote branches is returned. An example output is:</p>

<pre><code>  remotes/origin/Production/v1
  remotes/origin/Production/v2
  remotes/origin/QA/v1
  remotes/origin/QA/v2
  remotes/origin/design/sort
  remotes/origin/design/charts
  remotes/origin/etc/task1
  remotes/origin/etc/task2
</code></pre>

<p>Is there a way to beautify this in the terminal for massive repos? Or is there any other way to list all branches in a more structured way? A preferable output format would be:</p>

<pre><code>Production
├── v1
├── v2
QA
├── v1
├── v2
design
├── sort
├── charts
etc
├── task1
├── task2
</code></pre>
","1","6162942","",""
"29353039","2132878","2015-03-30 18:01:04","-3","121","<git><github><git-branch>","how to revert local commit on git","<p>I am working on my branch and do commits daily. After committing to my branch then I push to the remote server master branch. Due to commit and not pushing to the remote branch, when I am trying to pull or push, I am getting conflicts. </p>

<p>How can I revert my commit from my branch so that I can pull all the latest changes from the remote branch and along with that while reverting the commit. My changes should not be gone from my workspace files.</p>
","1","2132878","",""
"29372450","1129332","2015-03-31 15:30:32","3","68","<git><git-branch>","git checkout fail because of new submodule","<p>While on development branch I am trying to do:</p>

<pre><code>git checkout master
</code></pre>

<p>And getting the message:</p>

<blockquote>
  <p>error: The following untracked working tree files would be overwritten
  by checkout:</p>
</blockquote>

<p>And it points me to a directory.</p>

<p>The problem is that I made this directory to be submodule. But its not a submodule in master, so it tells me that those files will be override and aborting the checkout.</p>

<p>What can I do?</p>
","0","1129332","0","0"
"11502520","1275937","2012-07-16 10:31:39","0","1483","<git><git-branch><branching-and-merging><branching-strategy>","git multiple-projects branching","<p>In my case, The super project is big enough so it consists of multiple artifacts. Let's say project A,B,C,D,E. They are different git projects. Now we need to work on two different releases, then it comes down to the problem how do we wanna do branching. I am coming from subversion world initially, if it's SVN, I would probably think about creating a super project and contain all the sub projects A,B,C,D,E, then I just branch away the super project.</p>

<p>But in terms of branching, conceptually, git has some difference from SVN. Just wondering in git world, normally what's the best practice for branching multiple git projects for different releases? I know submodules has been talked a lot, does it make sense to branch the projects individually? </p>

<p>Another question is that if the branching is done, how do we version the artifacts in different branches? if you have two branches, that will mean you will have different versions for all sub projects in two different branches, then you start to smell failure.</p>
","0","1275937","",""
"30081136","1552766","2015-05-06 15:26:53","2","514","<git><git-branch><git-stash>","Tracking changes using git during code review (stash vs. branch)","<p>In the interest of keeping code reviews small and concise, I've submitted a smaller code review than a full feature.  It is the cleanup before a larger change, but to avoid cluttering up the final review with the cleanup, I've made this review.</p>

<p>My later work will build on this currently active review, and there will be changes that I need to make as a result of the review.  However, I would also like to continue working on the final feature while this code is in review.</p>

<p>How I can properly track my development on the feature while still remaining able to make changes for code review.</p>

<p>Current scenario:</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x| code review
</code></pre>

<p>Future scenario (branching)</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x|-x--x--|
  feature2          \x--x--x| code review complete (merge)
</code></pre>

<p>Future scenario (stash)</p>

<pre><code>master -x-x-x---x---|
feature      \-x-x-x|-x--x--| code review complete (merge)
  work on feature branch, stash changes if needed to make code review updates
</code></pre>

<p>I think the branch model makes more sense, but creating another branch with the same name and same purpose seems to violate some sense of ""git propriety""</p>
","1","1552766","",""
"30091715","1726464","2015-05-07 04:04:38","1","975","<git><branch><git-branch>","Why should I create new branch in git repository?","<p>If the master is default branch of git repository, why should we create another branch?
What is the benefits of creating new branch?</p>
","2","1726464","",""
"30103552","343204","2015-05-07 14:08:31","4","141","<git><git-branch><git-fetch>","git fetch --all - extra branches being created","<p>I've got my USB stick set up as a git repo (don't ask why) but I just did a <code>git fetch --all</code> and got these messages:</p>

<pre><code>   38ea2b1..2b4fdaf  master     -&gt; usb/master
 * [new branch]      usb/branch/A -&gt; usb/usb/branch/A
 * [new branch]      usb/branch/B -&gt; usb/usb/branch/B
 * [new branch]      usb/master -&gt; usb/usb/master
</code></pre>

<p>which looks worrying.</p>

<p>It appears there are additional branches being created that aren't necessary. Is this going to be the start of an infinite loop of <code>usb/usb/usb/usb</code> branches? </p>

<p>What should I do to squash this and avoid the problem?</p>

<p>==== UPDATE 1</p>

<p>In <code>.git/config</code> I have:</p>

<pre><code>[remote ""usb""]
        url = /path/to/usb/repo.git
        fetch = +refs/heads/*:refs/remotes/usb/*
</code></pre>

<p>which looks pretty standard. But then directly below it I've got this weird stuff:</p>

<pre><code>[branch ""branch/A""]
        remote = usb
        merge = refs/heads/branch/A
[branch ""usb/branch/B""]
        remote = .
        merge = refs/heads/branch/A
[branch ""usb/branch/C""]
        remote = .
        merge = refs/heads/branch/A
</code></pre>

<p>This continues. Around 20 entries in total.</p>

<p>What's going on here?</p>

<p>==== UPDATE 2</p>

<p>My USB project.git/config contains:</p>

<pre><code>[remote ""origin""]
    url = C:/xampp/htdocs/networkroot/.
</code></pre>

<p>Not sure if that's as it should be.</p>
","6","343204","0","0"
"30116096","4199880","2015-05-08 04:59:43","4","1105","<git><repository><git-branch>","How to prevent tracked config files from being changed by merges in git?","<p>I have a web project with two git branches (developing and production) and each one connects to a different server (dev and prod). Each branch has a set of tracked config files, such as different URLs, database options, sql exported files, etc. which are different on both branches.</p>

<p>Every time I try to merge those branches I get a lot of conflicts in these settings files which need to be resolved manually, but every now and then I miss something. In short, it is a nightmare. My question is therefore, how can I avoid this?</p>

<ul>
<li>Is there a way to prevent any changes to those config files while merging or rebasing?*</li>
</ul>

<p><strong>Suggested Solution:</strong>
<em>""Try to make those files untracked"".</em> I tried this but whenever I pulled from the production file I get those files deleted and replaced, so I don't know if I should do it in a different way. </p>
","2","4199880","",""
"12516169","146821","2012-09-20 15:42:30","4","647","<git><branch><git-branch>","git: Find the oldest commit of `mine` which does not exist in `theirs`","<p>I'd like to be able to find the longest path in my git-graph which does not exist upstream. One end of that path is obviously HEAD, so that's easy. The other end is my oldest commit which does not exist upstream. I don't know how to find this.</p>

<p>Diagram</p>

<pre><code>[otherguy]   H--I--J   
            /       \
[master]   A--B--C--M1--D--E--M2--F--G
              \      \             \
[mine]         H---I--M3---J---K---M4--M--HEAD
</code></pre>

<p>I want a command which will point me to H (or B), given <code>HEAD</code> and <code>master</code>. Note that a simple <code>git merge-base master HEAD</code> gives me F.</p>
","1","146821","",""
"30145452","1902689","2015-05-09 21:58:17","3","103","<git><git-branch>","Branch a public git repository, on a private git server","<p>I have my own git server on a local Fedora machine.  I have two development machines, a local Fedora machine, and a local Windows 7 machine.  (Both development machines and the git server are all on a local network, so I'll get faster speeds this way than using github.)</p>

<p>There is a github repository of a BSD-licensed library that I use.  I would like to make my own changes that I can push to my own git server, with the option of submitting SOME but not all patches or pushes to github.</p>

<p>I'd like to be able to have my local repository be able to pull changes made from the github repository.  (I know I may have to do manual merges, if the github repository changes around where I make my local changes.)</p>

<p>How can I do this?</p>

<p>I have been periodically updating from the github repository, adding that directory to my local git server as a new repository, re-making any changes, and pushing to my local git server.</p>

<p>There has to be a better way.</p>
","0","1902689","",""
"30158279","4289417","2015-05-11 00:59:18","1","878","<git><git-branch><bitbucket-server>","Git workflows / gitflow - multiple concurrent large projects","<p>I'm trying to figure out whether I would be able to utilize a modified gitflow Git workflow, and I'm struggling with it (not sure if it's relevant, but planning to use Atlassian Stash):</p>

<p>We currently use CVS, and have multiple on-going large-scale projects. We do new project production releases every month or so, but each project might be in development between 1 wk to 6 months. We also do weekly maintenance releases. There can be up to around a dozen or so projects in active development. We also need ability to run nightly regression testing on each project branch as well as maintenance. Given the per-file nature of CVS, we split manual merges between half a dozen developers when large-scale merges are needed.</p>

<p>So far my best idea is to use modified gitflow where we'll have the following branches:</p>

<p>master: what's currently in production</p>

<p>develop: development branch for next production release, project branches that will be released with next release will be merged here, as well as small features not release to larger projects (both new features and production bug-fixes)</p>

<p>project/project_name: Project development/integration/testing branches. This is branched off develop and is merged back to develop when project dev is complete. Some project/project_name branches can be branched off existing project/project_name branches if they require functionality of a project-in-development.</p>

<p>feature/ticket_no: feature branch, branched off from develop for smaller non-project features. Branched off from project/project_name for larger projects.</p>

<p>release/release_number: release branches, branched off from develop branch as we decide it's time to cut the release. Merged to master.</p>

<p>bugfix/ticket_no: bugfix branches, branched off from release/release_number branches for bugs found by QA. Merged back to release/release_number and develop.</p>

<p>hostix/ticket_no: hotfix for urgent production issues. branched off from master. Merged into master, develop, and release branches.</p>

<p>Does this sound workable, or am I shooting myself in the foot here due to huge merge complexity that will arise? Any suggestions for alternative approach?</p>

<p>Releasing more often is not a possibility to do limited ability to get approved downtime for a release.</p>
","0","4289417","",""
"13450039","517529","2012-11-19 08:28:47","43","19278","<git><git-branch><branching-and-merging><git-flow>","How to undo git flow feature finish?","<p>I am learning git-flow and I just did <code>git flow feature finish &lt;feature-name&gt;</code>, which merged my feature branch to develop and removed it.</p>

<p>Instead of this, I want to push the feature branch to github, so I can merge it after a peer review.</p>

<p>So the question is, how do I 'undo' this command. Or in other words , how can I move my last two commits from develop to my feature branch?</p>
","0","517529","0","0"
"47960514","1934772","2017-12-24 12:16:58","1","185","<git><git-branch><git-merge><branching-and-merging>","Prevent git-merge between unrelated branches from importing unwanted commit history","<p>I have 2 branches, <code>B</code> (private) and <code>G</code> (public).</p>

<p>Branch <code>B</code> (private) has been my main develop branch for a while, and contains all sorts of commits that include private code, proprietary algorithms and some other things that can't go public.</p>

<p>When I created branch <code>G</code> (public), I couldn't simply branch off of <code>B</code> (private) since that would make it's history contain all those things I listed earlier that can't go public, so I created a new branch from scratch (that is, with no parent). Then I simply imported (copied) all files exactly as they were from branch <code>B</code> (private) into branch <code>G</code> (public) and that was its first commit.</p>

<p>Since then, I've been developing on branch <code>B</code> (private) and whenever a new commit was made, I cherry-picked it onto <code>G</code> (public).</p>

<p>All of this was done in a period that I was getting started to git, so, I know I could probably have done it in a better way, but this ship has long sailed.</p>

<p>Since I've learned a bit more about how git works (and how it's supposed to be used), I wanted to merge <code>B</code> onto <code>G</code> (or vice-versa) so I could stop cherry-picking every single commit. So here's what I've tried:</p>

<ol>
<li><p>Merging <code>B</code> onto <code>G</code>: this imported all of <code>B</code>'s (private) commit history onto <code>G</code>, which is unnaceptable because anyone browsing <code>G</code>'s commit history would have access to private / sensitive data / algorithms.</p></li>
<li><p>Merging <code>G</code> onto <code>B</code>: this duplicated all of the cherry-picked commits on <code>G</code> (private), which is annoying but not a big deal. But it was not enough, since trying to merge <code>B</code> onto <code>G</code> after this still imported all of <code>B</code>'s (private) commit history onto <code>G</code> (unacceptable). I thought this would created a ""common parent"" to those 2 branches that git would use as starting point for future merges from <code>B</code> to <code>G</code>, which was not the case.</p></li>
<li><p>Rebasing <code>G</code> off of <code>B</code>: Same problem as 1.</p></li>
<li><p>Rebasing <code>B</code> off of <code>G</code>: For every commit in <code>G</code>, a conflict was created, so this proved undoable.</p></li>
</ol>

<p>TL;DR: I have 2 branches <code>B</code> which is private and contains private commits and <code>G</code> which is public. This is how they look:</p>

<pre>
`B` (private): a -- b -- c -- d -- m -- n -- o -- p
`G` (public): w -- x -- y  --  z -/
</pre>

<p><code>m</code> is a merge commit from <code>G</code> onto <code>B</code>.</p>

<p>I want to ""import"", ""merge"" or ""bring"" commits <code>n</code>, <code>o</code>, <code>p</code> (and any other commits pushed to <code>B</code>) to <code>G</code>, without cherry-picking them one by one (a single merge commit bringing all those changes to <code>G</code> would be acceptable as long as it does not bring all of <code>B</code>'s previous history with it).</p>

<p>I'm not sure if there's a solution to my problem, but any help is appreciated.</p>
","0","1934772","0","0"
"13454070","409480","2012-11-19 12:43:02","4","326","<git><github><git-branch>","git showing branches that are not on github anymore","<p>after running</p>

<pre><code>git fetch
</code></pre>

<p>I can see some branches which are not (anymore) on GitHub (using <code>git branch -a</code>). Why is this? How can I resolve this? It's especially uncomfortable in git-cola, where I can see all these dead branches.</p>
","2","409480","",""
"31736193","629804","2015-07-31 00:20:54","0","21","<git><git-branch>","git branch on multiple repositories","<p>Let's say I have repository <code>A,B,C</code>  under directory <code>Parent</code></p>

<pre><code>Parent
|-A
|-B
|-C
</code></pre>

<p>To check current branch of each repository, I have to go under each directory and do <code>git branch</code></p>

<p>Can I do something like <code>git branch Parent/*</code>  to list current branch for <code>A,B and C</code> in one single command </p>
","0","629804","",""
"48995572","8849819","2018-02-26 19:16:39","1","2685","<git><gitlab><branch><git-branch>","git push origin $BranchName - redirects to https://gitlab.com/users/sign_in","<p>So I am logged into Gitlab in Chrome but from the command line I am signed in then try to push and get the following result:</p>

<pre><code>    git push origin $BranchName

    fatal: unable to update url base from redirection:

  asked for: https://gitlab.com/the-project/the-task/$BranchName.git/info/refs?service=git-receive-pack

   redirect: https://gitlab.com/users/sign_in
</code></pre>

<p>I am getting the same error from the git command line and from the GitHub desktop gui.</p>
","6","8849819","0","0"
"49039959","1011867","2018-02-28 22:49:11","4","3712","<git><git-branch><git-clone>","git clone specific list of branches","<p>I want to clone a list of branches from remote repo. What is the best way to do that without fetching everything?
I saw solutions for cloning one specific branch but I need multiple branches.
Thank you.</p>

<p>Edit:
I ended up using following command to create a bundle and then using it for my purposes:</p>

<pre><code>git bundle create ../BUNDLE.bundle branch1 branch2 refs/notes
</code></pre>

<p>And then using this bundle for my purposes.</p>
","4","1011867","0","0"
"72481704","10370570","2022-06-02 19:59:37","1","803","<git><git-branch><git-commit><git-pull>","Will git pull command overwrite non-commit changes","<p>Git <code>pull</code> command will <code>fetch</code> + <code>merge</code> remote branch to local branch . And if there are merge conflict between commits , you can resolves it locally  .</p>
<p>But what if I never <code>commit</code> anything I changed locally and <code>pull</code> a remote updated branch ?</p>
<p>Will git ignores my local non-commit changes and straight off overwrite my local branch ?</p>
<p>Does this mean I should always <code>commit</code> before pulling to update local branch ?</p>
","1","10370570","",""
"72492183","13032145","2022-06-03 15:54:06","1","230","<eclipse><git-branch>","Current git branch not displayed in Eclipse package explorer","<p>I have checked the boxes <strong>&quot;Git Repository Objects&quot;</strong> and <strong>&quot;Git Resources&quot;</strong> in <em>Preferences&gt;General&gt;Appearance&gt;Label Decorations</em>. Also in <em>Preferences&gt;Version Control (Team)&gt;Git&gt;Label Decorations&gt;Text Decorations</em> I have <strong>&quot;{dirty:&gt;} {name} [{repository }{branch}{ branch_status}]&quot;</strong> under Projects.</p>
<p>Is there any other setting I need to set? This is in the original workspace where the project was created, in another Eclipse instance with a different workspace the branch is displayed as it should.</p>
","3","13032145","",""
"55310294","2125837","2019-03-23 03:18:46","1","2308","<git><github><git-branch><git-remote>","How to create git Remote-Tracking Branch","<p><a href=""https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch"" rel=""nofollow noreferrer"">They said</a> that is it as simple as</p>

<blockquote>
  <p>You can tell Git to track the newly created remote branch simply by using the -u flag with ""git push"".</p>
</blockquote>

<p>But it never worked for me. </p>

<p>How to create the git Remote-Tracking Branch, with which</p>

<blockquote>
  <p>Git can now inform you about ""unpushed"" and ""unpulled"" commits.</p>
</blockquote>

<p>Here is mine:</p>

<pre><code>$ git status 
On branch newfeature/v4-json
nothing to commit, working tree clean
</code></pre>

<p>vs what I'm expecting, quoting from <a href=""https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch"" rel=""nofollow noreferrer"">above article</a>:</p>

<pre><code>$ git status
# On branch dev
# Your branch and 'origin/dev' have diverged,
# and have 1 and 2 different commits each, respectively.
#
nothing to commit (working directory clean)
</code></pre>

<p>I.e., info about the ""unpushed"" and ""unpulled"" commits.<br>
I.e., I want to see the same as:</p>

<pre><code>$ git status
On branch master
Your branch is ahead of 'origin/master' by 3 commit.
  (use ""git push"" to publish your local commits)

nothing to commit, working tree clean
</code></pre>

<p>Yet from my above actual output, you can see that i'm not able to see how many commits I've made so far anymore, <em>despite that I've made several commits</em>. </p>

<p>This is what I did:</p>

<pre><code>$ git push -u origin newfeature/v4-json
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (12/12), 1.87 KiB | 958.00 KiB/s, done.
Total 12 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), completed with 9 local objects.
remote: 
remote: Create a pull request for 'newfeature/v4-json' on GitHub by visiting:
remote:      https://github.com/.../pull/new/newfeature/v4-json
remote: 
To github.com:xxx/yyy.git
 * [new branch]      newfeature/v4-json -&gt; newfeature/v4-json
Branch 'newfeature/v4-json' set up to track remote branch 'newfeature/v4-json' from 'origin' by rebasing.
</code></pre>

<p>But I don't have such remote tracking branch 'newfeature/v4-json' from 'origin' set up by <code>git</code>:</p>

<p>A) <code>git remote show origin</code> does not show a remote tracking branch for my newfeature at all:</p>

<pre><code>$ git remote show origin
* remote origin
  Fetch URL: git@github.com:go-easygen/easygen.git
  Push  URL: git@github.com:go-easygen/easygen.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branches configured for 'git pull':
    master             rebases onto remote master
    newfeature/v4-json rebases onto remote newfeature/v4-json
  Local refs configured for 'git push':
    master             pushes to master             (up to date)
    newfeature/v4-json pushes to newfeature/v4-json (up to date)
</code></pre>

<p>while the following is what I want to see, according to <a href=""http://www.gitguys.com/topics/adding-and-removing-remote-branches"" rel=""nofollow noreferrer"">http://www.gitguys.com/topics/adding-and-removing-remote-branches</a></p>

<pre><code>$ git remote show origin
* remote origin
  Fetch URL: /tmp/.../git/rp0
  Push  URL: /tmp/.../git/rp0
  HEAD branch: master
  Remote branches:
    master     tracked
    newfeature tracked
  Local branches configured for 'git pull':
    master     rebases onto remote master
    newfeature rebases onto remote newfeature
  Local refs configured for 'git push':
    master     pushes to master     (up to date)
    newfeature pushes to newfeature (up to date)
</code></pre>

<p>Note in the <code>Remote branches:</code> section, besides <code>master tracked</code>, there is also a <code>newfeature tracked</code>. This <code>newfeature tracked</code> is called <em>remote tracking branch</em> as per above article. </p>

<p>B) neither is <code>git branch -a</code>:</p>

<pre><code>$ git branch -a
  master
* newfeature/v4-json
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>There is only one <code>remotes/origin/master</code> remote tracking name there, while I'm expecting more. E.g. (irrelevant but just to show the case with more remote tracking names), </p>

<pre><code>$ git branch -a
* master
  remotes/origin/HEAD
  remotes/origin/master
  remotes/origin/v1.0-stable
  remotes/origin/experimental
</code></pre>

<p>C) nor is <code>git branch -vv</code>:</p>

<pre><code>$ git branch -vv
  master             75369c3 [origin/master] - [*] allow ...
* newfeature/v4-json 8c98d9c - [*] update ...
</code></pre>

<p>while I'm expecting to see, </p>

<pre><code>$ git branch -vv
  master             75369c3 [origin/master] - [*] allow ...
* newfeature/v4-json 8c98d9c [origin/newfeature/v4-json] - [*] update ...
</code></pre>

<p>Moreover,</p>

<p><code>git pull</code> is not updating my <em>local</em> branch from <em>remote</em> either:</p>

<pre><code>$ git pull
From github.com:xxx/yyy
 * branch            newfeature/v4-json -&gt; FETCH_HEAD
Already up to date.
Current branch newfeature/v4-json is up to date.

$ git pull
From github.com:xxx/yyy
 * branch            newfeature/v4-json -&gt; FETCH_HEAD
Already up to date.
Current branch newfeature/v4-json is up to date.

$ git pull
From github.com:xxx/yyy
 * branch            newfeature/v4-json -&gt; FETCH_HEAD
Already up to date.
Current branch newfeature/v4-json is up to date.
</code></pre>

<p>I.e., no matter how many time I pull, I'm not getting the same output as, </p>

<pre><code>$ git pull
Already up to date.
Current branch master is up to date.
</code></pre>

<p>All above is <strong><em>not</em></strong> normal. I've created Remote-Tracking Branch with MS VS before many times, and the results are exactly as what I am expecting, not above. However, I don't like the black magic tricks, so I want to know how I can do the same with plain <code>git</code>. </p>

<p>So what is the correct way to create git Remote-Tracking Branch?</p>
","0","2125837","",""
"36710674","2071938","2016-04-19 06:54:47","2","1476","<git><ant><git-branch>","Create git Branch/Tag via ANT script","<p>I'um using ANT scripts to build jar files with version. Is there an oportunity to also create a tag/branch in the git repository in the ANT script?</p>
","0","2071938","0","0"
"52771472","474597","2018-10-12 02:47:49","0","74","<git><branch><git-branch>","Use case for pushing remote branches to another remote repo in git","<p>In git, we can push a remote branch to another remote like this:</p>

<pre><code>&gt; git clone git@foo1.com:a/a
&gt; cd a
&gt; git remote add other git@foo2.com:b/b
&gt; git fetch --all
# ...
&gt; git push origin other/master
Counting objects: 107, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (66/66), done.
Writing objects: 100% (107/107), 2.11 MiB | 0 bytes/s, done.
Total 107 (delta 52), reused 87 (delta 33)
remote: Resolving deltas: 100% (52/52), completed with 8 local objects.
To foo1.com:a/a
 * [new branch]        other/master -&gt; other/master
</code></pre>

<p>So on ""@foo1.com:a/a"", we can see it got the remote of ""foo2.com:b/b"", by using the <code>git branch -va</code> command:</p>

<pre><code>* master                  7c6051f foo
  remotes/other/master    38a5a1b bar
</code></pre>

<p>If we just use <code>git branch -v</code> this remote branch wouldn't appear.</p>

<p>However I can't think how this is useful. There is no way for my local to interact with this on <code>foo1.com:a/a</code> right? Could someone gives a potential use case for this?</p>

<p>Also could this somehow be disabled with some git configuration?</p>
","0","474597","",""
"69888725","6515530","2021-11-08 19:10:30","0","116","<git><github><git-branch>","Move files into local git repo branch","<p>I made some python notebooks. I also made a git repo. Those python notebooks aren't in the repo, they're in another directory. I want to create a branch in that repo, copy and paste those notebooks into that branch, then push that branch to my remote repo.</p>
<p>If I copy and paste the notebooks from the original directory and into the directory of the local repo, those notebooks seem to end up in my master branch. I don't want them on the master branch, I want them on my new branch, so I can merge with the master branch later on after code review.</p>
<p>How can I do this?</p>
<p>I'm using git Bash on Windows.</p>
","5","6515530","",""
"36797382","4810110","2016-04-22 15:07:31","1","987","<git><github><puppet><git-branch><puppet-enterprise>","Unable to get git branch from puppet agent","<p>I've the following command to execute puppet agent in a server. Its puppet master contains a puppetfile which contains several modules stored in different git repositories.</p>

<p>Well, I need to execute puppet agent pointing to the correct git branch to get the modules. </p>

<p>This environment is PROD an it is properly configured as there are a lot of people working on it but I'm new using it and I need help!</p>

<p>I've executed the following command but it doesn't work:</p>

<p><code>sudo puppet agent -t --environment my_branch</code></p>

<p>And I get:</p>

<p><code>Warning: Unable to fetch my node definition, but the agent run will continue:
Warning: Find my_branch/node/hostname_agent_server?transaction_uuid=fb7c33d0-dab2-4c36-be0a-94870f6fbfcc&amp;fail_on_404=true resulted in 404 with the message: Not Found: Could not find environment 'develop'</code></p>

<p>My branch is ""develop/xxxx/xxxx"" for this reason the code above mentions ""Could not find environment 'develop'</p>

<p>Could you please help me with the correct one?</p>
","0","4810110","",""
"36801043","6219051","2016-04-22 18:33:45","-1","84","<xcode><git><version-control><git-branch>","What are the differences/pros & cons of creating a working copy vs a new branch in git?","<p>I'm new to coding and Xcode offers both these options. Which one should I take - I just want to manage the changes and easily undo any changes that mess with the app.
Thanks!</p>
","2","6219051","0","0"
"36814905","6245311","2016-04-23 18:39:53","2","7118","<git><branch><git-branch>","How to check if specific local git branch is up-to-date with the remote version?","<p>I am aware that many similar questions to this have been asked, however I feel there is a lot of ambiguity in a lot of the answers.</p>

<p>My situation:</p>

<p>1 repo called Bicycle which has 2 branches master and staging.</p>

<p>Assume that my local repo (master and staging) is up to date with the remote.</p>

<p>Then, another person working on the project creates a branch called day-5 and makes some changes to the project.</p>

<p>Said person, once done making his changes, pushes his changes, then merges the changes made on day-5 with the branch staging, but not master.</p>

<p>My question:</p>

<p>Assuming that I do not necessarily know that any changes have been made to staging. What is the most simple way for me to check if there have been changes made to the remote version of staging that my local version does not have?</p>
","1","6245311","",""
"52862521","2183282","2018-10-17 19:45:21","2","1334","<git><branch><git-branch>","Why my local git branch disappear everytime i create a new one?","<p>I didn't used Git for a few months.
I just started up a new project and one thing bothers me: everytime I create a new branch, the already existing one disappears as if it was replaced.
I mean, when i do ""git branch"", i have nothing! 
Obviously, my ""git checkout "" doesn't work.
I don't even have my  branch anymore. Only the current one.</p>

<p>I don't have this problem with already working projects.</p>

<p>Why is that?</p>
","2","2183282","",""
"52922169","1865719","2018-10-22 03:50:35","2","2833","<git><version-control><branch><git-branch>","git set-upstream-to=origin/master (local copy of remote)","<p>I have read many answers about ""origin/master"" where they say it's a local copy of the remote origin of branch master. I'm confused when I read about set-upstream-to where it should refer to remote branch master , so can anyone explain why set-upstream-to reference to local copy instead of remote ? like <code>git push origin master</code> not <code>git push origin/master</code></p>
","0","1865719","0","0"
"53056444","7366657","2018-10-30 02:14:33","0","652","<github><git-branch><git-bash>","How to restore files deleted with git clean -f -x?","<p>After using <code>git clean -f -x</code> I have lost some important files. Is there any way to get them back or at least can I check which files I have lost so that I can add them separately from other directories?</p>
","3","7366657","",""
"53079916","2809658","2018-10-31 09:15:17","1","216","<git><git-branch>","git branch -h created branch with name '-h'. Is this expected?","<p>As seen is image, not sure how the branches <code>-h</code> <code>-merged</code> <code>--help</code> got created</p>

<p><img src=""https://i.stack.imgur.com/8WEPk.png"" alt=""Please click here for image showing all branches in local repo""></p>

<p>How to delete unwanted branches[/accidentally created] branches?</p>

<p><strong>Update</strong> <em>text from git bash[Windows]</em></p>

<p><code>$ git branch -a
* calc
  master
  –-help
  –h
  –merged
  remotes/origin/master
</code></p>
","6","2809658","0","0"
"37048448","5690355","2016-05-05 10:41:11","0","40","<git><git-branch><branching-and-merging><git-commit>","Is there a proper way to remove git commits selectively?","<p>Let's say I have a <code>MASTER</code> and <code>DEV</code> branches, one with the stable/released version (master) of the code, the other unstable (dev) with unfinished work in progress.</p>

<p>I started coding a test suite branching from DEV, which now should be included (or ""released"") into master.</p>

<p>The problem is that for a while the branch has been kept updated with DEV, and now there are merged commits from other branches that should not be merged to MASTER.</p>

<p>The commits are properly marked and we know for sure specifically which they are.</p>

<p>The new code to be included in release is part of a test suite, so it doesn't change the source code, therefore it should not be any major problem in rolling back all the unwanted changes/commits from the source code.</p>

<p>The question(s) would be:</p>

<p>Is there a pre-defined methodology to do this? And where is this methodology outlined, if any?</p>

<p>I can research a bit on git to find ""my way"" to do this safely, but it sounds like a classic case of something which is likely to happen in any standard development process, and in my experience usually there is already a predefined methodology outlined by former (and heroic) developers in their quest for a solid development methodology.</p>

<p>If no methodology is available, or known, any advice would be appreciated.</p>
","2","5690355","",""
"37066861","351903","2016-05-06 07:35:24","0","61","<git><version-control><git-branch><phing>","How to take local working directory to any git revision irrespective of its branch after remote changes?","<p><strong>Background</strong></p>

<p>I am working on a phing build script, which takes input as the target revision to which the production codebase needs to be taken. I am preparing the same in a separate <em>scratchpad</em> directory and then overwriting the production codebase.</p>

<p><strong>Current logic</strong></p>

<ul>
<li>During every build, I am simply emptying the scratchpad and taking a fresh clone of the entire git repository in it.</li>
<li><p>Taking to the desired revision - </p>

<p>git reset --hard ${target.git_version}</p></li>
</ul>

<p>I am sure something more efficient can be done. I was thinking along the lines of -</p>

<ul>
<li><p>finding out which one contains the desired commit, as given in <a href=""https://stackoverflow.com/a/1419637/351903"">https://stackoverflow.com/a/1419637/351903</a> (tried but could not get it working with <code>git branch -r --contains &lt;commit&gt;</code> - looks like I am missing something about the concept of it). </p></li>
<li><p>once the branch is found, cloning that particular branch only.</p></li>
</ul>

<p>Then I thought of -</p>

<ul>
<li><p>getting all the branch names only, into my local repository first (if that is possible and makes sense).</p></li>
<li><p>then <code>git branch --contains &lt;commit&gt;</code>.</p></li>
</ul>

<p>Also thought of - </p>

<ul>
<li>looping through all the branch names and checking if it contains a commit.</li>
</ul>
","6","351903","",""
"37114775","3631654","2016-05-09 11:36:06","5","2644","<git><git-branch><git-checkout>","git checkout with different node_modules folder","<p>I have two branches, one called ""gh-pages"" and the other ""master"" branch. Both are having separate folders like ""node_modules"", but they are completely different. And they are untracked!</p>

<p>So when checking out e.g. the ""gh-pages"" branch as follows</p>

<pre><code>git checkout gh-pages
</code></pre>

<p>I need a way to specify that Git should not just remove (but save) all tracked, but also all untracked files and folders (like the ""node_modules"" folder) from the ""master"" branch. And then load all tracked files and folders from the ""gh-pages"" branch and as well as all untracked files and folders.</p>

<p>Is there a simple way or do I really need to remove untracked files and folders for each checkout so that the two do not come into the cross?</p>
","0","3631654","",""
"53187745","5558393","2018-11-07 10:36:39","0","51","<git><svn><branch><git-branch><git-svn>","Add (not create) remote branches to local repo using git-svn","<p>I am working on big SVN repository using <code>git-svn</code>. Pure <code>svn</code> is very slow. I should have cloned my repository using command:<br>
<code>git svn clone &lt;rep_url&gt; -T trunk/ -b branches/ --no-minimize-url css</code></p>

<p>but I did it by<br>
<code>git svn clone &lt;rep_url&gt; -T trunk/ --no-minimize-url css</code>
<br>or<br>
<code>git svn clone &lt;rep_url&gt; -b branches/ --no-minimize-url css</code>
<br>I don't know exact command I executed</p>

<p>Now I am facing issue because when I do <code>git branch -a</code> it shows me only trunk (master) branch:</p>

<pre><code>* master
  remotes/origin/trunk
</code></pre>

<p>I want to see all branches in <code>git branch -a</code> output. I have another copy of this same repository and I cloned it using both switches <code>-T</code> and <code>-b</code>. When I do <code>git branch -a</code> in this another repository it shows me list of branches also like:</p>

<pre><code>* master
  remotes/origin/trunk
  remotes/origin/branch1
  remotes/origin/branch2
  remotes/origin/branch3
  remotes/origin/branch4
  branch1
  branch2
</code></pre>

<p>How can I add remote branches to my repository?
Is it possible?</p>

<p>Note that typing <code>git branch branch1 remotes/origin/branch1</code> doesn't work</p>
","0","5558393","0","0"
"53228519","9090093","2018-11-09 15:20:58","0","19","<git><intellij-idea><git-branch>","Is there a way to condense git branches into folders in IntelliJ?","<p>For instance, I have several branches related to a single Jira ticket in a large repo. Is there functionality or a plugin I could use to break these branches up into individual folders on a Jira ticket level?</p>

<p>If not, I could work on a plugin,</p>
","0","9090093","",""
"69989632","12944030","2021-11-16 12:59:37","2","20116","<git><github><push><git-branch><pull>","When I run ""git push"" I get ""tip of your current branch is behind its remote"" but the current branche has no upstream tracking branch","<p>I am working on this local branch X and when I try to push using <code>git push -u origin X </code>
the error message is :</p>
<pre><code>! [rejected]        X -&gt; X (non-fast-forward)
error: failed to push some refs to &quot;********&quot;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
<p>So I run : <code>git pull </code>
And an error message also appear :</p>
<pre><code>There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; X
</code></pre>
","0","12944030","",""
"70021135","5838180","2021-11-18 13:55:57","0","670","<github><installation><branch><git-branch>","How to install specific github repo branch?","<p>I am trying to install a very recent <a href=""https://github.com/astropy/astroquery/pull/2214"" rel=""nofollow noreferrer"">branch</a> of a github repo into my google colab editor. I guess I haven't yet figured out the correct syntax, despite trying out different <a href=""https://stackoverflow.com/questions/20101834/pip-install-from-git-repo-branch"">suggestions</a> on StackOverflow. What I have tried so far is</p>
<pre><code>pip install git+https://github.com/astropy/astroquery/pull/2214
pip install git+https://github.com/weaverba137/astroquery/tree/sdss-spectra-url
</code></pre>
<p>but they both result in error messages. What is the correct way to download the branch? Tnx</p>
","0","5838180","",""
"37865118","272869","2016-06-16 16:52:47","1","117","<git><git-branch>","git branch --track vs -u difference","<p>I have a local branch which I want to link to a remote branch. So when I do <code>git pull</code> it will auto use linked remote branch</p>

<p>I tried to use <code>git branch --track origin/branchname</code>
but it did a weird thing and created kind of a tag with name origin/branchname
And <code>git pull</code> still didn't auto select linked branch</p>

<p>on other hand <code>git branch -u origin/branchname</code> did work and <code>git pull</code> autoselects correct branch</p>

<p>what is the diff with <code>--track</code> and <code>-u</code> ?</p>
","0","272869","",""
"70637762","79125","2022-01-09 01:22:36","1","139","<git><git-branch><git-checkout>","Prevent git from creating branches that use names of remotes?","<p>I often accidentally checkout remote tracking branches incorrectly:</p>
<pre><code>git checkout -b origin/fixbugs
</code></pre>
<p>The <code>-b</code> should be a <code>-t</code>.</p>
<p>This mistake creates a branch called &quot;origin/fixbugs&quot;. How could I get git to give me an error instead of creating this branch when the branch name begins with &quot;origin/&quot; (or any other remote name)?</p>
","1","79125","0","0"
"70656245","13628101","2022-01-10 17:05:40","4","925","<git><github><gitlab><git-branch><git-flow>","How to remove git remote branches locally which has been deleted online?","<p>After a successful merge request , the branch get's deleted on the gitlab but it still exist on my local machine so how can I remove that branch locally ?</p>
<p><a href=""https://i.stack.imgur.com/PsVdA.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PsVdA.png"" alt=""enter image description here"" /></a></p>
<p>How can I remove config-tailwind branch locally only ?</p>
","0","13628101","",""
"70670826","2279385","2022-01-11 17:15:54","1","589","<git><version-control><git-branch><git-log>","how to list all 'active' branches in git containing unmerged commits","<p>I'm struggling to make sense of the history of a couple of very large repositories that have hundreds of (old) branches which never have been deleted (even though work on most of these branches is 'done').</p>
<p>I'm trying to find a way to generate a list of branches that</p>
<ul>
<li><strong>contain commits after the branch was created ('not empty')</strong></li>
<li><strong>have not been merged into another branch</strong></li>
</ul>
<p>If my assumption is correct, this should return a list of branches that contain unmerged/active code - everything else is safe to delete.</p>
<p>A nice gimmick would be to to visualize this via <code>git log --graph</code> - only displaying the 'current working tree', going back only to the first commit that's present in all of the 'currently active branches'.</p>
<p>Any suggestions/help is highly appreciated!</p>
","0","2279385","",""
"38025295","6385128","2016-06-25 05:25:20","-4","1941","<git><branch><git-branch>","Popular special characters in git branch names","<p>I'm writing an application where I limit allowed characters in git branch names. Currently the limit is [a-zA-Z0-9/_-]+. What other special characters may be requested by users? I know that / is popular that's why I've included it, is there other such character?</p>
","3","6385128","",""
"70772046","5760001","2022-01-19 14:06:52","0","198","<git><merge><branch><git-branch><branching-and-merging>","How to find the parent branch name of a merge commit in git?","<p>As asked in the title, how do I find the parent branch name (not parent commit) of a merge commit? Thanks.</p>
","5","5760001","",""
"38072215","2377652","2016-06-28 09:24:52","0","2064","<git><git-branch><git-pull>","Why creating git branch doesn't copy all files?","<p><code>git branch</code> shows me that I'm on <em>master</em>.
I write <code>git checkout -b newbranch</code>.
<code>git branch</code> shows me that I'm on newly created branch <em>newbranch</em>.
I write <code>git pull</code> and get the following error:</p>

<pre><code>There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; newbranch
</code></pre>

<p>I guess that was because I couldn't pull from a branch that I only just created. So I write <code>git pull origin master</code> and get a million files that differ between branches <em>master</em> and <em>newbranch</em> (taking my full console so I can't see the beginning of the error) with the following ending:</p>

<pre><code>Please move or remove them before you can merge.
Aborting
</code></pre>

<p>I don't understand why branch <em>newbranch</em> isn't an exact copy of <em>master</em>. From what I read when I create a new branch it starts from the same commit as the branch I was on. I just wanted to make <code>git pull</code> to make sure all files are exactly the same as on master. If the new branch isn't the exact copy of the branch it was copied from, I don't know where all the files were taken from.</p>

<p><strong>Edit:</strong>
As everyone mentioned, the problem was that my local master was different than remote master. So I had to do:</p>

<pre><code>git checkout master
git branch -d newbranch
git fetch --all
# change permision issues with chmod and chown
git reset --hard origin/master
git checkout -b newbranch
</code></pre>
","1","2377652","0","0"
"70811034","8852720","2022-01-22 08:01:36","0","19","<git><github><git-branch><pull-request>","Previous commits are appearing in a new branch in git","<p>I've been given several tasks, and each task should be pushed it its own branches. For example, task_1 files into task_1 branch. I've created branches from task_1 to task_8 for each task. <br>
However, before working on a specific task, let's say task_3, I created a new branch for task_3 by <code>git branch -M task_3</code>. Then, I created a folder named <code>task_3</code> and kept all files related to the task there. Having finished the task, I did: <code>git add task_3</code> and <code>git commit -m &quot;task 3 finished&quot;</code> and <code>git push origin task_3</code>. <br>
The funny thing is all the previous commits (<code>task_1</code> and <code>task_2</code>) were pushed to <code>task_3</code> branch. For example, in <code>task_8</code> branch, all the previous commits were also pushed to <code>task_8</code> however I added only <code>task_8</code> folder to the staging area then made a commit and push. <br></p>
<p>Is there any way to ignore previous branches and commits when pushing files to each lastly created branch?</p>
<p>The repo is <a href=""https://github.com/jkalandarov/epam_stage_1"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Also, I am asked to create a pull request on each branch and files should be added to the <code>main</code> branch before merging. How am I supposed to do that? <br></p>
<p>I appreciate your help.</p>
","5","8852720","",""
"70839784","17928656","2022-01-24 20:00:39","2","494","<git><github><git-merge><git-branch>","Confusion about Git command: git diff origin <branch> HEAD","<p>1 to 2 weeks ago, I found a reference on the web, saying that this command:</p>
<pre><code>$ git  diff  origin  &lt;branch&gt;  HEAD
</code></pre>
<p>will show the present (local) commits that have not yet been pushed to remote.  Since then, I have figured out that, as long as I am <em>in</em> the specified branch of interest, I do not need to specify the branch name on that command line.</p>
<p>I've been using that command, ever since, to help me perform some experiments, to help me learn how Git/GitLab work. Staying only in the <code>development</code> branch and doing no merges, I have repeatedly been able to:</p>
<ol>
<li>use that command to display not-yet-pushed commits; and then, after doing the &quot;push&quot;</li>
<li>to run that command again and notice that all the previous commits, in the output of that command, were completely gone - i.e., the command gave no output.</li>
</ol>
<p>But now I am experiencing some inconsistencies in the output of that command:</p>
<ol>
<li>I created a new branch, off of <code>master</code>, called <code>jravery</code>.</li>
<li>I then created a new sub-branch, off of <code>jravery</code>, called <code>jrasub</code>.</li>
<li>I added some files to <code>jrasub</code>; then staged &amp; committed &amp; pushed them.</li>
<li>Then I merged <code>jrasub</code> into <code>jravery</code>; then I did a <code>git push</code>, in the <code>jravery</code> branch.</li>
</ol>
<p>But now I do the <code>git  diff  origin  {branch}  HEAD</code> command and I still see those 2 files, whether the specified branch is <code>jravery</code> <em>or</em> <code>jrasub</code>.</p>
<p>Why were the committed-and-then-pushed files/commits disappearing from the output of that <code>diff</code> command <em>last</em> week, after push, but now still appearing in the output of that same command <em>this</em> week (also after push)?</p>
<p>Also in the output of that command - whether I specify <code>master</code> or <code>jravery</code> or <code>jrasub</code> as the branch - I am seeing a few other files that were never included in <em>either</em> the <code>jravery</code> <em>or</em> the <code>jrasub</code> branch. However, when I specify the <code>development</code> branch, <em>nothing</em> shows up in the output of that command, even though most of the files that are otherwise showing up in this command's output are - or were - <em>only</em> in the <code>development</code> branch (unless and until they might eventually have been merged into <code>master</code>) and <em>never</em> were part of either <code>jravery</code> or <code>jrasub</code>.</p>
<p>Why is that?</p>
","7","17928656","0","0"
"38113359","182172","2016-06-30 03:11:22","3","996","<git><github><git-branch>","How to remove unnamed branch in git shown in Github network view","<p>In the Github's network view of my git repository, there is a ""phantom"" branch that has no name. Please see the picture below.</p>

<p>For the sake of simplicity I would like to remove the black branch (leaving only the blue branch).</p>

<p>How can this be done?</p>

<p><a href=""https://i.stack.imgur.com/aZNa1.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/aZNa1.png"" alt=""left side""></a>
<a href=""https://i.stack.imgur.com/6ors2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6ors2.png"" alt=""right side""></a></p>

<p>Some of the labels with the hash:</p>

<p><a href=""https://i.stack.imgur.com/26nL6.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/26nL6.png"" alt=""One commit""></a>
<a href=""https://i.stack.imgur.com/Xi0Nj.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Xi0Nj.png"" alt=""One commit""></a>
<a href=""https://i.stack.imgur.com/Pnoo3.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Pnoo3.png"" alt=""One commit""></a></p>
","0","182172","0","0"
"38222461","5783481","2016-07-06 11:03:29","0","1164","<git><git-branch><gawk><git-remote>","git branch for multiple remotes","<p>When running <code>git branch -r</code> I see the branches on my remote repository.
Is there a way to see in the same working directory, the branches of multiple repositories?
My goal is to create a file that lists all branches in couple of repositories, like this:</p>

<pre><code>repo1:master,dev,qa,fy-2473
repo2:master,dev,fy-1128,staging
repo3:master,fy-1272,staging
</code></pre>

<p>So on and so forth.
I have this to print the branches the right way:</p>

<pre><code>git branch -r | awk -F' +|/' -v ORS=, '{if($3!=""HEAD"") print $3}' &gt;&gt; repolist.txt
</code></pre>

<p>I just need to have this functionality work with couple of repositories without having to clone each and everyone of them for this single purpose.
Thanks.</p>
","0","5783481","0","0"
"38267578","2966326","2016-07-08 13:10:14","0","559","<git><git-branch><git-svn>","git svn only use branches without trunk or tags","<p>I have an SVN repo with a normal trunk/branches/tags layout. For my git I want to ignore the trunk &amp; tags folder. I just want to have the branches as git branches nothing more. </p>

<p>Folders:</p>

<pre><code>/trunk (empty)
/tags (full of stuff I want to ignore)
/branches/folder1
/branches/folder2
</code></pre>

<p>I tried simply cloning the svn using</p>

<pre><code>git svn clone [REPO] -stdlayout
</code></pre>

<p>Unfortunately my client has not commited anything into the trunk so I get the error ""refs/remotes/origin/trunk not a valid SHA1""
I read that no commit into the trunk results in that error.</p>

<p>My question is: How can I only use the branches folder1 &amp; folder2 to create a new git with said branches.</p>

<p>Thanks,
Michael </p>
","0","2966326","",""
"71022667","2505159","2022-02-07 17:20:16","0","81","<git><git-branch><git-commit>","Can I use git to find which commit is needed to fix a branch?","<p>I have a git tree which looks like this:</p>
<pre><code>master (test passes)
|
|
|  stable (test fails)
|   |
|   /
+---
|
</code></pre>
<p>There is a test which fails when run against the <code>stable</code> branch, but passes when run against the <code>master</code> branch.  As it is a complicated multi-process test it's rather hard to debug.</p>
<p>Can I use git to find which commit from the master branch can be cherry-picked to the stable branch in order to fix the test?</p>
<p>There are many hundreds of commits on both branches so doing it manually would be painful.</p>
","5","2505159","",""
"71080098","17216529","2022-02-11 12:27:33","2","1099","<git><gitlab><git-branch><git-commit><git-checkout>","Switch from one git branch to another without loosing the newly added code","<p>I have a repository having two branches master ( keeps final error free code ) and develop ( developing branch ).The default branch is master, I cloned and worked on the project, but unfortunately I forgot to checkout to the develop branch before I start coding.So all the changes that I made will be on the master branch. Is there any way to switch the branch after developing? so that I can commit and push the code only to the develop branch without loosing my code.</p>
","1","17216529","",""
"38354061","","2016-07-13 14:09:33","1","61","<git><gitlab><git-branch>","Error while cloning a git branch into empty folder","<p>I'm trying to clone a single branch from one of my repo's into a specific folder, but I am getting an unexpected error.</p>
<p>The command I'm using is</p>
<pre><code>git clone -b my-branch git@git.myrepoaddress.io:dev/myrepo.git Users/me/Desktop/some_empty_folder
</code></pre>
<p>However, when I try this I get an error:</p>
<h2>some_empty_folder already exists, and it is not empty</h2>
<p>However, it is empty. Is there something I'm doing wrong?</p>
","0","","",""
"73222960","5900486","2022-08-03 14:03:56","1","504","<git><github><git-branch><branching-and-merging>","After a git branch rename, what's the best way to notify everyone and update their local machines to match it?","<p>I had a repo with the branches <code>feature</code> and <code>master</code>.</p>
<p>On my machine, I renamed <code>feature</code> with the following steps:</p>
<ol>
<li><p>Checked out my local branch
<code>git checkout feature</code></p>
</li>
<li><p>Renamed the branch to <code>beta</code> with
<code>git branch -m beta</code></p>
</li>
<li><p>Pushed the <code>beta</code> branch and reset the upstream
<code>git push origin -u beta</code></p>
</li>
<li><p>Deleted the <code>feature</code> remote branch
<code>git push origin --delete feature</code></p>
</li>
</ol>
<p>Now my local machine and GitHub are all synced up, but someone else working on their remote machine still has the <code>feature</code> branch. When they run <code>git branch</code> they see <code>master</code> and <code>feature</code> listed. When they run <code>git pull</code>, they're getting the message &quot;Your configuration specifies to merge with the ref 'refs/heads/feature' from the remote, but no such ref was fetched.&quot;</p>
<p>Few questions:</p>
<ol>
<li>How do I resolve this?</li>
<li>What's the best way to tell other people that a branch has been renamed and they should update it on their local machines as well?</li>
<li>Luckily the person I'm working on this project with had no work in progress/staged changes on <code>feature</code>, but if he had, where would those have gone, considering his machine is unaware of the branch rename, and would have attempted to push it to remote on the old name?</li>
</ol>
","7","5900486","",""
"73242448","2981429","2022-08-04 21:38:07","0","277","<git><git-branch><git-alias>","Alias git branches to replace ""master"" with ""main""","<p>I work on a bunch of different repos - many of them use <code>master</code>, and many of them use <code>main</code>.</p>
<p>I also have various shell aliases set up for git commands, e.g. <code>gcm</code> for <code>git checkout master</code>.</p>
<p>The problem is that I cannot use these aliases on repos where <code>master</code> doesn't exist. It's obviously not a big deal, because I just need to type out the command manually in that case, but it's slightly annoying.</p>
<p>I am wondering if there's a way I can &quot;alias&quot; branches in git, so when I say <code>git push origin master</code> it can just automatically replace that with main.</p>
","3","2981429","",""
"67406023","15193055","2021-05-05 17:25:02","1","56","<git><git-branch><branching-and-merging>","git: How to get more information (when, sha) about a branch merging into another?","<p>I found <code>git branch -r --merged master</code> to see all the branches ever merged into <strong>master</strong></p>
<p>Our flow is pretty standard: develop == feature branch --&gt; develop == release branch --&gt; master  (&quot;==&quot; create a branch from; &quot;--&gt;&quot; PR into)</p>
<p>I want to find out when the branch merged (or the latest sha) in order to generate a list of branches merged since the last PR into <strong>master</strong></p>
<p>Ideally, we would have an inventory of each release branch</p>
<p>Cheers</p>
","0","15193055","",""
"49802226","6162022","2018-04-12 17:00:18","1","2155","<git><git-branch><git-commit><git-worktree>","git worktree add [from specific commit hash]","<p>so I have a commit hash from earlier in a project. How can I create a new worktree and have it's branch start from this specific commit?</p>
","0","6162022","0","0"
"31978631","1406488","2015-08-13 02:41:13","2","235","<git><branch><git-branch><vps><branching-and-merging>","Cannot push new branch to git server","<p>I am new with git and I am trying to set up a git repo in a VPS. I created a git repo in the server and then cloned it to my local PC. But when I try to create a new branch in my PC and push it to the server, even though it is pushed, but in the server when I try <code>git checkout mybranch</code> it shows <code>error: pathspec 'mybranch' did not match any file(s) known to git.</code></p>

<p>Here are the approaches I tried:</p>

<p><strong>APPROACH 1</strong></p>

<pre><code>me@localpc:~/$ git clone ssh://me@server.domain/home/me/gittest
me@localpc:~/$ cd gittest
me@localpc:~/gittest$ git branch mybranch
me@localpc:~/gittest$ git checkout mybranch
Switched to branch 'mybranch'
me@localpc:~/gittest$ git &gt;test
me@localpc:~/gittest$ git add -A
me@localpc:~/gittest$ git commit
me@localpc:~/gittest$ git push origin mybranch
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 1.07 KiB | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To ssh://me@server.domain/home/me/gittest
 * [new branch]      mybranch -&gt; mybranch
......................
me@server:~/gittest$ git branch
* master
  mybranch
me@server:~/gittest$ git checkout mybranch
error: pathspec 'mybranch' did not match any file(s) known to git
</code></pre>

<p><strong>APPROACH 2</strong> (using <code>git push -u</code>)</p>

<pre><code>me@localpc:~/$ git clone ssh://me@server.domain/home/me/gittest
me@localpc:~/$ cd gittest
me@localpc:~/gittest$ git branch mybranch
me@localpc:~/gittest$ git checkout mybranch
me@localpc:~/gittest$ git &gt;test
me@localpc:~/gittest$ git add -A
me@localpc:~/gittest$ git commit
me@localpc:~/gittest$ git push -u origin mybranch
......................
me@server:~/gittest$ git branch
* master
  mybranch
me@server:~/gittest$ git checkout mybranch
error: pathspec 'mybranch' did not match any file(s) known to git
</code></pre>

<p>Both of these give the exact same error.</p>

<p>What am I missing?</p>
","6","1406488","",""
"67517650","235472","2021-05-13 10:26:22","1","533","<git><version-control><branch><git-branch>","Is it common to dedicate a git branch for a separate project?","<p>In the team I just joined, they have a git repository structured in this way:</p>
<pre><code>-----------------&gt; Main project
     |-----------&gt; Sub-project1
     |-----------&gt; Sub-project2
</code></pre>
<p>So, development is done in the &quot;Main project&quot; main trunk (and short term branches). The branches &quot;Sub-project1&quot; and &quot;Sub-project2&quot; contain code which is not related to what is in the main trunk, i.e. the files in these branches do not exist there.</p>
<p>Is this a reasonable/common way to use git, or any revision control system in general?</p>
","3","235472","",""
"31987717","5072526","2015-08-13 12:03:58","0","42","<git><git-branch>","Why does 'git branch -d' act differently after clone?","<p>I created a simple repository.
If i create a new branch from master and commit some changes and
then delete it with</p>

<pre><code>git branch -d neuerTestBranch
</code></pre>

<p>I'll get a error:</p>

<pre><code>error: The branch 'neuerTestBranch' is not fully merged.
</code></pre>

<p>I like that error, it reminds me, that i forgot to merge.
However, if i don't delete this branch and clone the Repository somewhere
else, i don't get the error anymore. When i delete the branch now, i get
this message:</p>

<pre><code>warning: deleting branch 'neuerTestBranch' that has been merged to
'refs/remotes/origin/neuerTestBranch', but not yet merged to HEAD.
</code></pre>

<p>And the Branch is deleted right away.</p>

<p>Why does git branch -d acts differently after a clone?
Is this behavior maybe a Bug?
Is it possible to force a behavior like the first in cloned repositories,
too?</p>

<p>I use 'git version 2.5.0.windows.1'.</p>
","0","5072526","",""
"67535305","1519240","2021-05-14 13:38:08","0","57","<git><git-branch><git-config>","How to set branch format in gitconfig (not an alias)","<p>I have this alias <code>git config --global alias.recent 'branch --sort=-committerdate --format=&quot;%(committerdate:relative)%09%(refname:short)&quot;'</code>, it works fine: <code>git recent</code></p>
<p>but I want to make this default behaviour when doing <code>git branch</code> using a <strong>gitconfig file</strong>. I can't get the <code>format</code> piece working:</p>
<pre><code>[branch]
  # this works
  sort = -committerdate
  
  # doesn't work:
  format = \&quot;%(committerdate:relative)%09%(refname:short)\&quot;
  # neither:
  format = &quot;%(committerdate:relative)%09%(refname:short)&quot;

[alias]
  # this is what git config command above adds:
  recent = branch --sort=-committerdate --format=\&quot;%(committerdate:relative)%09%(refname:short)\&quot;
</code></pre>
<p>When I do <code>git branch</code> just the sorting works. How can I get the <code>format</code> working as well?</p>
","1","1519240","",""
"67543278","11320017","2021-05-15 04:32:54","21","25605","<git><github><git-branch>","git how to change default branch for everything I do?","<p>Because of github changing the default branch from master to main all of my pushes end up in a separate branch instead of the main one and I can't change the default. When I start a program and make my first push, git tells me main doesn't exist and I always have to push to master instead.</p>
","2","11320017","0","0"
"67552081","13284348","2021-05-15 23:40:55","1","877","<git><git-merge><git-branch>","Will git tag automatically move to main branch when merged?","<p>I have created a git tag in the dev branch. But if I merge it from dev to main branch, will the git tag be automatically be added in the main as well?</p>
","0","13284348","",""
"67582064","4809342","2021-05-18 07:52:55","0","858","<git><diff><git-branch><git-diff>","How to git diff diverged branch","<p>I have re-written some commit history on my branch, so my branch has diverged from the remote one:</p>
<pre><code>Switched to branch 'dev'
Your branch and 'origin/dev' have diverged,
and have 3 and 3 different commits each, respectively.
</code></pre>
<p>Is there an easy way to <code>git diff</code> between the diverged versions (i.e. my local branch and the remote branch)?</p>
<p>I know I can use <code>git diff commit1..commit2</code> to diff between 2 commits, but in this case I want to diff between the three local commits on my branch and the three remote commits.</p>
","0","4809342","",""
"67592778","10921386","2021-05-18 19:25:30","3","252","<git><github><git-branch><rebase><branching-and-merging>","Git - How to change the starting point of a git branch with existing PR?","<p>I was working on a feature branch for quite some time. Now, I created a pull request to merge my branch but because my branch is very old, so there are many tests that are failing.</p>
<p>I want to <strong>move the starting point of my branch to a new commit</strong> without causing any changes to my existing PR.</p>
<p>I tried this but its not what I want-&gt;
I created a new branch and cherry-picked my commits to it. It works but doing this, I will have to create a new PR &amp; there is already some comments on my PR. So, I dont want to lose them.</p>
<p>What I have is something like this:</p>
<pre><code>master
A--B--C--D--...--M--...--Y--Z--
       \                   /
        \                 /
feature  nA--nB--nC--nD--nE
</code></pre>
<p>What I want to do:</p>
<pre><code>master
A--B-...--M--..............--Y--Z--
           \                   /
            \                 /
feature      nA--nB--nC--nD--nE
</code></pre>
<p>Basically move the starting point of feature branch from C to M.</p>
<p>I heard about rebase but I didnt quite understand how that works, is ituseful in this case?
I am a beginner, so please explain/give commands in detail.</p>
","0","10921386","0","0"
"32008155","2404855","2015-08-14 10:41:44","1","1179","<git><git-branch><git-submodules><git-clone>","git clone --recursive - submodules on no branch","<p>I have a git module called 'production' and inside a couple of submodules. When I use the following command: <code>git clone --recursive git@git_server:production</code> it's clonning the 'production' module with the submodules. When I <code>cd</code> in one of the submodule and give the following command: <code>git branch -a</code> I get:</p>

<pre><code>* (no branch)
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>The <code>.gitmodules</code> files contains:</p>

<pre><code>[submodule ""blabla""]
url = git@git_server:production/blabla
path = blabla
branch = refs/heads/master
...........................................
</code></pre>

<p>The question is: Why if I clone recursive the submodules are on the branch ""(no branch)"" and if I clone only the respective submodule is cloning directly on branch ""master""? Is there any way to change the configuration that when I clone recursive to clone directly all the submodule in branch ""master""?</p>
","0","2404855","0","0"
"67633476","11020164","2021-05-21 08:40:24","0","408","<git><git-branch><branching-and-merging>","How to refactor git branches","<p>I think I've done something dumb with my git branches. Thankfully, right now I'm the only one committing anything, so it's only me who has to deal with it, but I'd like to fix it before other people have to deal with it.</p>
<p>What I think I want it this:</p>
<pre><code>                                               (today)                (the future)
main           *--------*-----*--------------*-----*-----             ------*--------------------*----     ...
                \       ^     ^              ^     ^                       /                    /
                 \      |     |              |     |                      /                    /
static-dev        *-----*-----*-----*--------*-----A-----     ...     ---*                    /
                                     \       |     |                     |                   /
                                      \      v     v                     v                  /
                          wp-dev       *-----*-----*-----             ---*-----*-----*-----*
</code></pre>
<p>Where &quot;A&quot; = 7890397</p>
<p>Not only is that what I think I want, it's what I thought I created. However, it seems not. So, the question is, how do I turn what I have into that (preferably historically, so the commit history makes sense; but at least into the future). What I <em>have</em> is this:</p>
<p><strong>EDIT</strong>: the below is updated, because, as @torek and @omer-tuchfeld pointed out in the comments, there were problems with two local repositories being differently synced with the remote. With some rebasing and merging, I fixed that, so it should be less confusing now, but still needs &quot;refactoring&quot; (not sure what else to call this).</p>
<pre><code>$git branch -a
* main
  static-dev
  wp-dev
  remotes/origin/HEAD -&gt; origin/main
  remotes/origin/main
  remotes/origin/static-dev
  remotes/origin/wp-dev
$git log --graph --all --decorate --oneline
*   fc56f21 (HEAD -&gt; main, origin/static-dev, origin/main, origin/HEAD) Merge branch 'static-dev' of [origin] into static-dev
|\ 
| * 7890397 commit &quot;A&quot;
* | d8f79a1 duplicate of &quot;A&quot;
* |   2dfd02c 
|\ \
| |/
| * 14e1877 
| * f75bfc6 
* | 34b885e 
* | f86807a 
* | 1a8d0ac Removed STUFF
|/ 
| * 74e522a (tag: v0.99.3, origin/wp-dev) &quot;A&quot; cherry-picked
| * 5439ac8 
| * 0a2c1d7 
| * 9174d5c STUFF should be here
|/ 
* 1886f04 (tag: v0.99.2) 
* 1b8dcad 
* 3448f5e Added STUFF before realising it should be on a branch
* b5e1fa5 
* b38ebe0 (tag: v0.99.1) Initial commit.
</code></pre>
<p>Because I messed up the order in which I should have done things (see 3448f5e, and 1a8d0ac), if I now make a change to static-dev and try to merge it to wp-dev, the merge deletes all the STUFF. I guess, notionally, what I want to do is pick up 9174d5c and everything that happened on that branch afterwards, and hang it off of 1a8d0ac; but I'm not sure how to do that, nor even if that is the most sensible solution to get things in a reasonable state.</p>
","12","11020164","",""
"67679541","2437508","2021-05-24 22:18:35","1","112","<git><git-branch><upstream-branch>","git - is there a reference to upstream branch?","<p>I can ask for differences since I started on a feature branch:</p>
<pre><code>git diff upstream-branch...
</code></pre>
<p>But it requires that I know what the upstream branch is. Is there a reference for the upstream branch, whatever it may be without me knowing before hand or having to dig for it? Like, I don't know:</p>
<pre><code>git diff UPSTREAM...
</code></pre>
","2","2437508","",""
"67717507","13621090","2021-05-27 07:26:30","3","168","<git><sorting><command-line><git-branch>","How to version-sort git branch output (vs the usual alphabetical/lexicographic sorting)","<p>I use git branch -a to display branches.</p>
<p>I am assuming the git branch -a is not sorting alphabetically.</p>
<p>Need <code>git branch -a</code> to sort in numeric like <code>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11</code> instead of <code>10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9</code></p>
<p>Consider, I don't have the ability to rename branches like prefixing <code>0</code> as <code>Part-02</code> for example as a workaround maybe.</p>
<p>I am open to third party command line git clients as well as a last resort.</p>
<p>On doing <code>git branch -a</code></p>
<p><strong>Current output</strong>:</p>
<pre><code>  remotes/origin/Part-10_LoadStateListener
  remotes/origin/Part-11_Navigating-to-the-Detail-Screen
  remotes/origin/Part-12_Implementing-the-DetailsFragment
  remotes/origin/Part-13_Handling-Process-Death
  remotes/origin/Part-1_Project-Setup
  remotes/origin/Part-2_Layouts-&amp;-Model-Class
  remotes/origin/Part-3_Navigation-Component
  remotes/origin/Part-4_API-Interface
  remotes/origin/Part-5_Dependency-Injection-with-Hilt
  remotes/origin/Part-6_PagingSource-&amp;-PagingData
  remotes/origin/Part-7_PagingDataAdapter
  remotes/origin/Part-8_Header-&amp;-Footer
  remotes/origin/Part-9_Search-Functionality

</code></pre>
<p><strong>Expected output</strong>:</p>
<pre><code>  remotes/origin/Part-1_Project-Setup
  remotes/origin/Part-2_Layouts-&amp;-Model-Class
  remotes/origin/Part-3_Navigation-Component
  remotes/origin/Part-4_API-Interface
  remotes/origin/Part-5_Dependency-Injection-with-Hilt
  remotes/origin/Part-6_PagingSource-&amp;-PagingData
  remotes/origin/Part-7_PagingDataAdapter
  remotes/origin/Part-8_Header-&amp;-Footer
  remotes/origin/Part-9_Search-Functionality
  remotes/origin/Part-10_LoadStateListener
  remotes/origin/Part-11_Navigating-to-the-Detail-Screen
  remotes/origin/Part-12_Implementing-the-DetailsFragment
  remotes/origin/Part-13_Handling-Process-Death

</code></pre>
<p>I am hoping there is a flag like <code>--numeric-sort</code> so I could use <code>git branch -a --numeric-sort</code></p>
","3","13621090","0","0"
"67741685","12898885","2021-05-28 15:27:17","0","24","<git><version-control><repository><git-branch><git-commit>","Using git to see differences between similar code","<p>I started to code with a previous written code from someone else, but I didn't initiate any git repository at the moment. I still have access to the files made by this other person. I would like to use git to help to compare the initial code and the changes I've made so far. Any idea of how is the best way to do that? Is it necessary to create a git rep or is there a simpler way?</p>
<p>A more general question should be: How to initiate a git repository on an existing folder which has similar code to origin (supposing I initiate a rep with the unchanged code) and then commit your changes merging the similar code as it was part of the remote without losing the changes you made?</p>
<p>Would creating another branch and making a PR to the main with the unchanged code be the best choice?</p>
","1","12898885","",""
"67748064","15103565","2021-05-29 05:31:38","1","481","<git><github><git-branch><git-checkout>","Not able to checkout from a locally created git branch","<p>I created a new branch using :</p>
<p><code>git checkout -b DikshaPython</code></p>
<hr />
<p>Now I am not able to checkout from the branch and move back to master.
Even when I close the window of gitBash and open it again it shows that I am still on this branch.
I have used commands

<code>git fetch</code>
<code>git checkout</code>
and nothing happens. I have even tried to force delete the branch by using <code>git branch -D DikshaPython</code>
and I get and error</p>
<blockquote>
<p>&quot;error: Cannot delete branch 'DikshaPython' checked out at 'C:/Users/Diksha Nasa'&quot;</p>
</blockquote>
<hr />
<p>Searched stack overflow and found some answers which recommended using <code>$ git checkout master</code>
<code>$ git branch -d DikshaPython</code>
Recieved an error</p>
<blockquote>
<p>error: pathspec 'master' did not match any file(s) known to git</p>
</blockquote>
<hr />
<p>Please help me as to how do I get back to my master branch, I have not stored anything on this branch so deleting it is not an issue.</p>
","11","15103565","",""
"67802063","9964622","2021-06-02 09:03:10","1","459","<git><github><git-branch><git-merge-conflict>","safe way to revert git branch to last commit?","<p>I have checked out to one of the branches local, I committed the changes made and I did <code>git pull origin master</code> there was a conflict in one of my files named app.scss , I started solving the conflicts in this file by mistake I deleted my changes I accepted incoming changes, that was wrong I need my changes back</p>
<p>Here is the git log</p>
<pre><code>PS C:\makumba&gt; git log 
commit d4c3dd49cba1931fce44aa8a7078842d0c1cece0 (HEAD -&gt; features/Email_footer)
Author: &lt;authorname&gt;
Date:   Tue Jun 1 13:30:28 2021 +0200

    video footer
........
</code></pre>
<p>Question How do I get my changes back?  do I need to revert to the last commit like this below?</p>
<pre><code>git reset --hard HEAD
</code></pre>
","1","9964622","",""
"67822160","16117284","2021-06-03 13:12:33","0","387","<linux><git><git-branch><git-commit><git-checkout>","How do I not transfer changes done to files from a branch to a another in git","<p>I have a homework assignment where I need to make three different implantations to the same program. The professor recommended using git and having each implantation in a different branch. Thing is that when I do a change on a branch named A, it'll also modify the same file in the master branch...I don't want it to carry my changes around every branch, instead keep the changes saved locally on each branch alone. How do i do this ?</p>
<p>(I'm new to using git)
(We work on linux, a remote server, on the terminal)</p>
<p>EDIT: The commands i used to make my project directory:</p>
<p><code>git init</code></p>
<p><code>git commit -m &quot;my message&quot;</code></p>
<p><code>git checkout // to switch branches</code></p>
<p><code>git branch branchname // to create a branch</code></p>
","3","16117284","",""
"67851704","1270076","2021-06-05 16:34:27","1","219","<git><git-branch><git-bash><git-submodules>","How to make git bash show branch name in submodules","<p>Git bash shows the branch name as</p>
<pre><code> (master)
</code></pre>
<p>But when using submodules, it now shows the hash and not the name, for example:</p>
<pre><code> ((445c03f...))
</code></pre>
<p>How can I make it show the name of the branch while inside a submodule?</p>
","3","1270076","",""
"67857207","10581494","2021-06-06 08:35:02","2","252","<git><git-branch><git-flow>","Can someone clarify the git workflow where there's a branch on the remote?","<p>I use sourcetree.</p>
<p>My usual workflow is normally:</p>
<ol>
<li>fetch and pull all changes from origin/main into my local</li>
<li>create a local branch - <code>branch-1</code></li>
<li>do the dev work</li>
<li>commit</li>
<li>pull (w/ rebase from <code>origin/main</code>)</li>
<li>push to <code>origin/branch-1</code></li>
<li>submit PR to merge <code>origin/branch-1</code> into <code>origin/main</code></li>
</ol>
<p>However, if the PR is declined and i need to make further changes, what should the process be?</p>
<p>I currently do the same as above, staying on <code>local/branch-1</code> then re-start from 3, except sourcetree seems to make me want to pull from <code>origin/branch-1</code> (at stage 5) instead of <code>origin/main</code>. I'm not sure that's quite right? Or should I be pulling from <code>origin/branch-1</code> and <code>origin/main</code> or something?</p>
<p>Thank you.</p>
","0","10581494","",""
"67878991","7749658","2021-06-07 21:37:17","0","123","<git><github><git-branch><branching-and-merging>","How can I update a git branch from another branch when there are files that do not share?","<p>I have two branches <code>master</code> and <code>docs</code>. The second one has files that I never want in the  <code>master</code> branch, however when I perform an update in <code>master</code> I would like to update the <code>docs</code> branch without altering its extra files.</p>
<p>I tried to use <code>merge</code>, however, it fails due to the extra files in the <code>docs</code> branch.</p>
<p>Can you help me with this?</p>
<p>Thank you.</p>
","5","7749658","",""
"32077071","4349919","2015-08-18 15:51:35","1","60","<git><git-branch>","Created an unwanted branch in git, want to get rid of it","<p>JIRA created a branch for a feature I was working on, but I don't want it. I'd like to move all the changes I've made so far back to the master branch and simply remove the feature branch altogether. Can anyone help me? </p>

<p><a href=""https://i.stack.imgur.com/jYMr0.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jYMr0.png"" alt=""I just want one simple master branch on top, where the ANDROIDAPP-137 is now.""></a></p>
","3","4349919","",""
"49907617","9055634","2018-04-18 19:28:57","0","1586","<git><git-branch>","Output of git branch list and how is it determined?","<p>According to <a href=""https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-branch.html"" rel=""nofollow noreferrer"">the doc</a>:</p>

<blockquote>
  <p>If <code>--list</code> is given, or if there are no non-option arguments, existing branches are listed; the current branch will be highlighted with an asterisk. </p>
  
  <p>Option <code>-r</code> causes the remote-tracking branches to be listed,
  and option <code>-a</code> shows both local and remote branches. </p>
  
  <p>If a <code>&lt;pattern&gt;</code> is
  given, it is used as a shell wildcard to restrict the output to
  matching branches. If multiple patterns are given, a branch is shown
  if it matches any of the patterns. Note that when providing a
  <code>&lt;pattern&gt;</code>, you must use <code>--list</code>;<br>
  otherwise, the command is interpreted as branch creation.  </p>
</blockquote>

<p>But what is not specified is what is the order of the listing.<br>
Does <code>git branch -r --list  ""$PATTERN""</code> output the branch name in some specified order?</p>
","0","9055634","",""
"32116776","2071938","2015-08-20 11:15:45","21","9638","<git><git-branch>","git, change on local branch affects other local branches?","<p>I have a master branch</p>

<p>now for some testing other things I made a branch A</p>

<p>I checkout branch A modify the file and when I checkout master again the changes are there as well.</p>

<p>On other repositories I have the right behaviour</p>
","0","2071938","0","0"
"68112646","11452766","2021-06-24 08:58:17","0","51","<bash><git><git-branch>","How to iterate among branches in git using BASH?","<p>I am pretty new in Bash. On git, I have branches named like following (YYcwXX):</p>
<ul>
<li>version/21cw22</li>
<li>version/21cw23</li>
<li>version/21cw24</li>
<li>version/20cw35</li>
<li>master</li>
</ul>
<p>I want to iterate among them and store the one which has the latest current week number - e.g 21cw24 in a variable.</p>
","0","11452766","",""
"15026864","806495","2013-02-22 14:53:46","32","84762","<git><git-branch>","Creating git branch based another branch","<p>I'd like to create local branch based on other branch. For example I type:</p>

<p><code>git checkout -b feature1 release1.1.3</code></p>

<p>After that I get:</p>

<p><code>fatal: git checkout: updating paths is incompatible with switching branches.</code></p>

<p>What is the problem with this ?</p>
","1","806495","0","0"
"15106291","752775","2013-02-27 07:20:43","0","77","<git><git-branch><remote-branch>","Why git fetch didn't fetch one of my remote branch reference","<p>I have one remote repository and two working dirs.
Both are setup with this one remote repository.</p>

<p>From working DIR_1 I make push from branch dev like that:</p>

<pre><code>git push origin dev
</code></pre>

<p>Next when I'm on working DIR_2 I would like to get the reference to this new remote branch dev. So I enter the following:</p>

<pre><code>git fetch origin # To update and fetch new remote branches
git branch -a # To list all branches (local and remote) that my local git see
</code></pre>

<p>Now I have problem because git fetch didn't see the new remote dev branch.
Can somebody help me with that. I'am doing something wrong. When I switch to remote machine and execute command:</p>

<pre><code>git branch
</code></pre>

<p>Then I see this dev branch. What to do?</p>
","1","752775","",""
"50274924","1886827","2018-05-10 14:10:49","0","23","<git><git-branch><git-merge><branching-and-merging>","How to merge back renamed files from one branch to the original branch as new ones with git?","<p>I had to add some new functionality to some modules in our app, so I created a feature branch, and developed the required functionality. Each module is encapsulated in one file. After I finished I got the request to deploy both the new and the old functionality at the same time. My current tree looks something like this:</p>

<pre><code>- devel
  - module1
  - module2
- feature
  - module1 (changed)
  - module2 (changed)
</code></pre>

<p>I figured that the simplest way to keep the old functionality and get the new one at the same time is to rename <code>feature/module1</code> to <code>feature/module3</code> and <code>feature/module2</code> to <code>feature/module4</code>, and than add the feature branch files to the devel branch to get this: </p>

<pre><code>- devel
  - module1
  - module2
  - module3
  - module4
- feature
  - module3
  - module4
</code></pre>

<p>How can I do that without modifying <code>devel/module1</code> and <code>devel/module2</code> ?</p>
","3","1886827","",""
"15162748","306295","2013-03-01 16:50:49","17","17173","<git><branch><git-branch><branching-and-merging>","With git, how do I remove a local copy of a remote branch? Or at least pull without merging?","<p>Another developer has deleted and rebuilt a remote branch called ""development"" which I already have a checked out copy. He did this delete and rebuild to remove some cruft from it. Which is great.</p>

<p>But when I do a ""git pull origin development"" it keeps getting merge conflicts. Yet I don't want what I have in my copy. I want what is in origin only.</p>

<p>So how do I delete my local copy of it and pull it back down? Or at least pull without merging my local info into it?</p>
","0","306295","0","0"
"68630392","1719663","2021-08-03 04:31:00","0","412","<git><git-branch><git-remote>","How to clone a remote git repository such that all branches will be downloaded","<p>I am new to Git, and still learning it.<br />
I am trying to clone a Git remote repository called <code>hello-world</code> to my local machine.</p>
<p>On the remote (github in this case) the repository has two branches</p>
<ol>
<li><code>Main</code></li>
<li><code>Branch1</code></li>
</ol>
<p>But when I clone this repository and enter the command <code>git branch</code> it shows the <code>main</code> branch only.</p>
<p>I learned that with <code>--branch</code> for the <code>clone</code> command I can tell git to explicitly download another branch than the default. It works as expected, so when I <code>git clone https://github.com/ShivMahla/hello-world.git --branch branch1</code>, git downloads the repository with that <code>branch1</code>, however this time I found <code>main</code> is missing when I am using <code>git branch</code> command.</p>
<p>Please let me know what mistake I am doing.</p>
<p>I am expecting both branches should come to my local system and when I use <code>git branch</code> command it should show two entries to me</p>
<ol>
<li>main/master</li>
<li>branch1</li>
</ol>
<p>Do I need to make any setting in GitHub account for this?</p>
","1","1719663","0","0"
"15261291","1994202","2013-03-07 01:08:54","1","158","<git><git-branch>","git new branch from commit doesn't checkout the code properly","<p>I have a repo where my master has many commits... i want to create a new fresh branch from the first commit (the original code) so i do as follows:</p>

<p><code>git checkout -b mybranch 4589D6a09505837ec03b</code></p>

<p>where <code>4589D6a09505837ec03b</code> is the first commit id... everything seems ok and now i'm at <code>mybranch</code>. But I look at the code and it's exactly the same thing as my <code>master</code>! i even run my server from the new checkedout branch and it looks the same as <code>master</code>. Maybe there's something wrong with the id.. how can i ask github to pull the first ever commit from master?</p>

<p><strong>EDITED:</strong> can I do this from a remote repo's master branch instead? just branch that code into my local repo. I don't want to recreate a repo for it.</p>
","4","1994202","",""
"15285332","847436","2013-03-08 01:46:44","1","2779","<github><git-branch><github-pages>","is it possible to track only a folder in a git branch?","<p>I don't know if this makes sense or not...</p>

<p>I have a main private git repository where I do all the coding. And I setup another public git to only publish the public results (some of my original data are sensitive information). I have all the results ready in one of the folder within the private git. </p>

<p>So, is it possible to make a branch (github-pages) of the public git track only the result folder of my private git?</p>

<p>Or do you all have a better workflow for this?</p>

<p>Thanks, </p>
","0","847436","0","0"
"16852777","1619214","2013-05-31 08:14:39","0","301","<git><branch><git-branch>","How can I search path of folders where a particular git branch is created?","<p>In Git, how could I search for path of directory where particular branch is created..?</p>

<p>Actually there is a git branch on which all the changes were carried out. Now i wanted to know on which directory the branch is created(so that i can track the folder paths), is there any way to grep the git for directory path? currently i have to move to each directory and have to manual test the same using <strong>git branch -a</strong>.  i refer <a href=""https://stackoverflow.com/questions/372506/how-can-i-search-git-branches-for-a-file-or-directory"">this question</a></p>
","1","1619214","",""
"16914681","2451120","2013-06-04 09:48:59","1","1321","<git><git-branch><git-remote>","Fetching the changes from my colleague's git branch","<p>I want get the changes from my collegue's git branch. His changes are in his branch 'teamBranch'. I added his repo and fetched it with below commands.</p>
<blockquote>
<p>git remote add team 'his repo with URL'</p>
<p>git fetch team</p>
</blockquote>
<p>I am able to get his repo listing with</p>
<blockquote>
<p>git remote -v</p>
</blockquote>
<p>But my problem is, I am not able to see the branch 'teamBranch' with the command</p>
<blockquote>
<p>git branch -r</p>
</blockquote>
<p>I can only see his master branch not teamBranch. Can anyone please help me ?
Thank you all !</p>
","4","2451120","",""
"33495885","1031339","2015-11-03 09:46:39","0","22","<git><git-branch>","Keep branches syncronization in git?","<p>I have a big issue with branching in git.
In project i have 2 big major branches. It's like 2 separate projects with some fundamental distinctions.
But! I need to sync some minor changes in both branches, like small feature that i need in both projects.
I don't want to copy-paste it everytime. Is there any way in git to add some commits from one branch to another?</p>
","0","1031339","",""
"33530085","1672458","2015-11-04 19:09:20","0","895","<git><tfs><git-branch><git-push><git-tfs>","Push existing git repo to new branch of different repo","<p>I'm using git-tfs to migrate repositories, and due to a quirk of the tool I have to clone/convert a branch to its own repo. How can I push this separate repo, which has its own history and everything, to a branch of an existing repo? I can start from scratch and try to push everything at once if that's easier.</p>
","1","1672458","",""
"18006757","2167531","2013-08-02 00:15:19","11","14897","<git><clone><git-svn><git-branch><mirror>","How to clone a git repo with all branches and tags from refs/remotes?","<p>I have a local git repo that I created from an svn repo:</p>

<pre><code>$ git svn clone -s svn:...
</code></pre>

<p>I then created a backup remote and pushed everything to it:</p>

<pre><code>$ git remote add backup git@myhost:mybackup.git
$ git push --mirror backup
</code></pre>

<p>Now, when I try to clone from my backup, it is missing all svn tags and branches.</p>

<pre><code>$ git clone git@myhost:mybackup.git
$ cd mybackup
$ git branch -a
* master
  origin
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre>

<p>How do I clone the repo with all tags and branches?</p>

<p>The only way I have found is to mirror the repo:</p>

<pre><code>$ git clone --mirror git@myhost:mybackup.git
</code></pre>

<p>This creates a local <code>mybackup.git</code> directory, which knows about all tags/branches (I can use tab completion to get the entire list) but it is not a valid usable repo:</p>

<pre><code>$ git checkout mytag
fatal: This operation must be run in a work tree
</code></pre>

<p>There must be command line option to truly clone the repo with all branches/tags???</p>

<p>I have found several related questions here but none of the answers work for this situation. I assume the difference is that my clone was created with <code>--mirror</code>?</p>
","1","2167531","0","0"
"18067030","2623678","2013-08-05 20:22:18","-1","152","<git><commit><git-branch><git-commit>","Quickest way to find the initial creation of a branch in git","<p>What is a quick way to find the initial creation of a branch in git?</p>

<p>I want to run it with a diff on HEAD</p>
","3","2623678","",""
"51534635","9167702","2018-07-26 08:44:02","8","288","<git><git-branch><git-diff>","How to resolve ambiguity between branch name and commit hash in git?","<p>I have a branch named <code>0726b</code> and I want to diff my current working copy with that branch.
Apparently there is also a commit that has a hash starting with that very sequence, because I get</p>

<pre><code>$ git diff 0726b
warning: refname '0726b' is ambiguous.
</code></pre>

<p>How do I tell git that it should take the argument as a branch name?</p>
","0","9167702","0","0"
"69631297","1079483","2021-10-19 13:00:13","3","174","<git><github><branch><git-branch>","Does git fetch pick up deleted branches?","<p>Use case:</p>
<p>User A's working on branch A forked from master; user B creates branch B forked from master does some work and commits and then deletes branch B. Can user A ever see the work of user B (e.g. <code>git fetch --all</code>). User A has never worked on branch B.</p>
<p>In this case branch B is not showing up for user A.</p>
","0","1079483","",""
"51614904","148926","2018-07-31 13:45:07","7","968","<git-branch><git-log><git-tag><git>","git: list dangling tags","<p>Context:</p>

<ul>
<li>assume you have some rather tricky CI/CD workflow which relies on git tags</li>
<li>the feature branches are built and generate some <em>short-lived</em> tags to signify commits which yield the deployable artifacts</li>
<li>when the feature branch gets squash-merged, usually it's deleted, <strong>but the tags, unsurprisingly, survive</strong></li>
<li>after, say, several months of development the tag listing predictably becomes hairy</li>
</ul>

<p>Hence, the question: </p>

<p>how would I, using git command line and, optionally, basic bash tooling</p>

<ol>
<li>list all the branches which have given tag reachable (the dual to that is <code>git tag -l --merged ${BRANCH_COMMITTISH}</code>, but I need not tags for the given branch but branches for a given tag)</li>
<li>list all the tags which have empty output from point 1 above (obviously this is doable with a for loop <em>(given any terminating implementation for 1)</em>,  but maybe there's some neat magical git one-liner)?</li>
</ol>
","0","148926","0","0"
"35717427","5849285","2016-03-01 07:54:03","1","589","<git><branch><git-branch>","Is there any way to branch only specific files git? (aka Orphan branch)","<p>I have a project in git, and I want to branch a few select files (so the main git repo should have all the files in a certain directory, but the branch should only have a select 10).</p>
","0","5849285","",""
"51696931","","2018-08-05 17:59:13","38","9656","<git><git-branch>","List all local git branches without an asterisk","<p>If I run <code>git branch</code>, I get something like:</p>

<pre><code>* master
  dev
  foo
</code></pre>

<p>if I do <code>git branch -r</code>, it will show all branches on the remote, without an asterisk (where the asterisk shows my current checked-out branch).</p>

<p>How can I list all the local branches, without an asterisk showing up? I need a programmatic solution so I can read in the results line-by-line.</p>
","3","","0","0"
"69651536","17124277","2021-10-20 18:50:05","1","1148","<python-3.x><github><git-branch><gitpython>","How to get master/main branch from gitpython","<p>How one can know about the <code>master</code>/<code>main</code> branch at git remote with <code>git-python</code>.</p>
<p>I am aware that we can iterate over the heads of the repository and then check the results. Something like</p>
<pre><code>repo = git.Repo('git-repo')
remote_refs = repo.remote().refs

for refs in remote_refs:
    print(refs)
</code></pre>
<p>This will give list of all branch heads at remote including the main/master branch.</p>
<p>Is their a direct way to get the main branch?</p>
","13","17124277","",""
"35733312","5847429","2016-03-01 20:56:00","4","3152","<git><github><branch><git-branch><remote-branch>","Doesn't show all remote branchs with git branch -r","<p>when I execute the command:</p>

<p>git branch -r, it's show just:</p>

<pre><code>origin/HEAD -&gt; origin/master
  origin/development-elton
  origin/master
</code></pre>

<p>And when execute the command:</p>

<p>git remote show origin, it's show:</p>

<pre><code> remote origin
  Fetch URL: git@bitbucket.org:r2a_/grconsig.git
  Push  URL: git@bitbucket.org:r2a_/grconsig.git
  HEAD branch: master
  Remote branches:
    caio-dev                   new (next fetch will store in remotes/origin)
    controle-usuario           new (next fetch will store in remotes/origin)
    development-elton tracked
    master                     tracked
    rails-admin                new (next fetch will store in remotes/origin)
    **refinancy            new (next fetch will store in remotes/origin)**
</code></pre>

<p>How make for pull the branch refinancy for my local?</p>
","0","5847429","",""
"35738790","5916543","2016-03-02 04:53:12","63","106035","<git><git-branch><git-tag><git-archive>","how to close a branch in git","<p>When I know I won't use a branch any more is it possible to close or lock it? Actually I would like to close a branch but I don't think it is possible to close a branch with GIT. what about the delete. What happens to my history when I delete a branch? </p>
","1","5916543","0","0"
"69665882","3174075","2021-10-21 16:49:19","0","91","<github><git-branch>","How can make setting the default git branch permanent?","<p>I have a repo with three branches, &quot;main&quot;, &quot;qa&quot; and &quot;test&quot;.</p>
<p>Currently &quot;main&quot; is the default branch.</p>
<p>I have tried setting the default to &quot;test&quot; using this:</p>
<p><a href=""https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/changing-the-default-branch"" rel=""nofollow noreferrer"">https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/changing-the-default-branch</a></p>
<p>Here is what I do:</p>
<p>Open repo - main is default</p>
<p><a href=""https://i.stack.imgur.com/rmy0w.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rmy0w.png"" alt=""enter image description here"" /></a></p>
<p>set test to default:</p>
<p><a href=""https://i.stack.imgur.com/5E8B7.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5E8B7.png"" alt=""enter image description here"" /></a></p>
<p>Logout, close browser, and reopen :</p>
<p><a href=""https://i.stack.imgur.com/GfCQJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/GfCQJ.png"" alt=""enter image description here"" /></a></p>
<p><strong>NOTE: I NEED to keep all three branches</strong></p>
<p>How can I make setting the default branch permanent?</p>
","4","3174075","",""
"35757348","214961","2016-03-02 20:23:41","1","2643","<git><github><git-branch><recovery>","How do I recover from a lost git branch","<p>I have a project I am working on which I started on a local repo. I recently had someone create a github repo and I uploaded the local repo to github (there were various errors and suggestions, but it eventually looked like it was up there.) After doing that, and pulling from origin/master, I noticed I was missing a month or so of work. Apparently my process wiped out a branch named ""echo."" </p>

<p>I now want to recover these changes from the lost branch. Here is the current picture:</p>

<pre><code>git status
  On branch master
  Your branch is up-to-date with 'origin/master'.
  nothing to commit, working directory clean

git branch
  * master

git checkout echo
  error: pathspec 'echo' did not match any file(s) known to git.
</code></pre>

<p>and:</p>

<pre><code>git log --pretty=format:""%h - %an, %s""
  5825339 - David Rogers, Merge branch 'master' of https://github.com/...
  3c41742 - Someone Else, Initial commit
  6db6654 - unknown, Labels V 1.1.8
  2085c27 - David Rogers, Remove site 29 XML subdirectory from installer
  956c939 - David Rogers, Update user settings on upgrade
  1c39bbc - David Rogers, Update user settings on upgrade
  ac48392 - David Rogers, Initial commit
</code></pre>

<p>Thanks to the wonderful pages here: <a href=""http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html"" rel=""nofollow"">http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html</a> ,
I can see the bigger picture:</p>

<pre><code>git reflog
  5825339 HEAD@{0}: pull origin master: Merge made by the 'recursive' strategy.
  6db6654 HEAD@{1}: checkout: moving from echo to master
  b7642f4 HEAD@{2}: pull origin master: Merge made by the 'recursive' strategy.
  bb4cbe2 HEAD@{3}: commit: before github
  9288903 HEAD@{4}: commit: before github
  2e8336a HEAD@{5}: commit: prior to github
  6db6654 HEAD@{6}: checkout: moving from master to echo
  6db6654 HEAD@{7}: commit: Labels V 1.1.8
  2085c27 HEAD@{8}: commit: Remove site 29 XML subdirectory from installer
  956c939 HEAD@{9}: commit: Update user settings on upgrade
  1c39bbc HEAD@{10}: commit: Update user settings on upgrade
  ac48392 HEAD@{11}: commit (initial): Initial commit
</code></pre>

<p>(Note the ""checkout: moving from master to echo."") Anyways, it looks to me like the head of my missing branch is bb4cbe2. The question is, how to I restore the work and git it up to the origin/master? </p>

<p>Also,</p>

<pre><code>git fsck --lost-found
  Checking object directories: 100% (256/256), done.
  dangling commit b7642f4fa87f52b0991f88ce08e29d5aaa43edd3
</code></pre>

<p>Do I start with : <code>git reset --hard bb4cbe2</code></p>

<p>If I do that, I get:</p>

<pre><code>git reset --hard bb4cbe2
  HEAD is now at bb4cbe2 before github

git status
  On branch master
  Your branch and 'origin/master' have diverged,
  and have 3 and 2 different commits each, respectively.
    (use ""git pull"" to merge the remote branch into yours)
  Untracked files:
    (use ""git add &lt;file&gt;..."" to include in what will be committed)

        xxx.vshost.exe.manifest
        xxx/bin/Release/
        xxx/obj/Release/
        xxx/Release/

nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>Looks like the files are good. Now what? Do I pull from origin? Then push to origin?</p>

<p>I should mention that I have a full disk backup from before the <code>git reset</code>.</p>

<p>David</p>
","5","214961","0","0"
"35762002","1908763","2016-03-03 02:23:50","2","9681","<git><git-branch><git-bash><git-tag>","How to get all local and remote tags in git?","<p>I want to view all local and remote tags.</p>

<p>To view all local and remote branches I use:</p>

<pre><code>git branch -a
</code></pre>

<p>Which shows my local branches in white, current branch in green and remote (origin) branches in red.</p>

<p>However <code>-a</code> for <code>git tag</code> is used for create a tag with an annotation or message.</p>

<p>What is the tag equivalent of <code>git branch -a</code> to display all local and origin tags?</p>
","1","1908763","",""
"53318835","5836566","2018-11-15 11:49:17","-2","584","<git><github><git-branch>","Some git commits are missing after creating git branch from commit id","<p>I am creating a git branch from a commit id, My expectation is it should show commit ids after specified commit id while creating a new branch. But somehow few git commits are missing in the newly created git branch.</p>

<p>I have a main branch which has multiple commits id:</p>

<p><img src=""https://i.stack.imgur.com/iQJgK.png"" alt=""Main Branch commit ids""></p>

<p>I have created a new branch from main branch using <code>git checkout -b testBranch 3331a4b</code> command</p>

<p>But when fire <code>git log --oneline</code> command on this branch, I can see that some commits ids are missing. Please click on below links to check commit id</p>

<p>testBranch commit ids:
<img src=""https://i.stack.imgur.com/FKQsJ.png"" alt=""testBranch commit ids""></p>

<p>Missing commit ids of main branch:
<img src=""https://i.stack.imgur.com/S6jHu.png"" alt=""Missing commit ids of main branch""></p>
","1","5836566","0","0"
"37253928","2505645","2016-05-16 12:27:12","1","51","<git><github><version-control><branch><git-branch>","Unable to rename git branch to ""master"", pushes to remote with incorrect name","<p>Using <a href=""https://stackoverflow.com/questions/9524933/renaming-a-branch-in-github"">this</a> SO post as a reference, I was able to rename my <code>master</code> to <code>v1</code> and now I want to rename my <code>v2</code> branch to <code>master</code>. I've already changed the default branch to <code>v1</code> from GitHub, but when I attempt to rename <code>v2</code> to master, the local branch renames fine but for some reason it pushes <code>v2</code> name to remote. Here's the command line session:</p>

<pre><code>Microsoft Windows [Version 10.0.10586]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;git branch
  v1
* v2

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;git branch -m master

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;git branch
* master
  v1

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;git push origin :v2
To https://github.com/Mahi/EasyPlayer.git
 - [deleted]         v2

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;git push origin master
Counting objects: 39, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (39/39), 8.17 KiB | 0 bytes/s, done.
Total 39 (delta 9), reused 39 (delta 9)
To https://github.com/Mahi/EasyPlayer.git
 * [new branch]      master -&gt; v2

C:\Users\Mahi\Documents\GitHub\EasyPlayer&gt;
</code></pre>

<p>How do I properly rename my <code>v2</code> branch to <code>master</code>?</p>
","0","2505645","0","0"
"37264826","3147774","2016-05-16 23:35:09","-1","1547","<git><github><git-branch><git-merge>","How to merge single files with git?","<p>So my partner and I are complete Git beginners and are having a hard time just following the terminology let alone making any sense out of the docs and online guides.</p>

<p><strong>Here's the situation:</strong></p>

<p>We have a git repo with a bunch of files. We both started with the latest master copy. My partner then made a bunch of changes on a new branch, whereas I made all my changes on my master branch.</p>

<p>Right now <strong>we want to combine our changes.</strong> We both worked on separate files, so really we only need to 'pull' (not sure of the terminology) each other's single file that we worked on.</p>

<p>Any help would be greatly appreciated. Thanks!</p>

<p><strong>Clarifier</strong></p>

<p>As an example, let's say there are 5 files: A, B, C, D, and E</p>

<p>We both pulled all the files. Partner worked on A in a separate branch. I worked on B on my master branch. Now I want to give him my B changes and to get his A changes. Thanks again</p>
","4","3147774","",""
"70138952","12082011","2021-11-27 21:44:09","0","302","<git><git-branch><git-revert>","Reverting local changes with git","<p>I made a branch and made some local changes but I ended up messing up some of the project itself. How do I revert these local changes that weren't staged and did not commit. I'd want to get back to how old the project was originally without affecting any other branches or main</p>
","1","12082011","",""
"37396336","3147774","2016-05-23 16:43:09","0","772","<git><github><git-branch><git-push>","git push origin <branchName> not actually doing anything","<p>When I push my local branch to origin, I don't see it on github.com, and therefore can't make a PR to merge with master. No errors, and when I try to push again it says <code>Everything is up-to-date</code></p>

<p>Any idea what's going on..?</p>

<p>Thanks.</p>
","4","3147774","",""
"53479727","3032338","2018-11-26 11:02:11","2","2156","<git><bitbucket><git-branch>","On bitbucket newly created git branch does not show in active or merged branch list","<p>My main branch is master.</p>

<p>I ran below commands:</p>

<pre><code>git checkout develop

git branch feature/profile

git checkout feature/profile

git pull origin develop
</code></pre>

<p>I have created this new branch but I have to merge my named branch say ""abc"" to ""feature/profile"" but on bitbucket feature/profile does not exist.</p>

<p>If I run </p>

<pre><code>git branch -a 
</code></pre>

<p>I see:</p>

<pre><code>*develop
feature/profile
abc
master
...
...
</code></pre>

<p>I don't have any work to do in feature branch at this point.</p>
","0","3032338","",""
"70170027","17510413","2021-11-30 13:21:13","0","40","<git><github><git-branch><git-commit><git-push>","How do I make a new branch in git with no commits","<p>I have a local repo for a website I am helping make. I edited some element of the page and I wanted to push the change. The leader of the site project told me to make a new branch, e.g <em>enhancements/pagename</em>, commit the changes I made to this branch, and push the commits.</p>
<p>However, when I push this, it is also pushing earlier commits from the <em>master</em> branch. How do I get git to only push the one commit I have made on the branch?</p>
<p>I am using <em>git checkout -b branchname</em> to create the branch.</p>
","3","17510413","",""
"71150576","6763212","2022-02-16 23:27:25","0","472","<git><git-branch><branching-and-merging><git-cherry-pick>","git cherry-pick all missing commits between two branches from the same master","<p>I have the following situation:</p>
<p>two branches were created from master at different times</p>
<pre><code>    T0                T1
----+-----------------+------&gt; master
    |                 |
    |                 |
    +---- BranchA     +---- BranchB
</code></pre>
<p>Development occurred on BranchA after time T0</p>
<p>Some, but not all of those commits were merged in master after time T0, but before time T1</p>
<p>I would like to now cherry-pick all the commits in BranchA that do not exist in BranchB into BranchB</p>
","6","6763212","",""
"71154511","3851151","2022-02-17 08:16:11","-1","99","<git><odoo><git-branch><git-commit>","How can I create a git branch where I can work on one folder only?","<p>I am developing modules for odoo, all these modules are in a main folder: modules_odoo.
lets call these modules: module1, module2, module3.</p>
<p>I am using this main folder (modules_odoo) as my repository on github.</p>
<p>Lets say that I want to work on module2. I create a branch for this module: dev_module2. But in this branch automatically module1&amp;3 are also present.
What is a way to only work on one module whithout having the others in there as well.</p>
<p>As an other example:
I have made a branch dev_modules, if I am working on module1 and module2 at the same time. And after a while, module1 is finished, but module2 isn't yet, how can I get module1 back to the main branch and keep module2 in the dev-branch?</p>
<p>Thanks in advance for the tips.</p>
","3","3851151","",""
"38495989","1121225","2016-07-21 05:59:15","28","45677","<git><branch><git-branch>","How to get git parent branch name from current branch?","<p>Currently I am in a feature branch, but I don't know whether it was created from my develop or release branch.</p>

<p>Can anyone please tell me how I can get the parent branch name from the current git branch.</p>
","3","1121225","0","0"
"38520024","20007","2016-07-22 06:54:36","2","4407","<git><version-control><git-branch><branching-and-merging>","Advice on git release management & confusion","<p>We're a team of 6 devs and we've transitioned from TSVC(on TFS2010) to git(on Gitlab) for almost a year now. We've adopted the release model from <a href=""http://nvie.com/posts/a-successful-git-branching-model"" rel=""nofollow"">http://nvie.com/posts/a-successful-git-branching-model</a> and it's working but we're struggling at times to fit in. </p>

<p>Background:
We're maintaining an in-house web app for only 1 exclusive client. Generally we have 2 type of releases:</p>

<ul>
<li>minor: bugfixes &amp; small change requests</li>
<li>major: major change request which usually takes months to deliver</li>
</ul>

<p>Both type of releases can only be deployed to production upon client's approval. </p>

<p>We have 4 types of branches, <code>master</code>, <code>release</code>, <code>develop</code> and topic branches. We branched off a new release from <code>master</code> once a release is ready to go out. For CR, we initially branch from <code>develop</code>, though later we found that it's quite redundant, hence we now branch from <code>master</code>. Topic branch are bugfixes and small CR, which is branch from either the on going <code>release</code> or <code>master</code> branch. When we merge enough bugfixes into a <code>release</code> branch, or when an urgent bugfix needs to be release, we'll prepare that <code>release</code> branch to go out, and start a new <code>release</code> branch. We usually do our releases bi-weekly or monthly on a fixed weekday. We also update the major <code>release</code> branch by merging minor <code>release</code> branch into it upon each release.</p>

<p>We use Gitlab's CI to build our package on every push, and we'll deploy the last built package to our testing environment to be tested by our test team. When the <code>release</code> branch is stable, the final package pass the test and the release approved by client, the same  package is then used for the production deployment.</p>

<p>Below are some of our confusion. </p>

<ol>
<li>Since we always deploy from the tip of the <code>release</code> branch, we feel that there's no need to merge that back into <code>master</code>. The commit which merge <code>release</code> into <code>master</code> is not the one that got deployed. If we were to use the final merged commit, then we will have to go through the testing cycle again, which seems redundant. Should we still keep <code>master</code>?</li>
<li><code>develop</code> branch doesn't seems to fit in our workflow too, should we drop it as well?</li>
</ol>

<p>At the end, what seems to work for us is only having minor &amp; major <code>release</code> branches, but we want to know if that's the recommended way or there's better release model that we can follow.</p>
","2","20007","0","0"
"38525701","4506929","2016-07-22 11:48:20","1","788","<git><branch><git-branch><git-worktree>","Add and commit changes to all git's branches with one command","<p>I have a git repo in my computer and one of the directories inside this repo is a git worktree that holds the html build of the docs. So the tree goes something like this</p>

<pre><code>. # &lt;--- main branches here!
├── docs
│   └── _build
│       ├── doctrees
│       ├── html # &lt;--- gh-pages branch here!
│       │   ├── _modules
│       │   ├── _sources
│       │   └── _static
│       └── latex
├── examples
└── mypackage
    ├── subpackages
    └── subpackages
</code></pre>

<p>When I work at the docs, both branches (<code>dev</code> and <code>gh-pages</code>) get updated, because I change the files in the <code>docs</code> directory and then sphinx compiles the html into the <code>html</code> directory.</p>

<p>However, when I'm done with the process, I have to manually perform <code>git add . &amp;&amp; git commit</code> in both the main branch and the <code>gh-pages</code> branch, to then push all changes to git.</p>

<p>This is not awfully troublesome, but it would be handy if I could issue one command for all branches. I know that <code>git push</code> can be ""defaulted"" to push all branches (which is what I do) but I found no way of doing this to add and commit such as (for example; just for the sake or clarification)</p>

<pre><code>git add . --allbranches
git commit --allbranches -m ""updated the docs""
git push
</code></pre>

<p>or something like that. Is there a way to do it?</p>

<p>Cheers!</p>
","3","4506929","0","0"
"71272062","13295116","2022-02-25 21:50:30","2","3346","<git><git-branch><git-push>","What is the difference between git push -u origin and git push --set-upstream origin","<p>I'm learning how to use git and I need to clone from a master github repo, branch it, make changes, and push the branch to the github repo - but I'm finding myself a bit confused on what the best way to do that would be. I know there are so many resources on git online but I can't find one that is this exact problem (although happy to use that if I'm wrong).</p>
<p>I've been testing on my own private github repo to see the differences and there doesn't seem to be any.</p>
<ol>
<li>clone from repo.</li>
</ol>
<pre><code>git clone git@github.com:organization/repo
</code></pre>
<ol start=""2"">
<li>create a new branch</li>
</ol>
<pre><code>git checkout -b newbranch
</code></pre>
<ol start=""3"">
<li>make changes, add, and commit</li>
</ol>
<pre><code>touch file
git add file
git commit -m &quot;added file&quot;
</code></pre>
<ol start=""4"">
<li>when I try to push there is no upstream</li>
</ol>
<pre><code>git push 
</code></pre>
<p>I get an error saying &quot;fatal: The current branch newbranch has no upstream branch.
To push the current branch and set the remote as upstream, use
<code>git push --set-upstream origin newbranch</code></p>
<p>but I also see a lot of online tutorials using
<code>git push -u origin newbranch</code></p>
<p>Is there any functional difference between this? I'm sure there is some resource online about the difference, but git is a bit confusing to me and I though i'd ask this one direct question to see what people thought.</p>
","0","13295116","",""
"71304694","17779236","2022-03-01 06:49:59","3","633","<github><version-control><updates><git-merge><git-branch>","Update github branch from another branch","<p>I have created a branch from another branch. Then I come back to previous branch and work on it. Now I have switched to second branch. But this second branch don't have the new changes of first branch. I just want to update the second branch from first branch without deleting any of them.</p>
","0","17779236","0","0"
"71316332","10308255","2022-03-02 01:03:18","0","33","<git><merge><gitlab><git-branch>","Is it possible to replace merged files in one directory with redundant merged files from another directory in git?","<p>I am still fairly new to Git, however I am trying to correct some of the <strong>very</strong> poor file structure I created previously and am unsure how.</p>
<p>Essentially what we have is this structure:</p>
<pre><code>--original_folder
    -- file1
    -- file2
    -- file3
    -- file4
    -- file5
    --corrections_to_original_files_folder
        -- file1
        -- file2
        -- file3
        -- file4
        -- file5
</code></pre>
<p><code>original_folder</code> represents the first merged branch, and <code>corrections_to_original_files_folder</code> represents the second merged branch (which, you guessed it, contains corrections to those files).</p>
<p>Obviously this was a really POOR way to do this. What I am trying to do to reduce redundancy is create a new branch, and essentially replace the contents of <code>original_folder</code> with the contents of <code>corrections_to_original_files_folder</code> and from there making additional edits.</p>
<p>I have tried several methods however, because this code is all merged, I cannot rely on any of the <code>git mv</code> methods, OR the <code>git checkout origin/BRANCH_TO_MOVE_FROM desired_file.py</code>.</p>
<p>Can anyone help me fix this dumpster fire?</p>
","1","10308255","",""
"53895745","5955192","2018-12-22 12:40:17","2","4507","<git><npm><git-branch><package.json><husky>","Use git-hooks for certain branches (With Husky and git-branch-is)","<p>I use <a href=""https://github.com/typicode/husky"" rel=""nofollow noreferrer"">husky</a> and <a href=""https://github.com/kevinoid/git-branch-is"" rel=""nofollow noreferrer"">git-branch-is</a> for git hooks. Below my package.json</p>

<pre><code>{
""scripts"": {
    ""test"": ""jest"",
     ...
},
""husky"": {
  ""hooks"": {
    ""pre-commit"": ""git-branch-is master &amp;&amp; npm test"",
    ""pre-push"": ""git-branch-is master &amp;&amp; npm test""
 }
}
</code></pre>

<p>With this options on commit from branch <strong>feature/802</strong> I resieve following error</p>

<pre><code>Error: Current branch is ""feature/802"", not ""master"". 
</code></pre>

<p><strong>Question</strong></p>

<ol>
<li>How I can disable git hooks for branches which started with <em>""feature""</em> </li>
<li>Apply hooks only for <em>master</em> and <em>develop</em> branches.</li>
<li>Can be this realized without using bash scripts?</li>
</ol>
","0","5955192","0","0"
"71563215","9179925","2022-03-21 19:39:39","3","3558","<windows><powershell><cmd><git-branch><windows-terminal>","using git-posh or/and oh-my-posh with Command Prompt(cmd, not Powershell) inside windows terminal","<p>Recently switched to <a href=""https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab"" rel=""nofollow noreferrer"">new windows terminal</a>, and after hours of searching on internet I was not able to find anything helpful, all what I want is to set up cmd inside new windows terminal to show git branches just like it's achievable for powershell.</p>
<p>eg like this <a href=""https://i.stack.imgur.com/AqTRB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AqTRB.png"" alt=""enter image description here"" /></a></p>
<p>I have been very comfortable with cmd especially with its ability to use additional linux commands and don't wanna switch to powershell only because of nice displays of git branches. <a href=""https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh"" rel=""nofollow noreferrer"">this</a> is a source where everything is nicely explained for powershell, all I want is to do the same for CMD.</p>
<p>thanks in advance</p>
","2","9179925","",""
"71601687","1524350","2022-03-24 11:29:49","1","358","<ruby><git><naming-conventions><git-branch><rubocop>","How to implement a custom Rubocop rule for checking git branch naming convention?","<p>For example, I need to check the correctness of git branch naming - it should contain ticket ID similarly to this:</p>
<pre class=""lang-rb prettyprint-override""><code>module Rails
  class GitBranchName &lt; RuboCop::Cop::Cop
    MSG = &quot;Use correct branch name by pattern  '{TicketID}-{Description}'. TicketID is mandatory for linking with the task tracker and should be at least 2 digits&quot;

    def on_send(node = nil)
      branch = `git rev-parse --abbrev-ref HEAD`

      return if starts_from_ticket_number?(branch)

      p &quot;Current branch name: '#{branch}'&quot;

      # add_offense(node, severity: :warning)
    end

    private

    def starts_from_ticket_number?(name)
      gitflow_prefixes = [:bug, :bugfix, :feature, :fix, :hotfix, :origin, :release, :wip]

      name.match?(/(#{gitflow_prefixes.join('/|')})?\d{2,}/)
    end
  end
end
</code></pre>
<p>But as I see, Rubocop processes only text nodes and checks only text lines. So, is it possible to define a rule that will be run only once to check one custom check not related to code but only to business logic?</p>
<p>Also I've created discussion here <a href=""https://github.com/rubocop/rubocop/discussions/10470"" rel=""nofollow noreferrer"">https://github.com/rubocop/rubocop/discussions/10470</a></p>
","3","1524350","",""
"71698709","3753104","2022-03-31 20:20:03","4","533","<android><git><git-branch>","Android Studio Modules are not updated when switching git branches","<p>When I create new branch 'Branch1' and then add new module 'branch1' to it and commit the changes. Then when I switch to the 'master' branch the module is still visible as seen in the image below.</p>
<p><a href=""https://i.stack.imgur.com/vpW4m.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/vpW4m.png"" alt=""enter image description here"" /></a></p>
<p>I can solve the problem by refreshing the Gradle from <code>View &gt; Tools Windows &gt; Gradle</code>, then right click and then Reload Gradle Project. Or using Invalidate cache restart, but is slower than simply refreshing the gradle.</p>
<p><em><strong>But is there more generic solution, that does that gradle sync automatically, when switching branches or stashes?</strong></em></p>
<p><a href=""https://i.stack.imgur.com/zedWr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zedWr.png"" alt=""enter image description here"" /></a></p>
","0","3753104","",""
"71914534","","2022-04-18 16:36:48","0","1337","<git><push><git-branch>","What is difference between github main and master branch?","<p>I changed default branch from <code>main</code> to <code>master</code> and deleted main and now when I am trying to push using command</p>
<pre><code>git push -u origin master
</code></pre>
<p>I am getting error.
I tried <code>git push -f origin master</code> and it works don't know why?</p>
","2","","",""
"71935720","","2022-04-20 07:27:48","0","480","<git><bitbucket><git-branch><git-fetch>","Unable to find remote git branch in remote -- BitBucket","<p>Switched to a new machine. I need to pull the working branches which was pushed from my old machine to remote. But I am unable to find the remote branches via git command. I could see the branch in BitBucket UI.</p>
<p>This search all is not showing the branches</p>
<pre><code>git branch -all
</code></pre>
<p>However I could see my branch in grep search</p>
<pre><code>git ls-remote | grep &quot;my_branch_name&quot;

From ssh://git@my_org.com:xxxx/xxxx/xxx.git
ed18a***************************113aa4ac        HEAD
5b9a1***************************f4aa4f3a        refs/heads/feature/mybranch-10XX
704e2***************************2a4586d5        refs/heads/feature/mybranch-5XX
</code></pre>
<p>Is there anyway to fetch these to my new local ?</p>
","3","","",""
"71960112","18898387","2022-04-21 19:44:32","0","44","<git><github><repository><git-branch>","Uploading to github process","<p>I do the following steps to upload my projects to github, which I think is not the best practice.
I do these steps at every projects.</p>
<ol>
<li>Create github repo with readme file</li>
<li>Delete readme file on github page</li>
<li>git init on PC</li>
<li>git remote add origin <em>githubrepourl</em></li>
<li>git fetch</li>
<li>git checkout main</li>
<li>git add .</li>
<li>git commit -m &quot;Init&quot;</li>
<li>git push origin main</li>
</ol>
<p>The reason to create and also delete the readme file on 1. and 2. steps is that:
I tried the whole steps without creating the readme file and when I tried sync the 2 repo (local and remote) the git gave me error</p>
<p>The reason to checkout main: The default branch on local git (the git software) is &quot;master&quot;.</p>
<p>If I would not checkout the main and if I would upload the the content on github then there would be 2 branch: main and master and the project content would be in master which I don't want to be, because when someone would visit my github repo page on github then it would be an empty site, because on github page the default branch is 'main' which would be empty.</p>
<p>So thats the reason why I change to main at the beginning, which is github default branch.</p>
","15","18898387","",""
"71987643","7881859","2022-04-24 10:45:06","0","287","<git><git-branch><git-switch>","What does the dash mean in `git switch -`?","<p>When doing checkout, I got this message:</p>
<pre><code>$ git checkout HEAD~2
Note: switching to 'HEAD~2'.

You are in a 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits that you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c &lt;new-branch-name&gt;

Or undo this operation with:

  git switch -
</code></pre>
<p>What does the dash mean in <code>git switch -</code>? Is it always the previous branch?</p>
","2","7881859","",""
"72061678","1639359","2022-04-29 17:26:30","1","71","<git><git-branch>","git internals: where is upstream tracking branch stored?","<p>I know that I can see <em>which upstream branch is being tracked by a local branch</em> by running <code>git branch</code> double verbose:</p>
<pre class=""lang-sh prettyprint-override""><code>dino@DINO:$ git branch -vv
  master         b567464 [origin/master] mav cross point example
  p516p          198bf21 [joesmith/master] start adding docs
  p516test       198bf21 start adding docs
* pull_507       4ceafac [soandso/master] restore blah blah blah.
  zorder         13f8d22 [origin/zorder] initial `zorder` tests
</code></pre>
<p>The remote tracking branch (if there is one) is shown in square brackets.</p>
<p><em><strong>My question is: where is this information</strong>, this association between the local branch and the remote branch, <strong>stored?</strong></em></p>
<p>I've poked around under <code>.git/refs/</code> and <code>.git/remotes/</code>, but I am unable to find anything, for example, that lists the association between branch <code>p516p</code> with remote <code>joesmith/master</code>.</p>
<p>(Notice that branch <code>p516test</code> points to the same reference as <code>p516p</code>, but <code>p516test</code> is not tracking any remote.  I set it up that way on purpose, in hopes of finding where the tracking remote is stored, by comparing information for <code>p516p</code> with that for <code>p516test</code>; no luck so far).</p>
","0","1639359","",""
"54151627","10901847","2019-01-11 17:46:56","-2","10815","<git><git-branch><git-bash>","How to create a development branch from master branch in git","<p>In my repository, I have a master branch which has all of the latest code.</p>
<p>I need to have a development branch which is cut from the master branch, so that developers can further cut feature/bugfix branches from the development branch and merge code back to the development branch.</p>
<p>How can I create a development branch from the master branch such that work can be done on both in parallel?</p>
","2","10901847","",""
"54191665","5536727","2019-01-15 01:48:14","0","58","<git><git-branch>","Finding the right git workflow","<p>We are a small web app team (less than 10).  Our environment consists of 3 test environments and Production for a dozen apps.  One of our test environments is customer facing for feature/hotfix approval (Call it Dev) and the other two are hidden test environments, one for Dev (Call it Pre-Dev) and one for Production (Call it Pre-Production).  This helps us ensure the feature/bug is fairly vetted.  Each feature flows through these 3 test environments before hitting Production and some features can take months to be approved by the customer.  </p>

<p>We need a strategy that lets us implement features that stay in testing for a long time while also implementing short term features and quick bug fixes during our iterations with minimal overhead.  </p>

<p>We currently have one branch per environment and use pull requests from our feature/bugfix branches to distribute our new code to each branch one by one.  When releasing, anything in Pre-Prod branch gets squashed into Prod and released.  We are looking at trunk based workflow but our long term testing hold us up I think.  Anyone have ideas?</p>
","0","5536727","",""
"72226516","19108273","2022-05-13 08:23:50","0","27","<git><performance><git-branch>","git - Push to all branch but only have same code? with follow up question","<p>Did git can push to all branch but Only have same code? I mean if i have 3 branch like ver_light, ver_medium, and ver_heavy.</p>
<pre>
= ver_light
\controller\a
\controller\b
</pre>
<pre>
= ver_medium
\controller\a
\controller\b
\controller\c
\controller\d
</pre>
<p>Fisrt, i change ver_medium in controller <strong>A</strong> and <strong>C</strong>. How i do in git without git push controller c in ver_light branch?</p>
<p>Second, this example only 1 or 2 file. How about more than 100+ file? Do i needed select or pickup i need change to ver_light branch?</p>
<p>Third, did git have setup file like : oh, this code only can be push to certain branch and this code can be pushed to all branch ?</p>
<p><strong>Sorry for my bad english. I got C+ but it wont stop to asking.</strong></p>
","5","19108273","0","0"
"72263626","16030727","2022-05-16 17:58:51","0","512","<git><visual-studio-code><branch><git-branch>","what do the symbols (* + !) at the end of a git branch mean?","<p>I sometimes notice that my git branch has suffixes of <code>!</code> or <code>*</code> or <code>+</code>. Thats probably not an exhaustive list, just a few I noticed. I think <code>+</code> means the branch is dirty, and <code>!</code> means I should pull master, but is this documented anywhere? Is there a name for these special characters?</p>
<p>Also, sometimes the characters don't synchronize between vscode and zsh, which adds to the confusion...</p>
<p><a href=""https://i.stack.imgur.com/jJEUf.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jJEUf.png"" alt=""enter image description here"" /></a></p>
","0","16030727","",""
"54298658","1762295","2019-01-21 22:31:00","2","961","<git><git-branch><git-flow>","git branch and checkout does nothing?","<p>I am a new to git workflow (used to a proprietary version control system at work). I followed some tutorial on how to make a branch locally, make changes there, all without affecting master. Here's what I did:</p>

<ol>
<li><code>git clone &lt;url&gt;</code></li>
<li><code>git checkout -b change_readme</code></li>
<li>make a random change to the <strong>Readme</strong> file.</li>
<li><code>git checkout master</code></li>
</ol>

<p>But the same change is seen in Readme now. </p>

<p>I thought I am back to master and there shouldn't be any change. Also, if I made a change in master, the same change is also there when I move back to the <code>change_readme branch</code>. It is as if I never did any branching. </p>
","1","1762295","",""
"54367011","274460","2019-01-25 14:13:40","10","8787","<git><git-branch><git-bare><git-worktree>","git bare repositories, worktrees and tracking branches","<p>I'm working with a code base where I need to be working on several branches at once for different purposes.  So I clone to a bare repository and then set up some worktrees:</p>

<pre><code>git clone --bare ssh://git@git.example.com/project/repo repo.git
cd repo.git
git worktree add ../branch-1 branch-1
git worktree add ../branch-2 branch-2
... someone else creates branch-3 and pushes is ...
git fetch origin +refs/heads/*:refs/heads/* --prune
git worktree add ../branch-3 branch-3
</code></pre>

<p>Now the <code>branch-3</code> worktree isn't set to track the remote tree and trying to make it do so, I get into a horrible mess.</p>

<pre><code>$ cd ../branch-3
$ git branch -u origin/branch-3
error: the requested upstream branch 'origin/refs/heads/feature/SW-5884-move-database-container-to-alpine-base-2' does not exist
hint: ...&lt;snip&gt;
$ git fetch +refs/heads/*:refs/remotes/origin/* --prune
$ git branch -u origin/branch-3
fatal: Cannot setup tracking information; starting point 'origin/feature/SW-5884-move-database-container-to-alpine-base-2' is not a branch.
</code></pre>

<p>What's the right magic to get this to work?</p>
","3","274460","0","0"
"72289056","13559077","2022-05-18 12:20:18","0","266","<linux><git><github><terminal><git-branch>","I have two branches in my git. The one is in green (master) other (personal-website/master) is in red in color","<p>why the second branch is showing in red color. And also when I entered <code>git branch</code> there is only one branch: master. When I tried to delete second branch (personal-website/master), it showing error (branch 'personal-website/master' not found). What could be the issue. How to remove it? [image attached below]</p>
<p><a href=""https://i.stack.imgur.com/nr6Dx.png"" rel=""nofollow noreferrer"">git terminal</a></p>
","6","13559077","",""
"54454342","10502388","2019-01-31 06:09:31","0","235","<bash><git><git-branch>","How to configure command prompt in GIT with branch name. I get this error message: '-bash: __git_ps1: command not found'","<p>I´ve tried to get GIT to show me the directory and branch I´m working on. So that before I type in anything in GIT, when I´m in a project my command prompt would look something like:</p>

<pre><code>project name (branch name) &gt; 
</code></pre>

<p>I tried following a tutorial where I was told to make my .bash_profile in my ~ directory look like this:</p>

<pre><code>#export PS1='jjberg '
alias ll='ls -lahG'

export PATH=""/usr/local/bin:/usr/local/sbin:/usr/local/mysql/bin:$PATH""

eval ""$(rbenv init -)""

if [ -f ~/.git-completion.bash ]; then
  source ~/.git-completion.bash
  export PS1='\W$(__git_ps1 ""(%s)"") &gt; '
fi
</code></pre>

<p>Problem is, whenever I type a command in GIT, an error message is always attached after every action has been performed. It looks like this:</p>

<pre><code>-bash: __git_ps1: command not found
</code></pre>

<p>Does anybody have any idea on how I would fix this?</p>
","6","10502388","",""
"56554355","11497070","2019-06-12 03:38:11","4","715","<git><gitlab><git-branch><git-flow>","git branch workflow policy","<p>I am new to git and understand a little bit about Git.<br>
My company is currently have 1 program and the program divides into 5 products. each product is handling by different team. </p>

<p>Currently my company git have 5 branches such as :</p>

<ul>
<li>dev = this branch is for developer to build program (dev.program.com)</li>
<li>test(alpha) = this branch is for tester to test the program (test.program.com)</li>
<li>staging(beta) = this branch is for tester test the program (double check of error ) and client test the program. (stg.program.com)</li>
<li>staging-trx = the duplicate of staging and for developer to make sure that no error conflict while cherry pick from staging before it is served to production. (stg-trx.program.com)</li>
<li>master = merge from staging-trx and ready for production (master.program.com)</li>
</ul>

<p><strong>This is our work flow.</strong></p>

<ol>
<li>developer finish building a program, the developer will commit and push the files into test branch then tester will do stress test into test environment.</li>
<li>after testers are finishing the stress test, developer do pull, cherry pick the committed file from test branch and push into staging branch. after that, tester will do flash test.</li>
<li>after testers are finishing the flash test, developer do pull, cherry pick the committed file from staging branch and push into staging-trx branch, after that developer will merge the staging-trx into master branch.</li>
</ol>

<p>But I have some problems.</p>

<p>Let say in one team have 2 developers (Andy and Robert) and responsible for product A.</p>

<ul>
<li>Robert is handling for new feature and bug fixed</li>
<li>Andy is handling bugs fixed</li>
</ul>

<p>Currently Robert is still building a new feature and that new feature will affect some files and major changes to the code. so Andy cannot do any revision of code to fix the bug because almost all of code has changed.</p>

<p>If I created new branch for every new feature, the tester would find it difficult to test, moreover there would be more websites to be created only for new feature. this means that not only for product A, but there are another products will face the same problem.</p>

<p>So, is there any solution for this case?</p>
","0","11497070","0","0"
"73318029","9793205","2022-08-11 09:04:09","1","1715","<git><gitlab><gitlab-ci><git-branch>","How to create a new branch from a job through gitlab pipeline","<p>I am trying to create a job inside .gitlab-ci.yml which will create a new branch based on my current branch.
The yml that I created is</p>
<pre><code>  - release
  

start:
  stage: release
  before_script:
    - git config --global user.name &quot;${GITLAB_USER_NAME}&quot;
    - git config --global user.email &quot;${GITLAB_USER_EMAIL}&quot;

  script:
    - git checkout -b release
    - git branch -a
    - git remote -v
    - git push --set-upstream origin release 
</code></pre>
<p>at the point of pushing it upstream I get the following error. It is weird that in the error the link of the origin has an extra ' at the end. I am not sure if this bug doesn't have any significance or is it trying to reach the wrong url with this ' at the end.</p>
<p>I believe create a new branch from the pipeline should be possible. Any ideas what I could be missing?
<a href=""https://i.stack.imgur.com/VSAij.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VSAij.png"" alt=""enter image description here"" /></a></p>
","7","9793205","",""
"73325105","8475637","2022-08-11 18:06:28","0","14","<git><command><git-branch><git-reset>","How is work the git reset command for overwrite local changes with remote","<p>I am new in git and read some information about this command <code>git reset --hard @{u}</code> for resetting your local changes and overwriting them with the branch's remote changes. But I don't have a clear idea yet about how is work this instruction, hope you can help with some practical examples.
Thanks,</p>
","2","8475637","",""
"73379204","19778486","2022-08-16 19:13:35","0","133","<git-branch><vscode-devcontainer><github-codespaces><remote-containers>","branches of git repo not showing in vscode using local devcontainer","<p>I have a repo on github configured with codespaces. When opening codespaces on github in the cloud everything works and I can easily switch between branches.
Now I checked out the same repo locally on my windows machine an opened it with my local installed VScode. Again everything normal, and I can easily switch between different branches.
VScode now offers me to reopen in a devcontainer. I choose to do so and VScode starts building my local devcontainer, installing... After a while my devcontainer is ready and I can modify code and build (branch available is the one last used on the windows side). So far so good. However now I can not change branches in VScode anymore. Also when I click on the Git icon on the left of VScode I get a message saying:</p>
<p><em>The folder currenlty open doesn't have a git repository.</em></p>
<p>However in the terminal of the devcontainer I see my complete git repo (with all the git files) that is mounted from Windows. Changes done in the container are immediately reflected on Windows and vice versa as well (just checked this to make sure that it is properly mounted).</p>
<p>Any help is very welcomed.</p>
<p>Regards
Marc</p>
","2","19778486","",""
"73420608","14345129","2022-08-19 17:57:37","1","754","<git><github><git-bash><git-branch>","How do I change the branch to commit (master > main) using git bash?","<p>I'll summarize what happened to my computer.</p>
<h2>What I wanted to do</h2>
<p>To upload my local folder &quot;freshman&quot; to github repository named &quot;Hanyang&quot;, I typed the commands below;</p>
<pre><code>git init
git add freshman
git commit -m &quot;blahblah&quot;
git remote add origin https://github.com/myUsername/Hanyang.git
git push -u origin master
git push origin master
</code></pre>
<h2>What happened</h2>
<p>But I realized that the folder is well uploaded but inadvertently at the '<strong>master</strong>' branch, while the default branch was '<strong>main</strong>'.<br>
So I manually deleted '<strong>master</strong>' branch in github, got back to git bash then tried <code>git add freshman</code> again.<br><br></p>
<blockquote>
<p>Did I have to do something to change the target branch (<strong>master</strong> &gt; <strong>main</strong>) before merely trying <code>git add freshman</code> again?</p>
</blockquote>
<p>Anyway unlike the first typing of the command, however, git bash says &quot;nothing is added&quot; even I checked it via <code>git status</code> - besides it says &quot;my branch is up to date with 'origin/master' &quot; which I already deleted as <a href=""https://i.stack.imgur.com/XlOD2.png"" rel=""nofollow noreferrer"">the image</a>.</p>
<h2>What I want to do now</h2>
<p>In this situation, what should I do to upload my ''freshman'' folder to the <strong>main</strong> branch of the repository in github such that I can upload other folders (sophomore, etc.) after this?</p>
","1","14345129","",""
"56679888","5374999","2019-06-20 06:04:25","1","158","<git><git-branch><git-fetch>","Can not fetch all git branches","<p>I've recently installed git on my MacBook for the first time. I generate my ssh key and added it to my git account. I cloned with ssh remote and after cloning I tried to fetch all branches with <code>git fetch --all</code> but after running this command nothing happens and I still have just the master branch. Do you think my installation has some problem (my git configuration ) or it is some thing else ?</p>
","2","5374999","",""
"56694961","8384","2019-06-20 23:15:08","12","859","<git><format><git-branch><git-log>","Why does a pipe remove the branch names from git log?","<p>when I run</p>

<pre><code>&gt; git log --oneline
</code></pre>

<p>I get output that looks like this</p>

<pre><code>abcdef0 (head, branch, origin/branch) comment
0987654 different comment
1234567 (different-branch, origin/branch) third comment
</code></pre>

<p>But as soon as I pipe the output to anything (e.g. <code>&gt; git log --oneline | cat</code>), the branch names are gone</p>

<pre><code>abcdef0 comment
0987654 different comment
1234567 third comment
</code></pre>

<p>This means I can't grep, or add line numbers, or anything like that.</p>

<p>(It's also missing the colors and <code>less</code> style behavior, but I don't care about that either way today)</p>

<p>Is this something I can re-enable via a command-line parameter?</p>
","0","8384","0","0"
"55448702","1186700","2019-04-01 05:42:38","0","589","<git><git-branch><git-clone><git-mirror>","Copy single branch from git repo and make it independent","<p>I have a git repo lets say ""MyRepo"", with following structure, branch1, branch2, tags, etc. 
I want to create a new git repo, ""EasyStart"" that has the code and history of just branch2 and I don’t want anything else like branch1, tags etc from MyRepo. And I don’t want any other links or connectivity with MyRepo. So once the EasyStart repo is setup it only has history and code of branch1 and hence forth any updates/changes done on EasyStart will not reflect in MyRepo and vice versa. How do I achieve this? </p>
","2","1186700","",""
"72569628","19164472","2022-06-10 05:53:28","1","33","<git><git-branch><branching-and-merging><cherry-pick>","git mess -- how to unscramble cherry picked branches","<p>I have inherited a repo with five or six branches that are not merged into master, and I have to figure out what is in them.  I have been using SourceTree to get a graphical view of the branching relationships.</p>
<p>Unfortunately, it looks like a LOT of commits have been cherry-picked from branch A to branches B and C, while others from branch C got picked into A, but not B.  And then, of course, a lot of them got cherry picked into master.   So ... there is no clear history or provenance, at least with any tool or log option I know of, and I really have no good way to determine what has made it into the master branch.</p>
<p>The good thing is that the cherry-pick preserves the commit message, and the ones I've spot checked, if the message matches the content of the commit matches.  My current plan of attack involves checking out each branch in turn, oing a git log with the format <strong>--format=&quot;ts=%ci;sha=%h;lbl=%d;c=%s&quot;</strong> into a file named with the branch name.  Then writing a perl script to go through each and every commit message, grep it from all of the branch-named files, to produce a list of the branches that commit appears in.</p>
<p>Unless there is some visualization tool that draws lines between cherry-picked commits in divergent branches?  That would be really helpful right about now.  Maybe a log format code that indicates that <strong>this</strong> commit was cherry-picked from <strong>that</strong> commit, maybe showing the sha of the origin commit.   Heck, just a mark that this was a cherry-picked commit instead of a manual one would help me identify which ones I need to look at!</p>
<p>Does anybody have any other suggestions on how to reconcile the commit histories when so much cherry picking has been going on?</p>
","0","19164472","",""
"55622319","9609843","2019-04-10 22:47:46","1","1245","<git><git-branch><git-checkout>","git checkout -B without reset or alternatives?","<p>I want to use a command that will do:</p>

<ol>
<li>Create a new branch if it doesn't exist.</li>
<li>Checkout branch if it exists without any modification to it.</li>
</ol>

<p>Currently used <code>git checkout -B branchname</code> violates the second requirement because it resets the branch to <code>HEAD</code> of starting point if branch exists. Do you know any flags to <code>checkout</code> / workarounds / another commands that will satisfy both requirements?</p>
","3","9609843","",""
"55760963","1986913","2019-04-19 11:12:31","1","311","<git><git-branch>","Is creating a new branch appropriate for a feature change limited to a single script file in git?","<p>My understanding about branch is that we can create as many branches as we require for testing new coding style or feature(s) or release(s) and merge to a different branch or master when needed.</p>

<p>In my case, I have just a small change in my code: Change argument that accepts JSON type string to a different type.</p>

<p>Now, can I create a different branch for just this change, so that I can have two versions of my script? Or is creating a branch for this is too much and has other ways of achieving this?</p>

<p>Note: I won't be changing any other file. There is only one file in which I will do the whole scripting. </p>
","1","1986913","",""
"72671018","6255353","2022-06-18 16:42:53","0","58","<git><git-branch>","Why git asks to commit every file after switching to master branch","<p>I'm new to git and got confused. I was developing in my feature branch, but need to make new feature. So i was planning to switch to master to fetch changes, and than create new branch based on latest master.</p>
<p>However after switching to master i have 2700 changes to commit. When i use fetch it says its up to date with origin. GitHub Desktop lists stashed changes and shows error &quot;Unable to restore stash when changes are present in your branch&quot;. I never used stash.</p>
<p>When i try to switch back to feature branch i get error: &quot;You local changes would be overwritten by checkout.&quot;</p>
<p>Could someone explain me what happened and how to manage this?</p>
<p>Btw I use some private company repository server, maybe it causes problem.</p>
","5","6255353","",""
"55878528","8252136","2019-04-27 08:04:29","2","3314","<git><github><github-pages><git-branch>","Unable to see gh-pages branch in git branch?","<p>In git bash, when I type git branch, it only displays the master branch. But I have created gh-pages branch in GitHub.</p>

<p>Why this happening? How do I move my code from other branches to gh-pages rather than drag and drop in GitHub?</p>
","3","8252136","",""
"55909951","3464933","2019-04-29 19:52:56","4","1712","<git><git-branch><git-fetch>","Why git fetch does not create local branches?","<p>From what I understand, whenever you run <code>git fetch</code> remote objects are downloaded locally and a lightweight pointer  named <code>FETCH_HEAD</code> to the <code>HEAD</code> commit of the remote branch is created. </p>

<p>Since a branch is simply a pointer, how is this different from creating a local branch? What design considerations support the case for not creating a local branch whenever using <code>git fetch</code>? </p>
","3","3464933","0","0"
"55925454","11309621","2019-04-30 16:47:01","1","38","<git><git-branch><git-rebase><git-branch-sculpting>","Git branching strategy: During git rebase: couple file keeps conflicting","<p>Branching main Branch called MASTER
Created a Feature branch called FEATURE_BRANCH from MASTER
Created a sub feature branch called SUB_FEATURE_1</p>

<p>FEATURE_BRANCH the parent from which main sun features are created. This branch has to be rebased from MASTER and some features are done. </p>

<pre><code>$ git checkout  FEATURE_BRANCH
$ git rebase master
$ git push origin FEATURE_BRANCH
$ git checkout SUB_FEATURE_1
$ git push origin FEATURE_BRANCH
$ git checkout  FEATURE_BRANCH
$ git commit --amend
$ git push origin FEATURE_BRANCH
$ git checkout SUB_FEATURE_1
$ git rebase FEATURE_BRANCH
</code></pre>

<p>On rebasing the sub feature branch there were merge conflicts for file <code>x.txt</code>. So corrected the file <code>git add</code> it and <code>git rebase --continue</code> .</p>

<p>But immediatly, the same file had merge conflicts. I fixed the file again and this time correct it all over again</p>

<p>The same file has the exact same merge conflicts. How is this happening?</p>

<p>IS the branching stategy right ? Why is the file having conflicts again ?</p>
","3","11309621","0","0"
"55943043","11438996","2019-05-01 21:40:15","-1","994","<git><git-branch>","Local branch after using git clone","<p>After using <code>git clone</code>, I'm having a slight misunderstanding on how to use <code>branches</code>. I have the same code on both the new <code>branch</code> and <code>master branch</code>. How to properly create one?</p>

<p>Using <code>git branch 'branch name'</code> seems to create a branch, but after I add some new features, those features appears on both the new and old (master) branch</p>

<p>Using the command <code>git branch -a</code>; I get this:</p>

<pre><code>new branch
* master
remotes/origin/HEAD -&gt; origin/master
remotes/origin/master
</code></pre>

<p>I was expecting to use the new branch to add new features, and then merge them into master. But it seems i didn't understand very well how to use branches after i use the command git clone.</p>

<p>EDIT: Sorry, forgot to mention, i already used <code>git checkout</code>, and i know how to use it. But still after i switch to the new branch, add some new features, then switch back to the old branch(in this case, master) i have the newly added features on that branch (master) too.</p>
","6","11438996","",""
"72807519","11809612","2022-06-29 20:32:13","2","46","<git><unix><git-branch><git-checkout>","How git checkout old_branch * within a subdirectory work?","<p>I am new to git and recently get confused about the code below. My question are,</p>
<ul>
<li>Why <code>git branch new_branch</code> will copy the current <code>release_branch</code>?</li>
<li>After checkout the new branch, why we could enter a sub directory and just re-checkout an old branch to bring in the old script?</li>
<li>Why the last checkout line (for old branch) will only restore the files in this subdirectory instead of bringing all scripts or switching to the old branch?</li>
</ul>
<pre><code># Say pwd is /home/ab/
git checkout -f $RELEASE_BRANCH
git branch $NEW_REPAIR_BRANCH
git checkout $NEW_REPAIR_BRANCH
cd /home/ab/cd/ef/
rm -r *
git checkout $OLD_REPAIR_BRANCH *
</code></pre>
<p>Is there anyone could help me explain the logic? Much appreciate! Btw, I believe they should be able to be simplified as well!</p>
","2","11809612","0","0"
"72914118","992094","2022-07-08 16:05:30","0","404","<git><macos><terminal><git-branch>","Git branch name terminal error ""\u@\h \[\033[32m\]\w\[\033[33m\]$(parse_git_branch)\[\033[00m\]""","<p>I added this in my <code>bash_profile</code></p>
<pre><code># Git branch in prompt.
parse_git_branch() {
     git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1=&quot;\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ &quot;
</code></pre>
<p>When I do <code>source ~/.bash_profile</code> I see this(below) and git branch name does not work. Can someone please help?</p>
<pre><code>npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.
\u@\h \[\033[32m\]\w\[\033[33m\]$(parse_git_branch)\[\033[00m\] $ 

</code></pre>
","11","992094","",""
"56117825","875044","2019-05-13 18:16:48","1","72","<git><git-branch><git-push><git-pull>","Separate tracking branches (not remote) for git pull and push","<p>There are <a href=""https://stackoverflow.com/a/2917001"">answers</a> about different remotes for push and pull, but is it possible to have different tracking branches for pull and push, from same remote, or even from different remotes?</p>

<p>In my workflow, it's often to pull from master branch of upstream, and then push to another personal branch of upstream, or some branch of another personal remote.</p>
","0","875044","",""
"72918350","15245777","2022-07-09 01:38:49","1","275","<git><git-merge><git-branch>","Merge two git repositiories, with separate roots and histories, into one","<p>This is what I have</p>
<pre>

RepoA: root ➊ → ⋯ [History A] ⋯ → ➌
RepoB: root ➋ → ⋯ [History B] ⋯ → ➌

</pre>
<p>where the files (➌) in each repo are now identical, but the histories and roots are entirely unrelated.</p>
<p>This is what I want, but both Git and related queries I've been here and elsewhere seem to be going out of their way to avoid this!</p>
<pre>

RepoA:<br/>
branchA root ➊ → ⋯ [History A] ⋯ → ➌
                                     \
                                       ∙ → ➌
                                     /
branchB root ➋ → ⋯ [History B] ⋯ → ➌

</pre>
<p>merged together into RepoA, keeping the root and history of RepoB separate from that of RepoA, so that when I look at the history of any file, after the merger, it will show separate histories from each branch, and not mangle the two sets of histories together.</p>
<p>It's a mash-up of two separate code-bases. I have <i>many</i> projects like this, not just one or two. Some may eventually come to have many different lines of ancestry, rather than just two. Yet, GitHub seems to be specifically blocking this very situation!</p>
","2","15245777","0","0"
"72930524","19521764","2022-07-10 17:30:47","0","214","<linux><git><ubuntu><git-branch>","Ubuntu 22.04 LTS not fully showing some git commands","<p>(new to linux terminal, comming from git bash)
Linux terminal isn't showing the git command response in some cases. Git branch for example. <a href=""https://i.stack.imgur.com/QvAWK.png"" rel=""nofollow noreferrer"">git branch does not list branches (git branch -l doesen't work either), but there clearly is a branch since git status returns it.</a></p>
<p>Any ideas on what could be the problem? Should I use different command line?</p>
","0","19521764","",""
"72966359","11522395","2022-07-13 12:32:46","0","36","<git><version-control><branch><git-branch>","Why git pull from 2 branches deletes some modifications from the first branch?","<p>I have this scenario:</p>
<ol>
<li>branchA - with <strong>some</strong> modifications for 1.txt file</li>
<li>branchB - with <strong>some other</strong> modifications for 1.txt file</li>
<li>master - with old version of 1.txt file</li>
</ol>
<p>I am in the master branch. First I pull <code>branchA</code> and get <code>branchA</code> modifications to 1.txt file.
then I pulled <code>branchB</code> and get its modifications to 1.txt file, <strong>but that last pull also deleted the <code>branchA</code> modifications, and Git didn't show any conflict, why is that happening and how to prevent it</strong></p>
","2","11522395","",""
"56227854","1693859","2019-05-20 20:37:14","0","296","<git><git-branch>","How to create a git branch with custom diff to master branch?","<p>Sorry for the vague question title, I don't know how to phrase it better. Basically I have a <code>master</code> branch with two commits <code>c1</code> and <code>c2</code>:</p>

<pre><code>    +-----&gt; dummy1   +-----&gt; dummy2
    |                |
    |                |
    |                |
    |                |
  c1+              c2+
   .                 .
   └── a.txt +       ├── a.txt
                     ├── b.txt +
                     ├── not-wanted.txt +
                     └── c.txt +
</code></pre>

<p><code>c1</code> has added <code>a.txt</code> file. <code>c2</code> has added three more files as you see. Now I wanna have two dummy branches, one off of <code>c1</code> and another from <code>c2</code> so that when I do <code>git diff dummy1..dummy2</code> I only see the file <code>b.txt</code> and <code>c.txt</code> in the diff. So the resulting PR between <code>dummy1&lt;-dummy2</code> only shows <code>b.txt</code> and <code>c.txt</code> but not the <code>not-wanted.txt</code>.</p>

<p>Is this possible?</p>
","0","1693859","",""
"73012036","18172687","2022-07-17 13:03:29","1","344","<git><github><git-branch><git-remote>","How to reset a remote git branch to its initial state","<p>I'm working on a git branch that I branched out from the main branch and I have made a number of commits to it but now I want to reset that branch to its earlier state when I first branched it from the main branch. what I  mean is that I want to remove all commits I have already committed and push in there so that it becomes exactly the same as the main.</p>
<p>when I did this :</p>
<pre><code>git reset --hard origin/the-branch-name
</code></pre>
<p>It give this:</p>
<pre><code>HEAD is now at 4176992 This is fifth commit to new branch
</code></pre>
<p>which is the last commit I made. But I want to remove all commits I have made.</p>
<p>Please, how can I achieve this?</p>
","1","18172687","",""
"56269147","2875641","2019-05-23 06:22:58","0","585","<git><git-branch>","Git: How to understand the 'git branch -a --merged master' listing?","<p>When on master branch I executed the following commands:</p>
<pre><code>git fetch
git branch -a --merged master
</code></pre>
<p>I got the following listing:</p>
<pre><code>$ git branch -a --merged master
  branch1
  branch2
* master
  remotes/origin/branch1
  remotes/origin/branch4
  remotes/origin/branch3
</code></pre>
<p>Can I understand from this listing that branch1 was merged and pushed to the remote master branch?</p>
<p>I emphasize the main point which interests me: was it also pushed to the master branch?</p>
","0","2875641","",""
"73085568","786045","2022-07-22 20:03:43","0","136","<git><github-actions><git-branch>","Filtering git branches in github actions/workflows","<p>I want to deploy code based on the latest cut branch in git. Branch names follow this scheme:</p>
<pre><code>release-2022.1
release-2022.2
...
[release-yyyy.m]
</code></pre>
<p>Is there a way in github workflows to filter out the latest releases?
Limit to last 5 releases.</p>
<p>In other words,</p>
<ol>
<li>can I filter git branches by name (release*)?</li>
<li>then sort git branches</li>
<li>in decending order? then filter the 5 most recent branches at the
top?</li>
</ol>
","0","786045","",""
"73127297","9042947","2022-07-26 17:09:53","2","260","<git><github><branch><git-branch>","Get the default branch name of git projects","<p>I used <code>repo init</code> to initialize and sync a source code. In the directory of a specific project I used</p>
<pre><code>git branch -r
</code></pre>
<p>to list all the branches. The default branch of the project is called &quot;stable&quot;, not main or master. How can I get the name of the default branch using git branch command?</p>
","1","9042947","",""
"73172195","1695984","2022-07-30 01:06:04","0","60","<git><gatsby><git-branch><git-status>","Gatsby develop V4 won’t switch between git branches","<p>I have created a new git branch in my GatsbyJS project to work on a new feature, then running &quot;gatsby clean&quot; + &quot;gatsby develop&quot; to view the update, if I shut down the server and change back (checkout) to the master/main branch and run again &quot;gatsby clean&quot; + &quot;gatsby develop&quot; I can still see the updated version. Isn’t the browser supposed to show the original version without any changes?</p>
<p>I ran &quot;gatsby clean&quot; before &quot;gatsby develop&quot; everytime I switch branch and used two diferent browsers.</p>
<p>Another thing that I noticed (maybe this is ok), when I check &quot;git status&quot; I can see that the same file with the update is waiting to be commited on both branches.</p>
<p>As a side note I have basic gatsby-conf and gatsby-browser configuration</p>
","2","1695984","",""