Post Link,User Link,CreationDate,Score,ViewCount,Tags,Title,Body,CommentCount,OwnerUserId,AnswerCount,FavoriteCount
"57655911","5078576","2019-08-26 10:13:58","1","127","<git><version-control><git-pull><git-reset>","Undo git pull, how to bring repos to old state (once again)","<p><strong>Please note</strong>, before indicating the question as a duplicate, that I have read the answer <a href=""https://stackoverflow.com/questions/1223354/undo-git-pull-how-to-bring-repos-to-old-state"">here</a> but, with the solution proposed, I will delete all the uncommitted changes. </p>

<p><strong>Problem</strong>:</p>

<p>I have developed new features using a dedicated branch. In the meanwhile, the master branch continued to be developed by others. I decided to do a <code>git pull</code> in order to rebase my code to the new one. However, there were conflicts: somebody has improved the code on the remote repo.</p>

<p><strong>Question</strong>:</p>

<ol>
<li>I have some uncommitted changes on my local repo. How can I bring the repo to the old state with the old uncommitted changes?</li>
<li>Did I already lose forever all the uncommitted changes?</li>
</ol>
","7","5078576","",""
"76170270","20087539","2023-05-04 06:43:05","0","51","<git><git-reset>","Lost all the files using git reset --hard and while recovering I get my lost files in hash file format which makes me difficult to recover them","<p>I used <strong>git reset --hard</strong> command and lost all my files. Then tried to use command <strong>git fsck</strong> which got me a dangling tree with a hash value. Then entered the <strong>git show --format=raw &lt;hash value&gt;</strong> which gave me list of all the lost files.</p>
<p><strong>git fsck --lost-found</strong> gave me</p>
<pre><code>Checking object directories: 100% (256/256), done.
notice: HEAD points to an unborn branch (master)
notice: No default references
missing tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
dangling tree d2682fde785bcfd92525e5b856770c084fd32ee8
</code></pre>
<p><strong>ls .git/lost-found/other</strong> gives me a hash file which when opened by the command <code>git cat-file -p d2682fde785bcfd92525e5b856770c084fd32ee8</code> gives me all my lost files in this format.</p>
<pre><code>040000 tree 29faf839a8e17b98198fa8e56a6abb8933a3ab78    models
040000 tree ba9e0d882162283f3590f6d3cbcdc038cf71e8a2    node_modules
100644 blob 2ff009cc3552ee4e0ac3b0babc968797f9527b90    package-lock.json
100644 blob 2b27f9894f180d2e65c468ea261c1bf96c372801    package.json
040000 tree 7254925ba8ee0d8a8313368a017be7bbc0c3a178    routes
100644 blob 6726fd46ff7359e2409a5ff9b3e5b3768fc3c31b    server.js
</code></pre>
<p>Please help me out on how to recover these files back to my folder.</p>
","12","20087539","",""
"76551582","11555842","2023-06-25 17:10:29","0","31","<git><version-control><recovery><git-reset>","How can I undo that unstaged changes were deleted by git reset --hard HEAD^?","<p>I was working on my project, and I made a wrong commit (the last commit) and wanted to permanently delete it from the git logs, and I did the following command:</p>
<pre><code>git reset --hard HEAD^
</code></pre>
<p>The problem is that I didn't make add on my changes, so all changes which are unstaged were deleted.</p>
<p>Now, how do I get all the changes back?</p>
","3","11555842","",""
"76568109","14357365","2023-06-27 19:38:42","0","32","<git><github><git-reset>","How to apply `git reset HEAD~1` on the Github instead of the local repository?","<p>By mistake I committed changed to my <code>main</code> branch and pushed the changes to the server/Github. I want to completely get rid of the commit on GitHub.</p>
<p>The command <code>git reset HEAD~1</code> undo the last commit locally. But if I do <code>git pull</code> I would get the changes from the server that I want removed.</p>
<p>How to make Github forget about my last commit? How can I apply <code>git reset HEAD~1</code> on the server not just my local clone?</p>
","4","14357365","",""
"5473","85","2008-08-07 23:22:51","1570","777226","<git><version-control><git-reset>","How can I undo git reset --hard HEAD~1?","<p>Is it possible to undo the changes caused by the following command? If so, how?</p>

<pre><code>git reset --hard HEAD~1
</code></pre>
","11","85","0","0"
"21513911","435605","2014-02-02 17:42:55","0","594","<eclipse><git><git-reset><git-revert>","eclipse git revert/reset option not found","<p>How can revert/reset a file using the eclipse egit (team) plugin?</p>

<p>I'm opening the team menu but can't find any reset/revert option. See screenshot:</p>

<p><img src=""https://i.stack.imgur.com/zWLT0.png"" alt=""screenshot""></p>
","3","435605","0","0"
"59802793","3760100","2020-01-18 16:55:28","3","211","<git><git-reset><git-workflow>","Consequences of git reset --HARD on a branch that's publicly shared?","<p>I was reading git tutorial <a href=""https://git-scm.com/docs/gittutorial"" rel=""nofollow noreferrer"">here</a>, where they mention:</p>

<blockquote>
  <p>don’t use git reset on a publicly-visible branch that other developers
  pull from, as it will force needless merges on other developers to
  clean up the history</p>
</blockquote>

<p>I did not understand what the issue is. If I have a public branch with say 4 commits, A->B->C->D. D being the latest commit. If I did a hard reset back to B. Then, for other developers who've already fetched this branch, when they do git fetch again, they'll see that they are 2 commits ahead of remote, so they reset back to B and are good to right? Or did I miss something?</p>
","0","3760100","0","0"
"59937046","979331","2020-01-27 18:43:09","0","706","<git><git-reset>","Git - undo commit (git reset --soft) does nothing","<p>I just did a commit and realized I need to undo the commit without deleting any changes....how would I do that? I have tried <code>git reset --soft</code> and that did nothing, no errors nothing, when I enter that command, literally nothing happens. What am I doing wrong?</p>
","0","979331","",""
"57673377","6029189","2019-08-27 11:07:42","1","522","<git><git-reset>","git reset --hard doesn't work after adjusting the Head","<p>When I do <code>git reset --hard</code> to discard changes in current working copy, nothing get discarded.</p>

<p>Here is what I did prior to this problem:
I moved the Head back 3 commits 
<code>git reset HEAD~3</code>
Then I wanted to go back to the latest commit, and I thought this would do it
<code>git checkout -</code>
What actually this done is checking out the development branch with changes that I don't want.
Now I want to go back to my previous branch without commiting these changes but I cannot switch branch because of these changes.
<code>git reset --hard</code> does nothing.
A also tried to stash the changes, they get stashed, but the working copy won't remove the changes in my working copy.</p>

<p>Edit:
Here is the output of git status:</p>

<pre><code>On branch development
Your branch is up to date with 'origin/development'.

Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    deleted:    Muqeem/Modules/Muqeem/Slide Down /SlideDownViewController.swift
    deleted:    Muqeem/Modules/Muqeem/Slide Down /SlideDownViewController.xib
    deleted:    Muqeem/Modules/Muqeem/Tabs/Swiping Controller /PageCollectionViewCell.swift
    deleted:    Muqeem/Modules/Muqeem/Tabs/Swiping Controller /SwipingViewController.swift
    deleted:    Muqeem/Modules/Muqeem/Tabs/Swiping Controller /SwipingViewController.xib

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    Muqeem/Modules/Muqeem/Slide Down (Whitespace Conflict)/
    Muqeem/Modules/Muqeem/Slide Down/
    Muqeem/Modules/Muqeem/Tabs/Swiping Controller (Whitespace Conflict)/
    Muqeem/Modules/Muqeem/Tabs/Swiping Controller/

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>
","5","6029189","",""
"57746733","2697145","2019-09-01 14:16:44","0","33","<git><git-reset>","git reset HEAD~1 --soft made my staged files list full of files I haven't touched","<p>I accidentally committed two files to develop branch instead of my feature branch, but fortunately did <strong>not</strong> push them yet.</p>

<p>So I read how to undo that, so that I'll keep my changes and found the command </p>

<pre><code>git reset HEAD~1 --soft
</code></pre>

<p>After running that my staged files list is now full of changes, file adds, file removes and whatnot. Why? </p>
","0","2697145","",""
"49350029","1535218","2018-03-18 16:08:04","0","502","<git><git-reset>","How to overwrite over all commits after a specific commit without having to git pull?","<p>I <code>git reset --hard &lt;specific commit from earlier&gt;</code> and then made some new commits. When I try to push these new changes, I'm prompted to git pull to get the changes made after <code>&lt;specific commit from earlier&gt;</code>. I'm trying to just write over these changes git is prompting me to pull. This is a simple project so I just have the one master branch. What is the best way to rectify?</p>
","0","1535218","",""
"15404535","946850","2013-03-14 08:40:35","286","242559","<git><reset><git-reset><sparse-checkout>","How to git reset --hard a subdirectory","<blockquote>
<p><strong>UPDATE²</strong>: With Git 2.23 (August 2019), there's a new command <code>git restore</code> that does this, see the <a href=""https://stackoverflow.com/a/15404733/946850"">accepted answer</a>.</p>
</blockquote>
<blockquote>
<p><strong>UPDATE</strong>: This will work more intuitively as of Git 1.8.3, see <a href=""https://stackoverflow.com/a/16589534/946850"">my own answer</a>.</p>
</blockquote>
<p>Imagine the following use case: I want to get rid of all changes in a specific subdirectory of my Git working tree, leaving all other subdirectories intact.</p>
<ul>
<li><p>I can do <code>git checkout .</code> , but <a href=""https://stackoverflow.com/questions/15251638/git-checkout-adds-directories-excluded-by-sparse-checkout"">git checkout . adds directories excluded by sparse checkout</a></p>
</li>
<li><p>There is <code>git reset --hard</code>, but it won't let me do it for a subdirectory:</p>
<pre><code>&gt; git reset --hard .
fatal: Cannot do hard reset with paths.
</code></pre>
<p>Again: <a href=""https://stackoverflow.com/questions/11200839/why-git-cant-do-hard-soft-resets-by-path"">Why git can&#39;t do hard/soft resets by path?</a></p>
</li>
<li><p>I can reverse-patch the current state using <code>git diff subdir | patch -p1 -R</code>, but this is a rather weird way of doing this.</p>
</li>
</ul>
<p>What is the proper Git command for this operation?</p>
<p>The script below illustrates the problem. Insert the proper command below the <code>How to make files</code> comment -- the current command will restore the file <code>a/c/ac</code> which is supposed to be excluded by the sparse checkout. Note that I <em>do not</em> want to explicitly restore <code>a/a</code> and <code>a/b</code>, I only &quot;know&quot; <code>a</code> and want to restore everything below. <strong>EDIT</strong>: And I also don't &quot;know&quot; <code>b</code>, or which other directories reside on the same level as <code>a</code>.</p>
<pre class=""lang-bash prettyprint-override""><code>#!/bin/sh

rm -rf repo; git init repo; cd repo
for f in a b; do
  for g in a b c; do
    mkdir -p $f/$g
    touch $f/$g/$f$g
    git add $f/$g
    git commit -m &quot;added $f/$g&quot;
  done
done
git config core.sparsecheckout true
echo a/a &gt; .git/info/sparse-checkout
echo a/b &gt;&gt; .git/info/sparse-checkout
echo b/a &gt;&gt; .git/info/sparse-checkout
git read-tree -m -u HEAD
echo &quot;After read-tree:&quot;
find * -type f

rm a/a/aa
rm a/b/ab
echo &gt;&gt; b/a/ba
echo &quot;After modifying:&quot;
find * -type f
git status

# How to make files a/* reappear without changing b and without recreating a/c?
git checkout -- a

echo &quot;After checkout:&quot;
git status
find * -type f
</code></pre>
","10","946850","0","0"
"15432052","1154018","2013-03-15 12:06:57","367","554700","<git><version-control><git-reset>","What is the meaning of git reset --hard origin/master?","<p>I did a <code>git pull</code> and got an error: </p>

<blockquote>
  <p>The following working tree files would be overwritten by merge...
  Please move or remove them before you can merge.</p>
</blockquote>

<p>To resolve this I did the following:</p>

<pre><code>git fetch
git reset --hard origin/master
</code></pre>

<p>Now when I do <code>git pull</code>, it says everything up to date. I want to know what exactly happens when I run these commands. I know <code>git fetch</code> fetches the changes from the remote repo without merging them into my local repo.</p>

<p>What is the meaning of <code>git reset --hard origin/master</code>? How does it work?</p>
","0","1154018","0","0"
"15447988","313389","2013-03-16 10:08:10","3","6673","<netbeans><git-reset>","How to use git reset in netbeans?","<p>I want to undo my last commit in NetBeans.</p>

<p>As I found the command is '$ git reset --soft HEAD~ ' but how can I do it in NetBeans7 IDE? </p>
","3","313389","0","0"
"33058069","2193439","2015-10-10 19:24:54","1","89","<git><git-commit><git-remote><git-reset><git-revert>","Hard reset to a previous git Commit - Not working","<p>I have run</p>

<pre><code>git log
</code></pre>

<p>And find this-</p>

<pre><code>    C:\WAMP\www\gtwhero [panelist_qa_AJAX_solution]&gt; git log
    commit afbda8a710aab851937532543bb0a99f246874e3
    Merge: 19323e3 cfde9ef
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sun Oct 11 00:51:40 2015 +0600

        Merge branch 'panelist_qa_AJAX_solution' of https://github.com/techmarket/gtwhero into panelist_qa_AJAX_solution

    commit 19323e3d1c8055c324a7ed65c3868e92420aad9f
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sun Oct 11 00:48:43 2015 +0600

        nothing

    commit cfde9eff38fccd15dfc521e7ba075622a31a5a6e
    Merge: 38a68bd b773dd2
    Author: Platon &lt;heonozis@mail.ru&gt;
    Date:   Sat Oct 10 17:08:30 2015 +0300

        Merge remote-tracking branch 'remotes/origin/master' into panelist_qa_AJAX_solution

        Conflicts:
            app/Http/Controllers/WebinarController.php

    commit b773dd225b8ffa34cb9231a4e58063756d7e53f1
    Merge: 1d9923d 21f19e3
    Author: Platon Mysnyk &lt;Heonozis@mail.ru&gt;
    Date:   Sat Oct 10 16:04:29 2015 +0300

        Merge pull request #98 from techmarket/fix-webinar-hosts-all-questions-issue

        Fix webinar hosts all questions issue

    commit 21f19e3585329d3d2006e32254ff62808b241f90
    Author: Ronak &lt;coolronak.shah@rediffmail.com&gt;
    Date:   Sat Oct 10 16:27:21 2015 +0530

        Reverse the QA order in Webinar host Layout

    commit ea539597995011952b2ca083ae61b4ca1c4176aa
    Author: Ronak &lt;coolronak.shah@rediffmail.com&gt;
    Date:   Sat Oct 10 16:12:28 2015 +0530

        Fix Webinar Host Layout QA section update and Also changed the Alert message for Vote chart refreshed in host layo
    commit 38a68bda7d0e7c13d92bf42f791f9c3e805d909d
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 16:23:39 2015 +0600

        ""panelist_id"" and auth fix with help of @Ronak

    commit 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 13:31:08 2015 +0600

        Animation for removing item

    commit 2181c108c76f187c09744ae6df131f8f80f0b16d
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 12:27:53 2015 +0600

        Animation Added in QA

    commit 180337bfe91686d137e3222c196e626f712832b1
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 12:17:34 2015 +0600

        All AJAX of this page ""http://localhost/gtwhero/public/webinar/LB42JgKdjEAOAe5b37MV/panelist"" done

    commit e25c6c19605627a00ca033139c2d98af0feacacf
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 07:45:42 2015 +0600

        Before breakfast - done, remaining AJAX query
</code></pre>

<p>The code is already pushed in github.</p>

<p>I want to go back to the state when I have made a commit-</p>

<pre><code>    commit 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2
    Author: S. M. Abrar Jahin &lt;abrarjahin@live.com&gt;
    Date:   Sat Oct 10 13:31:08 2015 +0600

        Animation for removing item
</code></pre>

<p>So, what I had tried is-</p>

<blockquote>
  <p>git reset --hard 3ba2bfea5d7ad8ff4a83b23595c7a9841bc064b2</p>
</blockquote>

<p>When I run it, it says, ""<strong>HEAD is now at 3ba2bfe Animation for removing item</strong>""</p>

<p>But I am finding that, it is not the state when I had made the commmit.</p>

<p>What can I do, can anyone please help?</p>
","4","2193439","",""
"17374871","1023812","2013-06-28 22:59:32","0","330","<git><git-push><git-pull><git-checkout><git-reset>","How badly did I hose my git repo?","<p>My project has a bare repo setup on the server. I'm currently on branch <code>0.9/develop</code>. I merged <code>0.9/develop</code> with a branch that another developer was working on. It turns out that it would be <strong>way</strong> more work to fix his code than to obliterate his changes entirely. Unfortunately, I already ran a <code>git push origin 0.9/develop</code> after having committed the merge AND I pulled those changes to my development AND staging servers (yes, I'm stupid).</p>

<p>I've been going through a bunch of somewhat similar questions on SO, but none of them quite seem to cover my exact case. This one was particularly useful: <a href=""https://stackoverflow.com/questions/4114095/git-revert-to-previous-commit-how"">How to revert Git repository to a previous commit?</a></p>

<p>Using info from that question, I was able to successfully obliterate the last commit off of the project. Specifically, I did a <code>git reset --hard f6c84a0</code>, which successfully reset my local repository to the commit right before I merged the other developer's n00bery into my poetry.</p>

<p>Okay, great. Now I just need to get the bare repo fixed up. So I tried <code>git push --force origin 0.9/develop</code>. Unfortunately I lost the specific message that the server sent back, but it was something along the lines of ""success"", and it showed that the remote repo had been updated to commit f6c84a0.</p>

<p>When I tried to ssh into the server and then go to my staging environment and run a <code>git pull</code>, the response was:</p>

<pre><code>From /home/ben/web/example
 + 77d54e4...f6c84a0 0.9/develop -&gt; origin/0.9/develop  (forced update)
Already up-to-date.
</code></pre>

<p>However, when I ran a <code>git log</code> from the staging server, all of the commits from the merge are still on the <code>0.9/develop</code> branch. I tried a couple of things, like <code>git pull --force</code>, but I couldn't get the bad commits to go away.</p>

<p>Okay, fine. There's more than one way to skin a cat. I wiped the staging server clean and did a fresh <code>git clone --recursive --no-hardlinks example.git stage.example.com</code> and ran the necessary setup script that does a few little server maintenance things.</p>

<p>Now I can't get back to my <code>0.9/develop branch</code>. In the past, I have simply run <code>git checkout 0.9/develop</code>, but if I try that now, I get this:</p>

<pre><code>Branch 0.9/develop set up to track remote branch 0.9/develop from origin.
Switched to a new branch '0.9/develop'
</code></pre>

<p>Wait...what? <code>0.9/develop</code> is not a new branch. Working with info from this question: <a href=""https://stackoverflow.com/questions/67699/how-do-i-clone-all-remote-branches-with-git"">How to clone all remote branches in Git?</a> I did a <code>git branch -a</code> and got the following:</p>

<pre><code>* 0.9/develop
  master
  remotes/origin/0.8/develop
  remotes/origin/0.8/master
  remotes/origin/0.9/develop
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/category-address
  remotes/origin/jaminimaj
  remotes/origin/master
  remotes/origin/permissions
  remotes/origin/ticket-duration
  remotes/origin/timzone-support
</code></pre>

<p>I then tried <code>git checkout origin/0.9/develop</code>, but I got the following message:</p>

<pre><code>Note: checking out 'origin/0.9/develop'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f6c84a0... bugfix: revert email helper
</code></pre>

<p>Well, the good news is the staging server now has the proper code base, but I'm in a detached HEAD state. I realize that I'm probably missing something very minor here, but it certainly is messing with my Friday evening. How can I get my staging server HEAD pointing back to the HEAD of <code>0.9/develop</code>? Also, I want to do the same thing on my development environment, but I'd rather do it in the proper <code>git</code> fashion than erasing the whole server and starting over again. Can I do that, or will I just have to brute-force it by rebuilding the server from the repo? Thanks for the help everybody!</p>
","5","1023812","",""
"17430400","1998564","2013-07-02 16:05:30","0","113","<git><mercurial><git-reset>","When running git reset --hard, the staged changes persist. Same goes for git checkout and git stash + git stash drop. What's going on?","<p>So here's some background:  I'm trying to move a repository <a href=""http://hivelogic.com/articles/converting-from-mercurial-to-git"" rel=""nofollow"">from Mercurial to git</a> using <a href=""http://repo.or.cz/w/fast-export.git"" rel=""nofollow"">hg-fast-export</a> and when I do the last step (<code>git checkout HEAD</code>) there are still changes that persist in the repository.  Specifically, it says that there are 4 deleted files that shouldn't be deleted.</p>

<p>When I try the following, nothing changes:</p>

<p><code>git reset --hard HEAD</code>, <code>git checkout .</code>, <code>git stash &amp;&amp; git stash drop</code>.</p>

<p>One thing I noticed is odd was that when someone was using this Mercurial repo, they added a git repo right in the middle of it T_T.  So the interesting thing is when I run <code>git checkout HEAD</code> (but not when I run <code>git checkout .</code>), the <code>.git</code> subdirectory appears as deleted in the index (weird).  These changes disappear whenever I run <code>git reset</code> but not without a bunch of errors flying past about an Invalid path.</p>

<p>Finally, that leaves the repository in the same state it was in when I first ran <code>git checkout HEAD</code>.  (At least git's consistant!).</p>

<p>Surely a subset of the people converting mercurial to git has experienced this.  Can anybody share their experiences with changes persisting within git?</p>
","3","1998564","",""
"34046088","2275384","2015-12-02 15:08:36","1","96","<git><virus><git-reset><git-revert>","Does git revert/reset work against cryptolocker and its variants?","<p>So we have a server that hosts our code that has a possibility of getting the newest crytpo variant. I was wondering if we did a git revert or reset it would remove the encrypted files and we can go on our merry way without needing to restore the whole repo (over a backup file transfer)?</p>
","0","2275384","",""
"69114282","9674909","2021-09-09 07:52:02","0","85","<git><version><commit><git-checkout><git-reset>","Git checkout commit command works like git reset commit","<p>I want just to see my previous commits without doing any changes.</p>
<p>I use:</p>
<pre><code>git checkout id_of_certain_commit
</code></pre>
<p>But when I try to get back, it looks like everything that was from that point is removed. I use:</p>
<pre><code>git checkout master
</code></pre>
<p>It does not get back to the commits that were ahead...</p>
<p>Please, help. It looks like I am doing something wrong</p>
","1","9674909","0","0"
"57527130","3587229","2019-08-16 15:15:29","1","57","<git><git-checkout><git-reset>","After committing, resetting head and then checking out the commit, git does not restore removed files","<p>After committing changes, I ran <code>git reset --hard HEAD^</code> mistakenly and it caused me to lose the files in that committed changes.</p>

<p>I am trying to recover these files.</p>

<p>When I do <code>git reflog</code> it shows that previous commit, <code>thatCommit</code>, so I then proceed with:</p>

<p><code>git checkout thatCommit</code></p>

<p>However, none of the files are restored.</p>

<p>When I then type <code>git checkout</code> it prints out all the files that have been deleted:</p>

<pre><code>D path/to/deletedFile1
D path/to/deletedFile2
M path/to/changedFile1
M path/to/changedFile2
</code></pre>

<p>I'd like the deleted files and changed files to be restored, but I cannot see <code>path/to/deletedFile1</code> in my repo/branch.</p>

<p>How can I recover these files?</p>
","0","3587229","0","0"
"17841858","","2013-07-24 18:20:13","0","2761","<git><github><git-commit><git-reset><git-add>","After doing `git commit` git tells me there is nothing to commit","<p>I am on my <code>gh-pages</code> branch and when I </p>

<pre><code>$ git add &lt;file&gt;
$ git commit -m ""&lt;message&gt;""
</code></pre>

<p>I see</p>

<pre><code># On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>Then I will do and see the following </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?

$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I tried to dig deeper to figure out whats messed up </p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages

$ git reflog 
d712282 HEAD@{0}: checkout: moving from master to gh-pages
9bf529e HEAD@{1}: checkout: moving from gh-pages to master
d712282 HEAD@{2}: commit (initial): 1st push to gh-pages
</code></pre>

<p>I am not sure what is going on here but before this I was trying to get rid of my last commit trying the following commands</p>

<pre><code>git reset --soft HEAD
git reset --hard HEAD
git reset HEAD
git reset .
git reset
</code></pre>

<p>Perhaps I made things worse with those. Not sure. Also I tried </p>

<pre><code>$ git push origin gh-pages 
Counting objects: 1156, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (1141/1141), done.
Writing objects:   6% (70/1156), 2.27 MiB | 680.00 KiB/s   
</code></pre>

<p>then I immediately cancel because I don't want that commit/add anymore. </p>

<p><strong>How do I revert/delete that last commit/add and start over clean?</strong></p>

<h2>UPDATE</h2>

<p>Ok I first followed I am John Galt's answer. I ran </p>

<pre><code>$ git checkout d712282
</code></pre>

<p>and got this </p>

<pre><code>Note: checking out 'd712282'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d712282... 1st push to gh-pages
</code></pre>

<p>at this point I really did not know what to do. All I wanted was to be back at my <code>gh-pages</code> branch and no longer have that dam <code>d712282</code> commit plaguing me. So at that point I </p>

<pre><code>$ git checkout gh-pages
</code></pre>

<p>and foolishly I thought the <code>d712282</code> commit died with the detached head and so I proceeded as I would before doing </p>

<pre><code>git add index.html 
</code></pre>

<p>but when I checked to see if had been staged I got </p>

<pre><code>$ git stage
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
</code></pre>

<p>It seemed at this point that nothing changed from before but I kept on just to be thorough. When I tried to run a commit I got </p>

<pre><code>$ git commit -m ""added index.html to gh-pages"" 
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>and then I did</p>

<pre><code>$ git status
# On branch gh-pages
nothing to commit, working directory clean
</code></pre>

<p>I wanted to see what was up and running <code>$ git log</code> gave me</p>

<pre><code>$ git log
commit d7122828ef232829e28654f4bc56022829d03722
Author: siddhion &lt;siddhion@gmail.com&gt;
Date:   Wed Jul 24 19:00:19 2013 +0200

    1st push to gh-pages
</code></pre>

<p>There is that same old <code>d712282</code> commit. I also ran <code>$ git reflog</code> and got</p>

<pre><code>$ git reflog
d712282 HEAD@{0}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{1}: checkout: moving from gh-pages to d712282
d712282 HEAD@{2}: checkout: moving from d7122828ef232829e28654f4bc56022829d03722
d712282 HEAD@{3}: checkout: moving from gh-pages to d712282
d712282 HEAD@{4}: checkout: moving from master to gh-pages
9bf529e HEAD@{5}: checkout: moving from gh-pages to master
d712282 HEAD@{6}: commit (initial): 1st push to gh-pages
</code></pre>

<p>and this point I tried Geoffrey's suggestion and ran and got </p>

<pre><code>$ git reset --hard d712282
HEAD is now at d712282 1st push to gh-pages
</code></pre>

<p>So at this point all I want to do is get rid of d712282 because everytime I try <code>git push origin gh-pages</code> git starting pushing the d712282 commit which has like 1156 files. Way too much. I wants it dead.</p>
","1","","",""
"38993559","4942704","2016-08-17 10:04:08","1","95","<git><git-pull><git-reset><git-fetch>","Git update local ignoring few files (is not .gitignore)","<pre><code>Scenario:
 Bitbucket:
  file1 
  file2 
  file3  

 Local:
  file1 - person1 is working on it
  file2 - person2 is working on it
  file3 - common with personal hardcoded configuration
  untracked files
</code></pre>

<p>person1 commits and pushes his changes on file1.
How person2 can update file1 in his local without resetting file2, file3 and untracked files?
It's a while that I'm trying to do it but I still don't find an easy way!
Thanks.</p>
","1","4942704","",""
"33368600","1535747","2015-10-27 12:57:01","3","41","<git><git-reset>","Restoring git reset even tho they dont show anymore on the repo","<p>Someone has done a <code>git reset --hard f7fe845</code> and they pushed it into a branch in the repo.</p>

<p>Now in that branch  we can't see any work done before that commit. Effectively loosing all work on that branch's work.</p>

<p>We need to revert that git reset and get the branch to the previous version, but at least on the git website or source-tree is like the other commits don't exist anymore.</p>

<p>Is there any hope to get the information back? How?</p>

<p>My branch is <code>feature/UAL-117</code></p>

<pre><code>[ec2-user@ame]$ git reflog
8c0136d HEAD@{0}: reset: moving to HEAD~1
f7fe845 HEAD@{1}: checkout: moving from develop to feature/UAL-117
f7fe845 HEAD@{2}: checkout: moving from feature/UAL-117 to develop
f7fe845 HEAD@{3}: checkout: moving from develop to feature/UAL-117
f7fe845 HEAD@{4}: checkout: moving from feature/UAL-117 to develop
f7fe845 HEAD@{5}: reset: moving to f7fe845df3efc0a6b79b4ccde50ab08fc542532f
6a03be3 HEAD@{6}: checkout: moving from develop to feature/UAL-117
f7fe845 HEAD@{7}: checkout: moving from f7fe845df3efc0a6b79b4ccde50ab08fc542532f to develop
f7fe845 HEAD@{8}: checkout: moving from feature/UAL-117 to f7fe845df3efc0a6b79b4ccde50ab08fc542532f
6a03be3 HEAD@{9}: pull: Fast-forward
24e9afe HEAD@{10}: pull: Fast-forward
d238450 HEAD@{11}: checkout: moving from develop to feature/UAL-117
f7fe845 HEAD@{12}: pull: Fast-forward
8c0136d HEAD@{13}: checkout: moving from feature/UAL-117 to develop
d238450 HEAD@{14}: checkout: moving from feature/UAL-117 to feature/UAL-117
d238450 HEAD@{15}: checkout: moving from develop to feature/UAL-117
8c0136d HEAD@{16}: checkout: moving from feature/UAL-117 to develop
d238450 HEAD@{17}: commit (merge): feature/UAL-117 update composer.lock
dd89670 HEAD@{18}: checkout: moving from develop to feature/UAL-117
</code></pre>
","16","1535747","",""
"16809200","349045","2013-05-29 08:41:35","3","1174","<git><git-reset>","git remove commit on the server","<p>i've made some mistakes about my project managed in git:</p>

<p>reading some guides and some posts here I made this command:</p>

<pre><code>git reset --hard a77ec5f
</code></pre>

<p>where the commint a77ec5f is the last 'good' commit</p>

<p>after this, the files are right in my local copy, but if I do a <code>git status</code>:</p>

<pre><code>$ git status
# On branch dev
# Your branch is behind 'origin/dev' by 4 commits, and can be fast-forwarded.
#
nothing to commit (working directory clean)
</code></pre>

<p>and now, how can I tell the server that the 4 commits that I'm behind are to remove?
thanks</p>
","0","349045","0","0"
"69551490","94687","2021-10-13 07:40:57","1","154","<git-rebase><git-reset><gitk>","How to fix gitk that suddenly has got broken with error: can't read ""arcnos()"": no such element in array","<p><code>gitk</code> used to work fine until recently, when it started showing an error like:</p>
<pre><code>can't read &quot;arcnos()&quot;: no such element in array
</code></pre>
<p>and stopped showing the diffs etc. normally.</p>
<p>This happened with <code>gitk-1:2.25.1-1ubuntu3.2</code> on Ubuntu 20.04.</p>
<p>Before this happened, I've been doing several <code>git rebase</code> and <code>git reset --hard</code> in my repo, which also has some <code>git replace</code> set up, if that could be important for the problem. (Although the history that I rebased doesn't intersect with the graft point.)</p>
<p>I've run <code>git fsck</code>, and it shows some dangling objects of different types. (I believe that a dangling object might cause some problems for <code>gitk</code> when it is trying to determine which objects like refs and tags refer to the shown commits...)</p>
<pre><code>$ git fsck --name-objects
Checking object directories: 100% (256/256), done.
error in tag b2e1ebf3230672ae96d6c1c8f19cb023c8193f89: missingSpaceBeforeDate: invalid author/committer line - missing space before date
error in tag 56faa4371fc7a58f55c2700f652c1ba6384f3ffa: missingSpaceBeforeDate: invalid author/committer line - missing space before date
error in tag 221697dd45dfa25596feace71ab42d66aab67ff3: missingSpaceBeforeDate: invalid author/committer line - missing space before date
error in tag 033c847da41536d2acc74589c4a8494269d963f9: missingSpaceBeforeDate: invalid author/committer line - missing space before date
error in tag 1d048a4e4f1d303935db15e84ebd51951a4a03c4: missingSpaceBeforeDate: invalid author/committer line - missing space before date
Checking objects: 100% (143557/143557), done.
dangling blob 9f15c893db30e315f0688616faf4c57cac8d1dba
dangling blob d534a8fb5af2b7e2779a002828dd136078a35a4d
dangling blob e55478377eb2eb36fb782afa2a1614eac717a39b
dangling blob 21569023cc87b564c62e9dae2dc11abd7ed5ba49
dangling blob d35658eb27a2299b9f3f4ee5a91b450797f63bc5
dangling blob ac81c820e66afb3214d6dd934c88d1b02fbced5d
dangling blob ebbaa0d018d951882a6c083fa8c964fc912862d5
dangling blob ebc7e034b382ed525801eeac6d60fe0de08d0873
dangling blob 8bcca8b98f7d29a26b7e31db971617173e1b21a0
dangling blob 10e980a83644dab2ece20244837698ee50b6f823
dangling tag 61eb48fd6c81c40b1b29232b589f92e41734d3f4
dangling blob c913716dbc6651b87328289aab25340e0aadb8f3
dangling blob a414f19d695fbf64af81797a02a78d89f5537a6c
dangling blob 972539908d2b5f352a17ffff1870c89f870b5fe6
dangling commit 0f6b71242e4d49b3c47c9372eec400e38f480824
dangling tag e5ad513bb6f509f072fdf2a65acb3d1724d37d20
dangling blob 7ebfb1f1286c7e89647bb89cec2f600041474c44
dangling blob 4ce2f109be2c5de12c5d902b029c845b401ab813
dangling commit c9e3398b162a9a98f1c250ebc26974e961369192
dangling blob 0c23ba96d1be5f3fcac3c6d5b8977c6a07e19a89
dangling blob ac3cca70f44a0948be2c52024acda86789943320
dangling blob 434f9aa6b055bbb0069a2ae3bfa48c7a23f06794
dangling blob 9e567a4cb4fd493eaa163b88acec4873a3a58969
dangling blob 435f6a4b4456d2ec9b18155a7a348e4e2b6dbeae
dangling blob 4379ea6c75fdcca2eb6bd9858e01fd903f98a278
dangling blob e7873a34e1bf4a5ea0de7255d9b364081b3fa48d
dangling blob 8d8e6af8cbb360e5a33e36bcf48070e245d19490
dangling blob 6fa6f2cf2145f1108be5fc89c3b3c7e0494c82bb
dangling blob 19dafa14577dc7f15c25dd2e07de1fc861be77f3
dangling blob 7ae03af12390e4bb88c26d8c2a3bbd8037937f2f
dangling blob 9fe1aa411884fbbf33a456b9103e30fa819e316d
dangling blob 8ffd7a55ded446764f2bf2b8341bd5947cda8583
dangling blob 13008bf6146adf5d20ce63e62559c2db9c5ba122
dangling commit 3d2c5b7b3a09f3d21c5022e6e1491b9e10261b39
dangling blob 924463b9a67149fbf08bfe217c20a10b0ac69dbe
dangling commit 665733b438e268f691931647dfe1f418df16a72f
dangling blob 496f4b1d561962fa290f643bb27dba587bb9af55
dangling blob daa1e37be4d5ee34eac9d656c4da94f27a03a566
dangling blob 2ab37b0cfd90b4d3219d730162eb9b5cab4b24c2
dangling blob 7ccaebe839839a6024a33390509b7c8683714404
dangling blob 87d5a37c09593fe5633ff5228cd74af0f76f3581
dangling blob 681ab4995e851cb18cc6783db72e3856554b16ca
dangling blob d9748ca489073ebd1918a2da9fddcbbac8873611
dangling blob e980a417dc952b95c13adafdc7b06c1c8f8f4e53
dangling blob aa9394042e7e6f62598ca70d38033b4e92d5e498
dangling commit 71c92c28532148f98af0ba27ed06be7c59a2d343
dangling blob 4ff4f495f4d90329d0728500aafe1137ab26b8bf
dangling blob 162ebdcf785ba358ba9617f094e176754860dab5
dangling blob 39335522559ca3fb4e96f0eb8be81cb874d4ed6e
dangling blob 443b2d0c3faaf697dc3c4590d947b8f381232a76
dangling blob 79731d72367733730555b897d2f7d67c2fcd03bf
dangling blob ba77653bf80de6bea7b3f02befd4f7f13829fb58
dangling commit 2ed4751177d4a43e620759d512683cd26e3fa3cf
dangling blob 57d65d31d8ef4edd3159fa67e126eb2c5aed5225
dangling blob ca1166149c473a7e8dba419559af12cbea89f1fe
dangling blob 7f167ef137df333cba57323aab05abe3c6752926
dangling blob 631e1667578df65fe615c6027dd003fa4bed2df5
dangling blob 0dac3e4e4d3de589af4f425d24608f6cd80a7fb8
dangling blob 3ebcb673bcde734c71d07def507c5331280120c1
dangling blob 48c916ebf4d8c04eee55afe8cb651abf456f8240
dangling blob 71d4ae7368676e9d5067d9d7d14d7eab86bbcfd8
dangling blob 5bde4e96820d5eae42e6127315ffc1522d625a86
dangling blob d34e17b61d60eea42f6f35cee48dc3fef686a84a
dangling blob ed524fbf55d5fbf7eedb8c4c006f0c2133e191c0
dangling blob c95e472d07ebe4b2bce03c4c52821005786a00f0
dangling tree ff5fdfe988d1e286e3452c25abac2a725da42690
dangling blob ae8bbf993c674eabeee2ffea3628f691b8317955
dangling blob 06985761bb9deceb42098477e10d0ed64c03134b
</code></pre>
","1","94687","",""
"47584704","93212","2017-12-01 00:10:12","2","72","<git><git-reset><git-show>","How to get visual output when git reset modifies HEAD and Staging Index states?","<p>For educational purposes, I am looking for a method to visually demonstrate how a <code>git reset</code> modifies <code>HEAD</code> and the Staging index. In the case of <code>--mixed</code> and maybe <code>--hard</code> I would like to get a before and after view of the Staging Index, to show how it has been modified. The case of <code>--soft</code> should demonstrate that it remains the same.</p>

<p>I had been using <code>git status</code> to demonstrate the <code>git reset</code> processes and found it confusing to say ""the staging index is unchanged"" when <code>git status</code> shows pending updates in the ""Changes to be committed"" section. I came to learn that <code>git status</code> is not representative of the state of the Staging Index, but the diff between Head and the index.</p>

<p>I have been using the following example to demonstrate so far:</p>

<pre><code>git init .
touch reset_lifecycle_file
git add reset_lifecycle_file
git commit -am""initial commit""
echo 'hello git reset' &gt;&gt; reset_lifecycle_file
git commit -am""update content of reset_lifecycle_file""
git log
commit be4aaa98d6976531fdd28aeff52e233087066049
Author: kevzettler &lt;kevzettler@gmail.com&gt;
Date:   Thu Nov 30 15:31:16 2017 -0800

update content of reset_lifecycle_file

commit 5e2d74b369f57929673d873302eb7ebd752c2a95
Author: kevzettler &lt;kevzettler@gmail.com&gt;
Date:   Thu Nov 30 15:20:43 2017 -0800

initial commit

git status
On branch master
nothing to commit, working tree clean
</code></pre>

<p>At this point in the repos life if I execute a git reset to the first commit <code>5e2d74b369f57929673d873302eb7ebd752c2a95</code></p>

<pre><code>git reset --soft 5e2d74b369f57929673d873302eb7ebd752c2a95
git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

    modified:   reset_lifecycle_file
</code></pre>

<p>Here is where the confusion has stemmed from. I had been assuming the ""Changes to be committed"" output was reflective of the state of the index, and was then assuming the <code>--soft</code> had been modifying the Index which all Git documentation states does not happen.</p>

<p>I have recently discovered the <code>git show</code> and <code>git ls-files</code> commands. I am wondering if these can be better used to visualize the process here.</p>

<pre><code>git show --full-index commit 5e2d74b369f57929673d873302eb7ebd752c2a95
Author: kevzettler &lt;kevzettler@gmail.com&gt; Date: Thu Nov 30 15:20:43
2017 -0800

initial commit

diff --git a/reset_lifecycle_file b/reset_lifecycle_file new file mode
100644 index
0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
</code></pre>

<p><code>git show --full-index</code> appears to append some index Object SHA to the end of the output. Can I use that to indicate reset changes to the index?</p>

<pre><code>git ls-files -s
100644 d7d77c1b04b5edd5acfc85de0b592449e5303770 0   reset_lifecycle_file
</code></pre>

<p><code>git lis-files-s</code> has another Object SHA Can I use that to indicate changes to the index?
At this point in the example it differs from the SHA in the output from <code>git show</code> does that indicate the HEAD is at a new index SHA?</p>
","0","93212","",""
"51333283","1223975","2018-07-13 21:56:20","0","67","<git><github><git-reset>","git reset --soft to save face with big files","<p>So I accidentally pushed some big files to Github on master branch.</p>

<p>After I did that, I tried doing:</p>

<pre><code>git reset --soft HEAD~2
</code></pre>

<p>then I removed the big files, committed, then tried pushing to the remote master, but I get an error saying my local branch is missing commits from the remote master branch.</p>

<p>What should I do? Was there something I should have done instead other than using <code>git reset --soft</code>?</p>
","7","1223975","",""
"52674016","","2018-10-05 22:31:31","0","471","<git><git-reset>","Different between git reset --soft and git reset","<p>What is the difference between</p>

<pre><code>git reset --soft origin/dev
</code></pre>

<p>and</p>

<pre><code>git reset origin/dev
</code></pre>

<p>Hopefully it's not a big difference because I might have just screwed something up by accident.</p>
","2","","",""
"56762812","1732418","2019-06-25 22:28:48","2","326","<git><git-submodules><git-reset>","Why git reset --hard doesn't reset commit hash in submodules?","<p>I have project with 4 submodules, 2 of them are out of sychronisation:</p>

<pre><code>$ git submodule status
+ae633d13612e49a4d636ade1b20de7c306de9a40 devops-tools (heads/master)
 361fad5d187573d9bbb6aef67599f434c0bb7260 factorie (factorie_2.11-1.2-74-g361fad5d1)
 e702f2ffe7fa785acc97983500be6b6f995d5fa1 foundation (heads/master)
+69330f56f5db54c28a95752c7cc3a974af9cdd5e spookystuff (0.3.0-RC1-1167-g69330f56)
</code></pre>

<p>The little + indicates that these commit hashes are not staged, the synched commit hashes can be seen in the following message:</p>

<pre><code>$ git submodule summary
* devops-tools 2e576eb...ae633d1 (2):
  &gt; Additional tests for local and chained passports
  &gt; Add policy for github issue 278

* spookystuff feeec3e...69330f5 (3):
  &gt; fix an NPE caused by val overriding def ctg
  &gt; move 1 closure out of test body to avoid a NotSerialisable error
  &gt; fix a serialisation error merge process name &amp; command into a single condition Fixed a few test case due to parser injection Additional tests for local and chained passports fix 2 pattern matching errors caused by type erasure several refactorings that use more accurate names
</code></pre>

<p>I want to synchronise them, so I execute the following command:</p>

<pre><code>$ git add *
The following paths are ignored by one of your .gitignore files:
datapassports.iml
target
Use -f if you really want to add them.
$ git reset --hard
HEAD is now at e1d426df8 issue 284, ...

$ git submodule update --init --remote --recursive --force
Submodule path 'devops-tools': checked out 'ae633d13612e49a4d636ade1b20de7c306de9a40'
Submodule path 'factorie': checked out '361fad5d187573d9bbb6aef67599f434c0bb7260'
Submodule path 'foundation': checked out 'e702f2ffe7fa785acc97983500be6b6f995d5fa1'
Submodule path 'spookystuff': checked out '69330f56f5db54c28a95752c7cc3a974af9cdd5e'
</code></pre>

<p>but it appears that nothing changed, the command git reset --hard FAILED to set submodules to the correct hash: 2e576eb and feeec3e respectively. What's the purpose of this design and how to fix it?</p>
","2","1732418","0","0"
"56871180","7473854","2019-07-03 13:21:52","2","51","<git><git-reset>","Reverting git reset","<p>I was on a feature branch with changes committed but not pushed. I wanted to run the code as it existed a few weeks back so I ran <code>git reset --soft xxxxx</code>, followed by <code>git reset --hard</code>. I foolishly didn't consider that I had changes made. They were committed so they should at least be recoverable, right? I just need to know how to find the commit hash I guess. Any help?</p>
","4","7473854","",""
"4639091","78336","2011-01-09 12:25:28","236","94741","<git><git-reset>","Undo “git add <dir>”?","<p>I mistakenly added files using the command ""git add dir"". I have not yet run ""git commit"". Is there a way to remove this dir and everything contained within it from the commit?</p>

<p>I have tried <code>git reset dir</code>, but it didn't work. Apparently <code>git reset file</code> is the way to undo it. But I have so many files and so little time.</p>
","1","78336","0","0"
"73749285","16223913","2022-09-16 19:00:39","1","158","<git><git-reset><gitpython>","cannot do hard reset with gitpython","<p>I am using the following code using gitpython:</p>
<pre><code>g = git.cmd.Git(r'C:\Users\alex\Files\Repo\Scripts')
g.reset('--hard')
g.pull()
</code></pre>
<p>but I get the following error:</p>
<pre><code>GitCommandError: Cmd('git') failed due to: exit code(1)
  cmdline: git pull
  stdout: 'Updating c169660..ebe18ef'
  stderr: 'error: Your local changes to the following files would be overwritten by merge:
    Scripts/p_CBMAPPING.sql
Please commit your changes or stash them before you merge.
Aborting'
</code></pre>
<p>I essentially want to have the remote repo to override the local repo. This code actually works most of the time but every once in a while it gives me these errors. It is strange because I have not even touched these local files so not sure why it thinks there are changes here to be kept. Files in Remote repo, however, have changed. I want that change in remote to override local. How could I avoid this error in the future? Thanks</p>
","0","16223913","",""
"73753326","9884374","2022-09-17 08:27:28","2","51","<git><git-reset>","How to understand `in the way of writing any tracked files` in `git reset --hard`?","<p>In <code>git-reset</code>, the <code>hard</code> mode:</p>
<blockquote>
<p>--hard<br />
Resets the index and working tree. Any changes to tracked
files in the working tree since  are discarded.
Any untracked files or directories in the way of writing
any tracked files are simply deleted.</p>
</blockquote>
<p>How to understand <code>Any untracked files or directories in the way of writing any tracked files are simply deleted</code>?</p>
<p>I did a small experiment:
Create a <code>dummy</code> file</p>
<pre><code>touch dummy.html
git status -s
</code></pre>
<p>History as below:</p>
<pre><code>b3579f4 (HEAD -&gt; main) Revert &quot;Add a crazzzy experiment&quot;
622be1d Add a crazzzy experiment
</code></pre>
<p><code>git reset --hard 622be1d</code>, the <code>dummy</code> file is intact.</p>
<pre><code>➜  my-git-repo git:(main) ✗ git reset --hard 622be1d
HEAD is now at 622be1d Add a crazzzy experiment
➜  my-git-repo git:(main) ✗ git status -s
?? dummy.html
</code></pre>
<p><code>git reset --hard b3579f4</code>, the <code>dummy</code> file is untouched.</p>
<pre><code>➜  my-git-repo git:(main) ✗ git reset --hard b3579f4
HEAD is now at b3579f4 Revert &quot;Add a crazzzy experiment&quot;
➜  my-git-repo git:(main) ✗ git status -s
?? dummy.html
</code></pre>
<p>It looks like that <code>--hard</code> mode has no effect on the untracked file. So what's the meaning of <code>in the way of writing any tracked files</code>? How to simulate this kind of situation?</p>
","0","9884374","",""
"56959633","1182207","2019-07-09 19:48:56","-1","281","<git><git-reset>","What's the point of ""edit"" option in `git reset --patch""","<p>What is the use case of <code>git reset -p</code> and then using ""e"" option to edit an applied hunk before resetting it ? </p>

<p>I tried playing around with the command but all edits I tried were refused by git.</p>
","3","1182207","",""
"57009722","7911552","2019-07-12 15:11:20","0","193","<git><git-reset>","How to recover modified files with git checkout?","<p>I wanted to check if my new changes to code were compatible with existing database, thus I tried to create a new branch from <code>HEAD</code> of remote <code>ORIGIN</code>.</p>

<p>I ran exactly the following code :</p>

<pre><code>git checkout -b test origin/master
</code></pre>

<p>Till this time, my modified code was present in new branch. I know this because I saw similar output</p>

<pre><code>M filename1
M filename2
M filename3
M filename4
</code></pre>

<p>I wanted to roll back changes, to the previously pushed commit, hence ran this command</p>

<pre><code>git reset --hard HEAD
</code></pre>

<p>Running this command, reversed all the changes. I thought that happened only for this branch, but I was wrong. I did some changes to code in this branch (I edited only one file which was earlier modified in master branch)</p>

<p>I think this was where all went wrong, I checked out master branch using</p>

<pre><code>git checkout master
</code></pre>

<p>I see output similar to following</p>

<pre><code>M filename1
M filename2
</code></pre>

<p>This is where I realise all changes were lost. I have tried resetting the HEAD again but no progress.</p>

<p>Is there any way to recover those files, or I have to write all code again?</p>
","5","7911552","",""
"57043512","6071045","2019-07-15 16:06:15","0","51","<eclipse><egit><git-reset>","Egit: how to make a reset of a subfolder?","<p>I want to make in EGit the same operation performed by the ""Revert"" command in Subversive on a single folder.</p>

<p>Basically, the expected result is a ""reset --hard"" of the chosen folder, removing all not committed changes, without make it for the other folders of the project.</p>

<p>How can I do that?</p>
","0","6071045","",""
"57114543","1159763","2019-07-19 14:26:59","0","50","<git><git-reset>","git push won't push latest changes after I do a git reset","<p>I mistakenly did a <code>git reset --hard</code> on my repo thinking it behaved differently than it does, so then I did <code>git reflogs</code> and another <code>git reset</code> to restore the changes I accidentally deleted. Now my local repo is fine but for some reason when I push to the server, not all of my changes appear, even though I get a message saying that everything is up to date. How do I get these changes to the server? Right now I'm copying the entire repo with my changes into a brand new branch but there's got to be a better way...</p>
","3","1159763","",""
"73944546","19793331","2022-10-04 07:42:53","0","17","<git><git-merge><git-reset>","difference between git reset --hard and git reset --merge","<p>can anyone tell the difference, I know that</p>
<pre><code>--hard 
</code></pre>
<p>option reset all three trees and</p>
<pre><code>--merge 
</code></pre>
<p>option is &quot;safer&quot;. but I tried it, and lost uncommitted changes anyway. Can you provide some detailed examples, that shows advantages of</p>
<pre><code>git reset --merge
</code></pre>
<p>this explanation doc from git-scm, doesn't make sense to me)</p>
<p>--merge
Resets the index and updates the files in the working tree that are different between  and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). If a file that is different between  and the index has unstaged changes, reset is aborted.</p>
","1","19793331","",""
"57190978","3181048","2019-07-24 20:45:20","1","1863","<git><git-reset>","If I git reset --hard on my local machine, will the repo on github also be resetted?","<p>There are 2 commits:</p>

<ul>
<li><p>commit 1: local (did not push to github),  branch ""testing"", committed roughly 3 minutes ago, features files last edited 5 days ago</p></li>
<li><p>commit 2: online in my github repo (pushed to testing roughly 2.5 hours ago), branch ""testing"", committed roughly 3 hours ago, features files last edited 3 hours ago</p></li>
</ul>

<p>I just pulled the more recent and up-to-date files from the online repo and basically merged them into my local files. But I'd like to <a href=""https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch"">revert that merge</a> and see how the changes in commit 1 could still be used ... (with git diff I guess?).</p>

<p>So if I do a hard reset, would that also have an effect on the files in the online repo?</p>
","1","3181048","",""
"74061119","20234702","2022-10-13 19:55:07","1","33","<git><github><commit><git-reset>","Is there a way to recover removed git commits when local repository is not available?","<p>I directly committed some changes to my GitHub repo remotely (inside the GitHub website). I then cloned this repo and did <code>git reset --hard HEAD~3</code> and <code>git push -f</code> to go back to previous commits and after doing this I removed the cloned (local) repository. It basically removed the first 3rd commits from my GitHub repository commit history. Now I am trying to recover the lost commits but I do not know if this is possible when the local repository is deleted?</p>
","4","20234702","",""
"74589985","14663679","2022-11-27 12:23:51","1","77","<git><rebase><git-reset>","git reset --hard results in a diverged branch","<p>I'm working on a branch called Feature.</p>
<ul>
<li>I pushed an empty commit 'New' <strong>(Commit 1)</strong> to indicate the creation of my branch (this is the standard in my company).</li>
<li>I then edited an important file and pushed it in a second commit <strong>(Commit 2)</strong>. I realized afterwards that my modification actually resulted in an unknown bug.</li>
<li>I ran a <code>reset --hard</code> to go back to the previous, clean commit <em>(Commit 1)</em>.</li>
<li>I then re-made my modifications in a clean way and made sure it wouldn't cause any bugs. I pushed my modifications in a third commit <strong>(Commit 3)</strong>.</li>
</ul>
<p>Now when I run <code>git status</code>, it tells me my branch Feature and origin/Feature have diverged and each have one commit. I'm guessing I'm going to have to <code>rebase</code> my branch.</p>
<p>My question is: how am I supposed to go about my commits after a <code>git reset</code> to make sure I don't have a commit 'behind' that eventually results in a branch divergence? How do you keep on committing and pushing after a <code>git reset</code>? Did I miss a step?</p>
<p>My company uses TortoiseGit, so all commands are run through a graphic interface.</p>
<p><a href=""https://i.stack.imgur.com/bdoqp.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bdoqp.png"" alt=""enter image description here"" /></a></p>
","6","14663679","",""
"74613798","4822666","2022-11-29 12:04:08","-2","169","<git><git-reset>","How do reset/revert a git reset HEAD~","<p>By mistake I did a <code>git reset HEAD~</code> in my branch. I see all my changed files on my local. I don't want to change anything. The branch is good as is.</p>
<p>What do I have to do?</p>
","4","4822666","",""
"74788643","16615864","2022-12-13 17:20:58","-1","55","<git><github><git-reset>","git reset --hard HEAD^ removed data from local drive","<p>I copied a project and edited it to create a new project. I made a lot of changes. After 3 months, I tried to push to the repository.</p>
<ol>
<li><p>Pushed to the older repository. (All code was fine and complete.)</p>
</li>
<li><p><code>git reset --hard HEAD^</code> <code>git push origin -f</code> these were implemented to the older repository. (It removed the last commit from GitHub but I didn’t noticed it removed from local as well.)</p>
</li>
<li><p>Deleted .git folder. Then created new repository and pushed code to that new repository.</p>
</li>
</ol>
<p>As I said I didn’t noticed local data was also changed. That changed data was pushed to the new repository.</p>
<p>I lost my important data of 3 months.</p>
<p>Alot of blogs and answers suggested to use</p>
<pre><code>git reflog show
</code></pre>
<p>as git was removed from project and new repository was linked.
The older repository was cloned and implemented this command but didn’t showed any changes or HEADs.</p>
<pre><code>git fsck --lost-found
</code></pre>
<p>I tried this one as well but didn’t worked.</p>
<p>.git folder deleted from the older project was also removed from trash.</p>
","5","16615864","",""
"74909453","3416774","2022-12-24 18:02:15","0","70","<git><git-reset>","What makes `git reset --hard` not getting me back to the last commit?","<p>Starting from commit A, I did some changes on the files. Before a mass renaming*, I did commit B. After that I wanted to redo it again so I did <code>git reset --hard</code>. I expected it to be exactly what I got when I just committed B. The folders with old name are retrieved with their files, which is expected. But:</p>
<ul>
<li>The files aren't changed like when I did B</li>
<li>All folders with new name I created when mass renaming aren't deleted. They are all empty</li>
</ul>
<p><code>git log</code> shows that the HEAD is on commit B. Do you know what happens?</p>
<sub>
<p>*The PowerShell command I use is:</p>
<pre><code>ls -recurse | Where-Object {$_.name -match '[\d.*]'} | Rename-Item -newnam { $_.Name -replace '\d(.*)', '4$1' }
</code></pre>
</sub>
","6","3416774","",""
"75010603","234593","2023-01-04 19:52:57","0","31","<git><git-remote><git-reset>","How to move (i.e. reset) a local git upstream tracking branch? e.g. to ""undo"" a `git fetch origin main`","<p>AFAIK the only git command to manipulate upstream tracking branches is <code>git fetch</code> (and <a href=""https://stackoverflow.com/questions/72145463/when-would-git-move-remote-tracking-branches-automatically-without-git-fetch"">other commands that trigger a fetch</a>), but they only really allow a &quot;fast forward&quot; operation against the remote branch.</p>
<p>I would like to have more control and be able to &quot;reset&quot; it like any other local branch, without affecting remote. I <em>think</em> one way is to modify the file at <code>.git/refs/remotes/origin/&lt;branchname&gt;</code> to point to a different SHA, but is that correct/safe?</p>
<h3>Why: to decouple multiple ongoing branches/workstreams</h3>
<p>Let's say I've got:</p>
<pre><code>* (HEAD -&gt; kache/foo, origin/kache/foo) done, ready to push
| * (kache/bar) almost done, commits are atomic
|/
| * (kache/baz) still wip, commits are a mess
|/
* (main, origin/main)
</code></pre>
<p>I discover that <code>foo</code> needs a fresh <code>main</code> (for w/e reason), so I fetch <code>origin/main</code>, rebase <code>foo</code> on top, and then get it merged.</p>
<p>But now, <code>main</code> is far behind <code>origin/main</code>. Before I context switch, getting back a &quot;clean slate&quot; means forwarding <code>main</code> to <code>origin/main</code> and rebasing all branches on top. Should rebase conflicts arise, <code>bar</code> will be easy to fix, but <code>baz</code> won't.</p>
<p>I generally have many local dev branches and working on a single one (<code>foo</code>) has caused a workflow interruption on every other branch. In addition, the more &quot;wip&quot; like <code>baz</code> there are, the worse the mass-rebase overhead will be.</p>
<p>I've already tried/got various &quot;<a href=""https://stackoverflow.com/questions/17315285/rebasing-a-tree-a-commit-branch-and-all-its-children"">rebasing a tree</a>&quot; solutions. I'll keep trying, but solving the general-case means being resilient against (multiple) rebase conflicts, being abort-able (atomic), retryable (recorded resolutions), etc, and AFAIK a general-case turnkey solution doesn't exist.</p>
<p>In this situation, I'd like to just reset <code>origin/main</code> back to <code>main</code>. Once <code>foo</code> is merged, I can delete my local <code>foo</code>, reset my <code>origin/main</code>, and immediately context-switch to <code>bar</code> or <code>baz</code>. Unlike a mass-rebase, it would be fast and would always work. I'd be able to fetch <code>main</code> and mass-rebase later when it's convenient, decoupling my <code>foo</code> workstream from every other.</p>
","5","234593","",""
"75081926","6657003","2023-01-11 10:55:17","-1","218","<git><git-rebase><git-reset><git-revert>","Undo git pull --rebase","<p>Sorry for bothering everyone! Please help.</p>
<p>I wrongly used the <code>git rebase --hard</code> and overwrite all local files. Then I use <code>git reflog</code> and <code>git reset --hard</code> but did not find the former version! I searched for many <a href=""https://stackoverflow.com/questions/134882/undoing-a-git-rebase"">questions</a> but it seems that they only deal with <code>git rebase</code> without <code>--hard</code>.</p>
<p>How could I find the deleted files! Thanks!</p>
<hr />
<p>I checked again and found that I used <code>git pull --rebase</code>. Sorry for misunderstanding.</p>
<hr />
<p>Command sequences:
<code>git stash</code>  -&gt; <code>git pull --rebase</code>  -&gt; <code>git reset --hard with id</code> (failed) -&gt; <code>git stash apply</code> (succeed)</p>
","6","6657003","",""
"75651016","21342190","2023-03-06 12:45:09","0","37","<git><github><git-commit><git-reset>","I have accidentally unstaged all the changes in my branch using git reset. How to revert it?","<p>I used git reset without any arguments and even after I committed all the changes after, the changes are still unstaged. How to revert it?</p>
<p>I have made many changes and committed and pushed them to the remote branch. But everytime I try to merge the branch to another branch, I can see the changes are still unstaged.</p>
<p>I was just trying to go back one commit</p>
","4","21342190","",""
"75687678","17928656","2023-03-09 16:53:11","0","23","<git-reset><git-head>","Difference between ""git reset HEAD <filename>"" and ""git reset -- <filename>""?","<p>When I stage a file, &quot;<strong>git status</strong>&quot; then mentions that, to UNstage that file, I can do &quot;<strong>git reset HEAD <em>filename</em></strong>&quot;.  But I have also seen instances in which the recommended command is &quot;<strong>git reset -- <em>filename</em></strong>&quot;.</p>
<p>Sorry, I do not remember the superficial differences between when I have seen &quot;--&quot; recommended instead of &quot;HEAD&quot; but I just now ran a test, in which I attempted to UNstage a file 2 separate times: once using &quot;HEAD&quot; and once using &quot;--&quot;, and I cannot see the difference in the results.</p>
<p>(Unless it's absolutely necessary, in order to give me a truly accurate answer, I'm not interested in subtleties about the differences between &quot;HEAD~&quot; and &quot;HEAD~1&quot;; etc; etc. --because I seem to rarely-or-never see those subtleties mentioned in the automatic recommendations that pop up.)</p>
<p>Thanks.</p>
","7","17928656","",""
"75973020","17801533","2023-04-09 21:42:52","0","49","<git><git-branch><git-reset>","git reset HEAD~1 vs git branch -f mainline HEAD~1","<p>Assuming, current branch is mainline. mainline and HEAD pointer are pointing to the latest commit.</p>
<pre><code>git reset HEAD~1
git branch -f mainline HEAD~1 
</code></pre>
<p>To the best of my understanding both the commands will :</p>
<p>bring mainline pointer to a previous commit along with HEAD pointer</p>
<p>Which one should we use from the above two and why?</p>
<p>Edit : As pointed in comments current branch cannot be the same for using the git branch -f mainline HEAD ~1 command.</p>
","2","17801533","",""
"25553175","2541573","2014-08-28 15:59:06","19","1750","<git><git-reset>","What are typical use cases of git-reset's --merge and --keep flags?","<p>In a <a href=""https://stackoverflow.com/a/25479271/2541573"">recent answer</a> in which he details the typical use cases of <code>git-reset</code>'s three most commonly used options (<code>--hard</code>, <code>--mixed</code>, and <code>--soft</code>), <a href=""https://stackoverflow.com/users/1256452/torek"">torek</a> mentions  in passing that <code>git-reset</code> also offers two relatively esoteric flags, called <code>--merge</code> and <code>--keep</code>. The <a href=""http://git-scm.com/docs/git-reset"" rel=""nofollow noreferrer""><code>git-reset</code> man page</a> describes those two flags as follows:</p>
<blockquote>
<pre><code>--merge
           
   Resets the index and updates the files in the working tree
   that are different between &lt;commit&gt; and HEAD, but keeps
   those which are different between the index and working tree
   (i.e. which have changes which have not been added). If a
   file that is different between &lt;commit&gt; and the index has
   unstaged changes, reset is aborted.

   In other words, --merge does something like a git read-tree
   -u -m &lt;commit&gt;, but carries forward unmerged index entries.

--keep
    Resets index entries and updates files in the working tree
    that are different between &lt;commit&gt; and HEAD. If a file that
    is different between &lt;commit&gt; and HEAD has local changes,
    reset is aborted.
</code></pre>
</blockquote>
<p>I perfectly understand when to use <code>--hard</code>, <code>--mixed</code>, or <code>--soft</code>, but I only learned that <code>--merge</code> and <code>--keep</code> existed while reading torek's answer, and I can't think of practical use cases of those two flags... In what situations do you typically use those two flags?</p>
<p>I'm mainly looking for a plain-English explanation. Take the following passage of <a href=""https://stackoverflow.com/questions/5203535/practical-uses-of-git-reset-soft/5203843#5203843"">this answer by VonC</a>, which spells out a typical use case for <code>git reset --soft</code>, as a model:</p>
<blockquote>
<p>[...] each time:</p>
<ul>
<li>you are satisfied with what you end up with (in term of working tree and index)</li>
<li>you are not satisfied with all the commits that took you to get there:</li>
</ul>
<p><code>git reset --soft</code> is the answer.</p>
</blockquote>
<p>However, I'm not averse to a little experiment with those flags, similar in spirit to the silly shopping-list example I posted in <a href=""https://stackoverflow.com/a/25535829/2541573"">this answer of mine</a>.</p>
","0","2541573","0","0"
"7374069","762896","2011-09-10 19:28:59","130","71812","<git><undo><git-commit><git-reset><git-add>","Undo git reset --hard with uncommitted files in the staging area","<p>I am trying to recover my work. I stupidly did <code>git reset --hard</code>, but before that I've done only <code>get add .</code> and didn't do <code>git commit</code>. Please help! Here is my log:</p>

<pre><code>MacBookPro:api user$ git status
# On branch master
# Changes to be committed:
#   (use ""git reset HEAD &lt;file&gt;..."" to unstage)

#   modified:   .gitignore
...


MacBookPro:api user$ git reset --hard
HEAD is now at ff546fa added new strucuture for api
</code></pre>

<p>Is it possible to undo <code>git reset --hard</code> in this situation?</p>
","6","762896","0","0"
"9529078","1241571","2012-03-02 06:36:06","1221","4225799","<git><head><git-reset><git-revert>","How do I use 'git reset --hard HEAD' to revert to a previous commit?","<p>I know that Git tracks changes I make to my application, and holds on to them until I commit the changes.</p>
<p>To revert to a previous commit, I used:</p>
<pre><code>$ git reset --hard HEAD

HEAD is now at 820f417 micro
</code></pre>
<p>How do I then revert the files on my hard drive back to that previous commit?</p>
<p>My next steps were:</p>
<pre><code>git add .
git commit -m &quot;revert&quot;
</code></pre>
<p>But none of the files have changed on my hard drive...</p>
","3","1241571","0","0"
"27431440","1569930","2014-12-11 20:04:32","5","5297","<git><git-stash><git-reset>","Undo git reset --hard after git stash pop","<p>I had some changes in the stash that I attempted to recover using <code>git stash pop</code>. There were some merge conflicts, and rather than resolving them, I decided to just reset it. Unfortunately, in a moment of stupidity, I did a <code>git reset --hard</code>, and now all of the previously stashed changes are gone.</p>

<p>Is there any way to recover these changes? I've tried <code>git fsck --cache --no-reflogs --lost-found --unreachable  HEAD</code>, but none of the commit hashes listed refer to the changes I need. What else can I do? or did I just lose all of that work?</p>
","1","1569930","",""
"45718529","2332204","2017-08-16 16:16:35","1","66","<git><git-merge><git-reset>","Fixing a merge commit in git","<p>I messed up. I merged other branch to my branch. Changes on both sides were substantial so I spent extremely long time resolving conflicts. After committing the merge, I realized I had forgotten to add one file, so the merge was committed incomplete. I didn't want to pollute the history with a ""forgotten changes"" commit so I decided to fix it before pushing. I called</p>

<pre><code>git reset --soft HEAD~
</code></pre>

<p>Then I added the missed change and wanted to re-commit. However, git no longer knows it should be a merge commit. Is there any way out without re-doing the entire merge?</p>
","0","2332204","",""
"63760498","9250490","2020-09-06 03:40:46","0","33","<git><git-reset>","How to restore my last amended commit from `git reset --hard`?","<p>Fortunately, I executed <code>amend previous commit</code> before accidently executed</p>
<p><code>git reset origin/myBranch --hard</code>.</p>
<p>How can I restore my last amended commit?</p>
","2","9250490","",""
"64481406","9538253","2020-10-22 11:36:31","0","53","<git><github><git-bash><git-remote><git-reset>","Reset remote to specific commit in github (can't reset local and force push because of a large file)","<p>I want to reset a Github repo to a specific commit. The simplest way to do this is to reset local first and force push it to the remote. But there are large files in the project. So it's uploading all files again when force pushing. Is there any way to reset the remote by not force pushing local?</p>
","1","9538253","",""
"28617950","3205133","2015-02-19 22:08:13","1","590","<git><git-rebase><undo><git-reset><git-revert>","Undo git add, commit and push WITHOUT losing untracked files","<p>I accidentally added, committed, and pushed all my untracked files to a remote repo where they would be annoying to my collaborators.  </p>

<p>Since then, I also made another two commits, one of which was merging with the remote via git pull.</p>

<p>I want to undo this sequence of actions and restore my directory to its prior state (INCLUDING the untracked files).</p>

<p>With all the commands I've tried (checkout, revert, reset, rebase), my untracked files are lost as a result of undoing commits.  </p>

<p>What should I do?</p>
","0","3205133","",""
"28626006","361089","2015-02-20 09:52:07","0","78","<git><git-merge><git-reset>","Identifying user who ran “git reset” command","<p>I came across a problem recently. One of the developers committed some changes in a branch. When he checked the branch log (<code>git checkout branch; git log</code>), the commit (say, <em>abc</em>) was showing up but when he checked the log for a file (<code>git log &lt;file_name&gt;</code>), which was part of the given commit (<em>abc</em>), the associated commit (<em>abc</em>) was not showing up; instead, an older commit id (say, <em>xyz</em>) was there.</p>

<p>When the issue came to my notice, I tried using <code>git log --follow &lt;file_name&gt;</code> to check complete history of a file just to make sure whether the file was renamed to its current name. The output of <code>git log --follow &lt;file_name&gt;</code> was actually showing the commit id (<em>abc</em>) that was missing in the output of <code>git log &lt;file_name&gt;</code> command. On asking developer whether the file was renamed, i came to know that <em>no</em> renames were done ever for that file. This was confusing and i was stuck because i was not able to figure out what happened. Later, it turned out that another developer while pushing his code encountered merge conflict and instead of resolving it, he simply did a <code>git reset .</code> and the HEAD got shifted.</p>

<p>Q.1) Is there any way i could have figured out about the <code>git reset</code> command that the other developer executed on his machine? FYI, i have admin access to Git.</p>

<p>Q.2) Is there any way we can control such things from happening in future? I’m not sure whether this can be controlled using hook because this is not a ‘push’ command. It's something that's being done just before push. Please correct me if I’m mistaken. The biggest problem that I see here is that every developer has the rights to commit, which I feel is not right. I feel, even restricting it cannot be foolproof but it can certainly bring down such occurrences significantly. Any suggestions? </p>
","2","361089","",""
"65773009","8825683","2021-01-18 10:45:41","1","882","<git><git-commit><git-reset>","Is there a way for git to dump committed changes to the working tree?","<p>I committed some changes which contained a change that I didn't want to commit, so I wanted to remove that commit but keep the staged and unstaged changes that were committed so that I could delete the unwanted change before committing. I used <code>git reset --hard &lt;hash&gt;</code> but it reverted to the commit at HEAD - 1 which not only removed the commit but also removed all staged and unstaged changes before the commit.</p>
<p>Is there any way to reset to a commit but to dump all committed changes (back) to the working tree instead of deleting every change recorded in that commit? In other words, how can I return all committed changes to the working tree?</p>
","6","8825683","",""
"29014538","316408","2015-03-12 15:58:34","1","67","<git><git-reset>","Unstaged files lost after git reset --hard HEAD^ without having run git add - can I get them back?","<p>I did:</p>

<pre><code>git reset --hard HEAD^
</code></pre>

<p>I did not do:</p>

<pre><code>git add .
</code></pre>

<p>before thus my work was only in my <em>working directory</em> and not on the branch <em>index</em>, are my changes lost? Can I get them back?</p>

<p><strong>Edit:</strong></p>

<p>All files were modified and had been tracked by <code>git</code> but were just not staged on <em>index</em>.</p>
","1","316408","",""
"66137796","63898","2021-02-10 13:27:19","2","1792","<git><revert><git-reset>","How to revert / cancel git reset --soft HEAD~20","<p>i wanted to squash few commits and i followed <a href=""https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git"">this</a>
so i did :</p>
<pre><code>git reset --soft HEAD~20
git commit
git push -f
</code></pre>
<p>I don't know why but now my branch full of merging which wasn't before
i want to revert the git reset --soft HEAD~20 command
how can it be done?
Thanks!!</p>
<p><strong>UPDATE</strong><br />
i did :
git reset &lt; commit hash before the reset: moving to HEAD~20 &gt;
then<br />
git push
and im getting :</p>
<pre><code>error: failed to push some refs to 'https://xxxx@bitbucket.org/xxxx/xxxx.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>
","9","63898","",""
"66138532","63898","2021-02-10 14:11:49","-1","77","<git><git-reset>","When doing git reset --soft HEAD~60 to sqaush commits is removes merges that have been done, how to avoid?","<p>I followed the post on how to do squash commits from <a href=""https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git"">here</a>
so I did :</p>
<pre><code>git reset --soft HEAD~20
git commit
git push -f
</code></pre>
<p>I have a lot of commits and between them, I have few merges I did from the develop branch to my feature branch to update my branch with changes for example :</p>
<pre><code>commit (merge): Merge remote-tracking branch 'origin/develop' into feature/my_coo_branch
</code></pre>
<p>after doing the <code>git reset --soft HEAD~20</code> command I found out that all the merges disappeared from my branch.<br />
why? and how can I avoid it?</p>
","11","63898","",""
"66153340","7344261","2021-02-11 10:54:21","0","1704","<git><git-reset>","How to recover code after 'git push --set-upstream origin master'","<p>I was trying to push my code to a new repo but in typical git fashion, it's easy as rocket surgery to learn and implodes your code if you don't know every detail. Ok so I did something and now most of my code is gone so how do I undelete my code or get it back?</p>
<p>So how can I undo an error on bash git?</p>
<p>Why isn't there a &quot;git undo&quot; ?</p>
<p>What I typed in ( by accident ) was &quot;git push --set-upstream origin master&quot; now my code is wiped out. Well I am hoping its still in a folder but not shown for whatever 'because git' reason.</p>
<p>I've tried for three years to understand git and it still 90% gibberish to me.</p>
<p>'git reflog' is what google search is showing but it just shows me this info.</p>
<pre><code>f668709 (HEAD, origin/master) HEAD@{0}: rebase: checkout origin/master
5061c5e (master) HEAD@{1}: commit (initial): first new commit
</code></pre>
","3","7344261","",""
"26675555","3539933","2014-10-31 13:12:35","1","108","<git><git-reset>","git reset --hard when used with git-dir option checks out files in the current directory","<pre><code>[root@localhost ~]# pwd
/root
[root@localhost ~]# ls
labs  logs  ovpl
[root@localhost ~]# git --git-dir=/root/labs/cse02-programming/.git reset --hard
HEAD is now at 935ca9d apt-get update added to labspec
[root@localhost ~]# ls -l
total 28
drwxr-xr-x 4 root    root    4096 Oct 30 12:54 labs
drwxr-xr-x 2 root    root    4096 Oct 31 17:37 logs
drwxrwxr-x 3 travula travula 4096 Oct 30 12:53 ovpl
drwxr-xr-x 2 root    root    4096 Oct 31 18:37 python-scripts
-rw-r--r-- 1 root    root    2143 Oct 31 18:37 README.txt
drwxr-xr-x 2 root    root    4096 Oct 31 18:37 scripts
drwxr-xr-x 6 root    root    4096 Oct 31 18:37 src
[root@localhost ~]# 
</code></pre>

<p>The problem is: The repository is checked out in the current working directory, as you can see python-scripts, scripts, src and README.txt have beed added here.</p>

<p>How can I force this checkout in the /root/labs/cse02-programming itselff?</p>
","1","3539933","",""
"8973775","850868","2012-01-23 15:10:05","0","166","<git><git-reset>","git reset commit and push issue","<p>Recently it happened in my team that a fresher tried to do a git pull. Some conflicts appeared on the system after which the developer simply did a git reset (bringing the index to last HEAD). Then the developer ""committed"" one file change and pushed it to remote. Naturally quite a lot of changes were lost.</p>

<p>However it took us quite some time to figure out who did the bad change (and which commit was bad commit) and recovering it was a whole lot of different effort. Now in the git history (using gitk or git log) git only shows what files have been committed but this is case of overwriting previous files (I know this concept is more of CVS not git in which case files have been moved to a previous commit). What is the best strategy to debug in this case?</p>

<p>Once we know which branch is offending one, once I do a git diff between good and bad commit I can see list of files but looking at the particular commit only, can we find out what files have been moved to a previous commit.</p>

<p>Apologies if the problem is not entirely clarified.</p>
","0","850868","",""
"20268844","417629","2013-11-28 14:39:29","0","84","<wordpress><git><git-submodules><git-checkout><git-reset>","How do I git out of this mess with a git submodule?","<p>I've got a git repo with Wordpress as a submodule. I was trying to update Wordpress and really screwed things up. I just want to get all of the code from the 3.7.1 tag in the remote repository, but this doesn't work;</p>

<pre><code>git fetch --tags
git checkout 3.7.1
</code></pre>

<p>Leaves a bunch of either ""untracked files"" or ""uncommitted changes"". I don't know what I'm doing wrong. I've tried so many things to get this submodule onto the 3.7.1 tag and nothing seems to work. If anything, I feel like I'm just making the problem worse. It shouldn't be that hard to just reset the code from the tag I want and discard everything else. Any help?</p>
","0","417629","",""
"39596545","6504317","2016-09-20 14:16:49","0","2105","<git><git-reset>","How can I reset hard all branches in git","<p>How do I reset my all local branches, one time to be just like the branches in the remote repository?</p>

<p>I have 42 branches in my local repository, but I have just 21 branches in my remote repository. I don't need the other branches, I just need the 21 branches (with same name in local and remote).</p>

<p>I know </p>

<pre><code>git fetch origin 
git reset --hard origin/master
</code></pre>

<p>but I want all 21 branches to together reset hard to the state in origin, and all other branches deleted that are not in origin.</p>
","1","6504317","0","0"
"39708055","2012870","2016-09-26 16:39:03","-1","130","<git><git-reset>","Why are my local changes not being removed by git reset?","<p>I have a git repository that for some reason is showing local changes I cannot revert. From a freshly cloned repo I see one configuration file changes with the following diff from git diff</p>

<pre><code>C:\Projects\NewUI&gt;git diff
diff --git a/EPFR.CountryFlows.Tests/app.config b/EPFR.CountryFlows.Tests/app.config
index d7256aa..7e1d79c 100644
--- a/EPFR.CountryFlows.Tests/app.config
+++ b/EPFR.CountryFlows.Tests/app.config
@@ -1,11 +1,17 @@
 &lt;U+FEFF&gt;&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
 &lt;configuration&gt;
-  &lt;runtime&gt;
-    &lt;assemblyBinding xmlns=""urn:schemas-microsoft-com:asm.v1""&gt;
-      &lt;dependentAssembly&gt;
-        &lt;assemblyIdentity name=""System.Web.Mvc"" publicKeyToken=""31bf3856ad364e35"" culture=""neutral"" /&gt;
-        &lt;bindingRedirect oldVersion=""0.0.0.0-5.2.3.0"" newVersion=""5.2.3.0"" /&gt;
-      &lt;/dependentAssembly&gt;
-    &lt;/assemblyBinding&gt;
-  &lt;/runtime&gt;
+  &lt;configSections&gt;
+    &lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;
+    &lt;section name=""entityFramework"" type=""System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" requirePermission=""false"" /&gt;
+  &lt;/configSections&gt;
+  &lt;entityFramework&gt;
+    &lt;defaultConnectionFactory type=""System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework""&gt;
+      &lt;parameters&gt;
+        &lt;parameter value=""mssqllocaldb"" /&gt;
+      &lt;/parameters&gt;
+    &lt;/defaultConnectionFactory&gt;
+    &lt;providers&gt;
+      &lt;provider invariantName=""System.Data.SqlClient"" type=""System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"" /&gt;
+    &lt;/providers&gt;
+  &lt;/entityFramework&gt;
 &lt;/configuration&gt;
\ No newline at end of file
</code></pre>

<p>when I run <code>git reset</code> or <code>git checkout</code>, nothing changes. If I <code>run git reset --hard</code> I get the following results</p>

<pre><code>C:\Projects\NewUI&gt;git diff
diff --git a/EPFR.CountryFlows.Tests/App.config b/EPFR.CountryFlows.Tests/App.config
index 7e1d79c..d7256aa 100644
--- a/EPFR.CountryFlows.Tests/App.config
+++ b/EPFR.CountryFlows.Tests/App.config
@@ -1,17 +1,11 @@
 &lt;U+FEFF&gt;&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
 &lt;configuration&gt;
-  &lt;configSections&gt;
-    &lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;
-    &lt;section name=""entityFramework"" type=""System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" requirePermission=""false"" /&gt;
-  &lt;/configSections&gt;
-  &lt;entityFramework&gt;
-    &lt;defaultConnectionFactory type=""System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework""&gt;
-      &lt;parameters&gt;
-        &lt;parameter value=""mssqllocaldb"" /&gt;
-      &lt;/parameters&gt;
-    &lt;/defaultConnectionFactory&gt;
-    &lt;providers&gt;
-      &lt;provider invariantName=""System.Data.SqlClient"" type=""System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"" /&gt;
-    &lt;/providers&gt;
-  &lt;/entityFramework&gt;
+  &lt;runtime&gt;
+    &lt;assemblyBinding xmlns=""urn:schemas-microsoft-com:asm.v1""&gt;
+      &lt;dependentAssembly&gt;
+        &lt;assemblyIdentity name=""System.Web.Mvc"" publicKeyToken=""31bf3856ad364e35"" culture=""neutral"" /&gt;
+        &lt;bindingRedirect oldVersion=""0.0.0.0-5.2.3.0"" newVersion=""5.2.3.0"" /&gt;
+      &lt;/dependentAssembly&gt;
+    &lt;/assemblyBinding&gt;
+  &lt;/runtime&gt;
 &lt;/configuration&gt;
\ No newline at end of file
</code></pre>

<p>Which are showing that the added lines, and the deleted lines have switched. Running <code>git reset --hard</code> will cause these two sections of code to switch back and forth between being added and being removed. What am I doing incorrectly?</p>
","1","2012870","",""
"58614642","2539135","2019-10-29 20:06:57","0","960","<git><git-commit><git-reset><git-revert>","Reversing the git to the previous commit","<p>I have done something 20 commits before which are now breaking my code because of incompatibility issue and now I want to revert back it to that commit. 
I am stuck in </p>

<blockquote>
  <p>reset and revert </p>
</blockquote>

<p>command. Can anybody please tell me how I can revert back it to the old commit. I have pushed all my changes to master branch as I was working only on one branch. </p>
","3","2539135","",""
"20956947","906658","2014-01-06 18:42:25","2","2291","<git><git-reset><git-add>","How to abort git add -p discarding changes?","<p>I ran <code>git add</code> on some files, constituting a logical separate set of changes, made other changes to them and extracted another logical set of changes using <code>git add -p</code>. Half way through, I realize that I have not committed the previous set, yet.</p>

<p>The interactive help of <code>git add -p</code> only gives the following options:</p>

<pre><code>Stage this hunk [y,n,q,a,d,/,s,e,?]? ?
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
</code></pre>

<p>How can I reset the added patches?</p>
","0","906658","",""
"21038045","3069143","2014-01-10 06:59:38","47","32568","<git><git-commit><git-reset>","How to undo git reset --soft to get my changes back?","<p>I had some local changes in my directory that I committed using git commit. Later I realized that by mistake my changes broke my build. So I did a <code>git reset --soft</code> on my repo.
But I screwed up, as I did not back up the changes that were all undone, as some of them did contain the new functionality that I wanted. Any help on how to undo a <code>git reset --soft</code> operation so that I can get my committed changes back.</p>
","3","3069143","0","0"
"2540505","9951","2010-03-29 19:00:53","23","10861","<git><git-reset>","How to go back to the last commit in the history after I used git reset to go to an older changeset?","<p>Suppose my history goes that way :</p>

<p>A - B - C - D (master)</p>

<p>If I do <code>git reset B</code>, I'll got :</p>

<p>A - B (master)</p>

<p>Trouble is, <code>git log</code> now show me only the history from A to B, and I can't see C and D anymore.</p>

<p>How can I go back to D ?</p>
","0","9951","0","0"
"2541545","9951","2010-03-29 21:55:02","47","19709","<git><git-checkout><git-reset>","Is there a difference between ""git reset --hard hash"" and ""git checkout hash""?","<p>While <code>reset</code> and <code>checkout</code> have different usages most of the time, I can't see what difference there is between these two.</p>

<p>There probably is one or nobody would have bothered adding a <code>--hard</code> option to do something the basic <code>checkout</code> can do.</p>

<p>Maybe there is a difference is the way you will see the history?</p>
","5","9951","0","0"
"19961041","656334","2013-11-13 17:59:44","5","1033","<git><git-reset>","Generic git reset to default upstream HEAD","<p>Is there a syntax to reset to the current branch's default upstream HEAD?</p>

<p>Something like:</p>

<pre><code>git checkout mybranch
git reset --hard origin/mybranch
</code></pre>

<p>where <code>origin/mybranch</code> can be generic for the current branch's upstream HEAD?</p>
","0","656334","0","0"
"58003030","2620022","2019-09-19 02:48:31","219","223866","<git><restore><git-reset><unstage>","What is the `git restore` command and what is the difference between `git restore` and `git reset`?","<p>When I want to unstage a staged file, all of my Git tutorials show something like:</p>
<pre><code>$ git add *
$ git status
On branch master
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

    renamed:    README.md -&gt; README
    modified:   CONTRIBUTING.md
</code></pre>
<p>This hint tells us to use <code>git reset</code> for unstaging a staged file.</p>
<p>But instead, in my terminal, I see:</p>
<pre><code>git status
On branch master
Changes to be committed:
  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)
    renamed:    cat.js -&gt; catcat.js
    renamed:    tolendo.gogo -&gt; tolendo.txt

Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    readme (copy).md
    tolendo (copy).txt
    zing (copy).html
</code></pre>
<p>My terminal tells me to use <code>git restore --staged</code> but the tutorials, as well as <a href=""https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things#_unstaging"" rel=""noreferrer"">Git’s website</a>, tell me to use <code>git reset HEAD</code>.</p>
<p>I have no idea about the new <code>restore</code> command. I tried Google to find the difference between <code>git reset</code> and <code>git restore</code> but nothing seemed to fit my question.</p>
","11","2620022","0","0"
"39384508","1455384","2016-09-08 07:03:38","1","121","<git><git-merge><git-reset>","git - start tracking untracked remote files/directories","<p>Let say I do this:</p>

<pre><code>mkdir some_repo
cd some_repo
git init
git touch dummy.txt
git commit -m 'dummy commit'
git remote add -f some_other_remote_repo path/to/.git
git merge --no-ff --no-commit merge remotes/some_other_remote_repo/master
</code></pre>

<p>No entering <code>git status</code> I see something like:</p>

<pre><code>new: f1/some.txt
new: f1/some11.txt
new: f2/some2.txt
new: f3/some3.txt
</code></pre>

<p>So now I only want to add specific directories and their contents. I can do this:</p>

<pre><code>git reset f2/
git reset f3/
</code></pre>

<p>now running <code>git status</code>:</p>

<pre><code>new: f1/some.txt
new: f1/some11.txt

untracked: f2/some2.txt
untracked: f3/some3.txt
</code></pre>

<p>So it does what I need and I can commit and remove locally added <code>f2</code> and <code>f3</code> directories. But what to do if later I decide I now want to track for example <code>f2</code> directory and its contents?</p>

<p>No if I run <code>git merge --no-ff --no-commit merge remotes/some_other_remote_repo/master</code> again, it will say everything is up to date. So it now ignores those untracked directories. Is their a way to tell git to track specific directories that are in remote only?</p>
","2","1455384","",""
"39438307","2584392","2016-09-11 16:36:14","2","3342","<git><github><git-reset>","Delete commits on remote git","<p>I have a <code>dev</code> branch on which we push everything. The last commit breaks our entire build and I need to remove the same. For local i used</p>

<p><code>git reset --hard &lt;SHA_ID&gt;</code></p>

<p>Which works well for local repo but when I try to push the changes are rejected because the tip of current branch is behind remote and shows me to use <code>git pull</code> before pushing it again.</p>

<p>My question is, how do I make the remote go to the same HEAD as my local repo and delete the last commit.</p>
","1","2584392","",""
"58463319","12242852","2019-10-19 11:42:30","0","287","<git><version-control><git-reset>","git reset --soft strange behavior","<p>I wanted to squash 3 commits, before I push into the <code>develop</code> branch in the remote repository. I thought I'll use <code>git reset --soft HEAD~3</code> (to remove my last 3 commits and make them in a single commit with a new commit message). However, when I wrote the command, I noticd that it didn't reset only 3 commits, but like 20 (don't worry, I had backup). After that, I thought I'd try again with previous commits (just to test the behavior), and I saw that it wasn't only deleting 3 commits, but a random number.</p>

<p>What could this be from? (Note: The ""HEAD~3"" commit had merge conflicts when pulling before that, that were solved by me, not sure if that could be the case).</p>
","0","12242852","",""
"20622999","3109134","2013-12-16 23:22:13","2","924","<git><git-rebase><git-reset>","git rebase a blob after a reset lost the changes","<p>I created a Git repository with GitHub for Windows and did a reset before committing my files and now I've lost all my projects/files.</p>

<p>I find the files with </p>

<pre><code>$ git fsck --lost-found
</code></pre>

<p>My files are in <code>.git\lost-found\other</code> and I can view them with <code>$ git show SHA</code> but when I do a <code>$ git rebase SHA</code> I get this:</p>

<blockquote>
  <p>error: Object SHA is a blob, not a commit<br>
  fatal: Needed a single revision<br>
  invalid upstream SHA</p>
</blockquote>

<p>What can I do to recover my files?</p>

<p>Alternately, can read files with another program or language?</p>
","3","3109134","",""
"58635877","12248597","2019-10-31 01:45:56","1","46","<git><git-reset>","After git reset --hard without git add, can I still restore the unstaged files back?","<p>I have not found any solution for this besides people saying no way. I am just hoping that someone knows a new trick that could do this.</p>

<p>So here is what I did.</p>

<pre><code>git commit -m ""test configure finished""

git status
On branch master
Changes not staged for commit:
  (use ""git add/rm &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)


git push origin master


git revert HEAD
error: Your local changes to the following files would be overwritten by merge:


git reset --hard fb305ae7d5e01e595986
a3753cbdd22ead4cb945
HEAD is now at fb305ae

</code></pre>

<p>I did not perform a git add before these commands.</p>

<p>Can I get those unstaged files back???</p>
","6","12248597","",""
"29862319","2897182","2015-04-25 07:25:26","9","18669","<git><github><version-control><git-reset>","What's the difference between `git reset --hard master` and `git reset --hard origin/master`?","<p>I tried a lot of links on Stackoverflow/elsewhere to properly understand behaviour of </p>

<p><code>git reset --hard option</code></p>

<p>I know that:</p>

<ul>
<li>If it is omitted or if it is <code>origin</code>, reset is done on most recent commit on <code>origin</code></li>
<li>If a SHA1 hash is provided, reset is done on the corresponding commit.</li>
</ul>

<p>What I don't understand are the following values:</p>

<ol>
<li><code>origin</code></li>
<li><code>HEAD</code></li>
<li><code>origin/master</code></li>
<li><code>origin/branch</code></li>
</ol>

<p>All seem to have same behavior i.e. they a  point to latest commit on <code>master</code>.</p>

<p>Please explain what is the significance of all 4 value option provided above.</p>

<p>I would also like to know if I am on a specific branch how can I reset to the last commit on that very branch? 
If for example I am on <code>v1.2</code>, <code>origin/v1.2</code> still takes me to latest commit on <code>master</code>.</p>
","0","2897182","0","0"
"20033023","145277","2013-11-17 16:14:47","10","5795","<git><git-branch><git-commit><git-reset>","revert the git last commit and save it in a different branch","<p>Is there a way to rollback the last commit and put it into a separate branch for later testing? I did some changes which I don't want to entirely throw away, I just want to keep them aside in a different branch for further testing.</p>

<p>Can anyone help me with this?</p>
","0","145277","0","0"
"58013885","4820101","2019-09-19 14:58:59","0","610","<git><git-log><git-reset>","Does git log pickup(show) commits associated with some branch or tag only?","<p>On running <code>git log --graph --oneline</code>, i see only commits(and there parent commits and there parent commits and so on) that are associated with some branch (local and origin) or tag.</p>
<p>That is if I reset on a branch to a previous commit and make a new commit, a new history line is created. Now if I merge the new local history line with origin, I see that the old history line is no more show in graph (unless the old history tip was tagged).</p>
<p>Even on querying for the entire repo logs seems to be not of help <code>git log --graph --oneline -all</code></p>
<p>So, wondering if git log / graph pickups(shows) commits associated with some branch or tag only ? Could someone confirm or correct.</p>
<p><strong>Edit</strong> - following answer from RomainValeri</p>
<p>From git docs:</p>
<blockquote>
<p>git-log - Show commit logs</p>
</blockquote>
<p>and from actual observation and also answer from - RomainValeri</p>
<blockquote>
<p>git log --graph --oneline --all</p>
<h1>outputs all branch/tag histories</h1>
</blockquote>
<p>So is there any way to see the log of every commit (including dangling commits i.e those not associated with any branch/tag ) either with git log or any other alternate command/tool.</p>
","0","4820101","0","0"
"30531079","1350476","2015-05-29 13:36:56","0","45","<git><git-commit><git-checkout><git-reset>","Undo all files within a folder in git","<p>I searched and found many link which talks about un-doing your uncommited changes with respect to specific file:</p>

<ol>
<li>git reset </li>
<li>git reset --hard </li>
<li>git checkout -- file</li>
<li>git checkout branchname^ filename</li>
</ol>

<p><strong>but I want to undo changes for all the files I have modifies under a specific folder.</strong> </p>

<p>assume I have a folder like this <code>clients/libs/slickgrid</code> &amp; <code>slickgrid</code> internally contains multiple folder which contains multiple files. </p>

<p>I want to undo all modified files under slickgrid folder. What options I have over here?</p>
","0","1350476","",""
"39820390","5982950","2016-10-02 18:44:02","3","4449","<git><git-reset>","why git reset is not working?","<p>This is so problematic, I have just git pull something and then it says there is local change.... I changed nothing... I tried reset hard but it is not useful... Anyone help?</p>

<pre><code>MacBook-Pro$ git reset --hard
HEAD is now at b89fcff the latest code in AWS to identify all difference and keep track
MacBook-Pro$ git checkout dev1.1
error: Your local changes to the following files would be overwritten by checkout:
    OUTPUT_RESULTS_DIR/equity.csv
Please commit your changes or stash them before you switch branches.
Aborting
</code></pre>
","4","5982950","",""
"35087114","3922930","2016-01-29 14:38:45","1","677","<git><git-reset><git-add>","Revert version of file in git staging area","<p>New newbie here.
This is related to manipulating staging area of git.</p>

<p>Say I have a file named cat.txt.</p>

<p>It's git committed version has a single line in it.
Then I edited cat.txt added a second line and staged it.
Then edited again, added third line and staged that too.
My working copy and staging area reference to it contains three lines.</p>

<p>Now I decided the to commit the version with only two lines in it.
How do I revert cat.txt in staging area back to its two lines version?
Thanks</p>
","1","3922930","",""
"39416737","4534040","2016-09-09 17:19:55","1","2989","<git><gitlab><git-rebase><git-reset><git-revert>","How to take an old version of git code and make it the latest","<p>Some one merged a non working code into git and there were couple check-ins after that. I have two options, 1. To revert changes one by one and then when I reach good code, stop there. Option 2. Branch out the clean version using the checkin sha and make it the head. I see the question <a href=""https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit"">posted here</a> and several other question. If I try option one, after couple resets when I try to reset next one I get:</p>

<pre><code>On branch master
Your branch is ahead of 'origin/master' by 3 commits.
  (use ""git push"" to publish your local commits)
nothing to commit, working directory clean
</code></pre>

<p>Then I checked out the version I want to move to HEAD, and try to commit that. But I get this:</p>

<pre><code>HEAD detached at 0c1b8c1
nothing to commit, working directory clean
</code></pre>

<p>When I try option 2 get the correct version of the code, but when I try to commit, it says nothing to commit. What's the best way to take an old version of the code and make it the latest and greatest in GIT? This is what I'm trying to do:
<a href=""https://i.stack.imgur.com/rPPxd.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rPPxd.jpg"" alt=""enter image description here""></a></p>
","0","4534040","",""
"39569823","5353461","2016-09-19 09:34:22","3","125","<git><git-reset>","Move git HEAD without changing anything else","<p>I want to move <code>HEAD</code>, and only do that.</p>

<p>This means I want to keep untouched:</p>

<ul>
<li>Index (a.k.a. cache / staging area)</li>
<li>Working tree</li>
<li>Commit to which the current branch reference points</li>
</ul>

<p><code>git reset --soft</code> does the first two, but not the last.</p>

<p>Is there a way to do this without creating a new branch?</p>
","0","5353461","0","0"
"58437233","5918696","2019-10-17 16:39:32","0","464","<git><git-checkout><git-reset>","What exactly does ‘git checkout commit-sha’ do?","<p>Without path of files, what exactly does </p>

<pre><code>git checkout commit-sha
</code></pre>

<p>do ?</p>

<p>Anyone can explain it to me?</p>
","5","5918696","",""
"21197545","1354743","2014-01-17 22:59:02","3","355","<git><git-reset>","git add + git reset hard deleted working copy file - undo?","<p>I have added a directory with git add and realized that there are wrong files in it, so I used git reset --hard to go back to the latest commit but I didn't know that git would also delete those added files in the working copy.</p>

<p>Does anyone know how I undo this?</p>
","1","1354743","0","0"
"40475205","1223975","2016-11-07 21:44:40","1","1806","<git><git-reset>","Using git reset --soft, Marking a commit so that you can squash *down* to it later","<p>Looking to squash commits, so that a publicly facing project doesn't have meaningless commit messages like ""temp"" or ""temp123"".</p>

<p>I am looking for a way to use <code>git reset --soft HEAD~5</code>, but instead of randomly picking the number 5, I want to go back through the Git logs and find all the the commits that do not match a pattern, and once I hit the pattern I stop. So let's say my <code>git log</code> commit messages look like:</p>

<pre><code>temp123
fooGit
temp
fml
temp24
tmp69
tttoday
publish/release:xyz
</code></pre>

<p>so I would squash the top 7 most recent commits, but leave everything ""below"" <code>publish/release:xyz</code>.</p>

<p>For fairly complicated reasons, <code>git merge --squash</code> issued from the public facing branch won't work for me because I am end up deleting or renaming files quite a bit in a project on the private branch and so there are just too many merge conflicts. It seems to me, after trying it several ways, that it's best to push to the public facing branch with -f, and not worry about conflicts in that way.</p>

<p>I think the better approach in my case is to squash commits like so:</p>

<pre><code># on private ""dev"" branch
# make a bunch of changes, rename files, yadda yadda
git add . &amp;&amp; git add -A &amp;&amp; git commit -am ""temp"" &amp;&amp;
git checkout -b squash_branch  # we do squashing on this branch to be safer
git reset --soft head~15 # apparently this undoes commits for the last 15 commits
git commit -am ""A serious commit message""
git push -u public master -f  # overwrite public master
</code></pre>

<p>this way, I never have to resolve conflicts between the public facing branch and the private development branch, which can be super pointless and annoying from my experience.</p>

<p>However, the problem I am trying to solve has to do with the number 15 above. I am simply just guessing about how many commits to ""squash"". I would rather know the exact number to squash.</p>

<p>Perhaps I can do a squash of all commits that do not have a Git commit message that fits a certain pattern? So when I run the squash, I create a commit message with a certain pattern, let's say it's ""XYZ"". Could I run <code>git reset --soft HEAD~(some git commit pattern matching to find the count)</code>?</p>

<p>Also one more question. After doing the squash (<code>git reset --soft</code>) on the <code>squash_branch</code>, should I merge that branch back into the private <code>dev</code> branch?</p>
","1","1223975","",""
"44823957","4453737","2017-06-29 11:32:24","3","3205","<git><git-reset>","Undo git reset HEAD~3","<p>I was stepped down from my git repo into 3 step below by using, </p>

<pre><code>git reset HEAD~3
</code></pre>

<p>but after that i didnt find my previous changes. so how do i undo this <code>reset HEAD~3</code></p>
","2","4453737","",""
"9524367","170521","2012-03-01 21:27:00","3","4046","<git><git-merge><git-reset>","git reset HEAD before checking merge changes","<p>What does happen if i do a git merge from another branch, some conflicts happen, the merge does not get commited, and <strong>then</strong> i do</p>

<pre><code>git reset --hard HEAD
</code></pre>

<p>can i do the merge again? or will git believe that the merge is already done?</p>
","1","170521","0","0"
"45517522","8278160","2017-08-05 01:58:27","9","705","<git><github><git-reset>","Is ""git reset --hard"" the same as ""git reset --hard HEAD""?","<p>In order to revert changes in a working tree and index, this answer (<a href=""https://stackoverflow.com/a/5812972/8278160"">https://stackoverflow.com/a/5812972/8278160</a>) suggests that one run the following:</p>

<pre><code>git reset --hard
</code></pre>

<p>Would running this be the same as running <code>git reset --hard HEAD</code>?</p>
","0","8278160","",""
"27742458","2409793","2015-01-02 12:45:02","1","622","<git><git-checkout><git-reset>","Difference between git reset and git checkout","<p>What is the difference in the actual effect of the following two commands?
Don't they both make the staging area and the working directory to match the latest commit?</p>

<p><code>git reset --hard</code></p>

<p><code>git checkout &lt;sha-of-latest-commit&gt;</code> </p>
","2","2409793","",""
"9750049","952129","2012-03-17 12:40:16","34","55998","<git><git-reset>","Is it still possible to restore deleted untracked files in git?","<p>let's say yesterday I did some changes on my master branch, and I forgot to add, commit them. and in the morning i did </p>

<pre><code>git reset --hard
</code></pre>

<p>is it possible to restore deleted files in this situation ?</p>
","3","952129","0","0"
"65434544","14481581","2020-12-24 05:58:12","20","8835","<git><github><staging><git-reset><git-rm>","What's the difference between 'git rm --cached', 'git restore --staged', and 'git reset'","<p>I have come across the following three ways in order to unstage the files that were staged by the command 'git add'</p>
<pre><code>git rm --cached &lt;file&gt;
git restore --staged &lt;file&gt;
git reset &lt;file&gt;
</code></pre>
<p>Their behaviors looked completely same when I ran those commands one by one.
What exactly are the differences between them?</p>
","0","14481581","0","0"
"47034458","2409793","2017-10-31 11:37:50","1","6380","<git><git-reset><git-fork>","git: Reset to initial state of forked repository","<p>I forked a repository (which has one <code>master</code> branch) in my local namespace.</p>

<p>Ever since, I have several commits on top of <code>master</code>, and I also have an additional branch (<code>test-branch</code>).</p>

<p>What I want to perform is:</p>

<ul>
<li>roll back the <code>master</code> branch to the state it was when I forked the repo</li>
<li>maintain the <code>test-branch</code> as is</li>
</ul>

<p>A potential way of going about this is to checkout <code>master</code>, view the log history, find the <code>sha</code> of the last commit that was not mine and perform a <code>git reset &lt;sha_of_last_commit_of_forked_repo&gt;</code>.</p>

<p>Is there an alternative way?</p>

<p>fyi I have configured two <code>remotes</code>: <code>origin</code> and <code>upstream</code> (the upstream is the repo I forked from, with <code>push</code>).</p>
","4","2409793","",""
"65942954","1639359","2021-01-28 18:14:34","0","1099","<git><git-rebase><git-reset>","`git rebase` vs `git reset --hard` ... are they the same for deleting the most recent N commits?","<p>I understand that, in general, <code>git rebase -i</code> and <code>git reset</code> are used for very different things.</p>
<p>But in the context of deleting the most recent N commits, it seems to me they are (or can be) identical.  I even did an experiment (with two different local copies of my repository) and as far as I can tell they are the same.  I'm just posting this question in case someone out there can point out where maybe I am missing something.  So here is what I did.</p>
<p>I had a need to remove the most recent 11 commits (never mind why).</p>
<p>I tried two ways of doing it, and they appear to be completely identical; just wondering if I am missing anything in that they are not really identical:</p>
<ol>
<li><code>git rebase -i HEAD~12</code></li>
</ol>
<ul>
<li><strong>delete</strong> commit lines from the 11 commits that I don't want, keeping only the commit just before them (the one at the top of the interactive rebase file).</li>
<li>rebase succeeded</li>
</ul>
<ol start=""2"">
<li><code>git reset --hard HEAD~12</code></li>
</ol>
<p>These two methods appear to have done exactly the same thing.  Is that correct?</p>
<p>Thanks much.  Just trying to understand git a little deeper than I do now.</p>
","2","1639359","",""
"48411261","1915650","2018-01-23 21:38:51","0","365","<git><github><bitbucket><git-reset>","git reset --hard leaves modified, tracked files","<p>I've recently pulled down the latest version of a branch and it's created a folder of files which are in the last commit, however git seems to think all these files are still modified and none of the following will 'reset' the files to the latest commit, making git think there aren't any changes:</p>

<pre><code>git reset --hard

git reset --hard origin/production

git checkout --

git checkout-index

rm -rf lib/problem-folder

git rm --cached -r lib/problem-folder

git stash
git stash drop

git config core.filemode false

git status --porcelain | grep ""^ M"" | cut -c4- | xargs rm
git checkout -- .
</code></pre>

<p>And there is no .gitattributes file.</p>

<p>If I move HEAD back 2 commits (one merge, one actual commit) then the files are fine, so I guess it must be an issue with the commit?  It's the production branch and has already been merged into some other branches (don't ask) so I don't really want to have to re-do the commit</p>
","6","1915650","",""
"68864300","12228952","2021-08-20 15:03:13","1","73","<git><git-reset>","Strange result of 'git reset --soft HEAD'","<p>I'm having a strange issue when trying to squash some remote commits. I made a series of small changes to a GitLab .yml file (22 to be exact) that I would like to squash into one commit.</p>
<p>What I have tried to do so far is to use the command 'git reset --soft HEAD~22', then committing the squashed commit as one commit, and then force pushing to squash the commit remotely (as is done in <a href=""https://stackoverflow.com/a/32607742/12228952"">this answer</a>). I know using a separate branch for this in the first place would have been wiser and much less painful by using the automatic squash in GitLab's merge requests, but I am relatively new to Git and have certainly learned my lesson.</p>
<p>What is happening is <a href=""https://i.stack.imgur.com/6R5s0.png"" rel=""nofollow noreferrer"">this</a>. When I try to do all 22, it squashes the last 44, when I do 2 it squashes the last 24. I've tried a few other numbers and it seems random (11 nets me 33 squashed commits, 4 gives me 25, etc.). What is going on here? I haven't caused any damage to my remote repo because I have not pushed anything and I have made numerous local backups, but I am totally perplexed.</p>
","1","12228952","",""
"30769591","4883464","2015-06-11 00:26:23","31","12048","<git><git-reset><git-clean>","Difference between git reset --hard and git clean","<p>Hi I am curious about the difference between these two commands. When they introduce here: <a href=""https://www.atlassian.com/git/tutorials/undoing-changes"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/undoing-changes</a></p>
<p>Looks like <code>git reset --hard</code> also sets both the staging and the working directory to match the latest commit, but in the end they say that <code>git reset --hard</code> won't change the current working directory. So I am very confused here, can someone clarify it?</p>
","7","4883464","0","0"
"21083602","1727181","2014-01-13 03:54:25","1","220","<git><github><git-rebase><git-reset>","Fixing a botched `git rebase`","<p>I understand <code>git rebase</code> a bit. And I understand <code>git reflog</code> and <code>git reset --hard</code> a bit, too. But the <a href=""https://stackoverflow.com/questions/18973015/undo-a-git-rebase-using-onto"">SO answers</a> and <a href=""http://elegantcode.com/2013/02/16/how-do-i-undo-a-bad-rebase-in-git/"" rel=""nofollow noreferrer"">blog posts</a> I've tried can't seem to help me fix this error I've made.</p>

<p>I am working on a change to <a href=""https://github.com/marionettejs/backbone.marionette"" rel=""nofollow noreferrer"">Marionette</a>. I was doing as I normally do, squashing my commits into one, when I noticed at some point that I had actually somehow 'attached' a bunch of commits <a href=""https://github.com/marionettejs/backbone.marionette/pull/845"" rel=""nofollow noreferrer"">to my PR</a>. It <a href=""https://github.com/marionettejs/backbone.marionette/pull/845/commits"" rel=""nofollow noreferrer"">now lists 6 commits</a>, with my latest one being separate from the others.</p>

<p>I'm unsure if this is what squashing looks like when you squash commits from multiple users, so my first question is: what is going on here? Were they accidentally squashed?</p>

<p>The second question is how might I fix this? Nothing I do seems to work. I <code>git reset --hard</code> to before I did any rebases, and it still shows those 6 commits as unpushed commits. Even if I <code>reset --hard</code> <em>all the way to when I cloned the repo</em>, it still lists those other commits.</p>

<p>What is going on here? Do you have any ideas on how I can fix this?</p>
","0","1727181","0","0"
"31420690","304986","2015-07-15 02:51:43","3","960","<git><mingw32><git-reset>","Why am I getting error ""fatal: 'C:/Program Files (x86)/Git' is outside the repository"" when I run ""git reset --hard ~1"" from within the repository?","<p>I'm running SourceTree on Windows 7 and when I open the MINGW32 command prompt from within the respository folder (at C:\DEV\Shayne\Quarks) and try to delete the last commit by entering the command <code>git reset --hard ~1</code> I get the error <code>fatal: 'C:/Program Files (x86)/Git' is outside the repository</code>. The title bar of the command prompt reads <code>MINGW32:c/DEV/Shayne/Quarks</code>. I can't find any answers on Google and I've successfully run this command on this machine in the recent past. What is causing this error and how can I fix it?</p>
","4","304986","",""
"46934787","3631932","2017-10-25 14:14:34","1","1088","<git><git-merge><git-rebase><git-reset>","How to roll back (reset) a committed change in git on a single file","<p>I have a commit on my feature branch, consisting of 3 files, one of which now has a merge conflict with master.</p>

<p>I'd like to:</p>

<ul>
<li>roll back the commit on the conflicted file</li>
<li>rebase from master onto the file that had the conflict</li>
<li>manually reapply my rolled back changes on that file</li>
</ul>

<p>I've tried reverting but this works on the whole commit not the single file.</p>

<p>I've tried checking out the single file (at its revision prior to the commit I want to roll back) and committing that (to essentially revert the single file). However when I rebase the conflict still happens.</p>

<p>I feel like I need to do a hard reset on this single file somehow but I can't see a way of resetting an individual file.</p>
","0","3631932","0","0"
"10782978","1402685","2012-05-28 10:17:46","13","8231","<git><git-commit><git-reset><git-add><git-reflog>","Recover files that were added to the index but then removed by a git reset","<p>I added some files to the index but then by mistake I deleted them with <code>git reset --hard</code>.  How do I recover them?
Here's what happened:</p>

<ol>
<li>I added all files using <code>git add .</code></li>
<li>I then committed</li>
<li>When I checked the status, there were still files that weren't included in the commit from the add, which was strange</li>
<li>I added the untracked files again and it worked this time</li>
<li>But I wanted everything to be in 1 single commit so I looked up how to unstage what I just committed</li>
<li>I used <code>git reset --hard HEAD^</code> — bad idea obviously, all files were deleted</li>
<li>so then I used <code>git reflog</code> to find where I left off</li>
<li>then I used <code>git reflog ______</code> to go back to my last commit.</li>
<li>then I used <code>git reset HEAD</code> to unstage the commit (what I should have originally done) but the files I added (see above) after the commit were still gone.</li>
</ol>

<p>How do I get those files back?</p>
","4","1402685","0","0"
"11189702","1395106","2012-06-25 12:49:02","1","1670","<git><git-reset>","git reset ---hard returns error","<p>I am git newbie.
When I hope to reset hard to discard all local modification, git return merge conflict</p>

<blockquote>
  <p>HEAD is now at 3291a25 will create merge conflict 1</p>
</blockquote>

<p>my operation:</p>

<ol>
<li><p>about half a month I commit as below </p>

<pre><code>git commit -am ""will create merge conflict 1""
</code></pre></li>
<li><p>today I hope to reset --hard to this ref</p>

<pre><code>yaoyangyong@ubuntulucky:~/repos01$ git reset --hard HEAD
HEAD is now at 3291a25 will create merge confict 1
</code></pre></li>
<li><p>The output confuse me. In fact, it is just my old comment.</p></li>
</ol>
","3","1395106","",""
"11200839","1395106","2012-06-26 04:36:45","187","130883","<git><git-reset>","Why git can't do hard/soft resets by path?","<p><code>$ git reset -- &lt;file_path&gt;</code> can reset by path.</p>

<p>However, <code>$ git reset (--hard|--soft) &lt;file_path&gt;</code> will report an error like below:</p>

<pre><code>Cannot do hard|soft reset with paths.
</code></pre>
","1","1395106","0","0"
"11218596","121993","2012-06-27 02:29:26","17","12438","<eclipse><git><egit><git-reset>","egit replacing single file - HEAD Revision vs File in git index","<p>In the egit git eclipse plugin, I know I can ""reset"" a single file by right clicking on it and selecting Replace With > HEAD Revision. What is the difference between replacing with HEAD revision vs File in git index?</p>
","0","121993","0","0"
"47359823","93212","2017-11-17 21:52:13","0","102","<git><git-reset>","Are there any git commands that will explicitly destroy a commit?","<p>Does Git ever truly destroy commits or just orphan them? I am aware that the git garbage collector will remove orphaned commits when run with <code>git gc</code> on whatever interval is set in git config. Are there any other cases that will delete a commit?</p>
","0","93212","",""
"47678336","2006674","2017-12-06 15:50:43","0","287","<git><version-control><git-pull><git-reset>","git pull forced with exceptions","<p>I want to do automatic(no manual intervention) <code>git pull</code> from git remote repository.</p>
<p><strong>But that some files are kept in local state</strong> and all others are same as in remote repository.</p>
<p>I have found <a href=""https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files"">How do I force &quot;git pull&quot; to overwrite local files?</a></p>
<p>The solution from that answer is:</p>
<blockquote>
<p>git fetch --all</p>
<p>git reset --hard origin/master</p>
</blockquote>
<p>But this is overwriting all files in the local directory to state from origin/master.</p>
<p>How can I do this, but with excluding some files?</p>
<p>More info:
I am making one deployment script (I know that fabric/git is not the best solution, but if I can do this than it is good enough for me.)</p>
","4","2006674","",""
"29530684","1896986","2015-04-09 05:47:08","0","874","<git><git-reset>","Undo changes made by 'git reset --hard <sha 1 of specific commit>'","<p>Query is regarding git reset,</p>

<p>Stage 1: Now I would like to revert back to a specific commit using the below command provided no local changes are there. </p>

<pre><code>git reset --hard &lt;sha 1 of specific commit&gt;
</code></pre>

<blockquote>
  <p>Query 1: How I could make the revert to a new separate branch?</p>
  
  <p>Query 2: After some time, I would like to revert to Stage 1 state,
  taking back all commits which I discarded using <code>git reset --hard</code>. Is
  that possible?</p>
</blockquote>

<p>Please suggest :)</p>
","0","1896986","",""
"12627509","1542339","2012-09-27 18:05:38","1","163","<git><security><github><git-push><git-reset>","is there any security issues if i add the public key of a public host to my github's accout?","<p>that means others may push to my git repos which are hosted on github, so can anybody use</p>

<pre><code>git reset --hard first-commit-id
git push
</code></pre>

<ol>
<li><p>will this destroy my git repos hosted on github?</p></li>
<li><p>will i lost of my history, if some bad guy run the above command?</p></li>
</ol>

<p>this issue is not the same as <a href=""https://stackoverflow.com/questions/6742555/how-do-i-remove-my-public-key-from-github"">how do I remove my public key from github?</a></p>
","3","1542339","",""
"14075581","504963","2012-12-28 20:46:53","1234","1194988","<git><command-line><undo><git-reset>","git undo all uncommitted or unsaved changes","<p>I'm trying to undo all changes since my last commit. I tried <code>git reset --hard</code> and <code>git reset --hard HEAD</code> after viewing <a href=""https://stackoverflow.com/questions/7999259/git-how-to-perform-the-tfs-equivalent-of-undo-pending-changes"">this post</a>. I responds with head is now at 18c3773... but when I look at my local source all the files are still there. What am I missing?</p>
","2","504963","0","0"
"48518040","3142408","2018-01-30 09:31:13","2","223","<git><reset><git-reset>","Undo git reset without any commits yet","<p>I recently wanted to, as I thought, update my code on the remote git repository. I didn't realize it's not even committed yet. I did create some errors, so I wanted to reset the branch to its previous state. </p>

<p>As you may expect, I used <code>git reset --hard</code>.</p>

<p>Well, everything (the whole project) has been gone ever since; except the <code>.gitignore</code> files/folders, of course. I've been wondering, is there any way to undo that? </p>

<p>The only steps I did:</p>

<pre class=""lang-sh prettyprint-override""><code>git add .
# Here I realized there is a bug in what I did
# I thought myself it would be better to undo that as it wasn't even something needed
git reset --hard 
</code></pre>

<p>Also, I'd like to point out it's probably not a duplicate of any question here as others have had some commits before. That's completely new repository, and it's been ""reset hard"". </p>
","4","3142408","",""
"59781525","12674670","2020-01-17 05:08:28","1","249","<git><github><git-reset>","How can I change my local main branch identical to github upstream?","<p>I'm new to using git. I have a branch (develop) cloned from GitHub. I made some changes to the code then I staged them to commits and created a new branch (Remove_Annotations). Then I realised I should have created a new branch first and then staged them for commits in the new branch. Now, my develop branch has the changes I made which I do not want. Is there any way to revert the changes I made in develop branch locally to make it look like my GitHub upstream?</p>

<p>I read about using <code>git reset --hard @{u}</code> which would make the local branch look like my upstream. I am not sure whether using <code>git reset --hard</code> for the develop branch is the right way. I do not want to do anything to the Remove_Annotations branch.</p>

<p>How can I fix this?</p>
","0","12674670","",""
"51863766","9393766","2018-08-15 17:41:47","4","2382","<git><git-reset>","Does the command ""git reset --hard <commit>"" remove commit history in another branch?","<p>Let's say I made <code>a, b, c, d</code> commits so far. I'm currently in <code>d</code> and I want to go back to <code>a</code>.</p>

<p><code>a</code> and <code>d</code> are in <code>master</code> branch. <code>b</code> and <code>c</code> are <code>temp</code> branch.</p>

<p>In this case, if I run <code>git reset --hard &lt;a's commit&gt;</code>, will I lose the commit <code>b</code> and <code>c</code> because they are made after <code>a</code>? Is it true even though they are in another branch?</p>
","0","9393766","0","0"
"59795050","12293656","2020-01-17 21:26:56","0","136","<git><github><git-reset><recover>","Recover initial files after git reset --hard HEAD~","<p>Please help! I've been working between several computers and wanted to keep track of my non-programming schoolwork. I set up an initial repository on Github, initiated that on my local machine, and then proceeded to add all files in my school directory, commit those files, and then attempted to push them to the repository. However, I did not realize how large the GIS files were, so the push kept failing. I wanted to go backward so that I could create a .gitignore file to skip over the large files, and tried to following command to clear out the commit:</p>

<pre><code>git reset --hard HEAD~
</code></pre>

<p>I had no clue that this wouldn't just untrack the files, but delete them from my file system. Now I have lost my entire school directory.</p>

<p>Can anyone suggest how to recover any of the files? I can't find an answer elsewhere. </p>

<p>EDIT:  The answer below worked great, here's the result:</p>

<pre><code>D:\Documents\College\Masters\[MyUniversity]&gt;git reflog
99b0b97 (HEAD -&gt; master, origin/master) HEAD@{0}: reset: moving to 99b0b97
99b0b97 (HEAD -&gt; master, origin/master) HEAD@{1}: reset: moving to HEAD~
a291e5a HEAD@{2}: reset: moving to HEAD
a291e5a HEAD@{3}: commit: added all files
99b0b97 (HEAD -&gt; master, origin/master) HEAD@{4}: commit (initial): first commit

D:\Documents\College\Masters\[MyUniversity]&gt;git reset --hard a291e5a
Updating files:   0% (37/8608)            
</code></pre>
","1","12293656","",""
"22191901","364088","2014-03-05 08:03:18","3","1214","<git><version-control><git-rebase><git-reset>","git rebase ate my commits ! Translate 'git reflog' output for me?","<p>I had done five commits and I wanted to make them all into one commit before pushing them. For some reason I decided to try doing this by a different means than I usually use.</p>

<p>FWIW: I was attempting to follow the instructions here <a href=""http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html"" rel=""nofollow noreferrer"">http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html</a> .</p>

<p>I'll put a lot of detail below but you might want to skip down to the bottom of the question where I put the output of <code>git reflog</code> because I suspect that's what's significant here.</p>

<p>So here's what I did - with all my changes committed I did :</p>

<pre><code>git rebase -i HEAD~5
</code></pre>

<p>and I was presented with the text editor which showed the commits and I, wrongly I now realise, changed all the first column values of 'pick' to 'squash'.</p>

<p>I then saw an error message. To my shame I can't remember what the error message said but I think it said something like ""You have no commit to use"".</p>

<p>At that point I was back to the prompt and when I try to repeat the :</p>

<pre><code>git rebase -i HEAD~5
</code></pre>

<p>I get the message :</p>

<pre><code>It seems that there is already a rebase-merge directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
        git rebase (--continue | --abort | --skip)
If that is not the case, please
        rm -fr /home/foo/dev/bar/.git/rebase-merge
and run me again.  I am stopping in case you still have something
valuable there.
</code></pre>

<p>Then I read this answer <a href=""https://stackoverflow.com/a/12163247/364088"">https://stackoverflow.com/a/12163247/364088</a> which suggests doing :</p>

<pre><code>git reset --soft HEAD^
</code></pre>

<p>I did that (I wish I had not). After I'd done it. </p>

<pre><code>git status
</code></pre>

<p>showed a number of files with uncommitted changes although </p>

<pre><code>git diff
</code></pre>

<p>showed no changes . Anyway I then did a </p>

<pre><code>git commit
</code></pre>

<p>And now I have lost all my chnages in the last five commits !</p>

<pre><code>git reflog
</code></pre>

<p>shows (this is just the top of it):</p>

<pre><code>3f80e4b HEAD@{0}: commit: Decorator demo added
1888dd9 HEAD@{1}: reset: moving to HEAD^
7d6228e HEAD@{2}: checkout: moving from master to 7d6228eb9b03d0c45acf7c66e662220213cf4fb9
705736f HEAD@{3}: commit: Snapshot commit - squash later
75db0c3 HEAD@{4}: commit: Snapshot commit - squash later
b70b50f HEAD@{5}: commit: Snapshot commit - squash later
d970a62 HEAD@{6}: commit: Snapshot commit - squash later
0f24e88 HEAD@{7}: commit: Snapshot commit - squash later
7d6228e HEAD@{8}: commit: Move some standard code into its own module and tidy up .
1888dd9 HEAD@{9}: commit: Early version of the decorators demo
</code></pre>

<p>So the thing is the commits labelled ""Snapshot commit - squash later"" are the ones I wanted to merge into a single commit. </p>

<p>The commits HEAD@{2} and HEAD@{1} are stuff I've done in the process of trying to merge those ""Snapshot commit - squash later"". The commit HEAD@{0} is the commit I did after the rebase and the reset.</p>

<p>In case it matters the last commit pushed was HEAD@{8}.</p>

<p>So what I'd like is to get back to the '705736f' commit and then, ideally do the merging of commits again only this time make it work !</p>

<p>I'd be quite happy if I could recover the work in the ""Snapshot commit - squash later"" changes.</p>

<p>Would be grateful for advice.</p>
","0","364088","0","0"
"3639342","260127","2010-09-03 20:21:43","518","165401","<git><git-checkout><git-reset>","What's the difference between ""git reset"" and ""git checkout""?","<p>I've always thought of <code>git reset</code> and <code>git checkout</code> as the same, in the sense that both bring the project back to a specific commit. However, I feel they can't be exactly the same, as that would be redundant. What is the actual difference between the two? I'm a bit confused, as the svn only has <code>svn co</code> to revert the commit. </p>

<h3>ADDED</h3>

<p>VonC and Charles explained the differences between <code>git reset</code> and <code>git checkout</code> really well. My current understanding is that <code>git reset</code> reverts all of the changes back to a specific commit, whereas <code>git checkout</code> more or less prepares for a branch. I found the following two diagrams quite useful in coming to this understanding:</p>

<p><img src=""https://i.stack.imgur.com/C4BCo.png"" alt=""http://a.imageshack.us/img651/1559/86421927.png"">
<img src=""https://i.stack.imgur.com/Tiv4H.png"" alt=""http://a.imageshack.us/img801/1986/resetr.png""></p>

<h3>ADDED 3</h3>

<p>From <a href=""http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html"" rel=""noreferrer"">http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html</a>, checkout and reset can emulate the rebase. </p>

<p><a href=""https://i.stack.imgur.com/EYijy.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/EYijy.png"" alt=""enter image description here""></a></p>

<pre><code>git checkout bar 
git reset --hard newbar 
git branch -d newbar 
</code></pre>

<p><a href=""https://i.stack.imgur.com/6F3ZK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/6F3ZK.png"" alt=""enter image description here""></a></p>
","6","260127","0","0"
"21986293","2009652","2014-02-24 11:22:00","5","796","<git><heroku><github><git-reset>","why do git reset commit + git push cause tip of current branch to go behind remote?","<p>I wanted to undo a couple minor changes on my repo. I decided to go back two commits, and did </p>

<pre><code>git reset --hard &lt;commit&gt;
</code></pre>

<p>and</p>

<pre><code>git push -f
</code></pre>

<p>Everything went through fine. But when I pushed to heroku, I got an error about how some refs weren't pushed, and then this explanation:</p>

<p><em>Updates were rejected because the tip of your current branch is behind its remote counterpart. Merge the remote changes (e.g. 'git pull') before pushing again.</em></p>

<p>Every time I go back to a previous commit, I wind up with a detached HEAD or with the tip behind remote. This prevents me from pushing to git or heroku. Why? How do I get around this? What is the proper list of commands to follow so that this does not cause interference in the future?</p>
","0","2009652","0","0"
"4707180","146272","2011-01-16 18:24:26","2","5365","<git><git-branch><git-rebase><git-merge><git-reset>","How to remove an in-between merge in git?","<p>I want to remove an in-between merge (remove, not squash) and then move the last 2 commits to a new branch.</p>

<p>This is my current <code>git log --graph</code>:</p>

<pre><code>* 3a5c453 - (2 hours ago) last commit (HEAD, master)
*   b6c19f1 - (2 hours ago) Merge branch 'tade' into HEAD
|\  
* | be356d0 - (2 hours ago) previous commit
| * 65328dc - (3 hours ago) some other commit in branch tade
</code></pre>

<p>I want to end up with this:</p>

<pre><code>    * bbbbbbb - (some time in the future) a later commit on tade (tade)
*   | aaaaaaa - (some time in the future) a later commit on master (master)
| * | 3a5c453 - (2 hours ago) last commit (HEAD, newone)
| * | be356d0 - (2 hours ago) previous commit
|/  |
|   * 65328dc - (3 hours ago) some other commit in branch tade
</code></pre>

<p>I thought of using <code>git rebase -i</code> to remove the merge with the branch tade and then do a <code>git branch newone</code> and <code>git reset --hard HEAD^2</code> to move the last 2 commits to the new branch. When I did the rebase though, it showed me all the commits from the tade branch that got merged into master and | was reluctant in deleting them.</p>

<p>Is there a better way or should I go ahead with it?</p>

<p>EDIT: I updated the intended state graph to make it more clear. The 2 new commit (<code>aaaaaaa</code> and <code>bbbbbbb</code>) are only there to illustrate the state a little better (I hope)</p>
","3","146272","0","0"
"59839254","9568858","2020-01-21 10:39:19","3","3686","<git><git-reset>","Undo git reset --hard with uncommitted files","<p>I have an existing java project and i did the following</p>

<pre><code>cd existing_folder
git init
git remote add origin URL
git add .
git reset --hard
</code></pre>

<p>I made accidentally did <strong>git reset --hard</strong> is there any way to recover my data back</p>

<p>that's it deleted all of my directories and files of my project</p>
","3","9568858","",""
"59841081","1173638","2020-01-21 12:22:34","0","494","<git><git-reset>","git reset master to much older version","<p>I'm trying to reset my Git master branch to a much older version.
I made a branch to save the master branch changes in, then did a reset.
Now I am stuck and don't now what to do. The status message tells me I can fast-forward the branch, but I would want to commit the changes to get back to the old version. Master is also already pushed to the git server. What should I do next?</p>

<pre><code>User MINGW64 application (feature/logBusiness)
$ git checkout master
M       .classpath
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

User MINGW64 application (master)
$ git checkout -b feature/v5.3.10
M       .classpath
Switched to a new branch 'feature/v5.3.10'

User MINGW64 application (feature/v5.3.10)
$ git push -u origin feature/v5.3.10
Enter passphrase for key '/c/Users/user/.ssh/id_rsa':
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git@gitserver/srv/git/application
* [new branch]      feature/v5.3.10 -&gt; feature/v5.3.10
Branch feature/v5.3.10 set up to track remote branch feature/v5.3.10 from origin.

User MINGW64 application (feature/v5.3.10)
$ git checkout master
M       .classpath
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

User MINGW64 application (master)
$ git reset --hard RM2_5.3.8_alpha
HEAD is now at 2055fa8 Fixed bug when KPi has no database connection assigned

User MINGW64 application (master)
$ git status
On branch master
Your branch is behind 'origin/master' by 54 commits, and can be fast-forwarded.
  (use ""git pull"" to update your local branch)
nothing to commit, working directory clean
</code></pre>
","6","1173638","",""
"42107880","351903","2017-02-08 08:16:11","0","297","<git><git-reset>","Unable to push reverted file to repository after git reset","<p><em>Note - I am new to understanding the git reset command, so I am not sure if it is the right command for what I want to do, which is very simple.</em></p>

<p>I wanted to undo the changes made in the last git push.
So, I ran the following reset command to go back to the desired commit hash (one before the undesired commit hash)- </p>

<pre><code>git reset &lt;last desired commit hash&gt; &lt;file name&gt;
</code></pre>

<p>After this, there were no changes to file as such (working directory). But, <code>git status</code> showed that the file had been modified.</p>

<pre><code> modified:   &lt;filename&gt;
</code></pre>

<p>On doing <code>git stash</code> now, the working directory file was modified. But, I do not see an option to push the changes to remote repository. Git pull also shows no changes.</p>
","5","351903","",""
"41226396","1534368","2016-12-19 15:52:00","6","3848","<git><git-branch><git-commit><git-stash><git-reset>","How do I save work in progress without using git-stash?","<p>I have a git directory with this situation:</p>

<pre><code>ProgSoul@PROGSOUL-LENOVO:~/esercizio3_2$ git status
Sul branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        modified:   A

Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   A

Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

        B
</code></pre>

<p>In this situation I have:</p>

<ul>
<li>there is a file named A in the index with a string ""AA"" inside it</li>
<li>I modified the file A with ""AAA"" inside it but I didn't add this change on the stage. So in the working directory I have A with a string ""AAA"" inside it</li>
<li>an untracked empty file B</li>
</ul>

<p>My teacher wants me to temporarily suspend my work, create a BUGFIX file, commit it and restore my previous situation.</p>

<p>I achieved it through these commands:</p>

<pre><code>git stash --include-untracked
touch BUGFIX
git add BUGFIX
git commit -m ""Aggiunto file BUGFIX""
git stash pop --index
</code></pre>

<p>With these commands I saved my initial situation and restored it once my fix has been commited.
My teacher also asked me to reach this goal without using git-stash.</p>

<p>I followed the help in the stash documentation:</p>

<pre><code>git checkout -b WIP
git commit -a -m ""WIP""
git checkout master
touch BUGFIX
git add BUGFIX
git commit -a -m ""BUGFIX""
git checkout WIP
git reset --soft HEAD^
</code></pre>

<p>With git reset --soft I restored the index but the changes not staged for commit have been lost.</p>

<p>With git reset --mixed I restored the changes not staged for commit but the index has been lost.</p>

<p>How can I restore the same initial situation once I commit the fix without using git stash?</p>
","7","1534368","0","0"
"59954317","10244370","2020-01-28 17:41:42","0","194","<bash><git><terminal><git-push><git-reset>","Remove large file from git staging area","<p>I've tried to push a commit containing a file exceeding the 100 MB limit and see the message</p>

<pre><code>remote: error: File data/clean/new/all_listings_clean.csv is 327.92 MB; this exceeds GitHub's file size limit of 100.00 MB
</code></pre>

<p>So I deleted the file locally (I didn't need it) and tried <code>git reset</code> and then <code>git add -A</code> + <code>git commit -m ""...""</code> and <code>git push origin master</code> but I see the same error message.</p>

<p>I've also tried <code>git reset HEAD^</code>, <code>git reset HEAD -- .</code>, <code>git reset HEAD~</code>, <code>git rm --cached</code>. </p>

<p>I keep getting this error! It can't figure out how to tell it to refresh my staging area, recognize that the large file is not there anymore, and go ahead and push the commit without it.</p>
","3","10244370","",""
"22256585","3393589","2014-03-07 17:20:33","1","465","<git><git-reset><git-rm><git-fsck>","Undo git rm -r f (ambiguous argument 'HEAD') before first commit","<p>I did a <code>git rm -r -f</code> on an ENTIRE directory in a new repo before I had ever committed. I had no branches.</p>

<p>I tried the answers on Stack Overflow, but none helped. I tried this:</p>

<pre><code>git reset --hard HEAD
</code></pre>

<p>But got this:</p>

<pre><code>fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
</code></pre>

<p>Is there any way I can get the files back?</p>
","0","3393589","",""
"3719068","265249","2010-09-15 15:15:20","62","20033","<git><commit><git-branch><git-reset>","Move commits from master onto a branch using git","<p>I'm trying to learn how to use Git effectively and I'm wondering how I should (good practice/bad practice?) solve the following case:</p>

<p>Say I have the following chain of commits in master:</p>

<ul>
<li>Initial commit</li>
<li>Commit 1</li>
<li>Commit 2</li>
<li>Commit 3</li>
</ul>

<p>Then I realize that what's done in the last two commits is completely wrong and I need to start from Commit 1 again. Questions:</p>

<ul>
<li>How should I do that?</li>
<li>Can I move Commit 2 and 3 to a separate branch to keep for future reference (say they weren't that bad after all) and continue working from Commit 1 on master?</li>
</ul>
","0","265249","0","0"
"23116821","67960","2014-04-16 18:00:01","-1","563","<git><version-control><branch><git-merge><git-reset>","How can you 'reuse' a git branch safely","<p>I need to way to update a Git branch to a new ref in such a way that from the client's view a new branch. I have a process in mind but I want advice on edge cases I haven't accounted for.</p>

<p>Use case here is we develop in master and want to code freeze at regular intervals and update the release branch to where master is at the point. We don't want to create a new branch each time because our automation would need to be updated to use the new branch.</p>

<p>Through process we're limited who and how commits can happen to release, (cherry-picks from master only in the end), so there shouldn't be commits in release that aren't in master. Process is never perfect though so I want to guard a little.</p>

<p>Right now I'm planning on using 'reset --hard' via this:</p>

<pre><code>git checkout master
MASTER_HEAD=`git rev-parse HEAD`
git checkout release
git reset --hard $MASTER_HEAD
git push -f origin
</code></pre>

<p>This is a little scary because if a commit does get into release thats not in master its possible for it to make it into release on the next pull someone does. Any forced push freaks me out as well.</p>

<p>I've also looked at 'update-ref' but I don't understand it yet.</p>

<p>The last method is once a release is cut, tag the release branch and delete the branch. Then when code freeze happens again recreate release from master. Downside here is any automation also needs to be disable as the branch doesn't exist anymore.</p>
","3","67960","",""
"41387054","1197249","2016-12-29 20:56:17","5","990","<git><git-branch><git-reset><git-gc>","After a git reset, unreachable commit not removed","<p>I have a small repo that has a couple of commits:  </p>

<pre><code>* a0fc4f8 (HEAD -&gt; testbranch) added file.txt  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (tag: initial) initial  
</code></pre>

<p>Also:  </p>

<pre><code>$ git status  
On branch testbranch  
nothing to commit, working directory clean  
</code></pre>

<p>I can not understand the following behavior. On this state I run: 
<code>$ git reset initial</code><br>
I see now:  </p>

<pre><code>* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  
</code></pre>

<p>What I was expecting: Commit a0fc4f8 would be deleted since it is unreachable.<br>
What happened:<br>
1) Doing <code>git show a0fc4f8</code> still shows the commit<br>
2) Doing <code>git status</code> shows the <code>file.txt</code> that was added by commit a0fc4f8 as untracked and file hello that was added by commit f705657 also shows up as untracked.<br>
3) Running <code>git gc</code> or <code>git gc --prune=all</code> does not delete a0fc4f8 although it is not reachable anymore and has no name/tag associated with it.<br>
Why are these happening?</p>

<p><strong>Update:</strong>   </p>

<pre><code>$ git fsck  
Checking object directories: 100% (256/256), done.  
Checking objects: 100% (15/15), done.    
</code></pre>

<p><strong>Update 2:</strong>  </p>

<pre><code>$ git log --all --decorate --graph --oneline  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  

$ git gc --force  
Counting objects: 15, done.  
Delta compression using up to 4 threads.  
Compressing objects: 100% (8/8), done.  
Writing objects: 100% (15/15), done.   
Total 15 (delta 1), reused 15 (delta 1)   

$ git log --all --decorate --graph --oneline  
* e6e6a8b (master) hello world now  
* f308f53 Made it echo  
* f705657 Added hello  
* 08a2de3 (HEAD -&gt; testbranch, tag: initial) initial  
</code></pre>

<p>$ git show a0fc4f8   Still shows the commit </p>

<p><strong>Update 3:</strong>  </p>

<pre><code>$ git reflog testbranch  
08a2de3 testbranch@{0}: reset: moving to initial  
a0fc4f8 testbranch@{1}: commit: added file.txt  
e6e6a8b testbranch@{2}: branch: Created from HEAD  
</code></pre>
","9","1197249","0","0"
"60624984","","2020-03-10 19:52:10","0","246","<git><git-reset>","What's the difference between `git reset` and `git reset --soft`?","<p>I am looking online to see if there is a difference between:</p>

<pre><code>git reset HEAD~1
</code></pre>

<p>and</p>

<pre><code>git reset --soft HEAD~1
</code></pre>

<p>I see some good stuff on the subject but nothing that seems to differentiate between the two above commands.</p>

<p><a href=""https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard"">What&#39;s the difference between git reset --mixed, --soft, and --hard?</a></p>
","3","","",""
"12661306","1203565","2012-09-30 12:40:55","68","108815","<git><git-reset><git-rm>","git rm --cached file vs git reset file","<p>I'm trying to learn Git. I'm confused between </p>

<pre><code>git rm --cached file
</code></pre>

<p>and</p>

<pre><code>git reset file
</code></pre>

<p>both of the commands seem to take the file from staged to un-staged area. How do the commands differ?</p>
","1","1203565","0","0"
"13495818","42473","2012-11-21 14:49:28","1","3329","<git><git-merge><git-rebase><git-stash><git-reset>","How do I rework a git merge commit?","<p>I would like to amend a merge commit which failed a unit test on our continuous integration server, but I don't want to leave a commit which fails tests in the history.</p>

<p>Since this commit was only used by the CI server (and would not have been pulled down by anyone else) I would like to fix up the merge and then <code>--force</code> push it to replace the existing failed merge commit.</p>

<p>My problem is, I can't work out how to easily get back to the state immediately before the original commit was made, so that I can fix the failing test, recommit the merge and then force push that change up.</p>

<p>I don't really want to have to redo the whole merge, since there are quite a few files with conflicts which had to be resolved and all but one was resolved successfully.</p>

<h2>What I have tried so far</h2>

<h3>Attempt 1: <code>git reset</code></h3>

<p>My first attempt was to do a mixed reset back to the commit before the merge commit, fix the bug introduced by the merge and then recommit.</p>

<pre><code>git reset HEAD^
# Fix the failing test
git commit
</code></pre>

<p>Unfortunately this results in a non-merge commit which silently incorporates all of the branch changes - not really what I want. *8')</p>

<h3>Attempt 2: <code>reset</code>, <code>stash</code>, <code>merge</code> &amp; <code>apply</code></h3>

<p>I then attempted to use stash to save the changes I made during my first attempt to merge:</p>

<pre><code>git reset HEAD^
git add .               # Since there were untracked files
git stash
git merge branch
git stash apply         # Fails
git add .
git stash apply         # Merged but with conflicts
</code></pre>

<p>Unfortunately when <code>git stash apply</code> attempts to merge my stashed changes with the existing conflicted merge files it fails with the error</p>

<blockquote>
  <p>Cannot apply to a dirty working tree, please stage your changes</p>
</blockquote>

<p>If I dutifully make my working directory clean by using <code>git add .</code> then the <code>git stash apply</code> runs but now not only do I have conflicts, I have conflicts with conflicts in them and any files which should have been removed have been added back in.</p>

<h3>Attempt 3: <code>amend</code> and/or <code>rebase</code>.</h3>

<p>I tried the <a href=""https://stackoverflow.com/a/13496331/42473"">nice simple suggestion</a> by <a href=""https://stackoverflow.com/users/1507392/qqx"">qqx</a> to just fix the problem and <code>git commit --amend</code> the original commit, but without actually going back to the mid-merge state you lose access to the merge tools.</p>

<p>Once I've committed, I lose the ability to run <code>git mergetool {file}</code> as it just returns with the error:</p>

<blockquote>
  <p>{file}: file does not need merging</p>
</blockquote>

<p>When trying to fix up a merge conflict, I really like being able to see my base, left, right and current revisions all together using tools like <code>kdiff3</code>.</p>

<p>using <code>rebase</code> suffers the same issue.</p>

<hr>

<p>Any hints on a workflow which could allow me to achieve my desired result would be appreciated.</p>
","0","42473","",""
"31100957","3053295","2015-06-28 14:32:47","0","258","<git><github><git-reset>","Undo git reset --hard","<p>I intended to git reset --hard to the last commit I made but I accidentally went back to the commit before that. Is there anyway to undo this. </p>

<p>This was the sequence of events:
1. I pulled from a common repo and made some changes and committed them (SHA1). I made more changes and committed them too(SHA2). Then I made some more changes but never committed them I just wanted to go back to SHA2. Instead I reset to SHA1. Now, all my changes are lost. Can I undo the last reset and get to SHA2?</p>

<p>What I mean is when I did a git log:</p>

<pre><code>""SHA2"" - HEAD
 Jun 26
 some comment -1

 ""SHA1"" - Origin
  Jun 25
  some comment -2
</code></pre>

<p>I reset to SHA1 instead of to SHA2. Can I undo my reset --hard</p>
","3","3053295","",""
"48092766","6006981","2018-01-04 09:57:39","1","74","<git><github><git-merge><git-reset>","Reverting git merge and consecutive commits","<p>I had a troublesome time trying to merge a branch with the master, as the merge tried to delete files and changes that were on the master that I needed to keep. I ended up committing a partial broken merge to the master and I made quite a few commits after that trying to resolve the issue.</p>

<p>Now I want to undo all of this by resetting the master to its original state. I'm the only one who made changes to the master so other users shouldn't be an issue. Will doing a hard reset to a previous commit be enough? Or is there some other step I need to take to make sure the reset doesn't cause issues in future merges?</p>
","0","6006981","",""
"48106790","1273587","2018-01-05 03:22:55","8","4539","<git><git-reset>","`git reset --hard` also reset ignored files?","<p>I have some files that was once in the git repository but later ignored. (mainly configuration files) However, when I run <code>git reset --hard</code>, the changes on these ignore files are also reset, where I am sure the head version has already got those files ignored. </p>

<p>Is this normal? And is there a way to make <code>git reset --hard</code> to ignore the changes on the ignored files?</p>
","4","1273587","0","0"
"49245877","7220869","2018-03-12 23:17:16","2","3100","<eclipse><git><git-branch><git-reset>","How to revert back to a fresh branch on git (removing all uncommitted changes)","<p>How can I revert/delete all my changes that I did manually on local.</p>

<p>Example I have 2 branches</p>

<pre><code>1) master branch
2) branch2
</code></pre>

<p>I checked out branch 2 and started to do some changes locally. I accidentally replaced a word for all the files. So now all my files are unsynced.</p>

<p>I want to start fresh again. (What ever I have in branch 2 that was committed and pushed) and remove all my local changes.</p>

<p>I've tried </p>

<pre><code>git pull branch2
git reset --hard
git --hard branch2
git checkout .
</code></pre>

<p>But my recent changes are still existing in my local. Is there a command to revert this or do I have to clone the branch and start from there?</p>

<p>PS all my local changes were not committed at all.</p>

<p>Thank you</p>
","1","7220869","",""
"48268691","","2018-01-15 18:21:34","1","5340","<git><git-reset>","What exactly does ""git reset --hard 'HASH'"" do?","<p>I was revising the tutorials I took about git and something is bothering me. On the video about 'Undoing things' it says that there are three ways to undo changes, namely - checkout, revert and reset - with 'reset' being the most <em>dangerous</em> one because once a git repo has been reseted to a previous commit with the <em>--hard</em> flag <strong><em>there is no way</em></strong> of getting back to any commit(s) made after the one the programmer is resetting to. But when I execute the <em>'git reflog'</em> command I was able to see all the hash IDs that were generated from the commits I was making ever since the workspace was being tracked by git(as the tutorial is claiming these were not supposed to show up as they are permanently gone) and what's even more perplexing me is why does git allow me to checkout any of the previous commit(s) I have made?
<a href=""https://i.stack.imgur.com/VAaKd.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/VAaKd.png"" alt=""enter image description here""></a> </p>
","6","","",""
"66623005","13742862","2021-03-14 09:42:13","0","229","<git><git-branch><git-reset>","git reset all branches to origin?","<p>I want to reset multiple branches to their origin version. So,</p>
<pre><code>git fetch --all
for b in master work; do
  git switch $b; git reset --hard origin/$b
done
</code></pre>
<p>But simpler? I've thought about deleting all branches so they get recreated, but one has to be checked out and will error out.</p>
<p><strong>Edit</strong>: the scenario is that <code>origin</code> often rewrites multiple branches with impunity. The answer below also gave me the idea of saving various states to backup refs -- which is a nice bonus.</p>
","6","13742862","",""
"41012179","6521116","2016-12-07 08:01:49","2","242","<git><git-reset><git-revert><git-add>","How to undo the work after git add?","<p>There are many questions about git, so I google for a while before I asked here. I've not find any useful info.</p>

<p>Just make it easy,</p>

<pre><code>cat a.txt &gt;&gt; c.txt
git add .
cat b.txt &gt;&gt; c.txt
</code></pre>

<p>how to undo the last cat command.</p>

<p>Note here is just a simple to illustrate what I want, there are lot of modify before and after the git add.</p>

<p>The question may be duplicate, or the title is not proper, may someone helps?</p>
","3","6521116","0","0"
"49359058","1716560","2018-03-19 09:00:24","1","245","<git><git-reset>","How can I to do `git reset --soft <some-commit>` bypassing commits with merge?","<p>I have two branches - <code>master</code> and <code>some</code>:</p>

<pre><code>  C2---M3---C4---C5 some
 /    /
C1---C3---C6---C7 master
</code></pre>

<p>Where <code>C1</code>, <code>C2</code>... - it's commits and <code>M3</code> - merge commit <code>C3</code>.</p>

<p>I want to do:</p>

<pre><code>git checkout some
git reset --soft C1
</code></pre>

<p>But I want to get around the merge commit <code>M3</code>.</p>

<p>How can I to do this?</p>
","4","1716560","",""
"32226082","3881487","2015-08-26 12:00:59","2","718","<git><git-checkout><git-reset>","Difference between git reset --hard <filename> and git checkout -- <filename>","<p>As far as I understand, git reset --hard  will update  in the index and working directory to whatever the HEAD points to?</p>

<p>Git checkout --  will update  in working directory to whatever that file state in the INDEX is?</p>

<p>So if  is unstaged, then they will do the same thing (change the file in the working directory to its state in the HEAD/INDEX [which are the same state for that file])? But if it is staged then git reset --hard  will do as above, but Git checkout --  will do nothing?</p>
","4","3881487","",""
"32229870","2696258","2015-08-26 14:49:34","3","727","<git-commit><git-reset><git-revert><git>","Reverting accidentally commited changes on mainline, back to what is in the main repository on git","<p>I am working a project, and noob to git architechture. I have accidentally commited a few changes to mainline, now I want to revert them back to what is in the main repository. </p>

<p>Now I am on a new branch, but those commits are still there in the mainline branch. How do I do that?</p>

<p>And what exactly is HEAD, I am very much confused.</p>

<p>There are 3 commits i need to revert. So for one of them I did               ""git revert "". Now when I do ""git revert HEAD~3"" it shows I need to merge changes and commit n all. But I dont want those changes, that is why I reverted.</p>

<p>I might sound very foolish and confusing, but I am very new to this, and dont want to loose any changes, as its a very crucial project and rather dont want to mess up the mainline branch as well.</p>
","2","2696258","",""
"32230161","5205383","2015-08-26 15:01:58","10","6376","<git><version-control><git-checkout><git-reset>","Difference between git reset --hard and git checkout","<p>Let's say I want to undo all changes introduced by previous commits.</p>

<p>As far as I understand, <code>git reset --hard &lt;specified commit&gt;</code> will remove all commits up until the specified commit, and undo all changes.<br>
On the other hand <code>git checkout &lt;specified commit&gt;</code> will change my directory to reflect the specified commit.</p>

<p>So if I <code>git reset</code> after <code>git checkout</code> will it have the same result as <code>git reset --hard</code>?</p>

<p>Alternatively, if I simply <code>git commit</code> after <code>git checkout</code>, will the newly created commit overwrite the existing commits?</p>
","1","5205383","0","0"
"67013867","1265393","2021-04-09 01:26:05","1","151","<git><git-reset>","Make current git working copy equivalent to past commit","<p>Given a simple git repo where my branch is currently set to commit <code>C</code>:</p>
<pre><code>A--B--C
</code></pre>
<p>I want to &quot;reset&quot; my local copy index of staged/unstaged changes to be the same as <code>A</code>.</p>
<p>But, and this is the key, I do not want to change the checked out branch pointer. I do not want to reset back to <code>A</code>. I want the current uncommitted changes and/or next commit <code>D</code> to be equivalent to <code>A</code> while preserving the previous history of commits.</p>
<pre><code>A--B--C--D
         ^ same as A
</code></pre>
<p>So the local index should show the diff, on top of <code>C</code>, to change the repo back to the <code>A</code> state. If I then commit that change, it should create a new commit <code>D</code> that is equivalent to <code>A</code>.</p>
<p>How can this be done using git?</p>
<p>If this has already been asked, please alert me to duplicates. My ability to search for this behavior is failing me.</p>
","1","1265393","",""
"49527071","9562080","2018-03-28 05:54:30","0","909","<git><git-pull><git-reset><git-reflog><git-untracked>","Can git restore untracked files after a bad pull?","<p>I have an artist working in git for a class project. He had an asset in a working directory that was untracked. Before he committed the file, he preformed a pull to get the latest changes. An upper level folder must have been renamed and during the pull the folder he was working in was deleted and all of the tracked files were moved to the new folder. All of the untracked files appear to be deleted. Is there a way to restore the untracked files or to revert the repository using git reflog and git reset?</p>
","6","9562080","",""
"49556387","2174170","2018-03-29 12:42:22","0","1535","<git><git-rebase><git-extensions><git-reset>","Reset git branch to a specific commit and keep stashed changes (Using Git Extensions)","<p><a href=""https://i.stack.imgur.com/f1uMF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/f1uMF.png"" alt=""enter image description here""></a></p>

<p>As stated on the title. I was wondering what happens when I select the <code>Reset current branch to here</code>. I've stashed all the changes I made and want to:</p>

<ol>
<li>Revert the branch to a specific commit,</li>
<li>Merge changes from another branch, then</li>
<li>Use <code>Stash pop</code> to bring back my changes and commit.</li>
</ol>

<p>Will my stashed changes be lost? Is <code>Rebase current branch</code> the best option instead?</p>

<p><a href=""https://i.stack.imgur.com/sMPRk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/sMPRk.png"" alt=""enter image description here""></a></p>

<p>When resetting, should I select Soft, Mixed or Hard?</p>

<p>Thank you.</p>

<p><strong>Solution</strong> - I selected <code>Reset branch to here</code> and chose <code>Hard Reset</code>. Obviously sorted out a few merge conflicts and used <code>Stash pop</code> and committed.</p>
","0","2174170","",""
"4630312","320615","2011-01-07 21:09:19","428","254953","<git><git-commit><git-reset><git-revert>","Reset all changes after last commit in git","<p>How can I undo <em>every</em> change made to my directory after the last commit, including deleting added files, resetting modified files, and adding back deleted files?</p>
","2","320615","0","0"
"49648127","1650012","2018-04-04 09:58:38","8","9872","<git><gitlab><commit><git-reset>","How to completely remove a commit from gitlab?","<p>I made a commit in my git repo and pushed it, but accidentally it contained some passwords for our production machines. So I deleted the commit:</p>

<pre><code>git reset --hard HEAD~1
git push --force
</code></pre>

<p>That indeed removed the commit from the list of commits, but the url to the commit on gitlab still shows the source of the commit.</p>

<p>I'm not sure whether this is git which still saves the contents of the commit on the gitlab servers, or the gitlab databases which somehow store the contents of the commit, but I really need to completely remove that commit from the gitlab servers.</p>

<p>Does anybody know a way to completely remove a commit and it's contents from gitlab?</p>
","3","1650012","0","0"
"67317843","9608759","2021-04-29 12:55:41","1","63","<git><git-reset><git-add><git-patch>","Is it possible to undo a `git add` and go to the exact same staging index as before?","<p>I was trying to split my work into multiple commits. I have done this:</p>
<pre><code>git add --patch my_file
# accepted, rejected, manually edited many hunks
# ---&gt;
# now my silly mistake comes
git add my_file
git commit -m &quot;some commit message&quot;
</code></pre>
<p>I shouldn't have add that file as my changes are already on the staging index. Can I go back to that state (marked as <code>---&gt;</code> above)?</p>
","10","9608759","",""
"16695516","938548","2013-05-22 15:14:55","1","103","<git><git-reset>","git reset --soft altering my index","<p>As a newcomer to git, I'm investigating the various resets I can do.</p>

<p>I was under the impression that <code>git reset --soft</code> does not alter the index or the working directory, it only changes the head of the repo.</p>

<p>So I have performed a soft reset to a commit in the past.</p>

<p>Since neither my index or working directory are supposed to change, I would now expect a <code>git status</code> to say that I have untracked changes, because the files in my working directory would be more up-to-date than those in the repo which I've just gone back to.</p>

<p>However it tells me that my modified files are in the index? How can this be? I haven't committed them. Does a soft reset alter the index after all?</p>
","0","938548","",""
"16698025","938548","2013-05-22 17:24:47","0","31","<git><sha><git-reset>","Getting back to an erroneous git reset","<p>Say I'm working on a project and I'm making various commits as I go along</p>

<p>A - B - C - D - E</p>

<p>And I realise that I made a mistake and need to do <code>git reset</code> to go back to version C.</p>

<p>So I then carry on making commits like this: C - D2 - E2 - F2 - G2 etc.</p>

<p>Where D2 is different to D, E2 is different to E etc.</p>

<p>I then realise that I was right in the beginning, and I need to get back to E.</p>

<p>As long as I have kept a note of the SHA of version E, is this possible by doing <code>git reset hjsdkgjdfg</code> where hjsdkgjdfg is the hash of E? I've heard git 'cleans up' (deletes) loose ends every now and then - would D and E be classed as 'loose ends'? Does it depend on the type of reset I have done: soft, mixed, hard?</p>

<p>Bearing in mind I'm a beginner, is this the correct sort of workflow? Or is this a terrible way of working?</p>

<p>Thanks</p>
","0","938548","",""
"41644109","1223975","2017-01-13 22:00:15","0","269","<git><git-reset><git-rm>","un-deleting file after running ""git reset"" after running ""git rm""","<p>I accidentally ran <code>git rm file</code></p>

<p>to undo that I ran <code>git reset HEAD</code> which didn't restore the file, so then I ran <code>git reset HEAD~1</code> which didn't seem to restore the file either (this should be easy...)</p>

<p>Now I see this:</p>

<pre><code>Unstaged changes after reset:
M       test/.suman/logs/runner-debug.log
M       test/.suman/logs/test-debug.log
M       test/.suman/logs/test-output.log
M       test/.suman/logs/tests/test.test-src.alphabet.test.js.log
M       test/.suman/logs/tests/test.test-src.four.test.js.log
M       test/.suman/logs/tests/test.test-src.one.test.js.log
M       test/.suman/logs/tests/test.test-src.three.test.js.log
M       test/.suman/logs/tests/test.test-src.two.test.js.log
M       test/example.js
D       test/test-src/one.test.js
D       test/test-src/test-sort.js
M       test/test-src/z.test.js
</code></pre>

<p>what I am trying to do is restore</p>

<pre><code> D       test/test-src/one.test.js
</code></pre>

<p>how can I do that?</p>
","1","1223975","",""
"42684647","7391937","2017-03-09 00:43:14","2","391","<git><github><git-reset>","does git reset HEAD^ --hard delete everything?","<p>I was finished a project, I got a merge conflict, so I stupidly ran <code>git reset HEAD^ --hard</code> and now all my files are gone except my node modules folder (which was in .gitignore). Is there anyway I can recover my files?</p>

<p><strong>I'm using VScode</strong></p>
","1","7391937","",""
"23549287","2708477","2014-05-08 18:02:25","0","63","<django><git><webfaction><git-post-receive><git-reset>","post_receive hook in git: how does it checkouts my non-git folder?","<p>I am using <code>webfaction</code> for my <code>web deployment</code>.</p>

<p>I have a Django app at: webapps/django_app/project_name/</p>

<p>I have a Git repo at: webapps/git_app/repos/my_repo.git</p>

<p>my_repo.git is a bare repository. It is not a working directory.</p>

<p>whenever I push from my local development computer to the remote (webfaction --> my_repo.git), I want my django_app to get the pushed code.</p>

<p>I followed this <a href=""https://community.webfaction.com/questions/1246/using-git-with-applications"" rel=""nofollow"">post</a> which works fine. But no explanation of how this works is given.</p>

<p>I have added these two lines in <code>post_recieve</code> hook in my_repo.git.</p>

<pre><code>#!/bin/sh
GIT_WORK_TREE=/home/username/webapps/django/myproject git checkout -f 
GIT_WORK_TREE=/home/username/webapps/django/myproject git reset --hard
</code></pre>

<p>what does this two lines actually do? </p>

<p>Moreover, my Djangoapp folder is not a git repo. still whenever push is made to my_repo.git, Djangoapp gets updated. so how does it work?</p>
","0","2708477","",""
"5798930","632951","2011-04-27 03:13:02","181","212610","<git><git-reset><git-index><git-rm>","""git rm --cached x"" vs ""git reset head --​ x""?","<p><a href=""http://gitref.org/basic/"" rel=""noreferrer"">GitRef.org - Basic</a>:</p>

<blockquote>
  <p><code>git rm</code> will remove entries from the
  staging area. This is a bit different
  from <code>git reset HEAD</code> which ""unstages""
  files. By ""unstage"" I mean it reverts
  the staging area to what was there
  before we started modifying things.
  <code>git rm</code> on the other hand just kicks
  the file off the stage entirely, so
  that it's not included in the next
  commit snapshot, thereby effectively
  deleting it.</p>
  
  <p>By default, a <code>git rm file</code> will remove the file from the staging area entirely and also off your disk > (the working directory). To leave the file in the working directory, you can use <code>git rm --cached</code>.</p>
</blockquote>

<p>But what exactly is the difference between <code>git rm --cached asd</code> and <code>git reset head -- asd</code>?</p>
","0","632951","0","0"
"24216919","2885553","2014-06-14 05:36:31","0","800","<windows><git><pull><git-reset>","""git reset xxx"" command on windows does not perform the same action as linux?","<p>At the HEAD version, I have a mistake that pull another branch when I on master branch so that some new files or directories had been merged into master branch from another. I realize this is a very big mistake. So I use ""git reset xxx"" to restore into xxx commit version. However, after done command, I really back to xxx commit version and those new files or directories also are there. What's wrong with this action? Whether I take a wrong command? I just want to back to a clean old commit version without any changes by wrong pull action. Thx!</p>
","2","2885553","0","0"
"43078853","34935","2017-03-28 20:02:58","0","2118","<git><git-reset>","How do I reset master and keep my branch in git?","<p>Suppose I do</p>

<pre><code>$ git checkout master
$ touch foo.py
$ git commit -m ""oops"" foo.py
$ git checkout -b new_branch
$ touch bar.py
$ git commit -m ""changes"" bar.py
</code></pre>

<p>Now when I try to push back changes on new_branch, I get</p>

<pre><code>Local branch 'master' is ahead of remote branch 'origin/master'
</code></pre>

<p>How do I reset master while not losing my changes (foo.py, bar.py) on new_branch?</p>

<p>I read the <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-reset.html"" rel=""nofollow noreferrer"">git reset page</a>, and it looked like it might involve --keep, but I couldn't tell.</p>
","2","34935","0","0"
"61793204","12023261","2020-05-14 08:54:59","0","186","<git><github><git-reset><git-merge-conflict>","What is happening behind the scenes, with the commits and HEAD while trying to git reset --soft and undoing it?","<p>I Issued <code>git reset --soft HEAD~1</code> then I decided not to do this, I want to go back to my previous state.</p>

<p>So, I searched in Stack Overflow, then I got this answer:</p>

<blockquote>
  <p>Now I just want to go back to the time before I issued the reset</p>
  
  <p>If you only want to cancel the git reset --soft you just did, you can look up the former HEAD commit id in the reflogs</p>

<pre><code>$ git reflog
$ git reset --soft formerCommit
</code></pre>
</blockquote>

<p>I issued the <code>git reset --soft formerCommit</code> as mentioned. Then I checked the HEAD using <code>git reflog</code>--</p>

<p><a href=""https://i.stack.imgur.com/guJ9d.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/guJ9d.png"" alt=""enter image description here""></a></p>

<p>It created two more logs as you can see, but my head is at the required commit. So, I thought if I make new changes and push it, it will just work fine.</p>

<p>But no, I got this error (<strong>pushed after making a new change</strong>)--</p>

<pre><code>$ git push
To https://github.com/Arpan619Banerjee/Forkify_JS_app.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/Arpan619Banerjee/Forkify_JS_app.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>Though <code>git log</code> do not show those two extra logs shown in <code>git reflog</code></p>

<p><a href=""https://i.stack.imgur.com/iji2E.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iji2E.png"" alt=""enter image description here""></a></p>

<p><strong>So, now my questions are</strong> ---</p>

<ol>
<li><p>What is the correct way to revert changes in some files(not all the files previously committed) and push it again?</p></li>
<li><p>What is the advantage of using the commands that I issued in the question while resetting if I have to force the push?</p></li>
<li><p>After issuing <code>git reset --soft HEAD~1</code> , I could have <code>unstaged</code> the changes> made new changes>commited> forced the push.</p></li>
<li><p>Why do I always need to force the changes? I understand that the <code>Heads</code> have diverged, but isn't there any other way to <strong>gracefully</strong> do this?</p></li>
</ol>

<p>How can I understand the concepts, I am new to git and self learning it.</p>
","0","12023261","",""
"24899183","3113632","2014-07-22 22:51:11","1","231","<git><github><git-rebase><git-reset><squash>","How to squash git commit history up until 5 commits ago","<p>My repo has a huge number of commits and I would like to squash everything up until the last five commits - so at the end the repo would have a squash a commit and then my five most recent commits. </p>

<p>Before:</p>

<pre><code>10
9
8
7
6
5
4
3
2
1
</code></pre>

<p>After:</p>

<pre><code>10
9
8
7
6
squash commit
</code></pre>

<p>I tried git reset --soft at the end and beginning of the squashed portion, but I'm not sure how to keep my last five commits, which go away when I squash the portion before the five. </p>
","7","3113632","",""
"15772134","1117004","2013-04-02 18:56:15","1906","1071219","<git><undo><git-reset>","Can I delete a git commit but keep the changes?","<p>In one of my development branches, I made some changes to my codebase. Before I was able to complete the features I was working on, I had to switch my current branch to master to demo some features. But just using a ""git checkout master"" preserved the changes I also made in my development branch, thus breaking some of the functionality in master. So what I did was commit the changes on my development branch with a commit message ""temporary commit"" and then checkout master for the demo.</p>

<p>Now that I'm done with the demo and back to work on my development branch, I would like to remove the ""temporary commit"" that I made while still preserving the changes I made. Is that possible?</p>
","8","1117004","0","0"
"15896611","1959634","2013-04-09 08:10:12","2","99","<git><project-management><bitbucket><git-reset>","Convert pushed git commits into one","<p>I'm using a boilerplate for any new projects I make. However the commits I made in the boilerplate gets through to the new project. How would I go about to simply have an ""Intial commit"" which includes everything in one commit and removes the old commit history?</p>
","0","1959634","0","0"
"15947541","862380","2013-04-11 11:25:35","1","1044","<git><git-reset>","HEAD position in the example from git docs on stash command","<p>I have been reading <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-stash.html#_examples"" rel=""nofollow"">the examples</a> of how <code>stash</code> command can ease the life and came across this code snippet:</p>

<pre><code># ... hack hack hack ...
$ git checkout -b my_wip
$ git commit -a -m ""WIP""
$ git checkout master
$ edit emergency fix
$ git commit -a -m ""Fix in a hurry""
$ git checkout my_wip
$ git reset --soft HEAD^
# ... continue hacking ... 
</code></pre>

<p>As I get, what happens here is the following:</p>

<p>We create a new branch at the current commit:</p>

<pre><code>--1
  |
  master
  my_wip
  HEAD
</code></pre>

<p>Then we stage modified files and make new commit to <code>my_wip</code> branch:</p>

<pre><code>--1 ------------ 2
  |              |
  master         my_wip
                 HEAD
</code></pre>

<p>Then we checkout <code>master</code>:</p>

<pre><code>--1 ------------ 2
  |              |
  master         my_wip
  HEAD
</code></pre>

<p>Then we modify some files and make a new commit (with preliminary staging (<code>-a</code> flag)):</p>

<pre><code>                 HEAD
                 master
                 |
    -------------3
   /
  /
--1 ------------ 2
                 |
                 my_wip
</code></pre>

<p>Then we checkout <code>my_wip</code>:</p>

<pre><code>                 master
                 |
    -------------3
   /
  /
--1 ------------ 2
                 |
                 my_wip
                 HEAD
</code></pre>

<p>Then we do <code>git reset --soft HEAD^</code>.</p>

<p>After this command I expect git to move <code>HEAD</code> to its previous position, namely <code>3</code> commit. So I expect it would get us into this stage (with working directory and staging area from <code>2</code> commit):</p>

<pre><code>                 HEAD
                 master
                 my_wip
                 |
    -------------3
   /
  /
--1 ------------ 2
</code></pre>

<p>But as I'm getting from the docs, it does this (as after unstashing we should get to the position where we were when decided to stash):</p>

<pre><code>                master
                 |
    -------------3
   /
  /
--1 ------------ 2
  |              
  my_wip
  HEAD           
</code></pre>

<p>Does it mean that <code>HEAD^</code> is the previous position of the current branch and so it is dependent of the branch selected (I always thought that <code>HEAD^</code> is just the previous position of <code>HEAD</code> regardless of the current branch)? Or am I miscomprehending something?</p>
","1","862380","",""
"32630379","5269166","2015-09-17 12:32:12","27","66019","<git><git-commit><git-reset>","git: Your branch and 'origin/somebranch' have diverged - how to throw away local commits","<p>I have a question that most closely matches my problem was made, but could not add a comment.</p>

<p><a href=""https://stackoverflow.com/questions/19864934/git-your-branch-and-origin-master-have-diverged-how-to-throw-away-local-com"">git: Your branch and &#39;origin/master&#39; have diverged - how to throw away local commits?</a></p>

<p>I ran the tips and answers to the question above, but nothing decided. I am following with a progress chart using the sofwae source tree. I close the software and run the commands in the bash git. But there is the same mistake quoted.</p>

<pre><code># Your branch and 'origin/master' have diverged,
# and have 7 and 11 different commits each, respectively.
#   (use ""git pull"" to merge the remote branch into yours)
</code></pre>

<p>I am also facing the same problem. follow the steps running 2 comentos but not worked. I think my problem is that before I made a checkout for a indiividual head, made a commit in individual head and then I went back to the tree branch / master, and commit that I did, I believe that references the tree head individual. In summary I can not undo this commit, I'm displayed graphically on SourceTree software</p>

<p><strong>EDIT - ADD INFORMATION:</strong>
I'd like to throw out of the unpublished commits and make server checkout. But the solutions I found an internet not working. I also tried git reverse in gitBash the console displays the message that I do deveo</p>

<pre><code>$ Git status
On branch processos_criminais_151029
Your branch and 'origin / processos_criminais_151029' have diverged,
and 7 and 11 have different commits each, respectivamente.
   (use ""git pull"" to merge the remote branch into yours)

Changes not staged for commit:
   (use ""git add &lt;file&gt; ..."" to update what will be committed)
   (use ""git checkout - &lt;file&gt; ..."" to discard changes in working directory)
</code></pre>

<p>I tried the two solutions but none worked. If I try and push gives the conflict a huge amount of files, and I tried to solve these problems with the automatic merge, but to make a new git status he points out that the same quantidde files are conflicts.</p>
","4","5269166","0","0"
"68792991","12226311","2021-08-15 15:35:26","0","155","<git><git-commit><git-reset>","Delete initial git commit of main branch","<p>How can I delete all the commits <strong>including initial commit</strong> from the main branch of my git project?</p>
<p>I know we can do it by deleting .git directory and reinitializing the git project. However, I will miss all the commit history. So is there a way to do it using git commands?</p>
","4","12226311","",""
"16108638","180581","2013-04-19 15:53:32","2","196","<git><git-push><git-reset>","git push -f: How to make sure other people catch up?","<p><em>Note: I know <code>git push -f</code> questions are common, but I really couldn't easily find answers to this specific question anywhere. I want a comprehensive answer, not just something that somewhat solves my problem. At the end of the question I propose a solution myself.</em></p>

<p>I've pushed some changes to a branch I should not (at work). I have already <code>git revert</code>'ed the changes, but one of the team coordinators wanted me to actually <code>git reset &lt;old commit&gt; &amp;&amp; git push -f</code> so that the history wouldn't be cluttered by the revert commits. Few people use that branch, so we thought it was worth the risk.</p>

<p>It worked, but I'm afraid that people who had already pulled my commits may accidentally fast-forward the remote branch again, since the history hasn't diverged yet (I just resetted to an old commit, but didn't make any other commit on top of that one).</p>

<p>I noticed that if I <code>git reset &lt;old HEAD commit&gt; &amp;&amp; git status</code>, Git says it's a couple commits ahead of <code>origin/&lt;branch&gt;</code>, so I'm sure if I <code>git push</code> again, Git will just fast-forward it.</p>

<p><code>git pull</code> says the repo is up-to-date and doesn't backtrack (which I don't think it should, anyway). But then, what should I do to make sure everyone backtracks to the right HEAD on <code>origin/&lt;branch&gt;</code> and work from there? Do I need to ask everybody to <code>git reset origin/&lt;branch&gt;</code> before resuming work on that branch? I really wanted something easier and less error-prone (they might forget to do it).</p>

<p>I know I shouldn't be git resetting a branch on a shared repo, but you know how it is... Sometimes you just feel adventurous, or maybe your superior asked you to do it and you know it's wrong but it could be an educational experience anyway :P</p>
","0","180581","",""
"50497010","2924482","2018-05-23 20:30:50","2","1792","<git-reset><git>","GIT: After git reset --hard HEAD still shows uncommitted changes","<p>I git reset hard my local directory:</p>

<p><code>git reset --hard HEAD</code></p>

<p>But still shows this:</p>

<pre><code>git status
On branch step4
Untracked files:
  (use ""git add &lt;file&gt;..."" to include in what will be committed)

    ./

nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>Any of you knows how can fix this?</p>

<p>I'll really appreciate your help.</p>
","2","2924482","",""
"16994795","1467997","2013-06-08 00:32:06","0","57","<git><git-reset>","Make earlier version in git the latest version?","<p>What should I do in git if I've found myself wanting to return to an earlier version in my history, and commence editing from there? (i.e., make some earlier version to the forefront and start committing/pushing to it)? Doing <code>git reset --hard HEAD~1</code> will take me back in time to previous versions, but what do I do once I've found the version I want? If I try to do a <code>git push</code> from this position, it tells me</p>

<pre><code>error: failed to push some refs to 'https://github.com/thinkpad20/router.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.
</code></pre>

<p>But I don't want to pull the remote changes -- I don't want anything but the version I have now.</p>
","0","1467997","",""
"33680257","3854612","2015-11-12 19:59:26","0","43","<git><git-reset><git-fsck>","How to restore a git reset --hard HEAD@{1}","<p>I do a </p>

<pre><code>git reset --hard HEAD@{1}
</code></pre>

<p>But I removed some things wrongly. I try solve it</p>

<pre><code>git fsck −−lost-found
</code></pre>

<p>But it no found the ""revert""</p>

<p>Thanks...</p>
","4","3854612","",""
"17245427","1352101","2013-06-21 22:50:53","1","1240","<git><git-merge><git-reset>","How to `git reset` After `git merge --no-commit --no-ff`","<p>I am a newbie to git.
I was working on a branch that involved lot of moving around of the code, including deletion of old and addition of new files. Therefore I decided to do a dry-run of git merge before actually merging:</p>

<p>I ran <code>git merge --no-commit --no-ff &lt;myBranchName&gt;</code>. After I ran this, it showed me some conflicts. Then I did git status and result was: </p>

<pre><code>My-Macbook-pro:[master] $ git status
# On branch master
# You have unmerged paths.
#   (fix conflicts and run ""git commit"")
#
# Changes to be committed:
#   modified:   common/TP.php
#   deleted:    common/model/Job/Request.php
#   new file:   common/DP.php
#
# Unmerged paths:
#   (use ""git add/rm &lt;file&gt;..."" as appropriate to mark resolution)
#
#   both modified:      .gitignore
#   both added:         build/release/current/production.sql
#   deleted by them:    common/Service/DFPASPAdapter.php
#   both modified:      common/Ze.php
#   deleted by them:    common/model/provider/DFPASP.php
</code></pre>

<p>Then to undo <code>git add</code>(which happened because of the <code>git merge</code> dry run), I ran <code>git reset HEAD</code>. But later on I realized/learnt that in order to get back to the stage the master branch was in before merge(ie exactly same as what is committed to master), I will need to run <code>git reset --hard HEAD</code>
After I ran the hard reset, <code>git status</code> shows the following:</p>

<pre><code># On branch master
# Untracked files:
#   (use ""git add &lt;file&gt;..."" to include in what will be committed)
#
#   build/release/current/upgrade.php
#   common/F1.php
#   common/F2.php
#   common/F3.php
nothing added to commit but untracked files present (use ""git add"" to track)
</code></pre>

<p>The above files F1, F2, F3 and upgrade.php were added in the branch that I was working on. I was hoping that <code>git reset --hard HEAD</code> will make the <code>master</code> branch forget about anything related to the branch I was trying to merge (dry run).</p>

<p>Is this something that is possible? 
Is there something I am missing in the concept? And am I left with the only option of removing the files manually? 
Any help in making me understand more will be great! 
Thanks!</p>
","0","1352101","",""
"33832587","3607573","2015-11-20 17:24:19","4","1095","<git><git-reset>","difference between soft reset and amend commit in git","<p>I am learning git and came across git soft reset and amending a commit in git. I see both of them serving the same purpose. Any notable difference between the two. Please let me know since I am not able to see any difference between the two. </p>
","1","3607573","",""
"33849704","572747","2015-11-21 23:09:21","23","14809","<git><git-reset><unstage>","git reset vs git reset HEAD","<p>Every time a file has been staged, Git offers helpful instructions in the event you needed to unstage a file:</p>

<p><code>(use ""git reset HEAD &lt;file&gt;..."" to unstage)</code></p>

<p>However the decent <a href=""https://www.atlassian.com/git/tutorials/undoing-changes/git-reset"" rel=""noreferrer"">Git Tutorials by Atlassian</a> simply say:</p>

<p><code>git reset &lt;file&gt;</code></p>

<p>This seems more straightforward, so why the difference?</p>
","1","572747","0","0"
"18114774","709943","2013-08-07 22:17:39","4","116","<git><git-checkout><git-reset>","What is the point for git reset accepting paths as an argument when we have git checkout?","<p>I understand <code>git reset</code> updates the index, whereas <code>git checkout</code> updates the working copy. What I don't understand is the use case that requires <code>git reset</code> to accept an argument for reference and path? It seems I would always want to use <code>git checkout</code> in this case?</p>

<p>This comes up all the time when folks ask why they can't <code>git reset some-ref --hard -- some/path/to/file</code>. The real question is why <code>git reset</code> even accepts <code>git reset some-ref -- some/path/to/file</code> when we have <code>git checkout</code>.</p>

<p>Never thought of this till teaching someone the difference between the two.</p>
","3","709943","0","0"
"18193154","542550","2013-08-12 17:34:02","0","222","<git><git-merge><git-push><git-pull><git-reset>","Reverting a git pull that's already been pushed","<p>I'm not sure if this is a duplicate or not as it's kind of a one off scenario:</p>

<p>I have a ""beta"" branch, and started a new ""refactor"" branch.</p>

<ol>
<li>I did a bunch of code in ""refactor"" branch.</li>
<li>I pulled latest changes from beta into refactor (<code>git checkout refactor &amp;&amp; git pull origin beta</code>)</li>
<li>My changes were ready, so I checked out beta, and pulled changes from refactor into beta.  (<code>git checkout beta &amp;&amp; git pull origin refactor</code>)</li>
<li>Realized my beta branch wasn't up to date, so had to do a <code>git pull</code> to pull latest into beta.</li>
<li>Now that beta branch was up to date, did another <code>git pull origin refactor</code> to ensure the latest was there (got an auto-commit message that refactor was being merged into beta).</li>
<li>I pushed my code :(</li>
</ol>

<p>So now I'm realizing the two things I did wrong:</p>

<ol>
<li>In step 3, I should have done a git pull first so that I had the latest changesets in beta</li>
<li>In step 3 also, I realized i should have called <code>git merge refactor</code> instead of <code>git pull origin refactor</code> (don't ask me why I did this, it's Monday and I just wanted to get my awesome refactor code into beta to start testing).  I now realize if I had done both of these things, none of the later steps would have been needed.</li>
</ol>

<p>So my question is this: technically, all the code is there and looks fine, but the network graph on github looks super funky, and I don't have one clean ""merge"" commit that I can easily roll back to if my merged branch needs to be reverted, instead beta just now has all of my individual commits from the refactor branch.  Is there an easy way I can roll back my stupified merge and do it the cleaner way?</p>

<p>I have tried doing <code>git checkout beta &amp;&amp; git reset --hard beta@{""1 hour ago""}</code> , but the problem is that gets me to the <em>outdated</em> local version of beta instead of what should have been the latest version before I issued the merge when I should have done the git pull first.  I feel like there should be a way to do like <code>git reset --hard origin/beta@{""1 hour ago""}</code> to reset to the <em>remote</em> beta branch @ 1 hour ago, and then do the <code>git merge refactor</code>?  Would I just be able to push those changes and be sure that the remote commits were overwritten?</p>

<p>Thanks for any help in advance!  I'm hesitant about doing anything with ""git reset"" as the refactor is pretty major, and there are a lot of pending changes in beta that I didn't do, so I'm more worried about screwing up a reset and losing code than I am worried about having to manually revert commits from the refactor branch that were pulled in.</p>
","0","542550","0","0"
"18248766","928763","2013-08-15 08:18:46","3","2131","<git><git-checkout><git-reset>","git checkout -f master VS git reset","<p>I want to revert all the uncommited changes in current branch say '<code>master</code>'. Whats the best one to use amoung the following and WHY??:</p>

<ol>
<li><code>git checkout -f master</code></li>
<li><code>git reset --hard &lt;last commitID&gt;</code></li>
</ol>
","2","928763","",""
"34805770","3523101","2016-01-15 06:59:44","2","3438","<git><git-commit><git-reset><git-revert>","how to revert TILL specific commit in git","<blockquote>
  <p>i want to revert <strong>TILL</strong> <strong>specific</strong> commit in <strong>git</strong></p>
</blockquote>

<p>i have done 3 commits in git</p>

<ul>
<li>1st commit  > 1:am</li>
<li>2nd commit  > 2:am</li>
<li>3rd commit  > 3:am</li>
</ul>

<p>now i want to <strong>revert</strong> directly to this <strong>specific</strong> 1st commit !</p>
","0","3523101","0","0"
"18388842","764468","2013-08-22 19:03:58","1","154","<git><git-reset>","What will happen to uncommited and unstaged files after git reset --hard?","<p>I'm trying to understand git reset command. I have a initial commit_A containing a file file_1.</p>

<ul>
<li><p>Now I added file_2 in my working directory which I haven't
staged. If I run <code>git reset --hard</code> now, file_2 still remains in working directory.</p></li>
<li><p>But if I stage file_2 and then run <code>git reset --hard</code> ,file_2 is unstaged and also removed from working directory.</p></li>
</ul>

<p>Why is file_2 removed from working directory in second case and not removed in first case ?</p>
","0","764468","0","0"
"18440216","1860929","2013-08-26 08:52:51","0","223","<git><github><git-reset><git-dangling>","Do dangling git add blobs get pushed to master repository?","<p>We can recover files, which were once added (but not committed) and later removed using git reset --hard.
See <a href=""https://stackoverflow.com/questions/1108853/recovering-added-file-after-doing-git-reset-hard-head"">Recovering added file after doing git reset --hard HEAD^</a></p>

<p>When we push in our changes to some upstream repository, Are these blobs also pushed in?</p>

<p>Context: While doing any development, I occasionally do a git add on files changed, but don't commit them. This one time, I did a git add with some critical api credentials, and I was wondering if they could be recovered from the logs if I were to ever open-source the repo/gem.</p>
","0","1860929","",""
"4850717","457036","2011-01-31 12:14:48","901","1093739","<git><git-reset><git-commit>","How to cancel a local git commit?","<p>My issue is I have changed a file e.g.: README, added a new line '<em>this for my testing line</em>' and saved the file, then I issued the following commands:</p>
<pre><code>git status

# On branch master
# Changed but not updated:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#   modified:   README
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)


git add README

git commit -a -m 'To add new line to readme'
</code></pre>
<p>I didn't push the code to GitHub. Now I want to cancel this commit.</p>
<p>For this, I used</p>
<pre><code>git reset --hard HEAD~1
</code></pre>
<p>But I lost the newly added line '<em>this for my testing line</em>' from the README file.
This should not happen. I need the content to be there. <strong>Is there a way to retain the content and cancel my local commit?</strong></p>
","2","457036","0","0"
"22977929","703308","2014-04-10 03:07:18","2","1838","<git><git-reset><git-add>","How could git reset --soft reset last commit without touching index file?","<p>This might be a noob question. </p>

<p>Suppose I have a Git repo which already have some files in the staged area by using git add. and then I do a <code>git reset --soft @~</code></p>

<p>I am happy to see some files I committed last time are put into staged area now.</p>

<p>But how? I check <code>.git</code> folder. the only thing changed are ref of current branch. and one ""ORIG_HEAD"" which I think is not relevant. the most suspicious index file is not touched at all. and also can anyone tell me how to view the content of it? </p>

<p>So how could git do this? Thanks.</p>
","0","703308","",""
"23227927","2370337","2014-04-22 18:54:11","66","51994","<git><git-reset>","How do I move master back several commits in git?","<p>I have a git repository which holds a Drupal site.  I spent the last day trying to build a feature using several different modules.  I have given up on my current approach and have decided to try a different combination of modules.  However, my repository has several commits on the master branch that contain this feature development process (I understand that I did not branch in an effective manner.)  I want to get rid of the last three or four commits and set master to that point in my history (I don't want to merge my current work with anything, I just want it to go away.)  How do I do this?</p>
","4","2370337","0","0"
"42446970","4884487","2017-02-24 19:39:31","0","334","<git><git-reset>","Unclear Documentation of the git reset <path> command","<p>Taken from the <a href=""https://git-scm.com/docs/git-reset#git-reset-emgitresetem-qlttree-ishgt--ltpathsgt82308203"" rel=""nofollow noreferrer"">docs: <code>git reset &lt;path&gt;</code></a>: </p>

<blockquote>
  <p>After running git reset  to update the index entry, you can use git-checkout[1] to check the contents out of the index to the working tree. Alternatively, using git-checkout[1] and specifying a commit, you can copy the contents of a path out of a commit to the index and to the working tree in one go.</p>
</blockquote>

<p><strong>Q</strong> Can someone provided an example for what is meant with the cited paragrah ? </p>

<hr>

<p><strong>Note</strong> This questions specifically asks for the cited paragraph of the  <code>git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…​</code> variant. I am aware of what <code>git reset &lt;path&gt;</code> does but can not make any sense of the snippet above</p>
","0","4884487","",""
"62098803","2010357","2020-05-30 06:42:13","1","386","<git><git-rebase><git-reset>","Actually delete a git commit in such a way that it disappears from the log","<p>I cannot find a way to delete a targeted commit from the log. Documentation about deleting commits either just resets a pointer using reset (which does not delete anything, it just resets pointers), or rebase, which creates a new structure of some sort at the deleted commit. The hash of the targeted commit still appears. There may be old documentation out there related to </p>

<pre><code>git rebase -i fork1~1 fork1~3
</code></pre>

<p>because in older messages, it states to delete a line in the editor, that is, the line corresponding to the targeted commit. When I get into the interactive editor, one of the choices is ""drop"", which it says removes the commit. However, I have not successfully removed any commits in the sense that they disappear from the log. I insert the word drop, and it creates some sort of fork-looking thing in the log output. But I can still see the hash of the commit I am trying to remove. Simply put, I want to identify a hash to remove and have it no longer appear in the log. </p>

<p>So, the idea here is to drop 1bc7112:</p>

<pre><code>*   4518859 (refs/stash) WIP on fork3: 8c438a9 Added first.bsh back in
|\
| * 1bc7112 index on fork3: 8c438a9 Added first.bsh back in
|/
* 8c438a9 Added first.bsh back in
* eef828f (HEAD -&gt; fork4) Removed using git rm
* c21cda0 Third change.
</code></pre>
","5","2010357","0","0"
"25294485","139163","2014-08-13 19:24:37","1","288","<git><git-branch><git-reset>","How do I revert changes in local git branch to remote tracking branch?","<p>I know enough of git to be dangerous. I am working on frameworks/base git of android repo. 
I changed to a branch p/androidopt. This branch has remote tracking branch vsg/p/androidopt.</p>

<p>Later I made changes and commited them to local branch. I have around 17 of them. I didn't push these changes to remote tracking branch. They are available only in my local branch.</p>

<p>Now I want to reset my local branch to remote tracking branch (i.e vsg/p/androidopt) ignoring all the changes in the local branch.</p>

<p>Can someone provide a git command to do this using the above branch names?</p>

<p>Thanks</p>
","1","139163","",""
"62974418","3310334","2020-07-18 22:27:42","0","18","<git><git-reset>","Return to state before two git resets","<p>I read <a href=""https://stackoverflow.com/a/19517177/3310334"">this answer</a> and (wrongly I guess) thought that it meant <code>git reset</code> could also be used to casually browse through the repository's historical states.</p>
<p>So I went and <code>git reset {some old sha1}</code> to see what the files and state of the repository looked like back then.</p>
<p>Then I wanted to get back so I did <code>git reset HEAD</code>.</p>
<p>But now I can see my repository is not as it was before, and I have no idea what kind of state it's in right now.</p>
<p>How do I return to before all of this happened?</p>
","5","3310334","",""
"25762376","3088045","2014-09-10 09:53:30","2","397","<git><github><version-control><git-push><git-reset>","Will 'git reset' + 'git push' send my detached commits to the remote repository?","<p>I have a branch in my repository with a new commit (say <em>'Commit A'</em>) regarding a new change.
And I didn't push the commit yet to the remote repository.</p>

<p>Now, one fix is missing from this commit and I would like to:</p>

<ul>
<li><code>git reset HEAD~1</code>    (come back to the previous commit A-1, putting back the last committed changes in the working directory)</li>
<li>change the files for the missing fix</li>
<li><code>git add .</code></li>
<li><code>git commit</code> (say <em>'Commit B'</em>)</li>
<li><code>git push</code></li>
</ul>

<p>My question is mainly regarding the reset commit (<em>A</em>).</p>

<ul>
<li>will it stay around as detached commit? Or will it still be in my branch?</li>
<li>will this push the <em>'Commit A'</em> to the remote repository in any way?</li>
<li>will it mess my history? Or <code>git push</code> will just sync the commit into the branch, ignoring the detached ones? (that is <em>'Commit A'</em>)</li>
</ul>

<p>And finally</p>

<ul>
<li>what if instead I had <em>'Commit A'</em> already pushed and try to do the same sequence of operations?</li>
</ul>
","0","3088045","0","0"
"23207542","1676287","2014-04-21 23:08:36","3","259","<wordpress><git><git-submodules><git-reset>","WordPress as git submodule, accidentally updated through WP admin instead of git, now modified content","<p>I followed David Winter's workflow to ""Install and Manage WordPress with Git."" WordPress is a git submodule. On the latest WordPress 3.9 upgrade, I accidentally updated through the WordPress admin instead of via git. Now when I run <code>git status</code> I get:</p>

<pre><code>modified:   wordpress (modified content, untracked content)
</code></pre>

<p>Which makes sense. But I can't commit the modified wordpress content. The WordPress submodule is dirty. If I run <code>git diff</code> within my main repo, I get this:</p>

<pre><code>-Subproject commit 22bb60277036651db73dc872eaa7d2a50276b00d
+Subproject commit 22bb60277036651db73dc872eaa7d2a50276b00d-dirty
</code></pre>

<p>What's the best way to fix this? If I run the following within my main repo, will it mess up my WordPress install? (Note: I had also updated some plugins.)</p>

<pre><code>git clean -dfx             # delete everything in the worktree that isn't tracked
git reset --hard           # wipe all modifications to tracked files
git checkout 3.8.1         # return to previous version tag
</code></pre>

<p>Update: The commands above work perfectly. I checked the documentation on git clean to learn what the options 'd', 'f', and 'x' were: <a href=""https://www.kernel.org/pub/software/scm/git/docs/git-clean.html"" rel=""nofollow"">https://www.kernel.org/pub/software/scm/git/docs/git-clean.html</a>. After I ran the previous commands within the WordPress directory, I was able to then checkout version 3.9, thus correctly updating WordPress.</p>
","4","1676287","0","0"
"34460093","3917064","2015-12-25 04:45:25","2","185","<git><git-reset>","Undoing a git reset to uncommited state before reset?","<p>So I was just testing some things on my <code>master</code> branch but knew I wanted to reset/revert to the last commit on <code>master</code> to before I started these test feautures. So I immediately create a new branch (lets call it <code>testfeatures</code>) that I thought would not be affected by using <code>git reset --hard</code> while on the <code>master</code> branch. The new <code>testfeatures</code> branch was created in the same state as the master (so it still had all those test features), and I then checked out back to master. While on master, I used <code>git reset --hard &lt;#lastcommitidhere&gt;</code>. Now, this reset my master branch to how I wanted it, but come to find out it also reset the previously create 'testfeatures' branch (after creating this branch, I didnt commit anything before switching back to master and resetting). </p>

<p>So my question is, how would I undo the reset back on any branch to get those test features back? Is it possible? Also, why did resetting master have an affect on my other branch, as I thought they were isolated?</p>

<p>Also, the ""test features"" were not commited on the master branch either before the reset.</p>
","6","3917064","",""
"60600129","7924943","2020-03-09 11:59:09","0","316","<git><visual-studio-2019><pull-request><git-reset>","delete committed changes in git","<p>I accidently pushed changes to my <code>Dev</code> branch that I now want to get rid of. Not reverting, but completely deleting them.
Because of constraints set to the <code>Dev</code> branch, I cannot commit directly to that branch, but via a pull request.
These are my steps:
I created a new branch based on <code>Dev</code>, called <code>Dev_Reset</code>.
Then:</p>

<pre><code>git reset 4db52f3  --hard
HEAD is now at 4db52f3 last_changes_to_keep

git push origin -f
</code></pre>

<p>The Dev_Reset branch is then pushed to the remote repo. However, when I create a pull request, there are no differences to incorporate, because it says there are no differences between <code>Dev_Reset</code> and <code>Dev</code>. If I look at the history of the branches in Visual Studio, I see that both <code>HEADS</code> (local <code>Dev</code> and <code>Dev_Reset</code>) are at commit <code>4db52f3</code>, but for some reason I cannot push this to my main <code>Dev</code> branch.</p>

<p>Also, in the history overview I still see all the commits that I wanted to delete using the <code>git reset xxx --hard</code> command, listed above the <code>HEADS</code>. No other branches are pointing to any of the commits that I want to delete.</p>

<p>I am aware of the dangers of <code>git reset --hard</code>, but currently I'm the only one working on this branch.
How can I make all these commits go away and reset my main <code>Dev</code> branch to the correct commit?</p>

<p>Thanks</p>

<p>Edit (09 march 2020)
As Igal S and LeGEC suggested below, I had to adjust the settings of the Dev branch, and then I could apply my changes here. The concerns regarding fetched branches by other coworkers were noted, my team has been informed. Currently, no one had pulled the respective branch recently. Thanks for the help!</p>
","0","7924943","",""
"60751071","13086209","2020-03-19 04:47:22","0","988","<git><git-reset><git-revert>","How to undo a git commit and push, reset to merge","<p>Here is my current situation. I merged a branch into my <code>live</code> branch and pushed it to the remote repository. But, there was an issue with code on that branch. I want to revert this <code>live</code> back to a previous commit which happens to be another merge into the <code>live</code> branch. How would I do this? </p>

<p>I don't quite understand the difference between git <code>revert</code> <code>reset</code> and <code>rebase</code>, and am not sure which of any of these is appropriate in this case. </p>
","10","13086209","",""
"23494569","236081","2014-05-06 12:20:29","0","1031","<git><git-stash><git-reset><git-clean>","Is ""git clean"" followed by ""git stash clear"" redundant when creating a pristine checkout?","<p>I would like to write a script that guarantees a successful Git checkout without intervention from the user. I don't mind dumping anything that cannot be solved without user intervention: for example, uncommitted changes. I do want to keep explicitly ignored files (I consider these to be ""under version control"").</p>

<p>I made a script based on the cornucopia of answers to <a href=""https://stackoverflow.com/questions/52704/how-do-you-discard-unstaged-changes-in-git"">How do you discard unstaged changes in Git?</a> and fixing errors I encountered over time (similar to but not exactly the same as <a href=""https://stackoverflow.com/questions/11383094/unstaged-changes-left-after-git-reset-hard"">Unstaged changes left after git --reset hard</a> and <a href=""https://stackoverflow.com/questions/14318234/ignoring-your-local-changes-to-the-following-files-would-be-overwritten-by-merg"">Ignoring “Your local changes to the following files would be overwritten by merge” on pull</a>).</p>

<p>I am now concerned that my piecemeal script contains redundancies, or could be shortened. Are any of the following calls redundant?</p>

<pre><code>cd /SOME/FOLDER
git clean -df &amp; git checkout .
git stash
git stash clear
git checkout SOME-BRANCH # or git checkout -B SOME-REMOTE SOME-BRANCH [1]
# possibly followed by a manual call to: git pull --rebase SOME-REMOTE
</code></pre>

<p>[1] Could these calls be <code>git checkout -f</code> and <code>git checkout -fB</code>?</p>
","0","236081","0","0"
"60977510","2041365","2020-04-01 18:07:53","1","621","<git><git-reset>","Is running (git reset head~2) equivalent to running (git reset head^) twice?","<p>If I have two commits on the local branch, and I run <code>git reset head^</code> twice. Will it just undo the two commits, or will I run into problems?</p>
","1","2041365","",""
"42806711","2773530","2017-03-15 10:14:13","1","2134","<git><git-pull><git-reset>","Git: Remove unstaged changes after undoing a git pull?","<p>I did a pull of a different branch by mistake and did <code>git reset HEAD@{1}</code>
to undo it. Now when I type <code>git status</code> I get a huge list of untracked and modified files from the branch that I pulled.</p>

<p>How to remove them from staging so that I do not have to commit them?</p>
","0","2773530","0","0"
"61506568","11546077","2020-04-29 16:19:42","1","34","<git><git-reset>","How can I use git reset for editing old commits","<p>1) Is there a way to edit or squash commits without using the Interactive mode of git rebase?
2) How do <code>git reset --keep</code> and <code>git reset --merge</code> work and how do they differ? I have read the git book, but I do not understand it yet...</p>
","3","11546077","",""
"5991792","430766","2011-05-13 12:25:50","0","45","<git-rebase><git-reset>","rebasing git branches that were rewritten since branching","<p>I have a git repository and two branches <code>master</code> and <code>st</code> (branched from <code>master</code>). I want to rebase <code>st</code> onto <code>master</code>. However, <code>master</code> has been massively rewritten by somebody else, to be frank I'm not sure why, but we were prompted to <code>fetch</code> the new <code>master</code> and <code>reset --hard</code> our private branches to it.</p>

<p>If I try <code>git-rebase</code> the listing of non-trivially conflicted files that need manual merges span over two screen pages.
I know that the actual changes are not that much. For one, the <code>st</code> branch only touched a handful of files (not more than ten, I'd guess).</p>

<p>Besides rebasing I tried to create a patch and apply it, but there are some conflicts as well, which I have no clue how to resolve.</p>
","0","430766","",""
"24568936","3661075","2014-07-04 07:32:30","140","377311","<git><undo><git-reset>","What is difference between 'git reset --hard HEAD~1' and 'git reset --soft HEAD~1'?","<p>I tried to undo my commit in git. Is it dangerous to use <code>git reset --hard HEAD~1</code>?</p>

<p>What is the difference between different options for <code>git reset</code>?</p>
","1","3661075","0","0"
"61175926","5775003","2020-04-12 18:05:10","1","44","<git><git-reset>","Is it possible to bring back not staged changes after git reset --hard HEAD@{1}?","<p>After a pull request, git showed a long list of staged files which I have not modified.
<a href=""https://i.stack.imgur.com/lWzBw.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lWzBw.png"" alt=""enter image description here""></a></p>

<p>Then I've made the stupid decision to execute <code>git reset --hard HEAD@{1}</code> and lost the not staged changes.
Is there a solution to bring them back?</p>
","1","5775003","",""
"24492647","1197249","2014-06-30 14:36:29","0","45","<git><version-control><git-log><git-reset>","Why can I git show a commit I just did a git reset?","<p>I did a <code>git commit</code> but I included files I should not have.<br>
Let's say commit 321232323232<br>
That was the top commit. I did <code>git reset --soft HEAD~1</code> 
and I can see my files as they were before I did the wrong commit
and when I do a <code>git log</code> I don't see the bad commit but when I do
<code>git show bad_commit</code> I can still see the changes!<br>
Why is that?</p>
","0","1197249","",""
"24728543","1002260","2014-07-14 01:44:02","20","12174","<git><git-reset>","git reset --merge vs git reset --keep","<p>I have read
<a href=""http://kernel.org/pub/software/scm/git/docs/git-reset.html"" rel=""noreferrer"">the documentation</a>,
however I am having a hard time understanding the difference between</p>

<pre><code>git reset --merge
</code></pre>

<p>And</p>

<pre><code>git reset --keep
</code></pre>

<p>Please provide a simple explaination and/or example.</p>
","2","1002260","0","0"
"62262199","509356","2020-06-08 12:35:23","4","1208","<git><git-reset><git-worktree>","How do I `git reset` in a worktree?","<p>I've noticed that if I try to <code>git reset</code> on a secondary worktree, it resets based on the <em>primary</em> worktree.</p>

<p>Suppose I have <em>master (d)</em> checked out on my normal repo, and have <em>feature (f)</em> in my separate worktree.  If I do <code>git reset --hard head~1</code> I end up at <em>c</em> rather than <em>e</em> as I would expect:</p>

<pre><code>master   _______a______c__d
feature          \__b________e__f
</code></pre>

<p>I've tried looking for how to correctly reset in a worktree, but have been unable to find anything.</p>
","5","509356","",""
"62507999","6345487","2020-06-22 05:31:24","1","326","<git><bitbucket><git-reset>","git: reset branch swallow up master branch","<p>My git history gets something wrong. One of the branches steal master branch commits when I use some commands below:</p>
<pre><code>$ git clone [repo_url]
$ git checkout [branch_A_name]  -- This branch has a commit
$ git reset --soft [revision_hash]   -- same as HEAD~1
$ git add [some_files]
$ git commit
$ git push -f
</code></pre>
<p>After this, I found some commits that I already merged to master branch is stolen by <code>branch_A</code>, which I force-pushed just right before. These diffs are removed from <code>master</code>.</p>
<p>Actually, this is not mine. My teammates are in this situation and I heard they haven't used <code>git rebase</code>.<br />
They just did <code>reset - commit - force push</code> and they saw a messed up tree in their pull request page.</p>
<p>We use bitbucket. Thank you.</p>
","3","6345487","0","0"
"24856032","19977","2014-07-20 23:54:33","1","168","<git><git-merge><git-diff><git-reset><bitbucket-server>","Recover from git branch where multiple reset's were performed and pushed to origin (i.e., Atlassian Stash)","<p>Despite best efforts we have gotten ourselves into quite the pickle with a feature branch in our Git repository. The end result is that a <code>git diff develop..feature-branch</code> shows a completely unexpected diff. </p>

<p>For instance, one file that was added in develop appears as a delete in the diff. Many other files show similar issues, some missing, some added, many many unexpected changes. Some files that should have been in <code>develop</code> do not even appear in the diff. We first noticed the issue in Atlassian Stash when we went to review the code via a Pull Request. The pending merge is completely and utterly incorrect and cannot be resolved through standard conflict resolution during the merge.</p>

<p>We attempted to decipher what caused this and we believe the problem stems from a developer performing several resets on commits in the feature branch that were already pushed to origin. This was to ""revert"" some changes suggested during a pull request code review. Specifically, we believe this to be the timeline of events.</p>

<ol>
<li>Feature branch created from develop</li>
<li>Work performed on feature branch</li>
<li>Pull request generated in Atlassian Stash (PR looks ok, but some minor edits suggested)</li>
<li>Developer uses a reset to revert some changes and pushes those to origin</li>
<li>Meanwhile minor conflicts noticed between develop and feature branch</li>
<li>Developer updates feature branch from develop to reconcile conflicts and pushes to origin</li>
<li>Pull request (diff) shows unexpected diff, drastically different from the one before. Files that are expected to be committed are missing and vice versa</li>
<li>I attempt to undo (revert not reset) the ""bad"" merge and try it again. However the PR/diff shows the same incorrect changes for the pending merge</li>
<li>I then learn that the developer used reset somewhere prior to the first merge from develop.</li>
</ol>

<p>So, I have three questions.</p>

<ol>
<li><p>How we need to ""recover"" a corrected feature branch so we can merge our changes into develop correctly? My thought is to create a new ""good"" feature branch from a commit in our feature branch that is a known to occur before the resets. I can then cherry pick the commits we want from the ""bad"" feature branch into the ""good"" one to recreate it. Finally, I can merge the ""good"" feature branch into develop and delete the ""bad"" one.</p></li>
<li><p>If I were to merge the ""bad"" feature branch into develop, aside from the incorrect state of the files, would there be any other ""corruption"" leaked into the develop branch. That is, would the polluted ""bad"" feature branch further pollute the develop branch and anything downstream from it? I do not plan to do this of course, but I do want to understand the ramifications.</p></li>
<li><p>Would resets as I have described them cause the issues that I am seeing or is this possibly related to something else? </p></li>
</ol>
","2","19977","",""
"52043875","815612","2018-08-27 17:00:05","7","4470","<git><version-control><git-checkout><git-reset><git-clean>","Why does git checkout not delete new files?","<p>Suppose I create (but do not commit) a file <code>file.txt</code>, and then type <code>git checkout HEAD</code> or <code>git checkout HEAD .</code>. I thought <code>git checkout</code> basically overwrote your current working files with the snapshot at the commit you give it, so I would have thought this would delete <code>file.txt</code>. But it doesn't. Why?</p>
","11","815612","",""
"36047532","5495358","2016-03-16 21:43:51","-1","46","<git><git-reset>","Issues resetting git head","<p>After working on my project and making a few commits, I decided to push and be done for a bit. However, an error occurred somewhere during the process and the project ended up getting severely messed up, with the majority of my changes being eliminated. I tried to reset the project to the latest commit I made using:</p>

<pre><code>git reset --hard b91ca10fdfc96ddd0e2aba09b7861117a6bdc17e
</code></pre>

<p>I then got the message that the HEAD had been reset to this commit. However, when I open the project my changes have not returned. The project is Xcode written is Swift. Any help is greatly appreciated, I would really like to avoid rewriting a massive amount of code.</p>
","4","5495358","",""
"52123938","1223975","2018-09-01 00:28:31","0","415","<git><git-rebase><git-reset>","How is `git pull --rebase` different than `git reset --soft origin/b`","<p>I am trying to understand <code>git pull --rebase</code>...in order to do so, how is that command different from:</p>

<pre><code>git fetch origin
git reset --soft remotes/origin/foo
git add .
git commit -am ""bar""
git merge remotes/origin/foo
</code></pre>

<p>is <code>git pull --rebase</code> the same as the above commands or different? Certainly is less verbose, obviously.</p>
","1","1223975","0","0"
"52133407","","2018-09-02 01:56:02","3","219","<git><git-merge><git-checkout><git-reset>","git reset --soft - does it go back to git checkout point or to the last git merge point?","<p>I think what I am looking for is the oldest shared ancestor of two branches, or something like that, this question seems to touch on it:
<a href=""https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git"">Finding a branch point with Git?</a></p>

<p>But instead of the diagram in the OP, this is more what I am looking at:</p>

<pre><code>-- I -- I -- I -- I -- I -- I -- I  (integration branch) 
          \         \          /
           \         \        /
             F -- F -- F -- F  (feature branch)
</code></pre>

<p>My question is - if we checkout a feature branch from integration and make some changes and some commits, and then we update/merge with integration a few times as we go. Aka, commit commit, merge with integration, commit commit, merge with integration, etc. If we then do a <code>git reset --soft &lt;integration&gt;</code>, is that going to reset it to the commit on integration when <code>git checkout</code> was used, or will it simply reset it to the point where the last <code>git merge</code> with integration occurred?</p>

<p>The goal is so that I can make my feature into one big commit. If the <code>git reset --soft</code> only goes back as far as the last git merge with integration, then my feature might have 100s of commits, which is no bueno, and I will need another technique. </p>
","1","","0","0"
"7770364","979672","2011-10-14 16:03:01","12","13141","<git><git-reset><git-add><git-rm>","Git: Undo local changes; git add . + git rm?","<p>Need help figuring out a couple common workflows with Github. I come from a VS TFS background, so forgive me.</p>

<p><strong>Undoing Pending Changes</strong></p>

<p>Let's say I have cloned of a git repository to my local file system. At this point, the project's local files match exactly what's in the remote repoistory.</p>

<p>Then I decided to make some changes to the code, and change the local versions of a couple files. After doing some testing, I figure out that I want to discard my local changes and revert the local files back to what they are in the remote repoistory. </p>

<p>How do I undo these local changes, restoring them to the current versions in the repository?</p>

<p><strong>Committing all Changes</strong></p>

<p>Whenever I modify the contents of local files in my repository clone, or add new files, and want to push the changes, I issue ""git add ."", ""git commit"" with my comments, then ""git push"" to my master.</p>

<p>However, when I delete a file locally that's tracked in the repository, ""git add ."" doesn't capture the rm changes. Instead, I have to ""git rm [filename]"" before I ""git commit"" to update the repository. I always forget to do this though.</p>

<p>Is there a git command that will ""git add ."" and ""git rm"" any files I've deleted locally, in one step? After modifying local files and deleting a couple, I'd like to issue just one command that captures all my changes before I ""git commit"".</p>
","0","979672","0","0"
"36349351","2430571","2016-04-01 06:20:38","1","1195","<git><git-reset>","git reset --hard doesn't make the working tree look like index?","<p><a href=""https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified"" rel=""nofollow"">Pro Git</a> explains <code>git reset</code> like this:</p>

<blockquote>
  <p><strong>Recap</strong></p>
  
  <p>The <code>reset</code> command overwrites these three trees in a specific order, stopping when you tell it to:</p>
  
  <ol>
  <li>Move the branch HEAD points to <em>(stop here if <code>--soft</code>)</em></li>
  <li>Make the Index look like HEAD <em>(stop here unless <code>--hard</code>)</em></li>
  <li>Make the Working Directory look like the Index</li>
  </ol>
</blockquote>

<p>The way I understood is that, if I do <code>git reset --hard</code>, then both my index and my working directory would become <strong>EXACTLY</strong> like my HEAD. So I went ahead and did this:</p>

<pre><code># make a git repo
mkdir mygitrepo
cd mygitrepo
git init

# init commit
touch old_file
git commit -a

# stage a file
touch staged
git add staged

# create file that is not staged
touch unstaged
</code></pre>

<p>So far my repo looks like this:</p>

<ul>
<li><code>HEAD</code> old_file</li>
<li><code>index</code> old_file + staged</li>
<li><code>working dir</code> old_file + staged + unstaged</li>
</ul>

<p>Now if I run <code>git reset --hard</code> then I expect my repo to become:</p>

<ul>
<li><code>HEAD</code> old_file</li>
<li><code>index</code> old_file</li>
<li><code>working dir</code> old_file</li>
</ul>

<p>But I would get this instead:</p>

<ul>
<li><code>HEAD</code> old_file</li>
<li><code>index</code> old_file</li>
<li><code>working dir</code> old_file + unstaged</li>
</ul>

<p>I did similar test by explicitly passing target argument, like <code>git reset --hard target</code>, and I got similar result: staged files are all gone, but unstaged files are still present after <code>git reset --hard</code>.</p>

<p>Could some one explain if I misunderstood anything about <code>git reset</code>?</p>
","0","2430571","0","0"
"52413576","1223975","2018-09-19 20:15:12","0","78","<git><git-reset>","Using git reset - does it remove commits - looking to save disk space","<p>If I have a bunch of merge commits on a branch, if I use</p>

<pre><code>git reset --soft &lt;old_sha&gt;
</code></pre>

<p>will git remove/delete the commits between old_sha and the most current commit - git does garbage collection right? Just looking to save disk space.</p>
","0","1223975","",""
"36395149","5411817","2016-04-04 05:31:19","-1","656","<git><undo><git-reset><git-add><git-stage>","Is there any way to undo a ""`git reset .`""? It 'reverted' all files - all edits have been lost from my working directory","<p>I staged a grand number of files for commit.</p>

<p>Then I realized it was better to commit only two of the files,
and then commit the remaining ones in a separate commit.</p>

<p><code>git reset &lt;filename&gt;</code> unstages filename</p>

<p>I wanted to unstage everything,<br>
then restage two files, and commit.<br>
Then stage all remainging files and commit again.</p>

<p>As: ""<code>git add .</code>""            (adds all files to staging area)<br>
and      ""<code>git reset &lt;filename&gt;</code>"" (removes filename from staging area)<br>
""<code>git reset .</code>""  (seemed to make sense to unstage all files)</p>

<p>oops..!<br>
That reverted my working directory to the last committed version,<br>
 - I lost ALL File Edits that I had made! :-(</p>

<p>Anyway to ""undo"" ""<code>git reset .</code>"" ??</p>

<p>I've not found any documentation on this.<br>
In fact I do not find any documentation on ""<code>git reset .</code>"" at all.<br>
My best guess is that git took the ""<code>.</code>"" to be the value for an option,  other than the filename option.  </p>

<p>But is this undoable ?</p>
","4","5411817","0","0"
"26914909","196533","2014-11-13 17:33:24","16","23952","<git><git-reset>","Undo a git reset --hard origin/master","<p>Working on local master branch:</p>

<pre><code>git commit -m ""Lots of important commits""
git reset --hard origin/master
</code></pre>

<p>How can I retrieve the commits that have been lost as a result of the git reset (from the remote)?</p>

<p>EDIT: note this is not about retrieving uncommitted changes.</p>
","4","196533","0","0"
"36422146","1654520","2016-04-05 09:21:14","0","200","<git><git-commit><git-reset><git-revert>","git checkout commit and then making it the base","<p>I'm on a branch called <code>A</code>..</p>

<p>the branch <code>A</code> has two commits, with the following codes: <code>commit1</code> and <code>commit2</code> where the most recent is <code>commit2</code>.</p>

<p>i just noticed i want to go back to <code>commit1</code> because in <code>commit2</code> I deleted a file I needed and i wrote some useless code.. i want to go back to <code>commit1</code> so i do <code>git checkout commit1</code></p>

<p>on the terminal it now says i'm here: <code>$ git:(commit1)</code> but what I expected was  <code>$ git:(A)</code></p>

<p>i'm not sure how to make <code>commit1</code> my base for the the branch.</p>

<p>is it <code>git revert</code>? <code>git reset</code>? I've read the docs but I'm not quite sure what to do</p>
","1","1654520","",""
"9154674","247243","2012-02-06 01:22:59","2","204","<git><return-value><git-reset>","Why ""git reset <file>"" returns 1?","<p>Assume that <code>foo.txt</code> is in the index.</p>

<p>Why doing:</p>

<pre><code>git reset foo.txt
</code></pre>

<p>returns 1:</p>

<pre><code>$ echo $?
1
</code></pre>

<p>?</p>
","0","247243","",""
"52617849","","2018-10-02 23:43:19","1","331","<git><git-submodules><git-checkout><git-reset>","git submodule - ignoring changes","<p>I do this all the time:</p>

<pre><code>git add .
git add -A
git commit -am ""foobar""
</code></pre>

<p>that adds everything so all of my changes are staged, but we have a git submodule in the config directory.</p>

<p>What I have been doing is using several of these commands to ""get rid of changes to the config dir"":</p>

<pre><code>git reset -- config
git checkout -- config
git checkout origin/dev config
git reset HEAD config
</code></pre>

<p>Can anyone explain what these are doing? I am not even sure if the last command is doing what I think it does.</p>
","0","","0","0"
"53581029","6529706","2018-12-02 14:07:21","1","186","<git><git-reset><git-index>","understanding git reset effect on index","<p>I'm having a small conflict when reading documentations/tutorials about git reset: For <code>git reset --mixed</code> for example, the documentation says:</p>

<blockquote>
  <p>The next thing reset will do is to update the Index with the contents of whatever snapshot <code>HEAD</code> now points to</p>
</blockquote>

<p>What is causing my conflict is the fact that I'm expecting <strong>clear the index</strong> instead of <strong>update the index</strong>. Is the index cleared or updated with whatever snapshot <code>HEAD</code> now points to?</p>
","2","6529706","0","0"
"70254077","12493910","2021-12-07 01:55:53","-1","157","<git><reset><git-commit><git-reset>","git -- remove latest commit ... without messing up the working directory","<p>The typical question is how to remove the latest commit.  This is easy:
git reset --hard HEAD~1</p>
<p>But ... I don't want the working directory to be overwritten with the new head contents.</p>
<p>If you reset the head, the working directory is restored to the contents of the repo as of that head commit.   I want to keep my changed files.</p>
<p>E.g. I have changed three files, but want to commit only two.  I accidentally commit all three.   If I reset the head, not only is the bad commit removed, but all of the changed files are reverted.  I want to remove the latest commit, then commit just the two I intended to commit.  This means that I need to keep the changed files in the working directory.</p>
<p>I think I've explained the issue well enough.  Or at least I hope so.</p>
","1","12493910","",""
"37604131","38765","2016-06-03 00:23:32","0","31","<git><git-reset>","Do a git reset only if other branches refer to the commits","<p>Is there any way to remove a couple of commits from a branch only if a different branch refers to the commits?</p>

<p>For example, if I did the following commits:</p>

<pre><code>ABC-1: Add views for feature ABC-1
ABC-1: Add controller action for feature ABC-1
</code></pre>

<p>and then I discovered that I did them on the <code>develop</code> branch, rather than on <code>feature/ABC-1</code>, I'd do</p>

<pre><code>git checkout -b feature/ABC-1
git checkout develop
git reset --hard HEAD~~
</code></pre>

<p>is there any options I can pass to git reset that'll refuse to do the git reset if I hadn't created the <code>feature/ABC-1</code> branch? Kind of like how <code>git branch -d</code> only deletes a branch if it refers to commits that are included in the branch you're currently on?</p>

<p>I could do</p>

<pre><code>git checkout -b feature/ABC-1
git branch -d develop
git checkout HEAD~~
git checkout -b develop
</code></pre>

<p>but that loses information about which remote branch <code>develop</code> is tracking.</p>
","1","38765","",""
"8712555","335418","2012-01-03 12:49:11","5","495","<git><git-reset>","Is 'git reset --soft' a no-op command?","<p>The <a href=""http://linux.die.net/man/1/git-reset"" rel=""noreferrer"">documentation</a> states that leveraging the <code>--soft</code> option <em>""...Does not touch the index file nor the working tree at all, but requires them to be in a good order. This leaves all your changed files ""Changes to be committed"", as git status would put it""</em>.</p>

<p>It also explains that the target <code>&lt;commit&gt;</code> defaults to HEAD, when not given.</p>

<p>Considering these, does the following command modify anything at all?</p>

<p><code>
$ git reset --soft
</code></p>
","0","335418","0","0"
"8761329","102067","2012-01-06 16:49:32","1","3227","<git><branch><git-rebase><git-reset>","'git reset --hard' Multiple Rebased Branches","<p>I have a local ref that contains a few branches that I recently performed <code>git rebase</code> on:</p>

<pre><code>A---B---C---D master
     \
      E---F---G topic1
               \
                H---I---J topic2
</code></pre>

<p>Which turned it into:</p>

<pre><code>A---B---C---D master
             \
              E'---F'---G' topic1
                         \
                          H'---I'---J' topic2
</code></pre>

<p>by using the following set of commands:</p>

<pre><code>git checkout topic1
git rebase master
git checkout topic2
git rebase topic1
</code></pre>

<h3>The problem?</h3>

<p>I accidentally forgot to do <code>git rebase --no-ff</code> in order to keep track of all of my previously merged branches.  Now, I have no way of easily telling (by using <code>gitk --all</code>) where my merges occurred.  I know that they happened somewhere between <code>HEAD@{E}</code> and <code>HEAD@{J}</code>, but without going through each commit individually, I'm lost.</p>

<h3>What I have decided to do:</h3>

<p>So, I figured that I would use <code>git reflog</code> as suggested <a href=""https://stackoverflow.com/a/135614/102067"">here</a>, along with <code>git reset --hard HEAD@{#}</code> to revert back to the original state before the two rebases occurred and then attempt to <code>git rebase branchname --no-ff</code> as I suggested.  </p>

<h3>My ultimate question is this (with a few additional):</h3>

<p>Can I simply go all the way back to the last commit before the first <code>rebase</code> or do I need to rollback each of the rebases individually?  Will each of the top branches be exactly as I used to have them (showing the non-fast forwarded merges that I'm looking for)?  Am I making this too difficult/is there a simpler way to do this?  Anything I'm neglecting to think about?</p>

<p>Thanks.</p>
","0","102067","",""
"27002709","1988876","2014-11-18 19:47:05","1","80","<git><git-push><git-commit><git-reset><git-revert>","Is a git commit required if I rollback using 1) git hard reset or 2) git revert?","<p>I understand there are two ways of rolling back a git commit in remote repository.</p>

<p>Method 1:</p>

<pre><code>git reset --hard &lt;old-commit-id&gt;
git commit -m ""rolling back""
git push -f
</code></pre>

<p>Method 2:</p>

<pre><code>   git revert &lt;old-commit-id&gt;
   git commit -m ""reverting the changes""
   git push -f
</code></pre>

<p>In various posts that I have seen, there is no mention of <code>git commit</code> to be done. But my colleague is convincing me that <code>git commit</code> should be issued and that <code>git push</code> with <code>-f</code>. otherwise, the push will fail. Is my colleague correct? I am still doubtful about it</p>
","0","1988876","",""
"27008938","1993552","2014-11-19 04:26:00","-1","157","<git><git-reset>","What's the status of files when using a git reset --mixed HEAD~1?","<p>For example, if I create a file.txt and add some contents to it and then I commit this change to history. And what's the status of file.txt when using a git reset --mixed HEAD~1? I use the <code>git status</code> to check the status and below is the output:</p>

<pre><code>On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

    modified:   file.txt

no changes added to commit (use ""git add"" and/or ""git commit -a"")
</code></pre>

<p>My question is, is this file.txt still in the index(staged)? If yes, why cannot I use <code>git commit</code> to commit the change?</p>
","5","1993552","",""
"44953037","884502","2017-07-06 15:21:14","10","6648","<git><git-checkout><git-reset><git-clean>","What is the difference between ""git checkout -- ."" and ""git reset HEAD --hard""?","<p>This is not a general question about what '--' does, as in the marked duplicate. This is a git-specific question asking for clarity on what the operational differences are between the mentioned commands.</p>

<p>If I want to clean out my current directory without stashing or committing, I usually use these commands:</p>

<pre><code>git reset HEAD --hard
git clean -fd
</code></pre>

<p>A co-worker also mentioned using this command:</p>

<pre><code>git checkout -- .
</code></pre>

<p>It's a difficult command to google, and it's not clear to me from the git documentation what this command actually does. It seems to be one of the later-mentioned usages in the manual.</p>

<p>At a guess it replicates <code>git reset HEAD --hard</code>, but what exactly does it do as compared to the commands I'm already using?<br>
Does it replicate one or both of the commands, or is it similar yet subtly different?</p>
","8","884502","0","0"
"64288148","6723250","2020-10-09 22:38:01","1","206","<git><git-reset>","Can I make git reset --hard safer or disable it?","<p>I have gotten into the bad habit of using <code>git reset --hard</code> regularly.</p>
<p>I now discovered that there is <code>git reset --keep</code>, and if I really need to delete something I could even do <code>git stash &amp;&amp; git stash drop</code>.</p>
<p>So I'd like to either disable hard resets, or make them ask before they delete uncommitted changes irrecoverably, or at least create a backup. Can this be done without wrapping <code>git</code> in a shell function?</p>
","3","6723250","",""
"46798201","2295034","2017-10-17 19:56:34","0","1645","<git><git-reset><working-directory><git-stage>","git reset resulting in changes to both working directory and stage","<p>I have a commit with many files in it.</p>

<p>One of the files in the commit has several changes, one of which I would like to undo.</p>

<p>So, I was thinking I could reset that particular file back to <code>HEAD~</code> leaving the outstanding changes I had made in the working-directory. Then, I could use <code>git add -p</code> and only stage the desired changes, followed by <code>git commit --amend</code>.</p>

<p>First, I made sure that I had no outstanding changes in either my working-directory or stage.</p>

<p>Then, I ran this command:</p>

<pre><code>git reset HEAD~ -- path/to/file
</code></pre>

<p>But, to my surprise, <code>git status</code> now shows changes to both my working-directory and stage. Further inspection using <code>gitk</code> shows that the changes in my working-directory and stage are identical.</p>

<p>Where am I going wrong here?</p>
","0","2295034","",""
"28573481","2005291","2015-02-17 23:51:56","2","510","<git><git-checkout><git-reset>","Does git checkout -B perform a reset?","<p>I have branch called <code>shared</code> that is shared amongst other developers. I work off of a <code>feature</code> branch. Whilst on my <code>feature</code> branch, I ran <code>git checkout -B shared</code>, and got the following message:</p>

<pre><code>Switched to and reset branch 'shared'
Your branch and 'origin/shared' have diverged,
and have 6 and 126 different commits each, respectively.
  (use ""git pull"" to merge the remote branch into yours)
</code></pre>

<p>I pulled and resolved the conflicts and suddenly realized that my <code>shared</code> branch had all of my changes from my <code>feature</code> branch. My questions are:</p>

<ol>
<li><p>How did this happen exactly?</p></li>
<li><p>Looking at the docs it says that the branch is reset when running checkout with the <code>-B</code> flag:</p>

<blockquote>
  <p>If <code>-B</code> is given, <code>&lt;new_branch&gt;</code> is created if it doesn’t exist; otherwise, it is reset.</p>
</blockquote>

<p>Last time I checked, running reset on a shared branch was dangerous. Or does 'reset' have a different meaning, in this context?</p></li>
</ol>
","7","2005291","",""
"55038931","11154224","2019-03-07 08:11:23","1","254","<git><git-reset>","Reset command in the git","<p>I know Reset commands contain 3 options - </p>

<ol>
<li><p>Hard  - which change the files in our working directory to a particular commit id </p></li>
<li><p>mixed (default) - which uncommit and un-stage files </p></li>
<li><p>soft - which only uncommit files </p></li>
</ol>

<p>i know uncommomit  -moves the HEAD and the associated branch pointer and does not actually modify the tree of commits but i am not sure what it means? What's the point of moving our head?</p>
","6","11154224","",""
"64138269","667355","2020-09-30 13:07:28","0","57","<git><git-reset>","Making ""git reset"" effective without using ""--hard"" option","<p>I am using git reset to navigate backward in my git tree; however, except the time that I use <code>--hard</code> option, my files do not get back to their earlier versions. As an example I made a file called f1.txt and in every commit, I added a character to it, but when I use <code>git reset --mixed</code> or <code>git reset --soft</code> commands, they do not change the content of f1.txt and all the characters are there (although when I use <code>git log</code>, I see that the HEAD has moved back).</p>
","1","667355","",""
"46300977","6664400","2017-09-19 12:51:29","4","1800","<git><git-reset>","Why does `git reset --hard HEAD~X` leave untracked files behind?","<p>From <a href=""https://stackoverflow.com/questions/4327708/git-reset-hard-head-leaves-untracked-files-behind"">git reset --hard HEAD leaves untracked files behind</a>:</p>

<blockquote>
  <p>When I run <code>git reset --hard HEAD</code>, it's supposed to reset to a
  pristine version of what you pulled, as I understand it.
  Unfortunately, it leaves files lying around, as a <code>git status</code> shows a
  big list of untracked files.</p>
  
  <p>How do you tell git ""Just bring it back to EXACTLY what was in the last pull, nothing more, nothing less""?</p>
</blockquote>

<p>To get rid of these files I have to run <code>git clean -df</code>.</p>

<p>Can somebody please explain <strong>why</strong> it works this way and which files will become untracked?</p>
","3","6664400","0","0"
"64796878","7887218","2020-11-12 02:04:45","3","2813","<git><git-merge><git-reset><git-revert>","Is there a way to cleanly and easily undo a git merge?","<p>I've read that doing git reset commitBeforeDoingMerge --hard would no undo the merge:</p>
<pre><code>1pm-3pm This is my branch and I need to merge master into it
1pm-2pm This was master
1pm-2pm-3pm-4pm Merging ended up doing this, 4pm being the merge commit
1pm-2pm-3pm if This is the result if you do git reset 3pm --hard, because it does not undo the merge, it just goes back to that commit in the branch that was merged.
</code></pre>
<p>Now, another proposal is to do git revert 4pm -m 1, but that has a problem according to the <a href=""https://git-scm.com/docs/git-revert#Documentation/git-revert.txt---mainlineparent-number:%7E:text=Usually%20you%20cannot%20revert%20a%20merge,may%20not%20be%20what%20you%20want."" rel=""nofollow noreferrer"">manual</a>:</p>
<blockquote>
<p>Usually you cannot revert a merge because you do not know which side
of the merge should be considered the mainline. This option specifies
the parent number (starting from 1) of the mainline and allows revert
to reverse the change relative to the specified parent.</p>
<p>Reverting a merge commit declares that you will never want the tree
changes brought in by the merge. As a result, later merges will only
bring in tree changes introduced by commits that are not ancestors of
the previously reverted merge. This may or may not be what you want.</p>
</blockquote>
<p>So, is there a way to cleanly and easily undo a git merge?</p>
","2","7887218","0","0"
"64878687","10264764","2020-11-17 15:54:58","0","118","<git><garbage-collection><git-reset><git-reflog><git-fsck>","git fsck can't find dangling/unreachable commits","<p>I have just reset --hard back by about 15 or so commits on a branch all the way back to first common parent with master, and deleted all other branches, tags etc on those 15 commits, confirming so with branch --contains.</p>
<p>I wanted to initially prune/delete them which led me down the paths of deleting reflogs and performing gc etc.</p>
<p>Issue is that git fsck doesn't list any unreachable or dangling commits, even with the --no-reflogs flag.</p>
<p>Any help is appreciated! I have been scouring through questions and documentation about reset, gc, fsck, reflog etc right from the man pages to similar questions.</p>
<p>One more thing that might be important is that I have just ran a git filter-repo on this repo which went smoothly, but has created ref and commit maps, this is the first time I'm using it so I'm not sure if the replace/ refs are still reaching those commits, although it should've have shown that with branch --contains is my guess.</p>
<p>Thanks again.</p>
","3","10264764","",""
"28487084","4354956","2015-02-12 20:24:12","1","70","<git><egit><git-bash><git-reset><git-reflog>","Egit: Different Message in Reflog than Git Bash","<p>I noticed a discrepancy between the way EGit records the reflog for a rest action, as compared to the way Git Bash records it.</p>

<pre><code>28eab8d HEAD@{0}: commit: l
959126f HEAD@{1}: 959126fc7fbf887b3bdb5bd931f50c611f48bf71: updating HEAD
f073b25 HEAD@{2}: commit: l
959126f HEAD@{3}: reset: moving to HEAD~1
b0114f6 HEAD@{4}: commit: l
959126f HEAD@{5}: 959126fc7fbf887b3bdb5bd931f50c611f48bf71: updating HEAD
</code></pre>

<p>HEAD@{1} and HEAD@{5} were recorded by EGIT, while HEAD{3} was recorded by Git Bash. </p>

<p>In addition, there seems to be a difference between the way they log branch name changes:</p>

<pre><code>28eab8d9329f936c1642a591317bbe5be3fed7c1 28eab8d9329f936c1642a591317bbe5be3fed7c1 user &lt;user@user.com&gt; 1423771813 -0500 Branch: renamed refs/heads/test to refs/heads/testtt
28eab8d9329f936c1642a591317bbe5be3fed7c1 28eab8d9329f936c1642a591317bbe5be3fed7c1 user &lt;user@user.com&gt; 1423771870 -0500 Branch: renamed refs/heads/testtt to refs/heads/test
0000000000000000000000000000000000000000 28eab8d9329f936c1642a591317bbe5be3fed7c1 user &lt;user@user.com&gt; 1423771941 -0500 Branch: renamed test to testttt
0000000000000000000000000000000000000000 28eab8d9329f936c1642a591317bbe5be3fed7c1 user &lt;user@user.com&gt; 1423772021 -0500 Branch: renamed testttt to test
</code></pre>

<p>The first top lines are from Git Bash, and the bottom ones are from EGit. In addition, EGit makes the same change to the HEAD reflog, while Git Bash does nothing.</p>

<p>The biggest problem is that Git Bash does not show any lines beyond the one with the 40 0's, so I cannot see the logs when in Git Bash.</p>

<p>I guess that I could hack together some script that rewrites the logs, but I am wondering if there is some setting or version that I have wrong.</p>

<p>I am using Egit 3.4.1 and Git Bash 1.8.5.2.msysgit.0</p>
","0","4354956","",""
"46758289","3719459","2017-10-15 18:03:35","2","927","<git><git-merge><git-reset><fast-forward>","What is the difference between git merge --ff <commit> and git reset <commit> --mixed","<p>If I want to update my local branch, say <code>master</code>, to the remote branch <code>gitlab/master</code>, I see two options:</p>

<ul>
<li>I can merge the local branch with the remote branch using a fast forward merge.</li>
<li>I can use reset to move my branch to the position of the remote branch.</li>
</ul>

<p>The first operation can be achieved in my SmartGit GUI by right-click: <code>merge</code>. The latter operation can be achieved by dragging the local branch marker to a new position.</p>

<p>Is there any technical difference between <code>git merge --ff &lt;commit&gt;</code> and <code>git reset &lt;commit&gt; --mixed</code>?</p>

<p>I admit that reset could also be used to move the local branch to another branch, which is not in the fast-forward way.</p>
","0","3719459","0","0"
"10568606","1116925","2012-05-13 01:04:46","3","859","<ruby-on-rails><git><postgresql><git-reset>","How to reset 'schema.rb' to last git head?","<p>I want to get rid of everything I did since my last commit, including the tables I created, so I did</p>

<pre><code>git reset --hard HEAD
git clean -f -d
</code></pre>

<p>so this got rid of the migrations I created, but in the schema it looks like the tables are still there. I know I can just create new migrations to drop those tables, but I was just wondering for future references how I could reset to the last commit even on the database level.</p>

<p>Another reason why I would need to delete the tables in the database is because when I try to create migrations(models) to create the exact tables, it gives me an error and says they already exist. So if I were to push this to github and production, it would not create the tables since the migrations don't exist. Thus, I think it is necessary for me to delete the created tables locally through some sort (preferably rolling back), and then re-create the migrations.</p>

<p>(I'm using PostGreSQl) </p>
","3","1116925","",""
"11383094","298664","2012-07-08 12:19:15","400","263075","<git><git-reset>","Unstaged changes left after git reset --hard","<p>After <code>git reset --hard</code>, <code>git status</code> gives me files within the <code>Changes not staged for commit:</code> section.</p>

<p>I've also tried <code>git reset .</code>, <code>git checkout -- .</code> and <code>git checkout-index -f -a</code>, to no avail.</p>

<p>So, how can I get rid of those unstaged changes?</p>

<p>This seems to hit only Visual Studio project files. Weird. See this paste: <a href=""http://pastebin.com/eFZwPn9Z"" rel=""noreferrer"">http://pastebin.com/eFZwPn9Z</a>. What is special with those files, is that in .gitattributes I have:</p>

<pre><code>*.sln        eol=crlf
*.vcproj     eol=crlf
*.vcxproj*   eol=crlf
</code></pre>

<p>Also, <code>autocrlf</code> is set to false in my global <code>.gitconfig</code>. Could that be somehow relevant?</p>
","8","298664","0","0"
"30140863","442351","2015-05-09 14:07:15","3","338","<git><git-reset>","git reset --soft seems to change index","<p>Having read through <a href=""http://blog.plover.com/prog/git-reset.html"" rel=""nofollow"">Mark Dominus's article</a> and <a href=""http://git-scm.com/blog/2011/07/11/reset.html"" rel=""nofollow"">Scott Chanon's article</a> I assumed that <code>git reset abcd --soft</code> would not affect the index, however, the following shows that it does.</p>

<h1>Before Reset</h1>

<p><code>c1.txt</code>, <code>c2.txt</code>, <code>c3.txt</code> in the repo, <code>c4.txt</code> in the index.  All in the working directory:</p>

<h2>History:</h2>

<pre><code>$ git log --oneline --decorate
b91d91b (HEAD, master) C3
231a5df C2
7e7b2d7 C1
</code></pre>

<h2>The index:</h2>

<pre><code>$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        new file:   c4.txt
</code></pre>

<h2>The working directory:</h2>

<pre><code>$ ls
c1.txt  c2.txt  c3.txt  c4.txt
</code></pre>

<h2>Reset softly to the C2 commit</h2>

<pre><code>$ git reset 231a --soft

$ git log --oneline --decorate
231a5df (HEAD, master) C2
7e7b2d7 C1
</code></pre>

<h2>Index has changed</h2>

<pre><code>$ git status
On branch master
Changes to be committed:
  (use ""git reset HEAD &lt;file&gt;..."" to unstage)

        new file:   c3.txt
        new file:   c4.txt


$ ls
c1.txt  c2.txt  c3.txt  c4.txt
</code></pre>

<h2>What I thought would happen</h2>

<p>From Scott's article, he says:  </p>

<blockquote>
  <p>The first thing reset will do is move what HEAD points to.... If you add the flag --soft, this is the only thing it will do. With --soft, reset will simply stop there.</p>
</blockquote>

<p>So, I thought that the index (which I hope I've understood to be what's shown in the <code>git status</code> outputs above) would not change, that being, it would still contain <code>c4.txt</code>.  The output above shows that it actually contains <code>c3.txt</code> and <code>c4.txt</code>.</p>

<p>It appears that <code>c3.txt</code> has been moved into the index alongside <code>c4.txt</code>.</p>
","3","442351","0","0"
"14217853","650443","2013-01-08 15:03:04","16","1647","<git><git-reset>","What does the double-dash [--] option do on git reset?","<p>I've seen commands like:</p>

<pre><code>git reset e542 -- readme.txt
</code></pre>

<p>I understand this command puts in the index the contents of the file readme.txt from commit e542. But what's the <code>--</code> option doing there?</p>

<p>The git reset man page lists it as optional for the first two forms but I couldn't find what it means.</p>

<pre><code>git reset [-q] [&lt;commit&gt;] [--] &lt;paths&gt;…
git reset (--patch | -p) [&lt;commit&gt;] [--] [&lt;paths&gt;…]
</code></pre>
","7","650443","0","0"
"31755905","66814","2015-07-31 22:07:46","2","4517","<git><git-reset>","When do you use git reset --soft?","<p>When do you use git reset --soft? I use git reset --hard all the time but never seem to find a case to use git reset --soft.</p>
","0","66814","0","0"
"14224492","983386","2013-01-08 21:39:04","3","381","<git><revert><git-reset><git-revert>","Is this a good strategy to undo git stuff?","<p>Until now, if I ever commited and pushed something wrong to the master branch, my way of solving it was, assume the the git log looks like</p>

<pre><code>commit bad_hash
commit another_bad_hash
commit yet_another_bad_hash
commit good_hash
</code></pre>

<p>The way I 'solved' the situation in the past was :</p>

<pre><code>git reset --hard good_hash
git push -f origin master
</code></pre>

<p>And yes, that will work... but did not seem very elegant, since it effectively remove the commit history.</p>

<p>So after situation which destroyed my ego, I checked out better methods, and came out with the git revert one, essentially I use now</p>

<pre><code>git revert bad_hash another_bad_hash yet_another_bad_hash
git push origin master
</code></pre>

<p>The git revert will create three commits (one per reverted hash), after that, a push is needed to update the remote. </p>

<p>Now, question is, is this strategy correct? to me looks much better than the reset --hard, since the history of the repo is not trunkated, and if eventually someone wants to check why there were problems, they can always do a </p>

<pre><code>git diff bad_hash
</code></pre>

<p>Is this reasoning correct or am I still missing basic concepts.</p>

<p>Thanks</p>
","0","983386","",""
"72474340","5600534","2022-06-02 10:01:03","-3","243","<git><github><versioning><git-reset><git-revert>","'git revert' Changes Nothing But Adds a New Commit","<p>I'm working on a project and I wanted to revert back to an earlier commit.
This is the git log</p>
<pre><code>commit a342294cbf25550f48452807d33a64f0c0248c34 (origin/master)
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Thu Jun 2 13:51:52 2022 +0530

    added a toggle for viewport only visbility change

commit 4b5ce6478fb2692d03e084eabce636f859650af5
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Thu Jun 2 13:50:17 2022 +0530

    added a toggle for viewport only visbility change

commit 1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Wed Jun 1 23:53:21 2022 +0530

    changed git ignore
</code></pre>
<p>My head was at commit <code>a342294cbf25550f48452807d33a64f0c0248c34</code> and I wanted to revert to <code>1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f</code></p>
<p>I executed <code>git revert HEAD~2</code>
I got the space to write a new message and I wrote a commit message expecting that all the files should now look like they did in commit <code>1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f</code>, but they don't. All the files look like commit <code>a342294cbf25550f48452807d33a64f0c0248c34</code> but it shows a new commit in the log. Here's the log:</p>
<pre><code>commit 6ee3550ad817839afbebe2b039653c4f00f3c074 (HEAD -&gt; master)
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Thu Jun 2 15:10:43 2022 +0530

    Revert &quot;changed git ignore&quot; Because for some reason the model doesn't load in blender with the new changes.
    Would look over the Coin class

    This reverts commit 1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f.

commit a342294cbf25550f48452807d33a64f0c0248c34 (origin/master)
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Thu Jun 2 13:51:52 2022 +0530

    added a toggle for viewport only visbility change

commit 4b5ce6478fb2692d03e084eabce636f859650af5
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Thu Jun 2 13:50:17 2022 +0530

    added a toggle for viewport only visbility change

commit 1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f
Author: analysis230 &lt;vipul.s.paul@gmail.com&gt;
Date:   Wed Jun 1 23:53:21 2022 +0530

    changed git ignore
</code></pre>
<p>if I do <code>git checkout 1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f</code>, I see the version of the file that I expect to see after the revert. Here's an example:</p>
<p>when I checkout <code>1bc90dd971ea1bbb36cdd280f141cb4cc317ce0f</code>, this is what I see in one of my files.</p>
<pre><code>class ParamNames:
    widthOffset = &quot;WidthOffset&quot;
    heightOffset = &quot;HeightOffset&quot;
    precision = &quot;Precision&quot;
    seamAbberations = &quot;Seam Abberations&quot;

    amount = &quot;Amount&quot;
    probability = &quot;Probability&quot;

class Keywords:
    layerNumber = &quot;layerNumber&quot;
</code></pre>
<p>when I checkout master branch after the revert i.e. on commit <code>a342294cbf25550f48452807d33a64f0c0248c34</code>, the same file looks like this, which is all the changes I want to remove:</p>
<pre><code>from random import Random

class ParamNames:
    widthOffset = &quot;WidthOffset&quot;
    heightOffset = &quot;HeightOffset&quot;
    precision = &quot;Precision&quot;
    seamAbberations = &quot;Seam Abberations&quot;

    amount = &quot;Amount&quot;
    probability = &quot;Probability&quot;

    seed = &quot;Seed&quot;

class Keywords:
    layerNumber = &quot;layerNumber&quot;

class BiasedCoin:
    def __init__(self, seed):
        self.randGenerator = Random()
        self.randGenerator.seed = seed

    def toss(self, headProb):
        weights = [100-headProb, headProb]
        return self.randGenerator.choices([0,1], weights=weights)[0]

    def uniform(self,a,b):
        return self.randGenerator.uniform(a,b)
</code></pre>
<p>Is my understanding of git revert wrong?</p>
","7","5600534","",""
"52786398","1223975","2018-10-12 20:11:43","-1","60","<git><git-reset>","Undo a git reset file command","<p>I just ran this command:</p>

<pre><code> git reset origin/dev -- package-lock.json 
</code></pre>

<p>but I want to do undo it, I want to go back to:</p>

<pre><code> git reset HEAD -- package-lock.json 
</code></pre>

<p>but I think it might be too late to go back to HEAD...how do I undo the original command? </p>

<p>Maybe:</p>

<pre><code> git reset HEAD^ -- package-lock.json 
</code></pre>

<p>?</p>

<p><strong>Update</strong>: I think I meant to do <code>git checkout origin/dev -- package-lock.json</code>, not git reset.</p>
","1","1223975","",""
"69935733","2174080","2021-11-11 22:30:33","0","301","<git><github><git-reset><git-revert><git-apply>","Remove changes from a commit hash in a given file git","<p>I have a 3 month old commit, lets say commit A which touchs 3 files
Over the last 3 months, a lot more commits have gone in, some of which have added new code below changes from commit A</p>
<p>I want to <strong>remove</strong> (not revert) the changes from commit A in 1 of the 3 files.</p>
<p><strong>remove as in blank line instead of code</strong></p>
<p>I tried</p>
<h3>git show &lt; commit hash of A &gt; file_path | git apply -R -3</h3>
<p>this removes extra code (which is outside the scope of commit A: details below if interested)</p>
<p>One way i can think of is using git blame on file, wherever hash matches, remove the lines
but seems to be very iterative process and time consuming.</p>
<p>Any pointers would be helpful..</p>
<p>Thanks in advance</p>
<p>Extra code removed from file which is out of scope of commit A:</p>
<ol>
<li>Commit A was added at the end of file</li>
<li>New commits added more code after commit A (below changes from commit A) at the end of file</li>
<li>now when we reverse the changes in commit A (using git apply -R -3), it cleans from start of commit A till end of file because to git, the code was originally added at the end of file</li>
</ol>
","1","2174080","",""
"53112984","10594485","2018-11-02 05:12:38","0","26","<git><git-clone><git-reset>","Why git reset files to previous versions?","<p>You see, I have a problem with git in my computer. I typed clone command in my console, but three files are modified right there to previous versions. so... when I open the IDE, the three files has modified tags.  I tried clone command many times but the problem stay there.</p>

<p>I'm using</p>

<p>git 2.15.1 (Apple Git-101)</p>

<p>Webstorm IDE 2018.2</p>

<p>Steps done</p>

<p><code>cd go/to/path</code></p>

<p><code>git clone url-repo</code></p>

<p>so... i type <code>git status</code> and console show anything like </p>

<pre><code>Changes not staged for commit:
(use ""git add &lt;file&gt;..."" to update what will be committed)
(use ""git checkout -- &lt;file&gt;..."" to discard changes in working
directory)

modified:   src/app/http/controllers/Controller.js
modified:   src/app/models/PermissionModel.js
modified:   src/app/models/RoleModel.js
</code></pre>

<p>I'm not understanding, If the project has recently been cloned.</p>

<p>🇨🇴Sorry for my English.  :3  😁thanks for you answer.</p>
","2","10594485","",""
"53215245","8250146","2018-11-08 19:58:19","0","202","<git><github><git-filter-branch><git-reset><git-reflog>","How do I recover a file deleted from git using filter branch and pushed to remote?","<p>I recently cleaned out several files from my repository using git filter branch. These are the instructions I followed : <a href=""https://help.github.com/articles/removing-sensitive-data-from-a-repository/"" rel=""nofollow noreferrer"">https://help.github.com/articles/removing-sensitive-data-from-a-repository/</a>. After that I rebased my development branch so that new commits on that branch would not reintroduce any of the history. But in the process, I forgot that I had made changes to a file on this branch which I deleted on the filtered branch. So when I rebased the dev branch, that file disappeared. Is it possible to recover this file? </p>

<p>So far I have tried doing a git reflog to see which commit I could go back to that would have this file. When I used git reset --hard using an old commit hash, I get this error: </p>

<pre><code>fatal: ambiguous argument '07a8efd': unknown revision or path not in the working tree
</code></pre>

<p>I believe this error could be because I had performed a filter branch and force pushed the filtered history back to remote. The cleanup instructions also had a </p>

<pre><code>git reflog expire --expire=now --all
</code></pre>

<p>which also explains why that particular commit cannot be found. 
Is there anything I can do in this situation to recover this file? </p>

<p>EDIT: Since the rebase, I have made several more changes to the dev branch, so it would be very helpful to find an option that doesn't involve letting go of all this work. </p>
","4","8250146","",""
"70663484","9109842","2022-01-11 08:09:11","1","39","<git><github><git-reset>","How to get base corresponding code through github compare url?","<p>I get a github compare url from BugSwarm (a bug dataset), like this one:</p>
<pre><code>https://github.com/apache/dubbo/compare/0c438dc4889517bf9924a49aeb3c5562c1b96944..36ae90cab1aee74658dc8bdd5d785fd79fd0fe2c
</code></pre>
<p>I assumed the base commit hash was &quot;0c438dc4889517bf9924a49aeb3c5562c1b96944&quot;, but when I use <code>git reset --hard 0c438dc4889517bf9924a49aeb3c5562c1b96944</code> in all five branches of dubbo repo. It turns out</p>
<pre><code>fatal: Could not parse object '0c438dc4889517bf9924a49aeb3c5562c1b96944'.
</code></pre>
<p>It seems the commit hash does not exist. I want to checkout the code correponding to the compare url base to get bug information. Is there a way to solve this problem?</p>
","4","9109842","0","0"
"38116016","1455384","2016-06-30 07:01:31","3","11681","<git><branch><git-reset><git-revert>","git - revert branch to look like master?","<p>I have two branches <code>develop</code> and <code>master</code>. There are lots of commits in develop that are not in <code>master</code> yet. Though I need to make <code>develop</code> branch look exactly the same as <code>master</code>. To preserve all changes that happened into <code>develop</code>, I will create new branch from <code>develop</code> so all those changes won't be lost.</p>

<p>But after doing ""copy"" of <code>develop</code>, how can I safely reset or revert to look like <code>master</code>?</p>

<p>I saw this: <a href=""https://stackoverflow.com/questions/28774194/git-reset-revert-a-whole-branch-to-another-branches-state"">Git: reset/revert a whole branch to another branches state?</a></p>

<p>So to reset, I can do:</p>

<pre><code>git checkout develop
git reset --hard master
</code></pre>

<p>But the problem is <code>develop</code> branch is already pushed to remote and there others that had pulled <code>develop</code> already.</p>

<p><strong>Maybe there is safer way to do this using revert or some other means?</strong> But I want to revert (if possible) in a way that would revert to <code>master</code> state, not manually selecting every commit, because some latest commits need to be kept in <code>develop</code> because they came from master (hotfixes).</p>

<p>So history of commits on <code>develop</code> looks something like this (most top means latest commit by date):</p>

<pre><code>commit hotfix2 - in both develop and master
some other commits that are only in develop
commit hotfix1 - in both develop and master
some commits that are only in develop
all commits that came when develop was created from master
</code></pre>
","2","1455384","0","0"
"38199357","5639133","2016-07-05 09:05:53","0","3249","<git><rollback><git-push><git-reset>","git reset remote head","<p>My colleague has pushed some commits to our working branch by mistake and now I want to rollback to a previous commit both locally and remotely.</p>

<p>I use reset --hard to the selected commit, the HEAD in my local branch moves to the selected commit and then I use</p>

<p>git push -f origin working_branch:working_branch</p>

<p>to push the HEAD
but I get  denying non-fast-forward error.</p>

<p>How should I rollback to the selected commit both locally and remotely?</p>

<p>Thanks in advance!</p>
","0","5639133","",""
"67831822","13819907","2021-06-04 05:15:17","1","247","<git><github><git-push><git-reset>","Pushing new commit from detached head back to origin main on github after git reset --hard","<p>while working on a project, I messed up and used the command <code>git reset --hard</code> to revert back to the latest commit(eg Commit ID: a12345) which is also the latest working version of the project. This resulted in the HEAD being detached from commit a12345.</p>
<p>Afterwards, I made some changes and decided to stage and commit these new changes (Commit ID: b12345). However, since my HEAD is already detached, I am unable to push these new changes in commit b12345 back to my main branch in github. I've tried using <code>git checkout</code> to set HEAD to be at commit b12345 but I'm still unable to push commit b12345 to github. Thus, my question is how to push my new commit from my detached head back to the main branch in github.</p>
<p>This image shows the workflow of my commits with &quot;latest commit&quot; being commit a12345 and the other commit being commit b12345:</p>
<p><a href=""https://i.stack.imgur.com/5tLn9.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/5tLn9.jpg"" alt="""" /></a></p>
","0","13819907","",""
"67847596","12377910","2021-06-05 07:59:00","0","547","<git><github><git-reset>","Accidentally deleted files localy by git reset --hard","<p>I was making a project. Coding all day long and at the end of the day decided to push my code to repo. Git status in the directory was a mess, so I decided to move it to another one. <br />
<br />
Then I found a solution on google, that says: &quot;Do git reset --hard and everything will fix itself.&quot; So I've done. Then all my local files including the directory are missing. Can I restore it somehow?</p>
<p>Git reflog show only commits on branch and I did make one before reset.</p>
","5","12377910","",""
"14573794","656912","2013-01-29 00:38:08","5","1714","<git><git-merge><git-remote><git-reset>","How do I change a commit message after a 'git-pull' auto-merge?","<p>Occasionally, my collaborators will ""panic"" when there is an automatic merge generated as the result a <code>git-pull</code>, and just accept the default commit message. Before this commit gets pushed, I want to be sure the message gets fixed, but <code>--amend</code> seems not to work. What is the best way to fix the message that's generated in this scenario. The best instructions I can come up with for them are</p>

<pre><code>git reset --soft HEAD~
git merge -m &lt;message&gt; &lt;the tracked remote branch&gt;
</code></pre>

<p>but that seems a bit scary (<code>reset</code>) and error prone (the remote tracked branch has to be entered explicitly).</p>

<p>Is there a simple way to change the commit message that was just generated by merging with a remote tracking repo? Why doesn't <code>--amend</code> work?</p>
","2","656912","0","0"
"16858069","1237653","2013-05-31 13:09:16","148","30224","<git><commit><git-rebase><git-reset><commit-message>","Git: How to reuse/retain commit messages after 'git reset'?","<p>As Git user I regular come across the situation, that I need to rework one or more commits in a way which do not fit into <code>--amend</code> or <code>rebase -i</code>with fixup commits. Typically I would do something like</p>

<pre><code>git reset HEAD~1
# hack, fix, hack
git commit -a
# argh .. do I need to retype my message?
</code></pre>

<p>I take sensible composed commit messages quite serious. They typically contain larger text with references &amp; justifications for the change. Until now, I'm quite annoyed on the lengthy process to recover my old commit message via an unsorted <code>git reflog</code>, <code>git log</code>and copy &amp; paste process.</p>

<p>Is there a better to tackle this? And how would it, if my comprises more than one commit?</p>

<p><em>Edit:</em> After a bit thinking about this I think what I'm looking for is some <em>git stash</em>-like functionality for commit messages where fixup/amend commits are not appropriate.</p>
","3","1237653","0","0"
"50617527","4089974","2018-05-31 05:53:48","0","1006","<git><git-stash><git-extensions><git-reset>","Git: Is it possible to recover my local unstaged changes (which were once staged) after a git reset --hard?","<p>I had some changes in my local branch which I added using <code>git add -A</code>.
Then for some reasons I unstaged these changes by doing <code>git reset</code>.
Then I opened GitExtensions and clicked on <em>Reset all changes</em>. (I somehow assumed that it was <em>Reset selected changes</em> :/)</p>

<p>So I ended up losing these changes.
Is it possible to recover these changes given that they were once added ?</p>

<p>The conversation here suggests that the changes can be recovered if they were ever staged. I could not find how though:
<a href=""https://groups.google.com/forum/#!topic/gitextensions/fyt9AXC6GR4"" rel=""nofollow noreferrer"">need to undo ""Reset Changes"" action git extensions</a></p>

<p>I found ways to recover if the changes were once stashed:
<a href=""https://stackoverflow.com/questions/89332/how-to-recover-a-dropped-stash-in-git"">how-to-recover-a-dropped-stash-in-git</a></p>

<p>The answers here suggest that it is not possible to recover the changes if they are not commited, staged, or stashed:
<a href=""https://stackoverflow.com/questions/7147680/accidentally-reverted-to-master-lost-uncommitted-changes?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa"">accidentally-reverted-to-master-lost-uncommitted-changes</a></p>
","1","4089974","",""
"16881851","1644531","2013-06-02 10:22:46","7","1192","<git><github><git-reset>","How I can store some local changes that survives git reset --hard","<p>I have some local changes (<em>not in separate files so .gitignore doesn't work</em>) that I don't want to commit.<br> 
I do <code>git reset --hard</code> sometimes after commit to clear occasional changes but obiously I also lose my useful changes that  I want to leave.<br>
<br>
How I can keep my useful changes?</p>
","0","1644531","0","0"
"68971506","2402577","2021-08-29 09:22:56","3","1196","<git><git-rebase><git-reset><git-squash>","What is the difference between `git rebase -i HEAD~N` and `git reset --soft HEAD~N`?","<p>We can squash the last N commits in <code>Git</code>. As I understand, we can squash last N commits using <a href=""https://stackoverflow.com/a/50443893/2402577""><code>git rebase -i HEAD~N</code></a> or <a href=""https://stackoverflow.com/a/5201642/2402577""><code>git reset --soft HEAD~N</code></a>.</p>
<p>In the answers for this question (<a href=""https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git"">Squash my last X commits together using Git</a>) most upvoted answer advices to use <code>git reset --soft HEAD~N</code>, which is not the accepted one. Accepted answer recommends <code>git rebase -i HEAD~N</code>. Hence I get confused, which one would be prefered to be used.</p>
<p>How those these approaches differ from each other? Which one is recommended or safe to be used?</p>
","3","2402577","",""
"16943391","408936","2013-06-05 15:05:33","1","320","<git><git-reset>","How to bring back changes after a ""git reset --hard""","<p>I realized that our branch dev is not very stable and reverted some changes to work on debugging them.</p>

<pre><code>git checkout dev
git checkout -b staged_dev
git push origin staged_dev
# go back to dev
git checkout dev
git reset 230086bf429307182ed9b35e19ad2581a3a2baf6 # last known stable state of dev
git reset --soft HEAD@{1}
git commit -m ""Revert to 230086bf429307182ed9b35e19ad2581a3a2baf6"" # this commit SHA = 270329c
git reset --hard
git push origin dev
</code></pre>

<p>This added a new commit on top of dev : <code>270329c</code></p>

<p>Since then another person has added some safe commits to dev and I have debugged staged_dev and added some commits. How do I undo <code>270329c</code> from dev and add the other commits of staged_dev into dev ?</p>

<p>reference stackoverflow question : <a href=""https://stackoverflow.com/questions/1895059/revert-to-a-commit-by-sha-hash"">Revert to a commit by a SHA hash in Git?</a></p>
","0","408936","",""
"50854195","9219409","2018-06-14 09:33:03","1","422","<git><git-checkout><git-reset>","Git status shows changes after git reset -- hard, 2nd checkout -- removes change","<p>For roughly one month now, I have a strange problem with git.</p>

<p>I work with Intellij in a large project with lots of commits, we use gerrit for code reviews and coordination.</p>

<p>Often I have to reset local changes or use intellij to rebase my changes.</p>

<ul>
<li><p>For a while now rebases fail because git can't properly reset files</p></li>
<li><p>The content of a file is properly reset but some flags or metadata are still changed.</p></li>
<li><p>Git Diff does not list any changes</p></li>
<li><p>Only after a second ""checkout -- file"" (intellij: revert changes), files are listed as 'unchanged'.</p></li>
</ul>

<p>I have attached a minimal example which shows that behavior:</p>

<pre><code>user@Windows10 MINGW64 /d
$ mkdir gittest

user@Windows10 MINGW64 /d
$ cd gittest/

user@Windows10 MINGW64 /d/gittest
$ git init
Initialized empty Git repository in D:/gittest/.git/

user@Windows10 MINGW64 /d/gittest (master)
$ echo test &gt;&gt; pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git add .

user@Windows10 MINGW64 /d/gittest (master)
$ git commit
[master (root-commit) e498342] testcommit
 1 file changed, 1 insertion(+)
 create mode 100644 pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
nothing to commit, working tree clean

user@Windows10 MINGW64 /d/gittest (master)
$ echo test &gt;&gt; pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   pom.xml

no changes added to commit (use ""git add"" and/or ""git commit -a"")

user@Windows10 MINGW64 /d/gittest (master)
$ git checkout -- pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
Changes not staged for commit:
  (use ""git add &lt;file&gt;..."" to update what will be committed)
  (use ""git checkout -- &lt;file&gt;..."" to discard changes in working directory)

        modified:   pom.xml

no changes added to commit (use ""git add"" and/or ""git commit -a"")

user@Windows10 MINGW64 /d/gittest (master)
$ git diff

user@Windows10 MINGW64 /d/gittest (master)
$ git checkout -- pom.xml

user@Windows10 MINGW64 /d/gittest (master)
$ git status
On branch master
nothing to commit, working tree clean
</code></pre>

<p>Same behavior with git reset --hard, only a consecutive git checkout -- file removes all changes.</p>

<p>Environment: Windows 10, Eset Antivirus, git version 2.16.0.windows.2, same behavior on SSD and HDD</p>
","6","9219409","",""
"51717734","4843013","2018-08-07 01:50:44","9","9359","<git><git-checkout><git-stash><git-reset>","Can't discard changes in git","<p>A week or two ago I took some files that I had been archiving with a simple <code>find |sed|tar|xz|gpg</code> bash script, unpacked them all, and put their contents in a git repo, commited, put the next archives content in the repo, committed (rinse and repeat) in order to have a nicer system.</p>
<p>All files were edited with on one of my two computers, both using Arch Linux, in either TeXstudio or Vim.</p>
<p>I tried to checkout an old version, but its flipping out---it won't let me due to changed that are outstanding. I tried everything I knew how, and then went on Google to find out things I didn't know.</p>
<p>There are a number of other questions on this subject. Unfortunately their answers have not helped me. For sake of completion I'll list the questions.</p>
<blockquote>
<p>$ git status<br />
On branch master<br />
Changes not staged for commit:<br />
(use &quot;git add ...&quot; to update what will be committed)<br />
(use &quot;git checkout -- ...&quot; to discard changes in working directory)</p>
<p>modified:   Arcs/arc1.tex<br />
modified:   Arcs/arc2.tex<br />
modified:   Arcs/frontmatter.tex</p>
<p>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</p>
</blockquote>
<p>Also, so people don't need to look, below, I already did the obvious ones.</p>
<pre><code>git reset --hard
git -a commit
git stash
git pull
</code></pre>
<p>as well as remove everything from the index and add it back.</p>
<h1><a href=""https://stackoverflow.com/questions/26879788/cant-discard-file-changes-in-git"">Cant discard file changes in GIT</a></h1>
<p>I'm not on Windows. Also, this should have anything to do with line endings since I'm the only user. There is no reason for there to be weird line endings.</p>
<h1><a href=""https://stackoverflow.com/questions/18536863/git-refuses-to-reset-discard-files/18875915"">Git refuses to reset/discard files</a></h1>
<pre><code>git reset --hard HEAD (among other possibilities)
</code></pre>
<hr />
<pre><code>git stash
git stash drop
</code></pre>
<hr />
<pre><code>git config core.autocrlf input
git rm --cached -r .
git reset --hard
git add .
git commit -m &quot;Normalize line endings&quot;
</code></pre>
<p>Not only did this not work but it increased the number of files that are misbehaving and also wrote 700+ lines to a file for. . .reasons. It wasn't even the file that was misbehaving.</p>
<h1><a href=""https://stackoverflow.com/questions/1575682/cant-seem-to-discard-changes-in-git"">Can&#39;t seem to discard changes in Git</a></h1>
<p>More end line stuff.</p>
<h1><a href=""https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git"">How do I discard unstaged changes in Git?</a></h1>
<pre><code>git clean -df
git checkout -- .
git checkout -- ./.

git checkout-index -a -f

git checkout --force master
</code></pre>
<h1>Things I didn't see, but tried anyway</h1>
<p>I tried commiting the changing <code>git commit -am &quot;WORK DAMN YOU!&quot;</code> then <code>git revert --hard HEAD^</code></p>
<p>I also tried pulling from my private remote, but was just told that the local repo was already up to date.</p>
<p>This is extremely frustrating.</p>
","12","4843013","0","0"
"69681026","61624","2021-10-22 17:36:21","0","63","<git><git-reset>","In git, is there a way to effectively reset --soft / revert; revert -n without changing history?","<p>OK, I think this won't be possible, but here's the scenario:</p>
<p>I pair program and I had to break pairs. I committed my work in progress, so the other pair could continue while I was gone, but they weren't able to work on it either. Now, it would really help to work from where I was before I committed. In other words, it would be nice if my <code>git status</code> looked like I ran a <code>git reset --soft head~</code>. But since they've already pulled, I <em>don't</em> want to change history by working on top of an actual <code>git reset --soft head~</code>.</p>
<p>I'm fine with that WIP commit being there. What I don't like is how my IDE shows no changes. I know I <em>could</em> revert then revert the revert without committing, but is there a better way?</p>
","15","61624","",""
"53353277","6856276","2018-11-17 16:40:35","1","300","<ruby><git><version-control><git-reset>","How to maintain multiple independent stable git branches","<p>Here's a git problem. I'm making a <a href=""https://github.com/globewalldesk/revuu"" rel=""nofollow noreferrer"">programming study review app</a> in pure (command line) Ruby. This app allows the user to design and schedule reviews of programming tasks, manage the files in which the tasks are performed, and run the result automatically from the app. For these purposes, I don't need git when there's a single file. But most advanced and web programming tasks involve editing and using multiple files, and to manage that, <a href=""https://stackoverflow.com/questions/53068195/any-gotchas-running-a-rails-installation-after-repeatedly-copying-it/"">I need to use git</a>, and I'm not great with git.</p>

<p>In the app, the maker of these more complex ""repotasks"" is expected to make questions based on a git branch (of his choice) of a repo (of his choice). So I figure what this requires is that, for each repo, there is a series of branches, each of which is maintained independently of each other, and each of which is relatively stable; and the app basically checks out branches as needed to answer questions. It <em>sounds</em> simple...</p>

<p>The problems are:</p>

<ul>
<li><p>After I make new branches (by hand, with <code>git checkout -b branch_name</code>) and add new files, I seem to be prevented from checking out <em>some</em> previous branches. For example:</p>

<p><code>$ git checkout foobar_JS_enabled_missing_prompt
error: The following untracked working tree files would be overwritten by checkout:
    display_nodename.html
Please move or remove them before you switch branches.
Aborting</code></p></li>
<li><p>I (think I) need to <code>git reset --hard</code> branches after a user finishes answering a question. But doing this seems to have inadvertently blanked a file I worked hard on in setting up a later branch. I think it's because I hard-reset an earlier branch in which said file was blank.</p></li>
</ul>

<p>The git interaction the app does (mostly using <a href=""https://github.com/ruby-git/ruby-git"" rel=""nofollow noreferrer"">ruby-git</a>) so far is:</p>

<ul>
<li>Actually create repos and branches by hand.</li>
<li>List branches for question-makers to choose from.</li>
<li><p>Checkout branches when they are chosen, using</p>

<p><code>g = Git.open(""data/repos/#{repo}"")
g.branch(branch).checkout</code></p></li>
<li><p>Do a hard reset of a branch that a question is based on when the user starts answering the question, using:</p>

<p><code>g = Git.open(""data/repos/#{repo}"")
g.reset_hard</code></p></li>
<li><p>I haven't done this yet, but I want to create an archive branch for each question, i.e., I want to let a question-answerer to review an old answer, then switch to the main branch for that question in order to create a new answer.</p></li>
</ul>

<p>Basically, I want frozen versions of each branch, but the process (described above) seems to create unwanted interactions. I thought branches were isolated from each other automatically. What am I doing wrong? What do I need to do in order to freeze the last-committed version of each branch, regardless of what happens in other branches, while I switch frequently between branches?</p>

<p>UPDATE (11/18): I will leave this as a comment rather than an answer, because the question is a little obscure. I never realized that the index and tree are independent of branches. So my code actually had a few subtle bugs relating to the fact that I was letting my tree get unclean. In a couple of places, I needed to hard reset the code before letting an answerer start work on an answer, even if, most of the time, that isn’t necessary.  I also needed to hard reset the code after an answerer finishes.  Another thing I needed to do was to check what branch is currently checked out and switch to the right one ( I had already done this, but not everywhere I should’ve). </p>

<p>Seems to be working now, and I’m not able to replicate the bugs anymore. </p>
","4","6856276","0","0"
"37420642","1479974","2016-05-24 17:55:21","266","298057","<git><git-commit><git-reset><git-revert>","How to undo the last commit in git","<p>By mistake, I did <code>git add .</code> and <code>git commit</code> in the <code>develop</code> branch. But luckily, I did not do <code>git push</code>.</p>

<p>So I wanted to revert it back to original state.</p>

<p>I tried <code>git reset --soft</code> and <code>git reset HEAD --hard</code> but looks like I have messed it up.</p>

<p>How do I fix this? I want to go back to original state and possibly keep the code changes.</p>
","0","1479974","0","0"
"71153755","554958","2022-02-17 07:05:41","0","62","<git><merge><branching-and-merging><git-reset><git-revert>","revert git commit in long running branch","<p>I have a 3 branches from 3 people working on 3 features. Let say my branch is named <code>branch-A</code>, and there are 2 other branches named <code>branch-B</code> and <code>branch-C</code>.</p>
<p>This is what happened in <code>branch-A</code>:</p>
<pre><code>&lt;hash-A-001&gt; add commit for feature 1
&lt;hash-A-002&gt; add more commit for feature 1
&lt;hash-A-003&gt; add more commit for feature 1 (push to remote)
&lt;hash-A-004&gt; (accidentally!!!) merge master branch (contains commits and changes)
&lt;hash-A-005&gt; merge from branch-B (with a lot of commits and changes)
&lt;hash-A-006&gt; merge from branch-C (with a lot of commits and changes)
&lt;hash-A-007&gt; reset hash-A-004 because it is accidental merge
&lt;hash-A-008&gt; add more commit for feature 1
&lt;hash-A-009&gt; add more commit for feature 1
...
...
&lt;hash-A-0020&gt; add more commit for feature 1
</code></pre>
<p>Now at the point in <code>&lt;hash-A-0020&gt;</code>, I just realized that commit from <code>&lt;hash-A-005&gt;</code> and <code>&lt;hash-A-006&gt;</code> gone because what I've done in <code>&lt;hash-A-007&gt;</code> (which is, reseting commit <code>&lt;hash-A-004&gt;</code>). Thus all changes and features developed in <code>branch-B</code> and <code>branch-C</code> is not exist in my branch (<code>branch-A</code>).</p>
<p>My question is, what should I do to make sure that:</p>
<ol>
<li>Files, changes and commits caused by <code>hash-A-004 ((accidentally!!!) merge master branch)</code> removed from my branch.</li>
<li>I want to keep changes and commit from <code>&lt;hash-A-005&gt; (merge from branch-B)</code> and <code>&lt;hash-A-006&gt; merge from branch-C</code> as well as commit from <code>hash-A-008</code> to <code>hash-A-020</code> in my branch. (Basically, preserve all commits except <code>hash-A-004</code> whenever possible)</li>
</ol>
<p>?</p>
<p>I was thinking <code>git revert &lt;hash-A-004&gt;</code>, but I want to make sure that I'm not messing up more by doing wrong action not missing anything from <code>branch-B</code> and <code>branch-C</code>.</p>
<p>Some additional information:</p>
<ol>
<li>This is long running branch, so <code>&lt;hash-A-004&gt;</code> to <code>hash-A-007</code> was happened like 2 or 3 weeks ago.</li>
<li>I actually not sure what was command I issued when performing <code>&lt;hash-A-007&gt;</code>. Either <code>git revert ....</code> or <code>git reset --hard</code>. But I think it was <code>reset</code> command since I thought there's no other commits after my accidental merge.</li>
<li><code>branch-B</code> and <code>branch-C</code> is not available anymore, either locally or in remote repository. But it is already merged in <code>master</code> branch, in the same point when it merged with <code>branch-A</code>.</li>
</ol>
","3","554958","",""
"38520340","3959480","2016-07-22 07:13:15","1","108","<git><git-commit><git-reset><git-revert>","Fixing a fixing of last git commit","<p>I made a mistake and so I needed to <a href=""https://stackoverflow.com/questions/927358/how-to-undo-last-commits"">undo the last commit</a>.</p>

<p>The usual steps are:</p>

<pre><code>git reset --soft HEAD~
// make changes...
git commit -c ORIG_HEAD
</code></pre>

<p>However I did this by accident:</p>

<pre><code>git reset --soft HEAD~
// make changes...
git commit -m ""Some new message""     // &lt;-- shouldn't have done this!!
</code></pre>

<p>Is it equivalent? If not, what are the implications, and how can I (should I?) ""undo the undo""? </p>
","2","3959480","",""
"71314320","6851045","2022-03-01 20:33:09","0","425","<git><github><git-reset>","Delete multiple old commits in git","<p>Let's say I have a branch with a bunch of commits in it, it's there a way where I can delete almost all of the commits in there, except for the last 2 or 3 ones?</p>
<p>For example, I have this on my branch:</p>
<pre><code>+ Commit1
+ Commit2
+ Commit3
+ Commit4
+ Commit5
+ Commit6
+ Commit7
+ Commit8
+ Commit9
+ Commit10
+ Commit11
+ Commit12
+ Commit13
+ Commit14
+ Commit15
+ Commit16
+ Commit17
+ Commit18
+ Commit19
+ Commit20
+ Commit21
+ Commit22
+ Commit23
+ Commit24
+ Commit25
+ Commit26
+ Commit27
+ Commit28
</code></pre>
<p>I only want to keep <code>Commit26, Commit 27</code> and <code>Commit28</code> (the most recent ones, so to speak)</p>
<p>Is there a way I can do this?</p>
","2","6851045","",""
"71436458","10893616","2022-03-11 09:36:56","-1","2465","<git><git-reset>","How do I undo a ""git reset --hard ~HEAD"" followed by ""git reset ORIG_HEAD""?","<p>Originally, I wanted to squash my last 6 commits into one. So I followed <a href=""https://stackoverflow.com/questions/5189560/squash-my-last-x-commits-together-using-git"">this</a> answer and ran the following:</p>
<pre><code>git reset --hard HEAD~3
git reset --hard HEAD~2
git reset --hard HEAD~1
</code></pre>
<p>Then I saw that my code progress was gone and I was afraid that I might have lost my progress, so I wanted to <strong>undo</strong> that reset. So I followed <a href=""https://stackoverflow.com/questions/2510276/how-to-undo-git-reset"">this</a> answer and ran:</p>
<pre><code>git reset ORIG_HEAD
</code></pre>
<p>After this, I thought I would get to my most recent code progress, but I found 67 unstaged changes after this last reset and the code doesn't seem to have been recovered.</p>
<p>So, what should I do now to recover my code? I wanted to be very sure before I proceed or try other answers.</p>
","4","10893616","",""
"71865645","5858752","2022-04-14 01:58:01","1","2274","<git><git-reset>","What does `git reset --hard origin` do?","<p>If you want to reset your local branch to the remote branch, you can do</p>
<pre><code>git fetch
git reset --hard origin/master
</code></pre>
<p>I've actually been using</p>
<pre><code>git reset --hard origin
</code></pre>
<p>What does this do?</p>
","5","5858752","",""
"71878000","10511524","2022-04-14 21:52:37","0","41","<git><git-reset>","How does git reset complete so quickly?","<p>I have a chromium repository which is around 60GB in size(30GB downloaded from GitHub). I made quite some changes to the point I messed it up. Permanently deleted files of around 2GB in size and added almost the same amount of files in the repo from another source. After the build failed multiple times, I did a <code>git reset</code> and it took around 15 seconds to bring the repo back to its original form. So how does this work? Does the system keeps track of deleted files locally as my internet connection is really poor and downloading 2GB of data usually takes 1 hour so downloading from the internet is not possible.</p>
","2","10511524","",""
"72119326","9468093","2022-05-04 20:49:19","0","37","<jgit><git-reset><git-revert>","git reset commit_id with trailing dot not working via JGIT","<p>I created git repo with three commits:</p>
<pre><code>commit 99c3de6f701ed9e60d8a2fa0f7c435bc738685dc (HEAD -&gt; master, origin/master, origin/HEAD)
    added c

commit 6a2e2b1fcb6cf54bb001c7f8618b623b10974cc2
    added b

commit e68e2a7e491a627e52d3ba83027897f800344843
    added a
</code></pre>
<p>In git shell <code>git reset e68e2a7e491a627e52d3ba83027897f800344843 -- .</code> resets the repository to the first commit and keeps all history and HEAD point to MASTER at the third commit.</p>
<p>I've tried to develop the same command using JGIT:</p>
<pre><code>ResetCommand reset = git.reset();
reset.setRef(&quot;e68e2a7e491a627e52d3ba83027897f800344843&quot;);
reset.addPath(&quot;.&quot;);
reset.call();
</code></pre>
<p>But JGIT command has different behavior - it resets MASTER to the first commit and some history lost:</p>
<pre><code>commit e68e2a7e491a627e52d3ba83027897f800344843 (HEAD -&gt; master)
    added a
</code></pre>
<p>Is it a bug or I should design JGIT reset command another way to get required behavior?</p>
","2","9468093","",""
"72209703","16699209","2022-05-12 03:09:27","-2","218","<git><rebase><git-reset>","git rebase origin/master vs git reset origin/master if you have no local commits","<p>If you have no local commits or changes on your branch, is there any difference between doing a <code>git rebase origin/master</code> vs <code>git reset origin/master</code> after doing <code>git fetch</code>?</p>
<p>It seems the two equivalent when I try it empirically.</p>
","1","16699209","",""
"72215361","10864356","2022-05-12 12:12:31","-2","36","<git><git-reset><git-status>","Git: some changes weren't reversed by `git reset --hard HEAD`","<p>I made changes in my project, then did <code>git reset --hard HEAD</code>, but I notice that <em>some</em> of the changes are still present. When I run <code>git status</code> I get <code>Your branch is behind '&lt;my branch&gt;' by 1 commit, and can be fast-forwarded.</code></p>
<p>Can anyone explain this message, and advise me on how to approach it so that I can undo all the changes that I made after my previous commit?</p>
","4","10864356","",""
"72299377","5221310","2022-05-19 06:04:44","1","562","<bash><git><rm><git-reset>","Recover deleted files from local git repo?","<p>I accidentally <code>rm</code>'d some files in a git repo.  Those files had been changed a lot and hadn't been <code>git add</code>'d yet.</p>
<p>Is there a way to restore the files to their 'last saved' state?</p>
<p>UPDATE</p>
<p>Just wanted to thank everyone for your responses, it wasn't a huge deal, I just deleted all my dotfiles :`(</p>
","2","5221310","0","0"
"54438656","7598461","2019-01-30 10:42:00","2","447","<git><git-reset>","Does git reset --soft only change hash values?","<p>In this post the author does a good job of explaining the 3 options of git reset (soft, mixed, hard):
<a href=""https://www.atlassian.com/git/tutorials/undoing-changes/git-reset"" rel=""nofollow noreferrer"">https://www.atlassian.com/git/tutorials/undoing-changes/git-reset</a></p>

<p>He uses the ""three trees"" as a device to represent 1) working tree, 2) staging area, 3) ""commit history/commit refs"":</p>

<p><code>--hard</code> resets (1),(2),(3); </p>

<p><code>--mixed</code> resets (2) and (3);</p>

<p><code>--soft</code> only changes (3).</p>

<p>It is what (3) actually represents I'm a bit unclear about. I can see how <code>git reset --soft</code> can be used to change which commit a branch points to. But I don't know why the word history is being used here. What exactly has been modified other than the commit which the branch and HEAD both references?</p>

<p>Edit: In particular does <code>git reset --soft &lt;SHA1&gt;</code> <em>only</em> edit i) the hash value inside <code>.git/refs/heads/master</code> file and ii) the hash value inside <code>.git/HEAD</code> and nothing else?</p>
","1","7598461","",""
"54551306","10555795","2019-02-06 10:24:53","0","26","<git><git-reset>","Recover data after command git reset --hard","<p>I wrote some code after the last commit. 
After that, I accidentally did git reset --hard.
My code rolled back to the last commit.</p>

<p>Can I restore uncommitted changes?</p>
","2","10555795","",""
"73325105","8475637","2022-08-11 18:06:28","0","14","<git><command><git-branch><git-reset>","How is work the git reset command for overwrite local changes with remote","<p>I am new in git and read some information about this command <code>git reset --hard @{u}</code> for resetting your local changes and overwriting them with the branch's remote changes. But I don't have a clear idea yet about how is work this instruction, hope you can help with some practical examples.
Thanks,</p>
","2","8475637","",""
"55516026","4091187","2019-04-04 12:29:31","0","99","<git><github><git-reset>","How can I restore files deleted using git hard reset?","<p>I accidentally used <code>git reset -hard</code> on my files in server and it had files which are not added or committed using <code>git add</code> or <code>git commit</code>. How can I restore those files which are not staged? Please help.</p>
","3","4091187","0","0"
"55592342","1973933","2019-04-09 11:58:26","0","4295","<git><git-reset>","git reset --soft ""HEAD^6"" what does it means?","<p>I ran <code>git reset --soft ""HEAD^6""</code> by mistake on my local repo after that I ran <code>git reset --soft ""HEAD^""</code></p>

<p>Now i can find more than 100 file with local changes </p>

<p>What <code>git reset --soft ""HEAD^6""</code> does it mean ?</p>

<p><strong>Edit:</strong> for those who will ask why i did that, it was a typo. </p>
","3","1973933","0","0"
"72653071","13589114","2022-06-17 00:06:11","0","80","<git><git-reset>","Undo git reset --hard before first commit","<p>Yeah I did an oopsie maybe. I hope this question gets enough attention because the title sounds like many different other questions here on Stackoverflow, but none of the answers I've found worked. But let me explain first:</p>
<p>(Tired,) I decided to add all my .config files to git and push them. (I was stupid+tired enough to not backup).
I created a new repository with <code>git init</code> and added everything with <code>git add -A</code>. I then thought that making a .gitignore with some directories would be smart before adding and commiting everything, so I wanted to undo my <code>git add -A</code>.</p>
<p>That's where the mistake happened, I used <code>git reset --hard</code> instead <code>git rm --cached *</code> to unstage the files.</p>
<p>Unfortunately, git did a <code>git rm</code> on everything, since there was no previous commit. And that's where I am now. All config files gone. Many solutions like <code>git update-ref -d HEAD</code>,   <code>git reset (--hard) HEAD~1</code> and
<code>git reset</code> followed by <code>git ls-files -d -z | xargs -0 git checkout --</code> don't because there is no commit and no branch created yet.</p>
<p>I also tried to find the deleted directories and files in the .git directory or trash, but this didn't work either.</p>
<p>Does one of you have an idea how I could get my config files back? All I want to do is to undo the git reset...</p>
","5","13589114","",""
"72715741","3131685","2022-06-22 12:42:35","2","118","<git><delete-file><git-checkout><git-reset>","Accidently removed files from local folder after running ""git checkout origin/main""","<p>I am new to git.</p>
<p>I accidentally deleted all project files from my local machines after running <code>git checkout origin/main</code> command.</p>
<p>I have checked and could not find the files in the <strong>Recycle bin</strong> as well. How can I recover those lost files?</p>
<p>I was following a script that I have written when I was learning Git and this was the first time that I tried it on an actual project.  Following is the message I receive. Should I run <code>git switch</code>. If yes, how.</p>
<p><a href=""https://i.stack.imgur.com/T6l4N.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/T6l4N.png"" alt=""Message received after running the checkout command"" /></a></p>
<p>I do not want to do something stupid again and loose whatever I am left with. How can I recover those lost files?</p>
","5","3131685","0","0"
"72729282","19334240","2022-06-23 11:20:24","2","445","<git><github><git-commit><git-push><git-reset>","i lost my readme file because i did 'git push --force' in local but I don't know how to get it back. The readme file was created in remote","<p>I lost my readme file because I did</p>
<pre><code>git push -f origin main
</code></pre>
<p>in local. But I don't know how to get it back.</p>
<p>I found this solution</p>
<pre><code>git reset before-commit
git push -f origin main
</code></pre>
<p>The readme file was created in remote. So before commit doesn't have readmefile<br />
so i can't use this solution.<br />
I want my file back</p>
<p>I don't know if I explained it well because I don't speak English, but thank you in advance.</p>
","1","19334240","",""
"72793064","12342784","2022-06-28 20:57:30","1","162","<git><version-control><commit><git-reset>","Lost files after running git reset --hard before initial commit","<p>So, I did something very stupid: i started a project, did quite a lot of work on it, and then I initialized a git repo. I ran <code>git add</code> to add all of the project files, but i wanted to exclude one file, so I quickly ran <code>git reset --hard</code> <strong>before making an initial commit</strong>.</p>
<p>Now all the files have disappeared from the repo and I have no clue how to restore them, so any help will be appreciated!</p>
","3","12342784","",""
"56203680","9076811","2019-05-18 23:39:46","0","114","<git><git-reset>","How to revert git after hard reset","<p>I am trying to revert hard reset in my local branch</p>

<p>I was trying to commit changes to github repository. But it said your current branch is behind. I found hard reset option. I did hard reset after i pulled and pushed files but it changed all files to files in github repo. I lost all the local changes.<a href=""https://i.stack.imgur.com/Kmv0o.png"" rel=""nofollow noreferrer"">gitdash-1</a> <a href=""https://i.stack.imgur.com/6Jw0Y.png"" rel=""nofollow noreferrer"">gitdash-2</a> <a href=""https://i.stack.imgur.com/PxhLr.png"" rel=""nofollow noreferrer"">gitdash-3</a> <a href=""https://i.stack.imgur.com/Ja4CH.png"" rel=""nofollow noreferrer"">here is the deleted files i wanna get them back</a></p>
","1","9076811","",""
"56233198","2531895","2019-05-21 07:26:15","0","79","<git><git-reset>","git reset --hard will make source code lost permanently when the file is added to the staging zone but not in repository","<p>I add some new files to index</p>

<pre><code>git add .
</code></pre>

<p>then reset </p>

<pre><code>git reset --hard
</code></pre>

<p>git deleted these files in my working tree, there are not in repository previously, they are all lost. I lost all my data.</p>
","5","2531895","",""
"56249622","970171","2019-05-22 05:05:32","0","92","<git><git-push><git-remote><git-reset>","How to permanently undo recent commits from git remote but keep it in my local?","<p>I made a git repo (only a master branch) with one remote and one local. There are no other users who have cloned it but the remote path can be cloned by a few users.</p>

<p>My local clone is at commit #17 and I have pushed up til commit #12 to the remote. I’ve come to realize that every commit after #6 should not be shared and the remote needs to (for now) remain at #6. </p>

<p>I don’t want to lose all the commits 1-17 and the history but in order to reset the remote my understanding is I have to first reset local to #6 and push -f that. Is it possible for me to reset the remote to #6 while locally remaining ahead at 17 so that if someone clones the remote they can’t see the vulnerable commits?</p>

<p>My idea is that I would need to clone my local to a different local first so that the second local keeps all 17 commits and history before executing the reset followed by the push -f. Is this how one would approach this situation? </p>
","0","970171","",""
"73032931","4768946","2022-07-19 07:39:50","0","2085","<git><repository><git-merge><git-pull><git-reset>","git merge conflicts even with git reset --hard","<p>I am working on a branch on a repository. I commit and push changes every day to origin from one computer. Then on another computer the next day I do <code>git pull</code> and expect the changes pushed from the day before to be updated in my working directory.</p>
<p>I keep receiving :</p>
<pre><code>CONFLICT (content): Merge conflict in src/main.c
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>
<p>Ok, so I then do a <code>git reset --hard HEAD</code> , which should undo any local and uncommited changes that I have, and then do <code>git pull</code> again. However, the conflict error remains.</p>
<p>This is not the behavior I expect. Previously for me, <code>git reset --hard HEAD</code> followed by <code>git pull</code> would solve this. But not anymore:)</p>
<p>Does anyone know what I am doing wrong here? Thanks</p>
","8","4768946","",""